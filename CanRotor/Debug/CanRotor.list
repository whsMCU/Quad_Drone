
CanRotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000195bc  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d80  080196f0  080196f0  000296f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a470  0801a470  00030234  2**0
                  CONTENTS
  4 .ARM          00000000  0801a470  0801a470  00030234  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a470  0801a470  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a470  0801a470  0002a470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a474  0801a474  0002a474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0801a478  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001348  20000238  0801a6ac  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001580  0801a6ac  00031580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000245cf  00000000  00000000  0003025d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000051da  00000000  00000000  0005482c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016d0  00000000  00000000  00059a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014d0  00000000  00000000  0005b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ffe5  00000000  00000000  0005c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ae51  00000000  00000000  0007c58d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094b73  00000000  00000000  000973de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012bf51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a80  00000000  00000000  0012bfcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000238 	.word	0x20000238
 800014c:	00000000 	.word	0x00000000
 8000150:	080196d4 	.word	0x080196d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000023c 	.word	0x2000023c
 800016c:	080196d4 	.word	0x080196d4

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_frsub>:
 8000b9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba0:	e002      	b.n	8000ba8 <__addsf3>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_fsub>:
 8000ba4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba8 <__addsf3>:
 8000ba8:	0042      	lsls	r2, r0, #1
 8000baa:	bf1f      	itttt	ne
 8000bac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb0:	ea92 0f03 	teqne	r2, r3
 8000bb4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbc:	d06a      	beq.n	8000c94 <__addsf3+0xec>
 8000bbe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc6:	bfc1      	itttt	gt
 8000bc8:	18d2      	addgt	r2, r2, r3
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	4048      	eorgt	r0, r1
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	bfb8      	it	lt
 8000bd2:	425b      	neglt	r3, r3
 8000bd4:	2b19      	cmp	r3, #25
 8000bd6:	bf88      	it	hi
 8000bd8:	4770      	bxhi	lr
 8000bda:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4249      	negne	r1, r1
 8000bfa:	ea92 0f03 	teq	r2, r3
 8000bfe:	d03f      	beq.n	8000c80 <__addsf3+0xd8>
 8000c00:	f1a2 0201 	sub.w	r2, r2, #1
 8000c04:	fa41 fc03 	asr.w	ip, r1, r3
 8000c08:	eb10 000c 	adds.w	r0, r0, ip
 8000c0c:	f1c3 0320 	rsb	r3, r3, #32
 8000c10:	fa01 f103 	lsl.w	r1, r1, r3
 8000c14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__addsf3+0x78>
 8000c1a:	4249      	negs	r1, r1
 8000c1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c24:	d313      	bcc.n	8000c4e <__addsf3+0xa6>
 8000c26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2a:	d306      	bcc.n	8000c3a <__addsf3+0x92>
 8000c2c:	0840      	lsrs	r0, r0, #1
 8000c2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c32:	f102 0201 	add.w	r2, r2, #1
 8000c36:	2afe      	cmp	r2, #254	; 0xfe
 8000c38:	d251      	bcs.n	8000cde <__addsf3+0x136>
 8000c3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c42:	bf08      	it	eq
 8000c44:	f020 0001 	biceq.w	r0, r0, #1
 8000c48:	ea40 0003 	orr.w	r0, r0, r3
 8000c4c:	4770      	bx	lr
 8000c4e:	0049      	lsls	r1, r1, #1
 8000c50:	eb40 0000 	adc.w	r0, r0, r0
 8000c54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	d1ed      	bne.n	8000c3a <__addsf3+0x92>
 8000c5e:	fab0 fc80 	clz	ip, r0
 8000c62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c66:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6e:	bfaa      	itet	ge
 8000c70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c74:	4252      	neglt	r2, r2
 8000c76:	4318      	orrge	r0, r3
 8000c78:	bfbc      	itt	lt
 8000c7a:	40d0      	lsrlt	r0, r2
 8000c7c:	4318      	orrlt	r0, r3
 8000c7e:	4770      	bx	lr
 8000c80:	f092 0f00 	teq	r2, #0
 8000c84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c88:	bf06      	itte	eq
 8000c8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8e:	3201      	addeq	r2, #1
 8000c90:	3b01      	subne	r3, #1
 8000c92:	e7b5      	b.n	8000c00 <__addsf3+0x58>
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d021      	beq.n	8000ce8 <__addsf3+0x140>
 8000ca4:	ea92 0f03 	teq	r2, r3
 8000ca8:	d004      	beq.n	8000cb4 <__addsf3+0x10c>
 8000caa:	f092 0f00 	teq	r2, #0
 8000cae:	bf08      	it	eq
 8000cb0:	4608      	moveq	r0, r1
 8000cb2:	4770      	bx	lr
 8000cb4:	ea90 0f01 	teq	r0, r1
 8000cb8:	bf1c      	itt	ne
 8000cba:	2000      	movne	r0, #0
 8000cbc:	4770      	bxne	lr
 8000cbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc2:	d104      	bne.n	8000cce <__addsf3+0x126>
 8000cc4:	0040      	lsls	r0, r0, #1
 8000cc6:	bf28      	it	cs
 8000cc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	4770      	bx	lr
 8000cce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd2:	bf3c      	itt	cc
 8000cd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd8:	4770      	bxcc	lr
 8000cda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce6:	4770      	bx	lr
 8000ce8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cec:	bf16      	itet	ne
 8000cee:	4608      	movne	r0, r1
 8000cf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf4:	4601      	movne	r1, r0
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	bf06      	itte	eq
 8000cfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfe:	ea90 0f01 	teqeq	r0, r1
 8000d02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_ui2f>:
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	e004      	b.n	8000d18 <__aeabi_i2f+0x8>
 8000d0e:	bf00      	nop

08000d10 <__aeabi_i2f>:
 8000d10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	bf48      	it	mi
 8000d16:	4240      	negmi	r0, r0
 8000d18:	ea5f 0c00 	movs.w	ip, r0
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d24:	4601      	mov	r1, r0
 8000d26:	f04f 0000 	mov.w	r0, #0
 8000d2a:	e01c      	b.n	8000d66 <__aeabi_l2f+0x2a>

08000d2c <__aeabi_ul2f>:
 8000d2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d30:	bf08      	it	eq
 8000d32:	4770      	bxeq	lr
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e00a      	b.n	8000d50 <__aeabi_l2f+0x14>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_l2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d48:	d502      	bpl.n	8000d50 <__aeabi_l2f+0x14>
 8000d4a:	4240      	negs	r0, r0
 8000d4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d50:	ea5f 0c01 	movs.w	ip, r1
 8000d54:	bf02      	ittt	eq
 8000d56:	4684      	moveq	ip, r0
 8000d58:	4601      	moveq	r1, r0
 8000d5a:	2000      	moveq	r0, #0
 8000d5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d60:	bf08      	it	eq
 8000d62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6a:	fabc f28c 	clz	r2, ip
 8000d6e:	3a08      	subs	r2, #8
 8000d70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d74:	db10      	blt.n	8000d98 <__aeabi_l2f+0x5c>
 8000d76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d88:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	f020 0001 	biceq.w	r0, r0, #1
 8000d96:	4770      	bx	lr
 8000d98:	f102 0220 	add.w	r2, r2, #32
 8000d9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da0:	f1c2 0220 	rsb	r2, r2, #32
 8000da4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dac:	eb43 0002 	adc.w	r0, r3, r2
 8000db0:	bf08      	it	eq
 8000db2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_fmul>:
 8000db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc0:	bf1e      	ittt	ne
 8000dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc6:	ea92 0f0c 	teqne	r2, ip
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d06f      	beq.n	8000eb0 <__aeabi_fmul+0xf8>
 8000dd0:	441a      	add	r2, r3
 8000dd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd6:	0240      	lsls	r0, r0, #9
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dde:	d01e      	beq.n	8000e1e <__aeabi_fmul+0x66>
 8000de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dec:	fba0 3101 	umull	r3, r1, r0, r1
 8000df0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df8:	bf3e      	ittt	cc
 8000dfa:	0049      	lslcc	r1, r1, #1
 8000dfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e00:	005b      	lslcc	r3, r3, #1
 8000e02:	ea40 0001 	orr.w	r0, r0, r1
 8000e06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0a:	2afd      	cmp	r2, #253	; 0xfd
 8000e0c:	d81d      	bhi.n	8000e4a <__aeabi_fmul+0x92>
 8000e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e16:	bf08      	it	eq
 8000e18:	f020 0001 	biceq.w	r0, r0, #1
 8000e1c:	4770      	bx	lr
 8000e1e:	f090 0f00 	teq	r0, #0
 8000e22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e26:	bf08      	it	eq
 8000e28:	0249      	lsleq	r1, r1, #9
 8000e2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e32:	3a7f      	subs	r2, #127	; 0x7f
 8000e34:	bfc2      	ittt	gt
 8000e36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3e:	4770      	bxgt	lr
 8000e40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	3a01      	subs	r2, #1
 8000e4a:	dc5d      	bgt.n	8000f08 <__aeabi_fmul+0x150>
 8000e4c:	f112 0f19 	cmn.w	r2, #25
 8000e50:	bfdc      	itt	le
 8000e52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e56:	4770      	bxle	lr
 8000e58:	f1c2 0200 	rsb	r2, r2, #0
 8000e5c:	0041      	lsls	r1, r0, #1
 8000e5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e62:	f1c2 0220 	rsb	r2, r2, #32
 8000e66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6e:	f140 0000 	adc.w	r0, r0, #0
 8000e72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e76:	bf08      	it	eq
 8000e78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e7c:	4770      	bx	lr
 8000e7e:	f092 0f00 	teq	r2, #0
 8000e82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0040      	lsleq	r0, r0, #1
 8000e8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8e:	3a01      	subeq	r2, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fmul+0xce>
 8000e92:	ea40 000c 	orr.w	r0, r0, ip
 8000e96:	f093 0f00 	teq	r3, #0
 8000e9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9e:	bf02      	ittt	eq
 8000ea0:	0049      	lsleq	r1, r1, #1
 8000ea2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea6:	3b01      	subeq	r3, #1
 8000ea8:	d0f9      	beq.n	8000e9e <__aeabi_fmul+0xe6>
 8000eaa:	ea41 010c 	orr.w	r1, r1, ip
 8000eae:	e78f      	b.n	8000dd0 <__aeabi_fmul+0x18>
 8000eb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	bf18      	it	ne
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d00a      	beq.n	8000ed6 <__aeabi_fmul+0x11e>
 8000ec0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec4:	bf18      	it	ne
 8000ec6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	d1d8      	bne.n	8000e7e <__aeabi_fmul+0xc6>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	4770      	bx	lr
 8000ed6:	f090 0f00 	teq	r0, #0
 8000eda:	bf17      	itett	ne
 8000edc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee0:	4608      	moveq	r0, r1
 8000ee2:	f091 0f00 	teqne	r1, #0
 8000ee6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eea:	d014      	beq.n	8000f16 <__aeabi_fmul+0x15e>
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d101      	bne.n	8000ef6 <__aeabi_fmul+0x13e>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	d10f      	bne.n	8000f16 <__aeabi_fmul+0x15e>
 8000ef6:	ea93 0f0c 	teq	r3, ip
 8000efa:	d103      	bne.n	8000f04 <__aeabi_fmul+0x14c>
 8000efc:	024b      	lsls	r3, r1, #9
 8000efe:	bf18      	it	ne
 8000f00:	4608      	movne	r0, r1
 8000f02:	d108      	bne.n	8000f16 <__aeabi_fmul+0x15e>
 8000f04:	ea80 0001 	eor.w	r0, r0, r1
 8000f08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f14:	4770      	bx	lr
 8000f16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1e:	4770      	bx	lr

08000f20 <__aeabi_fdiv>:
 8000f20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f28:	bf1e      	ittt	ne
 8000f2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2e:	ea92 0f0c 	teqne	r2, ip
 8000f32:	ea93 0f0c 	teqne	r3, ip
 8000f36:	d069      	beq.n	800100c <__aeabi_fdiv+0xec>
 8000f38:	eba2 0203 	sub.w	r2, r2, r3
 8000f3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f40:	0249      	lsls	r1, r1, #9
 8000f42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f46:	d037      	beq.n	8000fb8 <__aeabi_fdiv+0x98>
 8000f48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	bf38      	it	cc
 8000f5c:	005b      	lslcc	r3, r3, #1
 8000f5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f66:	428b      	cmp	r3, r1
 8000f68:	bf24      	itt	cs
 8000f6a:	1a5b      	subcs	r3, r3, r1
 8000f6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f74:	bf24      	itt	cs
 8000f76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f82:	bf24      	itt	cs
 8000f84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f90:	bf24      	itt	cs
 8000f92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	bf18      	it	ne
 8000f9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa2:	d1e0      	bne.n	8000f66 <__aeabi_fdiv+0x46>
 8000fa4:	2afd      	cmp	r2, #253	; 0xfd
 8000fa6:	f63f af50 	bhi.w	8000e4a <__aeabi_fmul+0x92>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb0:	bf08      	it	eq
 8000fb2:	f020 0001 	biceq.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc0:	327f      	adds	r2, #127	; 0x7f
 8000fc2:	bfc2      	ittt	gt
 8000fc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fcc:	4770      	bxgt	lr
 8000fce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	3a01      	subs	r2, #1
 8000fd8:	e737      	b.n	8000e4a <__aeabi_fmul+0x92>
 8000fda:	f092 0f00 	teq	r2, #0
 8000fde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe2:	bf02      	ittt	eq
 8000fe4:	0040      	lsleq	r0, r0, #1
 8000fe6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fea:	3a01      	subeq	r2, #1
 8000fec:	d0f9      	beq.n	8000fe2 <__aeabi_fdiv+0xc2>
 8000fee:	ea40 000c 	orr.w	r0, r0, ip
 8000ff2:	f093 0f00 	teq	r3, #0
 8000ff6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffa:	bf02      	ittt	eq
 8000ffc:	0049      	lsleq	r1, r1, #1
 8000ffe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001002:	3b01      	subeq	r3, #1
 8001004:	d0f9      	beq.n	8000ffa <__aeabi_fdiv+0xda>
 8001006:	ea41 010c 	orr.w	r1, r1, ip
 800100a:	e795      	b.n	8000f38 <__aeabi_fdiv+0x18>
 800100c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001010:	ea92 0f0c 	teq	r2, ip
 8001014:	d108      	bne.n	8001028 <__aeabi_fdiv+0x108>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	f47f af7d 	bne.w	8000f16 <__aeabi_fmul+0x15e>
 800101c:	ea93 0f0c 	teq	r3, ip
 8001020:	f47f af70 	bne.w	8000f04 <__aeabi_fmul+0x14c>
 8001024:	4608      	mov	r0, r1
 8001026:	e776      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	d104      	bne.n	8001038 <__aeabi_fdiv+0x118>
 800102e:	024b      	lsls	r3, r1, #9
 8001030:	f43f af4c 	beq.w	8000ecc <__aeabi_fmul+0x114>
 8001034:	4608      	mov	r0, r1
 8001036:	e76e      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001038:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800103c:	bf18      	it	ne
 800103e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001042:	d1ca      	bne.n	8000fda <__aeabi_fdiv+0xba>
 8001044:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001048:	f47f af5c 	bne.w	8000f04 <__aeabi_fmul+0x14c>
 800104c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001050:	f47f af3c 	bne.w	8000ecc <__aeabi_fmul+0x114>
 8001054:	e75f      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001056:	bf00      	nop

08001058 <__gesf2>:
 8001058:	f04f 3cff 	mov.w	ip, #4294967295
 800105c:	e006      	b.n	800106c <__cmpsf2+0x4>
 800105e:	bf00      	nop

08001060 <__lesf2>:
 8001060:	f04f 0c01 	mov.w	ip, #1
 8001064:	e002      	b.n	800106c <__cmpsf2+0x4>
 8001066:	bf00      	nop

08001068 <__cmpsf2>:
 8001068:	f04f 0c01 	mov.w	ip, #1
 800106c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	bf18      	it	ne
 800107e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001082:	d011      	beq.n	80010a8 <__cmpsf2+0x40>
 8001084:	b001      	add	sp, #4
 8001086:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108a:	bf18      	it	ne
 800108c:	ea90 0f01 	teqne	r0, r1
 8001090:	bf58      	it	pl
 8001092:	ebb2 0003 	subspl.w	r0, r2, r3
 8001096:	bf88      	it	hi
 8001098:	17c8      	asrhi	r0, r1, #31
 800109a:	bf38      	it	cc
 800109c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a0:	bf18      	it	ne
 80010a2:	f040 0001 	orrne.w	r0, r0, #1
 80010a6:	4770      	bx	lr
 80010a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010ac:	d102      	bne.n	80010b4 <__cmpsf2+0x4c>
 80010ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b2:	d105      	bne.n	80010c0 <__cmpsf2+0x58>
 80010b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b8:	d1e4      	bne.n	8001084 <__cmpsf2+0x1c>
 80010ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010be:	d0e1      	beq.n	8001084 <__cmpsf2+0x1c>
 80010c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <__aeabi_cfrcmple>:
 80010c8:	4684      	mov	ip, r0
 80010ca:	4608      	mov	r0, r1
 80010cc:	4661      	mov	r1, ip
 80010ce:	e7ff      	b.n	80010d0 <__aeabi_cfcmpeq>

080010d0 <__aeabi_cfcmpeq>:
 80010d0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d2:	f7ff ffc9 	bl	8001068 <__cmpsf2>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	bf48      	it	mi
 80010da:	f110 0f00 	cmnmi.w	r0, #0
 80010de:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e0 <__aeabi_fcmpeq>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff fff4 	bl	80010d0 <__aeabi_cfcmpeq>
 80010e8:	bf0c      	ite	eq
 80010ea:	2001      	moveq	r0, #1
 80010ec:	2000      	movne	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmplt>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffea 	bl	80010d0 <__aeabi_cfcmpeq>
 80010fc:	bf34      	ite	cc
 80010fe:	2001      	movcc	r0, #1
 8001100:	2000      	movcs	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmple>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffe0 	bl	80010d0 <__aeabi_cfcmpeq>
 8001110:	bf94      	ite	ls
 8001112:	2001      	movls	r0, #1
 8001114:	2000      	movhi	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpge>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffd2 	bl	80010c8 <__aeabi_cfrcmple>
 8001124:	bf94      	ite	ls
 8001126:	2001      	movls	r0, #1
 8001128:	2000      	movhi	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmpgt>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffc8 	bl	80010c8 <__aeabi_cfrcmple>
 8001138:	bf34      	ite	cc
 800113a:	2001      	movcc	r0, #1
 800113c:	2000      	movcs	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpun>:
 8001144:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001148:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__aeabi_fcmpun+0x14>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d108      	bne.n	800116a <__aeabi_fcmpun+0x26>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d102      	bne.n	8001164 <__aeabi_fcmpun+0x20>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d102      	bne.n	800116a <__aeabi_fcmpun+0x26>
 8001164:	f04f 0000 	mov.w	r0, #0
 8001168:	4770      	bx	lr
 800116a:	f04f 0001 	mov.w	r0, #1
 800116e:	4770      	bx	lr

08001170 <__aeabi_f2iz>:
 8001170:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001178:	d30f      	bcc.n	800119a <__aeabi_f2iz+0x2a>
 800117a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001182:	d90d      	bls.n	80011a0 <__aeabi_f2iz+0x30>
 8001184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001190:	fa23 f002 	lsr.w	r0, r3, r2
 8001194:	bf18      	it	ne
 8001196:	4240      	negne	r0, r0
 8001198:	4770      	bx	lr
 800119a:	f04f 0000 	mov.w	r0, #0
 800119e:	4770      	bx	lr
 80011a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a4:	d101      	bne.n	80011aa <__aeabi_f2iz+0x3a>
 80011a6:	0242      	lsls	r2, r0, #9
 80011a8:	d105      	bne.n	80011b6 <__aeabi_f2iz+0x46>
 80011aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011ae:	bf08      	it	eq
 80011b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b4:	4770      	bx	lr
 80011b6:	f04f 0000 	mov.w	r0, #0
 80011ba:	4770      	bx	lr

080011bc <__aeabi_f2uiz>:
 80011bc:	0042      	lsls	r2, r0, #1
 80011be:	d20e      	bcs.n	80011de <__aeabi_f2uiz+0x22>
 80011c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c4:	d30b      	bcc.n	80011de <__aeabi_f2uiz+0x22>
 80011c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ce:	d409      	bmi.n	80011e4 <__aeabi_f2uiz+0x28>
 80011d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d8:	fa23 f002 	lsr.w	r0, r3, r2
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2uiz+0x32>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d102      	bne.n	80011f4 <__aeabi_f2uiz+0x38>
 80011ee:	f04f 30ff 	mov.w	r0, #4294967295
 80011f2:	4770      	bx	lr
 80011f4:	f04f 0000 	mov.w	r0, #0
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <apInit>:
uint16_t timeInterleave = 0;

eeror_t Error;

void apInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART2, 57600);  // Telemetry
 8001200:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001204:	2001      	movs	r0, #1
 8001206:	f00a fced 	bl	800bbe4 <uartOpen>

  cliOpen(_DEF_UART1, 57600);
 800120a:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800120e:	2000      	movs	r0, #0
 8001210:	f009 f84e 	bl	800a2b0 <cliOpen>
  //cliOpenLog(_DEF_UART2, 57600);

  MPU9250_Init();
 8001214:	f005 f842 	bl	800629c <MPU9250_Init>
  MS5611_Init(MS5611_ULTRA_HIGH_RES);
 8001218:	2008      	movs	r0, #8
 800121a:	f006 fdc5 	bl	8007da8 <MS5611_Init>
  gps_Init();
 800121e:	f000 fe23 	bl	8001e68 <gps_Init>
	#ifdef IMU_AHRS
  /* Init structure with 100hZ sample rate, 0.1 beta and 3.5 inclination (3.5 degrees is inclination in Ljubljana, Slovenia) on July, 2016 */
  TM_AHRSIMU_Init(250, 1.2f, 0.0f);
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <apInit+0x4c>)
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <apInit+0x50>)
 800122a:	f002 f913 	bl	8003454 <TM_AHRSIMU_Init>
  #endif
  Calibrate_gyro();
 800122e:	f005 f935 	bl	800649c <Calibrate_gyro>
  //RC_Init();
  mixerInit();
 8001232:	f002 fe71 	bl	8003f18 <mixerInit>
  PIDControlInit(&pid);
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <apInit+0x54>)
 8001238:	f002 ffa8 	bl	800418c <PIDControlInit>
  GPS_set_pids();
 800123c:	f001 fdba 	bl	8002db4 <GPS_set_pids>
  EEPROM_Init();
 8001240:	f000 fb46 	bl	80018d0 <EEPROM_Init>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	3f99999a 	.word	0x3f99999a
 800124c:	437a0000 	.word	0x437a0000
 8001250:	200009b0 	.word	0x200009b0

08001254 <apMain>:

void apMain(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
	previousTime = micros();
 800125a:	f000 f937 	bl	80014cc <micros>
 800125e:	4602      	mov	r2, r0
 8001260:	4b6e      	ldr	r3, [pc, #440]	; (800141c <apMain+0x1c8>)
 8001262:	601a      	str	r2, [r3, #0]
	while(1)
	{
		computeRC(); //2us~10us
 8001264:	f004 fc6e 	bl	8005b44 <computeRC>
		computeIMU();
 8001268:	f002 fcdc 	bl	8003c24 <computeIMU>
#ifdef GPS_Recive
		GPS_mode_check();
 800126c:	f000 fe66 	bl	8001f3c <GPS_mode_check>
#endif
		static uint8_t taskOrder = 0;
		switch (taskOrder)
 8001270:	4b6b      	ldr	r3, [pc, #428]	; (8001420 <apMain+0x1cc>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b04      	cmp	r3, #4
 8001276:	d843      	bhi.n	8001300 <apMain+0xac>
 8001278:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <apMain+0x2c>)
 800127a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127e:	bf00      	nop
 8001280:	08001295 	.word	0x08001295
 8001284:	080012b1 	.word	0x080012b1
 8001288:	080012c7 	.word	0x080012c7
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012f3 	.word	0x080012f3
		{ //4~206us
			case 0: //200us
				taskOrder++;
 8001294:	4b62      	ldr	r3, [pc, #392]	; (8001420 <apMain+0x1cc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b60      	ldr	r3, [pc, #384]	; (8001420 <apMain+0x1cc>)
 800129e:	701a      	strb	r2, [r3, #0]
				if(Baro_update(currentTime)) break;
 80012a0:	4b60      	ldr	r3, [pc, #384]	; (8001424 <apMain+0x1d0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f006 fe4b 	bl	8007f40 <Baro_update>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d124      	bne.n	80012fa <apMain+0xa6>
			case 1:  //80us
				taskOrder++;
 80012b0:	4b5b      	ldr	r3, [pc, #364]	; (8001420 <apMain+0x1cc>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b59      	ldr	r3, [pc, #356]	; (8001420 <apMain+0x1cc>)
 80012ba:	701a      	strb	r2, [r3, #0]
				if(getEstimatedAltitude() !=0) break;
 80012bc:	f006 fe9e 	bl	8007ffc <getEstimatedAltitude>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d11b      	bne.n	80012fe <apMain+0xaa>
			case 2:
				taskOrder++;
 80012c6:	4b56      	ldr	r3, [pc, #344]	; (8001420 <apMain+0x1cc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b54      	ldr	r3, [pc, #336]	; (8001420 <apMain+0x1cc>)
 80012d0:	701a      	strb	r2, [r3, #0]
#ifdef GPS_Recive
				if (GPS_Compute() != 0) break;
 80012d2:	f000 fec5 	bl	8002060 <GPS_Compute>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
				break;
 80012da:	e011      	b.n	8001300 <apMain+0xac>
#endif
			case 3:
				taskOrder++;
 80012dc:	4b50      	ldr	r3, [pc, #320]	; (8001420 <apMain+0x1cc>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <apMain+0x1cc>)
 80012e6:	701a      	strb	r2, [r3, #0]
				Mag_getADC(); //100~380us
 80012e8:	f005 fb06 	bl	80068f8 <Mag_getADC>
				CAL_Heading(); //125us
 80012ec:	f005 fd1c 	bl	8006d28 <CAL_Heading>
				break;
 80012f0:	e006      	b.n	8001300 <apMain+0xac>
			case 4:  //40~50us
//				time = micros();
				taskOrder = 0;
 80012f2:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <apMain+0x1cc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
//				vsum += BAT.VBAT;
//				vsum -= vvec[ind];
//				vvec[ind++] = BAT.VBAT;
//				ind %= VBAT_SMOOTH;
//				BAT.VBAT = vsum/VBAT_SMOOTH;
				break;
 80012f8:	e002      	b.n	8001300 <apMain+0xac>
				if(Baro_update(currentTime)) break;
 80012fa:	bf00      	nop
 80012fc:	e000      	b.n	8001300 <apMain+0xac>
				if(getEstimatedAltitude() !=0) break;
 80012fe:	bf00      	nop
		}

		Control(&pid); //50us
 8001300:	4849      	ldr	r0, [pc, #292]	; (8001428 <apMain+0x1d4>)
 8001302:	f003 f88d 	bl	8004420 <Control>
		mixTable();
 8001306:	f002 fe29 	bl	8003f5c <mixTable>

		flight_mode_signal();
 800130a:	f002 fd77 	bl	8003dfc <flight_mode_signal>

#ifdef Telemetry
		uint8_t t=0;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
		timeInterleave = micros();
 8001312:	f000 f8db 	bl	80014cc <micros>
 8001316:	4603      	mov	r3, r0
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b44      	ldr	r3, [pc, #272]	; (800142c <apMain+0x1d8>)
 800131c:	801a      	strh	r2, [r3, #0]
		SerialCom(); //4us
 800131e:	f007 fb03 	bl	8008928 <SerialCom>
		while((int16_t)(micros()-timeInterleave)<650) t=1; //650
 8001322:	e001      	b.n	8001328 <apMain+0xd4>
 8001324:	2301      	movs	r3, #1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	f000 f8d0 	bl	80014cc <micros>
 800132c:	4603      	mov	r3, r0
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b3e      	ldr	r3, [pc, #248]	; (800142c <apMain+0x1d8>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21b      	sxth	r3, r3
 800133a:	f240 2289 	movw	r2, #649	; 0x289
 800133e:	4293      	cmp	r3, r2
 8001340:	ddf0      	ble.n	8001324 <apMain+0xd0>
		if(!t) overrun_count++;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d108      	bne.n	800135a <apMain+0x106>
 8001348:	4b39      	ldr	r3, [pc, #228]	; (8001430 <apMain+0x1dc>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	b29b      	uxth	r3, r3
 8001350:	3301      	adds	r3, #1
 8001352:	b29b      	uxth	r3, r3
 8001354:	b21a      	sxth	r2, r3
 8001356:	4b36      	ldr	r3, [pc, #216]	; (8001430 <apMain+0x1dc>)
 8001358:	801a      	strh	r2, [r3, #0]
#endif
		cliMain();
 800135a:	f009 f861 	bl	800a420 <cliMain>

		loopTime = micros() - previousTime;
 800135e:	f000 f8b5 	bl	80014cc <micros>
 8001362:	4602      	mov	r2, r0
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <apMain+0x1c8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <apMain+0x1e0>)
 800136c:	6013      	str	r3, [r2, #0]
		while(1)
		{
			currentTime = micros();
 800136e:	f000 f8ad 	bl	80014cc <micros>
 8001372:	4602      	mov	r2, r0
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <apMain+0x1d0>)
 8001376:	601a      	str	r2, [r3, #0]
			cycleTime = currentTime - previousTime;
 8001378:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <apMain+0x1d0>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <apMain+0x1c8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <apMain+0x1e4>)
 8001384:	6013      	str	r3, [r2, #0]
#if defined(LOOP_TIME)
			if (cycleTime >= LOOP_TIME)
 8001386:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <apMain+0x1e4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800138e:	d3ee      	bcc.n	800136e <apMain+0x11a>
			{
				if(cycleTime > (LOOP_TIME+50))
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <apMain+0x1e4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f640 72d2 	movw	r2, #4050	; 0xfd2
 8001398:	4293      	cmp	r3, r2
 800139a:	d905      	bls.n	80013a8 <apMain+0x154>
				{
					ledToggle(RGB_RED);
 800139c:	2002      	movs	r0, #2
 800139e:	f00a f921 	bl	800b5e4 <ledToggle>
					Error.error = 4;
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <apMain+0x1e8>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	701a      	strb	r2, [r3, #0]
				}
				break;
 80013a8:	bf00      	nop
			}
#else
			break;
#endif
		}
		previousTime = currentTime;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <apMain+0x1d0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a1b      	ldr	r2, [pc, #108]	; (800141c <apMain+0x1c8>)
 80013b0:	6013      	str	r3, [r2, #0]

		if(f.ARMED)
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <apMain+0x1ec>)
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <apMain+0x174>
		{
			armedTime += (uint32_t)cycleTime;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <apMain+0x1e4>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <apMain+0x1f0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <apMain+0x1f0>)
 80013c6:	6013      	str	r3, [r2, #0]
		}

		if(loopTime > cycleTimeMax) cycleTimeMax = loopTime;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <apMain+0x1f4>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <apMain+0x1e0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d204      	bcs.n	80013e0 <apMain+0x18c>
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <apMain+0x1e0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <apMain+0x1f4>)
 80013de:	801a      	strh	r2, [r3, #0]
		if(loopTime < cycleTimeMin) cycleTimeMin = loopTime;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <apMain+0x1f8>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <apMain+0x1e0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d904      	bls.n	80013f8 <apMain+0x1a4>
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <apMain+0x1e0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <apMain+0x1f8>)
 80013f6:	801a      	strh	r2, [r3, #0]
		static uint16_t z = 0;
		z++;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <apMain+0x1fc>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <apMain+0x1fc>)
 8001402:	801a      	strh	r2, [r3, #0]
		if(z >= 250)
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <apMain+0x1fc>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	2bf9      	cmp	r3, #249	; 0xf9
 800140a:	f67f af2b 	bls.w	8001264 <apMain+0x10>
		{
			z = 0;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <apMain+0x1fc>)
 8001410:	2200      	movs	r2, #0
 8001412:	801a      	strh	r2, [r3, #0]
			ledToggle(ST1);
 8001414:	2000      	movs	r0, #0
 8001416:	f00a f8e5 	bl	800b5e4 <ledToggle>
	{
 800141a:	e723      	b.n	8001264 <apMain+0x10>
 800141c:	2000025c 	.word	0x2000025c
 8001420:	20000270 	.word	0x20000270
 8001424:	20000254 	.word	0x20000254
 8001428:	200009b0 	.word	0x200009b0
 800142c:	2000026e 	.word	0x2000026e
 8001430:	2000026c 	.word	0x2000026c
 8001434:	20000260 	.word	0x20000260
 8001438:	20000258 	.word	0x20000258
 800143c:	20000acc 	.word	0x20000acc
 8001440:	20000ed4 	.word	0x20000ed4
 8001444:	20000268 	.word	0x20000268
 8001448:	20000264 	.word	0x20000264
 800144c:	20000000 	.word	0x20000000
 8001450:	20000272 	.word	0x20000272

08001454 <HAL_SYSTICK_Callback>:
void SystemClock_Config(void);

static volatile uint32_t msTicks = 0;

void HAL_SYSTICK_Callback(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	msTicks++;
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <HAL_SYSTICK_Callback+0x18>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	4a03      	ldr	r2, [pc, #12]	; (800146c <HAL_SYSTICK_Callback+0x18>)
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000274 	.word	0x20000274

08001470 <bspInit>:

void bspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  HAL_Init();
 8001476:	f00b f815 	bl	800c4a4 <HAL_Init>
  SystemClock_Config();
 800147a:	f000 f858 	bl	800152e <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <bspInit+0x48>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <bspInit+0x48>)
 8001484:	f043 0320 	orr.w	r3, r3, #32
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <bspInit+0x48>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <bspInit+0x48>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <bspInit+0x48>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6193      	str	r3, [r2, #24]
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <bspInit+0x48>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80014c0:	f00b f848 	bl	800c554 <HAL_GetTick>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <micros>:

uint32_t micros(void)
{
 80014cc:	b4b0      	push	{r4, r5, r7}
 80014ce:	af00      	add	r7, sp, #0
	 register uint32_t ms, cycle_cnt;
	    do {
	        ms = msTicks;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <micros+0x38>)
 80014d2:	681c      	ldr	r4, [r3, #0]
	        cycle_cnt = SysTick->VAL;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <micros+0x3c>)
 80014d6:	689d      	ldr	r5, [r3, #8]
	    } while (ms != msTicks);
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <micros+0x38>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	429c      	cmp	r4, r3
 80014de:	d1f7      	bne.n	80014d0 <micros+0x4>
	    return (ms * 1000) + (72 * 1000 - cycle_cnt) / 72; //168
 80014e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e4:	fb03 f204 	mul.w	r2, r3, r4
 80014e8:	f5c5 338c 	rsb	r3, r5, #71680	; 0x11800
 80014ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80014f0:	4906      	ldr	r1, [pc, #24]	; (800150c <micros+0x40>)
 80014f2:	fba1 1303 	umull	r1, r3, r1, r3
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	4413      	add	r3, r2
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bcb0      	pop	{r4, r5, r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000274 	.word	0x20000274
 8001508:	e000e010 	.word	0xe000e010
 800150c:	38e38e39 	.word	0x38e38e39

08001510 <__io_putchar>:

int __io_putchar(int ch)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	2000      	movs	r0, #0
 8001520:	f00a fcea 	bl	800bef8 <uartWrite>
  return 1;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <SystemClock_Config>:

void SystemClock_Config(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b090      	sub	sp, #64	; 0x40
 8001532:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	2228      	movs	r2, #40	; 0x28
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f00f fda0 	bl	8011082 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001558:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155e:	2301      	movs	r3, #1
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001562:	2302      	movs	r3, #2
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156a:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800156c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001570:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	4618      	mov	r0, r3
 8001578:	f00d f9c0 	bl	800e8fc <HAL_RCC_OscConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x58>
	  {
	    Error_Handler();
 8001582:	f000 f819 	bl	80015b8 <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001586:	230f      	movs	r3, #15
 8001588:	607b      	str	r3, [r7, #4]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158a:	2302      	movs	r3, #2
 800158c:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001596:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2102      	movs	r1, #2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00d fc2b 	bl	800edfc <HAL_RCC_ClockConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0x82>
	  {
	    Error_Handler();
 80015ac:	f000 f804 	bl	80015b8 <Error_Handler>
	  }
}
 80015b0:	bf00      	nop
 80015b2:	3740      	adds	r7, #64	; 0x40
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_MspInit+0x5c>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_MspInit+0x5c>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6193      	str	r3, [r2, #24]
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_MspInit+0x5c>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_MspInit+0x5c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_MspInit+0x5c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_MspInit+0x5c>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_MspInit+0x60>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_MspInit+0x60>)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166e:	f00a ff5f 	bl	800c530 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001672:	f00b f8a8 	bl	800c7c6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <DMA1_Channel4_IRQHandler+0x10>)
 8001682:	f00b f9d7 	bl	800ca34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000142c 	.word	0x2000142c

08001690 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <DMA1_Channel5_IRQHandler+0x10>)
 8001696:	f00b f9cd 	bl	800ca34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20001470 	.word	0x20001470

080016a4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA1_Channel6_IRQHandler+0x10>)
 80016aa:	f00b f9c3 	bl	800ca34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200013e8 	.word	0x200013e8

080016b8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DMA1_Channel7_IRQHandler+0x10>)
 80016be:	f00b f9b9 	bl	800ca34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200014b4 	.word	0x200014b4

080016cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <TIM2_IRQHandler+0x10>)
 80016d2:	f00d ffcf 	bl	800f674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200013a0 	.word	0x200013a0

080016e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM3_IRQHandler+0x10>)
 80016e6:	f00d ffc5 	bl	800f674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20001358 	.word	0x20001358

080016f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM4_IRQHandler+0x10>)
 80016fa:	f00d ffbb 	bl	800f674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20001310 	.word	0x20001310

08001708 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <USART1_IRQHandler+0x10>)
 800170e:	f00f f8ad 	bl	801086c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200014f8 	.word	0x200014f8

0800171c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <USART2_IRQHandler+0x10>)
 8001722:	f00f f8a3 	bl	801086c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20001538 	.word	0x20001538

08001730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e00a      	b.n	8001758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001742:	f3af 8000 	nop.w
 8001746:	4601      	mov	r1, r0
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf0      	blt.n	8001742 <_read+0x12>
	}

return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e009      	b.n	8001790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fec3 	bl	8001510 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf1      	blt.n	800177c <_write+0x12>
	}
	return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_close>:

int _close(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c8:	605a      	str	r2, [r3, #4]
	return 0;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <_isatty>:

int _isatty(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return 1;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
	return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f00f fbcc 	bl	8010fd0 <__errno>
 8001838:	4602      	mov	r2, r0
 800183a:	230c      	movs	r3, #12
 800183c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20005000 	.word	0x20005000
 8001864:	00000400 	.word	0x00000400
 8001868:	20000278 	.word	0x20000278
 800186c:	20001580 	.word	0x20001580

08001870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800187e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001880:	f7ff fff6 	bl	8001870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001886:	490d      	ldr	r1, [pc, #52]	; (80018bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <LoopForever+0xe>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800189c:	4c0a      	ldr	r4, [pc, #40]	; (80018c8 <LoopForever+0x16>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018aa:	f00f fb97 	bl	8010fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ae:	f00f fb81 	bl	8010fb4 <main>

080018b2 <LoopForever>:

LoopForever:
    b LoopForever
 80018b2:	e7fe      	b.n	80018b2 <LoopForever>
  ldr   r0, =_estack
 80018b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80018c0:	0801a478 	.word	0x0801a478
  ldr r2, =_sbss
 80018c4:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80018c8:	20001580 	.word	0x20001580

080018cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC1_2_IRQHandler>
	...

080018d0 <EEPROM_Init>:
     uartPrintf(_DEF_UART1, "[ %d ] = %d\r\n", 1000+i, z[i]);
   }
}

void EEPROM_Init()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

  posholdPID_PARAM.kP = readFloat(0); //GPS PID
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 f8f0 	bl	8001abc <readFloat>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b69      	ldr	r3, [pc, #420]	; (8001a84 <EEPROM_Init+0x1b4>)
 80018e0:	601a      	str	r2, [r3, #0]
  posholdPID_PARAM.kI = readFloat(4);
 80018e2:	2004      	movs	r0, #4
 80018e4:	f000 f8ea 	bl	8001abc <readFloat>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b66      	ldr	r3, [pc, #408]	; (8001a84 <EEPROM_Init+0x1b4>)
 80018ec:	605a      	str	r2, [r3, #4]

  poshold_ratePID_PARAM.kP = readFloat(8);
 80018ee:	2008      	movs	r0, #8
 80018f0:	f000 f8e4 	bl	8001abc <readFloat>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <EEPROM_Init+0x1b8>)
 80018f8:	601a      	str	r2, [r3, #0]
  poshold_ratePID_PARAM.kI = readFloat(12);
 80018fa:	200c      	movs	r0, #12
 80018fc:	f000 f8de 	bl	8001abc <readFloat>
 8001900:	4602      	mov	r2, r0
 8001902:	4b61      	ldr	r3, [pc, #388]	; (8001a88 <EEPROM_Init+0x1b8>)
 8001904:	605a      	str	r2, [r3, #4]
  poshold_ratePID_PARAM.kD = readFloat(16);
 8001906:	2010      	movs	r0, #16
 8001908:	f000 f8d8 	bl	8001abc <readFloat>
 800190c:	4602      	mov	r2, r0
 800190e:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <EEPROM_Init+0x1b8>)
 8001910:	609a      	str	r2, [r3, #8]

  navPID_PARAM.kP = readFloat(20);
 8001912:	2014      	movs	r0, #20
 8001914:	f000 f8d2 	bl	8001abc <readFloat>
 8001918:	4602      	mov	r2, r0
 800191a:	4b5c      	ldr	r3, [pc, #368]	; (8001a8c <EEPROM_Init+0x1bc>)
 800191c:	601a      	str	r2, [r3, #0]
  navPID_PARAM.kI = readFloat(24);
 800191e:	2018      	movs	r0, #24
 8001920:	f000 f8cc 	bl	8001abc <readFloat>
 8001924:	4602      	mov	r2, r0
 8001926:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <EEPROM_Init+0x1bc>)
 8001928:	605a      	str	r2, [r3, #4]
  navPID_PARAM.kD = readFloat(28);
 800192a:	201c      	movs	r0, #28
 800192c:	f000 f8c6 	bl	8001abc <readFloat>
 8001930:	4602      	mov	r2, r0
 8001932:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <EEPROM_Init+0x1bc>)
 8001934:	609a      	str	r2, [r3, #8]
  posholdPID_PARAM.Imax = readFloat(32);
 8001936:	2020      	movs	r0, #32
 8001938:	f000 f8c0 	bl	8001abc <readFloat>
 800193c:	4602      	mov	r2, r0
 800193e:	4b51      	ldr	r3, [pc, #324]	; (8001a84 <EEPROM_Init+0x1b4>)
 8001940:	60da      	str	r2, [r3, #12]
  poshold_ratePID_PARAM.Imax = readFloat(32);
 8001942:	2020      	movs	r0, #32
 8001944:	f000 f8ba 	bl	8001abc <readFloat>
 8001948:	4602      	mov	r2, r0
 800194a:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <EEPROM_Init+0x1b8>)
 800194c:	60da      	str	r2, [r3, #12]
  navPID_PARAM.Imax = readFloat(32);
 800194e:	2020      	movs	r0, #32
 8001950:	f000 f8b4 	bl	8001abc <readFloat>
 8001954:	4602      	mov	r2, r0
 8001956:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <EEPROM_Init+0x1bc>)
 8001958:	60da      	str	r2, [r3, #12]

   for(int i = 0; i < 3; i++){
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	e065      	b.n	8001a2c <EEPROM_Init+0x15c>
     pid.kp1[i] = readFloat(36 + (4*i));  //Dual_PID
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3309      	adds	r3, #9
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f8a8 	bl	8001abc <readFloat>
 800196c:	4601      	mov	r1, r0
 800196e:	4a48      	ldr	r2, [pc, #288]	; (8001a90 <EEPROM_Init+0x1c0>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.ki1[i] = readFloat(48 + (4*i));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	330c      	adds	r3, #12
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f89c 	bl	8001abc <readFloat>
 8001984:	4601      	mov	r1, r0
 8001986:	4a42      	ldr	r2, [pc, #264]	; (8001a90 <EEPROM_Init+0x1c0>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3310      	adds	r3, #16
 800198c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.kp2[i] = readFloat(60 + (4*i));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	330f      	adds	r3, #15
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f890 	bl	8001abc <readFloat>
 800199c:	4601      	mov	r1, r0
 800199e:	4a3c      	ldr	r2, [pc, #240]	; (8001a90 <EEPROM_Init+0x1c0>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3306      	adds	r3, #6
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	6059      	str	r1, [r3, #4]
     pid.ki2[i] = readFloat(72 + (4*i));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3312      	adds	r3, #18
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f883 	bl	8001abc <readFloat>
 80019b6:	4601      	mov	r1, r0
 80019b8:	4a35      	ldr	r2, [pc, #212]	; (8001a90 <EEPROM_Init+0x1c0>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3312      	adds	r3, #18
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	6059      	str	r1, [r3, #4]
     pid.kd2[i] = readFloat(84 + (4*i));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3315      	adds	r3, #21
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f876 	bl	8001abc <readFloat>
 80019d0:	4601      	mov	r1, r0
 80019d2:	4a2f      	ldr	r2, [pc, #188]	; (8001a90 <EEPROM_Init+0x1c0>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	331c      	adds	r3, #28
 80019d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

     pid.kp_rate[i] = readFloat(96 + (4*i)); // Rate_PID
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3318      	adds	r3, #24
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f86a 	bl	8001abc <readFloat>
 80019e8:	4601      	mov	r1, r0
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <EEPROM_Init+0x1c0>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	330a      	adds	r3, #10
 80019f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.ki_rate[i] = readFloat(108 + (4*i));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	331b      	adds	r3, #27
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f85e 	bl	8001abc <readFloat>
 8001a00:	4601      	mov	r1, r0
 8001a02:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <EEPROM_Init+0x1c0>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3316      	adds	r3, #22
 8001a08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.kd_rate[i] = readFloat(120 + (4*i));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	331e      	adds	r3, #30
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f852 	bl	8001abc <readFloat>
 8001a18:	4601      	mov	r1, r0
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <EEPROM_Init+0x1c0>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	331e      	adds	r3, #30
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	6059      	str	r1, [r3, #4]
   for(int i = 0; i < 3; i++){
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	dd96      	ble.n	8001960 <EEPROM_Init+0x90>

   }
   magBias[0] = readFloat(132);
 8001a32:	2084      	movs	r0, #132	; 0x84
 8001a34:	f000 f842 	bl	8001abc <readFloat>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <EEPROM_Init+0x1c4>)
 8001a3c:	601a      	str	r2, [r3, #0]
   magBias[1] = readFloat(136);
 8001a3e:	2088      	movs	r0, #136	; 0x88
 8001a40:	f000 f83c 	bl	8001abc <readFloat>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <EEPROM_Init+0x1c4>)
 8001a48:	605a      	str	r2, [r3, #4]
   magBias[2] = readFloat(140);
 8001a4a:	208c      	movs	r0, #140	; 0x8c
 8001a4c:	f000 f836 	bl	8001abc <readFloat>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <EEPROM_Init+0x1c4>)
 8001a54:	609a      	str	r2, [r3, #8]
   magScale[0] = readFloat(144);
 8001a56:	2090      	movs	r0, #144	; 0x90
 8001a58:	f000 f830 	bl	8001abc <readFloat>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <EEPROM_Init+0x1c8>)
 8001a60:	601a      	str	r2, [r3, #0]
   magScale[1] = readFloat(148);
 8001a62:	2094      	movs	r0, #148	; 0x94
 8001a64:	f000 f82a 	bl	8001abc <readFloat>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <EEPROM_Init+0x1c8>)
 8001a6c:	605a      	str	r2, [r3, #4]
   magScale[2] = readFloat(152);
 8001a6e:	2098      	movs	r0, #152	; 0x98
 8001a70:	f000 f824 	bl	8001abc <readFloat>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <EEPROM_Init+0x1c8>)
 8001a78:	609a      	str	r2, [r3, #8]
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000c64 	.word	0x20000c64
 8001a88:	20000b68 	.word	0x20000b68
 8001a8c:	20000b20 	.word	0x20000b20
 8001a90:	200009b0 	.word	0x200009b0
 8001a94:	20000344 	.word	0x20000344
 8001a98:	20000f00 	.word	0x20000f00

08001a9c <writeFloat>:
}

/**
 * Write float
 */
void writeFloat(unsigned int address, float data) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  write_1(address, (uint8_t*)&data, 4);
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f817 	bl	8001ae0 <write_1>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <readFloat>:
}

/**
 * Read float
 */
float readFloat(unsigned int address) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  read_1(address, _b, 4);
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	4905      	ldr	r1, [pc, #20]	; (8001adc <readFloat+0x20>)
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f85a 	bl	8001b82 <read_1>
  return *(float*)&_b[0];
 8001ace:	4b03      	ldr	r3, [pc, #12]	; (8001adc <readFloat+0x20>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000ae4 	.word	0x20000ae4

08001ae0 <write_1>:
}

/**
 * Write sequence of n bytes
 */
void write_1(unsigned int address, uint8_t *data, int n) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  // status quo
  int c = n;            // bytes left to write
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	61fb      	str	r3, [r7, #28]
  int offD = 0;         // current offset in data pointer
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  int offP;           // current offset in page
  int nc = 0;           // next n bytes to write
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  // write alle bytes in multiple steps
  while (c > 0) {
 8001af8:	e020      	b.n	8001b3c <write_1+0x5c>
    // calc offset in page
    offP = address % PAGE_SIZE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b00:	613b      	str	r3, [r7, #16]
    // maximal 30 bytes to write
    nc = min(min(c, 30), PAGE_SIZE - offP);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	2b1e      	cmp	r3, #30
 8001b0c:	bfa8      	it	ge
 8001b0e:	231e      	movge	r3, #30
 8001b10:	4293      	cmp	r3, r2
 8001b12:	bfa8      	it	ge
 8001b14:	4613      	movge	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
    write_2(address, data, offD, nc);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f813 	bl	8001b4a <write_2>
    c-=nc;
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	61fb      	str	r3, [r7, #28]
    offD+=nc;
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	4413      	add	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
    address+=nc;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
  while (c > 0) {
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	dcdb      	bgt.n	8001afa <write_1+0x1a>
  }
}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <write_2>:

/**
 * Write sequence of n bytes from offset
 */
void write_2(unsigned int address, uint8_t *data, int offset, int n) {
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b088      	sub	sp, #32
 8001b4e:	af02      	add	r7, sp, #8
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	603b      	str	r3, [r7, #0]
    uint8_t *adr = data+offset;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
    I2C_ByteWrite_HAL(EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	b299      	uxth	r1, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	20a0      	movs	r0, #160	; 0xa0
 8001b70:	f009 fbae 	bl	800b2d0 <I2C_ByteWrite_HAL>
    HAL_Delay(10);
 8001b74:	200a      	movs	r0, #10
 8001b76:	f00a fcf7 	bl	800c568 <HAL_Delay>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <read_1>:

/**
 * Read sequence of n bytes
 */
void read_1(unsigned int address, uint8_t *data, int n) {
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b088      	sub	sp, #32
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  int c = n;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	61fb      	str	r3, [r7, #28]
  int offD = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  // read until are n bytes read
  while (c > 0) {
 8001b96:	e018      	b.n	8001bca <read_1+0x48>
    // read maximal 32 bytes
    int nc = c;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	617b      	str	r3, [r7, #20]
    if (nc > 32)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	dd01      	ble.n	8001ba6 <read_1+0x24>
      nc = 32;
 8001ba2:	2320      	movs	r3, #32
 8001ba4:	617b      	str	r3, [r7, #20]
    read_2(address, data, offD, nc);
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f813 	bl	8001bd8 <read_2>
    address+=nc;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
    offD+=nc;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
    c-=nc;
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	61fb      	str	r3, [r7, #28]
  while (c > 0) {
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	dce3      	bgt.n	8001b98 <read_1+0x16>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <read_2>:


/**
 * Read sequence of n bytes to offset
 */
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b09c      	sub	sp, #112	; 0x70
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  int r = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	667b      	str	r3, [r7, #100]	; 0x64
  uint8_t pData[80];
  memset(&pData[0], n, sizeof(pData));
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	2250      	movs	r2, #80	; 0x50
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f00f fa45 	bl	8011082 <memset>
  I2C_ByteRead(EEPROM_ADDRESS, address, ADDRESS_SIZE, pData, n);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	b299      	uxth	r1, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f107 0214 	add.w	r2, r7, #20
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	2202      	movs	r2, #2
 8001c0a:	20a0      	movs	r0, #160	; 0xa0
 8001c0c:	f009 fb22 	bl	800b254 <I2C_ByteRead>
  while (r<n) {
 8001c10:	e00e      	b.n	8001c30 <read_2+0x58>
    data[offset+r] = pData[r];
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c16:	4413      	add	r3, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f107 0114 	add.w	r1, r7, #20
 8001c22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c24:	440a      	add	r2, r1
 8001c26:	7812      	ldrb	r2, [r2, #0]
 8001c28:	701a      	strb	r2, [r3, #0]
    r++;
 8001c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	667b      	str	r3, [r7, #100]	; 0x64
  while (r<n) {
 8001c30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dbec      	blt.n	8001c12 <read_2+0x3a>
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3768      	adds	r7, #104	; 0x68
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <quickMedianFilter3>:
#define QMF_COPY(p,v,n) { int32_t i; for (i=0; i<n; i++) p[i]=v[i]; }
#define QMF_SORTF(a,b) { if ((a)>(b)) QMF_SWAPF((a),(b)); }
#define QMF_SWAPF(a,b) { float temp=(a);(a)=(b);(b)=temp; }

int32_t quickMedianFilter3(int32_t * v)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b08b      	sub	sp, #44	; 0x2c
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    int32_t p[3];
    QMF_COPY(p, v, 3);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4c:	e00e      	b.n	8001c6c <quickMedianFilter3+0x2c>
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c60:	440b      	add	r3, r1
 8001c62:	f843 2c1c 	str.w	r2, [r3, #-28]
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	dded      	ble.n	8001c4e <quickMedianFilter3+0xe>

    QMF_SORT(p[0], p[1]); QMF_SORT(p[1], p[2]); QMF_SORT(p[0], p[1]) ;
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dd05      	ble.n	8001c86 <quickMedianFilter3+0x46>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	623b      	str	r3, [r7, #32]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dd05      	ble.n	8001c9a <quickMedianFilter3+0x5a>
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dd05      	ble.n	8001cae <quickMedianFilter3+0x6e>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	613b      	str	r3, [r7, #16]
    return p[1];
 8001cae:	693b      	ldr	r3, [r7, #16]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	372c      	adds	r7, #44	; 0x2c
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <get_P>:
} PID;
PID posholdPID[2];
PID poshold_ratePID[2];
PID navPID[2];

int32_t get_P(int32_t error, struct PID_PARAM_* pid) {
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
	return (float)error * pid->kP;
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff f823 	bl	8000d10 <__aeabi_i2f>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7ff f870 	bl	8000db8 <__aeabi_fmul>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fa48 	bl	8001170 <__aeabi_f2iz>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <get_I>:

int32_t get_I(int32_t error, float* dt, struct PID_* pid, struct PID_PARAM_* pid_param) {
 8001cea:	b5b0      	push	{r4, r5, r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
	pid->integrator += ((float)error * pid_param->kI) * *dt;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681c      	ldr	r4, [r3, #0]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7ff f807 	bl	8000d10 <__aeabi_i2f>
 8001d02:	4602      	mov	r2, r0
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7ff f854 	bl	8000db8 <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f7ff f84c 	bl	8000db8 <__aeabi_fmul>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4619      	mov	r1, r3
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7fe ff3f 	bl	8000ba8 <__addsf3>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	601a      	str	r2, [r3, #0]
	pid->integrator = constrain(pid->integrator,-pid_param->Imax,pid_param->Imax);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fa1a 	bl	8001170 <__aeabi_f2iz>
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fa12 	bl	8001170 <__aeabi_f2iz>
 8001d4c:	4605      	mov	r5, r0
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fa0c 	bl	8001170 <__aeabi_f2iz>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f003 fd5a 	bl	8005818 <constrain>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ffd2 	bl	8000d10 <__aeabi_i2f>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
	return pid->integrator;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f9fa 	bl	8001170 <__aeabi_f2iz>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d88 <get_D>:

int32_t get_D(int32_t input, float* dt, struct PID_* pid, struct PID_PARAM_* pid_param) { // dt in milliseconds
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
	pid->derivative = (input - pid->last_input) / *dt;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe ffb6 	bl	8000d10 <__aeabi_i2f>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f7ff f8b7 	bl	8000f20 <__aeabi_fdiv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	461a      	mov	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]

	/// Low pass filter cut frequency for derivative calculation.
	float filter = 7.9577e-3; // Set to  "1 / ( 2 * PI * f_cut )";
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <get_D+0xb4>)
 8001dbc:	617b      	str	r3, [r7, #20]
	// f_cut = 25 Hz -> _filter =  6.3662e-3
	// f_cut = 30 Hz -> _filter =  5.3052e-3

	// discrete low pass filter, cuts out the
	// high frequency noise that can drive the controller crazy
	pid->derivative = pid->lastderivative + (*dt / ( filter + *dt)) * (pid->derivative - pid->lastderivative);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689c      	ldr	r4, [r3, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	681d      	ldr	r5, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6979      	ldr	r1, [r7, #20]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe feeb 	bl	8000ba8 <__addsf3>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	f7ff f8a2 	bl	8000f20 <__aeabi_fdiv>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461d      	mov	r5, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f7fe feda 	bl	8000ba4 <__aeabi_fsub>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4619      	mov	r1, r3
 8001df4:	4628      	mov	r0, r5
 8001df6:	f7fe ffdf 	bl	8000db8 <__aeabi_fmul>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7fe fed2 	bl	8000ba8 <__addsf3>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	611a      	str	r2, [r3, #16]
	// update state
	pid->last_input = input;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]
	pid->lastderivative    = pid->derivative;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	609a      	str	r2, [r3, #8]
	// add in derivative component
	return pid_param->kD * pid->derivative;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	4619      	mov	r1, r3
 8001e24:	4610      	mov	r0, r2
 8001e26:	f7fe ffc7 	bl	8000db8 <__aeabi_fmul>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f99f 	bl	8001170 <__aeabi_f2iz>
 8001e32:	4603      	mov	r3, r0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3c:	3c026103 	.word	0x3c026103

08001e40 <reset_PID>:

void reset_PID(struct PID_* pid) {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	pid->integrator = 0;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
	pid->last_input = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	605a      	str	r2, [r3, #4]
	pid->lastderivative = 0;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <gps_Init>:
#ifdef _USE_HW_CLI
static void cliGps(cli_args_t *args);
#endif

void gps_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
	uint32_t baud;

	baud = uartGetBaud(_DEF_UART1);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f00a f8e4 	bl	800c03c <uartGetBaud>
 8001e74:	6078      	str	r0, [r7, #4]

	if (baud != 9600)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8001e7c:	d004      	beq.n	8001e88 <gps_Init+0x20>
	{
		uartSetBaud(_DEF_UART1, 9600);
 8001e7e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001e82:	2000      	movs	r0, #0
 8001e84:	f00a f8fa 	bl	800c07c <uartSetBaud>
	}
	uartWriteIT(_DEF_UART1, (uint8_t *)Disable_GPGSV, 11);
 8001e88:	220b      	movs	r2, #11
 8001e8a:	4917      	ldr	r1, [pc, #92]	; (8001ee8 <gps_Init+0x80>)
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f00a f86d 	bl	800bf6c <uartWriteIT>
	HAL_Delay(350);
 8001e92:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001e96:	f00a fb67 	bl	800c568 <HAL_Delay>
	uartWriteIT(_DEF_UART1, (uint8_t *)Set_to_5Hz, 14);
 8001e9a:	220e      	movs	r2, #14
 8001e9c:	4913      	ldr	r1, [pc, #76]	; (8001eec <gps_Init+0x84>)
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f00a f864 	bl	800bf6c <uartWriteIT>
	HAL_Delay(350);
 8001ea4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001ea8:	f00a fb5e 	bl	800c568 <HAL_Delay>
	uartWriteIT(_DEF_UART1, (uint8_t *)Set_to_57kbps, 28);
 8001eac:	221c      	movs	r2, #28
 8001eae:	4910      	ldr	r1, [pc, #64]	; (8001ef0 <gps_Init+0x88>)
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f00a f85b 	bl	800bf6c <uartWriteIT>
	HAL_Delay(350);
 8001eb6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001eba:	f00a fb55 	bl	800c568 <HAL_Delay>

	baud = uartGetBaud(_DEF_UART1);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f00a f8bc 	bl	800c03c <uartGetBaud>
 8001ec4:	6078      	str	r0, [r7, #4]

	if (baud != 57600)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8001ecc:	d004      	beq.n	8001ed8 <gps_Init+0x70>
	{
		uartSetBaud(_DEF_UART1, 57600);
 8001ece:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f00a f8d2 	bl	800c07c <uartSetBaud>
	}

#ifdef _USE_HW_CLI
	cliAdd("gps", cliGps);
 8001ed8:	4906      	ldr	r1, [pc, #24]	; (8001ef4 <gps_Init+0x8c>)
 8001eda:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <gps_Init+0x90>)
 8001edc:	f008 ffda 	bl	800ae94 <cliAdd>
#endif
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	08019a48 	.word	0x08019a48
 8001eec:	08019a54 	.word	0x08019a54
 8001ef0:	08019a64 	.word	0x08019a64
 8001ef4:	08002e2d 	.word	0x08002e2d
 8001ef8:	080196f0 	.word	0x080196f0

08001efc <constrain_int16>:
//Author : EOSBandi
//Based on code and ideas from the Arducopter team: Jason Short,Randy Mackay, Pat Hickey, Jose Julio, Jani Hirvinen
//Andrew Tridgell, Justin Beech, Adam Rivera, Jean-Louis Naudin, Roberto Navoni

//original constraint does not work with variables
int16_t constrain_int16(int16_t amt, int16_t low, int16_t high) {
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
 8001f06:	460b      	mov	r3, r1
 8001f08:	80bb      	strh	r3, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	807b      	strh	r3, [r7, #2]
	return ((amt)<(low)?(low):((amt)>(high)?(high):(amt)));
 8001f0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	db08      	blt.n	8001f2c <constrain_int16+0x30>
 8001f1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	bfa8      	it	ge
 8001f26:	4613      	movge	r3, r2
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	e001      	b.n	8001f30 <constrain_int16+0x34>
 8001f2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
	...

08001f3c <GPS_mode_check>:

void GPS_mode_check(void){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
	uint8_t gps_modes_check = (rcOptions[BOXLAND]<< 3) + (rcOptions[BOXGPSHOME]<< 2) + (rcOptions[BOXGPSHOLD]<<1) + (rcOptions[BOXGPSNAV]);
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <GPS_mode_check+0x100>)
 8001f44:	7a9b      	ldrb	r3, [r3, #10]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b3c      	ldr	r3, [pc, #240]	; (800203c <GPS_mode_check+0x100>)
 8001f4c:	79db      	ldrb	r3, [r3, #7]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b39      	ldr	r3, [pc, #228]	; (800203c <GPS_mode_check+0x100>)
 8001f58:	7a1b      	ldrb	r3, [r3, #8]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b36      	ldr	r3, [pc, #216]	; (800203c <GPS_mode_check+0x100>)
 8001f64:	7a5b      	ldrb	r3, [r3, #9]
 8001f66:	4413      	add	r3, r2
 8001f68:	71fb      	strb	r3, [r7, #7]
	if(f.ARMED){
 8001f6a:	4b35      	ldr	r3, [pc, #212]	; (8002040 <GPS_mode_check+0x104>)
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d056      	beq.n	8002020 <GPS_mode_check+0xe4>
		if(GPS.fixquality){
 8001f72:	4b34      	ldr	r3, [pc, #208]	; (8002044 <GPS_mode_check+0x108>)
 8001f74:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d044      	beq.n	8002006 <GPS_mode_check+0xca>
			if(GPS.satellites > 5){
 8001f7c:	4b31      	ldr	r3, [pc, #196]	; (8002044 <GPS_mode_check+0x108>)
 8001f7e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d924      	bls.n	8001fd0 <GPS_mode_check+0x94>
				if(prv_gps_modes !=gps_modes_check){
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <GPS_mode_check+0x10c>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	79fa      	ldrb	r2, [r7, #7]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d050      	beq.n	8002032 <GPS_mode_check+0xf6>
					NAV_error = NAV_ERROR_NONE;
 8001f90:	4b2e      	ldr	r3, [pc, #184]	; (800204c <GPS_mode_check+0x110>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
					if(rcOptions[BOXGPSHOLD]){
 8001f96:	4b29      	ldr	r3, [pc, #164]	; (800203c <GPS_mode_check+0x100>)
 8001f98:	7a1b      	ldrb	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <GPS_mode_check+0x7c>
						f.GPS_MODE = GPS_MODE_HOLD;
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <GPS_mode_check+0x104>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	72da      	strb	r2, [r3, #11]
						GPS_set_next_wp(&GPS_coord[LAT], &GPS_coord[LON], &GPS_coord[LAT], &GPS_coord[LON]); //hold at the current position
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <GPS_mode_check+0x114>)
 8001fa6:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <GPS_mode_check+0x118>)
 8001fa8:	4929      	ldr	r1, [pc, #164]	; (8002050 <GPS_mode_check+0x114>)
 8001faa:	482a      	ldr	r0, [pc, #168]	; (8002054 <GPS_mode_check+0x118>)
 8001fac:	f000 fb50 	bl	8002650 <GPS_set_next_wp>
						//set_new_altitude(alt.EstAlt);                                //and current altitude
						NAV_state = NAV_STATE_HOLD_INFINIT;
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <GPS_mode_check+0x11c>)
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e007      	b.n	8001fc8 <GPS_mode_check+0x8c>
					}else
					{
            f.GPS_MODE = GPS_MODE_NONE;
 8001fb8:	4b21      	ldr	r3, [pc, #132]	; (8002040 <GPS_mode_check+0x104>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	72da      	strb	r2, [r3, #11]
//            f.GPS_BARO_MODE = false;
//            f.THROTTLE_IGNORED = false;
//            f.LAND_IN_PROGRESS = 0;
//            f.THROTTLE_IGNORED = 0;
            NAV_state = NAV_STATE_NONE;
 8001fbe:	4b26      	ldr	r3, [pc, #152]	; (8002058 <GPS_mode_check+0x11c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
            GPS_reset_nav();
 8001fc4:	f000 fbc2 	bl	800274c <GPS_reset_nav>
					}
					prv_gps_modes = gps_modes_check;
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <GPS_mode_check+0x10c>)
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	7013      	strb	r3, [r2, #0]
		NAV_state = NAV_STATE_NONE;
		//NAV_paused_at = 0;
		NAV_error = NAV_ERROR_DISARMED;
		//GPS_reset_nav();
	}
}
 8001fce:	e030      	b.n	8002032 <GPS_mode_check+0xf6>
				if (f.GPS_MODE == GPS_MODE_HOLD || f.GPS_MODE == GPS_MODE_RTH) {
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <GPS_mode_check+0x104>)
 8001fd2:	7adb      	ldrb	r3, [r3, #11]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d003      	beq.n	8001fe0 <GPS_mode_check+0xa4>
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <GPS_mode_check+0x104>)
 8001fda:	7adb      	ldrb	r3, [r3, #11]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d10b      	bne.n	8001ff8 <GPS_mode_check+0xbc>
					f.GPS_MODE = GPS_MODE_NONE;
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <GPS_mode_check+0x104>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	72da      	strb	r2, [r3, #11]
					NAV_state = NAV_STATE_NONE;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <GPS_mode_check+0x11c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
					NAV_error = NAV_ERROR_SPOILED_GPS;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <GPS_mode_check+0x110>)
 8001fee:	2202      	movs	r2, #2
 8001ff0:	701a      	strb	r2, [r3, #0]
					prv_gps_modes = 0xff;                                          //invalidates mode check, to allow re evaluate rcOptions when numsats raised again
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <GPS_mode_check+0x10c>)
 8001ff4:	22ff      	movs	r2, #255	; 0xff
 8001ff6:	701a      	strb	r2, [r3, #0]
				nav[0] = 0; nav[1] = 0;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <GPS_mode_check+0x120>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <GPS_mode_check+0x120>)
 8002000:	2200      	movs	r2, #0
 8002002:	805a      	strh	r2, [r3, #2]
}
 8002004:	e015      	b.n	8002032 <GPS_mode_check+0xf6>
			f.GPS_MODE = GPS_MODE_NONE;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <GPS_mode_check+0x104>)
 8002008:	2200      	movs	r2, #0
 800200a:	72da      	strb	r2, [r3, #11]
			NAV_state = NAV_STATE_NONE;
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <GPS_mode_check+0x11c>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
			NAV_error = NAV_ERROR_GPS_FIX_LOST;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <GPS_mode_check+0x110>)
 8002014:	2209      	movs	r2, #9
 8002016:	701a      	strb	r2, [r3, #0]
			prv_gps_modes = 0xff;                                              //Gives a chance to restart mission when regain fix
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <GPS_mode_check+0x10c>)
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	701a      	strb	r2, [r3, #0]
}
 800201e:	e008      	b.n	8002032 <GPS_mode_check+0xf6>
		f.GPS_MODE = GPS_MODE_NONE;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <GPS_mode_check+0x104>)
 8002022:	2200      	movs	r2, #0
 8002024:	72da      	strb	r2, [r3, #11]
		NAV_state = NAV_STATE_NONE;
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <GPS_mode_check+0x11c>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
		NAV_error = NAV_ERROR_DISARMED;
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <GPS_mode_check+0x110>)
 800202e:	220a      	movs	r2, #10
 8002030:	701a      	strb	r2, [r3, #0]
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000d34 	.word	0x20000d34
 8002040:	20000ed4 	.word	0x20000ed4
 8002044:	20000b78 	.word	0x20000b78
 8002048:	20000282 	.word	0x20000282
 800204c:	20000281 	.word	0x20000281
 8002050:	20000c60 	.word	0x20000c60
 8002054:	20000c5c 	.word	0x20000c5c
 8002058:	20000280 	.word	0x20000280
 800205c:	20000b30 	.word	0x20000b30

08002060 <GPS_Compute>:

uint8_t GPS_Compute(void) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af02      	add	r7, sp, #8
	uint32_t dist;        //temp variable to store dist to copter
	int32_t  dir;         //temp variable to store dir to copter
	static uint32_t nav_loopTimer;

	//check that we have a valid frame, if not then return immediatly
	if (GPS.GPS_Frame == 0||!GPS_virtual) return 0; else GPS.GPS_Frame = 0;
 8002066:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <GPS_Compute+0x164>)
 8002068:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <GPS_Compute+0x18>
 8002070:	4b55      	ldr	r3, [pc, #340]	; (80021c8 <GPS_Compute+0x168>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <GPS_Compute+0x1c>
 8002078:	2300      	movs	r3, #0
 800207a:	e09f      	b.n	80021bc <GPS_Compute+0x15c>
 800207c:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <GPS_Compute+0x164>)
 800207e:	2200      	movs	r2, #0
 8002080:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

	//check home position and set it if it was not set
	if (GPS.fixquality && GPS.satellites >= 5)
 8002084:	4b4f      	ldr	r3, [pc, #316]	; (80021c4 <GPS_Compute+0x164>)
 8002086:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8092 	beq.w	80021b4 <GPS_Compute+0x154>
 8002090:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <GPS_Compute+0x164>)
 8002092:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002096:	2b04      	cmp	r3, #4
 8002098:	f240 808c 	bls.w	80021b4 <GPS_Compute+0x154>
	{
		if (!f.ARMED) f.GPS_FIX_HOME = 0;
 800209c:	4b4b      	ldr	r3, [pc, #300]	; (80021cc <GPS_Compute+0x16c>)
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <GPS_Compute+0x4a>
 80020a4:	4b49      	ldr	r3, [pc, #292]	; (80021cc <GPS_Compute+0x16c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	745a      	strb	r2, [r3, #17]
		if (!f.GPS_FIX_HOME && f.ARMED)
 80020aa:	4b48      	ldr	r3, [pc, #288]	; (80021cc <GPS_Compute+0x16c>)
 80020ac:	7c5b      	ldrb	r3, [r3, #17]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <GPS_Compute+0x5e>
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <GPS_Compute+0x16c>)
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <GPS_Compute+0x5e>
		{
			GPS_reset_home_position();
 80020ba:	f000 fb17 	bl	80026ec <GPS_reset_home_position>
			}
		}

		//dTnav calculation
		//Time for calculating x,y speed and navigation pids
		dTnav = (float)(millis() - nav_loopTimer)/ 1000.0;
 80020be:	f7ff f9fd 	bl	80014bc <millis>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <GPS_Compute+0x170>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fe1c 	bl	8000d08 <__aeabi_ui2f>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4940      	ldr	r1, [pc, #256]	; (80021d4 <GPS_Compute+0x174>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe ff23 	bl	8000f20 <__aeabi_fdiv>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	4b3e      	ldr	r3, [pc, #248]	; (80021d8 <GPS_Compute+0x178>)
 80020e0:	601a      	str	r2, [r3, #0]
		nav_loopTimer = millis();
 80020e2:	f7ff f9eb 	bl	80014bc <millis>
 80020e6:	4602      	mov	r2, r0
 80020e8:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <GPS_Compute+0x170>)
 80020ea:	601a      	str	r2, [r3, #0]

		// prevent runup from bad GPS
		dTnav = min(dTnav, 1.0);
 80020ec:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <GPS_Compute+0x178>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fffd 	bl	80010f4 <__aeabi_fcmplt>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <GPS_Compute+0xa6>
 8002100:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <GPS_Compute+0x178>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	e001      	b.n	800210a <GPS_Compute+0xaa>
 8002106:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800210a:	4a33      	ldr	r2, [pc, #204]	; (80021d8 <GPS_Compute+0x178>)
 800210c:	6013      	str	r3, [r2, #0]

		//calculate distance and bearings for gui and other stuff continously - From home to copter
		GPS_bearing(&GPS_coord[LAT],&GPS_coord[LON],&GPS_home[LAT],&GPS_home[LON],&dir);
 800210e:	463b      	mov	r3, r7
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4b32      	ldr	r3, [pc, #200]	; (80021dc <GPS_Compute+0x17c>)
 8002114:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <GPS_Compute+0x180>)
 8002116:	4933      	ldr	r1, [pc, #204]	; (80021e4 <GPS_Compute+0x184>)
 8002118:	4833      	ldr	r0, [pc, #204]	; (80021e8 <GPS_Compute+0x188>)
 800211a:	f000 f879 	bl	8002210 <GPS_bearing>
		GPS_distance_cm(&GPS_coord[LAT],&GPS_coord[LON],&GPS_home[LAT],&GPS_home[LON],&dist);
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <GPS_Compute+0x17c>)
 8002124:	4a2e      	ldr	r2, [pc, #184]	; (80021e0 <GPS_Compute+0x180>)
 8002126:	492f      	ldr	r1, [pc, #188]	; (80021e4 <GPS_Compute+0x184>)
 8002128:	482f      	ldr	r0, [pc, #188]	; (80021e8 <GPS_Compute+0x188>)
 800212a:	f000 f8d5 	bl	80022d8 <GPS_distance_cm>
		GPS_distanceToHome = dist/100;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2e      	ldr	r2, [pc, #184]	; (80021ec <GPS_Compute+0x18c>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <GPS_Compute+0x190>)
 800213c:	801a      	strh	r2, [r3, #0]
		GPS_directionToHome = dir/100;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	4a2a      	ldr	r2, [pc, #168]	; (80021ec <GPS_Compute+0x18c>)
 8002142:	fb82 1203 	smull	r1, r2, r2, r3
 8002146:	1152      	asrs	r2, r2, #5
 8002148:	17db      	asrs	r3, r3, #31
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	b21a      	sxth	r2, r3
 800214e:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <GPS_Compute+0x194>)
 8002150:	801a      	strh	r2, [r3, #0]

		if (!GPS.fixquality)
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <GPS_Compute+0x164>)
 8002154:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <GPS_Compute+0x108>
		{     //If we don't have home set, do not display anything
			GPS_distanceToHome = 0;
 800215c:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <GPS_Compute+0x190>)
 800215e:	2200      	movs	r2, #0
 8002160:	801a      	strh	r2, [r3, #0]
			GPS_directionToHome = 0;
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <GPS_Compute+0x194>)
 8002164:	2200      	movs	r2, #0
 8002166:	801a      	strh	r2, [r3, #0]
		}

		//calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
		GPS_calc_velocity();
 8002168:	f000 f90c 	bl	8002384 <GPS_calc_velocity>

		if(f.GPS_MODE != GPS_MODE_NONE)
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <GPS_Compute+0x16c>)
 800216e:	7adb      	ldrb	r3, [r3, #11]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01f      	beq.n	80021b4 <GPS_Compute+0x154>
		{
			//do gps nav calculations here, these are common for nav and poshold
			GPS_bearing(&GPS_coord[LAT],&GPS_coord[LON],&GPS_WP[LAT],&GPS_WP[LON],&target_bearing);
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <GPS_Compute+0x198>)
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	4b20      	ldr	r3, [pc, #128]	; (80021fc <GPS_Compute+0x19c>)
 800217a:	4a21      	ldr	r2, [pc, #132]	; (8002200 <GPS_Compute+0x1a0>)
 800217c:	4919      	ldr	r1, [pc, #100]	; (80021e4 <GPS_Compute+0x184>)
 800217e:	481a      	ldr	r0, [pc, #104]	; (80021e8 <GPS_Compute+0x188>)
 8002180:	f000 f846 	bl	8002210 <GPS_bearing>
			GPS_distance_cm(&GPS_coord[LAT],&GPS_coord[LON],&GPS_WP[LAT],&GPS_WP[LON],&wp_distance);
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <GPS_Compute+0x1a4>)
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <GPS_Compute+0x19c>)
 800218a:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <GPS_Compute+0x1a0>)
 800218c:	4915      	ldr	r1, [pc, #84]	; (80021e4 <GPS_Compute+0x184>)
 800218e:	4816      	ldr	r0, [pc, #88]	; (80021e8 <GPS_Compute+0x188>)
 8002190:	f000 f8a2 	bl	80022d8 <GPS_distance_cm>
			GPS_calc_location_error(&GPS_WP[LAT],&GPS_WP[LON],&GPS_coord[LAT],&GPS_coord[LON]);
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <GPS_Compute+0x184>)
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <GPS_Compute+0x188>)
 8002198:	4918      	ldr	r1, [pc, #96]	; (80021fc <GPS_Compute+0x19c>)
 800219a:	4819      	ldr	r0, [pc, #100]	; (8002200 <GPS_Compute+0x1a0>)
 800219c:	f000 f94e 	bl	800243c <GPS_calc_location_error>

			switch(NAV_state)
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <GPS_Compute+0x1a8>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <GPS_Compute+0x158>
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d000      	beq.n	80021ae <GPS_Compute+0x14e>
				case NAV_STATE_HOLD_INFINIT:
					GPS_calc_poshold();
					break;

				default:
					break;
 80021ac:	e005      	b.n	80021ba <GPS_Compute+0x15a>
					GPS_calc_poshold();
 80021ae:	f000 f971 	bl	8002494 <GPS_calc_poshold>
					break;
 80021b2:	e002      	b.n	80021ba <GPS_Compute+0x15a>
			}
		}
 80021b4:	bf00      	nop
 80021b6:	e000      	b.n	80021ba <GPS_Compute+0x15a>
          break;
 80021b8:	bf00      	nop
	}
	return 1;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000b78 	.word	0x20000b78
 80021c8:	20000678 	.word	0x20000678
 80021cc:	20000ed4 	.word	0x20000ed4
 80021d0:	200002b4 	.word	0x200002b4
 80021d4:	447a0000 	.word	0x447a0000
 80021d8:	20000284 	.word	0x20000284
 80021dc:	20000c54 	.word	0x20000c54
 80021e0:	20000c50 	.word	0x20000c50
 80021e4:	20000c60 	.word	0x20000c60
 80021e8:	20000c5c 	.word	0x20000c5c
 80021ec:	51eb851f 	.word	0x51eb851f
 80021f0:	20000c4c 	.word	0x20000c4c
 80021f4:	20000c58 	.word	0x20000c58
 80021f8:	20000c40 	.word	0x20000c40
 80021fc:	200002a0 	.word	0x200002a0
 8002200:	2000029c 	.word	0x2000029c
 8002204:	20000c14 	.word	0x20000c14
 8002208:	20000280 	.word	0x20000280
 800220c:	00000000 	.word	0x00000000

08002210 <GPS_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision

void GPS_bearing(int32_t* lat1, int32_t* lon1, int32_t* lat2, int32_t* lon2, int32_t* bearing) {
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
	int32_t off_x = *lon2 - *lon1;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
	int32_t off_y = (*lat2 - *lat1) / GPS_scaleLonDown;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe fd6b 	bl	8000d10 <__aeabi_i2f>
 800223a:	4602      	mov	r2, r0
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <GPS_bearing+0xc0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f7fe fe6c 	bl	8000f20 <__aeabi_fdiv>
 8002248:	4603      	mov	r3, r0
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe ff90 	bl	8001170 <__aeabi_f2iz>
 8002250:	4603      	mov	r3, r0
 8002252:	613b      	str	r3, [r7, #16]
	*bearing = 9000 + atan2(-off_y, off_x) * 5729.57795f;      //Convert the output redians to 100xdeg
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	425b      	negs	r3, r3
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f8ed 	bl	8000438 <__aeabi_i2d>
 800225e:	4604      	mov	r4, r0
 8002260:	460d      	mov	r5, r1
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7fe f8e8 	bl	8000438 <__aeabi_i2d>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f013 f8a2 	bl	80153b8 <atan2>
 8002274:	a312      	add	r3, pc, #72	; (adr r3, 80022c0 <GPS_bearing+0xb0>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f947 	bl	800050c <__aeabi_dmul>
 800227e:	4603      	mov	r3, r0
 8002280:	460c      	mov	r4, r1
 8002282:	4618      	mov	r0, r3
 8002284:	4621      	mov	r1, r4
 8002286:	a310      	add	r3, pc, #64	; (adr r3, 80022c8 <GPS_bearing+0xb8>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fd ff88 	bl	80001a0 <__adddf3>
 8002290:	4603      	mov	r3, r0
 8002292:	460c      	mov	r4, r1
 8002294:	4618      	mov	r0, r3
 8002296:	4621      	mov	r1, r4
 8002298:	f7fe fbe8 	bl	8000a6c <__aeabi_d2iz>
 800229c:	4602      	mov	r2, r0
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	601a      	str	r2, [r3, #0]
	if (*bearing < 0) *bearing += 36000;
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da06      	bge.n	80022b8 <GPS_bearing+0xa8>
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80022b2:	33a0      	adds	r3, #160	; 0xa0
 80022b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bdb0      	pop	{r4, r5, r7, pc}
 80022c0:	00000000 	.word	0x00000000
 80022c4:	40b66194 	.word	0x40b66194
 80022c8:	00000000 	.word	0x00000000
 80022cc:	40c19400 	.word	0x40c19400
 80022d0:	2000028c 	.word	0x2000028c
 80022d4:	00000000 	.word	0x00000000

080022d8 <GPS_distance_cm>:

void GPS_distance_cm(int32_t* lat1, int32_t* lon1, int32_t* lat2, int32_t* lon2,uint32_t* dist) {
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
	float dLat = (float)(*lat2 - *lat1);                                    // difference of latitude in 1/10 000 000 degrees
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fd0d 	bl	8000d10 <__aeabi_i2f>
 80022f6:	4603      	mov	r3, r0
 80022f8:	617b      	str	r3, [r7, #20]
	float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown; //x
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fd03 	bl	8000d10 <__aeabi_i2f>
 800230a:	4602      	mov	r2, r0
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <GPS_distance_cm+0xa8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f7fe fd50 	bl	8000db8 <__aeabi_fmul>
 8002318:	4603      	mov	r3, r0
 800231a:	613b      	str	r3, [r7, #16]
	*dist = sqrt(sq(dLat) + sq(dLon)) * 1.11318845f;
 800231c:	6979      	ldr	r1, [r7, #20]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7fe fd4a 	bl	8000db8 <__aeabi_fmul>
 8002324:	4603      	mov	r3, r0
 8002326:	461c      	mov	r4, r3
 8002328:	6939      	ldr	r1, [r7, #16]
 800232a:	6938      	ldr	r0, [r7, #16]
 800232c:	f7fe fd44 	bl	8000db8 <__aeabi_fmul>
 8002330:	4603      	mov	r3, r0
 8002332:	4619      	mov	r1, r3
 8002334:	4620      	mov	r0, r4
 8002336:	f7fe fc37 	bl	8000ba8 <__addsf3>
 800233a:	4603      	mov	r3, r0
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f88d 	bl	800045c <__aeabi_f2d>
 8002342:	4603      	mov	r3, r0
 8002344:	460c      	mov	r4, r1
 8002346:	4618      	mov	r0, r3
 8002348:	4621      	mov	r1, r4
 800234a:	f013 f9ef 	bl	801572c <sqrt>
 800234e:	a30a      	add	r3, pc, #40	; (adr r3, 8002378 <GPS_distance_cm+0xa0>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe f8da 	bl	800050c <__aeabi_dmul>
 8002358:	4603      	mov	r3, r0
 800235a:	460c      	mov	r4, r1
 800235c:	4618      	mov	r0, r3
 800235e:	4621      	mov	r1, r4
 8002360:	f7fe fbac 	bl	8000abc <__aeabi_d2uiz>
 8002364:	4602      	mov	r2, r0
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	601a      	str	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop
 8002374:	f3af 8000 	nop.w
 8002378:	c0000000 	.word	0xc0000000
 800237c:	3ff1cf9e 	.word	0x3ff1cf9e
 8002380:	2000028c 	.word	0x2000028c

08002384 <GPS_calc_velocity>:
// Note: we use gps locations directly to calculate velocity instead of asking gps for velocity because
//       this is more accurate below 1.5m/s
// Note: even though the positions are projected using a lead filter, the velocities are calculated
//       from the unaltered gps locations.  We do not want noise from our lead filter affecting velocity
//*******************************************************************************************************
static void GPS_calc_velocity(void){
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
	static int16_t speed_old[2] = {0,0};
	static int32_t last[2] = {0,0};
	static uint8_t init = 0;

	if (init) {
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <GPS_calc_velocity+0xa0>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d039      	beq.n	8002406 <GPS_calc_velocity+0x82>
		float tmp = 1.0/dTnav;
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <GPS_calc_velocity+0xa4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4619      	mov	r1, r3
 8002398:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800239c:	f7fe fdc0 	bl	8000f20 <__aeabi_fdiv>
 80023a0:	4603      	mov	r3, r0
 80023a2:	607b      	str	r3, [r7, #4]
		actual_speed[__X] = (float)(GPS_coord[LON] - last[LON]) *  GPS_scaleLonDown * tmp;
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <GPS_calc_velocity+0xa8>)
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <GPS_calc_velocity+0xac>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fcae 	bl	8000d10 <__aeabi_i2f>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <GPS_calc_velocity+0xb0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f7fe fcfb 	bl	8000db8 <__aeabi_fmul>
 80023c2:	4603      	mov	r3, r0
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fcf6 	bl	8000db8 <__aeabi_fmul>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fece 	bl	8001170 <__aeabi_f2iz>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <GPS_calc_velocity+0xb4>)
 80023da:	805a      	strh	r2, [r3, #2]
		actual_speed[__Y] = (float)(GPS_coord[LAT]  - last[LAT])  * tmp;
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <GPS_calc_velocity+0xa8>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <GPS_calc_velocity+0xac>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fc92 	bl	8000d10 <__aeabi_i2f>
 80023ec:	4603      	mov	r3, r0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe fce1 	bl	8000db8 <__aeabi_fmul>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe feb9 	bl	8001170 <__aeabi_f2iz>
 80023fe:	4603      	mov	r3, r0
 8002400:	b21a      	sxth	r2, r3
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <GPS_calc_velocity+0xb4>)
 8002404:	801a      	strh	r2, [r3, #0]
		//
		//      speed_old[_X] = actual_speed[_X];
		//      speed_old[_Y] = actual_speed[_Y];
		//    }
	}
	init=1;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <GPS_calc_velocity+0xa0>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]

	last[LON] = GPS_coord[LON];
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <GPS_calc_velocity+0xa8>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a07      	ldr	r2, [pc, #28]	; (8002430 <GPS_calc_velocity+0xac>)
 8002412:	6053      	str	r3, [r2, #4]
	last[LAT] = GPS_coord[LAT];
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <GPS_calc_velocity+0xa8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a05      	ldr	r2, [pc, #20]	; (8002430 <GPS_calc_velocity+0xac>)
 800241a:	6013      	str	r3, [r2, #0]

	//  if (GPS_conf.lead_filter) {
	//    GPS_coord_lead[LON] = xLeadFilter.get_position(GPS_coord[LON], actual_speed[_X], GPS_LAG);
	//    GPS_coord_lead[LAT] = yLeadFilter.get_position(GPS_coord[LAT], actual_speed[_Y], GPS_LAG);
	//  }
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200002b8 	.word	0x200002b8
 8002428:	20000284 	.word	0x20000284
 800242c:	20000c5c 	.word	0x20000c5c
 8002430:	200002bc 	.word	0x200002bc
 8002434:	2000028c 	.word	0x2000028c
 8002438:	20000288 	.word	0x20000288

0800243c <GPS_calc_location_error>:
//  1000  = 11m    = 36 feet
//  1800  = 19.80m = 60 feet
//  3000  = 33m
// 10000  = 111m
//
static void GPS_calc_location_error( int32_t* target_lat, int32_t* target_lng, int32_t* gps_lat, int32_t* gps_lng ) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
	error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;  // X Error
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fc5b 	bl	8000d10 <__aeabi_i2f>
 800245a:	4602      	mov	r2, r0
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <GPS_calc_location_error+0x50>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f7fe fca8 	bl	8000db8 <__aeabi_fmul>
 8002468:	4603      	mov	r3, r0
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fe80 	bl	8001170 <__aeabi_f2iz>
 8002470:	4602      	mov	r2, r0
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <GPS_calc_location_error+0x54>)
 8002474:	605a      	str	r2, [r3, #4]
	error[LAT] = *target_lat - *gps_lat; // Y Error
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	4a03      	ldr	r2, [pc, #12]	; (8002490 <GPS_calc_location_error+0x54>)
 8002482:	6013      	str	r3, [r2, #0]
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000028c 	.word	0x2000028c
 8002490:	20000294 	.word	0x20000294

08002494 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
// TODO: check that the poshold target speed constraint can be increased for snappier poshold lock
static void GPS_calc_poshold(void) {
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
	int32_t d;
	int32_t target_speed;
	uint8_t axis;

	for (axis=0;axis<2;axis++) {
 800249a:	2300      	movs	r3, #0
 800249c:	72fb      	strb	r3, [r7, #11]
 800249e:	e08c      	b.n	80025ba <GPS_calc_poshold+0x126>
		target_speed = get_P(error[axis], &posholdPID_PARAM); // calculate desired speed from lat/lon error
 80024a0:	7afb      	ldrb	r3, [r7, #11]
 80024a2:	4a4a      	ldr	r2, [pc, #296]	; (80025cc <GPS_calc_poshold+0x138>)
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	4949      	ldr	r1, [pc, #292]	; (80025d0 <GPS_calc_poshold+0x13c>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fc05 	bl	8001cba <get_P>
 80024b0:	6078      	str	r0, [r7, #4]
		target_speed = constrain(target_speed,-100,100);      // Constrain the target speed in poshold mode to 1m/s it helps avoid runaways..
 80024b2:	2264      	movs	r2, #100	; 0x64
 80024b4:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f003 f9ad 	bl	8005818 <constrain>
 80024be:	6078      	str	r0, [r7, #4]
		rate_error[axis] = target_speed - actual_speed[axis]; // calc the speed error
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	7afb      	ldrb	r3, [r7, #11]
 80024c6:	4943      	ldr	r1, [pc, #268]	; (80025d4 <GPS_calc_poshold+0x140>)
 80024c8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	b211      	sxth	r1, r2
 80024d6:	4a40      	ldr	r2, [pc, #256]	; (80025d8 <GPS_calc_poshold+0x144>)
 80024d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		nav[axis]      =
				get_P(rate_error[axis],                                               &poshold_ratePID_PARAM)
 80024dc:	7afb      	ldrb	r3, [r7, #11]
 80024de:	4a3e      	ldr	r2, [pc, #248]	; (80025d8 <GPS_calc_poshold+0x144>)
 80024e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024e4:	493d      	ldr	r1, [pc, #244]	; (80025dc <GPS_calc_poshold+0x148>)
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fbe7 	bl	8001cba <get_P>
 80024ec:	4603      	mov	r3, r0
				+get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80024ee:	b29c      	uxth	r4, r3
 80024f0:	7afb      	ldrb	r3, [r7, #11]
 80024f2:	4a39      	ldr	r2, [pc, #228]	; (80025d8 <GPS_calc_poshold+0x144>)
 80024f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024f8:	4619      	mov	r1, r3
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	4a33      	ldr	r2, [pc, #204]	; (80025cc <GPS_calc_poshold+0x138>)
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	18c8      	adds	r0, r1, r3
 8002504:	7afa      	ldrb	r2, [r7, #11]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4a34      	ldr	r2, [pc, #208]	; (80025e0 <GPS_calc_poshold+0x14c>)
 8002510:	441a      	add	r2, r3
 8002512:	4b32      	ldr	r3, [pc, #200]	; (80025dc <GPS_calc_poshold+0x148>)
 8002514:	4933      	ldr	r1, [pc, #204]	; (80025e4 <GPS_calc_poshold+0x150>)
 8002516:	f7ff fbe8 	bl	8001cea <get_I>
 800251a:	4603      	mov	r3, r0
 800251c:	b29b      	uxth	r3, r3
 800251e:	4423      	add	r3, r4
 8002520:	b29a      	uxth	r2, r3
		nav[axis]      =
 8002522:	7afb      	ldrb	r3, [r7, #11]
				+get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 8002524:	b211      	sxth	r1, r2
		nav[axis]      =
 8002526:	4a30      	ldr	r2, [pc, #192]	; (80025e8 <GPS_calc_poshold+0x154>)
 8002528:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		d = get_D(error[axis],                    &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 800252c:	7afb      	ldrb	r3, [r7, #11]
 800252e:	4a27      	ldr	r2, [pc, #156]	; (80025cc <GPS_calc_poshold+0x138>)
 8002530:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002534:	7afa      	ldrb	r2, [r7, #11]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <GPS_calc_poshold+0x14c>)
 8002540:	441a      	add	r2, r3
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <GPS_calc_poshold+0x148>)
 8002544:	4927      	ldr	r1, [pc, #156]	; (80025e4 <GPS_calc_poshold+0x150>)
 8002546:	f7ff fc1f 	bl	8001d88 <get_D>
 800254a:	60f8      	str	r0, [r7, #12]

		d = constrain(d, -2000, 2000);
 800254c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002550:	4926      	ldr	r1, [pc, #152]	; (80025ec <GPS_calc_poshold+0x158>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f003 f960 	bl	8005818 <constrain>
 8002558:	60f8      	str	r0, [r7, #12]

		// get rid of noise
		if(abs(actual_speed[axis]) < 50) d = 0;
 800255a:	7afb      	ldrb	r3, [r7, #11]
 800255c:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <GPS_calc_poshold+0x140>)
 800255e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002562:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8002566:	db07      	blt.n	8002578 <GPS_calc_poshold+0xe4>
 8002568:	7afb      	ldrb	r3, [r7, #11]
 800256a:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <GPS_calc_poshold+0x140>)
 800256c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002570:	2b31      	cmp	r3, #49	; 0x31
 8002572:	dc01      	bgt.n	8002578 <GPS_calc_poshold+0xe4>
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]

		nav[axis] +=d;
 8002578:	7afb      	ldrb	r3, [r7, #11]
 800257a:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <GPS_calc_poshold+0x154>)
 800257c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	b29b      	uxth	r3, r3
 8002586:	4413      	add	r3, r2
 8002588:	b29a      	uxth	r2, r3
 800258a:	7afb      	ldrb	r3, [r7, #11]
 800258c:	b211      	sxth	r1, r2
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <GPS_calc_poshold+0x154>)
 8002590:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		nav[axis]  = constrain_int16(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <GPS_calc_poshold+0x154>)
 8002598:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800259c:	7afc      	ldrb	r4, [r7, #11]
 800259e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025a2:	4913      	ldr	r1, [pc, #76]	; (80025f0 <GPS_calc_poshold+0x15c>)
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fca9 	bl	8001efc <constrain_int16>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <GPS_calc_poshold+0x154>)
 80025b0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (axis=0;axis<2;axis++) {
 80025b4:	7afb      	ldrb	r3, [r7, #11]
 80025b6:	3301      	adds	r3, #1
 80025b8:	72fb      	strb	r3, [r7, #11]
 80025ba:	7afb      	ldrb	r3, [r7, #11]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	f67f af6f 	bls.w	80024a0 <GPS_calc_poshold+0xc>
		//navPID[axis].integrator = poshold_ratePID[axis].integrator;
	}
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000294 	.word	0x20000294
 80025d0:	20000c64 	.word	0x20000c64
 80025d4:	20000288 	.word	0x20000288
 80025d8:	20000290 	.word	0x20000290
 80025dc:	20000b68 	.word	0x20000b68
 80025e0:	20000b40 	.word	0x20000b40
 80025e4:	20000284 	.word	0x20000284
 80025e8:	20000b30 	.word	0x20000b30
 80025ec:	fffff830 	.word	0xfffff830
 80025f0:	fffff448 	.word	0xfffff448

080025f4 <GPS_calc_longitude_scaling>:

////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
void GPS_calc_longitude_scaling(int32_t lat) {
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	GPS_scaleLonDown = cos(lat * 1.0e-7f * 0.01745329251f);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7fe fb87 	bl	8000d10 <__aeabi_i2f>
 8002602:	4603      	mov	r3, r0
 8002604:	490f      	ldr	r1, [pc, #60]	; (8002644 <GPS_calc_longitude_scaling+0x50>)
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fbd6 	bl	8000db8 <__aeabi_fmul>
 800260c:	4603      	mov	r3, r0
 800260e:	490e      	ldr	r1, [pc, #56]	; (8002648 <GPS_calc_longitude_scaling+0x54>)
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fbd1 	bl	8000db8 <__aeabi_fmul>
 8002616:	4603      	mov	r3, r0
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ff1f 	bl	800045c <__aeabi_f2d>
 800261e:	4603      	mov	r3, r0
 8002620:	460c      	mov	r4, r1
 8002622:	4618      	mov	r0, r3
 8002624:	4621      	mov	r1, r4
 8002626:	f012 fdb3 	bl	8015190 <cos>
 800262a:	4603      	mov	r3, r0
 800262c:	460c      	mov	r4, r1
 800262e:	4618      	mov	r0, r3
 8002630:	4621      	mov	r1, r4
 8002632:	f7fe fa63 	bl	8000afc <__aeabi_d2f>
 8002636:	4602      	mov	r2, r0
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <GPS_calc_longitude_scaling+0x58>)
 800263a:	601a      	str	r2, [r3, #0]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	33d6bf95 	.word	0x33d6bf95
 8002648:	3c8efa35 	.word	0x3c8efa35
 800264c:	2000028c 	.word	0x2000028c

08002650 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t* lat_to, int32_t* lon_to, int32_t* lat_from, int32_t* lon_from) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
	GPS_WP[LAT] = *lat_to;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <GPS_set_next_wp+0x7c>)
 8002664:	6013      	str	r3, [r2, #0]
	GPS_WP[LON] = *lon_to;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <GPS_set_next_wp+0x7c>)
 800266c:	6053      	str	r3, [r2, #4]

	GPS_FROM[LAT] = *lat_from;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <GPS_set_next_wp+0x80>)
 8002674:	6013      	str	r3, [r2, #0]
	GPS_FROM[LON] = *lon_from;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <GPS_set_next_wp+0x80>)
 800267c:	6053      	str	r3, [r2, #4]

	GPS_calc_longitude_scaling(*lat_to);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ffb6 	bl	80025f4 <GPS_calc_longitude_scaling>

	GPS_bearing(&GPS_FROM[LAT],&GPS_FROM[LON],&GPS_WP[LAT],&GPS_WP[LON],&target_bearing);
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <GPS_set_next_wp+0x84>)
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <GPS_set_next_wp+0x88>)
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <GPS_set_next_wp+0x7c>)
 8002690:	4912      	ldr	r1, [pc, #72]	; (80026dc <GPS_set_next_wp+0x8c>)
 8002692:	480f      	ldr	r0, [pc, #60]	; (80026d0 <GPS_set_next_wp+0x80>)
 8002694:	f7ff fdbc 	bl	8002210 <GPS_bearing>
	GPS_distance_cm(&GPS_FROM[LAT],&GPS_FROM[LON],&GPS_WP[LAT],&GPS_WP[LON],&wp_distance);
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <GPS_set_next_wp+0x90>)
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <GPS_set_next_wp+0x88>)
 800269e:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <GPS_set_next_wp+0x7c>)
 80026a0:	490e      	ldr	r1, [pc, #56]	; (80026dc <GPS_set_next_wp+0x8c>)
 80026a2:	480b      	ldr	r0, [pc, #44]	; (80026d0 <GPS_set_next_wp+0x80>)
 80026a4:	f7ff fe18 	bl	80022d8 <GPS_distance_cm>
	GPS_calc_location_error(&GPS_WP[LAT],&GPS_WP[LON],&GPS_FROM[LAT],&GPS_FROM[LON]);
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <GPS_set_next_wp+0x8c>)
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <GPS_set_next_wp+0x80>)
 80026ac:	490a      	ldr	r1, [pc, #40]	; (80026d8 <GPS_set_next_wp+0x88>)
 80026ae:	4807      	ldr	r0, [pc, #28]	; (80026cc <GPS_set_next_wp+0x7c>)
 80026b0:	f7ff fec4 	bl	800243c <GPS_calc_location_error>
	waypoint_speed_gov = 100;
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <GPS_set_next_wp+0x94>)
 80026b6:	2264      	movs	r2, #100	; 0x64
 80026b8:	801a      	strh	r2, [r3, #0]
	original_target_bearing = target_bearing;
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <GPS_set_next_wp+0x84>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <GPS_set_next_wp+0x98>)
 80026c0:	6013      	str	r3, [r2, #0]
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000029c 	.word	0x2000029c
 80026d0:	200002a4 	.word	0x200002a4
 80026d4:	20000c40 	.word	0x20000c40
 80026d8:	200002a0 	.word	0x200002a0
 80026dc:	200002a8 	.word	0x200002a8
 80026e0:	20000c14 	.word	0x20000c14
 80026e4:	200002b0 	.word	0x200002b0
 80026e8:	200002ac 	.word	0x200002ac

080026ec <GPS_reset_home_position>:

void GPS_reset_home_position(void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	if (GPS.fixquality && GPS.satellites >= 5) {
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <GPS_reset_home_position+0x48>)
 80026f2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01a      	beq.n	8002730 <GPS_reset_home_position+0x44>
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <GPS_reset_home_position+0x48>)
 80026fc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002700:	2b04      	cmp	r3, #4
 8002702:	d915      	bls.n	8002730 <GPS_reset_home_position+0x44>
		GPS_home[LAT] = GPS_coord[LAT];
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <GPS_reset_home_position+0x4c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <GPS_reset_home_position+0x50>)
 800270a:	6013      	str	r3, [r2, #0]
		GPS_home[LON] = GPS_coord[LON];
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <GPS_reset_home_position+0x4c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <GPS_reset_home_position+0x50>)
 8002712:	6053      	str	r3, [r2, #4]
		GPS_calc_longitude_scaling(GPS_coord[LAT]);    //need an initial value for distance and bearing calc
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <GPS_reset_home_position+0x4c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff6b 	bl	80025f4 <GPS_calc_longitude_scaling>
		nav_takeoff_bearing = imu.actual_compass_heading;             //save takeoff heading
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <GPS_reset_home_position+0x54>)
 8002720:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002724:	b21a      	sxth	r2, r3
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <GPS_reset_home_position+0x58>)
 8002728:	801a      	strh	r2, [r3, #0]
		//TODO: Set ground altitude
		f.GPS_FIX_HOME = 1;
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <GPS_reset_home_position+0x5c>)
 800272c:	2201      	movs	r2, #1
 800272e:	745a      	strb	r2, [r3, #17]
	}
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000b78 	.word	0x20000b78
 8002738:	20000c5c 	.word	0x20000c5c
 800273c:	20000c50 	.word	0x20000c50
 8002740:	20000e20 	.word	0x20000e20
 8002744:	200002b2 	.word	0x200002b2
 8002748:	20000ed4 	.word	0x20000ed4

0800274c <GPS_reset_nav>:


//reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
  uint8_t i;

  for(i=0;i<2;i++) {
 8002752:	2300      	movs	r3, #0
 8002754:	71fb      	strb	r3, [r7, #7]
 8002756:	e02e      	b.n	80027b6 <GPS_reset_nav+0x6a>
    nav[i] = 0;
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <GPS_reset_nav+0x78>)
 800275c:	2100      	movs	r1, #0
 800275e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    reset_PID(&posholdPID[i]);
 8002762:	79fa      	ldrb	r2, [r7, #7]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <GPS_reset_nav+0x7c>)
 800276e:	4413      	add	r3, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fb65 	bl	8001e40 <reset_PID>
    reset_PID(&poshold_ratePID[i]);
 8002776:	79fa      	ldrb	r2, [r7, #7]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4a12      	ldr	r2, [pc, #72]	; (80027cc <GPS_reset_nav+0x80>)
 8002782:	4413      	add	r3, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fb5b 	bl	8001e40 <reset_PID>
    reset_PID(&navPID[i]);
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <GPS_reset_nav+0x84>)
 8002796:	4413      	add	r3, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fb51 	bl	8001e40 <reset_PID>
    NAV_state = NAV_STATE_NONE;
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <GPS_reset_nav+0x88>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
    //invalidate JUMP counter
//    jump_times = -10;
    //reset next step counter
//    next_step = 1;
    //Clear poi
    GPS_poi[LAT] = 0; GPS_poi[LON] = 0;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <GPS_reset_nav+0x8c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <GPS_reset_nav+0x8c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
  for(i=0;i<2;i++) {
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	3301      	adds	r3, #1
 80027b4:	71fb      	strb	r3, [r7, #7]
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d9cd      	bls.n	8002758 <GPS_reset_nav+0xc>
//    f.GPS_head_set = 0;
  }
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000b30 	.word	0x20000b30
 80027c8:	20000c18 	.word	0x20000c18
 80027cc:	20000b40 	.word	0x20000b40
 80027d0:	20000af0 	.word	0x20000af0
 80027d4:	20000280 	.word	0x20000280
 80027d8:	20000c78 	.word	0x20000c78

080027dc <GPS_newFrame>:

#define FRAME_GGA  1
#define FRAME_RMC  2

bool GPS_newFrame(uint8_t c)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
	uint32_t time = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
	float timef = 0;
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
	uint8_t frameOK = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	75fb      	strb	r3, [r7, #23]
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[15];
	static uint8_t checksum_param, frame = 0;

	if (c == '$')
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	2b24      	cmp	r3, #36	; 0x24
 80027f8:	d109      	bne.n	800280e <GPS_newFrame+0x32>
	{
		param = 0; offset = 0; parity = 0;
 80027fa:	4ba3      	ldr	r3, [pc, #652]	; (8002a88 <GPS_newFrame+0x2ac>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	4ba2      	ldr	r3, [pc, #648]	; (8002a8c <GPS_newFrame+0x2b0>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	4ba2      	ldr	r3, [pc, #648]	; (8002a90 <GPS_newFrame+0x2b4>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e1bb      	b.n	8002b86 <GPS_newFrame+0x3aa>
	} else if (c == ',' || c == '*')
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	2b2c      	cmp	r3, #44	; 0x2c
 8002812:	d003      	beq.n	800281c <GPS_newFrame+0x40>
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	2b2a      	cmp	r3, #42	; 0x2a
 8002818:	f040 8173 	bne.w	8002b02 <GPS_newFrame+0x326>
	{
		string[offset] = 0;
 800281c:	4b9b      	ldr	r3, [pc, #620]	; (8002a8c <GPS_newFrame+0x2b0>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b9c      	ldr	r3, [pc, #624]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002824:	2100      	movs	r1, #0
 8002826:	5499      	strb	r1, [r3, r2]
		if (param == 0)
 8002828:	4b97      	ldr	r3, [pc, #604]	; (8002a88 <GPS_newFrame+0x2ac>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d136      	bne.n	800289e <GPS_newFrame+0xc2>
		{ //frame identification
			frame = 0;
 8002830:	4b99      	ldr	r3, [pc, #612]	; (8002a98 <GPS_newFrame+0x2bc>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
			if (string[0] == 'G' && string[1] == 'N' && string[2] == 'G' && string[3] == 'G' && string[4] == 'A') frame = FRAME_GGA;
 8002836:	4b97      	ldr	r3, [pc, #604]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b47      	cmp	r3, #71	; 0x47
 800283c:	d112      	bne.n	8002864 <GPS_newFrame+0x88>
 800283e:	4b95      	ldr	r3, [pc, #596]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	2b4e      	cmp	r3, #78	; 0x4e
 8002844:	d10e      	bne.n	8002864 <GPS_newFrame+0x88>
 8002846:	4b93      	ldr	r3, [pc, #588]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002848:	789b      	ldrb	r3, [r3, #2]
 800284a:	2b47      	cmp	r3, #71	; 0x47
 800284c:	d10a      	bne.n	8002864 <GPS_newFrame+0x88>
 800284e:	4b91      	ldr	r3, [pc, #580]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002850:	78db      	ldrb	r3, [r3, #3]
 8002852:	2b47      	cmp	r3, #71	; 0x47
 8002854:	d106      	bne.n	8002864 <GPS_newFrame+0x88>
 8002856:	4b8f      	ldr	r3, [pc, #572]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002858:	791b      	ldrb	r3, [r3, #4]
 800285a:	2b41      	cmp	r3, #65	; 0x41
 800285c:	d102      	bne.n	8002864 <GPS_newFrame+0x88>
 800285e:	4b8e      	ldr	r3, [pc, #568]	; (8002a98 <GPS_newFrame+0x2bc>)
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
			if (string[0] == 'G' && string[1] == 'N' && string[2] == 'R' && string[3] == 'M' && string[4] == 'C') frame = FRAME_RMC;
 8002864:	4b8b      	ldr	r3, [pc, #556]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b47      	cmp	r3, #71	; 0x47
 800286a:	f040 8132 	bne.w	8002ad2 <GPS_newFrame+0x2f6>
 800286e:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002870:	785b      	ldrb	r3, [r3, #1]
 8002872:	2b4e      	cmp	r3, #78	; 0x4e
 8002874:	f040 812d 	bne.w	8002ad2 <GPS_newFrame+0x2f6>
 8002878:	4b86      	ldr	r3, [pc, #536]	; (8002a94 <GPS_newFrame+0x2b8>)
 800287a:	789b      	ldrb	r3, [r3, #2]
 800287c:	2b52      	cmp	r3, #82	; 0x52
 800287e:	f040 8128 	bne.w	8002ad2 <GPS_newFrame+0x2f6>
 8002882:	4b84      	ldr	r3, [pc, #528]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002884:	78db      	ldrb	r3, [r3, #3]
 8002886:	2b4d      	cmp	r3, #77	; 0x4d
 8002888:	f040 8123 	bne.w	8002ad2 <GPS_newFrame+0x2f6>
 800288c:	4b81      	ldr	r3, [pc, #516]	; (8002a94 <GPS_newFrame+0x2b8>)
 800288e:	791b      	ldrb	r3, [r3, #4]
 8002890:	2b43      	cmp	r3, #67	; 0x43
 8002892:	f040 811e 	bne.w	8002ad2 <GPS_newFrame+0x2f6>
 8002896:	4b80      	ldr	r3, [pc, #512]	; (8002a98 <GPS_newFrame+0x2bc>)
 8002898:	2202      	movs	r2, #2
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e119      	b.n	8002ad2 <GPS_newFrame+0x2f6>
		} else if (frame == FRAME_GGA)
 800289e:	4b7e      	ldr	r3, [pc, #504]	; (8002a98 <GPS_newFrame+0x2bc>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 80d4 	bne.w	8002a50 <GPS_newFrame+0x274>
		{
			ledToggle(RGB_BLUE);
 80028a8:	2004      	movs	r0, #4
 80028aa:	f008 fe9b 	bl	800b5e4 <ledToggle>
			if (param == 1){
 80028ae:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <GPS_newFrame+0x2ac>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d152      	bne.n	800295c <GPS_newFrame+0x180>
				timef = atof(string);
 80028b6:	4877      	ldr	r0, [pc, #476]	; (8002a94 <GPS_newFrame+0x2b8>)
 80028b8:	f00e fb87 	bl	8010fca <atof>
 80028bc:	4603      	mov	r3, r0
 80028be:	460c      	mov	r4, r1
 80028c0:	4618      	mov	r0, r3
 80028c2:	4621      	mov	r1, r4
 80028c4:	f7fe f91a 	bl	8000afc <__aeabi_d2f>
 80028c8:	4603      	mov	r3, r0
 80028ca:	60fb      	str	r3, [r7, #12]
				time = (uint32_t) timef;
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7fe fc75 	bl	80011bc <__aeabi_f2uiz>
 80028d2:	4603      	mov	r3, r0
 80028d4:	613b      	str	r3, [r7, #16]
				GPS.hour = (time / 10000)+TD;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4a70      	ldr	r2, [pc, #448]	; (8002a9c <GPS_newFrame+0x2c0>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	0b5b      	lsrs	r3, r3, #13
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	3309      	adds	r3, #9
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4b6e      	ldr	r3, [pc, #440]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80028e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
				GPS.minute = (time % 10000) / 100;
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4b6b      	ldr	r3, [pc, #428]	; (8002a9c <GPS_newFrame+0x2c0>)
 80028f0:	fba3 1302 	umull	r1, r3, r3, r2
 80028f4:	0b5b      	lsrs	r3, r3, #13
 80028f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	4a68      	ldr	r2, [pc, #416]	; (8002aa4 <GPS_newFrame+0x2c8>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <GPS_newFrame+0x2c4>)
 800290c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				GPS.seconds = (time % 100);
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4b64      	ldr	r3, [pc, #400]	; (8002aa4 <GPS_newFrame+0x2c8>)
 8002914:	fba3 1302 	umull	r1, r3, r3, r2
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	2164      	movs	r1, #100	; 0x64
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002926:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
				GPS.milliseconds = fmod(timef, 1.0) * 1000;
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7fd fd96 	bl	800045c <__aeabi_f2d>
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	4b5c      	ldr	r3, [pc, #368]	; (8002aa8 <GPS_newFrame+0x2cc>)
 8002936:	f012 fd41 	bl	80153bc <fmod>
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	4b5b      	ldr	r3, [pc, #364]	; (8002aac <GPS_newFrame+0x2d0>)
 8002940:	f7fd fde4 	bl	800050c <__aeabi_dmul>
 8002944:	4603      	mov	r3, r0
 8002946:	460c      	mov	r4, r1
 8002948:	4618      	mov	r0, r3
 800294a:	4621      	mov	r1, r4
 800294c:	f7fe f8b6 	bl	8000abc <__aeabi_d2uiz>
 8002950:	4603      	mov	r3, r0
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002956:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800295a:	e0ba      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			}
			else if (param == 2)                     {GPS.GPS_coord[LAT] = GPS_coord_to_degrees(string);GPS_coord[LAT]=GPS.GPS_coord[LAT];}
 800295c:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <GPS_newFrame+0x2ac>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d10d      	bne.n	8002980 <GPS_newFrame+0x1a4>
 8002964:	484b      	ldr	r0, [pc, #300]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002966:	f000 f92d 	bl	8002bc4 <GPS_coord_to_degrees>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002974:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800297a:	4a4d      	ldr	r2, [pc, #308]	; (8002ab0 <GPS_newFrame+0x2d4>)
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e0a8      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 3 && string[0] == 'S') {GPS.GPS_coord[LAT] = -GPS.GPS_coord[LAT]; GPS_coord[LAT]=GPS.GPS_coord[LAT];}
 8002980:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <GPS_newFrame+0x2ac>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d110      	bne.n	80029aa <GPS_newFrame+0x1ce>
 8002988:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <GPS_newFrame+0x2b8>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b53      	cmp	r3, #83	; 0x53
 800298e:	d10c      	bne.n	80029aa <GPS_newFrame+0x1ce>
 8002990:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002996:	425b      	negs	r3, r3
 8002998:	4a41      	ldr	r2, [pc, #260]	; (8002aa0 <GPS_newFrame+0x2c4>)
 800299a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800299e:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029a4:	4a42      	ldr	r2, [pc, #264]	; (8002ab0 <GPS_newFrame+0x2d4>)
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e093      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 4)                     {GPS.GPS_coord[LON] = GPS_coord_to_degrees(string); GPS_coord[LON]=GPS.GPS_coord[LON];}
 80029aa:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <GPS_newFrame+0x2ac>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d10d      	bne.n	80029ce <GPS_newFrame+0x1f2>
 80029b2:	4838      	ldr	r0, [pc, #224]	; (8002a94 <GPS_newFrame+0x2b8>)
 80029b4:	f000 f906 	bl	8002bc4 <GPS_coord_to_degrees>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c8:	4a39      	ldr	r2, [pc, #228]	; (8002ab0 <GPS_newFrame+0x2d4>)
 80029ca:	6053      	str	r3, [r2, #4]
 80029cc:	e081      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 5 && string[0] == 'W') {GPS.GPS_coord[LON] = -GPS.GPS_coord[LON]; GPS_coord[LON]=GPS.GPS_coord[LON];}
 80029ce:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <GPS_newFrame+0x2ac>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d110      	bne.n	80029f8 <GPS_newFrame+0x21c>
 80029d6:	4b2f      	ldr	r3, [pc, #188]	; (8002a94 <GPS_newFrame+0x2b8>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b57      	cmp	r3, #87	; 0x57
 80029dc:	d10c      	bne.n	80029f8 <GPS_newFrame+0x21c>
 80029de:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e4:	425b      	negs	r3, r3
 80029e6:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f2:	4a2f      	ldr	r2, [pc, #188]	; (8002ab0 <GPS_newFrame+0x2d4>)
 80029f4:	6053      	str	r3, [r2, #4]
 80029f6:	e06c      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 6)                     {GPS.fixquality = (string[0]  > '0');}
 80029f8:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <GPS_newFrame+0x2ac>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b06      	cmp	r3, #6
 80029fe:	d10b      	bne.n	8002a18 <GPS_newFrame+0x23c>
 8002a00:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b30      	cmp	r3, #48	; 0x30
 8002a06:	bf8c      	ite	hi
 8002a08:	2301      	movhi	r3, #1
 8002a0a:	2300      	movls	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002a12:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8002a16:	e05c      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 7)                     {GPS.satellites = grab_fields(string,0);}
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <GPS_newFrame+0x2ac>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b07      	cmp	r3, #7
 8002a1e:	d109      	bne.n	8002a34 <GPS_newFrame+0x258>
 8002a20:	2100      	movs	r1, #0
 8002a22:	481c      	ldr	r0, [pc, #112]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002a24:	f000 f962 	bl	8002cec <grab_fields>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002a2e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8002a32:	e04e      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 9)                     {GPS.altitude = grab_fields(string,0);}  // altitude in meters added by Mis
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <GPS_newFrame+0x2ac>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b09      	cmp	r3, #9
 8002a3a:	d14a      	bne.n	8002ad2 <GPS_newFrame+0x2f6>
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4815      	ldr	r0, [pc, #84]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002a40:	f000 f954 	bl	8002cec <grab_fields>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002a4a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8002a4e:	e040      	b.n	8002ad2 <GPS_newFrame+0x2f6>
		} else if (frame == FRAME_RMC)
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <GPS_newFrame+0x2bc>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d13c      	bne.n	8002ad2 <GPS_newFrame+0x2f6>
		{
			if      (param == 7)                     {GPS.speed = ((uint32_t)grab_fields(string,1)*5144L)/1000L;}  //gps speed in cm/s will be used for navigation
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <GPS_newFrame+0x2ac>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b07      	cmp	r3, #7
 8002a5e:	d12b      	bne.n	8002ab8 <GPS_newFrame+0x2dc>
 8002a60:	2101      	movs	r1, #1
 8002a62:	480c      	ldr	r0, [pc, #48]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002a64:	f000 f942 	bl	8002cec <grab_fields>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f241 4318 	movw	r3, #5144	; 0x1418
 8002a70:	fb03 f302 	mul.w	r3, r3, r2
 8002a74:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <GPS_newFrame+0x2d8>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002a80:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8002a84:	e025      	b.n	8002ad2 <GPS_newFrame+0x2f6>
 8002a86:	bf00      	nop
 8002a88:	200002c4 	.word	0x200002c4
 8002a8c:	200002c5 	.word	0x200002c5
 8002a90:	200002c6 	.word	0x200002c6
 8002a94:	200002c8 	.word	0x200002c8
 8002a98:	200002d7 	.word	0x200002d7
 8002a9c:	d1b71759 	.word	0xd1b71759
 8002aa0:	20000b78 	.word	0x20000b78
 8002aa4:	51eb851f 	.word	0x51eb851f
 8002aa8:	3ff00000 	.word	0x3ff00000
 8002aac:	408f4000 	.word	0x408f4000
 8002ab0:	20000c5c 	.word	0x20000c5c
 8002ab4:	10624dd3 	.word	0x10624dd3
			else if (param == 8)                     {GPS.GPS_ground_course = grab_fields(string,1); }             //ground course deg*10
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <GPS_newFrame+0x3cc>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d108      	bne.n	8002ad2 <GPS_newFrame+0x2f6>
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	483a      	ldr	r0, [pc, #232]	; (8002bac <GPS_newFrame+0x3d0>)
 8002ac4:	f000 f912 	bl	8002cec <grab_fields>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <GPS_newFrame+0x3d4>)
 8002ace:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		}
		param++; offset = 0;
 8002ad2:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <GPS_newFrame+0x3cc>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b33      	ldr	r3, [pc, #204]	; (8002ba8 <GPS_newFrame+0x3cc>)
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <GPS_newFrame+0x3d8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param=1;
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae8:	d103      	bne.n	8002af2 <GPS_newFrame+0x316>
 8002aea:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <GPS_newFrame+0x3dc>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e049      	b.n	8002b86 <GPS_newFrame+0x3aa>
		else parity ^= c;
 8002af2:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <GPS_newFrame+0x3e0>)
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	4053      	eors	r3, r2
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <GPS_newFrame+0x3e0>)
 8002afe:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param=1;
 8002b00:	e041      	b.n	8002b86 <GPS_newFrame+0x3aa>
	} else if (c == '\r' || c == '\n')
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	2b0d      	cmp	r3, #13
 8002b06:	d002      	beq.n	8002b0e <GPS_newFrame+0x332>
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b0a      	cmp	r3, #10
 8002b0c:	d122      	bne.n	8002b54 <GPS_newFrame+0x378>
	{
		if (checksum_param) { //parity checksum
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <GPS_newFrame+0x3dc>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01a      	beq.n	8002b4c <GPS_newFrame+0x370>
			uint8_t checksum = hex_c(string[0]);
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <GPS_newFrame+0x3d0>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f932 	bl	8002d84 <hex_c>
 8002b20:	4603      	mov	r3, r0
 8002b22:	72fb      	strb	r3, [r7, #11]
			checksum <<= 4;
 8002b24:	7afb      	ldrb	r3, [r7, #11]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	72fb      	strb	r3, [r7, #11]
			checksum += hex_c(string[1]);
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <GPS_newFrame+0x3d0>)
 8002b2c:	785b      	ldrb	r3, [r3, #1]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f928 	bl	8002d84 <hex_c>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	72fb      	strb	r3, [r7, #11]
			if (checksum == parity) frameOK = 1;
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <GPS_newFrame+0x3e0>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	7afa      	ldrb	r2, [r7, #11]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d101      	bne.n	8002b4c <GPS_newFrame+0x370>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	75fb      	strb	r3, [r7, #23]
		}
		checksum_param=0;
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <GPS_newFrame+0x3dc>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	e018      	b.n	8002b86 <GPS_newFrame+0x3aa>
	} else
	{
		if (offset < 15) string[offset++] = c;
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <GPS_newFrame+0x3d8>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b0e      	cmp	r3, #14
 8002b5a:	d809      	bhi.n	8002b70 <GPS_newFrame+0x394>
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <GPS_newFrame+0x3d8>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	b2d1      	uxtb	r1, r2
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <GPS_newFrame+0x3d8>)
 8002b66:	7011      	strb	r1, [r2, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4a10      	ldr	r2, [pc, #64]	; (8002bac <GPS_newFrame+0x3d0>)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <GPS_newFrame+0x3dc>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d106      	bne.n	8002b86 <GPS_newFrame+0x3aa>
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <GPS_newFrame+0x3e0>)
 8002b7a:	781a      	ldrb	r2, [r3, #0]
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	4053      	eors	r3, r2
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <GPS_newFrame+0x3e0>)
 8002b84:	701a      	strb	r2, [r3, #0]
	}
	return frameOK && (frame==FRAME_GGA);
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <GPS_newFrame+0x3bc>
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <GPS_newFrame+0x3e4>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <GPS_newFrame+0x3bc>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <GPS_newFrame+0x3be>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd90      	pop	{r4, r7, pc}
 8002ba8:	200002c4 	.word	0x200002c4
 8002bac:	200002c8 	.word	0x200002c8
 8002bb0:	20000b78 	.word	0x20000b78
 8002bb4:	200002c5 	.word	0x200002c5
 8002bb8:	200002d8 	.word	0x200002d8
 8002bbc:	200002c6 	.word	0x200002c6
 8002bc0:	200002d7 	.word	0x200002d7

08002bc4 <GPS_coord_to_degrees>:
	return 0;
}

#define DIGIT_TO_VAL(_x)        (_x - '0')
uint32_t GPS_coord_to_degrees(char* s)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	char *p, *q;
	uint8_t deg = 0, min = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	75fb      	strb	r3, [r7, #23]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit(*p); p++) ;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	e002      	b.n	8002be4 <GPS_coord_to_degrees+0x20>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	f00e fa22 	bl	801102c <__locale_ctype_ptr>
 8002be8:	4602      	mov	r2, r0
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <GPS_coord_to_degrees+0x1a>
	q = s;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2)
 8002c00:	e011      	b.n	8002c26 <GPS_coord_to_degrees+0x62>
	{
		if (deg)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <GPS_coord_to_degrees+0x50>
			deg *= 10;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	0092      	lsls	r2, r2, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	61ba      	str	r2, [r7, #24]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	3b30      	subs	r3, #48	; 0x30
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	4413      	add	r3, r2
 8002c24:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2)
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	dce8      	bgt.n	8002c02 <GPS_coord_to_degrees+0x3e>
	}
	// convert minutes
	while (p > q)
 8002c30:	e011      	b.n	8002c56 <GPS_coord_to_degrees+0x92>
	{
		if (min)
 8002c32:	7dbb      	ldrb	r3, [r7, #22]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <GPS_coord_to_degrees+0x80>
			min *= 10;
 8002c38:	7dbb      	ldrb	r3, [r7, #22]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	0092      	lsls	r2, r2, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	61ba      	str	r2, [r7, #24]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	3b30      	subs	r3, #48	; 0x30
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	7dbb      	ldrb	r3, [r7, #22]
 8002c52:	4413      	add	r3, r2
 8002c54:	75bb      	strb	r3, [r7, #22]
	while (p > q)
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d8e9      	bhi.n	8002c32 <GPS_coord_to_degrees+0x6e>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.')
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b2e      	cmp	r3, #46	; 0x2e
 8002c64:	d126      	bne.n	8002cb4 <GPS_coord_to_degrees+0xf0>
	{
		q = p + 1;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	e01d      	b.n	8002cae <GPS_coord_to_degrees+0xea>
		{
			frac_min *= 10;
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	613b      	str	r3, [r7, #16]
			if (isdigit(*q))
 8002c7e:	f00e f9d5 	bl	801102c <__locale_ctype_ptr>
 8002c82:	4602      	mov	r2, r0
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <GPS_coord_to_degrees+0xe4>
				frac_min += *q++ - '0';
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	61ba      	str	r2, [r7, #24]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	3b30      	subs	r3, #48	; 0x30
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++)
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	3301      	adds	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d9de      	bls.n	8002c72 <GPS_coord_to_degrees+0xae>
		}
	}
	return deg * 10000000UL + (min * 1000000UL + frac_min*100UL) / 6;
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <GPS_coord_to_degrees+0x11c>)
 8002cb8:	fb02 f203 	mul.w	r2, r2, r3
 8002cbc:	7dbb      	ldrb	r3, [r7, #22]
 8002cbe:	4909      	ldr	r1, [pc, #36]	; (8002ce4 <GPS_coord_to_degrees+0x120>)
 8002cc0:	fb01 f103 	mul.w	r1, r1, r3
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	2064      	movs	r0, #100	; 0x64
 8002cc8:	fb00 f303 	mul.w	r3, r0, r3
 8002ccc:	440b      	add	r3, r1
 8002cce:	4906      	ldr	r1, [pc, #24]	; (8002ce8 <GPS_coord_to_degrees+0x124>)
 8002cd0:	fba1 1303 	umull	r1, r3, r1, r3
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	00989680 	.word	0x00989680
 8002ce4:	000f4240 	.word	0x000f4240
 8002ce8:	aaaaaaab 	.word	0xaaaaaaab

08002cec <grab_fields>:

// helper functions
uint16_t grab_fields(char* src, uint8_t mult)// convert string to uint16
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint16_t tmp = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	81bb      	strh	r3, [r7, #12]

	for(i=0; src[i]!=0; i++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e032      	b.n	8002d68 <grab_fields+0x7c>
	{
		if(src[i] == '.')
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d0c:	d10d      	bne.n	8002d2a <grab_fields+0x3e>
		{
			i++;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	3301      	adds	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
			if(mult==0)
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d02d      	beq.n	8002d76 <grab_fields+0x8a>
			{
				break;
			}else
			{
				src[i+mult] = 0;
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	4413      	add	r3, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
			}
		}
		tmp *= 10;
 8002d2a:	89bb      	ldrh	r3, [r7, #12]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	81bb      	strh	r3, [r7, #12]
		if(src[i] >='0' && src[i] <='9') tmp += src[i]-'0';
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b2f      	cmp	r3, #47	; 0x2f
 8002d40:	d90f      	bls.n	8002d62 <grab_fields+0x76>
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b39      	cmp	r3, #57	; 0x39
 8002d4c:	d809      	bhi.n	8002d62 <grab_fields+0x76>
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	89bb      	ldrh	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b30      	subs	r3, #48	; 0x30
 8002d60:	81bb      	strh	r3, [r7, #12]
	for(i=0; src[i]!=0; i++)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	3301      	adds	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1c6      	bne.n	8002d02 <grab_fields+0x16>
 8002d74:	e000      	b.n	8002d78 <grab_fields+0x8c>
				break;
 8002d76:	bf00      	nop
	}
	return tmp;
 8002d78:	89bb      	ldrh	r3, [r7, #12]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <hex_c>:

uint8_t hex_c(uint8_t n) // convert '0'..'9','A'..'F' to 0..15
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	3b30      	subs	r3, #48	; 0x30
 8002d92:	71fb      	strb	r3, [r7, #7]
	if(n>9)  n -= 7;
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	2b09      	cmp	r3, #9
 8002d98:	d902      	bls.n	8002da0 <hex_c+0x1c>
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	3b07      	subs	r3, #7
 8002d9e:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	71fb      	strb	r3, [r7, #7]
	return n;
 8002da8:	79fb      	ldrb	r3, [r7, #7]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <GPS_set_pids>:

//Get the relevant P I D values and set the PID controllers
void GPS_set_pids(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
	posholdPID_PARAM.kP   = 0.15f;
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <GPS_set_pids+0x50>)
 8002dba:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <GPS_set_pids+0x54>)
 8002dbc:	601a      	str	r2, [r3, #0]
	posholdPID_PARAM.kI   = 0;
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <GPS_set_pids+0x50>)
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	605a      	str	r2, [r3, #4]
	posholdPID_PARAM.Imax = 2000;
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <GPS_set_pids+0x50>)
 8002dc8:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <GPS_set_pids+0x58>)
 8002dca:	60da      	str	r2, [r3, #12]

	poshold_ratePID_PARAM.kP   = 3.4f;
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <GPS_set_pids+0x5c>)
 8002dce:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <GPS_set_pids+0x60>)
 8002dd0:	601a      	str	r2, [r3, #0]
	poshold_ratePID_PARAM.kI   = 0.14f;
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <GPS_set_pids+0x5c>)
 8002dd4:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <GPS_set_pids+0x64>)
 8002dd6:	605a      	str	r2, [r3, #4]
	poshold_ratePID_PARAM.kD   = 0.053f;
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <GPS_set_pids+0x5c>)
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <GPS_set_pids+0x68>)
 8002ddc:	609a      	str	r2, [r3, #8]
	poshold_ratePID_PARAM.Imax = 2000;
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <GPS_set_pids+0x5c>)
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <GPS_set_pids+0x58>)
 8002de2:	60da      	str	r2, [r3, #12]

	navPID_PARAM.kP   = 2.5f;
 8002de4:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <GPS_set_pids+0x6c>)
 8002de6:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <GPS_set_pids+0x70>)
 8002de8:	601a      	str	r2, [r3, #0]
	navPID_PARAM.kI   = 0.33f;
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <GPS_set_pids+0x6c>)
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <GPS_set_pids+0x74>)
 8002dee:	605a      	str	r2, [r3, #4]
	navPID_PARAM.kD   = 0.053f;
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <GPS_set_pids+0x6c>)
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <GPS_set_pids+0x68>)
 8002df4:	609a      	str	r2, [r3, #8]
	navPID_PARAM.Imax = 2000;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <GPS_set_pids+0x6c>)
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <GPS_set_pids+0x58>)
 8002dfa:	60da      	str	r2, [r3, #12]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	20000c64 	.word	0x20000c64
 8002e08:	3e19999a 	.word	0x3e19999a
 8002e0c:	44fa0000 	.word	0x44fa0000
 8002e10:	20000b68 	.word	0x20000b68
 8002e14:	4059999a 	.word	0x4059999a
 8002e18:	3e0f5c29 	.word	0x3e0f5c29
 8002e1c:	3d591687 	.word	0x3d591687
 8002e20:	20000b20 	.word	0x20000b20
 8002e24:	40200000 	.word	0x40200000
 8002e28:	3ea8f5c3 	.word	0x3ea8f5c3

08002e2c <cliGps>:

#ifdef _USE_HW_CLI
void cliGps(cli_args_t *args)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002e34:	2300      	movs	r3, #0
 8002e36:	75fb      	strb	r3, [r7, #23]
	uint8_t point = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	75bb      	strb	r3, [r7, #22]
	char *lat = "3723.2475";
 8002e3c:	4b40      	ldr	r3, [pc, #256]	; (8002f40 <cliGps+0x114>)
 8002e3e:	613b      	str	r3, [r7, #16]
	char *lon = "12158.3416";
 8002e40:	4b40      	ldr	r3, [pc, #256]	; (8002f44 <cliGps+0x118>)
 8002e42:	60fb      	str	r3, [r7, #12]

	if (args->argc == 2 && args->isStr(0, "virtual") == true)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d16c      	bne.n	8002f26 <cliGps+0xfa>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	493d      	ldr	r1, [pc, #244]	; (8002f48 <cliGps+0x11c>)
 8002e52:	2000      	movs	r0, #0
 8002e54:	4798      	blx	r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d064      	beq.n	8002f26 <cliGps+0xfa>
	{
		f.GPS_FIX = 1;
 8002e5c:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <cliGps+0x120>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	741a      	strb	r2, [r3, #16]
		GPS.fixquality = 1;
 8002e62:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <cliGps+0x124>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		GPS.satellites = 10;
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <cliGps+0x124>)
 8002e6c:	220a      	movs	r2, #10
 8002e6e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		GPS_virtual = 1;
 8002e72:	4b38      	ldr	r3, [pc, #224]	; (8002f54 <cliGps+0x128>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
		point      = args->getData(1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	4798      	blx	r3
 8002e80:	4603      	mov	r3, r0
 8002e82:	75bb      	strb	r3, [r7, #22]
		switch(point)
 8002e84:	7dbb      	ldrb	r3, [r7, #22]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d01f      	beq.n	8002eca <cliGps+0x9e>
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d02c      	beq.n	8002ee8 <cliGps+0xbc>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d147      	bne.n	8002f22 <cliGps+0xf6>
		{
			case 0:
				GPS_coord[LAT] = 351859490;
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <cliGps+0x12c>)
 8002e94:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <cliGps+0x130>)
 8002e96:	601a      	str	r2, [r3, #0]
				GPS_coord[LON] = 1268243560;
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <cliGps+0x12c>)
 8002e9a:	4a31      	ldr	r2, [pc, #196]	; (8002f60 <cliGps+0x134>)
 8002e9c:	605a      	str	r2, [r3, #4]
				cliPrintf("GPS_coord[LAT] : %d, GPS_coord[LON] : %d\r\n", GPS_coord[LAT], GPS_coord[LON]);
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <cliGps+0x12c>)
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <cliGps+0x12c>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	482e      	ldr	r0, [pc, #184]	; (8002f64 <cliGps+0x138>)
 8002eaa:	f007 fee9 	bl	800ac80 <cliPrintf>
				cliPrintf("GPS_coord[LAT] : %d, GPS_coord[LON] : %d\r\n", GPS_coord_to_degrees(lat), GPS_coord_to_degrees(lon));
 8002eae:	6938      	ldr	r0, [r7, #16]
 8002eb0:	f7ff fe88 	bl	8002bc4 <GPS_coord_to_degrees>
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f7ff fe84 	bl	8002bc4 <GPS_coord_to_degrees>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	4828      	ldr	r0, [pc, #160]	; (8002f64 <cliGps+0x138>)
 8002ec4:	f007 fedc 	bl	800ac80 <cliPrintf>
				break;
 8002ec8:	e02b      	b.n	8002f22 <cliGps+0xf6>

			case 1:
				GPS_coord[LAT] = 351857900;
 8002eca:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <cliGps+0x12c>)
 8002ecc:	4a26      	ldr	r2, [pc, #152]	; (8002f68 <cliGps+0x13c>)
 8002ece:	601a      	str	r2, [r3, #0]
				GPS_coord[LON] = 1268246880;
 8002ed0:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <cliGps+0x12c>)
 8002ed2:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <cliGps+0x140>)
 8002ed4:	605a      	str	r2, [r3, #4]
				cliPrintf("GPS_coord[LAT] : %d, GPS_coord[LON] : %d\r\n", GPS_coord[LAT], GPS_coord[LON]);
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <cliGps+0x12c>)
 8002ed8:	6819      	ldr	r1, [r3, #0]
 8002eda:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <cliGps+0x12c>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4820      	ldr	r0, [pc, #128]	; (8002f64 <cliGps+0x138>)
 8002ee2:	f007 fecd 	bl	800ac80 <cliPrintf>
				break;
 8002ee6:	e01c      	b.n	8002f22 <cliGps+0xf6>

			case 2:
				GPS_coord[LAT] = 0;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <cliGps+0x12c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
				GPS_coord[LON] = 0;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <cliGps+0x12c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]
				f.GPS_FIX = 0;
 8002ef4:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <cliGps+0x120>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	741a      	strb	r2, [r3, #16]
				GPS.fixquality = 0;
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <cliGps+0x124>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				GPS.satellites = 0;
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <cliGps+0x124>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
				GPS_virtual = 0;
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <cliGps+0x128>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
				cliPrintf("GPS_coord[LAT] : %d, GPS_coord[LON] : %d\r\n", GPS_coord[LAT], GPS_coord[LON]);
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <cliGps+0x12c>)
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <cliGps+0x12c>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4812      	ldr	r0, [pc, #72]	; (8002f64 <cliGps+0x138>)
 8002f1c:	f007 feb0 	bl	800ac80 <cliPrintf>
				break;
 8002f20:	bf00      	nop
		}
		ret = true;
 8002f22:	2301      	movs	r3, #1
 8002f24:	75fb      	strb	r3, [r7, #23]
	}
	if (ret != true)
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	f083 0301 	eor.w	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <cliGps+0x10c>
	{
		cliPrintf("gps virtual point[0:normal, 1:next point, 2:reset]\n");
 8002f32:	480f      	ldr	r0, [pc, #60]	; (8002f70 <cliGps+0x144>)
 8002f34:	f007 fea4 	bl	800ac80 <cliPrintf>
	}
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}
 8002f40:	080196f4 	.word	0x080196f4
 8002f44:	08019700 	.word	0x08019700
 8002f48:	0801970c 	.word	0x0801970c
 8002f4c:	20000ed4 	.word	0x20000ed4
 8002f50:	20000b78 	.word	0x20000b78
 8002f54:	20000678 	.word	0x20000678
 8002f58:	20000c5c 	.word	0x20000c5c
 8002f5c:	14f8f322 	.word	0x14f8f322
 8002f60:	4b97dc68 	.word	0x4b97dc68
 8002f64:	08019714 	.word	0x08019714
 8002f68:	14f8ecec 	.word	0x14f8ecec
 8002f6c:	4b97e960 	.word	0x4b97e960
 8002f70:	08019740 	.word	0x08019740

08002f74 <invSqrt>:

float Pre_IMU[3] = {0, 0, 0};
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};
/////////////////////////////////////////////////////////////////

float invSqrt(float x) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8002f7c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7fd ff19 	bl	8000db8 <__aeabi_fmul>
 8002f86:	4603      	mov	r3, r0
 8002f88:	617b      	str	r3, [r7, #20]
	float y = x;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002f8e:	f107 0310 	add.w	r3, r7, #16
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	105a      	asrs	r2, r3, #1
 8002f9a:	4b21      	ldr	r3, [pc, #132]	; (8003020 <invSqrt+0xac>)
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	6979      	ldr	r1, [r7, #20]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd ff03 	bl	8000db8 <__aeabi_fmul>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f7fd fefc 	bl	8000db8 <__aeabi_fmul>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002fc8:	f7fd fdec 	bl	8000ba4 <__aeabi_fsub>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f7fd feef 	bl	8000db8 <__aeabi_fmul>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	6979      	ldr	r1, [r7, #20]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fee8 	bl	8000db8 <__aeabi_fmul>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	461a      	mov	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f7fd fee1 	bl	8000db8 <__aeabi_fmul>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002ffe:	f7fd fdd1 	bl	8000ba4 <__aeabi_fsub>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7fd fed4 	bl	8000db8 <__aeabi_fmul>
 8003010:	4603      	mov	r3, r0
 8003012:	613b      	str	r3, [r7, #16]
	return y;
 8003014:	693b      	ldr	r3, [r7, #16]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	5f3759df 	.word	0x5f3759df
 8003024:	00000000 	.word	0x00000000

08003028 <calculateAngles>:

void calculateAngles(TM_AHRSIMU_t* AHRS)
{
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	AHRS->Roll = (float) atan2f(AHRS->_q0 * AHRS->_q1 + AHRS->_q2 * AHRS->_q3, 0.5f - AHRS->_q1 * AHRS->_q1 - AHRS->_q2 * AHRS->_q2);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f7fd febc 	bl	8000db8 <__aeabi_fmul>
 8003040:	4603      	mov	r3, r0
 8003042:	461c      	mov	r4, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f7fd feb2 	bl	8000db8 <__aeabi_fmul>
 8003054:	4603      	mov	r3, r0
 8003056:	4619      	mov	r1, r3
 8003058:	4620      	mov	r0, r4
 800305a:	f7fd fda5 	bl	8000ba8 <__addsf3>
 800305e:	4603      	mov	r3, r0
 8003060:	461c      	mov	r4, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f7fd fea3 	bl	8000db8 <__aeabi_fmul>
 8003072:	4603      	mov	r3, r0
 8003074:	4619      	mov	r1, r3
 8003076:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800307a:	f7fd fd93 	bl	8000ba4 <__aeabi_fsub>
 800307e:	4603      	mov	r3, r0
 8003080:	461d      	mov	r5, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f7fd fe93 	bl	8000db8 <__aeabi_fmul>
 8003092:	4603      	mov	r3, r0
 8003094:	4619      	mov	r1, r3
 8003096:	4628      	mov	r0, r5
 8003098:	f7fd fd84 	bl	8000ba4 <__aeabi_fsub>
 800309c:	4603      	mov	r3, r0
 800309e:	4619      	mov	r1, r3
 80030a0:	4620      	mov	r0, r4
 80030a2:	f012 fbe5 	bl	8015870 <atan2f>
 80030a6:	4602      	mov	r2, r0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	601a      	str	r2, [r3, #0]
	AHRS->Pitch = (float) asinf(-2.0f * (AHRS->_q1 * AHRS->_q3 - AHRS->_q0 * AHRS->_q2));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699a      	ldr	r2, [r3, #24]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f7fd fe7e 	bl	8000db8 <__aeabi_fmul>
 80030bc:	4603      	mov	r3, r0
 80030be:	461c      	mov	r4, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f7fd fe74 	bl	8000db8 <__aeabi_fmul>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4619      	mov	r1, r3
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7fd fd65 	bl	8000ba4 <__aeabi_fsub>
 80030da:	4603      	mov	r3, r0
 80030dc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fe69 	bl	8000db8 <__aeabi_fmul>
 80030e6:	4603      	mov	r3, r0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f012 fb73 	bl	80157d4 <asinf>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	605a      	str	r2, [r3, #4]
	AHRS->Yaw = (float) atan2f(AHRS->_q1 * AHRS->_q2 + AHRS->_q0 * AHRS->_q3, 0.5f - AHRS->_q2 * AHRS->_q2 - AHRS->_q3 * AHRS->_q3);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7fd fe5a 	bl	8000db8 <__aeabi_fmul>
 8003104:	4603      	mov	r3, r0
 8003106:	461c      	mov	r4, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f7fd fe50 	bl	8000db8 <__aeabi_fmul>
 8003118:	4603      	mov	r3, r0
 800311a:	4619      	mov	r1, r3
 800311c:	4620      	mov	r0, r4
 800311e:	f7fd fd43 	bl	8000ba8 <__addsf3>
 8003122:	4603      	mov	r3, r0
 8003124:	461c      	mov	r4, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f7fd fe41 	bl	8000db8 <__aeabi_fmul>
 8003136:	4603      	mov	r3, r0
 8003138:	4619      	mov	r1, r3
 800313a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800313e:	f7fd fd31 	bl	8000ba4 <__aeabi_fsub>
 8003142:	4603      	mov	r3, r0
 8003144:	461d      	mov	r5, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1a      	ldr	r2, [r3, #32]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f7fd fe31 	bl	8000db8 <__aeabi_fmul>
 8003156:	4603      	mov	r3, r0
 8003158:	4619      	mov	r1, r3
 800315a:	4628      	mov	r0, r5
 800315c:	f7fd fd22 	bl	8000ba4 <__aeabi_fsub>
 8003160:	4603      	mov	r3, r0
 8003162:	4619      	mov	r1, r3
 8003164:	4620      	mov	r0, r4
 8003166:	f012 fb83 	bl	8015870 <atan2f>
 800316a:	4602      	mov	r2, r0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	609a      	str	r2, [r3, #8]

	/* Calculate degrees and remove inclination */
	AHRS->Roll *= R2D;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	49b0      	ldr	r1, [pc, #704]	; (8003438 <calculateAngles+0x410>)
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd fe1e 	bl	8000db8 <__aeabi_fmul>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	601a      	str	r2, [r3, #0]
	AHRS->Pitch *= R2D;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	49ab      	ldr	r1, [pc, #684]	; (8003438 <calculateAngles+0x410>)
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd fe14 	bl	8000db8 <__aeabi_fmul>
 8003190:	4603      	mov	r3, r0
 8003192:	461a      	mov	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	605a      	str	r2, [r3, #4]
	AHRS->Yaw *= R2D;// - AHRS->Inclination;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	49a6      	ldr	r1, [pc, #664]	; (8003438 <calculateAngles+0x410>)
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd fe0a 	bl	8000db8 <__aeabi_fmul>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	609a      	str	r2, [r3, #8]

	if (AHRS->Yaw >= 180) {
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	49a2      	ldr	r1, [pc, #648]	; (800343c <calculateAngles+0x414>)
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd ffb2 	bl	800111c <__aeabi_fcmpge>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <calculateAngles+0x1ac>
		AHRS->Yaw -= 360.0f;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	499f      	ldr	r1, [pc, #636]	; (8003440 <calculateAngles+0x418>)
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd fced 	bl	8000ba4 <__aeabi_fsub>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461a      	mov	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	e012      	b.n	80031fa <calculateAngles+0x1d2>
	} else if (AHRS->Yaw < -180) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	499a      	ldr	r1, [pc, #616]	; (8003444 <calculateAngles+0x41c>)
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd ff8a 	bl	80010f4 <__aeabi_fcmplt>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <calculateAngles+0x1d2>
		AHRS->Yaw += 360.0f;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4995      	ldr	r1, [pc, #596]	; (8003440 <calculateAngles+0x418>)
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd fcdb 	bl	8000ba8 <__addsf3>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]
	}

	AHRS->Roll  = (0.95 * (Pre_IMU[ROLL]  + (imu.gyroRaw[ROLL] * 0.004)))  + (0.05 * AHRS->Roll);
 80031fa:	4b93      	ldr	r3, [pc, #588]	; (8003448 <calculateAngles+0x420>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd f92c 	bl	800045c <__aeabi_f2d>
 8003204:	4604      	mov	r4, r0
 8003206:	460d      	mov	r5, r1
 8003208:	4b90      	ldr	r3, [pc, #576]	; (800344c <calculateAngles+0x424>)
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd f925 	bl	800045c <__aeabi_f2d>
 8003212:	a383      	add	r3, pc, #524	; (adr r3, 8003420 <calculateAngles+0x3f8>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f7fd f978 	bl	800050c <__aeabi_dmul>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4620      	mov	r0, r4
 8003222:	4629      	mov	r1, r5
 8003224:	f7fc ffbc 	bl	80001a0 <__adddf3>
 8003228:	4603      	mov	r3, r0
 800322a:	460c      	mov	r4, r1
 800322c:	4618      	mov	r0, r3
 800322e:	4621      	mov	r1, r4
 8003230:	a37d      	add	r3, pc, #500	; (adr r3, 8003428 <calculateAngles+0x400>)
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f7fd f969 	bl	800050c <__aeabi_dmul>
 800323a:	4603      	mov	r3, r0
 800323c:	460c      	mov	r4, r1
 800323e:	4625      	mov	r5, r4
 8003240:	461c      	mov	r4, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f908 	bl	800045c <__aeabi_f2d>
 800324c:	a378      	add	r3, pc, #480	; (adr r3, 8003430 <calculateAngles+0x408>)
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f7fd f95b 	bl	800050c <__aeabi_dmul>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4620      	mov	r0, r4
 800325c:	4629      	mov	r1, r5
 800325e:	f7fc ff9f 	bl	80001a0 <__adddf3>
 8003262:	4603      	mov	r3, r0
 8003264:	460c      	mov	r4, r1
 8003266:	4618      	mov	r0, r3
 8003268:	4621      	mov	r1, r4
 800326a:	f7fd fc47 	bl	8000afc <__aeabi_d2f>
 800326e:	4602      	mov	r2, r0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	601a      	str	r2, [r3, #0]
	AHRS->Pitch = (0.95 * (Pre_IMU[PITCH] + (imu.gyroRaw[PITCH] * 0.004))) + (0.05 * AHRS->Pitch);
 8003274:	4b74      	ldr	r3, [pc, #464]	; (8003448 <calculateAngles+0x420>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd f8ef 	bl	800045c <__aeabi_f2d>
 800327e:	4604      	mov	r4, r0
 8003280:	460d      	mov	r5, r1
 8003282:	4b72      	ldr	r3, [pc, #456]	; (800344c <calculateAngles+0x424>)
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f8e8 	bl	800045c <__aeabi_f2d>
 800328c:	a364      	add	r3, pc, #400	; (adr r3, 8003420 <calculateAngles+0x3f8>)
 800328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003292:	f7fd f93b 	bl	800050c <__aeabi_dmul>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4620      	mov	r0, r4
 800329c:	4629      	mov	r1, r5
 800329e:	f7fc ff7f 	bl	80001a0 <__adddf3>
 80032a2:	4603      	mov	r3, r0
 80032a4:	460c      	mov	r4, r1
 80032a6:	4618      	mov	r0, r3
 80032a8:	4621      	mov	r1, r4
 80032aa:	a35f      	add	r3, pc, #380	; (adr r3, 8003428 <calculateAngles+0x400>)
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	f7fd f92c 	bl	800050c <__aeabi_dmul>
 80032b4:	4603      	mov	r3, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	4625      	mov	r5, r4
 80032ba:	461c      	mov	r4, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f8cb 	bl	800045c <__aeabi_f2d>
 80032c6:	a35a      	add	r3, pc, #360	; (adr r3, 8003430 <calculateAngles+0x408>)
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f7fd f91e 	bl	800050c <__aeabi_dmul>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4620      	mov	r0, r4
 80032d6:	4629      	mov	r1, r5
 80032d8:	f7fc ff62 	bl	80001a0 <__adddf3>
 80032dc:	4603      	mov	r3, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	4618      	mov	r0, r3
 80032e2:	4621      	mov	r1, r4
 80032e4:	f7fd fc0a 	bl	8000afc <__aeabi_d2f>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	605a      	str	r2, [r3, #4]
	AHRS->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRS->Yaw);
 80032ee:	4b56      	ldr	r3, [pc, #344]	; (8003448 <calculateAngles+0x420>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd f8b2 	bl	800045c <__aeabi_f2d>
 80032f8:	4604      	mov	r4, r0
 80032fa:	460d      	mov	r5, r1
 80032fc:	4b53      	ldr	r3, [pc, #332]	; (800344c <calculateAngles+0x424>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f8ab 	bl	800045c <__aeabi_f2d>
 8003306:	a346      	add	r3, pc, #280	; (adr r3, 8003420 <calculateAngles+0x3f8>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f7fd f8fe 	bl	800050c <__aeabi_dmul>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4620      	mov	r0, r4
 8003316:	4629      	mov	r1, r5
 8003318:	f7fc ff42 	bl	80001a0 <__adddf3>
 800331c:	4603      	mov	r3, r0
 800331e:	460c      	mov	r4, r1
 8003320:	4618      	mov	r0, r3
 8003322:	4621      	mov	r1, r4
 8003324:	a340      	add	r3, pc, #256	; (adr r3, 8003428 <calculateAngles+0x400>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f7fd f8ef 	bl	800050c <__aeabi_dmul>
 800332e:	4603      	mov	r3, r0
 8003330:	460c      	mov	r4, r1
 8003332:	4625      	mov	r5, r4
 8003334:	461c      	mov	r4, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f88e 	bl	800045c <__aeabi_f2d>
 8003340:	a33b      	add	r3, pc, #236	; (adr r3, 8003430 <calculateAngles+0x408>)
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f7fd f8e1 	bl	800050c <__aeabi_dmul>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4620      	mov	r0, r4
 8003350:	4629      	mov	r1, r5
 8003352:	f7fc ff25 	bl	80001a0 <__adddf3>
 8003356:	4603      	mov	r3, r0
 8003358:	460c      	mov	r4, r1
 800335a:	4618      	mov	r0, r3
 800335c:	4621      	mov	r1, r4
 800335e:	f7fd fbcd 	bl	8000afc <__aeabi_d2f>
 8003362:	4602      	mov	r2, r0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	609a      	str	r2, [r3, #8]

	imu.AHRS[ROLL] = AHRS->Roll + 0.0f;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f04f 0100 	mov.w	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd fc19 	bl	8000ba8 <__addsf3>
 8003376:	4603      	mov	r3, r0
 8003378:	461a      	mov	r2, r3
 800337a:	4b34      	ldr	r3, [pc, #208]	; (800344c <calculateAngles+0x424>)
 800337c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	imu.AHRS[PITCH] = AHRS->Pitch + 0.0f;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd fc0d 	bl	8000ba8 <__addsf3>
 800338e:	4603      	mov	r3, r0
 8003390:	461a      	mov	r2, r3
 8003392:	4b2e      	ldr	r3, [pc, #184]	; (800344c <calculateAngles+0x424>)
 8003394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	imu.AHRS[YAW] = AHRS->Yaw;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a2b      	ldr	r2, [pc, #172]	; (800344c <calculateAngles+0x424>)
 800339e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	att.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 80033a2:	4b2a      	ldr	r3, [pc, #168]	; (800344c <calculateAngles+0x424>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fee1 	bl	8001170 <__aeabi_f2iz>
 80033ae:	4603      	mov	r3, r0
 80033b0:	b21b      	sxth	r3, r3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	0092      	lsls	r2, r2, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	b29b      	uxth	r3, r3
 80033be:	b21a      	sxth	r2, r3
 80033c0:	4b23      	ldr	r3, [pc, #140]	; (8003450 <calculateAngles+0x428>)
 80033c2:	801a      	strh	r2, [r3, #0]
	att.angle[PITCH] = (int16_t) imu.AHRS[PITCH] * 10;
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <calculateAngles+0x424>)
 80033c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd fed0 	bl	8001170 <__aeabi_f2iz>
 80033d0:	4603      	mov	r3, r0
 80033d2:	b21b      	sxth	r3, r3
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	0092      	lsls	r2, r2, #2
 80033da:	4413      	add	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	b29b      	uxth	r3, r3
 80033e0:	b21a      	sxth	r2, r3
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <calculateAngles+0x428>)
 80033e4:	805a      	strh	r2, [r3, #2]
	att.heading = (int16_t) imu.AHRS[YAW];
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <calculateAngles+0x424>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fd febf 	bl	8001170 <__aeabi_f2iz>
 80033f2:	4603      	mov	r3, r0
 80033f4:	b21a      	sxth	r2, r3
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <calculateAngles+0x428>)
 80033f8:	809a      	strh	r2, [r3, #4]

	Pre_IMU[ROLL]  = AHRS->Roll;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a12      	ldr	r2, [pc, #72]	; (8003448 <calculateAngles+0x420>)
 8003400:	6013      	str	r3, [r2, #0]
	Pre_IMU[PITCH] = AHRS->Pitch;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a10      	ldr	r2, [pc, #64]	; (8003448 <calculateAngles+0x420>)
 8003408:	6053      	str	r3, [r2, #4]
	Pre_IMU[YAW]   = AHRS->Yaw;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <calculateAngles+0x420>)
 8003410:	6093      	str	r3, [r2, #8]
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bdb0      	pop	{r4, r5, r7, pc}
 800341a:	bf00      	nop
 800341c:	f3af 8000 	nop.w
 8003420:	d2f1a9fc 	.word	0xd2f1a9fc
 8003424:	3f70624d 	.word	0x3f70624d
 8003428:	66666666 	.word	0x66666666
 800342c:	3fee6666 	.word	0x3fee6666
 8003430:	9999999a 	.word	0x9999999a
 8003434:	3fa99999 	.word	0x3fa99999
 8003438:	42652ee0 	.word	0x42652ee0
 800343c:	43340000 	.word	0x43340000
 8003440:	43b40000 	.word	0x43b40000
 8003444:	c3340000 	.word	0xc3340000
 8003448:	200002dc 	.word	0x200002dc
 800344c:	20000e20 	.word	0x20000e20
 8003450:	20000ef8 	.word	0x20000ef8

08003454 <TM_AHRSIMU_Init>:

static void cliImu(cli_args_t *args);

void TM_AHRSIMU_Init(float sampleRate, float beta, float inclination)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  AHRS._beta = beta;
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <TM_AHRSIMU_Init+0x5c>)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6113      	str	r3, [r2, #16]
  AHRS._sampleRate = 1 / sampleRate;
 8003466:	68f9      	ldr	r1, [r7, #12]
 8003468:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800346c:	f7fd fd58 	bl	8000f20 <__aeabi_fdiv>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <TM_AHRSIMU_Init+0x5c>)
 8003476:	625a      	str	r2, [r3, #36]	; 0x24
  AHRS.Inclination= inclination;
 8003478:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <TM_AHRSIMU_Init+0x5c>)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	60d3      	str	r3, [r2, #12]

  AHRS._q0 = 1.0f;
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <TM_AHRSIMU_Init+0x5c>)
 8003480:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003484:	615a      	str	r2, [r3, #20]
  AHRS._q1 = 0.0f;
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <TM_AHRSIMU_Init+0x5c>)
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
  AHRS._q2 = 0.0f;
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <TM_AHRSIMU_Init+0x5c>)
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	61da      	str	r2, [r3, #28]
  AHRS._q3 = 0.0f;
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <TM_AHRSIMU_Init+0x5c>)
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	621a      	str	r2, [r3, #32]
  cliAdd("imu", cliImu);
 800349e:	4905      	ldr	r1, [pc, #20]	; (80034b4 <TM_AHRSIMU_Init+0x60>)
 80034a0:	4805      	ldr	r0, [pc, #20]	; (80034b8 <TM_AHRSIMU_Init+0x64>)
 80034a2:	f007 fcf7 	bl	800ae94 <cliAdd>
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000c80 	.word	0x20000c80
 80034b4:	08003c71 	.word	0x08003c71
 80034b8:	08019774 	.word	0x08019774

080034bc <TM_AHRSIMU_UpdateIMU>:
	/* Calculate new angles */
	calculateAngles(AHRS);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRS, float gx, float gy, float gz, float ax, float ay, float az)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b09b      	sub	sp, #108	; 0x6c
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  float s0, s1, s2, s3;
  float qDot1, qDot2, qDot3, qDot4;
  float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

// Convert gyroscope degrees/sec to radians/sec
	gx = AHRSIMU_DEG2RAD(gx);
 80034ca:	4967      	ldr	r1, [pc, #412]	; (8003668 <TM_AHRSIMU_UpdateIMU+0x1ac>)
 80034cc:	68b8      	ldr	r0, [r7, #8]
 80034ce:	f7fd fc73 	bl	8000db8 <__aeabi_fmul>
 80034d2:	4603      	mov	r3, r0
 80034d4:	60bb      	str	r3, [r7, #8]
	gy = AHRSIMU_DEG2RAD(gy);
 80034d6:	4964      	ldr	r1, [pc, #400]	; (8003668 <TM_AHRSIMU_UpdateIMU+0x1ac>)
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7fd fc6d 	bl	8000db8 <__aeabi_fmul>
 80034de:	4603      	mov	r3, r0
 80034e0:	607b      	str	r3, [r7, #4]
	gz = AHRSIMU_DEG2RAD(gz);
 80034e2:	4961      	ldr	r1, [pc, #388]	; (8003668 <TM_AHRSIMU_UpdateIMU+0x1ac>)
 80034e4:	6838      	ldr	r0, [r7, #0]
 80034e6:	f7fd fc67 	bl	8000db8 <__aeabi_fmul>
 80034ea:	4603      	mov	r3, r0
 80034ec:	603b      	str	r3, [r7, #0]

  /* Rate of change of quaternion from gyroscope */
  qDot1 = 0.5f * (-AHRS->_q1 * gx - AHRS->_q2 * gy - AHRS->_q3 * gz);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd fc5d 	bl	8000db8 <__aeabi_fmul>
 80034fe:	4603      	mov	r3, r0
 8003500:	461c      	mov	r4, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd fc55 	bl	8000db8 <__aeabi_fmul>
 800350e:	4603      	mov	r3, r0
 8003510:	4619      	mov	r1, r3
 8003512:	4620      	mov	r0, r4
 8003514:	f7fd fb46 	bl	8000ba4 <__aeabi_fsub>
 8003518:	4603      	mov	r3, r0
 800351a:	461c      	mov	r4, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	6839      	ldr	r1, [r7, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd fc48 	bl	8000db8 <__aeabi_fmul>
 8003528:	4603      	mov	r3, r0
 800352a:	4619      	mov	r1, r3
 800352c:	4620      	mov	r0, r4
 800352e:	f7fd fb39 	bl	8000ba4 <__aeabi_fsub>
 8003532:	4603      	mov	r3, r0
 8003534:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd fc3d 	bl	8000db8 <__aeabi_fmul>
 800353e:	4603      	mov	r3, r0
 8003540:	667b      	str	r3, [r7, #100]	; 0x64
  qDot2 = 0.5f * (AHRS->_q0 * gx + AHRS->_q2 * gz - AHRS->_q3 * gy);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd fc35 	bl	8000db8 <__aeabi_fmul>
 800354e:	4603      	mov	r3, r0
 8003550:	461c      	mov	r4, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	6839      	ldr	r1, [r7, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7fd fc2d 	bl	8000db8 <__aeabi_fmul>
 800355e:	4603      	mov	r3, r0
 8003560:	4619      	mov	r1, r3
 8003562:	4620      	mov	r0, r4
 8003564:	f7fd fb20 	bl	8000ba8 <__addsf3>
 8003568:	4603      	mov	r3, r0
 800356a:	461c      	mov	r4, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fc20 	bl	8000db8 <__aeabi_fmul>
 8003578:	4603      	mov	r3, r0
 800357a:	4619      	mov	r1, r3
 800357c:	4620      	mov	r0, r4
 800357e:	f7fd fb11 	bl	8000ba4 <__aeabi_fsub>
 8003582:	4603      	mov	r3, r0
 8003584:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003588:	4618      	mov	r0, r3
 800358a:	f7fd fc15 	bl	8000db8 <__aeabi_fmul>
 800358e:	4603      	mov	r3, r0
 8003590:	663b      	str	r3, [r7, #96]	; 0x60
  qDot3 = 0.5f * (AHRS->_q0 * gy - AHRS->_q1 * gz + AHRS->_q3 * gx);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4618      	mov	r0, r3
 800359a:	f7fd fc0d 	bl	8000db8 <__aeabi_fmul>
 800359e:	4603      	mov	r3, r0
 80035a0:	461c      	mov	r4, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	6839      	ldr	r1, [r7, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fd fc05 	bl	8000db8 <__aeabi_fmul>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4619      	mov	r1, r3
 80035b2:	4620      	mov	r0, r4
 80035b4:	f7fd faf6 	bl	8000ba4 <__aeabi_fsub>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461c      	mov	r4, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fbf8 	bl	8000db8 <__aeabi_fmul>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4619      	mov	r1, r3
 80035cc:	4620      	mov	r0, r4
 80035ce:	f7fd faeb 	bl	8000ba8 <__addsf3>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fd fbed 	bl	8000db8 <__aeabi_fmul>
 80035de:	4603      	mov	r3, r0
 80035e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  qDot4 = 0.5f * (AHRS->_q0 * gz + AHRS->_q1 * gy - AHRS->_q2 * gx);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	6839      	ldr	r1, [r7, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fbe5 	bl	8000db8 <__aeabi_fmul>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461c      	mov	r4, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fbdd 	bl	8000db8 <__aeabi_fmul>
 80035fe:	4603      	mov	r3, r0
 8003600:	4619      	mov	r1, r3
 8003602:	4620      	mov	r0, r4
 8003604:	f7fd fad0 	bl	8000ba8 <__addsf3>
 8003608:	4603      	mov	r3, r0
 800360a:	461c      	mov	r4, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fbd0 	bl	8000db8 <__aeabi_fmul>
 8003618:	4603      	mov	r3, r0
 800361a:	4619      	mov	r1, r3
 800361c:	4620      	mov	r0, r4
 800361e:	f7fd fac1 	bl	8000ba4 <__aeabi_fsub>
 8003622:	4603      	mov	r3, r0
 8003624:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fbc5 	bl	8000db8 <__aeabi_fmul>
 800362e:	4603      	mov	r3, r0
 8003630:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
  if (!(ax == 0.0f && ay == 0.0f && az == 0.0f))
 8003632:	f04f 0100 	mov.w	r1, #0
 8003636:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003638:	f7fd fd52 	bl	80010e0 <__aeabi_fcmpeq>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d014      	beq.n	800366c <TM_AHRSIMU_UpdateIMU+0x1b0>
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003648:	f7fd fd4a 	bl	80010e0 <__aeabi_fcmpeq>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00c      	beq.n	800366c <TM_AHRSIMU_UpdateIMU+0x1b0>
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800365a:	f7fd fd41 	bl	80010e0 <__aeabi_fcmpeq>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	f040 8231 	bne.w	8003ac8 <TM_AHRSIMU_UpdateIMU+0x60c>
 8003666:	e001      	b.n	800366c <TM_AHRSIMU_UpdateIMU+0x1b0>
 8003668:	3c8efa35 	.word	0x3c8efa35
  {

   /* Normalise accelerometer measurement */
     recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800366c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800366e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003670:	f7fd fba2 	bl	8000db8 <__aeabi_fmul>
 8003674:	4603      	mov	r3, r0
 8003676:	461c      	mov	r4, r3
 8003678:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800367a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800367c:	f7fd fb9c 	bl	8000db8 <__aeabi_fmul>
 8003680:	4603      	mov	r3, r0
 8003682:	4619      	mov	r1, r3
 8003684:	4620      	mov	r0, r4
 8003686:	f7fd fa8f 	bl	8000ba8 <__addsf3>
 800368a:	4603      	mov	r3, r0
 800368c:	461c      	mov	r4, r3
 800368e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003692:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003696:	f7fd fb8f 	bl	8000db8 <__aeabi_fmul>
 800369a:	4603      	mov	r3, r0
 800369c:	4619      	mov	r1, r3
 800369e:	4620      	mov	r0, r4
 80036a0:	f7fd fa82 	bl	8000ba8 <__addsf3>
 80036a4:	4603      	mov	r3, r0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fc64 	bl	8002f74 <invSqrt>
 80036ac:	6578      	str	r0, [r7, #84]	; 0x54
     ax *= recipNorm;
 80036ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036b0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80036b2:	f7fd fb81 	bl	8000db8 <__aeabi_fmul>
 80036b6:	4603      	mov	r3, r0
 80036b8:	67bb      	str	r3, [r7, #120]	; 0x78
     ay *= recipNorm;
 80036ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036bc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80036be:	f7fd fb7b 	bl	8000db8 <__aeabi_fmul>
 80036c2:	4603      	mov	r3, r0
 80036c4:	67fb      	str	r3, [r7, #124]	; 0x7c
     az *= recipNorm;
 80036c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036c8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80036cc:	f7fd fb74 	bl	8000db8 <__aeabi_fmul>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

   /* Auxiliary variables to avoid repeated arithmetic */
     _2q0 = 2.0f * AHRS->_q0;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4619      	mov	r1, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fa63 	bl	8000ba8 <__addsf3>
 80036e2:	4603      	mov	r3, r0
 80036e4:	653b      	str	r3, [r7, #80]	; 0x50
     _2q1 = 2.0f * AHRS->_q1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	4619      	mov	r1, r3
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fa5b 	bl	8000ba8 <__addsf3>
 80036f2:	4603      	mov	r3, r0
 80036f4:	64fb      	str	r3, [r7, #76]	; 0x4c
     _2q2 = 2.0f * AHRS->_q2;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	4619      	mov	r1, r3
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd fa53 	bl	8000ba8 <__addsf3>
 8003702:	4603      	mov	r3, r0
 8003704:	64bb      	str	r3, [r7, #72]	; 0x48
     _2q3 = 2.0f * AHRS->_q3;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4619      	mov	r1, r3
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd fa4b 	bl	8000ba8 <__addsf3>
 8003712:	4603      	mov	r3, r0
 8003714:	647b      	str	r3, [r7, #68]	; 0x44
     _4q0 = 4.0f * AHRS->_q0;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd fb4a 	bl	8000db8 <__aeabi_fmul>
 8003724:	4603      	mov	r3, r0
 8003726:	643b      	str	r3, [r7, #64]	; 0x40
     _4q1 = 4.0f * AHRS->_q1;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd fb41 	bl	8000db8 <__aeabi_fmul>
 8003736:	4603      	mov	r3, r0
 8003738:	63fb      	str	r3, [r7, #60]	; 0x3c
     _4q2 = 4.0f * AHRS->_q2;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd fb38 	bl	8000db8 <__aeabi_fmul>
 8003748:	4603      	mov	r3, r0
 800374a:	63bb      	str	r3, [r7, #56]	; 0x38
     _8q1 = 8.0f * AHRS->_q1;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fb2f 	bl	8000db8 <__aeabi_fmul>
 800375a:	4603      	mov	r3, r0
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
     _8q2 = 8.0f * AHRS->_q2;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fb26 	bl	8000db8 <__aeabi_fmul>
 800376c:	4603      	mov	r3, r0
 800376e:	633b      	str	r3, [r7, #48]	; 0x30
     q0q0 = AHRS->_q0 * AHRS->_q0;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f7fd fb1c 	bl	8000db8 <__aeabi_fmul>
 8003780:	4603      	mov	r3, r0
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
     q1q1 = AHRS->_q1 * AHRS->_q1;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	699a      	ldr	r2, [r3, #24]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f7fd fb12 	bl	8000db8 <__aeabi_fmul>
 8003794:	4603      	mov	r3, r0
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28
     q2q2 = AHRS->_q2 * AHRS->_q2;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f7fd fb08 	bl	8000db8 <__aeabi_fmul>
 80037a8:	4603      	mov	r3, r0
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
     q3q3 = AHRS->_q3 * AHRS->_q3;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f7fd fafe 	bl	8000db8 <__aeabi_fmul>
 80037bc:	4603      	mov	r3, r0
 80037be:	623b      	str	r3, [r7, #32]

     /* Gradient decent algorithm corrective step */
     s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80037c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80037c4:	f7fd faf8 	bl	8000db8 <__aeabi_fmul>
 80037c8:	4603      	mov	r3, r0
 80037ca:	461c      	mov	r4, r3
 80037cc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80037ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80037d0:	f7fd faf2 	bl	8000db8 <__aeabi_fmul>
 80037d4:	4603      	mov	r3, r0
 80037d6:	4619      	mov	r1, r3
 80037d8:	4620      	mov	r0, r4
 80037da:	f7fd f9e5 	bl	8000ba8 <__addsf3>
 80037de:	4603      	mov	r3, r0
 80037e0:	461c      	mov	r4, r3
 80037e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80037e6:	f7fd fae7 	bl	8000db8 <__aeabi_fmul>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4619      	mov	r1, r3
 80037ee:	4620      	mov	r0, r4
 80037f0:	f7fd f9da 	bl	8000ba8 <__addsf3>
 80037f4:	4603      	mov	r3, r0
 80037f6:	461c      	mov	r4, r3
 80037f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80037fc:	f7fd fadc 	bl	8000db8 <__aeabi_fmul>
 8003800:	4603      	mov	r3, r0
 8003802:	4619      	mov	r1, r3
 8003804:	4620      	mov	r0, r4
 8003806:	f7fd f9cd 	bl	8000ba4 <__aeabi_fsub>
 800380a:	4603      	mov	r3, r0
 800380c:	61fb      	str	r3, [r7, #28]
     s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRS->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800380e:	6a39      	ldr	r1, [r7, #32]
 8003810:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003812:	f7fd fad1 	bl	8000db8 <__aeabi_fmul>
 8003816:	4603      	mov	r3, r0
 8003818:	461c      	mov	r4, r3
 800381a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800381c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800381e:	f7fd facb 	bl	8000db8 <__aeabi_fmul>
 8003822:	4603      	mov	r3, r0
 8003824:	4619      	mov	r1, r3
 8003826:	4620      	mov	r0, r4
 8003828:	f7fd f9bc 	bl	8000ba4 <__aeabi_fsub>
 800382c:	4603      	mov	r3, r0
 800382e:	461c      	mov	r4, r3
 8003830:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003836:	f7fd fabf 	bl	8000db8 <__aeabi_fmul>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f7fd fab7 	bl	8000db8 <__aeabi_fmul>
 800384a:	4603      	mov	r3, r0
 800384c:	4619      	mov	r1, r3
 800384e:	4620      	mov	r0, r4
 8003850:	f7fd f9aa 	bl	8000ba8 <__addsf3>
 8003854:	4603      	mov	r3, r0
 8003856:	461c      	mov	r4, r3
 8003858:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800385a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800385c:	f7fd faac 	bl	8000db8 <__aeabi_fmul>
 8003860:	4603      	mov	r3, r0
 8003862:	4619      	mov	r1, r3
 8003864:	4620      	mov	r0, r4
 8003866:	f7fd f99d 	bl	8000ba4 <__aeabi_fsub>
 800386a:	4603      	mov	r3, r0
 800386c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd f998 	bl	8000ba4 <__aeabi_fsub>
 8003874:	4603      	mov	r3, r0
 8003876:	461c      	mov	r4, r3
 8003878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800387a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800387c:	f7fd fa9c 	bl	8000db8 <__aeabi_fmul>
 8003880:	4603      	mov	r3, r0
 8003882:	4619      	mov	r1, r3
 8003884:	4620      	mov	r0, r4
 8003886:	f7fd f98f 	bl	8000ba8 <__addsf3>
 800388a:	4603      	mov	r3, r0
 800388c:	461c      	mov	r4, r3
 800388e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003890:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003892:	f7fd fa91 	bl	8000db8 <__aeabi_fmul>
 8003896:	4603      	mov	r3, r0
 8003898:	4619      	mov	r1, r3
 800389a:	4620      	mov	r0, r4
 800389c:	f7fd f984 	bl	8000ba8 <__addsf3>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461c      	mov	r4, r3
 80038a4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80038a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038aa:	f7fd fa85 	bl	8000db8 <__aeabi_fmul>
 80038ae:	4603      	mov	r3, r0
 80038b0:	4619      	mov	r1, r3
 80038b2:	4620      	mov	r0, r4
 80038b4:	f7fd f978 	bl	8000ba8 <__addsf3>
 80038b8:	4603      	mov	r3, r0
 80038ba:	61bb      	str	r3, [r7, #24]
     s2 = 4.0f * q0q0 * AHRS->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80038bc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80038c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038c2:	f7fd fa79 	bl	8000db8 <__aeabi_fmul>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7fd fa71 	bl	8000db8 <__aeabi_fmul>
 80038d6:	4603      	mov	r3, r0
 80038d8:	461c      	mov	r4, r3
 80038da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80038dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80038de:	f7fd fa6b 	bl	8000db8 <__aeabi_fmul>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4619      	mov	r1, r3
 80038e6:	4620      	mov	r0, r4
 80038e8:	f7fd f95e 	bl	8000ba8 <__addsf3>
 80038ec:	4603      	mov	r3, r0
 80038ee:	461c      	mov	r4, r3
 80038f0:	6a39      	ldr	r1, [r7, #32]
 80038f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038f4:	f7fd fa60 	bl	8000db8 <__aeabi_fmul>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4619      	mov	r1, r3
 80038fc:	4620      	mov	r0, r4
 80038fe:	f7fd f953 	bl	8000ba8 <__addsf3>
 8003902:	4603      	mov	r3, r0
 8003904:	461c      	mov	r4, r3
 8003906:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003908:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800390a:	f7fd fa55 	bl	8000db8 <__aeabi_fmul>
 800390e:	4603      	mov	r3, r0
 8003910:	4619      	mov	r1, r3
 8003912:	4620      	mov	r0, r4
 8003914:	f7fd f946 	bl	8000ba4 <__aeabi_fsub>
 8003918:	4603      	mov	r3, r0
 800391a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd f941 	bl	8000ba4 <__aeabi_fsub>
 8003922:	4603      	mov	r3, r0
 8003924:	461c      	mov	r4, r3
 8003926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800392a:	f7fd fa45 	bl	8000db8 <__aeabi_fmul>
 800392e:	4603      	mov	r3, r0
 8003930:	4619      	mov	r1, r3
 8003932:	4620      	mov	r0, r4
 8003934:	f7fd f938 	bl	8000ba8 <__addsf3>
 8003938:	4603      	mov	r3, r0
 800393a:	461c      	mov	r4, r3
 800393c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800393e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003940:	f7fd fa3a 	bl	8000db8 <__aeabi_fmul>
 8003944:	4603      	mov	r3, r0
 8003946:	4619      	mov	r1, r3
 8003948:	4620      	mov	r0, r4
 800394a:	f7fd f92d 	bl	8000ba8 <__addsf3>
 800394e:	4603      	mov	r3, r0
 8003950:	461c      	mov	r4, r3
 8003952:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003956:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003958:	f7fd fa2e 	bl	8000db8 <__aeabi_fmul>
 800395c:	4603      	mov	r3, r0
 800395e:	4619      	mov	r1, r3
 8003960:	4620      	mov	r0, r4
 8003962:	f7fd f921 	bl	8000ba8 <__addsf3>
 8003966:	4603      	mov	r3, r0
 8003968:	617b      	str	r3, [r7, #20]
     s3 = 4.0f * q1q1 * AHRS->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRS->_q3 - _2q2 * ay;
 800396a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800396e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003970:	f7fd fa22 	bl	8000db8 <__aeabi_fmul>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f7fd fa1a 	bl	8000db8 <__aeabi_fmul>
 8003984:	4603      	mov	r3, r0
 8003986:	461c      	mov	r4, r3
 8003988:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800398a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800398c:	f7fd fa14 	bl	8000db8 <__aeabi_fmul>
 8003990:	4603      	mov	r3, r0
 8003992:	4619      	mov	r1, r3
 8003994:	4620      	mov	r0, r4
 8003996:	f7fd f905 	bl	8000ba4 <__aeabi_fsub>
 800399a:	4603      	mov	r3, r0
 800399c:	461c      	mov	r4, r3
 800399e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80039a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a4:	f7fd fa08 	bl	8000db8 <__aeabi_fmul>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f7fd fa00 	bl	8000db8 <__aeabi_fmul>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4619      	mov	r1, r3
 80039bc:	4620      	mov	r0, r4
 80039be:	f7fd f8f3 	bl	8000ba8 <__addsf3>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461c      	mov	r4, r3
 80039c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80039ca:	f7fd f9f5 	bl	8000db8 <__aeabi_fmul>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4619      	mov	r1, r3
 80039d2:	4620      	mov	r0, r4
 80039d4:	f7fd f8e6 	bl	8000ba4 <__aeabi_fsub>
 80039d8:	4603      	mov	r3, r0
 80039da:	613b      	str	r3, [r7, #16]

     /* Normalise step magnitude */
     recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 80039dc:	69f9      	ldr	r1, [r7, #28]
 80039de:	69f8      	ldr	r0, [r7, #28]
 80039e0:	f7fd f9ea 	bl	8000db8 <__aeabi_fmul>
 80039e4:	4603      	mov	r3, r0
 80039e6:	461c      	mov	r4, r3
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	69b8      	ldr	r0, [r7, #24]
 80039ec:	f7fd f9e4 	bl	8000db8 <__aeabi_fmul>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4619      	mov	r1, r3
 80039f4:	4620      	mov	r0, r4
 80039f6:	f7fd f8d7 	bl	8000ba8 <__addsf3>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461c      	mov	r4, r3
 80039fe:	6979      	ldr	r1, [r7, #20]
 8003a00:	6978      	ldr	r0, [r7, #20]
 8003a02:	f7fd f9d9 	bl	8000db8 <__aeabi_fmul>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f7fd f8cc 	bl	8000ba8 <__addsf3>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461c      	mov	r4, r3
 8003a14:	6939      	ldr	r1, [r7, #16]
 8003a16:	6938      	ldr	r0, [r7, #16]
 8003a18:	f7fd f9ce 	bl	8000db8 <__aeabi_fmul>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7fd f8c1 	bl	8000ba8 <__addsf3>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff faa3 	bl	8002f74 <invSqrt>
 8003a2e:	6578      	str	r0, [r7, #84]	; 0x54
     s0 *= recipNorm;
 8003a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a32:	69f8      	ldr	r0, [r7, #28]
 8003a34:	f7fd f9c0 	bl	8000db8 <__aeabi_fmul>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	61fb      	str	r3, [r7, #28]
     s1 *= recipNorm;
 8003a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a3e:	69b8      	ldr	r0, [r7, #24]
 8003a40:	f7fd f9ba 	bl	8000db8 <__aeabi_fmul>
 8003a44:	4603      	mov	r3, r0
 8003a46:	61bb      	str	r3, [r7, #24]
     s2 *= recipNorm;
 8003a48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f7fd f9b4 	bl	8000db8 <__aeabi_fmul>
 8003a50:	4603      	mov	r3, r0
 8003a52:	617b      	str	r3, [r7, #20]
     s3 *= recipNorm;
 8003a54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a56:	6938      	ldr	r0, [r7, #16]
 8003a58:	f7fd f9ae 	bl	8000db8 <__aeabi_fmul>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	613b      	str	r3, [r7, #16]

     /* Apply feedback step */
     qDot1 -= AHRS->_beta * s0;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	69f9      	ldr	r1, [r7, #28]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd f9a6 	bl	8000db8 <__aeabi_fmul>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003a72:	f7fd f897 	bl	8000ba4 <__aeabi_fsub>
 8003a76:	4603      	mov	r3, r0
 8003a78:	667b      	str	r3, [r7, #100]	; 0x64
     qDot2 -= AHRS->_beta * s1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	69b9      	ldr	r1, [r7, #24]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd f999 	bl	8000db8 <__aeabi_fmul>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4619      	mov	r1, r3
 8003a8a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003a8c:	f7fd f88a 	bl	8000ba4 <__aeabi_fsub>
 8003a90:	4603      	mov	r3, r0
 8003a92:	663b      	str	r3, [r7, #96]	; 0x60
     qDot3 -= AHRS->_beta * s2;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	6979      	ldr	r1, [r7, #20]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd f98c 	bl	8000db8 <__aeabi_fmul>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003aa6:	f7fd f87d 	bl	8000ba4 <__aeabi_fsub>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	65fb      	str	r3, [r7, #92]	; 0x5c
     qDot4 -= AHRS->_beta * s3;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	6939      	ldr	r1, [r7, #16]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd f97f 	bl	8000db8 <__aeabi_fmul>
 8003aba:	4603      	mov	r3, r0
 8003abc:	4619      	mov	r1, r3
 8003abe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003ac0:	f7fd f870 	bl	8000ba4 <__aeabi_fsub>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	65bb      	str	r3, [r7, #88]	; 0x58
  }

  /* Integrate rate of change of quaternion to yield quaternion */
  AHRS->_q0 += qDot1 * AHRS->_sampleRate;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	695c      	ldr	r4, [r3, #20]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd f970 	bl	8000db8 <__aeabi_fmul>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4619      	mov	r1, r3
 8003adc:	4620      	mov	r0, r4
 8003ade:	f7fd f863 	bl	8000ba8 <__addsf3>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	615a      	str	r2, [r3, #20]
  AHRS->_q1 += qDot2 * AHRS->_sampleRate;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699c      	ldr	r4, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd f95f 	bl	8000db8 <__aeabi_fmul>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4619      	mov	r1, r3
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7fd f852 	bl	8000ba8 <__addsf3>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	619a      	str	r2, [r3, #24]
  AHRS->_q2 += qDot3 * AHRS->_sampleRate;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	69dc      	ldr	r4, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd f94e 	bl	8000db8 <__aeabi_fmul>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7fd f841 	bl	8000ba8 <__addsf3>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	61da      	str	r2, [r3, #28]
  AHRS->_q3 += qDot4 * AHRS->_sampleRate;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1c      	ldr	r4, [r3, #32]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fd f93d 	bl	8000db8 <__aeabi_fmul>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4619      	mov	r1, r3
 8003b42:	4620      	mov	r0, r4
 8003b44:	f7fd f830 	bl	8000ba8 <__addsf3>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	621a      	str	r2, [r3, #32]

  /* Normalise quaternion */
  recipNorm = invSqrt(AHRS->_q0 * AHRS->_q0 + AHRS->_q1 * AHRS->_q1 + AHRS->_q2 * AHRS->_q2 + AHRS->_q3 * AHRS->_q3);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f7fd f92c 	bl	8000db8 <__aeabi_fmul>
 8003b60:	4603      	mov	r3, r0
 8003b62:	461c      	mov	r4, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	699a      	ldr	r2, [r3, #24]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f7fd f922 	bl	8000db8 <__aeabi_fmul>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4619      	mov	r1, r3
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7fd f815 	bl	8000ba8 <__addsf3>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	461c      	mov	r4, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	69da      	ldr	r2, [r3, #28]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f7fd f913 	bl	8000db8 <__aeabi_fmul>
 8003b92:	4603      	mov	r3, r0
 8003b94:	4619      	mov	r1, r3
 8003b96:	4620      	mov	r0, r4
 8003b98:	f7fd f806 	bl	8000ba8 <__addsf3>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461c      	mov	r4, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f7fd f904 	bl	8000db8 <__aeabi_fmul>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7fc fff7 	bl	8000ba8 <__addsf3>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff f9d9 	bl	8002f74 <invSqrt>
 8003bc2:	6578      	str	r0, [r7, #84]	; 0x54
  AHRS->_q0 *= recipNorm;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd f8f4 	bl	8000db8 <__aeabi_fmul>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	615a      	str	r2, [r3, #20]
  AHRS->_q1 *= recipNorm;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd f8ea 	bl	8000db8 <__aeabi_fmul>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	619a      	str	r2, [r3, #24]
  AHRS->_q2 *= recipNorm;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd f8e0 	bl	8000db8 <__aeabi_fmul>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	61da      	str	r2, [r3, #28]
  AHRS->_q3 *= recipNorm;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd f8d6 	bl	8000db8 <__aeabi_fmul>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	621a      	str	r2, [r3, #32]

  /* Calculate new angles */
  calculateAngles(AHRS);
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7ff fa07 	bl	8003028 <calculateAngles>
}
 8003c1a:	bf00      	nop
 8003c1c:	376c      	adds	r7, #108	; 0x6c
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd90      	pop	{r4, r7, pc}
 8003c22:	bf00      	nop

08003c24 <computeIMU>:
  imu.AHRS[ROLL]  *= 180.0f / AHRSIMU_PI;

}

void computeIMU(void)
{
 8003c24:	b5b0      	push	{r4, r5, r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af04      	add	r7, sp, #16
	Gyro_getADC();  //240us
 8003c2a:	f002 fcab 	bl	8006584 <Gyro_getADC>
  ACC_getADC(); //240us
 8003c2e:	f002 fd5f 	bl	80066f0 <ACC_getADC>
	Temp_getADC(); //140us
 8003c32:	f003 f92d 	bl	8006e90 <Temp_getADC>
	  imu.Yaw = imu.gyroz;
		#endif

#ifdef IMU_AHRS

	TM_AHRSIMU_UpdateIMU(&AHRS, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accSmooth[ROLL], imu.accSmooth[PITCH], imu.accSmooth[YAW]);
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <computeIMU+0x44>)
 8003c38:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <computeIMU+0x44>)
 8003c3c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <computeIMU+0x44>)
 8003c40:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <computeIMU+0x44>)
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <computeIMU+0x44>)
 8003c48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c4a:	4907      	ldr	r1, [pc, #28]	; (8003c68 <computeIMU+0x44>)
 8003c4c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003c4e:	9102      	str	r1, [sp, #8]
 8003c50:	9201      	str	r2, [sp, #4]
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	462b      	mov	r3, r5
 8003c56:	4622      	mov	r2, r4
 8003c58:	4601      	mov	r1, r0
 8003c5a:	4804      	ldr	r0, [pc, #16]	; (8003c6c <computeIMU+0x48>)
 8003c5c:	f7ff fc2e 	bl	80034bc <TM_AHRSIMU_UpdateIMU>

	//TM_AHRSIMU_UpdateAHRS(&AHRS, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.magSmooth[ROLL], imu.magSmooth[PITCH], imu.magSmooth[YAW]);
#endif
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bdb0      	pop	{r4, r5, r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000e20 	.word	0x20000e20
 8003c6c:	20000c80 	.word	0x20000c80

08003c70 <cliImu>:

void cliImu(cli_args_t *args)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 2 && args->isStr(0, "show")==true)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d156      	bne.n	8003d32 <cliImu+0xc2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	4930      	ldr	r1, [pc, #192]	; (8003d4c <cliImu+0xdc>)
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	4798      	blx	r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d04e      	beq.n	8003d32 <cliImu+0xc2>
	{
		uint8_t angle;
		uint32_t pre_time;

		angle = args->getData(1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2001      	movs	r0, #1
 8003c9a:	4798      	blx	r3
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	73fb      	strb	r3, [r7, #15]

		pre_time = micros();
 8003ca0:	f7fd fc14 	bl	80014cc <micros>
 8003ca4:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 8003ca6:	e03f      	b.n	8003d28 <cliImu+0xb8>
		{
			if(micros()-pre_time >= 10000)
 8003ca8:	f7fd fc10 	bl	80014cc <micros>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d934      	bls.n	8003d24 <cliImu+0xb4>
			{
				pre_time = micros();
 8003cba:	f7fd fc07 	bl	80014cc <micros>
 8003cbe:	6138      	str	r0, [r7, #16]
				computeIMU();
 8003cc0:	f7ff ffb0 	bl	8003c24 <computeIMU>
				if(angle == ROLL)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10c      	bne.n	8003ce4 <cliImu+0x74>
					cliPrintf("ROLL ANGLE : %f\r\n", imu.AHRS[ROLL]);
 8003cca:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <cliImu+0xe0>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fc fbc3 	bl	800045c <__aeabi_f2d>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	460c      	mov	r4, r1
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4623      	mov	r3, r4
 8003cde:	481d      	ldr	r0, [pc, #116]	; (8003d54 <cliImu+0xe4>)
 8003ce0:	f006 ffce 	bl	800ac80 <cliPrintf>
				if(angle == PITCH)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d10c      	bne.n	8003d04 <cliImu+0x94>
					cliPrintf("PITCH ANGLE : %f\r\n", imu.AHRS[PITCH]);
 8003cea:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <cliImu+0xe0>)
 8003cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fc fbb3 	bl	800045c <__aeabi_f2d>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4623      	mov	r3, r4
 8003cfe:	4816      	ldr	r0, [pc, #88]	; (8003d58 <cliImu+0xe8>)
 8003d00:	f006 ffbe 	bl	800ac80 <cliPrintf>
				if(angle == YAW)
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d10c      	bne.n	8003d24 <cliImu+0xb4>
					cliPrintf("YAW ANGLE : %f\r\n", imu.AHRS[YAW]);
 8003d0a:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <cliImu+0xe0>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fc fba3 	bl	800045c <__aeabi_f2d>
 8003d16:	4603      	mov	r3, r0
 8003d18:	460c      	mov	r4, r1
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	480f      	ldr	r0, [pc, #60]	; (8003d5c <cliImu+0xec>)
 8003d20:	f006 ffae 	bl	800ac80 <cliPrintf>
			}
			ret = true;
 8003d24:	2301      	movs	r3, #1
 8003d26:	75fb      	strb	r3, [r7, #23]
		while(cliKeepLoop())
 8003d28:	f007 f89e 	bl	800ae68 <cliKeepLoop>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1ba      	bne.n	8003ca8 <cliImu+0x38>
		}
	}
	if(ret !=true)
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	f083 0301 	eor.w	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <cliImu+0xd4>
	{
		cliPrintf("imu show angle[ROL=0, PITCH=1, YAW=2]");
 8003d3e:	4808      	ldr	r0, [pc, #32]	; (8003d60 <cliImu+0xf0>)
 8003d40:	f006 ff9e 	bl	800ac80 <cliPrintf>
	}
}
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd90      	pop	{r4, r7, pc}
 8003d4c:	08019778 	.word	0x08019778
 8003d50:	20000e20 	.word	0x20000e20
 8003d54:	08019780 	.word	0x08019780
 8003d58:	08019794 	.word	0x08019794
 8003d5c:	080197a8 	.word	0x080197a8
 8003d60:	080197bc 	.word	0x080197bc

08003d64 <error_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the error LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void error_signal(void)
{
 8003d64:	b598      	push	{r3, r4, r7, lr}
 8003d66:	af00      	add	r7, sp, #0
	if (Error.error >= 100) {ledOn(RGB_RED);}                                                         //When the error is 100 the LED is always on.
 8003d68:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <error_signal+0x94>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b63      	cmp	r3, #99	; 0x63
 8003d6e:	d903      	bls.n	8003d78 <error_signal+0x14>
 8003d70:	2002      	movs	r0, #2
 8003d72:	f007 fbf7 	bl	800b564 <ledOn>
			ledOff(RGB_RED);																																//Turn the LED off.
			Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
			Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
		}
	}
}
 8003d76:	e03c      	b.n	8003df2 <error_signal+0x8e>
	else if (Error.error_timer < millis())
 8003d78:	4b1f      	ldr	r3, [pc, #124]	; (8003df8 <error_signal+0x94>)
 8003d7a:	685c      	ldr	r4, [r3, #4]
 8003d7c:	f7fd fb9e 	bl	80014bc <millis>
 8003d80:	4603      	mov	r3, r0
 8003d82:	429c      	cmp	r4, r3
 8003d84:	d235      	bcs.n	8003df2 <error_signal+0x8e>
		Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 8003d86:	f7fd fb99 	bl	80014bc <millis>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	33fa      	adds	r3, #250	; 0xfa
 8003d8e:	4a1a      	ldr	r2, [pc, #104]	; (8003df8 <error_signal+0x94>)
 8003d90:	6053      	str	r3, [r2, #4]
		if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <error_signal+0x94>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <error_signal+0x4c>
 8003d9a:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <error_signal+0x94>)
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <error_signal+0x94>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	3303      	adds	r3, #3
 8003da6:	429a      	cmp	r2, r3
 8003da8:	dd02      	ble.n	8003db0 <error_signal+0x4c>
 8003daa:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <error_signal+0x94>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	705a      	strb	r2, [r3, #1]
		if (Error.error_counter < Error.error && Error.error_led == 0 && Error.error > 0)//If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <error_signal+0x94>)
 8003db2:	785a      	ldrb	r2, [r3, #1]
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <error_signal+0x94>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d20e      	bcs.n	8003dda <error_signal+0x76>
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <error_signal+0x94>)
 8003dbe:	789b      	ldrb	r3, [r3, #2]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <error_signal+0x76>
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <error_signal+0x94>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d006      	beq.n	8003dda <error_signal+0x76>
			ledOn(RGB_RED);																																							//Turn the LED on.
 8003dcc:	2002      	movs	r0, #2
 8003dce:	f007 fbc9 	bl	800b564 <ledOn>
			Error.error_led = 1;                                                                       //Set the LED flag to indicate that the LED is on.
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <error_signal+0x94>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	709a      	strb	r2, [r3, #2]
}
 8003dd8:	e00b      	b.n	8003df2 <error_signal+0x8e>
			ledOff(RGB_RED);																																//Turn the LED off.
 8003dda:	2002      	movs	r0, #2
 8003ddc:	f007 fbe2 	bl	800b5a4 <ledOff>
			Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <error_signal+0x94>)
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	3301      	adds	r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <error_signal+0x94>)
 8003dea:	705a      	strb	r2, [r3, #1]
			Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 8003dec:	4b02      	ldr	r3, [pc, #8]	; (8003df8 <error_signal+0x94>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	709a      	strb	r2, [r3, #2]
}
 8003df2:	bf00      	nop
 8003df4:	bd98      	pop	{r3, r4, r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000acc 	.word	0x20000acc

08003dfc <flight_mode_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the flight mode LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void flight_mode_signal(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
	if (flight_mode_timer < millis())
 8003e00:	f7fd fb5c 	bl	80014bc <millis>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b3c      	ldr	r3, [pc, #240]	; (8003ef8 <flight_mode_signal+0xfc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d935      	bls.n	8003e7a <flight_mode_signal+0x7e>
	{                                                      //If the error_timer value is smaller that the millis() function.
		flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8003e0e:	f7fd fb55 	bl	80014bc <millis>
 8003e12:	4603      	mov	r3, r0
 8003e14:	33fa      	adds	r3, #250	; 0xfa
 8003e16:	4a38      	ldr	r2, [pc, #224]	; (8003ef8 <flight_mode_signal+0xfc>)
 8003e18:	6013      	str	r3, [r2, #0]
		if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8003e1a:	4b38      	ldr	r3, [pc, #224]	; (8003efc <flight_mode_signal+0x100>)
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <flight_mode_signal+0x3c>
 8003e22:	4b37      	ldr	r3, [pc, #220]	; (8003f00 <flight_mode_signal+0x104>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <flight_mode_signal+0x108>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	3303      	adds	r3, #3
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	dd02      	ble.n	8003e38 <flight_mode_signal+0x3c>
 8003e32:	4b33      	ldr	r3, [pc, #204]	; (8003f00 <flight_mode_signal+0x104>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
		if (flight_mode_counter < f.ARMED && flight_mode_led == 0 && f.ARMED > 0)					//If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8003e38:	4b30      	ldr	r3, [pc, #192]	; (8003efc <flight_mode_signal+0x100>)
 8003e3a:	785a      	ldrb	r2, [r3, #1]
 8003e3c:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <flight_mode_signal+0x104>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d90e      	bls.n	8003e62 <flight_mode_signal+0x66>
 8003e44:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <flight_mode_signal+0x10c>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <flight_mode_signal+0x66>
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <flight_mode_signal+0x100>)
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d006      	beq.n	8003e62 <flight_mode_signal+0x66>
		{
			ledOn(RGB_GREEN);    																														//Turn the LED on.
 8003e54:	2003      	movs	r0, #3
 8003e56:	f007 fb85 	bl	800b564 <ledOn>
			flight_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8003e5a:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <flight_mode_signal+0x10c>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]
 8003e60:	e00b      	b.n	8003e7a <flight_mode_signal+0x7e>
		}
		else
		{                                                                                 //If the error flash sequence isn't finisched (error_counter < error) and the LED is on.
			ledOff(RGB_GREEN);																																//Turn the LED off.
 8003e62:	2003      	movs	r0, #3
 8003e64:	f007 fb9e 	bl	800b5a4 <ledOff>
			flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8003e68:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <flight_mode_signal+0x104>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <flight_mode_signal+0x104>)
 8003e72:	701a      	strb	r2, [r3, #0]
			flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8003e74:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <flight_mode_signal+0x10c>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]
		}
	}

	if (headfree_mode_timer < millis())
 8003e7a:	f7fd fb1f 	bl	80014bc <millis>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <flight_mode_signal+0x110>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d935      	bls.n	8003ef4 <flight_mode_signal+0xf8>
	{                                                      //If the error_timer value is smaller that the millis() function.
		headfree_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8003e88:	f7fd fb18 	bl	80014bc <millis>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	33fa      	adds	r3, #250	; 0xfa
 8003e90:	4a1e      	ldr	r2, [pc, #120]	; (8003f0c <flight_mode_signal+0x110>)
 8003e92:	6013      	str	r3, [r2, #0]
		if (f.HEADFREE_MODE > 0 && headfree_mode_counter > flight_mode + 3) headfree_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <flight_mode_signal+0x100>)
 8003e96:	7b9b      	ldrb	r3, [r3, #14]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <flight_mode_signal+0xb6>
 8003e9c:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <flight_mode_signal+0x114>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <flight_mode_signal+0x108>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	3303      	adds	r3, #3
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	dd02      	ble.n	8003eb2 <flight_mode_signal+0xb6>
 8003eac:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <flight_mode_signal+0x114>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
		if (headfree_mode_counter < f.HEADFREE_MODE && headfree_mode_led == 0 && f.HEADFREE_MODE > 0)	//If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <flight_mode_signal+0x100>)
 8003eb4:	7b9a      	ldrb	r2, [r3, #14]
 8003eb6:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <flight_mode_signal+0x114>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d90e      	bls.n	8003edc <flight_mode_signal+0xe0>
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <flight_mode_signal+0x118>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10a      	bne.n	8003edc <flight_mode_signal+0xe0>
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <flight_mode_signal+0x100>)
 8003ec8:	7b9b      	ldrb	r3, [r3, #14]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d006      	beq.n	8003edc <flight_mode_signal+0xe0>
		{

			ledOn(RGB_BLUE);																																		//Turn the LED on.
 8003ece:	2004      	movs	r0, #4
 8003ed0:	f007 fb48 	bl	800b564 <ledOn>
			headfree_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <flight_mode_signal+0x118>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
			ledOff(RGB_BLUE);																																		//Turn the LED off.
			headfree_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
			headfree_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
		}
	}
}
 8003eda:	e00b      	b.n	8003ef4 <flight_mode_signal+0xf8>
			ledOff(RGB_BLUE);																																		//Turn the LED off.
 8003edc:	2004      	movs	r0, #4
 8003ede:	f007 fb61 	bl	800b5a4 <ledOff>
			headfree_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <flight_mode_signal+0x114>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <flight_mode_signal+0x114>)
 8003eec:	701a      	strb	r2, [r3, #0]
			headfree_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <flight_mode_signal+0x118>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000cac 	.word	0x20000cac
 8003efc:	20000ed4 	.word	0x20000ed4
 8003f00:	20000ca9 	.word	0x20000ca9
 8003f04:	20000cb4 	.word	0x20000cb4
 8003f08:	20000ca8 	.word	0x20000ca8
 8003f0c:	20000cb0 	.word	0x20000cb0
 8003f10:	20000cb6 	.word	0x20000cb6
 8003f14:	20000cb5 	.word	0x20000cb5

08003f18 <mixerInit>:
    { 4, 0, mixerQuadP },          // MULTITYPE_QUADP
    { 4, 0, mixerQuadX },          // MULTITYPE_QUADX
};

void mixerInit(void)
{
 8003f18:	b490      	push	{r4, r7}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
	int i;
    for (i = 0; i < 4; i++)
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	e00f      	b.n	8003f44 <mixerInit+0x2c>
	  {
			#ifdef QUAD_X
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 8003f24:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <mixerInit+0x3c>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	18d1      	adds	r1, r2, r3
 8003f2c:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <mixerInit+0x40>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	4413      	add	r3, r2
 8003f34:	461c      	mov	r4, r3
 8003f36:	460b      	mov	r3, r1
 8003f38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (i = 0; i < 4; i++)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3301      	adds	r3, #1
 8003f42:	607b      	str	r3, [r7, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	ddec      	ble.n	8003f24 <mixerInit+0xc>
			#endif
			#ifdef QUAD_P
      currentMixer[i] = mixers[QuadP].motor[i];   //0 = QuadP, 1 = QuadX
			#endif
		}
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc90      	pop	{r4, r7}
 8003f52:	4770      	bx	lr
 8003f54:	08019a80 	.word	0x08019a80
 8003f58:	200002ec 	.word	0x200002ec

08003f5c <mixTable>:

test_t test;

void mixTable(void)
{
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	71fb      	strb	r3, [r7, #7]
			if (RC.rcCommand[THROTTLE] > 4000) RC.rcCommand[THROTTLE] = 4000;                                   //We need some room to keep full control at full throttle.
 8003f66:	4b7f      	ldr	r3, [pc, #508]	; (8004164 <mixTable+0x208>)
 8003f68:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8003f6c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003f70:	dd04      	ble.n	8003f7c <mixTable+0x20>
 8003f72:	4b7c      	ldr	r3, [pc, #496]	; (8004164 <mixTable+0x208>)
 8003f74:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003f78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			for (i = 0; i < 4; i++){
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	71fb      	strb	r3, [r7, #7]
 8003f80:	e0e7      	b.n	8004152 <mixTable+0x1f6>
				motor[i] = (RC.rcCommand[THROTTLE] * (int16_t)currentMixer[i].THROTTLE) + ((int16_t)pid.output2[ROLL] * (int16_t)currentMixer[i].ROLL) + ((int16_t)pid.output2[PITCH] * (int16_t)currentMixer[i].PITCH) + ((1 * (int16_t)pid.output2[YAW]) * (int16_t)currentMixer[i].YAW);
 8003f82:	4b78      	ldr	r3, [pc, #480]	; (8004164 <mixTable+0x208>)
 8003f84:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8003f88:	b29c      	uxth	r4, r3
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	4a76      	ldr	r2, [pc, #472]	; (8004168 <mixTable+0x20c>)
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	4413      	add	r3, r2
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fd f8eb 	bl	8001170 <__aeabi_f2iz>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	b21b      	sxth	r3, r3
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	fb03 f304 	mul.w	r3, r3, r4
 8003fa4:	b29c      	uxth	r4, r3
 8003fa6:	4b71      	ldr	r3, [pc, #452]	; (800416c <mixTable+0x210>)
 8003fa8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fd f8df 	bl	8001170 <__aeabi_f2iz>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	b21b      	sxth	r3, r3
 8003fb6:	b29d      	uxth	r5, r3
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	4a6b      	ldr	r2, [pc, #428]	; (8004168 <mixTable+0x20c>)
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fd f8d3 	bl	8001170 <__aeabi_f2iz>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	b21b      	sxth	r3, r3
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	fb03 f305 	mul.w	r3, r3, r5
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4423      	add	r3, r4
 8003fd8:	b29c      	uxth	r4, r3
 8003fda:	4b64      	ldr	r3, [pc, #400]	; (800416c <mixTable+0x210>)
 8003fdc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd f8c5 	bl	8001170 <__aeabi_f2iz>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	b21b      	sxth	r3, r3
 8003fea:	b29d      	uxth	r5, r3
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	4a5e      	ldr	r2, [pc, #376]	; (8004168 <mixTable+0x20c>)
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	4413      	add	r3, r2
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd f8b9 	bl	8001170 <__aeabi_f2iz>
 8003ffe:	4603      	mov	r3, r0
 8004000:	b21b      	sxth	r3, r3
 8004002:	b29b      	uxth	r3, r3
 8004004:	fb03 f305 	mul.w	r3, r3, r5
 8004008:	b29d      	uxth	r5, r3
 800400a:	4b58      	ldr	r3, [pc, #352]	; (800416c <mixTable+0x210>)
 800400c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004010:	4618      	mov	r0, r3
 8004012:	f7fd f8ad 	bl	8001170 <__aeabi_f2iz>
 8004016:	4603      	mov	r3, r0
 8004018:	b21b      	sxth	r3, r3
 800401a:	b29e      	uxth	r6, r3
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	4a52      	ldr	r2, [pc, #328]	; (8004168 <mixTable+0x20c>)
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	4413      	add	r3, r2
 8004024:	3308      	adds	r3, #8
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7fd f8a1 	bl	8001170 <__aeabi_f2iz>
 800402e:	4603      	mov	r3, r0
 8004030:	b21b      	sxth	r3, r3
 8004032:	b29b      	uxth	r3, r3
 8004034:	fb03 f306 	mul.w	r3, r3, r6
 8004038:	b29b      	uxth	r3, r3
 800403a:	442b      	add	r3, r5
 800403c:	b29b      	uxth	r3, r3
 800403e:	4423      	add	r3, r4
 8004040:	b29a      	uxth	r2, r3
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	b211      	sxth	r1, r2
 8004046:	4a4a      	ldr	r2, [pc, #296]	; (8004170 <mixTable+0x214>)
 8004048:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#ifdef MOTOR_DC
	  if(motor[i] <    0) motor[i] = 0;
	  if(motor[i] > 2000) motor[i] = 2000;
#endif
#ifdef MOTOR_ESC
	  motor[i] = constrain(motor[i], 2250, 4500);
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	4a48      	ldr	r2, [pc, #288]	; (8004170 <mixTable+0x214>)
 8004050:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004054:	f241 1294 	movw	r2, #4500	; 0x1194
 8004058:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fbdb 	bl	8005818 <constrain>
 8004062:	4602      	mov	r2, r0
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	b211      	sxth	r1, r2
 8004068:	4a41      	ldr	r2, [pc, #260]	; (8004170 <mixTable+0x214>)
 800406a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#ifdef MOTOR_DC
  if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0){
    motor[i] = 0;
#endif
#ifdef MOTOR_ESC
  if(RC.rcCommand[THROTTLE] < 2350 || f.ARMED == 0){
 800406e:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <mixTable+0x208>)
 8004070:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8004074:	f640 122d 	movw	r2, #2349	; 0x92d
 8004078:	4293      	cmp	r3, r2
 800407a:	dd03      	ble.n	8004084 <mixTable+0x128>
 800407c:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <mixTable+0x218>)
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d12a      	bne.n	80040da <mixTable+0x17e>
    motor[i] = 2250;
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	4a3a      	ldr	r2, [pc, #232]	; (8004170 <mixTable+0x214>)
 8004088:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800408c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif
		pid.output1[i] = 0;
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	4a36      	ldr	r2, [pc, #216]	; (800416c <mixTable+0x210>)
 8004094:	3340      	adds	r3, #64	; 0x40
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pid.output2[i] = 0;
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	4a32      	ldr	r2, [pc, #200]	; (800416c <mixTable+0x210>)
 80040a2:	3342      	adds	r3, #66	; 0x42
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	605a      	str	r2, [r3, #4]
		pid.Iterm[i] = 0;
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	4a2e      	ldr	r2, [pc, #184]	; (800416c <mixTable+0x210>)
 80040b2:	3328      	adds	r3, #40	; 0x28
 80040b4:	f04f 0100 	mov.w	r1, #0
 80040b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pid.Iterm1[i] = 0;
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	4a2b      	ldr	r2, [pc, #172]	; (800416c <mixTable+0x210>)
 80040c0:	332a      	adds	r3, #42	; 0x2a
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	605a      	str	r2, [r3, #4]
		pid.Iterm2[i] = 0;
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	4a27      	ldr	r2, [pc, #156]	; (800416c <mixTable+0x210>)
 80040d0:	332e      	adds	r3, #46	; 0x2e
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
  if(micros() - time_manual_motor >= 500000){
 80040da:	f7fd f9f7 	bl	80014cc <micros>
 80040de:	4602      	mov	r2, r0
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <mixTable+0x21c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	4a25      	ldr	r2, [pc, #148]	; (800417c <mixTable+0x220>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d902      	bls.n	80040f2 <mixTable+0x196>
    Manual_Motor_flag = false;
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <mixTable+0x224>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
  }
  if(Manual_Motor_flag == true){
 80040f2:	4b23      	ldr	r3, [pc, #140]	; (8004180 <mixTable+0x224>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d114      	bne.n	8004124 <mixTable+0x1c8>
    TIM4->CCR1 = M_motor[0];  // Actual : REAR_L
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <mixTable+0x228>)
 80040fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004100:	4b21      	ldr	r3, [pc, #132]	; (8004188 <mixTable+0x22c>)
 8004102:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR2 = M_motor[1];  // Actual : FRONT_R
 8004104:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <mixTable+0x228>)
 8004106:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800410a:	4b1f      	ldr	r3, [pc, #124]	; (8004188 <mixTable+0x22c>)
 800410c:	639a      	str	r2, [r3, #56]	; 0x38
    TIM4->CCR3 = M_motor[2];  // Actual : FRONT_L
 800410e:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <mixTable+0x228>)
 8004110:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004114:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <mixTable+0x22c>)
 8004116:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM4->CCR4 = M_motor[3];  // Actual : REAR_R
 8004118:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <mixTable+0x228>)
 800411a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <mixTable+0x22c>)
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
 8004122:	e013      	b.n	800414c <mixTable+0x1f0>
  }else{
    TIM4->CCR1 = motor[0];  // Actual : REAR_L
 8004124:	4b12      	ldr	r3, [pc, #72]	; (8004170 <mixTable+0x214>)
 8004126:	f9b3 2000 	ldrsh.w	r2, [r3]
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <mixTable+0x22c>)
 800412c:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR2 = motor[1];  // Actual : FRONT_R
 800412e:	4b10      	ldr	r3, [pc, #64]	; (8004170 <mixTable+0x214>)
 8004130:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <mixTable+0x22c>)
 8004136:	639a      	str	r2, [r3, #56]	; 0x38
    TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8004138:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <mixTable+0x214>)
 800413a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800413e:	4b12      	ldr	r3, [pc, #72]	; (8004188 <mixTable+0x22c>)
 8004140:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM4->CCR4 = motor[3];  // Actual : REAR_R
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <mixTable+0x214>)
 8004144:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <mixTable+0x22c>)
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
			for (i = 0; i < 4; i++){
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	3301      	adds	r3, #1
 8004150:	71fb      	strb	r3, [r7, #7]
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	2b03      	cmp	r3, #3
 8004156:	f67f af14 	bls.w	8003f82 <mixTable+0x26>
  }

  }
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004162:	bf00      	nop
 8004164:	20000d40 	.word	0x20000d40
 8004168:	200002ec 	.word	0x200002ec
 800416c:	200009b0 	.word	0x200009b0
 8004170:	20000cc8 	.word	0x20000cc8
 8004174:	20000ed4 	.word	0x20000ed4
 8004178:	20000cc4 	.word	0x20000cc4
 800417c:	0007a11f 	.word	0x0007a11f
 8004180:	200002e8 	.word	0x200002e8
 8004184:	20000cb8 	.word	0x20000cb8
 8004188:	40000800 	.word	0x40000800

0800418c <PIDControlInit>:
static bool AcroPID(pidc_t *pid);
static bool AnglePID(pidc_t *pid);
static bool GpsPID(pidc_t *pid);

void PIDControlInit(pidc_t *pid)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	pid->ts = 0.004f;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a97      	ldr	r2, [pc, #604]	; (80043f4 <PIDControlInit+0x268>)
 8004198:	601a      	str	r2, [r3, #0]
	pid->kp[ROLL]  = 15.0f;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a96      	ldr	r2, [pc, #600]	; (80043f8 <PIDControlInit+0x26c>)
 800419e:	605a      	str	r2, [r3, #4]
	pid->kp[PITCH] = pid->kp[ROLL];
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	609a      	str	r2, [r3, #8]
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a94      	ldr	r2, [pc, #592]	; (80043fc <PIDControlInit+0x270>)
 80041ac:	60da      	str	r2, [r3, #12]

	pid->ki[ROLL]  = 5.0f;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a93      	ldr	r2, [pc, #588]	; (8004400 <PIDControlInit+0x274>)
 80041b2:	635a      	str	r2, [r3, #52]	; 0x34
	pid->ki[PITCH] = pid->ki[ROLL];
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	639a      	str	r2, [r3, #56]	; 0x38
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a90      	ldr	r2, [pc, #576]	; (8004400 <PIDControlInit+0x274>)
 80041c0:	63da      	str	r2, [r3, #60]	; 0x3c

	pid->kd[ROLL]  = 4.0f;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80041c8:	665a      	str	r2, [r3, #100]	; 0x64
	pid->kd[PITCH] = pid->kd[ROLL];
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	669a      	str	r2, [r3, #104]	; 0x68
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a8b      	ldr	r2, [pc, #556]	; (8004404 <PIDControlInit+0x278>)
 80041d6:	66da      	str	r2, [r3, #108]	; 0x6c

	///////////////////////////////////////
	pid->kp_rate[ROLL]  = 2.5f;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a8b      	ldr	r2, [pc, #556]	; (8004408 <PIDControlInit+0x27c>)
 80041dc:	629a      	str	r2, [r3, #40]	; 0x28
	pid->kp_rate[PITCH] = pid->kp_rate[ROLL];
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->kp_rate[YAW]   = 2.0f;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30

	pid->ki_rate[ROLL]  = 0.5f;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80041f4:	659a      	str	r2, [r3, #88]	; 0x58
	pid->ki_rate[PITCH] = pid->ki_rate[ROLL];
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	65da      	str	r2, [r3, #92]	; 0x5c
	pid->ki_rate[YAW]   = 0.2f;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a82      	ldr	r2, [pc, #520]	; (800440c <PIDControlInit+0x280>)
 8004202:	661a      	str	r2, [r3, #96]	; 0x60

	pid->kd_rate[ROLL]  = 0.1f;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a82      	ldr	r2, [pc, #520]	; (8004410 <PIDControlInit+0x284>)
 8004208:	67da      	str	r2, [r3, #124]	; 0x7c
	pid->kd_rate[PITCH] = pid->kd_rate[ROLL];
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pid->kd_rate[YAW]   = 0.0f;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	///////////////////////////////////
	pid->kp1[ROLL] = 4.0f;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004224:	611a      	str	r2, [r3, #16]
	pid->kp1[PITCH] = 4.0f;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800422c:	615a      	str	r2, [r3, #20]
	pid->kp1[YAW] = 5.0f;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a73      	ldr	r2, [pc, #460]	; (8004400 <PIDControlInit+0x274>)
 8004232:	619a      	str	r2, [r3, #24]

	pid->ki1[ROLL] = 0.1f;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a76      	ldr	r2, [pc, #472]	; (8004410 <PIDControlInit+0x284>)
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
	pid->ki1[PITCH] = 0.1f;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a74      	ldr	r2, [pc, #464]	; (8004410 <PIDControlInit+0x284>)
 800423e:	645a      	str	r2, [r3, #68]	; 0x44
	pid->ki1[YAW] = 0.0f;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	649a      	str	r2, [r3, #72]	; 0x48
	/////////////////////////////////
	pid->kp2[ROLL] = 2.5f;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a6f      	ldr	r2, [pc, #444]	; (8004408 <PIDControlInit+0x27c>)
 800424c:	61da      	str	r2, [r3, #28]
	pid->kp2[PITCH] = 2.5f;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a6d      	ldr	r2, [pc, #436]	; (8004408 <PIDControlInit+0x27c>)
 8004252:	621a      	str	r2, [r3, #32]
	pid->kp2[YAW] = 2.0f;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800425a:	625a      	str	r2, [r3, #36]	; 0x24

	pid->ki2[ROLL] = 0.5f;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004262:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->ki2[PITCH] = 0.5f;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800426a:	651a      	str	r2, [r3, #80]	; 0x50
	pid->ki2[YAW] = 0.5f;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004272:	655a      	str	r2, [r3, #84]	; 0x54

	pid->kd2[ROLL] = 0.2f;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a65      	ldr	r2, [pc, #404]	; (800440c <PIDControlInit+0x280>)
 8004278:	671a      	str	r2, [r3, #112]	; 0x70
	pid->kd2[PITCH] = 0.2f;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a63      	ldr	r2, [pc, #396]	; (800440c <PIDControlInit+0x280>)
 800427e:	675a      	str	r2, [r3, #116]	; 0x74
	pid->kd2[YAW] = 0.0f;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	679a      	str	r2, [r3, #120]	; 0x78
	////////////////////////////////////////

	pid->i1_limit[ROLL] = 5.0f;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a5d      	ldr	r2, [pc, #372]	; (8004400 <PIDControlInit+0x274>)
 800428c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pid->i1_limit[PITCH] = 5.0f;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a5b      	ldr	r2, [pc, #364]	; (8004400 <PIDControlInit+0x274>)
 8004294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pid->i1_limit[YAW] = 10.0f;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a58      	ldr	r2, [pc, #352]	; (80043fc <PIDControlInit+0x270>)
 800429c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	pid->i2_limit[ROLL] = 500.0f;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a5c      	ldr	r2, [pc, #368]	; (8004414 <PIDControlInit+0x288>)
 80042a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pid->i2_limit[PITCH] = 500.0f;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a5a      	ldr	r2, [pc, #360]	; (8004414 <PIDControlInit+0x288>)
 80042ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	pid->i2_limit[YAW] = 500.0f;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a58      	ldr	r2, [pc, #352]	; (8004414 <PIDControlInit+0x288>)
 80042b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	pid->Iterm[ROLL] = 0.0f ;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pid->Iterm[PITCH] = 0.0f;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pid->Iterm[YAW] = 0.0f;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	pid->Iterm1[ROLL] = 0.0f ;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	pid->Iterm1[PITCH] = 0.0f;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	pid->Iterm1[YAW] = 0.0f;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	pid->Iterm2[ROLL] = 0.0f ;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	pid->Iterm2[PITCH] = 0.0f;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pid->Iterm2[YAW] = 0.0f;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	pid->dInput[ROLL] = 0.0f ;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pid->dInput[PITCH] = 0.0f;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	pid->dInput[YAW] = 0.0f;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	pid->error[ROLL] = 0.0f ;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	pid->error[PITCH] = 0.0f;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pid->error[YAW] = 0.0f;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	pid->pre_error[ROLL] = 0.0f ;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	pid->pre_error[PITCH] = 0.0f;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	pid->pre_error[YAW] = 0.0f;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	pid->pre_deriv[ROLL] = 0.0f ;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	pid->pre_deriv[PITCH] = 0.0f;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	pid->pre_deriv[YAW] = 0.0f;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	pid->lastInput[ROLL] = 0.0f ;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	pid->lastInput[PITCH] = 0.0f;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	pid->lastInput[YAW] = 0.0f;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	pid->output1[ROLL] = 0.0f ;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	pid->output1[PITCH] = 0.0f;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	pid->output1[YAW] = 0.0f;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	pid->output2[ROLL] = 0.0f ;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	pid->output2[PITCH] = 0.0f;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	pid->output2[YAW] = 0.0f;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	pidCal = AcroPID;
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <PIDControlInit+0x28c>)
 80043e6:	4a0d      	ldr	r2, [pc, #52]	; (800441c <PIDControlInit+0x290>)
 80043e8:	601a      	str	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	3b83126f 	.word	0x3b83126f
 80043f8:	41700000 	.word	0x41700000
 80043fc:	41200000 	.word	0x41200000
 8004400:	40a00000 	.word	0x40a00000
 8004404:	40400000 	.word	0x40400000
 8004408:	40200000 	.word	0x40200000
 800440c:	3e4ccccd 	.word	0x3e4ccccd
 8004410:	3dcccccd 	.word	0x3dcccccd
 8004414:	43fa0000 	.word	0x43fa0000
 8004418:	20000330 	.word	0x20000330
 800441c:	080046f5 	.word	0x080046f5

08004420 <Control>:

int16_t  magHold, headFreeModeHold; //[-180;+180]

void Control(pidc_t *pid)
{
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b08b      	sub	sp, #44	; 0x2c
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	pidc_t *pid_handle = pid;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	627b      	str	r3, [r7, #36]	; 0x24

	dt_recip = 1/pid->ts;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4619      	mov	r1, r3
 8004432:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004436:	f7fc fd73 	bl	8000f20 <__aeabi_fdiv>
 800443a:	4603      	mov	r3, r0
 800443c:	461a      	mov	r2, r3
 800443e:	4b9e      	ldr	r3, [pc, #632]	; (80046b8 <Control+0x298>)
 8004440:	601a      	str	r2, [r3, #0]

	if(!f.ARMED){
 8004442:	4b9e      	ldr	r3, [pc, #632]	; (80046bc <Control+0x29c>)
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10c      	bne.n	8004464 <Control+0x44>
		headFreeModeHold = imu.actual_compass_heading;
 800444a:	4b9d      	ldr	r3, [pc, #628]	; (80046c0 <Control+0x2a0>)
 800444c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004450:	b21a      	sxth	r2, r3
 8004452:	4b9c      	ldr	r3, [pc, #624]	; (80046c4 <Control+0x2a4>)
 8004454:	801a      	strh	r2, [r3, #0]
		imu.yawheadinghold = imu.actual_compass_heading;
 8004456:	4b9a      	ldr	r3, [pc, #616]	; (80046c0 <Control+0x2a0>)
 8004458:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800445c:	b21a      	sxth	r2, r3
 800445e:	4b98      	ldr	r3, [pc, #608]	; (80046c0 <Control+0x2a0>)
 8004460:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	}

	//TODO: split cos_yaw calculations into two phases (X and Y)
	if (( f.GPS_MODE != GPS_MODE_NONE ) && GPS.fixquality )
 8004464:	4b95      	ldr	r3, [pc, #596]	; (80046bc <Control+0x29c>)
 8004466:	7adb      	ldrb	r3, [r3, #11]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8095 	beq.w	8004598 <Control+0x178>
 800446e:	4b96      	ldr	r3, [pc, #600]	; (80046c8 <Control+0x2a8>)
 8004470:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 808f 	beq.w	8004598 <Control+0x178>
	{
		float sin_yaw_y = sin(imu.actual_compass_heading*0.0174532925f);
 800447a:	4b91      	ldr	r3, [pc, #580]	; (80046c0 <Control+0x2a0>)
 800447c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004480:	4618      	mov	r0, r3
 8004482:	f7fc fc45 	bl	8000d10 <__aeabi_i2f>
 8004486:	4603      	mov	r3, r0
 8004488:	4990      	ldr	r1, [pc, #576]	; (80046cc <Control+0x2ac>)
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc fc94 	bl	8000db8 <__aeabi_fmul>
 8004490:	4603      	mov	r3, r0
 8004492:	4618      	mov	r0, r3
 8004494:	f7fb ffe2 	bl	800045c <__aeabi_f2d>
 8004498:	4603      	mov	r3, r0
 800449a:	460c      	mov	r4, r1
 800449c:	4618      	mov	r0, r3
 800449e:	4621      	mov	r1, r4
 80044a0:	f010 feac 	bl	80151fc <sin>
 80044a4:	4603      	mov	r3, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	4618      	mov	r0, r3
 80044aa:	4621      	mov	r1, r4
 80044ac:	f7fc fb26 	bl	8000afc <__aeabi_d2f>
 80044b0:	4603      	mov	r3, r0
 80044b2:	623b      	str	r3, [r7, #32]
		float cos_yaw_x = cos(imu.actual_compass_heading*0.0174532925f);
 80044b4:	4b82      	ldr	r3, [pc, #520]	; (80046c0 <Control+0x2a0>)
 80044b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fc fc28 	bl	8000d10 <__aeabi_i2f>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4982      	ldr	r1, [pc, #520]	; (80046cc <Control+0x2ac>)
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fc fc77 	bl	8000db8 <__aeabi_fmul>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fb ffc5 	bl	800045c <__aeabi_f2d>
 80044d2:	4603      	mov	r3, r0
 80044d4:	460c      	mov	r4, r1
 80044d6:	4618      	mov	r0, r3
 80044d8:	4621      	mov	r1, r4
 80044da:	f010 fe59 	bl	8015190 <cos>
 80044de:	4603      	mov	r3, r0
 80044e0:	460c      	mov	r4, r1
 80044e2:	4618      	mov	r0, r3
 80044e4:	4621      	mov	r1, r4
 80044e6:	f7fc fb09 	bl	8000afc <__aeabi_d2f>
 80044ea:	4603      	mov	r3, r0
 80044ec:	61fb      	str	r3, [r7, #28]
		GPS_angle[ROLL]   = (nav[LON]*cos_yaw_x - nav[LAT]*sin_yaw_y)/10;
 80044ee:	4b78      	ldr	r3, [pc, #480]	; (80046d0 <Control+0x2b0>)
 80044f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fc fc0b 	bl	8000d10 <__aeabi_i2f>
 80044fa:	4603      	mov	r3, r0
 80044fc:	69f9      	ldr	r1, [r7, #28]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fc fc5a 	bl	8000db8 <__aeabi_fmul>
 8004504:	4603      	mov	r3, r0
 8004506:	461c      	mov	r4, r3
 8004508:	4b71      	ldr	r3, [pc, #452]	; (80046d0 <Control+0x2b0>)
 800450a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fc fbfe 	bl	8000d10 <__aeabi_i2f>
 8004514:	4603      	mov	r3, r0
 8004516:	6a39      	ldr	r1, [r7, #32]
 8004518:	4618      	mov	r0, r3
 800451a:	f7fc fc4d 	bl	8000db8 <__aeabi_fmul>
 800451e:	4603      	mov	r3, r0
 8004520:	4619      	mov	r1, r3
 8004522:	4620      	mov	r0, r4
 8004524:	f7fc fb3e 	bl	8000ba4 <__aeabi_fsub>
 8004528:	4603      	mov	r3, r0
 800452a:	496a      	ldr	r1, [pc, #424]	; (80046d4 <Control+0x2b4>)
 800452c:	4618      	mov	r0, r3
 800452e:	f7fc fcf7 	bl	8000f20 <__aeabi_fdiv>
 8004532:	4603      	mov	r3, r0
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc fe1b 	bl	8001170 <__aeabi_f2iz>
 800453a:	4603      	mov	r3, r0
 800453c:	b21a      	sxth	r2, r3
 800453e:	4b66      	ldr	r3, [pc, #408]	; (80046d8 <Control+0x2b8>)
 8004540:	801a      	strh	r2, [r3, #0]
		GPS_angle[PITCH]  = (nav[LON]*sin_yaw_y + nav[LAT]*cos_yaw_x)/10;
 8004542:	4b63      	ldr	r3, [pc, #396]	; (80046d0 <Control+0x2b0>)
 8004544:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004548:	4618      	mov	r0, r3
 800454a:	f7fc fbe1 	bl	8000d10 <__aeabi_i2f>
 800454e:	4603      	mov	r3, r0
 8004550:	6a39      	ldr	r1, [r7, #32]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fc fc30 	bl	8000db8 <__aeabi_fmul>
 8004558:	4603      	mov	r3, r0
 800455a:	461c      	mov	r4, r3
 800455c:	4b5c      	ldr	r3, [pc, #368]	; (80046d0 <Control+0x2b0>)
 800455e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004562:	4618      	mov	r0, r3
 8004564:	f7fc fbd4 	bl	8000d10 <__aeabi_i2f>
 8004568:	4603      	mov	r3, r0
 800456a:	69f9      	ldr	r1, [r7, #28]
 800456c:	4618      	mov	r0, r3
 800456e:	f7fc fc23 	bl	8000db8 <__aeabi_fmul>
 8004572:	4603      	mov	r3, r0
 8004574:	4619      	mov	r1, r3
 8004576:	4620      	mov	r0, r4
 8004578:	f7fc fb16 	bl	8000ba8 <__addsf3>
 800457c:	4603      	mov	r3, r0
 800457e:	4955      	ldr	r1, [pc, #340]	; (80046d4 <Control+0x2b4>)
 8004580:	4618      	mov	r0, r3
 8004582:	f7fc fccd 	bl	8000f20 <__aeabi_fdiv>
 8004586:	4603      	mov	r3, r0
 8004588:	4618      	mov	r0, r3
 800458a:	f7fc fdf1 	bl	8001170 <__aeabi_f2iz>
 800458e:	4603      	mov	r3, r0
 8004590:	b21a      	sxth	r2, r3
 8004592:	4b51      	ldr	r3, [pc, #324]	; (80046d8 <Control+0x2b8>)
 8004594:	805a      	strh	r2, [r3, #2]
	{
 8004596:	e005      	b.n	80045a4 <Control+0x184>
	} else
	{
		GPS_angle[ROLL]  = 0;
 8004598:	4b4f      	ldr	r3, [pc, #316]	; (80046d8 <Control+0x2b8>)
 800459a:	2200      	movs	r2, #0
 800459c:	801a      	strh	r2, [r3, #0]
		GPS_angle[PITCH] = 0;
 800459e:	4b4e      	ldr	r3, [pc, #312]	; (80046d8 <Control+0x2b8>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	805a      	strh	r2, [r3, #2]
	}

#if defined(HEADFREE)
	if(f.HEADFREE_MODE) { //to optimize
 80045a4:	4b45      	ldr	r3, [pc, #276]	; (80046bc <Control+0x29c>)
 80045a6:	7b9b      	ldrb	r3, [r3, #14]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d065      	beq.n	8004678 <Control+0x258>
		float radDiff = (imu.actual_compass_heading - headFreeModeHold) * 0.0174533f; // where PI/180 ~= 0.0174533
 80045ac:	4b44      	ldr	r3, [pc, #272]	; (80046c0 <Control+0x2a0>)
 80045ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045b2:	4a44      	ldr	r2, [pc, #272]	; (80046c4 <Control+0x2a4>)
 80045b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fc fba8 	bl	8000d10 <__aeabi_i2f>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4946      	ldr	r1, [pc, #280]	; (80046dc <Control+0x2bc>)
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fc fbf7 	bl	8000db8 <__aeabi_fmul>
 80045ca:	4603      	mov	r3, r0
 80045cc:	61bb      	str	r3, [r7, #24]
		float cosDiff = cosf(radDiff);
 80045ce:	69b8      	ldr	r0, [r7, #24]
 80045d0:	f010 fe4e 	bl	8015270 <cosf>
 80045d4:	6178      	str	r0, [r7, #20]
		float sinDiff = sinf(radDiff);
 80045d6:	69b8      	ldr	r0, [r7, #24]
 80045d8:	f010 feb8 	bl	801534c <sinf>
 80045dc:	6138      	str	r0, [r7, #16]
		int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 80045de:	4b40      	ldr	r3, [pc, #256]	; (80046e0 <Control+0x2c0>)
 80045e0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fc fb93 	bl	8000d10 <__aeabi_i2f>
 80045ea:	4603      	mov	r3, r0
 80045ec:	6979      	ldr	r1, [r7, #20]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fc fbe2 	bl	8000db8 <__aeabi_fmul>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461c      	mov	r4, r3
 80045f8:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <Control+0x2c0>)
 80045fa:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fc fb86 	bl	8000d10 <__aeabi_i2f>
 8004604:	4603      	mov	r3, r0
 8004606:	6939      	ldr	r1, [r7, #16]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fc fbd5 	bl	8000db8 <__aeabi_fmul>
 800460e:	4603      	mov	r3, r0
 8004610:	4619      	mov	r1, r3
 8004612:	4620      	mov	r0, r4
 8004614:	f7fc fac8 	bl	8000ba8 <__addsf3>
 8004618:	4603      	mov	r3, r0
 800461a:	4618      	mov	r0, r3
 800461c:	f7fc fda8 	bl	8001170 <__aeabi_f2iz>
 8004620:	4603      	mov	r3, r0
 8004622:	81fb      	strh	r3, [r7, #14]
		RC.rcCommand[ROLL] =  RC.rcCommand[ROLL]*cosDiff - RC.rcCommand[PITCH]*sinDiff;
 8004624:	4b2e      	ldr	r3, [pc, #184]	; (80046e0 <Control+0x2c0>)
 8004626:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800462a:	4618      	mov	r0, r3
 800462c:	f7fc fb70 	bl	8000d10 <__aeabi_i2f>
 8004630:	4603      	mov	r3, r0
 8004632:	6979      	ldr	r1, [r7, #20]
 8004634:	4618      	mov	r0, r3
 8004636:	f7fc fbbf 	bl	8000db8 <__aeabi_fmul>
 800463a:	4603      	mov	r3, r0
 800463c:	461c      	mov	r4, r3
 800463e:	4b28      	ldr	r3, [pc, #160]	; (80046e0 <Control+0x2c0>)
 8004640:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8004644:	4618      	mov	r0, r3
 8004646:	f7fc fb63 	bl	8000d10 <__aeabi_i2f>
 800464a:	4603      	mov	r3, r0
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fc fbb2 	bl	8000db8 <__aeabi_fmul>
 8004654:	4603      	mov	r3, r0
 8004656:	4619      	mov	r1, r3
 8004658:	4620      	mov	r0, r4
 800465a:	f7fc faa3 	bl	8000ba4 <__aeabi_fsub>
 800465e:	4603      	mov	r3, r0
 8004660:	4618      	mov	r0, r3
 8004662:	f7fc fd85 	bl	8001170 <__aeabi_f2iz>
 8004666:	4603      	mov	r3, r0
 8004668:	b21a      	sxth	r2, r3
 800466a:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <Control+0x2c0>)
 800466c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		RC.rcCommand[PITCH] = rcCommand_PITCH;
 8004670:	4a1b      	ldr	r2, [pc, #108]	; (80046e0 <Control+0x2c0>)
 8004672:	89fb      	ldrh	r3, [r7, #14]
 8004674:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
	}
#endif
	if(f.ACRO_MODE){
 8004678:	4b10      	ldr	r3, [pc, #64]	; (80046bc <Control+0x29c>)
 800467a:	79db      	ldrb	r3, [r3, #7]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <Control+0x268>
		pidCal = AcroPID;
 8004680:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <Control+0x2c4>)
 8004682:	4a19      	ldr	r2, [pc, #100]	; (80046e8 <Control+0x2c8>)
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e00e      	b.n	80046a6 <Control+0x286>
	}else if(f.ANGLE_MODE){
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <Control+0x29c>)
 800468a:	795b      	ldrb	r3, [r3, #5]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <Control+0x278>
		pidCal = AnglePID;
 8004690:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <Control+0x2c4>)
 8004692:	4a16      	ldr	r2, [pc, #88]	; (80046ec <Control+0x2cc>)
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e006      	b.n	80046a6 <Control+0x286>
	}else if(f.GPS_HOLD_MODE){
 8004698:	4b08      	ldr	r3, [pc, #32]	; (80046bc <Control+0x29c>)
 800469a:	7b5b      	ldrb	r3, [r3, #13]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <Control+0x286>
		pidCal = GpsPID;
 80046a0:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <Control+0x2c4>)
 80046a2:	4a13      	ldr	r2, [pc, #76]	; (80046f0 <Control+0x2d0>)
 80046a4:	601a      	str	r2, [r3, #0]
	}

	pidCal(pid_handle);
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <Control+0x2c4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046ac:	4798      	blx	r3
}
 80046ae:	bf00      	nop
 80046b0:	372c      	adds	r7, #44	; 0x2c
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd90      	pop	{r4, r7, pc}
 80046b6:	bf00      	nop
 80046b8:	2000032c 	.word	0x2000032c
 80046bc:	20000ed4 	.word	0x20000ed4
 80046c0:	20000e20 	.word	0x20000e20
 80046c4:	20000cd2 	.word	0x20000cd2
 80046c8:	20000b78 	.word	0x20000b78
 80046cc:	3c8efa35 	.word	0x3c8efa35
 80046d0:	20000b30 	.word	0x20000b30
 80046d4:	41200000 	.word	0x41200000
 80046d8:	2000027c 	.word	0x2000027c
 80046dc:	3c8efa39 	.word	0x3c8efa39
 80046e0:	20000d40 	.word	0x20000d40
 80046e4:	20000330 	.word	0x20000330
 80046e8:	080046f5 	.word	0x080046f5
 80046ec:	08004b51 	.word	0x08004b51
 80046f0:	080051ad 	.word	0x080051ad

080046f4 <AcroPID>:

bool AcroPID(pidc_t *pid)
{
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	bool ret = true;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]

	pid->error[ROLL] = RC.rcCommand[ROLL] - imu.gyroRaw[ROLL];
 8004700:	4ba3      	ldr	r3, [pc, #652]	; (8004990 <AcroPID+0x29c>)
 8004702:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8004706:	4618      	mov	r0, r3
 8004708:	f7fc fb02 	bl	8000d10 <__aeabi_i2f>
 800470c:	4602      	mov	r2, r0
 800470e:	4ba1      	ldr	r3, [pc, #644]	; (8004994 <AcroPID+0x2a0>)
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f7fc fa45 	bl	8000ba4 <__aeabi_fsub>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	pid->Iterm[ROLL] += pid->error[ROLL] * pid->ts;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f7fc fb3e 	bl	8000db8 <__aeabi_fmul>
 800473c:	4603      	mov	r3, r0
 800473e:	4619      	mov	r1, r3
 8004740:	4620      	mov	r0, r4
 8004742:	f7fc fa31 	bl	8000ba8 <__addsf3>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if(pid->Iterm[ROLL] > I_MAX) pid->Iterm[ROLL] = I_MAX;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004756:	4990      	ldr	r1, [pc, #576]	; (8004998 <AcroPID+0x2a4>)
 8004758:	4618      	mov	r0, r3
 800475a:	f7fc fce9 	bl	8001130 <__aeabi_fcmpgt>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <AcroPID+0x7a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a8c      	ldr	r2, [pc, #560]	; (8004998 <AcroPID+0x2a4>)
 8004768:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800476c:	e00d      	b.n	800478a <AcroPID+0x96>
	else if(pid->Iterm[ROLL] < -I_MAX) pid->Iterm[ROLL] = -I_MAX;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004774:	4989      	ldr	r1, [pc, #548]	; (800499c <AcroPID+0x2a8>)
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc fcbc 	bl	80010f4 <__aeabi_fcmplt>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <AcroPID+0x96>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a85      	ldr	r2, [pc, #532]	; (800499c <AcroPID+0x2a8>)
 8004786:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pid->dInput[ROLL] = (pid->error[ROLL] - pid->pre_error[ROLL])  / pid->ts;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f7fc fa03 	bl	8000ba4 <__aeabi_fsub>
 800479e:	4603      	mov	r3, r0
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f7fc fbb9 	bl	8000f20 <__aeabi_fdiv>
 80047ae:	4603      	mov	r3, r0
 80047b0:	461a      	mov	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	/*Compute PID Output*/
	pid->output2[ROLL] = (pid->kp_rate[ROLL] * pid->error[ROLL]) + (pid->ki_rate[ROLL] * pid->Iterm[ROLL]) + (pid->kd_rate[ROLL] * pid->dInput[ROLL]);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f7fc faf7 	bl	8000db8 <__aeabi_fmul>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461c      	mov	r4, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f7fc faec 	bl	8000db8 <__aeabi_fmul>
 80047e0:	4603      	mov	r3, r0
 80047e2:	4619      	mov	r1, r3
 80047e4:	4620      	mov	r0, r4
 80047e6:	f7fc f9df 	bl	8000ba8 <__addsf3>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461c      	mov	r4, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f7fc fadc 	bl	8000db8 <__aeabi_fmul>
 8004800:	4603      	mov	r3, r0
 8004802:	4619      	mov	r1, r3
 8004804:	4620      	mov	r0, r4
 8004806:	f7fc f9cf 	bl	8000ba8 <__addsf3>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	if(pid->output2[ROLL] > OUT_MAX) pid->output2[ROLL] = OUT_MAX;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800481a:	4961      	ldr	r1, [pc, #388]	; (80049a0 <AcroPID+0x2ac>)
 800481c:	4618      	mov	r0, r3
 800481e:	f7fc fc87 	bl	8001130 <__aeabi_fcmpgt>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <AcroPID+0x13e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a5d      	ldr	r2, [pc, #372]	; (80049a0 <AcroPID+0x2ac>)
 800482c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8004830:	e00d      	b.n	800484e <AcroPID+0x15a>
	else if(pid->output2[ROLL] < -OUT_MAX) pid->output2[ROLL] = -OUT_MAX;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004838:	495a      	ldr	r1, [pc, #360]	; (80049a4 <AcroPID+0x2b0>)
 800483a:	4618      	mov	r0, r3
 800483c:	f7fc fc5a 	bl	80010f4 <__aeabi_fcmplt>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <AcroPID+0x15a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a56      	ldr	r2, [pc, #344]	; (80049a4 <AcroPID+0x2b0>)
 800484a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	/*Remember some variables for next time*/
	pid->pre_error[ROLL] = pid->error[ROLL];
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	/////////////////////////////////////////////////////////////////////////////////////////////////

	/*Compute all the working error variables*/
	pid->error[PITCH] = RC.rcCommand[PITCH] - imu.gyroRaw[PITCH];
 800485a:	4b4d      	ldr	r3, [pc, #308]	; (8004990 <AcroPID+0x29c>)
 800485c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8004860:	4618      	mov	r0, r3
 8004862:	f7fc fa55 	bl	8000d10 <__aeabi_i2f>
 8004866:	4602      	mov	r2, r0
 8004868:	4b4a      	ldr	r3, [pc, #296]	; (8004994 <AcroPID+0x2a0>)
 800486a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7fc f998 	bl	8000ba4 <__aeabi_fsub>
 8004874:	4603      	mov	r3, r0
 8004876:	461a      	mov	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pid->Iterm[PITCH] += pid->error[PITCH] * pid->ts;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4619      	mov	r1, r3
 8004890:	4610      	mov	r0, r2
 8004892:	f7fc fa91 	bl	8000db8 <__aeabi_fmul>
 8004896:	4603      	mov	r3, r0
 8004898:	4619      	mov	r1, r3
 800489a:	4620      	mov	r0, r4
 800489c:	f7fc f984 	bl	8000ba8 <__addsf3>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	if(pid->Iterm[PITCH] > I_MAX) pid->Iterm[PITCH] = I_MAX;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048b0:	4939      	ldr	r1, [pc, #228]	; (8004998 <AcroPID+0x2a4>)
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc fc3c 	bl	8001130 <__aeabi_fcmpgt>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <AcroPID+0x1d4>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a35      	ldr	r2, [pc, #212]	; (8004998 <AcroPID+0x2a4>)
 80048c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80048c6:	e00d      	b.n	80048e4 <AcroPID+0x1f0>
	else if(pid->Iterm[PITCH] < -I_MAX) pid->Iterm[PITCH] = -I_MAX;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048ce:	4933      	ldr	r1, [pc, #204]	; (800499c <AcroPID+0x2a8>)
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fc fc0f 	bl	80010f4 <__aeabi_fcmplt>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <AcroPID+0x1f0>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a2f      	ldr	r2, [pc, #188]	; (800499c <AcroPID+0x2a8>)
 80048e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pid->dInput[PITCH] = (pid->error[PITCH] - pid->pre_error[PITCH]) / pid->ts;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7fc f956 	bl	8000ba4 <__aeabi_fsub>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461a      	mov	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f7fc fb0c 	bl	8000f20 <__aeabi_fdiv>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	/*Compute PID Output*/
	pid->output2[PITCH] = (pid->kp_rate[PITCH] * pid->error[PITCH]) + (pid->ki_rate[PITCH] *  pid->Iterm[PITCH]) + (pid->kd_rate[PITCH] * pid->dInput[PITCH]);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7fc fa4a 	bl	8000db8 <__aeabi_fmul>
 8004924:	4603      	mov	r3, r0
 8004926:	461c      	mov	r4, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004932:	4619      	mov	r1, r3
 8004934:	4610      	mov	r0, r2
 8004936:	f7fc fa3f 	bl	8000db8 <__aeabi_fmul>
 800493a:	4603      	mov	r3, r0
 800493c:	4619      	mov	r1, r3
 800493e:	4620      	mov	r0, r4
 8004940:	f7fc f932 	bl	8000ba8 <__addsf3>
 8004944:	4603      	mov	r3, r0
 8004946:	461c      	mov	r4, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f7fc fa2e 	bl	8000db8 <__aeabi_fmul>
 800495c:	4603      	mov	r3, r0
 800495e:	4619      	mov	r1, r3
 8004960:	4620      	mov	r0, r4
 8004962:	f7fc f921 	bl	8000ba8 <__addsf3>
 8004966:	4603      	mov	r3, r0
 8004968:	461a      	mov	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	if(pid->output2[PITCH] > OUT_MAX) pid->output2[PITCH] = OUT_MAX;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004976:	490a      	ldr	r1, [pc, #40]	; (80049a0 <AcroPID+0x2ac>)
 8004978:	4618      	mov	r0, r3
 800497a:	f7fc fbd9 	bl	8001130 <__aeabi_fcmpgt>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d011      	beq.n	80049a8 <AcroPID+0x2b4>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a06      	ldr	r2, [pc, #24]	; (80049a0 <AcroPID+0x2ac>)
 8004988:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800498c:	e01a      	b.n	80049c4 <AcroPID+0x2d0>
 800498e:	bf00      	nop
 8004990:	20000d40 	.word	0x20000d40
 8004994:	20000e20 	.word	0x20000e20
 8004998:	43fa0000 	.word	0x43fa0000
 800499c:	c3fa0000 	.word	0xc3fa0000
 80049a0:	447a0000 	.word	0x447a0000
 80049a4:	c47a0000 	.word	0xc47a0000
	else if(pid->output2[PITCH] < -OUT_MAX) pid->output2[PITCH] = -OUT_MAX;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80049ae:	4962      	ldr	r1, [pc, #392]	; (8004b38 <AcroPID+0x444>)
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fc fb9f 	bl	80010f4 <__aeabi_fcmplt>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <AcroPID+0x2d0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a5e      	ldr	r2, [pc, #376]	; (8004b38 <AcroPID+0x444>)
 80049c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/*Remember some variables for next time*/
	pid->pre_error[PITCH] = pid->error[PITCH];
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	//////////////////////////////////////////////////////////////////////////////////////////////////

	/*Compute all the working error variables*/
	pid->error[YAW] = RC.rcCommand[YAW] - imu.gyroRaw[YAW];
 80049d0:	4b5a      	ldr	r3, [pc, #360]	; (8004b3c <AcroPID+0x448>)
 80049d2:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fc f99a 	bl	8000d10 <__aeabi_i2f>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b58      	ldr	r3, [pc, #352]	; (8004b40 <AcroPID+0x44c>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	4619      	mov	r1, r3
 80049e4:	4610      	mov	r0, r2
 80049e6:	f7fc f8dd 	bl	8000ba4 <__aeabi_fsub>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	pid->Iterm[YAW] += pid->error[YAW] * pid->ts;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f7fc f9d6 	bl	8000db8 <__aeabi_fmul>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7fc f8c9 	bl	8000ba8 <__addsf3>
 8004a16:	4603      	mov	r3, r0
 8004a18:	461a      	mov	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	if(pid->Iterm[YAW] > I_MAX) pid->Iterm[YAW] = I_MAX;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a26:	4947      	ldr	r1, [pc, #284]	; (8004b44 <AcroPID+0x450>)
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fc fb81 	bl	8001130 <__aeabi_fcmpgt>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d004      	beq.n	8004a3e <AcroPID+0x34a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a43      	ldr	r2, [pc, #268]	; (8004b44 <AcroPID+0x450>)
 8004a38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004a3c:	e00d      	b.n	8004a5a <AcroPID+0x366>
	else if(pid->Iterm[YAW] < -I_MAX) pid->Iterm[YAW] = -I_MAX;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a44:	4940      	ldr	r1, [pc, #256]	; (8004b48 <AcroPID+0x454>)
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc fb54 	bl	80010f4 <__aeabi_fcmplt>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <AcroPID+0x366>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a3c      	ldr	r2, [pc, #240]	; (8004b48 <AcroPID+0x454>)
 8004a56:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pid->dInput[YAW] = (pid->error[YAW] - pid->pre_error[YAW]) / pid->ts;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f7fc f89b 	bl	8000ba4 <__aeabi_fsub>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7fc fa51 	bl	8000f20 <__aeabi_fdiv>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	461a      	mov	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	/*Compute PID Output*/
	pid->output2[YAW] = (pid->kp_rate[YAW] * pid->error[YAW]) + (pid->ki_rate[YAW] * pid->Iterm[YAW]) + (pid->kd_rate[YAW] * pid->dInput[YAW]);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f7fc f98f 	bl	8000db8 <__aeabi_fmul>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	461c      	mov	r4, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f7fc f984 	bl	8000db8 <__aeabi_fmul>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f7fc f877 	bl	8000ba8 <__addsf3>
 8004aba:	4603      	mov	r3, r0
 8004abc:	461c      	mov	r4, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f7fc f973 	bl	8000db8 <__aeabi_fmul>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f7fc f866 	bl	8000ba8 <__addsf3>
 8004adc:	4603      	mov	r3, r0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004aec:	4917      	ldr	r1, [pc, #92]	; (8004b4c <AcroPID+0x458>)
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fc fb1e 	bl	8001130 <__aeabi_fcmpgt>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d004      	beq.n	8004b04 <AcroPID+0x410>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <AcroPID+0x458>)
 8004afe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004b02:	e00d      	b.n	8004b20 <AcroPID+0x42c>
	else if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004b0a:	490b      	ldr	r1, [pc, #44]	; (8004b38 <AcroPID+0x444>)
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fc faf1 	bl	80010f4 <__aeabi_fcmplt>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <AcroPID+0x42c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a07      	ldr	r2, [pc, #28]	; (8004b38 <AcroPID+0x444>)
 8004b1c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	/*Remember some variables for next time*/
	pid->pre_error[YAW] = pid->error[YAW];//imu.Yaw
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	return ret;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd90      	pop	{r4, r7, pc}
 8004b36:	bf00      	nop
 8004b38:	c47a0000 	.word	0xc47a0000
 8004b3c:	20000d40 	.word	0x20000d40
 8004b40:	20000e20 	.word	0x20000e20
 8004b44:	43fa0000 	.word	0x43fa0000
 8004b48:	c3fa0000 	.word	0xc3fa0000
 8004b4c:	447a0000 	.word	0x447a0000

08004b50 <AnglePID>:

bool AnglePID(pidc_t *pid)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	uint8_t ret = true;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
	int axis;
	float error, deriv;
	//axis pid
	for(axis = 0; axis < 2; axis++){
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e171      	b.n	8004e46 <AnglePID+0x2f6>
		error = RC.rcCommand[axis] - imu.AHRS[axis];
 8004b62:	4a68      	ldr	r2, [pc, #416]	; (8004d04 <AnglePID+0x1b4>)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3328      	adds	r3, #40	; 0x28
 8004b68:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fc f8cf 	bl	8000d10 <__aeabi_i2f>
 8004b72:	4a65      	ldr	r2, [pc, #404]	; (8004d08 <AnglePID+0x1b8>)
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	3322      	adds	r3, #34	; 0x22
 8004b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f7fc f811 	bl	8000ba4 <__aeabi_fsub>
 8004b82:	4603      	mov	r3, r0
 8004b84:	613b      	str	r3, [r7, #16]
		pid->Iterm1[axis] += error * pid->ts;
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	332a      	adds	r3, #42	; 0x2a
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	685c      	ldr	r4, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6939      	ldr	r1, [r7, #16]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fc f90d 	bl	8000db8 <__aeabi_fmul>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7fc f800 	bl	8000ba8 <__addsf3>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4619      	mov	r1, r3
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	332a      	adds	r3, #42	; 0x2a
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	6059      	str	r1, [r3, #4]
		if(pid->Iterm1[axis] > pid->i1_limit[axis]) pid->Iterm1[axis] = pid->i1_limit[axis];
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	332a      	adds	r3, #42	; 0x2a
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	6858      	ldr	r0, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	3222      	adds	r2, #34	; 0x22
 8004bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	f7fc faae 	bl	8001130 <__aeabi_fcmpgt>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00b      	beq.n	8004bf2 <AnglePID+0xa2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	3222      	adds	r2, #34	; 0x22
 8004be0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	332a      	adds	r3, #42	; 0x2a
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	e01f      	b.n	8004c32 <AnglePID+0xe2>
		else if(pid->Iterm1[axis] < -pid->i1_limit[axis]) pid->Iterm1[axis] = -pid->i1_limit[axis];
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	332a      	adds	r3, #42	; 0x2a
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	6858      	ldr	r0, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	3222      	adds	r2, #34	; 0x22
 8004c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f7fc fa71 	bl	80010f4 <__aeabi_fcmplt>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00c      	beq.n	8004c32 <AnglePID+0xe2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	3222      	adds	r2, #34	; 0x22
 8004c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c22:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	332a      	adds	r3, #42	; 0x2a
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	605a      	str	r2, [r3, #4]
		pid->output1[axis] = pid->kp1[axis]*error + pid->ki1[axis]*pid->Iterm1[axis];
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	3204      	adds	r2, #4
 8004c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c3c:	6939      	ldr	r1, [r7, #16]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fc f8ba 	bl	8000db8 <__aeabi_fmul>
 8004c44:	4603      	mov	r3, r0
 8004c46:	461c      	mov	r4, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	3210      	adds	r2, #16
 8004c4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	332a      	adds	r3, #42	; 0x2a
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f7fc f8aa 	bl	8000db8 <__aeabi_fmul>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4619      	mov	r1, r3
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7fb ff9d 	bl	8000ba8 <__addsf3>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4619      	mov	r1, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	3240      	adds	r2, #64	; 0x40
 8004c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		error = pid->output1[axis] - imu.gyroRaw[axis];
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	3240      	adds	r2, #64	; 0x40
 8004c82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004c86:	4a20      	ldr	r2, [pc, #128]	; (8004d08 <AnglePID+0x1b8>)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	330e      	adds	r3, #14
 8004c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c90:	4619      	mov	r1, r3
 8004c92:	f7fb ff87 	bl	8000ba4 <__aeabi_fsub>
 8004c96:	4603      	mov	r3, r0
 8004c98:	613b      	str	r3, [r7, #16]
		pid->Iterm2[axis] += error * pid->ts;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	322e      	adds	r2, #46	; 0x2e
 8004ca0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6939      	ldr	r1, [r7, #16]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fc f884 	bl	8000db8 <__aeabi_fmul>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f7fb ff77 	bl	8000ba8 <__addsf3>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	322e      	adds	r2, #46	; 0x2e
 8004cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(pid->Iterm2[axis] > pid->i2_limit[axis]) pid->Iterm2[axis] = pid->i2_limit[axis];
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	322e      	adds	r2, #46	; 0x2e
 8004cce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	3324      	adds	r3, #36	; 0x24
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f7fc fa26 	bl	8001130 <__aeabi_fcmpgt>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d010      	beq.n	8004d0c <AnglePID+0x1bc>
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	3324      	adds	r3, #36	; 0x24
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	6859      	ldr	r1, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	322e      	adds	r2, #46	; 0x2e
 8004cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004d00:	e024      	b.n	8004d4c <AnglePID+0x1fc>
 8004d02:	bf00      	nop
 8004d04:	20000d40 	.word	0x20000d40
 8004d08:	20000e20 	.word	0x20000e20
		else if(pid->Iterm2[axis] < -pid->i2_limit[axis]) pid->Iterm2[axis] = -pid->i2_limit[axis];
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	322e      	adds	r2, #46	; 0x2e
 8004d12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3324      	adds	r3, #36	; 0x24
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004d26:	4619      	mov	r1, r3
 8004d28:	f7fc f9e4 	bl	80010f4 <__aeabi_fcmplt>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00c      	beq.n	8004d4c <AnglePID+0x1fc>
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	322e      	adds	r2, #46	; 0x2e
 8004d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		deriv = (error - pid->pre_error[axis])*dt_recip;
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	3336      	adds	r3, #54	; 0x36
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	6938      	ldr	r0, [r7, #16]
 8004d5c:	f7fb ff22 	bl	8000ba4 <__aeabi_fsub>
 8004d60:	4603      	mov	r3, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	4ba8      	ldr	r3, [pc, #672]	; (8005008 <AnglePID+0x4b8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f7fc f824 	bl	8000db8 <__aeabi_fmul>
 8004d70:	4603      	mov	r3, r0
 8004d72:	60bb      	str	r3, [r7, #8]
		pid->pre_error[axis] = error;
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	3336      	adds	r3, #54	; 0x36
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	605a      	str	r2, [r3, #4]
		pid->output2[axis] = pid->kp2[axis]*error + pid->ki2[axis]*pid->Iterm2[axis] + pid->kd2[axis]*deriv;
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	3306      	adds	r3, #6
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	6939      	ldr	r1, [r7, #16]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fc f811 	bl	8000db8 <__aeabi_fmul>
 8004d96:	4603      	mov	r3, r0
 8004d98:	461c      	mov	r4, r3
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	3312      	adds	r3, #18
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	6858      	ldr	r0, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	322e      	adds	r2, #46	; 0x2e
 8004dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db0:	4619      	mov	r1, r3
 8004db2:	f7fc f801 	bl	8000db8 <__aeabi_fmul>
 8004db6:	4603      	mov	r3, r0
 8004db8:	4619      	mov	r1, r3
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f7fb fef4 	bl	8000ba8 <__addsf3>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	461c      	mov	r4, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	321c      	adds	r2, #28
 8004dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fb fff1 	bl	8000db8 <__aeabi_fmul>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f7fb fee4 	bl	8000ba8 <__addsf3>
 8004de0:	4603      	mov	r3, r0
 8004de2:	4619      	mov	r1, r3
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	3342      	adds	r3, #66	; 0x42
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	6059      	str	r1, [r3, #4]

		if(pid->output2[axis] > OUT_MAX) pid->output2[axis] = OUT_MAX;
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	3342      	adds	r3, #66	; 0x42
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4983      	ldr	r1, [pc, #524]	; (800500c <AnglePID+0x4bc>)
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fc f996 	bl	8001130 <__aeabi_fcmpgt>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <AnglePID+0x2c8>
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	3342      	adds	r3, #66	; 0x42
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	4a7d      	ldr	r2, [pc, #500]	; (800500c <AnglePID+0x4bc>)
 8004e16:	605a      	str	r2, [r3, #4]
		if(pid->output2[axis] < -OUT_MAX) pid->output2[axis] = -OUT_MAX;
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	3342      	adds	r3, #66	; 0x42
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	497a      	ldr	r1, [pc, #488]	; (8005010 <AnglePID+0x4c0>)
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fc f964 	bl	80010f4 <__aeabi_fcmplt>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d006      	beq.n	8004e40 <AnglePID+0x2f0>
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	3342      	adds	r3, #66	; 0x42
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	4a74      	ldr	r2, [pc, #464]	; (8005010 <AnglePID+0x4c0>)
 8004e3e:	605a      	str	r2, [r3, #4]
	for(axis = 0; axis < 2; axis++){
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	3301      	adds	r3, #1
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	f77f ae8a 	ble.w	8004b62 <AnglePID+0x12>
	}

	if(RC.rcCommand[YAW]>-5 && RC.rcCommand[YAW]<5){
 8004e4e:	4b71      	ldr	r3, [pc, #452]	; (8005014 <AnglePID+0x4c4>)
 8004e50:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8004e54:	f113 0f04 	cmn.w	r3, #4
 8004e58:	f2c0 80e6 	blt.w	8005028 <AnglePID+0x4d8>
 8004e5c:	4b6d      	ldr	r3, [pc, #436]	; (8005014 <AnglePID+0x4c4>)
 8004e5e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	f300 80e0 	bgt.w	8005028 <AnglePID+0x4d8>
		error = imu.yawheadinghold - imu.actual_compass_heading;
 8004e68:	4b6b      	ldr	r3, [pc, #428]	; (8005018 <AnglePID+0x4c8>)
 8004e6a:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4b69      	ldr	r3, [pc, #420]	; (8005018 <AnglePID+0x4c8>)
 8004e72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fb ff49 	bl	8000d10 <__aeabi_i2f>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	613b      	str	r3, [r7, #16]
		imu.debug1 = error;
 8004e82:	6938      	ldr	r0, [r7, #16]
 8004e84:	f7fc f974 	bl	8001170 <__aeabi_f2iz>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	b21a      	sxth	r2, r3
 8004e8c:	4b62      	ldr	r3, [pc, #392]	; (8005018 <AnglePID+0x4c8>)
 8004e8e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		if(error > 180) error -= 360;
 8004e92:	4962      	ldr	r1, [pc, #392]	; (800501c <AnglePID+0x4cc>)
 8004e94:	6938      	ldr	r0, [r7, #16]
 8004e96:	f7fc f94b 	bl	8001130 <__aeabi_fcmpgt>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <AnglePID+0x35c>
 8004ea0:	495f      	ldr	r1, [pc, #380]	; (8005020 <AnglePID+0x4d0>)
 8004ea2:	6938      	ldr	r0, [r7, #16]
 8004ea4:	f7fb fe7e 	bl	8000ba4 <__aeabi_fsub>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	613b      	str	r3, [r7, #16]
		if(error < -180) error += 360;
 8004eac:	495d      	ldr	r1, [pc, #372]	; (8005024 <AnglePID+0x4d4>)
 8004eae:	6938      	ldr	r0, [r7, #16]
 8004eb0:	f7fc f920 	bl	80010f4 <__aeabi_fcmplt>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d005      	beq.n	8004ec6 <AnglePID+0x376>
 8004eba:	4959      	ldr	r1, [pc, #356]	; (8005020 <AnglePID+0x4d0>)
 8004ebc:	6938      	ldr	r0, [r7, #16]
 8004ebe:	f7fb fe73 	bl	8000ba8 <__addsf3>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	613b      	str	r3, [r7, #16]
		imu.debug2 = error;
 8004ec6:	6938      	ldr	r0, [r7, #16]
 8004ec8:	f7fc f952 	bl	8001170 <__aeabi_f2iz>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	b21a      	sxth	r2, r3
 8004ed0:	4b51      	ldr	r3, [pc, #324]	; (8005018 <AnglePID+0x4c8>)
 8004ed2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		pid->Iterm2[YAW] += error * pid->ts;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6939      	ldr	r1, [r7, #16]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb ff68 	bl	8000db8 <__aeabi_fmul>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	4619      	mov	r1, r3
 8004eec:	4620      	mov	r0, r4
 8004eee:	f7fb fe5b 	bl	8000ba8 <__addsf3>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7fc f910 	bl	8001130 <__aeabi_fcmpgt>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <AnglePID+0x3d4>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8004f22:	e016      	b.n	8004f52 <AnglePID+0x402>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f7fc f8dc 	bl	80010f4 <__aeabi_fcmplt>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <AnglePID+0x402>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f48:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6938      	ldr	r0, [r7, #16]
 8004f5c:	f7fb fe22 	bl	8000ba4 <__aeabi_fsub>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b28      	ldr	r3, [pc, #160]	; (8005008 <AnglePID+0x4b8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f7fb ff24 	bl	8000db8 <__aeabi_fmul>
 8004f70:	4603      	mov	r3, r0
 8004f72:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	6939      	ldr	r1, [r7, #16]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fb ff18 	bl	8000db8 <__aeabi_fmul>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461c      	mov	r4, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f96:	4619      	mov	r1, r3
 8004f98:	4610      	mov	r0, r2
 8004f9a:	f7fb ff0d 	bl	8000db8 <__aeabi_fmul>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f7fb fe00 	bl	8000ba8 <__addsf3>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461c      	mov	r4, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fb ff00 	bl	8000db8 <__aeabi_fmul>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7fb fdf3 	bl	8000ba8 <__addsf3>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004fd2:	490e      	ldr	r1, [pc, #56]	; (800500c <AnglePID+0x4bc>)
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fc f8ab 	bl	8001130 <__aeabi_fcmpgt>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <AnglePID+0x498>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	; (800500c <AnglePID+0x4bc>)
 8004fe4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004fee:	4908      	ldr	r1, [pc, #32]	; (8005010 <AnglePID+0x4c0>)
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fc f87f 	bl	80010f4 <__aeabi_fcmplt>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80c2 	beq.w	8005182 <AnglePID+0x632>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a03      	ldr	r2, [pc, #12]	; (8005010 <AnglePID+0x4c0>)
 8005002:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8005006:	e0bc      	b.n	8005182 <AnglePID+0x632>
 8005008:	2000032c 	.word	0x2000032c
 800500c:	447a0000 	.word	0x447a0000
 8005010:	c47a0000 	.word	0xc47a0000
 8005014:	20000d40 	.word	0x20000d40
 8005018:	20000e20 	.word	0x20000e20
 800501c:	43340000 	.word	0x43340000
 8005020:	43b40000 	.word	0x43b40000
 8005024:	c3340000 	.word	0xc3340000
	}else{
		error = RC.rcCommand[YAW] - (-imu.gyroRaw[YAW]);
 8005028:	4b5b      	ldr	r3, [pc, #364]	; (8005198 <AnglePID+0x648>)
 800502a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800502e:	4618      	mov	r0, r3
 8005030:	f7fb fe6e 	bl	8000d10 <__aeabi_i2f>
 8005034:	4602      	mov	r2, r0
 8005036:	4b59      	ldr	r3, [pc, #356]	; (800519c <AnglePID+0x64c>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f7fb fdb3 	bl	8000ba8 <__addsf3>
 8005042:	4603      	mov	r3, r0
 8005044:	613b      	str	r3, [r7, #16]
		pid->Iterm2[YAW] += error * pid->ts;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6939      	ldr	r1, [r7, #16]
 8005052:	4618      	mov	r0, r3
 8005054:	f7fb feb0 	bl	8000db8 <__aeabi_fmul>
 8005058:	4603      	mov	r3, r0
 800505a:	4619      	mov	r1, r3
 800505c:	4620      	mov	r0, r4
 800505e:	f7fb fda3 	bl	8000ba8 <__addsf3>
 8005062:	4603      	mov	r3, r0
 8005064:	461a      	mov	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7fc f858 	bl	8001130 <__aeabi_fcmpgt>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d006      	beq.n	8005094 <AnglePID+0x544>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8005092:	e016      	b.n	80050c2 <AnglePID+0x572>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f7fc f824 	bl	80010f4 <__aeabi_fcmplt>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <AnglePID+0x572>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050b8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050c8:	4619      	mov	r1, r3
 80050ca:	6938      	ldr	r0, [r7, #16]
 80050cc:	f7fb fd6a 	bl	8000ba4 <__aeabi_fsub>
 80050d0:	4603      	mov	r3, r0
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <AnglePID+0x650>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f7fb fe6c 	bl	8000db8 <__aeabi_fmul>
 80050e0:	4603      	mov	r3, r0
 80050e2:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	6939      	ldr	r1, [r7, #16]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fb fe60 	bl	8000db8 <__aeabi_fmul>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461c      	mov	r4, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f7fb fe55 	bl	8000db8 <__aeabi_fmul>
 800510e:	4603      	mov	r3, r0
 8005110:	4619      	mov	r1, r3
 8005112:	4620      	mov	r0, r4
 8005114:	f7fb fd48 	bl	8000ba8 <__addsf3>
 8005118:	4603      	mov	r3, r0
 800511a:	461c      	mov	r4, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fb fe48 	bl	8000db8 <__aeabi_fmul>
 8005128:	4603      	mov	r3, r0
 800512a:	4619      	mov	r1, r3
 800512c:	4620      	mov	r0, r4
 800512e:	f7fb fd3b 	bl	8000ba8 <__addsf3>
 8005132:	4603      	mov	r3, r0
 8005134:	461a      	mov	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005142:	4918      	ldr	r1, [pc, #96]	; (80051a4 <AnglePID+0x654>)
 8005144:	4618      	mov	r0, r3
 8005146:	f7fb fff3 	bl	8001130 <__aeabi_fcmpgt>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <AnglePID+0x608>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <AnglePID+0x654>)
 8005154:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800515e:	4912      	ldr	r1, [pc, #72]	; (80051a8 <AnglePID+0x658>)
 8005160:	4618      	mov	r0, r3
 8005162:	f7fb ffc7 	bl	80010f4 <__aeabi_fcmplt>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <AnglePID+0x624>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0e      	ldr	r2, [pc, #56]	; (80051a8 <AnglePID+0x658>)
 8005170:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		imu.yawheadinghold = imu.actual_compass_heading;
 8005174:	4b09      	ldr	r3, [pc, #36]	; (800519c <AnglePID+0x64c>)
 8005176:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800517a:	b21a      	sxth	r2, r3
 800517c:	4b07      	ldr	r3, [pc, #28]	; (800519c <AnglePID+0x64c>)
 800517e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	}
	return ret;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf14      	ite	ne
 8005188:	2301      	movne	r3, #1
 800518a:	2300      	moveq	r3, #0
 800518c:	b2db      	uxtb	r3, r3
}
 800518e:	4618      	mov	r0, r3
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	bd90      	pop	{r4, r7, pc}
 8005196:	bf00      	nop
 8005198:	20000d40 	.word	0x20000d40
 800519c:	20000e20 	.word	0x20000e20
 80051a0:	2000032c 	.word	0x2000032c
 80051a4:	447a0000 	.word	0x447a0000
 80051a8:	c47a0000 	.word	0xc47a0000

080051ac <GpsPID>:

bool GpsPID(pidc_t *pid)
{
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	bool ret = true;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
	int axis;
	float error, deriv;
	//axis pid
	for(axis = 0; axis < 2; axis++){
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e17f      	b.n	80054be <GpsPID+0x312>
		error = constrain(RC.rcCommand[axis] + GPS_angle[axis], -20, 20) - imu.AHRS[axis];
 80051be:	4a6e      	ldr	r2, [pc, #440]	; (8005378 <GpsPID+0x1cc>)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3328      	adds	r3, #40	; 0x28
 80051c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80051c8:	4619      	mov	r1, r3
 80051ca:	4a6c      	ldr	r2, [pc, #432]	; (800537c <GpsPID+0x1d0>)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80051d2:	440b      	add	r3, r1
 80051d4:	2214      	movs	r2, #20
 80051d6:	f06f 0113 	mvn.w	r1, #19
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fb1c 	bl	8005818 <constrain>
 80051e0:	4603      	mov	r3, r0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fb fd94 	bl	8000d10 <__aeabi_i2f>
 80051e8:	4a65      	ldr	r2, [pc, #404]	; (8005380 <GpsPID+0x1d4>)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	3322      	adds	r3, #34	; 0x22
 80051ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f2:	4619      	mov	r1, r3
 80051f4:	f7fb fcd6 	bl	8000ba4 <__aeabi_fsub>
 80051f8:	4603      	mov	r3, r0
 80051fa:	613b      	str	r3, [r7, #16]
		pid->Iterm1[axis] += error * pid->ts;
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	332a      	adds	r3, #42	; 0x2a
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	685c      	ldr	r4, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6939      	ldr	r1, [r7, #16]
 800520e:	4618      	mov	r0, r3
 8005210:	f7fb fdd2 	bl	8000db8 <__aeabi_fmul>
 8005214:	4603      	mov	r3, r0
 8005216:	4619      	mov	r1, r3
 8005218:	4620      	mov	r0, r4
 800521a:	f7fb fcc5 	bl	8000ba8 <__addsf3>
 800521e:	4603      	mov	r3, r0
 8005220:	4619      	mov	r1, r3
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	332a      	adds	r3, #42	; 0x2a
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	6059      	str	r1, [r3, #4]
		if(pid->Iterm1[axis] > pid->i1_limit[axis]) pid->Iterm1[axis] = pid->i1_limit[axis];
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	332a      	adds	r3, #42	; 0x2a
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	6858      	ldr	r0, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	3222      	adds	r2, #34	; 0x22
 8005240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005244:	4619      	mov	r1, r3
 8005246:	f7fb ff73 	bl	8001130 <__aeabi_fcmpgt>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <GpsPID+0xbc>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	3222      	adds	r2, #34	; 0x22
 8005256:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	332a      	adds	r3, #42	; 0x2a
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	e01f      	b.n	80052a8 <GpsPID+0xfc>
		else if(pid->Iterm1[axis] < -pid->i1_limit[axis]) pid->Iterm1[axis] = -pid->i1_limit[axis];
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	332a      	adds	r3, #42	; 0x2a
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	6858      	ldr	r0, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	3222      	adds	r2, #34	; 0x22
 800527a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005282:	4619      	mov	r1, r3
 8005284:	f7fb ff36 	bl	80010f4 <__aeabi_fcmplt>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00c      	beq.n	80052a8 <GpsPID+0xfc>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	3222      	adds	r2, #34	; 0x22
 8005294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005298:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	332a      	adds	r3, #42	; 0x2a
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	605a      	str	r2, [r3, #4]
		pid->output1[axis] = pid->kp1[axis]*error + pid->ki1[axis]*pid->Iterm1[axis];
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	3204      	adds	r2, #4
 80052ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b2:	6939      	ldr	r1, [r7, #16]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fb fd7f 	bl	8000db8 <__aeabi_fmul>
 80052ba:	4603      	mov	r3, r0
 80052bc:	461c      	mov	r4, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	3210      	adds	r2, #16
 80052c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	332a      	adds	r3, #42	; 0x2a
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4619      	mov	r1, r3
 80052d6:	f7fb fd6f 	bl	8000db8 <__aeabi_fmul>
 80052da:	4603      	mov	r3, r0
 80052dc:	4619      	mov	r1, r3
 80052de:	4620      	mov	r0, r4
 80052e0:	f7fb fc62 	bl	8000ba8 <__addsf3>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4619      	mov	r1, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	3240      	adds	r2, #64	; 0x40
 80052ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		error = pid->output1[axis] - imu.gyroRaw[axis];
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	3240      	adds	r2, #64	; 0x40
 80052f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80052fc:	4a20      	ldr	r2, [pc, #128]	; (8005380 <GpsPID+0x1d4>)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	330e      	adds	r3, #14
 8005302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005306:	4619      	mov	r1, r3
 8005308:	f7fb fc4c 	bl	8000ba4 <__aeabi_fsub>
 800530c:	4603      	mov	r3, r0
 800530e:	613b      	str	r3, [r7, #16]
		pid->Iterm2[axis] += error * pid->ts;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	322e      	adds	r2, #46	; 0x2e
 8005316:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6939      	ldr	r1, [r7, #16]
 8005320:	4618      	mov	r0, r3
 8005322:	f7fb fd49 	bl	8000db8 <__aeabi_fmul>
 8005326:	4603      	mov	r3, r0
 8005328:	4619      	mov	r1, r3
 800532a:	4620      	mov	r0, r4
 800532c:	f7fb fc3c 	bl	8000ba8 <__addsf3>
 8005330:	4603      	mov	r3, r0
 8005332:	4619      	mov	r1, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	322e      	adds	r2, #46	; 0x2e
 800533a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(pid->Iterm2[axis] > pid->i2_limit[axis]) pid->Iterm2[axis] = pid->i2_limit[axis];
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	322e      	adds	r2, #46	; 0x2e
 8005344:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	3324      	adds	r3, #36	; 0x24
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	4619      	mov	r1, r3
 8005356:	f7fb feeb 	bl	8001130 <__aeabi_fcmpgt>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d011      	beq.n	8005384 <GpsPID+0x1d8>
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	3324      	adds	r3, #36	; 0x24
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	6859      	ldr	r1, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	322e      	adds	r2, #46	; 0x2e
 8005372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005376:	e025      	b.n	80053c4 <GpsPID+0x218>
 8005378:	20000d40 	.word	0x20000d40
 800537c:	2000027c 	.word	0x2000027c
 8005380:	20000e20 	.word	0x20000e20
		else if(pid->Iterm2[axis] < -pid->i2_limit[axis]) pid->Iterm2[axis] = -pid->i2_limit[axis];
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	322e      	adds	r2, #46	; 0x2e
 800538a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	3324      	adds	r3, #36	; 0x24
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800539e:	4619      	mov	r1, r3
 80053a0:	f7fb fea8 	bl	80010f4 <__aeabi_fcmplt>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <GpsPID+0x218>
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	3324      	adds	r3, #36	; 0x24
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	322e      	adds	r2, #46	; 0x2e
 80053c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		deriv = (error - pid->pre_error[axis])*dt_recip;
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	3336      	adds	r3, #54	; 0x36
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4619      	mov	r1, r3
 80053d2:	6938      	ldr	r0, [r7, #16]
 80053d4:	f7fb fbe6 	bl	8000ba4 <__aeabi_fsub>
 80053d8:	4603      	mov	r3, r0
 80053da:	461a      	mov	r2, r3
 80053dc:	4ba8      	ldr	r3, [pc, #672]	; (8005680 <GpsPID+0x4d4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f7fb fce8 	bl	8000db8 <__aeabi_fmul>
 80053e8:	4603      	mov	r3, r0
 80053ea:	60bb      	str	r3, [r7, #8]
		pid->pre_error[axis] = error;
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	3336      	adds	r3, #54	; 0x36
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	605a      	str	r2, [r3, #4]
		pid->output2[axis] = pid->kp2[axis]*error + pid->ki2[axis]*pid->Iterm2[axis] + pid->kd2[axis]*deriv;
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	3306      	adds	r3, #6
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	6939      	ldr	r1, [r7, #16]
 8005408:	4618      	mov	r0, r3
 800540a:	f7fb fcd5 	bl	8000db8 <__aeabi_fmul>
 800540e:	4603      	mov	r3, r0
 8005410:	461c      	mov	r4, r3
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	3312      	adds	r3, #18
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	6858      	ldr	r0, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	322e      	adds	r2, #46	; 0x2e
 8005424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005428:	4619      	mov	r1, r3
 800542a:	f7fb fcc5 	bl	8000db8 <__aeabi_fmul>
 800542e:	4603      	mov	r3, r0
 8005430:	4619      	mov	r1, r3
 8005432:	4620      	mov	r0, r4
 8005434:	f7fb fbb8 	bl	8000ba8 <__addsf3>
 8005438:	4603      	mov	r3, r0
 800543a:	461c      	mov	r4, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	321c      	adds	r2, #28
 8005442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	4618      	mov	r0, r3
 800544a:	f7fb fcb5 	bl	8000db8 <__aeabi_fmul>
 800544e:	4603      	mov	r3, r0
 8005450:	4619      	mov	r1, r3
 8005452:	4620      	mov	r0, r4
 8005454:	f7fb fba8 	bl	8000ba8 <__addsf3>
 8005458:	4603      	mov	r3, r0
 800545a:	4619      	mov	r1, r3
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	3342      	adds	r3, #66	; 0x42
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	6059      	str	r1, [r3, #4]

		if(pid->output2[axis] > OUT_MAX) pid->output2[axis] = OUT_MAX;
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	3342      	adds	r3, #66	; 0x42
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4983      	ldr	r1, [pc, #524]	; (8005684 <GpsPID+0x4d8>)
 8005476:	4618      	mov	r0, r3
 8005478:	f7fb fe5a 	bl	8001130 <__aeabi_fcmpgt>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d006      	beq.n	8005490 <GpsPID+0x2e4>
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	3342      	adds	r3, #66	; 0x42
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	4a7d      	ldr	r2, [pc, #500]	; (8005684 <GpsPID+0x4d8>)
 800548e:	605a      	str	r2, [r3, #4]
		if(pid->output2[axis] < -OUT_MAX) pid->output2[axis] = -OUT_MAX;
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	3342      	adds	r3, #66	; 0x42
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	497a      	ldr	r1, [pc, #488]	; (8005688 <GpsPID+0x4dc>)
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fb fe28 	bl	80010f4 <__aeabi_fcmplt>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d006      	beq.n	80054b8 <GpsPID+0x30c>
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	3342      	adds	r3, #66	; 0x42
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	4a74      	ldr	r2, [pc, #464]	; (8005688 <GpsPID+0x4dc>)
 80054b6:	605a      	str	r2, [r3, #4]
	for(axis = 0; axis < 2; axis++){
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	3301      	adds	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	f77f ae7c 	ble.w	80051be <GpsPID+0x12>
	}

	if(RC.rcCommand[YAW]>-5 && RC.rcCommand[YAW]<5){
 80054c6:	4b71      	ldr	r3, [pc, #452]	; (800568c <GpsPID+0x4e0>)
 80054c8:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80054cc:	f113 0f04 	cmn.w	r3, #4
 80054d0:	f2c0 80e6 	blt.w	80056a0 <GpsPID+0x4f4>
 80054d4:	4b6d      	ldr	r3, [pc, #436]	; (800568c <GpsPID+0x4e0>)
 80054d6:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80054da:	2b04      	cmp	r3, #4
 80054dc:	f300 80e0 	bgt.w	80056a0 <GpsPID+0x4f4>
		error = imu.yawheadinghold - imu.actual_compass_heading;
 80054e0:	4b6b      	ldr	r3, [pc, #428]	; (8005690 <GpsPID+0x4e4>)
 80054e2:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 80054e6:	461a      	mov	r2, r3
 80054e8:	4b69      	ldr	r3, [pc, #420]	; (8005690 <GpsPID+0x4e4>)
 80054ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fb fc0d 	bl	8000d10 <__aeabi_i2f>
 80054f6:	4603      	mov	r3, r0
 80054f8:	613b      	str	r3, [r7, #16]
		imu.debug1 = error;
 80054fa:	6938      	ldr	r0, [r7, #16]
 80054fc:	f7fb fe38 	bl	8001170 <__aeabi_f2iz>
 8005500:	4603      	mov	r3, r0
 8005502:	b21a      	sxth	r2, r3
 8005504:	4b62      	ldr	r3, [pc, #392]	; (8005690 <GpsPID+0x4e4>)
 8005506:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		if(error > 180) error -= 360;
 800550a:	4962      	ldr	r1, [pc, #392]	; (8005694 <GpsPID+0x4e8>)
 800550c:	6938      	ldr	r0, [r7, #16]
 800550e:	f7fb fe0f 	bl	8001130 <__aeabi_fcmpgt>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <GpsPID+0x378>
 8005518:	495f      	ldr	r1, [pc, #380]	; (8005698 <GpsPID+0x4ec>)
 800551a:	6938      	ldr	r0, [r7, #16]
 800551c:	f7fb fb42 	bl	8000ba4 <__aeabi_fsub>
 8005520:	4603      	mov	r3, r0
 8005522:	613b      	str	r3, [r7, #16]
		if(error < -180) error += 360;
 8005524:	495d      	ldr	r1, [pc, #372]	; (800569c <GpsPID+0x4f0>)
 8005526:	6938      	ldr	r0, [r7, #16]
 8005528:	f7fb fde4 	bl	80010f4 <__aeabi_fcmplt>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <GpsPID+0x392>
 8005532:	4959      	ldr	r1, [pc, #356]	; (8005698 <GpsPID+0x4ec>)
 8005534:	6938      	ldr	r0, [r7, #16]
 8005536:	f7fb fb37 	bl	8000ba8 <__addsf3>
 800553a:	4603      	mov	r3, r0
 800553c:	613b      	str	r3, [r7, #16]
		imu.debug2 = error;
 800553e:	6938      	ldr	r0, [r7, #16]
 8005540:	f7fb fe16 	bl	8001170 <__aeabi_f2iz>
 8005544:	4603      	mov	r3, r0
 8005546:	b21a      	sxth	r2, r3
 8005548:	4b51      	ldr	r3, [pc, #324]	; (8005690 <GpsPID+0x4e4>)
 800554a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		pid->Iterm2[YAW] += error * pid->ts;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6939      	ldr	r1, [r7, #16]
 800555a:	4618      	mov	r0, r3
 800555c:	f7fb fc2c 	bl	8000db8 <__aeabi_fmul>
 8005560:	4603      	mov	r3, r0
 8005562:	4619      	mov	r1, r3
 8005564:	4620      	mov	r0, r4
 8005566:	f7fb fb1f 	bl	8000ba8 <__addsf3>
 800556a:	4603      	mov	r3, r0
 800556c:	461a      	mov	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f7fb fdd4 	bl	8001130 <__aeabi_fcmpgt>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d006      	beq.n	800559c <GpsPID+0x3f0>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800559a:	e016      	b.n	80055ca <GpsPID+0x41e>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80055ac:	4619      	mov	r1, r3
 80055ae:	4610      	mov	r0, r2
 80055b0:	f7fb fda0 	bl	80010f4 <__aeabi_fcmplt>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <GpsPID+0x41e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055c0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055d0:	4619      	mov	r1, r3
 80055d2:	6938      	ldr	r0, [r7, #16]
 80055d4:	f7fb fae6 	bl	8000ba4 <__aeabi_fsub>
 80055d8:	4603      	mov	r3, r0
 80055da:	461a      	mov	r2, r3
 80055dc:	4b28      	ldr	r3, [pc, #160]	; (8005680 <GpsPID+0x4d4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4619      	mov	r1, r3
 80055e2:	4610      	mov	r0, r2
 80055e4:	f7fb fbe8 	bl	8000db8 <__aeabi_fmul>
 80055e8:	4603      	mov	r3, r0
 80055ea:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	6939      	ldr	r1, [r7, #16]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fb fbdc 	bl	8000db8 <__aeabi_fmul>
 8005600:	4603      	mov	r3, r0
 8005602:	461c      	mov	r4, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f7fb fbd1 	bl	8000db8 <__aeabi_fmul>
 8005616:	4603      	mov	r3, r0
 8005618:	4619      	mov	r1, r3
 800561a:	4620      	mov	r0, r4
 800561c:	f7fb fac4 	bl	8000ba8 <__addsf3>
 8005620:	4603      	mov	r3, r0
 8005622:	461c      	mov	r4, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fb fbc4 	bl	8000db8 <__aeabi_fmul>
 8005630:	4603      	mov	r3, r0
 8005632:	4619      	mov	r1, r3
 8005634:	4620      	mov	r0, r4
 8005636:	f7fb fab7 	bl	8000ba8 <__addsf3>
 800563a:	4603      	mov	r3, r0
 800563c:	461a      	mov	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800564a:	490e      	ldr	r1, [pc, #56]	; (8005684 <GpsPID+0x4d8>)
 800564c:	4618      	mov	r0, r3
 800564e:	f7fb fd6f 	bl	8001130 <__aeabi_fcmpgt>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <GpsPID+0x4b4>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a0a      	ldr	r2, [pc, #40]	; (8005684 <GpsPID+0x4d8>)
 800565c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005666:	4908      	ldr	r1, [pc, #32]	; (8005688 <GpsPID+0x4dc>)
 8005668:	4618      	mov	r0, r3
 800566a:	f7fb fd43 	bl	80010f4 <__aeabi_fcmplt>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80c2 	beq.w	80057fa <GpsPID+0x64e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a03      	ldr	r2, [pc, #12]	; (8005688 <GpsPID+0x4dc>)
 800567a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800567e:	e0bc      	b.n	80057fa <GpsPID+0x64e>
 8005680:	2000032c 	.word	0x2000032c
 8005684:	447a0000 	.word	0x447a0000
 8005688:	c47a0000 	.word	0xc47a0000
 800568c:	20000d40 	.word	0x20000d40
 8005690:	20000e20 	.word	0x20000e20
 8005694:	43340000 	.word	0x43340000
 8005698:	43b40000 	.word	0x43b40000
 800569c:	c3340000 	.word	0xc3340000
	}else{
		error = RC.rcCommand[YAW] - (-imu.gyroRaw[YAW]);
 80056a0:	4b58      	ldr	r3, [pc, #352]	; (8005804 <GpsPID+0x658>)
 80056a2:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fb fb32 	bl	8000d10 <__aeabi_i2f>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b56      	ldr	r3, [pc, #344]	; (8005808 <GpsPID+0x65c>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	4619      	mov	r1, r3
 80056b4:	4610      	mov	r0, r2
 80056b6:	f7fb fa77 	bl	8000ba8 <__addsf3>
 80056ba:	4603      	mov	r3, r0
 80056bc:	613b      	str	r3, [r7, #16]
		pid->Iterm2[YAW] += error * pid->ts;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6939      	ldr	r1, [r7, #16]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fb fb74 	bl	8000db8 <__aeabi_fmul>
 80056d0:	4603      	mov	r3, r0
 80056d2:	4619      	mov	r1, r3
 80056d4:	4620      	mov	r0, r4
 80056d6:	f7fb fa67 	bl	8000ba8 <__addsf3>
 80056da:	4603      	mov	r3, r0
 80056dc:	461a      	mov	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f7fb fd1c 	bl	8001130 <__aeabi_fcmpgt>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d006      	beq.n	800570c <GpsPID+0x560>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800570a:	e016      	b.n	800573a <GpsPID+0x58e>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005718:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f7fb fce8 	bl	80010f4 <__aeabi_fcmplt>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d007      	beq.n	800573a <GpsPID+0x58e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005730:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005740:	4619      	mov	r1, r3
 8005742:	6938      	ldr	r0, [r7, #16]
 8005744:	f7fb fa2e 	bl	8000ba4 <__aeabi_fsub>
 8005748:	4603      	mov	r3, r0
 800574a:	461a      	mov	r2, r3
 800574c:	4b2f      	ldr	r3, [pc, #188]	; (800580c <GpsPID+0x660>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f7fb fb30 	bl	8000db8 <__aeabi_fmul>
 8005758:	4603      	mov	r3, r0
 800575a:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	6939      	ldr	r1, [r7, #16]
 800576a:	4618      	mov	r0, r3
 800576c:	f7fb fb24 	bl	8000db8 <__aeabi_fmul>
 8005770:	4603      	mov	r3, r0
 8005772:	461c      	mov	r4, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f7fb fb19 	bl	8000db8 <__aeabi_fmul>
 8005786:	4603      	mov	r3, r0
 8005788:	4619      	mov	r1, r3
 800578a:	4620      	mov	r0, r4
 800578c:	f7fb fa0c 	bl	8000ba8 <__addsf3>
 8005790:	4603      	mov	r3, r0
 8005792:	461c      	mov	r4, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	4618      	mov	r0, r3
 800579c:	f7fb fb0c 	bl	8000db8 <__aeabi_fmul>
 80057a0:	4603      	mov	r3, r0
 80057a2:	4619      	mov	r1, r3
 80057a4:	4620      	mov	r0, r4
 80057a6:	f7fb f9ff 	bl	8000ba8 <__addsf3>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80057ba:	4915      	ldr	r1, [pc, #84]	; (8005810 <GpsPID+0x664>)
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fb fcb7 	bl	8001130 <__aeabi_fcmpgt>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <GpsPID+0x624>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a11      	ldr	r2, [pc, #68]	; (8005810 <GpsPID+0x664>)
 80057cc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80057d6:	490f      	ldr	r1, [pc, #60]	; (8005814 <GpsPID+0x668>)
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fb fc8b 	bl	80010f4 <__aeabi_fcmplt>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <GpsPID+0x640>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a0b      	ldr	r2, [pc, #44]	; (8005814 <GpsPID+0x668>)
 80057e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		imu.yawheadinghold = imu.actual_compass_heading;
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <GpsPID+0x65c>)
 80057ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057f2:	b21a      	sxth	r2, r3
 80057f4:	4b04      	ldr	r3, [pc, #16]	; (8005808 <GpsPID+0x65c>)
 80057f6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	}

	return ret;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	bd90      	pop	{r4, r7, pc}
 8005804:	20000d40 	.word	0x20000d40
 8005808:	20000e20 	.word	0x20000e20
 800580c:	2000032c 	.word	0x2000032c
 8005810:	447a0000 	.word	0x447a0000
 8005814:	c47a0000 	.word	0xc47a0000

08005818 <constrain>:

int constrain(int amt, int low, int high)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
	if (amt < low)
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	429a      	cmp	r2, r3
 800582a:	da01      	bge.n	8005830 <constrain+0x18>
		return low;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	e006      	b.n	800583e <constrain+0x26>
	else if (amt > high)
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	dd01      	ble.n	800583c <constrain+0x24>
		return high;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	e000      	b.n	800583e <constrain+0x26>
	else
		return amt;
 800583c:	68fb      	ldr	r3, [r7, #12]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <HAL_TIM_IC_CaptureCallback>:


static void cliRadio(cli_args_t *args);

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM2)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	7f1b      	ldrb	r3, [r3, #28]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d135      	bne.n	80058c4 <HAL_TIM_IC_CaptureCallback+0x7c>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005860:	d130      	bne.n	80058c4 <HAL_TIM_IC_CaptureCallback+0x7c>
	{
		if(Ch1_PIN)
 8005862:	4b90      	ldr	r3, [pc, #576]	; (8005aa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d011      	beq.n	8005892 <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM2->CCR1 = 0;
 800586e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005872:	2200      	movs	r2, #0
 8005874:	635a      	str	r2, [r3, #52]	; 0x34
			RC.capture_rise[0] = TIM2->CCR1; // read capture data
 8005876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800587a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587c:	4a8a      	ldr	r2, [pc, #552]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 800587e:	6013      	str	r3, [r2, #0]
			Ch1_POL_FALLING;  // to falling edge
 8005880:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800588a:	f043 0302 	orr.w	r3, r3, #2
 800588e:	6213      	str	r3, [r2, #32]
 8005890:	e018      	b.n	80058c4 <HAL_TIM_IC_CaptureCallback+0x7c>
		}
		else
		{   // Timer2 Ch1 pin(PA0) is Low
			RC.capture_fall[0] = TIM2->CCR1; // read capture data
 8005892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005898:	4a83      	ldr	r2, [pc, #524]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 800589a:	6213      	str	r3, [r2, #32]
			RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 800589c:	4b82      	ldr	r3, [pc, #520]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	4b81      	ldr	r3, [pc, #516]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	b21a      	sxth	r2, r3
 80058ae:	4b7e      	ldr	r3, [pc, #504]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			Ch1_POL_RISING;   // to rising edge
 80058b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058be:	f023 0302 	bic.w	r3, r3, #2
 80058c2:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM2)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7f1b      	ldrb	r3, [r3, #28]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d135      	bne.n	8005938 <HAL_TIM_IC_CaptureCallback+0xf0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d4:	d130      	bne.n	8005938 <HAL_TIM_IC_CaptureCallback+0xf0>
	{
		if(Ch2_PIN)
 80058d6:	4b73      	ldr	r3, [pc, #460]	; (8005aa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d011      	beq.n	8005906 <HAL_TIM_IC_CaptureCallback+0xbe>
		{  // Timer2 Ch2 pin(PA1) is High
			TIM2->CCR2 = 0;
 80058e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058e6:	2200      	movs	r2, #0
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
			RC.capture_rise[1] = TIM2->CCR2; // read capture data
 80058ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	4a6d      	ldr	r2, [pc, #436]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058f2:	6053      	str	r3, [r2, #4]
			Ch2_POL_FALLING;  // to falling edge
 80058f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058fe:	f043 0320 	orr.w	r3, r3, #32
 8005902:	6213      	str	r3, [r2, #32]
 8005904:	e018      	b.n	8005938 <HAL_TIM_IC_CaptureCallback+0xf0>
		}
		else
		{   // Timer2 Ch2 pin(PA1) is Low
			RC.capture_fall[1] = TIM2->CCR2; // read capture data
 8005906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	4a66      	ldr	r2, [pc, #408]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 800590e:	6253      	str	r3, [r2, #36]	; 0x24
			RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 8005910:	4b65      	ldr	r3, [pc, #404]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	b29a      	uxth	r2, r3
 8005916:	4b64      	ldr	r3, [pc, #400]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	b29b      	uxth	r3, r3
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	b29b      	uxth	r3, r3
 8005920:	b21a      	sxth	r2, r3
 8005922:	4b61      	ldr	r3, [pc, #388]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005924:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			Ch2_POL_RISING;   // to rising edge
 8005928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005932:	f023 0320 	bic.w	r3, r3, #32
 8005936:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	7f1b      	ldrb	r3, [r3, #28]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d12e      	bne.n	800599e <HAL_TIM_IC_CaptureCallback+0x156>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a59      	ldr	r2, [pc, #356]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d129      	bne.n	800599e <HAL_TIM_IC_CaptureCallback+0x156>
	{
		if(Ch3_PIN)
 800594a:	4b56      	ldr	r3, [pc, #344]	; (8005aa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00d      	beq.n	8005972 <HAL_TIM_IC_CaptureCallback+0x12a>
		{  // Timer3 Ch1 pin(PA6) is High
			TIM3->CCR1 = 0;
 8005956:	4b55      	ldr	r3, [pc, #340]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005958:	2200      	movs	r2, #0
 800595a:	635a      	str	r2, [r3, #52]	; 0x34
			RC.capture_rise[2] = TIM3->CCR1; // read capture data
 800595c:	4b53      	ldr	r3, [pc, #332]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	4a51      	ldr	r2, [pc, #324]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005962:	6093      	str	r3, [r2, #8]
			Ch3_POL_FALLING;  // to falling edge
 8005964:	4b51      	ldr	r3, [pc, #324]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	4a50      	ldr	r2, [pc, #320]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 800596a:	f043 0302 	orr.w	r3, r3, #2
 800596e:	6213      	str	r3, [r2, #32]
 8005970:	e015      	b.n	800599e <HAL_TIM_IC_CaptureCallback+0x156>
		}
		else
		{   // Timer3 Ch1 pin(PA6) is Low
			RC.capture_fall[2] = TIM3->CCR1; // read capture data
 8005972:	4b4e      	ldr	r3, [pc, #312]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	4a4c      	ldr	r2, [pc, #304]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005978:	6293      	str	r3, [r2, #40]	; 0x28
			RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 800597a:	4b4b      	ldr	r3, [pc, #300]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	b29a      	uxth	r2, r3
 8005980:	4b49      	ldr	r3, [pc, #292]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	b29b      	uxth	r3, r3
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	b29b      	uxth	r3, r3
 800598a:	b21a      	sxth	r2, r3
 800598c:	4b46      	ldr	r3, [pc, #280]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 800598e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			Ch3_POL_RISING;   // to rising edge
 8005992:	4b46      	ldr	r3, [pc, #280]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	4a45      	ldr	r2, [pc, #276]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005998:	f023 0302 	bic.w	r3, r3, #2
 800599c:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM3)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	7f1b      	ldrb	r3, [r3, #28]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d12e      	bne.n	8005a04 <HAL_TIM_IC_CaptureCallback+0x1bc>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a40      	ldr	r2, [pc, #256]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d129      	bne.n	8005a04 <HAL_TIM_IC_CaptureCallback+0x1bc>
	{
		if(Ch4_PIN)
 80059b0:	4b3c      	ldr	r3, [pc, #240]	; (8005aa4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00d      	beq.n	80059d8 <HAL_TIM_IC_CaptureCallback+0x190>
		{  // Timer3 Ch2 pin(PA7) is High
			TIM3->CCR2 = 0;
 80059bc:	4b3b      	ldr	r3, [pc, #236]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 80059be:	2200      	movs	r2, #0
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
			RC.capture_rise[3] = TIM3->CCR2; // read capture data
 80059c2:	4b3a      	ldr	r3, [pc, #232]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	4a38      	ldr	r2, [pc, #224]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059c8:	60d3      	str	r3, [r2, #12]
			Ch4_POL_FALLING;  // to falling edge
 80059ca:	4b38      	ldr	r3, [pc, #224]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	4a37      	ldr	r2, [pc, #220]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 80059d0:	f043 0320 	orr.w	r3, r3, #32
 80059d4:	6213      	str	r3, [r2, #32]
 80059d6:	e015      	b.n	8005a04 <HAL_TIM_IC_CaptureCallback+0x1bc>
		}
		else
		{   // Timer3 Ch2 pin(PA7) is Low
			RC.capture_fall[3] = TIM3->CCR2; // read capture data
 80059d8:	4b34      	ldr	r3, [pc, #208]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	4a32      	ldr	r2, [pc, #200]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059de:	62d3      	str	r3, [r2, #44]	; 0x2c
			RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 80059e0:	4b31      	ldr	r3, [pc, #196]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	4b30      	ldr	r3, [pc, #192]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	b21a      	sxth	r2, r3
 80059f2:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			Ch4_POL_RISING;   // to rising edge
 80059f8:	4b2c      	ldr	r3, [pc, #176]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	4a2b      	ldr	r2, [pc, #172]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 80059fe:	f023 0320 	bic.w	r3, r3, #32
 8005a02:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 && htim->Instance == TIM3)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	7f1b      	ldrb	r3, [r3, #28]
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d12e      	bne.n	8005a6a <HAL_TIM_IC_CaptureCallback+0x222>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a26      	ldr	r2, [pc, #152]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d129      	bne.n	8005a6a <HAL_TIM_IC_CaptureCallback+0x222>
	{
		if(Ch5_PIN)
 8005a16:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <HAL_TIM_IC_CaptureCallback+0x1f6>
		{  // Timer3 Ch3 pin(PB0) is High
			TIM3->CCR3 = 0;
 8005a22:	4b22      	ldr	r3, [pc, #136]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	63da      	str	r2, [r3, #60]	; 0x3c
			RC.capture_rise[4] = TIM3->CCR3; // read capture data
 8005a28:	4b20      	ldr	r3, [pc, #128]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2c:	4a1e      	ldr	r2, [pc, #120]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a2e:	6113      	str	r3, [r2, #16]
			Ch5_POL_FALLING;  // to falling edge
 8005a30:	4b1e      	ldr	r3, [pc, #120]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	4a1d      	ldr	r2, [pc, #116]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a3a:	6213      	str	r3, [r2, #32]
 8005a3c:	e015      	b.n	8005a6a <HAL_TIM_IC_CaptureCallback+0x222>
		}
		else
		{   // Timer3 Ch3 pin(PB0) is Low
			RC.capture_fall[4] = TIM3->CCR3; // read capture data
 8005a3e:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a44:	6313      	str	r3, [r2, #48]	; 0x30
			RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 8005a46:	4b18      	ldr	r3, [pc, #96]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	4b16      	ldr	r3, [pc, #88]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	b21a      	sxth	r2, r3
 8005a58:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			Ch5_POL_RISING;   // to rising edge
 8005a5e:	4b13      	ldr	r3, [pc, #76]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	4a12      	ldr	r2, [pc, #72]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a68:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	7f1b      	ldrb	r3, [r3, #28]
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d136      	bne.n	8005ae0 <HAL_TIM_IC_CaptureCallback+0x298>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d131      	bne.n	8005ae0 <HAL_TIM_IC_CaptureCallback+0x298>
	{
		if(Ch6_PIN)
 8005a7c:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d015      	beq.n	8005ab4 <HAL_TIM_IC_CaptureCallback+0x26c>
		{  // Timer3 Ch4 pin(PB1) is High
			TIM3->CCR4 = 0;
 8005a88:	4b08      	ldr	r3, [pc, #32]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
			RC.capture_rise[5] = TIM3->CCR4; // read capture data
 8005a8e:	4b07      	ldr	r3, [pc, #28]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	4a05      	ldr	r2, [pc, #20]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a94:	6153      	str	r3, [r2, #20]
			Ch6_POL_FALLING;  // to falling edge
 8005a96:	4b05      	ldr	r3, [pc, #20]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	4a04      	ldr	r2, [pc, #16]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005aa0:	6213      	str	r3, [r2, #32]
	//	        	RC.capture_fall[7] = TIM3->CCR4; // read capture data
	//	            RC.rcADC[7] = RC.capture_fall[7] - RC.capture_rise[7];
	//	            Ch8_POL_RISING;   // to rising edge
	//	        }
	//	    }
}
 8005aa2:	e01d      	b.n	8005ae0 <HAL_TIM_IC_CaptureCallback+0x298>
 8005aa4:	40010800 	.word	0x40010800
 8005aa8:	20000d40 	.word	0x20000d40
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40010c00 	.word	0x40010c00
			RC.capture_fall[5] = TIM3->CCR4; // read capture data
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	4a0d      	ldr	r2, [pc, #52]	; (8005af0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005aba:	6353      	str	r3, [r2, #52]	; 0x34
			RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 8005abc:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	b21a      	sxth	r2, r3
 8005ace:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005ad0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			Ch6_POL_RISING;   // to rising edge
 8005ad4:	4b05      	ldr	r3, [pc, #20]	; (8005aec <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	4a04      	ldr	r2, [pc, #16]	; (8005aec <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005ada:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ade:	6213      	str	r3, [r2, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40000400 	.word	0x40000400
 8005af0:	20000d40 	.word	0x20000d40

08005af4 <mwArm>:

void mwArm(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
	if(!f.ARMED)
 8005af8:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <mwArm+0x24>)
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d108      	bne.n	8005b12 <mwArm+0x1e>
	{
		f.ARMED = 1;
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <mwArm+0x24>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	705a      	strb	r2, [r3, #1]
		ms5611.ground_pressure = alt.EstAlt;
 8005b06:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <mwArm+0x28>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <mwArm+0x2c>)
 8005b0c:	6693      	str	r3, [r2, #104]	; 0x68
		GPS_reset_home_position();
 8005b0e:	f7fc fded 	bl	80026ec <GPS_reset_home_position>
	}
}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000ed4 	.word	0x20000ed4
 8005b1c:	20000ef0 	.word	0x20000ef0
 8005b20:	20000da0 	.word	0x20000da0

08005b24 <mwDisarm>:
void mwDisarm(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
	if(f.ARMED)
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <mwDisarm+0x1c>)
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <mwDisarm+0x12>
	{
		f.ARMED = 0;
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <mwDisarm+0x1c>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	705a      	strb	r2, [r3, #1]
	}
}
 8005b36:	bf00      	nop
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20000ed4 	.word	0x20000ed4

08005b44 <computeRC>:
	Error.error = 0;
	cliAdd("radio", cliRadio);
}

void computeRC(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
	static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
	static uint8_t rcSticks;            // this hold sticks position for command combos
	uint8_t stTmp = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	71fb      	strb	r3, [r7, #7]
	int i;
	// ------------------ STICKS COMMAND HANDLER --------------------
	// checking sticks positions
	for (i = 0; i < 4; i++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	603b      	str	r3, [r7, #0]
 8005b52:	e01f      	b.n	8005b94 <computeRC+0x50>
	{
		stTmp >>= 2;
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	71fb      	strb	r3, [r7, #7]
		if (RC.rcADC[i] > 1150)
 8005b5a:	4ab6      	ldr	r2, [pc, #728]	; (8005e34 <computeRC+0x2f0>)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	3320      	adds	r3, #32
 8005b60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005b64:	f240 427e 	movw	r2, #1150	; 0x47e
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	dd03      	ble.n	8005b74 <computeRC+0x30>
			stTmp |= 0x80;  // check for MIN
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b72:	71fb      	strb	r3, [r7, #7]
		if (RC.rcADC[i] < 1850)
 8005b74:	4aaf      	ldr	r2, [pc, #700]	; (8005e34 <computeRC+0x2f0>)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	3320      	adds	r3, #32
 8005b7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005b7e:	f240 7239 	movw	r2, #1849	; 0x739
 8005b82:	4293      	cmp	r3, r2
 8005b84:	dc03      	bgt.n	8005b8e <computeRC+0x4a>
			stTmp |= 0x40;  // check for MAX
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b8c:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 4; i++)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	3301      	adds	r3, #1
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	dddc      	ble.n	8005b54 <computeRC+0x10>
	}
	if (stTmp == rcSticks)
 8005b9a:	4ba7      	ldr	r3, [pc, #668]	; (8005e38 <computeRC+0x2f4>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	79fa      	ldrb	r2, [r7, #7]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d10a      	bne.n	8005bba <computeRC+0x76>
	{
		if (rcDelayCommand < 250)
 8005ba4:	4ba5      	ldr	r3, [pc, #660]	; (8005e3c <computeRC+0x2f8>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2bf9      	cmp	r3, #249	; 0xf9
 8005baa:	d809      	bhi.n	8005bc0 <computeRC+0x7c>
			rcDelayCommand++;
 8005bac:	4ba3      	ldr	r3, [pc, #652]	; (8005e3c <computeRC+0x2f8>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	4ba1      	ldr	r3, [pc, #644]	; (8005e3c <computeRC+0x2f8>)
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	e002      	b.n	8005bc0 <computeRC+0x7c>
	} else
		rcDelayCommand = 0;
 8005bba:	4ba0      	ldr	r3, [pc, #640]	; (8005e3c <computeRC+0x2f8>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
	rcSticks = stTmp;
 8005bc0:	4a9d      	ldr	r2, [pc, #628]	; (8005e38 <computeRC+0x2f4>)
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	7013      	strb	r3, [r2, #0]

	if (rcDelayCommand == 50)
 8005bc6:	4b9d      	ldr	r3, [pc, #628]	; (8005e3c <computeRC+0x2f8>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b32      	cmp	r3, #50	; 0x32
 8005bcc:	d12e      	bne.n	8005c2c <computeRC+0xe8>
	{
		if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 8005bce:	4b9c      	ldr	r3, [pc, #624]	; (8005e40 <computeRC+0x2fc>)
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d107      	bne.n	8005be6 <computeRC+0xa2>
 8005bd6:	4b98      	ldr	r3, [pc, #608]	; (8005e38 <computeRC+0x2f4>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b5f      	cmp	r3, #95	; 0x5f
 8005bdc:	d103      	bne.n	8005be6 <computeRC+0xa2>
		{
			ledToggle(RGB_BLUE);
 8005bde:	2004      	movs	r0, #4
 8005be0:	f005 fd00 	bl	800b5e4 <ledToggle>
 8005be4:	e01c      	b.n	8005c20 <computeRC+0xdc>
		}else if(f.ARMED == 1 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 8005be6:	4b96      	ldr	r3, [pc, #600]	; (8005e40 <computeRC+0x2fc>)
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d107      	bne.n	8005bfe <computeRC+0xba>
 8005bee:	4b92      	ldr	r3, [pc, #584]	; (8005e38 <computeRC+0x2f4>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b6f      	cmp	r3, #111	; 0x6f
 8005bf4:	d103      	bne.n	8005bfe <computeRC+0xba>
		{
			ledToggle(RGB_GREEN);
 8005bf6:	2003      	movs	r0, #3
 8005bf8:	f005 fcf4 	bl	800b5e4 <ledToggle>
 8005bfc:	e010      	b.n	8005c20 <computeRC+0xdc>
		}else if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_HI + PIT_HI + ROL_HI))
 8005bfe:	4b90      	ldr	r3, [pc, #576]	; (8005e40 <computeRC+0x2fc>)
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <computeRC+0xd0>
 8005c06:	4b8c      	ldr	r3, [pc, #560]	; (8005e38 <computeRC+0x2f4>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b6a      	cmp	r3, #106	; 0x6a
 8005c0c:	d102      	bne.n	8005c14 <computeRC+0xd0>
		{
			mwArm();
 8005c0e:	f7ff ff71 	bl	8005af4 <mwArm>
 8005c12:	e005      	b.n	8005c20 <computeRC+0xdc>
		}else if(rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_LO)
 8005c14:	4b88      	ldr	r3, [pc, #544]	; (8005e38 <computeRC+0x2f4>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b59      	cmp	r3, #89	; 0x59
 8005c1a:	d101      	bne.n	8005c20 <computeRC+0xdc>
		{
			mwDisarm();
 8005c1c:	f7ff ff82 	bl	8005b24 <mwDisarm>
		}
		if (i)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <computeRC+0xe8>
		{
			// writeEEPROM(1, true);
			rcDelayCommand = 0; // allow autorepetition
 8005c26:	4b85      	ldr	r3, [pc, #532]	; (8005e3c <computeRC+0x2f8>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	701a      	strb	r2, [r3, #0]
		}
	}
	if(RC.rcCommand[AUX1] > 1800)
 8005c2c:	4b81      	ldr	r3, [pc, #516]	; (8005e34 <computeRC+0x2f0>)
 8005c2e:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8005c32:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005c36:	dd0f      	ble.n	8005c58 <computeRC+0x114>
	{
		f.ANGLE_MODE = 0;
 8005c38:	4b81      	ldr	r3, [pc, #516]	; (8005e40 <computeRC+0x2fc>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	715a      	strb	r2, [r3, #5]
		f.HORIZON_MODE = 0;
 8005c3e:	4b80      	ldr	r3, [pc, #512]	; (8005e40 <computeRC+0x2fc>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	719a      	strb	r2, [r3, #6]
		f.ACRO_MODE = 1;
 8005c44:	4b7e      	ldr	r3, [pc, #504]	; (8005e40 <computeRC+0x2fc>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	71da      	strb	r2, [r3, #7]
		f.GPS_HOLD_MODE = 0;
 8005c4a:	4b7d      	ldr	r3, [pc, #500]	; (8005e40 <computeRC+0x2fc>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	735a      	strb	r2, [r3, #13]
    rcOptions[BOXGPSHOLD] = 0;
 8005c50:	4b7c      	ldr	r3, [pc, #496]	; (8005e44 <computeRC+0x300>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	721a      	strb	r2, [r3, #8]
 8005c56:	e02a      	b.n	8005cae <computeRC+0x16a>
	}else if(RC.rcCommand[AUX1] > 1400 && RC.rcCommand[AUX1] < 1600)
 8005c58:	4b76      	ldr	r3, [pc, #472]	; (8005e34 <computeRC+0x2f0>)
 8005c5a:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8005c5e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8005c62:	dd15      	ble.n	8005c90 <computeRC+0x14c>
 8005c64:	4b73      	ldr	r3, [pc, #460]	; (8005e34 <computeRC+0x2f0>)
 8005c66:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8005c6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c6e:	da0f      	bge.n	8005c90 <computeRC+0x14c>
	{
		f.HORIZON_MODE = 0;
 8005c70:	4b73      	ldr	r3, [pc, #460]	; (8005e40 <computeRC+0x2fc>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	719a      	strb	r2, [r3, #6]
		f.ANGLE_MODE = 1;
 8005c76:	4b72      	ldr	r3, [pc, #456]	; (8005e40 <computeRC+0x2fc>)
 8005c78:	2201      	movs	r2, #1
 8005c7a:	715a      	strb	r2, [r3, #5]
		f.ACRO_MODE = 0;
 8005c7c:	4b70      	ldr	r3, [pc, #448]	; (8005e40 <computeRC+0x2fc>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	71da      	strb	r2, [r3, #7]
		f.GPS_HOLD_MODE = 0;
 8005c82:	4b6f      	ldr	r3, [pc, #444]	; (8005e40 <computeRC+0x2fc>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	735a      	strb	r2, [r3, #13]
		rcOptions[BOXGPSHOLD] = 0;
 8005c88:	4b6e      	ldr	r3, [pc, #440]	; (8005e44 <computeRC+0x300>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	721a      	strb	r2, [r3, #8]
 8005c8e:	e00e      	b.n	8005cae <computeRC+0x16a>
	}else {
		f.ACRO_MODE = 0;
 8005c90:	4b6b      	ldr	r3, [pc, #428]	; (8005e40 <computeRC+0x2fc>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	71da      	strb	r2, [r3, #7]
		f.ANGLE_MODE = 0;
 8005c96:	4b6a      	ldr	r3, [pc, #424]	; (8005e40 <computeRC+0x2fc>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	715a      	strb	r2, [r3, #5]
		f.HORIZON_MODE = 0;
 8005c9c:	4b68      	ldr	r3, [pc, #416]	; (8005e40 <computeRC+0x2fc>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	719a      	strb	r2, [r3, #6]
		f.GPS_HOLD_MODE = 1;
 8005ca2:	4b67      	ldr	r3, [pc, #412]	; (8005e40 <computeRC+0x2fc>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	735a      	strb	r2, [r3, #13]
		rcOptions[BOXGPSHOLD] = 1;
 8005ca8:	4b66      	ldr	r3, [pc, #408]	; (8005e44 <computeRC+0x300>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	721a      	strb	r2, [r3, #8]
	}

	if(RC.rcCommand[GEAR] > 1400 && RC.rcCommand[GEAR] < 1600 && f.ARMED == 1)
 8005cae:	4b61      	ldr	r3, [pc, #388]	; (8005e34 <computeRC+0x2f0>)
 8005cb0:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8005cb4:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8005cb8:	dd0c      	ble.n	8005cd4 <computeRC+0x190>
 8005cba:	4b5e      	ldr	r3, [pc, #376]	; (8005e34 <computeRC+0x2f0>)
 8005cbc:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8005cc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005cc4:	da06      	bge.n	8005cd4 <computeRC+0x190>
 8005cc6:	4b5e      	ldr	r3, [pc, #376]	; (8005e40 <computeRC+0x2fc>)
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d102      	bne.n	8005cd4 <computeRC+0x190>
	{
		Error.error = 5;
 8005cce:	4b5e      	ldr	r3, [pc, #376]	; (8005e48 <computeRC+0x304>)
 8005cd0:	2205      	movs	r2, #5
 8005cd2:	701a      	strb	r2, [r3, #0]
	}

	if(f.ANGLE_MODE || f.GPS_HOLD_MODE)
 8005cd4:	4b5a      	ldr	r3, [pc, #360]	; (8005e40 <computeRC+0x2fc>)
 8005cd6:	795b      	ldrb	r3, [r3, #5]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <computeRC+0x1a2>
 8005cdc:	4b58      	ldr	r3, [pc, #352]	; (8005e40 <computeRC+0x2fc>)
 8005cde:	7b5b      	ldrb	r3, [r3, #13]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80b5 	beq.w	8005e50 <computeRC+0x30c>
	{
		RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 20), 1100, 1900, -30, 30); //0~250 left:0, right:250
 8005ce6:	4b53      	ldr	r3, [pc, #332]	; (8005e34 <computeRC+0x2f0>)
 8005ce8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cec:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005cf0:	dd13      	ble.n	8005d1a <computeRC+0x1d6>
 8005cf2:	4b50      	ldr	r3, [pc, #320]	; (8005e34 <computeRC+0x2f0>)
 8005cf4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cf8:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4a51      	ldr	r2, [pc, #324]	; (8005e4c <computeRC+0x308>)
 8005d06:	fb82 1203 	smull	r1, r2, r2, r3
 8005d0a:	1212      	asrs	r2, r2, #8
 8005d0c:	17db      	asrs	r3, r3, #31
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b1e      	subs	r3, #30
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	b21b      	sxth	r3, r3
 8005d18:	e01a      	b.n	8005d50 <computeRC+0x20c>
 8005d1a:	4b46      	ldr	r3, [pc, #280]	; (8005e34 <computeRC+0x2f0>)
 8005d1c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005d20:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005d24:	da13      	bge.n	8005d4e <computeRC+0x20a>
 8005d26:	4b43      	ldr	r3, [pc, #268]	; (8005e34 <computeRC+0x2f0>)
 8005d28:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005d2c:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005d30:	4613      	mov	r3, r2
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4a44      	ldr	r2, [pc, #272]	; (8005e4c <computeRC+0x308>)
 8005d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8005d3e:	1212      	asrs	r2, r2, #8
 8005d40:	17db      	asrs	r3, r3, #31
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b1e      	subs	r3, #30
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	b21b      	sxth	r3, r3
 8005d4c:	e000      	b.n	8005d50 <computeRC+0x20c>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	4a38      	ldr	r2, [pc, #224]	; (8005e34 <computeRC+0x2f0>)
 8005d52:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
		RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 20), 1100, 1900, -30, 30); //0~250 rear:0, fornt:250
 8005d56:	4b37      	ldr	r3, [pc, #220]	; (8005e34 <computeRC+0x2f0>)
 8005d58:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d5c:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005d60:	dd13      	ble.n	8005d8a <computeRC+0x246>
 8005d62:	4b34      	ldr	r3, [pc, #208]	; (8005e34 <computeRC+0x2f0>)
 8005d64:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d68:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4a35      	ldr	r2, [pc, #212]	; (8005e4c <computeRC+0x308>)
 8005d76:	fb82 1203 	smull	r1, r2, r2, r3
 8005d7a:	1212      	asrs	r2, r2, #8
 8005d7c:	17db      	asrs	r3, r3, #31
 8005d7e:	1a9b      	subs	r3, r3, r2
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	331e      	adds	r3, #30
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	b21b      	sxth	r3, r3
 8005d88:	e01a      	b.n	8005dc0 <computeRC+0x27c>
 8005d8a:	4b2a      	ldr	r3, [pc, #168]	; (8005e34 <computeRC+0x2f0>)
 8005d8c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d90:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005d94:	da13      	bge.n	8005dbe <computeRC+0x27a>
 8005d96:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <computeRC+0x2f0>)
 8005d98:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d9c:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005da0:	4613      	mov	r3, r2
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4a28      	ldr	r2, [pc, #160]	; (8005e4c <computeRC+0x308>)
 8005daa:	fb82 1203 	smull	r1, r2, r2, r3
 8005dae:	1212      	asrs	r2, r2, #8
 8005db0:	17db      	asrs	r3, r3, #31
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	331e      	adds	r3, #30
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	b21b      	sxth	r3, r3
 8005dbc:	e000      	b.n	8005dc0 <computeRC+0x27c>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	4a1c      	ldr	r2, [pc, #112]	; (8005e34 <computeRC+0x2f0>)
 8005dc2:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
		RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 20), 1100, 1900, -90, 90); //0~250 left:0, right:250
 8005dc6:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <computeRC+0x2f0>)
 8005dc8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005dcc:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005dd0:	dd12      	ble.n	8005df8 <computeRC+0x2b4>
 8005dd2:	4b18      	ldr	r3, [pc, #96]	; (8005e34 <computeRC+0x2f0>)
 8005dd4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005dd8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005ddc:	22b4      	movs	r2, #180	; 0xb4
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	4a1a      	ldr	r2, [pc, #104]	; (8005e4c <computeRC+0x308>)
 8005de4:	fb82 1203 	smull	r1, r2, r2, r3
 8005de8:	1212      	asrs	r2, r2, #8
 8005dea:	17db      	asrs	r3, r3, #31
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	335a      	adds	r3, #90	; 0x5a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	b21b      	sxth	r3, r3
 8005df6:	e019      	b.n	8005e2c <computeRC+0x2e8>
 8005df8:	4b0e      	ldr	r3, [pc, #56]	; (8005e34 <computeRC+0x2f0>)
 8005dfa:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005dfe:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005e02:	da12      	bge.n	8005e2a <computeRC+0x2e6>
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <computeRC+0x2f0>)
 8005e06:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005e0a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005e0e:	22b4      	movs	r2, #180	; 0xb4
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
 8005e14:	4a0d      	ldr	r2, [pc, #52]	; (8005e4c <computeRC+0x308>)
 8005e16:	fb82 1203 	smull	r1, r2, r2, r3
 8005e1a:	1212      	asrs	r2, r2, #8
 8005e1c:	17db      	asrs	r3, r3, #31
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	335a      	adds	r3, #90	; 0x5a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	b21b      	sxth	r3, r3
 8005e28:	e000      	b.n	8005e2c <computeRC+0x2e8>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4a01      	ldr	r2, [pc, #4]	; (8005e34 <computeRC+0x2f0>)
 8005e2e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
 8005e32:	e0b8      	b.n	8005fa6 <computeRC+0x462>
 8005e34:	20000d40 	.word	0x20000d40
 8005e38:	20000334 	.word	0x20000334
 8005e3c:	20000335 	.word	0x20000335
 8005e40:	20000ed4 	.word	0x20000ed4
 8005e44:	20000d34 	.word	0x20000d34
 8005e48:	20000acc 	.word	0x20000acc
 8005e4c:	51eb851f 	.word	0x51eb851f
	}else if(f.ACRO_MODE){
 8005e50:	4b89      	ldr	r3, [pc, #548]	; (8006078 <computeRC+0x534>)
 8005e52:	79db      	ldrb	r3, [r3, #7]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 80a6 	beq.w	8005fa6 <computeRC+0x462>
		RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 20), 1100, 1900, -150, 150);
 8005e5a:	4b88      	ldr	r3, [pc, #544]	; (800607c <computeRC+0x538>)
 8005e5c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e60:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005e64:	dd13      	ble.n	8005e8e <computeRC+0x34a>
 8005e66:	4b85      	ldr	r3, [pc, #532]	; (800607c <computeRC+0x538>)
 8005e68:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e6c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005e70:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e74:	fb02 f303 	mul.w	r3, r2, r3
 8005e78:	4a81      	ldr	r2, [pc, #516]	; (8006080 <computeRC+0x53c>)
 8005e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8005e7e:	1212      	asrs	r2, r2, #8
 8005e80:	17db      	asrs	r3, r3, #31
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b96      	subs	r3, #150	; 0x96
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	b21b      	sxth	r3, r3
 8005e8c:	e01a      	b.n	8005ec4 <computeRC+0x380>
 8005e8e:	4b7b      	ldr	r3, [pc, #492]	; (800607c <computeRC+0x538>)
 8005e90:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e94:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005e98:	da13      	bge.n	8005ec2 <computeRC+0x37e>
 8005e9a:	4b78      	ldr	r3, [pc, #480]	; (800607c <computeRC+0x538>)
 8005e9c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005ea0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005ea4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ea8:	fb02 f303 	mul.w	r3, r2, r3
 8005eac:	4a74      	ldr	r2, [pc, #464]	; (8006080 <computeRC+0x53c>)
 8005eae:	fb82 1203 	smull	r1, r2, r2, r3
 8005eb2:	1212      	asrs	r2, r2, #8
 8005eb4:	17db      	asrs	r3, r3, #31
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b96      	subs	r3, #150	; 0x96
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	b21b      	sxth	r3, r3
 8005ec0:	e000      	b.n	8005ec4 <computeRC+0x380>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	4a6d      	ldr	r2, [pc, #436]	; (800607c <computeRC+0x538>)
 8005ec6:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
		RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 20), 1100, 1900, -150, 150);
 8005eca:	4b6c      	ldr	r3, [pc, #432]	; (800607c <computeRC+0x538>)
 8005ecc:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005ed0:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005ed4:	dd13      	ble.n	8005efe <computeRC+0x3ba>
 8005ed6:	4b69      	ldr	r3, [pc, #420]	; (800607c <computeRC+0x538>)
 8005ed8:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005edc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005ee0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ee4:	fb02 f303 	mul.w	r3, r2, r3
 8005ee8:	4a65      	ldr	r2, [pc, #404]	; (8006080 <computeRC+0x53c>)
 8005eea:	fb82 1203 	smull	r1, r2, r2, r3
 8005eee:	1212      	asrs	r2, r2, #8
 8005ef0:	17db      	asrs	r3, r3, #31
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3396      	adds	r3, #150	; 0x96
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	b21b      	sxth	r3, r3
 8005efc:	e01a      	b.n	8005f34 <computeRC+0x3f0>
 8005efe:	4b5f      	ldr	r3, [pc, #380]	; (800607c <computeRC+0x538>)
 8005f00:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005f04:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005f08:	da13      	bge.n	8005f32 <computeRC+0x3ee>
 8005f0a:	4b5c      	ldr	r3, [pc, #368]	; (800607c <computeRC+0x538>)
 8005f0c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005f10:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005f14:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f18:	fb02 f303 	mul.w	r3, r2, r3
 8005f1c:	4a58      	ldr	r2, [pc, #352]	; (8006080 <computeRC+0x53c>)
 8005f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8005f22:	1212      	asrs	r2, r2, #8
 8005f24:	17db      	asrs	r3, r3, #31
 8005f26:	1a9b      	subs	r3, r3, r2
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3396      	adds	r3, #150	; 0x96
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	b21b      	sxth	r3, r3
 8005f30:	e000      	b.n	8005f34 <computeRC+0x3f0>
 8005f32:	2300      	movs	r3, #0
 8005f34:	4a51      	ldr	r2, [pc, #324]	; (800607c <computeRC+0x538>)
 8005f36:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
		RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 20), 1100, 1900, -90, 90);
 8005f3a:	4b50      	ldr	r3, [pc, #320]	; (800607c <computeRC+0x538>)
 8005f3c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f40:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005f44:	dd12      	ble.n	8005f6c <computeRC+0x428>
 8005f46:	4b4d      	ldr	r3, [pc, #308]	; (800607c <computeRC+0x538>)
 8005f48:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f4c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005f50:	22b4      	movs	r2, #180	; 0xb4
 8005f52:	fb02 f303 	mul.w	r3, r2, r3
 8005f56:	4a4a      	ldr	r2, [pc, #296]	; (8006080 <computeRC+0x53c>)
 8005f58:	fb82 1203 	smull	r1, r2, r2, r3
 8005f5c:	1212      	asrs	r2, r2, #8
 8005f5e:	17db      	asrs	r3, r3, #31
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	335a      	adds	r3, #90	; 0x5a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	b21b      	sxth	r3, r3
 8005f6a:	e019      	b.n	8005fa0 <computeRC+0x45c>
 8005f6c:	4b43      	ldr	r3, [pc, #268]	; (800607c <computeRC+0x538>)
 8005f6e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f72:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005f76:	da12      	bge.n	8005f9e <computeRC+0x45a>
 8005f78:	4b40      	ldr	r3, [pc, #256]	; (800607c <computeRC+0x538>)
 8005f7a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f7e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005f82:	22b4      	movs	r2, #180	; 0xb4
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	4a3d      	ldr	r2, [pc, #244]	; (8006080 <computeRC+0x53c>)
 8005f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8005f8e:	1212      	asrs	r2, r2, #8
 8005f90:	17db      	asrs	r3, r3, #31
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	335a      	adds	r3, #90	; 0x5a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	b21b      	sxth	r3, r3
 8005f9c:	e000      	b.n	8005fa0 <computeRC+0x45c>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	4a36      	ldr	r2, [pc, #216]	; (800607c <computeRC+0x538>)
 8005fa2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
	}
	RC.rcCommand[THROTTLE] = map(zofs(RC.rcADC[THROTTLE], 1100, 20), 1100, 1900, 2250, 4000);//2250/4000
 8005fa6:	4b35      	ldr	r3, [pc, #212]	; (800607c <computeRC+0x538>)
 8005fa8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005fac:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8005fb0:	dd14      	ble.n	8005fdc <computeRC+0x498>
 8005fb2:	4b32      	ldr	r3, [pc, #200]	; (800607c <computeRC+0x538>)
 8005fb4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005fb8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005fbc:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8005fc0:	fb02 f303 	mul.w	r3, r2, r3
 8005fc4:	4a2e      	ldr	r2, [pc, #184]	; (8006080 <computeRC+0x53c>)
 8005fc6:	fb82 1203 	smull	r1, r2, r2, r3
 8005fca:	1212      	asrs	r2, r2, #8
 8005fcc:	17db      	asrs	r3, r3, #31
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f603 03ca 	addw	r3, r3, #2250	; 0x8ca
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	b21b      	sxth	r3, r3
 8005fda:	e01c      	b.n	8006016 <computeRC+0x4d2>
 8005fdc:	4b27      	ldr	r3, [pc, #156]	; (800607c <computeRC+0x538>)
 8005fde:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005fe2:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8005fe6:	da14      	bge.n	8006012 <computeRC+0x4ce>
 8005fe8:	4b24      	ldr	r3, [pc, #144]	; (800607c <computeRC+0x538>)
 8005fea:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005fee:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005ff2:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8005ff6:	fb02 f303 	mul.w	r3, r2, r3
 8005ffa:	4a21      	ldr	r2, [pc, #132]	; (8006080 <computeRC+0x53c>)
 8005ffc:	fb82 1203 	smull	r1, r2, r2, r3
 8006000:	1212      	asrs	r2, r2, #8
 8006002:	17db      	asrs	r3, r3, #31
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	b29b      	uxth	r3, r3
 8006008:	f603 03ca 	addw	r3, r3, #2250	; 0x8ca
 800600c:	b29b      	uxth	r3, r3
 800600e:	b21b      	sxth	r3, r3
 8006010:	e001      	b.n	8006016 <computeRC+0x4d2>
 8006012:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8006016:	4a19      	ldr	r2, [pc, #100]	; (800607c <computeRC+0x538>)
 8006018:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
	RC.rcCommand[GEAR]     = RC.rcADC[GEAR];
 800601c:	4b17      	ldr	r3, [pc, #92]	; (800607c <computeRC+0x538>)
 800601e:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8006022:	4b16      	ldr	r3, [pc, #88]	; (800607c <computeRC+0x538>)
 8006024:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	RC.rcCommand[AUX1]     = RC.rcADC[AUX1];
 8006028:	4b14      	ldr	r3, [pc, #80]	; (800607c <computeRC+0x538>)
 800602a:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 800602e:	4b13      	ldr	r3, [pc, #76]	; (800607c <computeRC+0x538>)
 8006030:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	if(RC.rcCommand[GEAR] > 1500 && !f.HEADFREE_MODE)
 8006034:	4b11      	ldr	r3, [pc, #68]	; (800607c <computeRC+0x538>)
 8006036:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800603a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800603e:	4293      	cmp	r3, r2
 8006040:	dd07      	ble.n	8006052 <computeRC+0x50e>
 8006042:	4b0d      	ldr	r3, [pc, #52]	; (8006078 <computeRC+0x534>)
 8006044:	7b9b      	ldrb	r3, [r3, #14]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d103      	bne.n	8006052 <computeRC+0x50e>
	{
		f.HEADFREE_MODE = 1;
 800604a:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <computeRC+0x534>)
 800604c:	2201      	movs	r2, #1
 800604e:	739a      	strb	r2, [r3, #14]
	}else if(RC.rcCommand[GEAR] < 1500 && f.HEADFREE_MODE)
	{
		f.HEADFREE_MODE = 0;
	}
}
 8006050:	e00d      	b.n	800606e <computeRC+0x52a>
	}else if(RC.rcCommand[GEAR] < 1500 && f.HEADFREE_MODE)
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <computeRC+0x538>)
 8006054:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8006058:	f240 52db 	movw	r2, #1499	; 0x5db
 800605c:	4293      	cmp	r3, r2
 800605e:	dc06      	bgt.n	800606e <computeRC+0x52a>
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <computeRC+0x534>)
 8006062:	7b9b      	ldrb	r3, [r3, #14]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <computeRC+0x52a>
		f.HEADFREE_MODE = 0;
 8006068:	4b03      	ldr	r3, [pc, #12]	; (8006078 <computeRC+0x534>)
 800606a:	2200      	movs	r2, #0
 800606c:	739a      	strb	r2, [r3, #14]
}
 800606e:	bf00      	nop
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000ed4 	.word	0x20000ed4
 800607c:	20000d40 	.word	0x20000d40
 8006080:	51eb851f 	.word	0x51eb851f

08006084 <QueueCreate>:
{

}

bool QueueCreate(Queue_t *Q, uint8_t *Q_buf, uint32_t length)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]

	Q->buffer = Q_buf;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	601a      	str	r2, [r3, #0]
	Q->head = 0;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	711a      	strb	r2, [r3, #4]
	Q->tail = 0;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	715a      	strb	r2, [r3, #5]
	Q->size = MAX_SIZE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	22ff      	movs	r2, #255	; 0xff
 80060aa:	719a      	strb	r2, [r3, #6]
	Q->temp = 0;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	71da      	strb	r2, [r3, #7]
	Q->cnt = 0;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	609a      	str	r2, [r3, #8]

	return ret;
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <Q_empty>:
{
	if((Q->head+1)%MAX_SIZE == Q->tail){
	   return true;
	} return false;
}
uint8_t Q_empty(Queue_t *Q){
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	if(Q->head == Q->tail){
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	791b      	ldrb	r3, [r3, #4]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	795b      	ldrb	r3, [r3, #5]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	429a      	cmp	r2, r3
 80060da:	d101      	bne.n	80060e0 <Q_empty+0x1c>
		return true;
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <Q_empty+0x1e>
	} return false;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr

080060ec <Q_read>:
		Q->head = (Q->head+1) % MAX_SIZE;
	}
	return true;
}

bool Q_read(Queue_t *Q, uint8_t *p_data, uint32_t length){
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
	if(Q_empty(Q)){
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff ffe3 	bl	80060c4 <Q_empty>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <Q_read+0x1c>
		return false;
 8006104:	2300      	movs	r3, #0
 8006106:	e028      	b.n	800615a <Q_read+0x6e>
	}
	for (int i=0; i<length; i++)
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	e020      	b.n	8006150 <Q_read+0x64>
	{
		p_data[i] = Q->buffer[Q->tail];
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	7952      	ldrb	r2, [r2, #5]
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	441a      	add	r2, r3
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	440b      	add	r3, r1
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
		Q->tail = (Q->tail+1) % MAX_SIZE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	795b      	ldrb	r3, [r3, #5]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <Q_read+0x78>)
 8006130:	fb83 1302 	smull	r1, r3, r3, r2
 8006134:	4413      	add	r3, r2
 8006136:	11d9      	asrs	r1, r3, #7
 8006138:	17d3      	asrs	r3, r2, #31
 800613a:	1ac9      	subs	r1, r1, r3
 800613c:	460b      	mov	r3, r1
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	1a5b      	subs	r3, r3, r1
 8006142:	1ad1      	subs	r1, r2, r3
 8006144:	b2ca      	uxtb	r2, r1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	715a      	strb	r2, [r3, #5]
	for (int i=0; i<length; i++)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	3301      	adds	r3, #1
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	d8da      	bhi.n	800610e <Q_read+0x22>
	}

	return true;
 8006158:	2301      	movs	r3, #1
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	80808081 	.word	0x80808081

08006168 <QueueAvailable>:

uint32_t QueueAvailable(Queue_t *Q)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t length;

  length = (Q->head - Q->tail) % Q->size;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	791b      	ldrb	r3, [r3, #4]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	795b      	ldrb	r3, [r3, #5]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	7992      	ldrb	r2, [r2, #6]
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	fb93 f1f2 	sdiv	r1, r3, r2
 800618a:	fb02 f201 	mul.w	r2, r2, r1
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  return length;
 8006192:	68fb      	ldr	r3, [r7, #12]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr
	...

080061a0 <getMres>:

// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
uint8_t Mmode = M_100HZ;

void getMres()
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
	switch (Mscale)
 80061a4:	4b09      	ldr	r3, [pc, #36]	; (80061cc <getMres+0x2c>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <getMres+0x12>
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d004      	beq.n	80061ba <getMres+0x1a>
			break;
		case MFS_16BITS:
			mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
			break;
	}
}
 80061b0:	e007      	b.n	80061c2 <getMres+0x22>
			mRes = 10.0f * 4912.0f / 8190.0f; // Proper scale to return milliGauss
 80061b2:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <getMres+0x30>)
 80061b4:	4a07      	ldr	r2, [pc, #28]	; (80061d4 <getMres+0x34>)
 80061b6:	601a      	str	r2, [r3, #0]
			break;
 80061b8:	e003      	b.n	80061c2 <getMres+0x22>
			mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
 80061ba:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <getMres+0x30>)
 80061bc:	4a06      	ldr	r2, [pc, #24]	; (80061d8 <getMres+0x38>)
 80061be:	601a      	str	r2, [r3, #0]
			break;
 80061c0:	bf00      	nop
}
 80061c2:	bf00      	nop
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	20000010 	.word	0x20000010
 80061d0:	20000ad8 	.word	0x20000ad8
 80061d4:	40bfebff 	.word	0x40bfebff
 80061d8:	3fbfebff 	.word	0x3fbfebff

080061dc <getGres>:

void getGres()
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
	switch (Gscale)
 80061e0:	4b11      	ldr	r3, [pc, #68]	; (8006228 <getGres+0x4c>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d81b      	bhi.n	8006220 <getGres+0x44>
 80061e8:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <getGres+0x14>)
 80061ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ee:	bf00      	nop
 80061f0:	08006201 	.word	0x08006201
 80061f4:	08006209 	.word	0x08006209
 80061f8:	08006211 	.word	0x08006211
 80061fc:	08006219 	.word	0x08006219
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS (11).
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
		// 2-bit value:
		case GFS_250DPS:
			gRes = 250.0f / 32768.0f;
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <getGres+0x50>)
 8006202:	4a0b      	ldr	r2, [pc, #44]	; (8006230 <getGres+0x54>)
 8006204:	601a      	str	r2, [r3, #0]
			break;
 8006206:	e00b      	b.n	8006220 <getGres+0x44>
		case GFS_500DPS:
			gRes = 500.0f / 32768.0f;
 8006208:	4b08      	ldr	r3, [pc, #32]	; (800622c <getGres+0x50>)
 800620a:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <getGres+0x58>)
 800620c:	601a      	str	r2, [r3, #0]
			break;
 800620e:	e007      	b.n	8006220 <getGres+0x44>
		case GFS_1000DPS:
			gRes = 1000.0f / 32768.0f;
 8006210:	4b06      	ldr	r3, [pc, #24]	; (800622c <getGres+0x50>)
 8006212:	4a09      	ldr	r2, [pc, #36]	; (8006238 <getGres+0x5c>)
 8006214:	601a      	str	r2, [r3, #0]
			break;
 8006216:	e003      	b.n	8006220 <getGres+0x44>
		case GFS_2000DPS:
			gRes = 2000.0f / 32768.0f;
 8006218:	4b04      	ldr	r3, [pc, #16]	; (800622c <getGres+0x50>)
 800621a:	4a08      	ldr	r2, [pc, #32]	; (800623c <getGres+0x60>)
 800621c:	601a      	str	r2, [r3, #0]
			break;
 800621e:	bf00      	nop
	}
}
 8006220:	bf00      	nop
 8006222:	46bd      	mov	sp, r7
 8006224:	bc80      	pop	{r7}
 8006226:	4770      	bx	lr
 8006228:	2000000e 	.word	0x2000000e
 800622c:	20000ad4 	.word	0x20000ad4
 8006230:	3bfa0000 	.word	0x3bfa0000
 8006234:	3c7a0000 	.word	0x3c7a0000
 8006238:	3cfa0000 	.word	0x3cfa0000
 800623c:	3d7a0000 	.word	0x3d7a0000

08006240 <getAres>:

void getAres()
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
	switch (Ascale)
 8006244:	4b13      	ldr	r3, [pc, #76]	; (8006294 <getAres+0x54>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b03      	cmp	r3, #3
 800624a:	d81f      	bhi.n	800628c <getAres+0x4c>
 800624c:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <getAres+0x14>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	08006265 	.word	0x08006265
 8006258:	0800626f 	.word	0x0800626f
 800625c:	08006279 	.word	0x08006279
 8006260:	08006283 	.word	0x08006283
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
		// 2-bit value:
		case AFS_2G:
			aRes = 2.0f / 32768.0f;
 8006264:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <getAres+0x58>)
 8006266:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800626a:	601a      	str	r2, [r3, #0]
			break;
 800626c:	e00e      	b.n	800628c <getAres+0x4c>
		case AFS_4G:
			aRes = 4.0f / 32768.0f;
 800626e:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <getAres+0x58>)
 8006270:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8006274:	601a      	str	r2, [r3, #0]
			break;
 8006276:	e009      	b.n	800628c <getAres+0x4c>
		case AFS_8G:
			aRes = 8.0f / 32768.0f;
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <getAres+0x58>)
 800627a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800627e:	601a      	str	r2, [r3, #0]
			break;
 8006280:	e004      	b.n	800628c <getAres+0x4c>
		case AFS_16G:
			aRes = 16.0f / 32768.0f;
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <getAres+0x58>)
 8006284:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8006288:	601a      	str	r2, [r3, #0]
			break;
 800628a:	bf00      	nop
	}
}
 800628c:	bf00      	nop
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr
 8006294:	2000000f 	.word	0x2000000f
 8006298:	20000ac8 	.word	0x20000ac8

0800629c <MPU9250_Init>:

bool MPU9250_Init()
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af02      	add	r7, sp, #8
	bool ret = true;
 80062a2:	2301      	movs	r3, #1
 80062a4:	71fb      	strb	r3, [r7, #7]

	uint8_t whoami = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	71bb      	strb	r3, [r7, #6]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 80062aa:	2301      	movs	r3, #1
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	4b73      	ldr	r3, [pc, #460]	; (800647c <MPU9250_Init+0x1e0>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	2175      	movs	r1, #117	; 0x75
 80062b4:	20d2      	movs	r0, #210	; 0xd2
 80062b6:	f004 ffcd 	bl	800b254 <I2C_ByteRead>
	whoami = rawADC[0];
 80062ba:	4b70      	ldr	r3, [pc, #448]	; (800647c <MPU9250_Init+0x1e0>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	71bb      	strb	r3, [r7, #6]
#ifdef debug
	logPrintf("I AM 0x%x\r\n", whoami);
	logPrintf("I SHOULD BE 0x71\r\n");
#endif
	if(whoami == 0x71)
 80062c0:	79bb      	ldrb	r3, [r7, #6]
 80062c2:	2b71      	cmp	r3, #113	; 0x71
 80062c4:	f040 80d0 	bne.w	8006468 <MPU9250_Init+0x1cc>
	{
#ifdef debug
		logPrintf("MPU-9250 Init Start (9-DOF 16-bit motion sensor)\r\nMPU-9250 SelfTest Start\r\n");
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 80062c8:	2380      	movs	r3, #128	; 0x80
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2308      	movs	r3, #8
 80062ce:	2207      	movs	r2, #7
 80062d0:	216b      	movs	r1, #107	; 0x6b
 80062d2:	20d2      	movs	r0, #210	; 0xd2
 80062d4:	f004 ff36 	bl	800b144 <I2C_ByteWrite>
		HAL_Delay(50);
 80062d8:	2032      	movs	r0, #50	; 0x32
 80062da:	f006 f945 	bl	800c568 <HAL_Delay>
		MPU9250SelfTest(SelfTest);
 80062de:	4868      	ldr	r0, [pc, #416]	; (8006480 <MPU9250_Init+0x1e4>)
 80062e0:	f001 f972 	bl	80075c8 <MPU9250SelfTest>
		logPrintf(" z-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[5]);
		HAL_Delay(100); // for stability

		logPrintf("MPU-9250 Calibration Start\r\n");
#endif
		calibrateMPU9250(gyroBias, accBias);
 80062e4:	4967      	ldr	r1, [pc, #412]	; (8006484 <MPU9250_Init+0x1e8>)
 80062e6:	4868      	ldr	r0, [pc, #416]	; (8006488 <MPU9250_Init+0x1ec>)
 80062e8:	f000 fe08 	bl	8006efc <calibrateMPU9250>
		logPrintf(" %.2f   %.2f   %.2f o/s\r\n", gyroBias[0], gyroBias[1], gyroBias[2]);
		HAL_Delay(100); // for stability
#endif

		// ACC Gyro_Init
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 80062ec:	2300      	movs	r3, #0
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2308      	movs	r3, #8
 80062f2:	2207      	movs	r2, #7
 80062f4:	216b      	movs	r1, #107	; 0x6b
 80062f6:	20d2      	movs	r0, #210	; 0xd2
 80062f8:	f004 ff24 	bl	800b144 <I2C_ByteWrite>
		HAL_Delay(100); // for stability
 80062fc:	2064      	movs	r0, #100	; 0x64
 80062fe:	f006 f933 	bl	800c568 <HAL_Delay>
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001;
 8006302:	2301      	movs	r3, #1
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	2308      	movs	r3, #8
 8006308:	2207      	movs	r2, #7
 800630a:	216b      	movs	r1, #107	; 0x6b
 800630c:	20d2      	movs	r0, #210	; 0xd2
 800630e:	f004 ff19 	bl	800b144 <I2C_ByteWrite>
		HAL_Delay(200); // for stability
 8006312:	20c8      	movs	r0, #200	; 0xc8
 8006314:	f006 f928 	bl	800c568 <HAL_Delay>
		//I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 5, 6, 0x00);
		//HAL_Delay(100);
		//I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 4, 2, MPU9250_GYRO_FS_2000);
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, MPU9250_DLPF_BW_42); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 8006318:	2303      	movs	r3, #3
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	2308      	movs	r3, #8
 800631e:	2207      	movs	r2, #7
 8006320:	211a      	movs	r1, #26
 8006322:	20d2      	movs	r0, #210	; 0xd2
 8006324:	f004 ff0e 	bl	800b144 <I2C_ByteWrite>
		HAL_Delay(100);
 8006328:	2064      	movs	r0, #100	; 0x64
 800632a:	f006 f91d 	bl	800c568 <HAL_Delay>

		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x04);  //0x00 SMPLRT_DIV    -- SMPLRT_DIV = 0  Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
 800632e:	2304      	movs	r3, #4
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	2308      	movs	r3, #8
 8006334:	2207      	movs	r2, #7
 8006336:	2119      	movs	r1, #25
 8006338:	20d2      	movs	r0, #210	; 0xd2
 800633a:	f004 ff03 	bl	800b144 <I2C_ByteWrite>
		HAL_Delay(100);
 800633e:	2064      	movs	r0, #100	; 0x64
 8006340:	f006 f912 	bl	800c568 <HAL_Delay>

		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 1, rawADC, 1);
 8006344:	2301      	movs	r3, #1
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	4b4c      	ldr	r3, [pc, #304]	; (800647c <MPU9250_Init+0x1e0>)
 800634a:	2201      	movs	r2, #1
 800634c:	211b      	movs	r1, #27
 800634e:	20d2      	movs	r0, #210	; 0xd2
 8006350:	f004 ff80 	bl	800b254 <I2C_ByteRead>
		uint8_t c = rawADC[0];
 8006354:	4b49      	ldr	r3, [pc, #292]	; (800647c <MPU9250_Init+0x1e0>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	717b      	strb	r3, [r7, #5]
		// c = c & ~0xE0; // Clear self-test bits [7:5]
		c = c & ~0x02; // Clear Fchoice bits [1:0]
 800635a:	797b      	ldrb	r3, [r7, #5]
 800635c:	f023 0302 	bic.w	r3, r3, #2
 8006360:	717b      	strb	r3, [r7, #5]
		c = c & ~0x18; // Clear AFS bits [4:3]
 8006362:	797b      	ldrb	r3, [r7, #5]
 8006364:	f023 0318 	bic.w	r3, r3, #24
 8006368:	717b      	strb	r3, [r7, #5]
		c = c | Gscale << 3; // Set full scale range for the gyro
 800636a:	4b48      	ldr	r3, [pc, #288]	; (800648c <MPU9250_Init+0x1f0>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	b25a      	sxtb	r2, r3
 8006372:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006376:	4313      	orrs	r3, r2
 8006378:	b25b      	sxtb	r3, r3
 800637a:	717b      	strb	r3, [r7, #5]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, rawADC[0] & ~0x18); // Clear AFS bits [4:3]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, rawADC[0] | (MPU9250_GYRO_FS_250<<3)); //GYRO_CONFIG   -- FS_SEL = 2: Full scale set to 1000 deg/sec
#ifdef debug
		logPrintf(" GYRO : %d \r\n", c);
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, c);
 800637c:	797b      	ldrb	r3, [r7, #5]
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	2308      	movs	r3, #8
 8006382:	2207      	movs	r2, #7
 8006384:	211b      	movs	r1, #27
 8006386:	20d2      	movs	r0, #210	; 0xd2
 8006388:	f004 fedc 	bl	800b144 <I2C_ByteWrite>
		//	  HAL_Delay(100);

		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 1, rawADC, 1);
 800638c:	2301      	movs	r3, #1
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	4b3a      	ldr	r3, [pc, #232]	; (800647c <MPU9250_Init+0x1e0>)
 8006392:	2201      	movs	r2, #1
 8006394:	211c      	movs	r1, #28
 8006396:	20d2      	movs	r0, #210	; 0xd2
 8006398:	f004 ff5c 	bl	800b254 <I2C_ByteRead>
		c = rawADC[0];
 800639c:	4b37      	ldr	r3, [pc, #220]	; (800647c <MPU9250_Init+0x1e0>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	717b      	strb	r3, [r7, #5]
		// c = c & ~0xE0; // Clear self-test bits [7:5]
		c = c & ~0x18;  // Clear AFS bits [4:3]
 80063a2:	797b      	ldrb	r3, [r7, #5]
 80063a4:	f023 0318 	bic.w	r3, r3, #24
 80063a8:	717b      	strb	r3, [r7, #5]
		c = c | Ascale << 3; // Set full scale range for the accelerometer
 80063aa:	4b39      	ldr	r3, [pc, #228]	; (8006490 <MPU9250_Init+0x1f4>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	b25a      	sxtb	r2, r3
 80063b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	b25b      	sxtb	r3, r3
 80063ba:	717b      	strb	r3, [r7, #5]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, rawADC[0] & ~0x18); // Clear AFS bits [4:3]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, rawADC[0] | (MPU9250_ACCEL_FS_2<<3)); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
#ifdef debug
		logPrintf(" ACEL : %d \r\n", c);
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, c);
 80063bc:	797b      	ldrb	r3, [r7, #5]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	2308      	movs	r3, #8
 80063c2:	2207      	movs	r2, #7
 80063c4:	211c      	movs	r1, #28
 80063c6:	20d2      	movs	r0, #210	; 0xd2
 80063c8:	f004 febc 	bl	800b144 <I2C_ByteWrite>
		//	  HAL_Delay(100);

		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 1, rawADC, 1);
 80063cc:	2301      	movs	r3, #1
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	4b2a      	ldr	r3, [pc, #168]	; (800647c <MPU9250_Init+0x1e0>)
 80063d2:	2201      	movs	r2, #1
 80063d4:	211d      	movs	r1, #29
 80063d6:	20d2      	movs	r0, #210	; 0xd2
 80063d8:	f004 ff3c 	bl	800b254 <I2C_ByteRead>
		c = rawADC[0];
 80063dc:	4b27      	ldr	r3, [pc, #156]	; (800647c <MPU9250_Init+0x1e0>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	717b      	strb	r3, [r7, #5]
		c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80063e2:	797b      	ldrb	r3, [r7, #5]
 80063e4:	f023 030f 	bic.w	r3, r3, #15
 80063e8:	717b      	strb	r3, [r7, #5]
		c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80063ea:	797b      	ldrb	r3, [r7, #5]
 80063ec:	f043 0303 	orr.w	r3, r3, #3
 80063f0:	717b      	strb	r3, [r7, #5]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, rawADC[0] & ~0x0F);// Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, rawADC[0] | 0x03);// Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
#ifdef debug
		logPrintf(" ACEL2 : %d \r\n", c);
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, c);
 80063f2:	797b      	ldrb	r3, [r7, #5]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	2308      	movs	r3, #8
 80063f8:	2207      	movs	r2, #7
 80063fa:	211d      	movs	r1, #29
 80063fc:	20d2      	movs	r0, #210	; 0xd2
 80063fe:	f004 fea1 	bl	800b144 <I2C_ByteWrite>
		//		HAL_Delay(100);
		//note: something seems to be wrong in the spec here. With AFS=2 1G = 4096 but according to my measurement: 1G=2048 (and 2048/8 = 256)
		//confirmed here: http://www.multiwii.com/forum/viewtopic.php?f=8&t=1080&start=10#p7480

		// I2C_BitWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_PIN_CFG, MPU9250_INTCFG_I2C_BYPASS_EN_BIT, ENABLE);  // enable I2C bypass for AUX I2C
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_PIN_CFG, 7, 8, 0x22);
 8006402:	2322      	movs	r3, #34	; 0x22
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	2308      	movs	r3, #8
 8006408:	2207      	movs	r2, #7
 800640a:	2137      	movs	r1, #55	; 0x37
 800640c:	20d2      	movs	r0, #210	; 0xd2
 800640e:	f004 fe99 	bl	800b144 <I2C_ByteWrite>
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x01);
 8006412:	2301      	movs	r3, #1
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	2308      	movs	r3, #8
 8006418:	2207      	movs	r2, #7
 800641a:	2138      	movs	r1, #56	; 0x38
 800641c:	20d2      	movs	r0, #210	; 0xd2
 800641e:	f004 fe91 	bl	800b144 <I2C_ByteWrite>

		//MPU9150_I2C_BitWrite(MPU9150_Address, MPU6050_RA_INT_PIN_CFG, MPU6050_INTERRUPT_DATA_RDY_BIT, ENABLE);
		//MPU9150_I2C_BitWrite(MPU9150_Address, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, ENABLE);
		HAL_Delay(100); // for stability
 8006422:	2064      	movs	r0, #100	; 0x64
 8006424:	f006 f8a0 	bl	800c568 <HAL_Delay>

		//Compass_Init
#ifdef debug
		logPrintf("AK8963 Init Start!\r\n");
#endif
		I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, WHO_AM_I_AK8963, 1, rawADC, 1);
 8006428:	2301      	movs	r3, #1
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	4b13      	ldr	r3, [pc, #76]	; (800647c <MPU9250_Init+0x1e0>)
 800642e:	2201      	movs	r2, #1
 8006430:	2100      	movs	r1, #0
 8006432:	2018      	movs	r0, #24
 8006434:	f004 ff0e 	bl	800b254 <I2C_ByteRead>
		whoami = rawADC[0];
 8006438:	4b10      	ldr	r3, [pc, #64]	; (800647c <MPU9250_Init+0x1e0>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	71bb      	strb	r3, [r7, #6]
		logPrintf("I AM 0x%x\r\n", whoami);
		logPrintf("I SHOULD BE 0x48\r\n");
		logPrintf("AK8963 Init (Compass sensor)\r\n");
		HAL_Delay(100); // for stability
#endif
		initAK8963(magCalibration);
 800643e:	4815      	ldr	r0, [pc, #84]	; (8006494 <MPU9250_Init+0x1f8>)
 8006440:	f001 f830 	bl	80074a4 <initAK8963>
		HAL_Delay(100); // for stability
 8006444:	2064      	movs	r0, #100	; 0x64
 8006446:	f006 f88f 	bl	800c568 <HAL_Delay>

		getAres();
 800644a:	f7ff fef9 	bl	8006240 <getAres>
		getGres();
 800644e:	f7ff fec5 	bl	80061dc <getGres>
		getMres();
 8006452:	f7ff fea5 	bl	80061a0 <getMres>
 8006456:	e00b      	b.n	8006470 <MPU9250_Init+0x1d4>
		logPrintf("Could not connect to MPU9250: %#x\r\n", whoami);
		logPrintf("Communication failed, abort!\r\n");
#endif
		while (Error.error !=0)
		{
			Error.error = 1;
 8006458:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <MPU9250_Init+0x1fc>)
 800645a:	2201      	movs	r2, #1
 800645c:	701a      	strb	r2, [r3, #0]
			error_signal();
 800645e:	f7fd fc81 	bl	8003d64 <error_signal>
			HAL_Delay(4);
 8006462:	2004      	movs	r0, #4
 8006464:	f006 f880 	bl	800c568 <HAL_Delay>
		while (Error.error !=0)
 8006468:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <MPU9250_Init+0x1fc>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f3      	bne.n	8006458 <MPU9250_Init+0x1bc>
		}
	}
	return ret;
 8006470:	79fb      	ldrb	r3, [r7, #7]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000f0c 	.word	0x20000f0c
 8006480:	20000350 	.word	0x20000350
 8006484:	20000374 	.word	0x20000374
 8006488:	20000368 	.word	0x20000368
 800648c:	2000000e 	.word	0x2000000e
 8006490:	2000000f 	.word	0x2000000f
 8006494:	20000338 	.word	0x20000338
 8006498:	20000acc 	.word	0x20000acc

0800649c <Calibrate_gyro>:

void Calibrate_gyro(void)
{
 800649c:	b5b0      	push	{r4, r5, r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
	int cal_int = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
	uint8_t axis = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	70fb      	strb	r3, [r7, #3]

	for (cal_int = 0; cal_int < 2000; cal_int ++)
 80064aa:	2300      	movs	r3, #0
 80064ac:	607b      	str	r3, [r7, #4]
 80064ae:	e03d      	b.n	800652c <Calibrate_gyro+0x90>
	{
		if (cal_int % 125 == 0)
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	4b31      	ldr	r3, [pc, #196]	; (8006578 <Calibrate_gyro+0xdc>)
 80064b4:	fb83 2301 	smull	r2, r3, r3, r1
 80064b8:	10da      	asrs	r2, r3, #3
 80064ba:	17cb      	asrs	r3, r1, #31
 80064bc:	1ad2      	subs	r2, r2, r3
 80064be:	4613      	mov	r3, r2
 80064c0:	015b      	lsls	r3, r3, #5
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	1aca      	subs	r2, r1, r3
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	d102      	bne.n	80064d4 <Calibrate_gyro+0x38>
		{
			ledToggle(RGB_GREEN);  //Change the led status to indicate calibration.
 80064ce:	2003      	movs	r0, #3
 80064d0:	f005 f888 	bl	800b5e4 <ledToggle>
#ifdef debug
			logPrintf(".");
#endif
		}
		Gyro_getADC();
 80064d4:	f000 f856 	bl	8006584 <Gyro_getADC>
		Mag_getADC();
 80064d8:	f000 fa0e 	bl	80068f8 <Mag_getADC>
		for(axis=0; axis<3; axis++)
 80064dc:	2300      	movs	r3, #0
 80064de:	70fb      	strb	r3, [r7, #3]
 80064e0:	e01e      	b.n	8006520 <Calibrate_gyro+0x84>
		{
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 80064e2:	78fb      	ldrb	r3, [r7, #3]
 80064e4:	4a25      	ldr	r2, [pc, #148]	; (800657c <Calibrate_gyro+0xe0>)
 80064e6:	331c      	adds	r3, #28
 80064e8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	4a23      	ldr	r2, [pc, #140]	; (800657c <Calibrate_gyro+0xe0>)
 80064f0:	3304      	adds	r3, #4
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4413      	add	r3, r2
 80064f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fa fc08 	bl	8000d10 <__aeabi_i2f>
 8006500:	4603      	mov	r3, r0
 8006502:	78fc      	ldrb	r4, [r7, #3]
 8006504:	4619      	mov	r1, r3
 8006506:	4628      	mov	r0, r5
 8006508:	f7fa fb4e 	bl	8000ba8 <__addsf3>
 800650c:	4603      	mov	r3, r0
 800650e:	4619      	mov	r1, r3
 8006510:	4a1a      	ldr	r2, [pc, #104]	; (800657c <Calibrate_gyro+0xe0>)
 8006512:	f104 031c 	add.w	r3, r4, #28
 8006516:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(axis=0; axis<3; axis++)
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	3301      	adds	r3, #1
 800651e:	70fb      	strb	r3, [r7, #3]
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d9dd      	bls.n	80064e2 <Calibrate_gyro+0x46>
	for (cal_int = 0; cal_int < 2000; cal_int ++)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3301      	adds	r3, #1
 800652a:	607b      	str	r3, [r7, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006532:	dbbd      	blt.n	80064b0 <Calibrate_gyro+0x14>
		}
	}
	for(axis=0; axis<3; axis++)
 8006534:	2300      	movs	r3, #0
 8006536:	70fb      	strb	r3, [r7, #3]
 8006538:	e013      	b.n	8006562 <Calibrate_gyro+0xc6>
	{
		imu.gyro_cal[axis] /= 2000.0f;
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	4a0f      	ldr	r2, [pc, #60]	; (800657c <Calibrate_gyro+0xe0>)
 800653e:	331c      	adds	r3, #28
 8006540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006544:	78fc      	ldrb	r4, [r7, #3]
 8006546:	490e      	ldr	r1, [pc, #56]	; (8006580 <Calibrate_gyro+0xe4>)
 8006548:	4618      	mov	r0, r3
 800654a:	f7fa fce9 	bl	8000f20 <__aeabi_fdiv>
 800654e:	4603      	mov	r3, r0
 8006550:	4619      	mov	r1, r3
 8006552:	4a0a      	ldr	r2, [pc, #40]	; (800657c <Calibrate_gyro+0xe0>)
 8006554:	f104 031c 	add.w	r3, r4, #28
 8006558:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(axis=0; axis<3; axis++)
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	3301      	adds	r3, #1
 8006560:	70fb      	strb	r3, [r7, #3]
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d9e8      	bls.n	800653a <Calibrate_gyro+0x9e>
	}
	HAL_Delay(100);
 8006568:	2064      	movs	r0, #100	; 0x64
 800656a:	f005 fffd 	bl	800c568 <HAL_Delay>
}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bdb0      	pop	{r4, r5, r7, pc}
 8006576:	bf00      	nop
 8006578:	10624dd3 	.word	0x10624dd3
 800657c:	20000e20 	.word	0x20000e20
 8006580:	44fa0000 	.word	0x44fa0000

08006584 <Gyro_getADC>:

void Gyro_getADC(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af02      	add	r7, sp, #8
	int16_t x = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	80fb      	strh	r3, [r7, #6]
	int16_t y = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	80bb      	strh	r3, [r7, #4]
	int16_t z = 0;
 8006592:	2300      	movs	r3, #0
 8006594:	807b      	strh	r3, [r7, #2]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 8006596:	2306      	movs	r3, #6
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	4b18      	ldr	r3, [pc, #96]	; (80065fc <Gyro_getADC+0x78>)
 800659c:	2201      	movs	r2, #1
 800659e:	2143      	movs	r1, #67	; 0x43
 80065a0:	20d2      	movs	r0, #210	; 0xd2
 80065a2:	f004 fe57 	bl	800b254 <I2C_ByteRead>
	/* Get Angular rate */
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <Gyro_getADC+0x78>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	021b      	lsls	r3, r3, #8
 80065ac:	b21a      	sxth	r2, r3
 80065ae:	4b13      	ldr	r3, [pc, #76]	; (80065fc <Gyro_getADC+0x78>)
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	b21b      	sxth	r3, r3
 80065b4:	4313      	orrs	r3, r2
 80065b6:	80fb      	strh	r3, [r7, #6]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 80065b8:	4b10      	ldr	r3, [pc, #64]	; (80065fc <Gyro_getADC+0x78>)
 80065ba:	789b      	ldrb	r3, [r3, #2]
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	b21a      	sxth	r2, r3
 80065c0:	4b0e      	ldr	r3, [pc, #56]	; (80065fc <Gyro_getADC+0x78>)
 80065c2:	78db      	ldrb	r3, [r3, #3]
 80065c4:	b21b      	sxth	r3, r3
 80065c6:	4313      	orrs	r3, r2
 80065c8:	80bb      	strh	r3, [r7, #4]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 80065ca:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <Gyro_getADC+0x78>)
 80065cc:	791b      	ldrb	r3, [r3, #4]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	b21a      	sxth	r2, r3
 80065d2:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <Gyro_getADC+0x78>)
 80065d4:	795b      	ldrb	r3, [r3, #5]
 80065d6:	b21b      	sxth	r3, r3
 80065d8:	4313      	orrs	r3, r2
 80065da:	807b      	strh	r3, [r7, #2]
	GYRO_ORIENTATION(x, y, z);
 80065dc:	4a08      	ldr	r2, [pc, #32]	; (8006600 <Gyro_getADC+0x7c>)
 80065de:	88fb      	ldrh	r3, [r7, #6]
 80065e0:	81d3      	strh	r3, [r2, #14]
 80065e2:	4a07      	ldr	r2, [pc, #28]	; (8006600 <Gyro_getADC+0x7c>)
 80065e4:	88bb      	ldrh	r3, [r7, #4]
 80065e6:	8213      	strh	r3, [r2, #16]
 80065e8:	4a05      	ldr	r2, [pc, #20]	; (8006600 <Gyro_getADC+0x7c>)
 80065ea:	887b      	ldrh	r3, [r7, #2]
 80065ec:	8253      	strh	r3, [r2, #18]
	GYRO_Common();
 80065ee:	f000 f809 	bl	8006604 <GYRO_Common>
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000f0c 	.word	0x20000f0c
 8006600:	20000e20 	.word	0x20000e20

08006604 <GYRO_Common>:

void GYRO_Common(void)
{
 8006604:	b590      	push	{r4, r7, lr}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
	uint8_t axis =0;
 800660a:	2300      	movs	r3, #0
 800660c:	71fb      	strb	r3, [r7, #7]
	for(axis=0; axis<3; axis++)
 800660e:	2300      	movs	r3, #0
 8006610:	71fb      	strb	r3, [r7, #7]
 8006612:	e05d      	b.n	80066d0 <GYRO_Common+0xcc>
	{
		imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	4a32      	ldr	r2, [pc, #200]	; (80066e0 <GYRO_Common+0xdc>)
 8006618:	3304      	adds	r3, #4
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	4413      	add	r3, r2
 800661e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006622:	4618      	mov	r0, r3
 8006624:	f7fa fb74 	bl	8000d10 <__aeabi_i2f>
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	4a2d      	ldr	r2, [pc, #180]	; (80066e0 <GYRO_Common+0xdc>)
 800662c:	331c      	adds	r3, #28
 800662e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006632:	4619      	mov	r1, r3
 8006634:	f7fa fab6 	bl	8000ba4 <__aeabi_fsub>
 8006638:	4603      	mov	r3, r0
 800663a:	461a      	mov	r2, r3
 800663c:	4b29      	ldr	r3, [pc, #164]	; (80066e4 <GYRO_Common+0xe0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	79fc      	ldrb	r4, [r7, #7]
 8006642:	4619      	mov	r1, r3
 8006644:	4610      	mov	r0, r2
 8006646:	f7fa fbb7 	bl	8000db8 <__aeabi_fmul>
 800664a:	4603      	mov	r3, r0
 800664c:	4619      	mov	r1, r3
 800664e:	4a24      	ldr	r2, [pc, #144]	; (80066e0 <GYRO_Common+0xdc>)
 8006650:	f104 030e 	add.w	r3, r4, #14
 8006654:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if(abs(imu.gyroRaw[axis]) <= 5)
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	4a21      	ldr	r2, [pc, #132]	; (80066e0 <GYRO_Common+0xdc>)
 800665c:	330e      	adds	r3, #14
 800665e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006662:	f04f 0100 	mov.w	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f7fa fd62 	bl	8001130 <__aeabi_fcmpgt>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d011      	beq.n	8006696 <GYRO_Common+0x92>
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <GYRO_Common+0xdc>)
 8006676:	330e      	adds	r3, #14
 8006678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667c:	2201      	movs	r2, #1
 800667e:	4614      	mov	r4, r2
 8006680:	4919      	ldr	r1, [pc, #100]	; (80066e8 <GYRO_Common+0xe4>)
 8006682:	4618      	mov	r0, r3
 8006684:	f7fa fd40 	bl	8001108 <__aeabi_fcmple>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <GYRO_Common+0x8e>
 800668e:	2300      	movs	r3, #0
 8006690:	461c      	mov	r4, r3
 8006692:	b2e3      	uxtb	r3, r4
 8006694:	e010      	b.n	80066b8 <GYRO_Common+0xb4>
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	4a11      	ldr	r2, [pc, #68]	; (80066e0 <GYRO_Common+0xdc>)
 800669a:	330e      	adds	r3, #14
 800669c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a0:	2201      	movs	r2, #1
 80066a2:	4614      	mov	r4, r2
 80066a4:	4911      	ldr	r1, [pc, #68]	; (80066ec <GYRO_Common+0xe8>)
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fa fd38 	bl	800111c <__aeabi_fcmpge>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <GYRO_Common+0xb2>
 80066b2:	2300      	movs	r3, #0
 80066b4:	461c      	mov	r4, r3
 80066b6:	b2e3      	uxtb	r3, r4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d006      	beq.n	80066ca <GYRO_Common+0xc6>
		{
			imu.gyroRaw[axis] = 0;
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	4a08      	ldr	r2, [pc, #32]	; (80066e0 <GYRO_Common+0xdc>)
 80066c0:	330e      	adds	r3, #14
 80066c2:	f04f 0100 	mov.w	r1, #0
 80066c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(axis=0; axis<3; axis++)
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	3301      	adds	r3, #1
 80066ce:	71fb      	strb	r3, [r7, #7]
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d99e      	bls.n	8006614 <GYRO_Common+0x10>
		}
	}
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd90      	pop	{r4, r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000e20 	.word	0x20000e20
 80066e4:	20000ad4 	.word	0x20000ad4
 80066e8:	40a00000 	.word	0x40a00000
 80066ec:	c0a00000 	.word	0xc0a00000

080066f0 <ACC_getADC>:

void ACC_getADC(void){
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af02      	add	r7, sp, #8
	int16_t x = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	80fb      	strh	r3, [r7, #6]
	int16_t y = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	80bb      	strh	r3, [r7, #4]
	int16_t z = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	807b      	strh	r3, [r7, #2]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 8006702:	2306      	movs	r3, #6
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	4b1b      	ldr	r3, [pc, #108]	; (8006774 <ACC_getADC+0x84>)
 8006708:	2201      	movs	r2, #1
 800670a:	213b      	movs	r1, #59	; 0x3b
 800670c:	20d2      	movs	r0, #210	; 0xd2
 800670e:	f004 fda1 	bl	800b254 <I2C_ByteRead>
	/* Get acceleration */
	x = (int16_t)((rawADC[0]<<8) | rawADC[1])>>3;
 8006712:	4b18      	ldr	r3, [pc, #96]	; (8006774 <ACC_getADC+0x84>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	b21a      	sxth	r2, r3
 800671a:	4b16      	ldr	r3, [pc, #88]	; (8006774 <ACC_getADC+0x84>)
 800671c:	785b      	ldrb	r3, [r3, #1]
 800671e:	b21b      	sxth	r3, r3
 8006720:	4313      	orrs	r3, r2
 8006722:	b21b      	sxth	r3, r3
 8006724:	10db      	asrs	r3, r3, #3
 8006726:	80fb      	strh	r3, [r7, #6]
	y = (int16_t)((rawADC[2]<<8) | rawADC[3])>>3;
 8006728:	4b12      	ldr	r3, [pc, #72]	; (8006774 <ACC_getADC+0x84>)
 800672a:	789b      	ldrb	r3, [r3, #2]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	b21a      	sxth	r2, r3
 8006730:	4b10      	ldr	r3, [pc, #64]	; (8006774 <ACC_getADC+0x84>)
 8006732:	78db      	ldrb	r3, [r3, #3]
 8006734:	b21b      	sxth	r3, r3
 8006736:	4313      	orrs	r3, r2
 8006738:	b21b      	sxth	r3, r3
 800673a:	10db      	asrs	r3, r3, #3
 800673c:	80bb      	strh	r3, [r7, #4]
	z = (int16_t)((rawADC[4]<<8) | rawADC[5])>>3;
 800673e:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <ACC_getADC+0x84>)
 8006740:	791b      	ldrb	r3, [r3, #4]
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	b21a      	sxth	r2, r3
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <ACC_getADC+0x84>)
 8006748:	795b      	ldrb	r3, [r3, #5]
 800674a:	b21b      	sxth	r3, r3
 800674c:	4313      	orrs	r3, r2
 800674e:	b21b      	sxth	r3, r3
 8006750:	10db      	asrs	r3, r3, #3
 8006752:	807b      	strh	r3, [r7, #2]
	ACC_ORIENTATION( x, y, z);
 8006754:	4a08      	ldr	r2, [pc, #32]	; (8006778 <ACC_getADC+0x88>)
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	8293      	strh	r3, [r2, #20]
 800675a:	4a07      	ldr	r2, [pc, #28]	; (8006778 <ACC_getADC+0x88>)
 800675c:	88bb      	ldrh	r3, [r7, #4]
 800675e:	82d3      	strh	r3, [r2, #22]
 8006760:	4a05      	ldr	r2, [pc, #20]	; (8006778 <ACC_getADC+0x88>)
 8006762:	887b      	ldrh	r3, [r7, #2]
 8006764:	8313      	strh	r3, [r2, #24]
	ACC_Common();
 8006766:	f000 f809 	bl	800677c <ACC_Common>
}
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20000f0c 	.word	0x20000f0c
 8006778:	20000e20 	.word	0x20000e20

0800677c <ACC_Common>:

void ACC_Common(void)
{
 800677c:	b5b0      	push	{r4, r5, r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
	uint8_t axis = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	71fb      	strb	r3, [r7, #7]
	static float accLPF[3];
	static int32_t a[3];

	if(calibratingA>0)
 8006786:	4b56      	ldr	r3, [pc, #344]	; (80068e0 <ACC_Common+0x164>)
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d050      	beq.n	8006830 <ACC_Common+0xb4>
	{
		for(axis=0; axis <3; axis++)
 800678e:	2300      	movs	r3, #0
 8006790:	71fb      	strb	r3, [r7, #7]
 8006792:	e02b      	b.n	80067ec <ACC_Common+0x70>
		{
			// Reset a[axis] at start of calibration
			if (calibratingA == 512) a[axis]=0;
 8006794:	4b52      	ldr	r3, [pc, #328]	; (80068e0 <ACC_Common+0x164>)
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800679c:	d104      	bne.n	80067a8 <ACC_Common+0x2c>
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	4a50      	ldr	r2, [pc, #320]	; (80068e4 <ACC_Common+0x168>)
 80067a2:	2100      	movs	r1, #0
 80067a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// Sum up 512 readings
			a[axis] +=imu.accADC[axis];
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	4a4e      	ldr	r2, [pc, #312]	; (80068e4 <ACC_Common+0x168>)
 80067ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	494d      	ldr	r1, [pc, #308]	; (80068e8 <ACC_Common+0x16c>)
 80067b4:	3308      	adds	r3, #8
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	440b      	add	r3, r1
 80067ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80067be:	4619      	mov	r1, r3
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	440a      	add	r2, r1
 80067c4:	4947      	ldr	r1, [pc, #284]	; (80068e4 <ACC_Common+0x168>)
 80067c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// Clear global variables for next reading
			imu.accADC[axis]=0;
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	4a46      	ldr	r2, [pc, #280]	; (80068e8 <ACC_Common+0x16c>)
 80067ce:	3308      	adds	r3, #8
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	4413      	add	r3, r2
 80067d4:	2200      	movs	r2, #0
 80067d6:	809a      	strh	r2, [r3, #4]
			imu.accZero[axis]=0;
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	4a43      	ldr	r2, [pc, #268]	; (80068e8 <ACC_Common+0x16c>)
 80067dc:	3318      	adds	r3, #24
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	2200      	movs	r2, #0
 80067e4:	605a      	str	r2, [r3, #4]
		for(axis=0; axis <3; axis++)
 80067e6:	79fb      	ldrb	r3, [r7, #7]
 80067e8:	3301      	adds	r3, #1
 80067ea:	71fb      	strb	r3, [r7, #7]
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d9d0      	bls.n	8006794 <ACC_Common+0x18>
		}
		// Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
		if (calibratingA == 1)
 80067f2:	4b3b      	ldr	r3, [pc, #236]	; (80068e0 <ACC_Common+0x164>)
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d114      	bne.n	8006824 <ACC_Common+0xa8>
		{
			imu.accZero[ROLL]  = a[ROLL]>>9;
 80067fa:	4b3a      	ldr	r3, [pc, #232]	; (80068e4 <ACC_Common+0x168>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	125b      	asrs	r3, r3, #9
 8006800:	4a39      	ldr	r2, [pc, #228]	; (80068e8 <ACC_Common+0x16c>)
 8006802:	6653      	str	r3, [r2, #100]	; 0x64
			imu.accZero[PITCH] = a[PITCH]>>9;
 8006804:	4b37      	ldr	r3, [pc, #220]	; (80068e4 <ACC_Common+0x168>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	125b      	asrs	r3, r3, #9
 800680a:	4a37      	ldr	r2, [pc, #220]	; (80068e8 <ACC_Common+0x16c>)
 800680c:	6693      	str	r3, [r2, #104]	; 0x68
			imu.accZero[YAW]   = (a[YAW]>>9)-(int32_t)acc_1G;
 800680e:	4b35      	ldr	r3, [pc, #212]	; (80068e4 <ACC_Common+0x168>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	125b      	asrs	r3, r3, #9
 8006814:	4a35      	ldr	r2, [pc, #212]	; (80068ec <ACC_Common+0x170>)
 8006816:	8812      	ldrh	r2, [r2, #0]
 8006818:	1a9b      	subs	r3, r3, r2
 800681a:	4a33      	ldr	r2, [pc, #204]	; (80068e8 <ACC_Common+0x16c>)
 800681c:	66d3      	str	r3, [r2, #108]	; 0x6c
			f.CALIBRATE_ACC = 0;
 800681e:	4b34      	ldr	r3, [pc, #208]	; (80068f0 <ACC_Common+0x174>)
 8006820:	2200      	movs	r2, #0
 8006822:	711a      	strb	r2, [r3, #4]
		}
		calibratingA--;
 8006824:	4b2e      	ldr	r3, [pc, #184]	; (80068e0 <ACC_Common+0x164>)
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	4b2c      	ldr	r3, [pc, #176]	; (80068e0 <ACC_Common+0x164>)
 800682e:	801a      	strh	r2, [r3, #0]
	}

	for(axis=0;axis<3;axis++)
 8006830:	2300      	movs	r3, #0
 8006832:	71fb      	strb	r3, [r7, #7]
 8006834:	e04d      	b.n	80068d2 <ACC_Common+0x156>
	{
		imu.accRaw[axis] = (float)imu.accADC[axis]-imu.accZero[axis];// * aRes;// - accBias[axis];
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	4a2b      	ldr	r2, [pc, #172]	; (80068e8 <ACC_Common+0x16c>)
 800683a:	3308      	adds	r3, #8
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	4413      	add	r3, r2
 8006840:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006844:	4618      	mov	r0, r3
 8006846:	f7fa fa63 	bl	8000d10 <__aeabi_i2f>
 800684a:	4605      	mov	r5, r0
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <ACC_Common+0x16c>)
 8006850:	3318      	adds	r3, #24
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	4618      	mov	r0, r3
 800685a:	f7fa fa59 	bl	8000d10 <__aeabi_i2f>
 800685e:	4603      	mov	r3, r0
 8006860:	79fc      	ldrb	r4, [r7, #7]
 8006862:	4619      	mov	r1, r3
 8006864:	4628      	mov	r0, r5
 8006866:	f7fa f99d 	bl	8000ba4 <__aeabi_fsub>
 800686a:	4603      	mov	r3, r0
 800686c:	4619      	mov	r1, r3
 800686e:	4a1e      	ldr	r2, [pc, #120]	; (80068e8 <ACC_Common+0x16c>)
 8006870:	f104 0308 	add.w	r3, r4, #8
 8006874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (acc_lpf_factor > 0)
		{
			accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / acc_lpf_factor)) + imu.accRaw[axis] * (1.0f / acc_lpf_factor);
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <ACC_Common+0x178>)
 800687c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006880:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8006884:	4618      	mov	r0, r3
 8006886:	f7fa fa97 	bl	8000db8 <__aeabi_fmul>
 800688a:	4603      	mov	r3, r0
 800688c:	461d      	mov	r5, r3
 800688e:	79fb      	ldrb	r3, [r7, #7]
 8006890:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <ACC_Common+0x16c>)
 8006892:	3308      	adds	r3, #8
 8006894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006898:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800689c:	4618      	mov	r0, r3
 800689e:	f7fa fa8b 	bl	8000db8 <__aeabi_fmul>
 80068a2:	4603      	mov	r3, r0
 80068a4:	79fc      	ldrb	r4, [r7, #7]
 80068a6:	4619      	mov	r1, r3
 80068a8:	4628      	mov	r0, r5
 80068aa:	f7fa f97d 	bl	8000ba8 <__addsf3>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	4b10      	ldr	r3, [pc, #64]	; (80068f4 <ACC_Common+0x178>)
 80068b4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			imu.accSmooth[axis] = accLPF[axis];
 80068b8:	79fa      	ldrb	r2, [r7, #7]
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	490d      	ldr	r1, [pc, #52]	; (80068f4 <ACC_Common+0x178>)
 80068be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80068c2:	4909      	ldr	r1, [pc, #36]	; (80068e8 <ACC_Common+0x16c>)
 80068c4:	330a      	adds	r3, #10
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	605a      	str	r2, [r3, #4]
	for(axis=0;axis<3;axis++)
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	3301      	adds	r3, #1
 80068d0:	71fb      	strb	r3, [r7, #7]
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d9ae      	bls.n	8006836 <ACC_Common+0xba>
		}
	}
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bdb0      	pop	{r4, r5, r7, pc}
 80068e0:	20000008 	.word	0x20000008
 80068e4:	20000384 	.word	0x20000384
 80068e8:	20000e20 	.word	0x20000e20
 80068ec:	2000000c 	.word	0x2000000c
 80068f0:	20000ed4 	.word	0x20000ed4
 80068f4:	20000390 	.word	0x20000390

080068f8 <Mag_getADC>:

void Mag_getADC(void){
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af02      	add	r7, sp, #8
	int16_t x = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	80fb      	strh	r3, [r7, #6]
	int16_t y = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	80bb      	strh	r3, [r7, #4]
	int16_t z = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	807b      	strh	r3, [r7, #2]
	I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x02, 1, rawADC, 1);
 800690a:	2301      	movs	r3, #1
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <Mag_getADC+0xa8>)
 8006910:	2201      	movs	r2, #1
 8006912:	2102      	movs	r1, #2
 8006914:	2018      	movs	r0, #24
 8006916:	f004 fc9d 	bl	800b254 <I2C_ByteRead>
	if( rawADC[0] & 0x01)
 800691a:	4b21      	ldr	r3, [pc, #132]	; (80069a0 <Mag_getADC+0xa8>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d038      	beq.n	8006998 <Mag_getADC+0xa0>
	{
		I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x03, 1, rawADC, 7);
 8006926:	2307      	movs	r3, #7
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <Mag_getADC+0xa8>)
 800692c:	2201      	movs	r2, #1
 800692e:	2103      	movs	r1, #3
 8006930:	2018      	movs	r0, #24
 8006932:	f004 fc8f 	bl	800b254 <I2C_ByteRead>
		uint8_t c = rawADC[6];
 8006936:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <Mag_getADC+0xa8>)
 8006938:	799b      	ldrb	r3, [r3, #6]
 800693a:	707b      	strb	r3, [r7, #1]
		if(!(c & 0x08))
 800693c:	787b      	ldrb	r3, [r7, #1]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d128      	bne.n	8006998 <Mag_getADC+0xa0>
		{
			x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 8006946:	4b16      	ldr	r3, [pc, #88]	; (80069a0 <Mag_getADC+0xa8>)
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	b21a      	sxth	r2, r3
 800694e:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <Mag_getADC+0xa8>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b21b      	sxth	r3, r3
 8006954:	4313      	orrs	r3, r2
 8006956:	80fb      	strh	r3, [r7, #6]
			y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 8006958:	4b11      	ldr	r3, [pc, #68]	; (80069a0 <Mag_getADC+0xa8>)
 800695a:	78db      	ldrb	r3, [r3, #3]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	b21a      	sxth	r2, r3
 8006960:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <Mag_getADC+0xa8>)
 8006962:	789b      	ldrb	r3, [r3, #2]
 8006964:	b21b      	sxth	r3, r3
 8006966:	4313      	orrs	r3, r2
 8006968:	80bb      	strh	r3, [r7, #4]
			z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 800696a:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <Mag_getADC+0xa8>)
 800696c:	795b      	ldrb	r3, [r3, #5]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	b21a      	sxth	r2, r3
 8006972:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <Mag_getADC+0xa8>)
 8006974:	791b      	ldrb	r3, [r3, #4]
 8006976:	b21b      	sxth	r3, r3
 8006978:	4313      	orrs	r3, r2
 800697a:	807b      	strh	r3, [r7, #2]
			MAG_ORIENTATION( x, y, z);
 800697c:	4a09      	ldr	r2, [pc, #36]	; (80069a4 <Mag_getADC+0xac>)
 800697e:	88bb      	ldrh	r3, [r7, #4]
 8006980:	80d3      	strh	r3, [r2, #6]
 8006982:	4a08      	ldr	r2, [pc, #32]	; (80069a4 <Mag_getADC+0xac>)
 8006984:	88fb      	ldrh	r3, [r7, #6]
 8006986:	8113      	strh	r3, [r2, #8]
 8006988:	887b      	ldrh	r3, [r7, #2]
 800698a:	425b      	negs	r3, r3
 800698c:	b29b      	uxth	r3, r3
 800698e:	b21a      	sxth	r2, r3
 8006990:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <Mag_getADC+0xac>)
 8006992:	815a      	strh	r2, [r3, #10]
			MAG_Common();
 8006994:	f000 f808 	bl	80069a8 <MAG_Common>
		}
	}
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000f0c 	.word	0x20000f0c
 80069a4:	20000e20 	.word	0x20000e20

080069a8 <MAG_Common>:

void MAG_Common(void)
{
 80069a8:	b5b0      	push	{r4, r5, r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
	uint8_t axis = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	71fb      	strb	r3, [r7, #7]
	static uint8_t flag = 0;
	static int jj = 0;
	static int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
	static int16_t mag_max[3] = {0x8000, 0x8000, 0x8000}, mag_min[3] = {0x7FFF, 0x7FFF, 0x7FFF}, mag_temp[3] = {0, 0, 0};

	if(f.CALIBRATE_MAG==1)
 80069b2:	4b9a      	ldr	r3, [pc, #616]	; (8006c1c <MAG_Common+0x274>)
 80069b4:	7cdb      	ldrb	r3, [r3, #19]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d14b      	bne.n	8006a52 <MAG_Common+0xaa>
	{
		flag = 1;
 80069ba:	4b99      	ldr	r3, [pc, #612]	; (8006c20 <MAG_Common+0x278>)
 80069bc:	2201      	movs	r2, #1
 80069be:	701a      	strb	r2, [r3, #0]
		mag_temp[0] = imu.magADC[0];
 80069c0:	4b98      	ldr	r3, [pc, #608]	; (8006c24 <MAG_Common+0x27c>)
 80069c2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80069c6:	4b98      	ldr	r3, [pc, #608]	; (8006c28 <MAG_Common+0x280>)
 80069c8:	801a      	strh	r2, [r3, #0]
		mag_temp[1] = imu.magADC[1];
 80069ca:	4b96      	ldr	r3, [pc, #600]	; (8006c24 <MAG_Common+0x27c>)
 80069cc:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80069d0:	4b95      	ldr	r3, [pc, #596]	; (8006c28 <MAG_Common+0x280>)
 80069d2:	805a      	strh	r2, [r3, #2]
		mag_temp[2] = imu.magADC[2];
 80069d4:	4b93      	ldr	r3, [pc, #588]	; (8006c24 <MAG_Common+0x27c>)
 80069d6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80069da:	4b93      	ldr	r3, [pc, #588]	; (8006c28 <MAG_Common+0x280>)
 80069dc:	809a      	strh	r2, [r3, #4]
		for (jj = 0; jj < 3; jj++)
 80069de:	4b93      	ldr	r3, [pc, #588]	; (8006c2c <MAG_Common+0x284>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	e030      	b.n	8006a48 <MAG_Common+0xa0>
		{
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 80069e6:	4b91      	ldr	r3, [pc, #580]	; (8006c2c <MAG_Common+0x284>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a8f      	ldr	r2, [pc, #572]	; (8006c28 <MAG_Common+0x280>)
 80069ec:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80069f0:	4b8e      	ldr	r3, [pc, #568]	; (8006c2c <MAG_Common+0x284>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	498e      	ldr	r1, [pc, #568]	; (8006c30 <MAG_Common+0x288>)
 80069f6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	dd09      	ble.n	8006a12 <MAG_Common+0x6a>
 80069fe:	4b8b      	ldr	r3, [pc, #556]	; (8006c2c <MAG_Common+0x284>)
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b8a      	ldr	r3, [pc, #552]	; (8006c2c <MAG_Common+0x284>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4988      	ldr	r1, [pc, #544]	; (8006c28 <MAG_Common+0x280>)
 8006a08:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8006a0c:	4a88      	ldr	r2, [pc, #544]	; (8006c30 <MAG_Common+0x288>)
 8006a0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8006a12:	4b86      	ldr	r3, [pc, #536]	; (8006c2c <MAG_Common+0x284>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a84      	ldr	r2, [pc, #528]	; (8006c28 <MAG_Common+0x280>)
 8006a18:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8006a1c:	4b83      	ldr	r3, [pc, #524]	; (8006c2c <MAG_Common+0x284>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4984      	ldr	r1, [pc, #528]	; (8006c34 <MAG_Common+0x28c>)
 8006a22:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	da09      	bge.n	8006a3e <MAG_Common+0x96>
 8006a2a:	4b80      	ldr	r3, [pc, #512]	; (8006c2c <MAG_Common+0x284>)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4b7f      	ldr	r3, [pc, #508]	; (8006c2c <MAG_Common+0x284>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	497d      	ldr	r1, [pc, #500]	; (8006c28 <MAG_Common+0x280>)
 8006a34:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8006a38:	4a7e      	ldr	r2, [pc, #504]	; (8006c34 <MAG_Common+0x28c>)
 8006a3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (jj = 0; jj < 3; jj++)
 8006a3e:	4b7b      	ldr	r3, [pc, #492]	; (8006c2c <MAG_Common+0x284>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3301      	adds	r3, #1
 8006a44:	4a79      	ldr	r2, [pc, #484]	; (8006c2c <MAG_Common+0x284>)
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	4b78      	ldr	r3, [pc, #480]	; (8006c2c <MAG_Common+0x284>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	ddca      	ble.n	80069e6 <MAG_Common+0x3e>
 8006a50:	e0e0      	b.n	8006c14 <MAG_Common+0x26c>
		}
	}else if(flag == 1)
 8006a52:	4b73      	ldr	r3, [pc, #460]	; (8006c20 <MAG_Common+0x278>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	f040 80dc 	bne.w	8006c14 <MAG_Common+0x26c>
	{
		flag = 0;
 8006a5c:	4b70      	ldr	r3, [pc, #448]	; (8006c20 <MAG_Common+0x278>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	701a      	strb	r2, [r3, #0]
		// Get hard iron correction
		mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8006a62:	4b73      	ldr	r3, [pc, #460]	; (8006c30 <MAG_Common+0x288>)
 8006a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4b72      	ldr	r3, [pc, #456]	; (8006c34 <MAG_Common+0x28c>)
 8006a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a70:	4413      	add	r3, r2
 8006a72:	0fda      	lsrs	r2, r3, #31
 8006a74:	4413      	add	r3, r2
 8006a76:	105b      	asrs	r3, r3, #1
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b6f      	ldr	r3, [pc, #444]	; (8006c38 <MAG_Common+0x290>)
 8006a7c:	601a      	str	r2, [r3, #0]
		mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8006a7e:	4b6c      	ldr	r3, [pc, #432]	; (8006c30 <MAG_Common+0x288>)
 8006a80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a84:	461a      	mov	r2, r3
 8006a86:	4b6b      	ldr	r3, [pc, #428]	; (8006c34 <MAG_Common+0x28c>)
 8006a88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	0fda      	lsrs	r2, r3, #31
 8006a90:	4413      	add	r3, r2
 8006a92:	105b      	asrs	r3, r3, #1
 8006a94:	461a      	mov	r2, r3
 8006a96:	4b68      	ldr	r3, [pc, #416]	; (8006c38 <MAG_Common+0x290>)
 8006a98:	605a      	str	r2, [r3, #4]
		mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8006a9a:	4b65      	ldr	r3, [pc, #404]	; (8006c30 <MAG_Common+0x288>)
 8006a9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4b64      	ldr	r3, [pc, #400]	; (8006c34 <MAG_Common+0x28c>)
 8006aa4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	0fda      	lsrs	r2, r3, #31
 8006aac:	4413      	add	r3, r2
 8006aae:	105b      	asrs	r3, r3, #1
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4b61      	ldr	r3, [pc, #388]	; (8006c38 <MAG_Common+0x290>)
 8006ab4:	609a      	str	r2, [r3, #8]
		magBias[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8006ab6:	4b60      	ldr	r3, [pc, #384]	; (8006c38 <MAG_Common+0x290>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fa f928 	bl	8000d10 <__aeabi_i2f>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	4b5e      	ldr	r3, [pc, #376]	; (8006c3c <MAG_Common+0x294>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7fa f975 	bl	8000db8 <__aeabi_fmul>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4b5b      	ldr	r3, [pc, #364]	; (8006c40 <MAG_Common+0x298>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4610      	mov	r0, r2
 8006ada:	f7fa f96d 	bl	8000db8 <__aeabi_fmul>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4b58      	ldr	r3, [pc, #352]	; (8006c44 <MAG_Common+0x29c>)
 8006ae4:	601a      	str	r2, [r3, #0]
		magBias[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8006ae6:	4b54      	ldr	r3, [pc, #336]	; (8006c38 <MAG_Common+0x290>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fa f910 	bl	8000d10 <__aeabi_i2f>
 8006af0:	4602      	mov	r2, r0
 8006af2:	4b52      	ldr	r3, [pc, #328]	; (8006c3c <MAG_Common+0x294>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f7fa f95d 	bl	8000db8 <__aeabi_fmul>
 8006afe:	4603      	mov	r3, r0
 8006b00:	461a      	mov	r2, r3
 8006b02:	4b4f      	ldr	r3, [pc, #316]	; (8006c40 <MAG_Common+0x298>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	4619      	mov	r1, r3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	f7fa f955 	bl	8000db8 <__aeabi_fmul>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	461a      	mov	r2, r3
 8006b12:	4b4c      	ldr	r3, [pc, #304]	; (8006c44 <MAG_Common+0x29c>)
 8006b14:	605a      	str	r2, [r3, #4]
		magBias[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8006b16:	4b48      	ldr	r3, [pc, #288]	; (8006c38 <MAG_Common+0x290>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fa f8f8 	bl	8000d10 <__aeabi_i2f>
 8006b20:	4602      	mov	r2, r0
 8006b22:	4b46      	ldr	r3, [pc, #280]	; (8006c3c <MAG_Common+0x294>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f7fa f945 	bl	8000db8 <__aeabi_fmul>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	461a      	mov	r2, r3
 8006b32:	4b43      	ldr	r3, [pc, #268]	; (8006c40 <MAG_Common+0x298>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	4619      	mov	r1, r3
 8006b38:	4610      	mov	r0, r2
 8006b3a:	f7fa f93d 	bl	8000db8 <__aeabi_fmul>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	461a      	mov	r2, r3
 8006b42:	4b40      	ldr	r3, [pc, #256]	; (8006c44 <MAG_Common+0x29c>)
 8006b44:	609a      	str	r2, [r3, #8]

		// Get soft iron correction estimate
		mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8006b46:	4b3a      	ldr	r3, [pc, #232]	; (8006c30 <MAG_Common+0x288>)
 8006b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	4b39      	ldr	r3, [pc, #228]	; (8006c34 <MAG_Common+0x28c>)
 8006b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	0fda      	lsrs	r2, r3, #31
 8006b58:	4413      	add	r3, r2
 8006b5a:	105b      	asrs	r3, r3, #1
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	4b3a      	ldr	r3, [pc, #232]	; (8006c48 <MAG_Common+0x2a0>)
 8006b60:	601a      	str	r2, [r3, #0]
		mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8006b62:	4b33      	ldr	r3, [pc, #204]	; (8006c30 <MAG_Common+0x288>)
 8006b64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4b32      	ldr	r3, [pc, #200]	; (8006c34 <MAG_Common+0x28c>)
 8006b6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	0fda      	lsrs	r2, r3, #31
 8006b74:	4413      	add	r3, r2
 8006b76:	105b      	asrs	r3, r3, #1
 8006b78:	461a      	mov	r2, r3
 8006b7a:	4b33      	ldr	r3, [pc, #204]	; (8006c48 <MAG_Common+0x2a0>)
 8006b7c:	605a      	str	r2, [r3, #4]
		mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8006b7e:	4b2c      	ldr	r3, [pc, #176]	; (8006c30 <MAG_Common+0x288>)
 8006b80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b84:	461a      	mov	r2, r3
 8006b86:	4b2b      	ldr	r3, [pc, #172]	; (8006c34 <MAG_Common+0x28c>)
 8006b88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	0fda      	lsrs	r2, r3, #31
 8006b90:	4413      	add	r3, r2
 8006b92:	105b      	asrs	r3, r3, #1
 8006b94:	461a      	mov	r2, r3
 8006b96:	4b2c      	ldr	r3, [pc, #176]	; (8006c48 <MAG_Common+0x2a0>)
 8006b98:	609a      	str	r2, [r3, #8]

		float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8006b9a:	4b2b      	ldr	r3, [pc, #172]	; (8006c48 <MAG_Common+0x2a0>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4b2a      	ldr	r3, [pc, #168]	; (8006c48 <MAG_Common+0x2a0>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	441a      	add	r2, r3
 8006ba4:	4b28      	ldr	r3, [pc, #160]	; (8006c48 <MAG_Common+0x2a0>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	4413      	add	r3, r2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fa f8b0 	bl	8000d10 <__aeabi_i2f>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	603b      	str	r3, [r7, #0]
		avg_rad /= 3.0;
 8006bb4:	4925      	ldr	r1, [pc, #148]	; (8006c4c <MAG_Common+0x2a4>)
 8006bb6:	6838      	ldr	r0, [r7, #0]
 8006bb8:	f7fa f9b2 	bl	8000f20 <__aeabi_fdiv>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	603b      	str	r3, [r7, #0]

		magScale[0] = avg_rad/((float)mag_scale[0]);
 8006bc0:	4b21      	ldr	r3, [pc, #132]	; (8006c48 <MAG_Common+0x2a0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fa f8a3 	bl	8000d10 <__aeabi_i2f>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6838      	ldr	r0, [r7, #0]
 8006bd0:	f7fa f9a6 	bl	8000f20 <__aeabi_fdiv>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4b1d      	ldr	r3, [pc, #116]	; (8006c50 <MAG_Common+0x2a8>)
 8006bda:	601a      	str	r2, [r3, #0]
		magScale[1] = avg_rad/((float)mag_scale[1]);
 8006bdc:	4b1a      	ldr	r3, [pc, #104]	; (8006c48 <MAG_Common+0x2a0>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fa f895 	bl	8000d10 <__aeabi_i2f>
 8006be6:	4603      	mov	r3, r0
 8006be8:	4619      	mov	r1, r3
 8006bea:	6838      	ldr	r0, [r7, #0]
 8006bec:	f7fa f998 	bl	8000f20 <__aeabi_fdiv>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4b16      	ldr	r3, [pc, #88]	; (8006c50 <MAG_Common+0x2a8>)
 8006bf6:	605a      	str	r2, [r3, #4]
		magScale[2] = avg_rad/((float)mag_scale[2]);
 8006bf8:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <MAG_Common+0x2a0>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fa f887 	bl	8000d10 <__aeabi_i2f>
 8006c02:	4603      	mov	r3, r0
 8006c04:	4619      	mov	r1, r3
 8006c06:	6838      	ldr	r0, [r7, #0]
 8006c08:	f7fa f98a 	bl	8000f20 <__aeabi_fdiv>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	461a      	mov	r2, r3
 8006c10:	4b0f      	ldr	r3, [pc, #60]	; (8006c50 <MAG_Common+0x2a8>)
 8006c12:	609a      	str	r2, [r3, #8]
	}
	for(axis=0;axis<3;axis++)
 8006c14:	2300      	movs	r3, #0
 8006c16:	71fb      	strb	r3, [r7, #7]
 8006c18:	e073      	b.n	8006d02 <MAG_Common+0x35a>
 8006c1a:	bf00      	nop
 8006c1c:	20000ed4 	.word	0x20000ed4
 8006c20:	2000039c 	.word	0x2000039c
 8006c24:	20000e20 	.word	0x20000e20
 8006c28:	200003a0 	.word	0x200003a0
 8006c2c:	200003a8 	.word	0x200003a8
 8006c30:	20000014 	.word	0x20000014
 8006c34:	2000001c 	.word	0x2000001c
 8006c38:	200003ac 	.word	0x200003ac
 8006c3c:	20000ad8 	.word	0x20000ad8
 8006c40:	20000338 	.word	0x20000338
 8006c44:	20000344 	.word	0x20000344
 8006c48:	200003b8 	.word	0x200003b8
 8006c4c:	40400000 	.word	0x40400000
 8006c50:	20000f00 	.word	0x20000f00
	{
		imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	4a2e      	ldr	r2, [pc, #184]	; (8006d10 <MAG_Common+0x368>)
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fa f855 	bl	8000d10 <__aeabi_i2f>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4b2a      	ldr	r3, [pc, #168]	; (8006d14 <MAG_Common+0x36c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7fa f8a2 	bl	8000db8 <__aeabi_fmul>
 8006c74:	4603      	mov	r3, r0
 8006c76:	4618      	mov	r0, r3
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	4a27      	ldr	r2, [pc, #156]	; (8006d18 <MAG_Common+0x370>)
 8006c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c80:	4619      	mov	r1, r3
 8006c82:	f7fa f899 	bl	8000db8 <__aeabi_fmul>
 8006c86:	4603      	mov	r3, r0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	4a23      	ldr	r2, [pc, #140]	; (8006d1c <MAG_Common+0x374>)
 8006c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c92:	79fc      	ldrb	r4, [r7, #7]
 8006c94:	4619      	mov	r1, r3
 8006c96:	f7f9 ff85 	bl	8000ba4 <__aeabi_fsub>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4a1c      	ldr	r2, [pc, #112]	; (8006d10 <MAG_Common+0x368>)
 8006ca0:	f104 0314 	add.w	r3, r4, #20
 8006ca4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (mag_lpf_factor > 0) {
			magLPF[axis] = magLPF[axis] * (1.0f - (1.0f / mag_lpf_factor)) + imu.magRaw[axis] * (1.0f / mag_lpf_factor);
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	4a1d      	ldr	r2, [pc, #116]	; (8006d20 <MAG_Common+0x378>)
 8006cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb0:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fa f87f 	bl	8000db8 <__aeabi_fmul>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	461d      	mov	r5, r3
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	4a13      	ldr	r2, [pc, #76]	; (8006d10 <MAG_Common+0x368>)
 8006cc2:	3314      	adds	r3, #20
 8006cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc8:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fa f873 	bl	8000db8 <__aeabi_fmul>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	79fc      	ldrb	r4, [r7, #7]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f7f9 ff65 	bl	8000ba8 <__addsf3>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4b0f      	ldr	r3, [pc, #60]	; (8006d20 <MAG_Common+0x378>)
 8006ce4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			imu.magSmooth[axis] = magLPF[axis];
 8006ce8:	79fa      	ldrb	r2, [r7, #7]
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	490c      	ldr	r1, [pc, #48]	; (8006d20 <MAG_Common+0x378>)
 8006cee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006cf2:	4907      	ldr	r1, [pc, #28]	; (8006d10 <MAG_Common+0x368>)
 8006cf4:	3310      	adds	r3, #16
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	605a      	str	r2, [r3, #4]
	for(axis=0;axis<3;axis++)
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	71fb      	strb	r3, [r7, #7]
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d9a5      	bls.n	8006c54 <MAG_Common+0x2ac>
		}
	}
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8006d10:	20000e20 	.word	0x20000e20
 8006d14:	20000ad8 	.word	0x20000ad8
 8006d18:	20000338 	.word	0x20000338
 8006d1c:	20000344 	.word	0x20000344
 8006d20:	200003c4 	.word	0x200003c4
 8006d24:	00000000 	.word	0x00000000

08006d28 <CAL_Heading>:

void CAL_Heading(void)
{
 8006d28:	b590      	push	{r4, r7, lr}
 8006d2a:	b089      	sub	sp, #36	; 0x24
 8006d2c:	af00      	add	r7, sp, #0
	static uint8_t ind = 0;
	static float heading[HEADING_SMOOTH], h_sum;

	float cosineRoll = cosf(imu.AHRS[ROLL] * 0.0174533f);
 8006d2e:	4b54      	ldr	r3, [pc, #336]	; (8006e80 <CAL_Heading+0x158>)
 8006d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d34:	4953      	ldr	r1, [pc, #332]	; (8006e84 <CAL_Heading+0x15c>)
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fa f83e 	bl	8000db8 <__aeabi_fmul>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f00e fa96 	bl	8015270 <cosf>
 8006d44:	61b8      	str	r0, [r7, #24]
	float sineRoll = sinf(imu.AHRS[ROLL] * 0.0174533f);
 8006d46:	4b4e      	ldr	r3, [pc, #312]	; (8006e80 <CAL_Heading+0x158>)
 8006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4c:	494d      	ldr	r1, [pc, #308]	; (8006e84 <CAL_Heading+0x15c>)
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fa f832 	bl	8000db8 <__aeabi_fmul>
 8006d54:	4603      	mov	r3, r0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f00e faf8 	bl	801534c <sinf>
 8006d5c:	6178      	str	r0, [r7, #20]
	float cosinePitch = cosf(imu.AHRS[PITCH] * 0.0174533f);
 8006d5e:	4b48      	ldr	r3, [pc, #288]	; (8006e80 <CAL_Heading+0x158>)
 8006d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d64:	4947      	ldr	r1, [pc, #284]	; (8006e84 <CAL_Heading+0x15c>)
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fa f826 	bl	8000db8 <__aeabi_fmul>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f00e fa7e 	bl	8015270 <cosf>
 8006d74:	6138      	str	r0, [r7, #16]
	float sinePitch = sinf(imu.AHRS[PITCH] * 0.0174533f);
 8006d76:	4b42      	ldr	r3, [pc, #264]	; (8006e80 <CAL_Heading+0x158>)
 8006d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d7c:	4941      	ldr	r1, [pc, #260]	; (8006e84 <CAL_Heading+0x15c>)
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fa f81a 	bl	8000db8 <__aeabi_fmul>
 8006d84:	4603      	mov	r3, r0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f00e fae0 	bl	801534c <sinf>
 8006d8c:	60f8      	str	r0, [r7, #12]
	float Xh = imu.magSmooth[ROLL] * cosinePitch + imu.magSmooth[PITCH] * sineRoll * sinePitch + imu.magSmooth[YAW] * sinePitch * cosineRoll;
 8006d8e:	4b3c      	ldr	r3, [pc, #240]	; (8006e80 <CAL_Heading+0x158>)
 8006d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d92:	6939      	ldr	r1, [r7, #16]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fa f80f 	bl	8000db8 <__aeabi_fmul>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	461c      	mov	r4, r3
 8006d9e:	4b38      	ldr	r3, [pc, #224]	; (8006e80 <CAL_Heading+0x158>)
 8006da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da2:	6979      	ldr	r1, [r7, #20]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fa f807 	bl	8000db8 <__aeabi_fmul>
 8006daa:	4603      	mov	r3, r0
 8006dac:	68f9      	ldr	r1, [r7, #12]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fa f802 	bl	8000db8 <__aeabi_fmul>
 8006db4:	4603      	mov	r3, r0
 8006db6:	4619      	mov	r1, r3
 8006db8:	4620      	mov	r0, r4
 8006dba:	f7f9 fef5 	bl	8000ba8 <__addsf3>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	461c      	mov	r4, r3
 8006dc2:	4b2f      	ldr	r3, [pc, #188]	; (8006e80 <CAL_Heading+0x158>)
 8006dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc6:	68f9      	ldr	r1, [r7, #12]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7f9 fff5 	bl	8000db8 <__aeabi_fmul>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	69b9      	ldr	r1, [r7, #24]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7f9 fff0 	bl	8000db8 <__aeabi_fmul>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7f9 fee3 	bl	8000ba8 <__addsf3>
 8006de2:	4603      	mov	r3, r0
 8006de4:	60bb      	str	r3, [r7, #8]
	float Yh = imu.magSmooth[PITCH] * cosineRoll - imu.magSmooth[YAW] * sineRoll;
 8006de6:	4b26      	ldr	r3, [pc, #152]	; (8006e80 <CAL_Heading+0x158>)
 8006de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dea:	69b9      	ldr	r1, [r7, #24]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7f9 ffe3 	bl	8000db8 <__aeabi_fmul>
 8006df2:	4603      	mov	r3, r0
 8006df4:	461c      	mov	r4, r3
 8006df6:	4b22      	ldr	r3, [pc, #136]	; (8006e80 <CAL_Heading+0x158>)
 8006df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfa:	6979      	ldr	r1, [r7, #20]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7f9 ffdb 	bl	8000db8 <__aeabi_fmul>
 8006e02:	4603      	mov	r3, r0
 8006e04:	4619      	mov	r1, r3
 8006e06:	4620      	mov	r0, r4
 8006e08:	f7f9 fecc 	bl	8000ba4 <__aeabi_fsub>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	607b      	str	r3, [r7, #4]
	float hd = (atan2f(Yh, Xh) * 180.0f / M_PI);
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f00e fd2c 	bl	8015870 <atan2f>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	491b      	ldr	r1, [pc, #108]	; (8006e88 <CAL_Heading+0x160>)
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7f9 ffcb 	bl	8000db8 <__aeabi_fmul>
 8006e22:	4603      	mov	r3, r0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7f9 fb19 	bl	800045c <__aeabi_f2d>
 8006e2a:	a313      	add	r3, pc, #76	; (adr r3, 8006e78 <CAL_Heading+0x150>)
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	f7f9 fc96 	bl	8000760 <__aeabi_ddiv>
 8006e34:	4603      	mov	r3, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	4618      	mov	r0, r3
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	f7f9 fe5e 	bl	8000afc <__aeabi_d2f>
 8006e40:	4603      	mov	r3, r0
 8006e42:	603b      	str	r3, [r7, #0]
	int32_t head = lrintf(hd);
 8006e44:	6838      	ldr	r0, [r7, #0]
 8006e46:	f00e fa47 	bl	80152d8 <lrintf>
 8006e4a:	61f8      	str	r0, [r7, #28]
	if (head < 0)
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	da03      	bge.n	8006e5a <CAL_Heading+0x132>
		head += 360;
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e58:	61fb      	str	r3, [r7, #28]
	imu.actual_compass_heading = head;
 8006e5a:	4a09      	ldr	r2, [pc, #36]	; (8006e80 <CAL_Heading+0x158>)
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		h_sum -= heading[ind];
		heading[ind++] = imu.actual_compass_heading;
		ind %= HEADING_SMOOTH;
		imu.actual_compass_heading = h_sum/HEADING_SMOOTH;
	}
	att.mag_heading = (int16_t) imu.actual_compass_heading;
 8006e62:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <CAL_Heading+0x158>)
 8006e64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e68:	b21a      	sxth	r2, r3
 8006e6a:	4b08      	ldr	r3, [pc, #32]	; (8006e8c <CAL_Heading+0x164>)
 8006e6c:	80da      	strh	r2, [r3, #6]
}
 8006e6e:	bf00      	nop
 8006e70:	3724      	adds	r7, #36	; 0x24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd90      	pop	{r4, r7, pc}
 8006e76:	bf00      	nop
 8006e78:	54442d18 	.word	0x54442d18
 8006e7c:	400921fb 	.word	0x400921fb
 8006e80:	20000e20 	.word	0x20000e20
 8006e84:	3c8efa39 	.word	0x3c8efa39
 8006e88:	43340000 	.word	0x43340000
 8006e8c:	20000ef8 	.word	0x20000ef8

08006e90 <Temp_getADC>:

void Temp_getADC(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af02      	add	r7, sp, #8
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 8006e96:	2302      	movs	r3, #2
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	4b14      	ldr	r3, [pc, #80]	; (8006eec <Temp_getADC+0x5c>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	2141      	movs	r1, #65	; 0x41
 8006ea0:	20d2      	movs	r0, #210	; 0xd2
 8006ea2:	f004 f9d7 	bl	800b254 <I2C_ByteRead>
	/* Get acceleration */
	imu.rawTemp = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8006ea6:	4b11      	ldr	r3, [pc, #68]	; (8006eec <Temp_getADC+0x5c>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	b21a      	sxth	r2, r3
 8006eae:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <Temp_getADC+0x5c>)
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	b21b      	sxth	r3, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b21a      	sxth	r2, r3
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <Temp_getADC+0x60>)
 8006eba:	819a      	strh	r2, [r3, #12]
	imu.Temp = ((float)imu.rawTemp / 337.87f) + 21.0f;
 8006ebc:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <Temp_getADC+0x60>)
 8006ebe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7f9 ff24 	bl	8000d10 <__aeabi_i2f>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	490a      	ldr	r1, [pc, #40]	; (8006ef4 <Temp_getADC+0x64>)
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fa f827 	bl	8000f20 <__aeabi_fdiv>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4908      	ldr	r1, [pc, #32]	; (8006ef8 <Temp_getADC+0x68>)
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7f9 fe66 	bl	8000ba8 <__addsf3>
 8006edc:	4603      	mov	r3, r0
 8006ede:	461a      	mov	r2, r3
 8006ee0:	4b03      	ldr	r3, [pc, #12]	; (8006ef0 <Temp_getADC+0x60>)
 8006ee2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ee4:	bf00      	nop
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000f0c 	.word	0x20000f0c
 8006ef0:	20000e20 	.word	0x20000e20
 8006ef4:	43a8ef5c 	.word	0x43a8ef5c
 8006ef8:	41a80000 	.word	0x41a80000

08006efc <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2)
{
 8006efc:	b5b0      	push	{r4, r5, r7, lr}
 8006efe:	b09a      	sub	sp, #104	; 0x68
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8006f06:	2300      	movs	r3, #0
 8006f08:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f0e:	2300      	movs	r3, #0
 8006f10:	643b      	str	r3, [r7, #64]	; 0x40
 8006f12:	2300      	movs	r3, #0
 8006f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f16:	2300      	movs	r3, #0
 8006f18:	633b      	str	r3, [r7, #48]	; 0x30
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8006f1e:	2380      	movs	r3, #128	; 0x80
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	2308      	movs	r3, #8
 8006f24:	2207      	movs	r2, #7
 8006f26:	216b      	movs	r1, #107	; 0x6b
 8006f28:	20d2      	movs	r0, #210	; 0xd2
 8006f2a:	f004 f90b 	bl	800b144 <I2C_ByteWrite>
	HAL_Delay(100); // for stability
 8006f2e:	2064      	movs	r0, #100	; 0x64
 8006f30:	f005 fb1a 	bl	800c568 <HAL_Delay>
	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 8006f34:	2301      	movs	r3, #1
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	2308      	movs	r3, #8
 8006f3a:	2207      	movs	r2, #7
 8006f3c:	216b      	movs	r1, #107	; 0x6b
 8006f3e:	20d2      	movs	r0, #210	; 0xd2
 8006f40:	f004 f900 	bl	800b144 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 8006f44:	2300      	movs	r3, #0
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	2308      	movs	r3, #8
 8006f4a:	2207      	movs	r2, #7
 8006f4c:	216c      	movs	r1, #108	; 0x6c
 8006f4e:	20d2      	movs	r0, #210	; 0xd2
 8006f50:	f004 f8f8 	bl	800b144 <I2C_ByteWrite>
	HAL_Delay(200); // for stability
 8006f54:	20c8      	movs	r0, #200	; 0xc8
 8006f56:	f005 fb07 	bl	800c568 <HAL_Delay>

	// Configure device for bias calculation
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	2308      	movs	r3, #8
 8006f60:	2207      	movs	r2, #7
 8006f62:	2138      	movs	r1, #56	; 0x38
 8006f64:	20d2      	movs	r0, #210	; 0xd2
 8006f66:	f004 f8ed 	bl	800b144 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	2308      	movs	r3, #8
 8006f70:	2207      	movs	r2, #7
 8006f72:	2123      	movs	r1, #35	; 0x23
 8006f74:	20d2      	movs	r0, #210	; 0xd2
 8006f76:	f004 f8e5 	bl	800b144 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	2308      	movs	r3, #8
 8006f80:	2207      	movs	r2, #7
 8006f82:	216b      	movs	r1, #107	; 0x6b
 8006f84:	20d2      	movs	r0, #210	; 0xd2
 8006f86:	f004 f8dd 	bl	800b144 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	2308      	movs	r3, #8
 8006f90:	2207      	movs	r2, #7
 8006f92:	2124      	movs	r1, #36	; 0x24
 8006f94:	20d2      	movs	r0, #210	; 0xd2
 8006f96:	f004 f8d5 	bl	800b144 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	2308      	movs	r3, #8
 8006fa0:	2207      	movs	r2, #7
 8006fa2:	216a      	movs	r1, #106	; 0x6a
 8006fa4:	20d2      	movs	r0, #210	; 0xd2
 8006fa6:	f004 f8cd 	bl	800b144 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 8006faa:	230c      	movs	r3, #12
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	2308      	movs	r3, #8
 8006fb0:	2207      	movs	r2, #7
 8006fb2:	216a      	movs	r1, #106	; 0x6a
 8006fb4:	20d2      	movs	r0, #210	; 0xd2
 8006fb6:	f004 f8c5 	bl	800b144 <I2C_ByteWrite>
	HAL_Delay(15); // for stability
 8006fba:	200f      	movs	r0, #15
 8006fbc:	f005 fad4 	bl	800c568 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation.

	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x01); // Set low-pass filter to 188 Hz
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	2207      	movs	r2, #7
 8006fc8:	211a      	movs	r1, #26
 8006fca:	20d2      	movs	r0, #210	; 0xd2
 8006fcc:	f004 f8ba 	bl	800b144 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set sample rate to 1 kHz
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2308      	movs	r3, #8
 8006fd6:	2207      	movs	r2, #7
 8006fd8:	2119      	movs	r1, #25
 8006fda:	20d2      	movs	r0, #210	; 0xd2
 8006fdc:	f004 f8b2 	bl	800b144 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	2207      	movs	r2, #7
 8006fe8:	211b      	movs	r1, #27
 8006fea:	20d2      	movs	r0, #210	; 0xd2
 8006fec:	f004 f8aa 	bl	800b144 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	2308      	movs	r3, #8
 8006ff6:	2207      	movs	r2, #7
 8006ff8:	211c      	movs	r1, #28
 8006ffa:	20d2      	movs	r0, #210	; 0xd2
 8006ffc:	f004 f8a2 	bl	800b144 <I2C_ByteWrite>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8007000:	2383      	movs	r3, #131	; 0x83
 8007002:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8007006:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800700a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x40); // Enable FIFO
 800700e:	2340      	movs	r3, #64	; 0x40
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	2308      	movs	r3, #8
 8007014:	2207      	movs	r2, #7
 8007016:	216a      	movs	r1, #106	; 0x6a
 8007018:	20d2      	movs	r0, #210	; 0xd2
 800701a:	f004 f893 	bl	800b144 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 800701e:	2378      	movs	r3, #120	; 0x78
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	2308      	movs	r3, #8
 8007024:	2207      	movs	r2, #7
 8007026:	2123      	movs	r1, #35	; 0x23
 8007028:	20d2      	movs	r0, #210	; 0xd2
 800702a:	f004 f88b 	bl	800b144 <I2C_ByteWrite>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 800702e:	2028      	movs	r0, #40	; 0x28
 8007030:	f005 fa9a 	bl	800c568 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable gyro and accelerometer sensors for FIFO
 8007034:	2300      	movs	r3, #0
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	2308      	movs	r3, #8
 800703a:	2207      	movs	r2, #7
 800703c:	2123      	movs	r1, #35	; 0x23
 800703e:	20d2      	movs	r0, #210	; 0xd2
 8007040:	f004 f880 	bl	800b144 <I2C_ByteWrite>
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_COUNTH, 1, rawADC, 2);// read FIFO sample count
 8007044:	2302      	movs	r3, #2
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	4b61      	ldr	r3, [pc, #388]	; (80071d0 <calibrateMPU9250+0x2d4>)
 800704a:	2201      	movs	r2, #1
 800704c:	2172      	movs	r1, #114	; 0x72
 800704e:	20d2      	movs	r0, #210	; 0xd2
 8007050:	f004 f900 	bl	800b254 <I2C_ByteRead>
	fifo_count = ((uint16_t)rawADC[0] << 8) | rawADC[1];
 8007054:	4b5e      	ldr	r3, [pc, #376]	; (80071d0 <calibrateMPU9250+0x2d4>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	b21a      	sxth	r2, r3
 800705c:	4b5c      	ldr	r3, [pc, #368]	; (80071d0 <calibrateMPU9250+0x2d4>)
 800705e:	785b      	ldrb	r3, [r3, #1]
 8007060:	b21b      	sxth	r3, r3
 8007062:	4313      	orrs	r3, r2
 8007064:	b21b      	sxth	r3, r3
 8007066:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 800706a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800706e:	4a59      	ldr	r2, [pc, #356]	; (80071d4 <calibrateMPU9250+0x2d8>)
 8007070:	fba2 2303 	umull	r2, r3, r2, r3
 8007074:	08db      	lsrs	r3, r3, #3
 8007076:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (ii = 0; ii < packet_count; ii++)
 800707a:	2300      	movs	r3, #0
 800707c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007080:	e072      	b.n	8007168 <calibrateMPU9250+0x26c>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8007082:	2300      	movs	r3, #0
 8007084:	82bb      	strh	r3, [r7, #20]
 8007086:	2300      	movs	r3, #0
 8007088:	82fb      	strh	r3, [r7, #22]
 800708a:	2300      	movs	r3, #0
 800708c:	833b      	strh	r3, [r7, #24]
 800708e:	2300      	movs	r3, #0
 8007090:	81bb      	strh	r3, [r7, #12]
 8007092:	2300      	movs	r3, #0
 8007094:	81fb      	strh	r3, [r7, #14]
 8007096:	2300      	movs	r3, #0
 8007098:	823b      	strh	r3, [r7, #16]
		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_FIFO_R_W, 1, rawADC, 12);// read data for averaging
 800709a:	230c      	movs	r3, #12
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	4b4c      	ldr	r3, [pc, #304]	; (80071d0 <calibrateMPU9250+0x2d4>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	2174      	movs	r1, #116	; 0x74
 80070a4:	20d2      	movs	r0, #210	; 0xd2
 80070a6:	f004 f8d5 	bl	800b254 <I2C_ByteRead>

		accel_temp[0] = (int16_t) (((int16_t)rawADC[0] << 8) | rawADC[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80070aa:	4b49      	ldr	r3, [pc, #292]	; (80071d0 <calibrateMPU9250+0x2d4>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	b21a      	sxth	r2, r3
 80070b2:	4b47      	ldr	r3, [pc, #284]	; (80071d0 <calibrateMPU9250+0x2d4>)
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	b21b      	sxth	r3, r3
 80070b8:	4313      	orrs	r3, r2
 80070ba:	b21b      	sxth	r3, r3
 80070bc:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 80070be:	4b44      	ldr	r3, [pc, #272]	; (80071d0 <calibrateMPU9250+0x2d4>)
 80070c0:	789b      	ldrb	r3, [r3, #2]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	b21a      	sxth	r2, r3
 80070c6:	4b42      	ldr	r3, [pc, #264]	; (80071d0 <calibrateMPU9250+0x2d4>)
 80070c8:	78db      	ldrb	r3, [r3, #3]
 80070ca:	b21b      	sxth	r3, r3
 80070cc:	4313      	orrs	r3, r2
 80070ce:	b21b      	sxth	r3, r3
 80070d0:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 80070d2:	4b3f      	ldr	r3, [pc, #252]	; (80071d0 <calibrateMPU9250+0x2d4>)
 80070d4:	791b      	ldrb	r3, [r3, #4]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	b21a      	sxth	r2, r3
 80070da:	4b3d      	ldr	r3, [pc, #244]	; (80071d0 <calibrateMPU9250+0x2d4>)
 80070dc:	795b      	ldrb	r3, [r3, #5]
 80070de:	b21b      	sxth	r3, r3
 80070e0:	4313      	orrs	r3, r2
 80070e2:	b21b      	sxth	r3, r3
 80070e4:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)rawADC[6] << 8) | rawADC[7]  ) ;
 80070e6:	4b3a      	ldr	r3, [pc, #232]	; (80071d0 <calibrateMPU9250+0x2d4>)
 80070e8:	799b      	ldrb	r3, [r3, #6]
 80070ea:	021b      	lsls	r3, r3, #8
 80070ec:	b21a      	sxth	r2, r3
 80070ee:	4b38      	ldr	r3, [pc, #224]	; (80071d0 <calibrateMPU9250+0x2d4>)
 80070f0:	79db      	ldrb	r3, [r3, #7]
 80070f2:	b21b      	sxth	r3, r3
 80070f4:	4313      	orrs	r3, r2
 80070f6:	b21b      	sxth	r3, r3
 80070f8:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)rawADC[8] << 8) | rawADC[9]  ) ;
 80070fa:	4b35      	ldr	r3, [pc, #212]	; (80071d0 <calibrateMPU9250+0x2d4>)
 80070fc:	7a1b      	ldrb	r3, [r3, #8]
 80070fe:	021b      	lsls	r3, r3, #8
 8007100:	b21a      	sxth	r2, r3
 8007102:	4b33      	ldr	r3, [pc, #204]	; (80071d0 <calibrateMPU9250+0x2d4>)
 8007104:	7a5b      	ldrb	r3, [r3, #9]
 8007106:	b21b      	sxth	r3, r3
 8007108:	4313      	orrs	r3, r2
 800710a:	b21b      	sxth	r3, r3
 800710c:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)rawADC[10] << 8) | rawADC[11]) ;
 800710e:	4b30      	ldr	r3, [pc, #192]	; (80071d0 <calibrateMPU9250+0x2d4>)
 8007110:	7a9b      	ldrb	r3, [r3, #10]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	b21a      	sxth	r2, r3
 8007116:	4b2e      	ldr	r3, [pc, #184]	; (80071d0 <calibrateMPU9250+0x2d4>)
 8007118:	7adb      	ldrb	r3, [r3, #11]
 800711a:	b21b      	sxth	r3, r3
 800711c:	4313      	orrs	r3, r2
 800711e:	b21b      	sxth	r3, r3
 8007120:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007128:	4413      	add	r3, r2
 800712a:	62fb      	str	r3, [r7, #44]	; 0x2c
		accel_bias[1] += (int32_t) accel_temp[1];
 800712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007132:	4413      	add	r3, r2
 8007134:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[2] += (int32_t) accel_temp[2];
 8007136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007138:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800713c:	4413      	add	r3, r2
 800713e:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007150:	4413      	add	r3, r2
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8007154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007156:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800715a:	4413      	add	r3, r2
 800715c:	643b      	str	r3, [r7, #64]	; 0x40
	for (ii = 0; ii < packet_count; ii++)
 800715e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007162:	3301      	adds	r3, #1
 8007164:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007168:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800716c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007170:	429a      	cmp	r2, r3
 8007172:	d386      	bcc.n	8007082 <calibrateMPU9250+0x186>

	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8007174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007176:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800717a:	fb92 f3f3 	sdiv	r3, r2, r3
 800717e:	62fb      	str	r3, [r7, #44]	; 0x2c
	accel_bias[1] /= (int32_t) packet_count;
 8007180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007182:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007186:	fb92 f3f3 	sdiv	r3, r2, r3
 800718a:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[2] /= (int32_t) packet_count;
 800718c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800718e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007192:	fb92 f3f3 	sdiv	r3, r2, r3
 8007196:	637b      	str	r3, [r7, #52]	; 0x34
	gyro_bias[0]  /= (int32_t) packet_count;
 8007198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800719a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800719e:	fb92 f3f3 	sdiv	r3, r2, r3
 80071a2:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[1]  /= (int32_t) packet_count;
 80071a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80071aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[2]  /= (int32_t) packet_count;
 80071b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80071b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80071ba:	643b      	str	r3, [r7, #64]	; 0x40

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	2b00      	cmp	r3, #0
 80071c0:	dd0a      	ble.n	80071d8 <calibrateMPU9250+0x2dc>
 80071c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34
 80071cc:	e009      	b.n	80071e2 <calibrateMPU9250+0x2e6>
 80071ce:	bf00      	nop
 80071d0:	20000f0c 	.word	0x20000f0c
 80071d4:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 80071d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071da:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80071de:	4413      	add	r3, r2
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	425b      	negs	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da00      	bge.n	80071ec <calibrateMPU9250+0x2f0>
 80071ea:	3303      	adds	r3, #3
 80071ec:	109b      	asrs	r3, r3, #2
 80071ee:	121b      	asrs	r3, r3, #8
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	425b      	negs	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da00      	bge.n	8007200 <calibrateMPU9250+0x304>
 80071fe:	3303      	adds	r3, #3
 8007200:	109b      	asrs	r3, r3, #2
 8007202:	b2db      	uxtb	r3, r3
 8007204:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8007208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720a:	425b      	negs	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	da00      	bge.n	8007212 <calibrateMPU9250+0x316>
 8007210:	3303      	adds	r3, #3
 8007212:	109b      	asrs	r3, r3, #2
 8007214:	121b      	asrs	r3, r3, #8
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800721c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721e:	425b      	negs	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	da00      	bge.n	8007226 <calibrateMPU9250+0x32a>
 8007224:	3303      	adds	r3, #3
 8007226:	109b      	asrs	r3, r3, #2
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 800722e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007230:	425b      	negs	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	da00      	bge.n	8007238 <calibrateMPU9250+0x33c>
 8007236:	3303      	adds	r3, #3
 8007238:	109b      	asrs	r3, r3, #2
 800723a:	121b      	asrs	r3, r3, #8
 800723c:	b2db      	uxtb	r3, r3
 800723e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8007242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007244:	425b      	negs	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	da00      	bge.n	800724c <calibrateMPU9250+0x350>
 800724a:	3303      	adds	r3, #3
 800724c:	109b      	asrs	r3, r3, #2
 800724e:	b2db      	uxtb	r3, r3
 8007250:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YG_OFFS_USRL, 7, 8, data[3]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRH, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRL, 7, 8, data[5]);
	 */

	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	4618      	mov	r0, r3
 8007258:	f7f9 fd5a 	bl	8000d10 <__aeabi_i2f>
 800725c:	4604      	mov	r4, r0
 800725e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007262:	4618      	mov	r0, r3
 8007264:	f7f9 fd50 	bl	8000d08 <__aeabi_ui2f>
 8007268:	4603      	mov	r3, r0
 800726a:	4619      	mov	r1, r3
 800726c:	4620      	mov	r0, r4
 800726e:	f7f9 fe57 	bl	8000f20 <__aeabi_fdiv>
 8007272:	4603      	mov	r3, r0
 8007274:	461a      	mov	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 800727a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727c:	4618      	mov	r0, r3
 800727e:	f7f9 fd47 	bl	8000d10 <__aeabi_i2f>
 8007282:	4605      	mov	r5, r0
 8007284:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007288:	4618      	mov	r0, r3
 800728a:	f7f9 fd3d 	bl	8000d08 <__aeabi_ui2f>
 800728e:	4602      	mov	r2, r0
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	1d1c      	adds	r4, r3, #4
 8007294:	4611      	mov	r1, r2
 8007296:	4628      	mov	r0, r5
 8007298:	f7f9 fe42 	bl	8000f20 <__aeabi_fdiv>
 800729c:	4603      	mov	r3, r0
 800729e:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 80072a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7f9 fd34 	bl	8000d10 <__aeabi_i2f>
 80072a8:	4605      	mov	r5, r0
 80072aa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7f9 fd2a 	bl	8000d08 <__aeabi_ui2f>
 80072b4:	4602      	mov	r2, r0
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f103 0408 	add.w	r4, r3, #8
 80072bc:	4611      	mov	r1, r2
 80072be:	4628      	mov	r0, r5
 80072c0:	f7f9 fe2e 	bl	8000f20 <__aeabi_fdiv>
 80072c4:	4603      	mov	r3, r0
 80072c6:	6023      	str	r3, [r4, #0]
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 80072c8:	2300      	movs	r3, #0
 80072ca:	623b      	str	r3, [r7, #32]
 80072cc:	2300      	movs	r3, #0
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
 80072d0:	2300      	movs	r3, #0
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 80072d4:	2302      	movs	r3, #2
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	4b71      	ldr	r3, [pc, #452]	; (80074a0 <calibrateMPU9250+0x5a4>)
 80072da:	2201      	movs	r2, #1
 80072dc:	2177      	movs	r1, #119	; 0x77
 80072de:	20d2      	movs	r0, #210	; 0xd2
 80072e0:	f003 ffb8 	bl	800b254 <I2C_ByteRead>
	accel_bias_reg[0] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
 80072e4:	4b6e      	ldr	r3, [pc, #440]	; (80074a0 <calibrateMPU9250+0x5a4>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	b21b      	sxth	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	4b6c      	ldr	r3, [pc, #432]	; (80074a0 <calibrateMPU9250+0x5a4>)
 80072f0:	785b      	ldrb	r3, [r3, #1]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	623b      	str	r3, [r7, #32]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YA_OFFSET_H, 1, rawADC, 2);
 80072f6:	2302      	movs	r3, #2
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	4b69      	ldr	r3, [pc, #420]	; (80074a0 <calibrateMPU9250+0x5a4>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	217a      	movs	r1, #122	; 0x7a
 8007300:	20d2      	movs	r0, #210	; 0xd2
 8007302:	f003 ffa7 	bl	800b254 <I2C_ByteRead>
	accel_bias_reg[1] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
 8007306:	4b66      	ldr	r3, [pc, #408]	; (80074a0 <calibrateMPU9250+0x5a4>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	b21b      	sxth	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	4b63      	ldr	r3, [pc, #396]	; (80074a0 <calibrateMPU9250+0x5a4>)
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	4313      	orrs	r3, r2
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 1, rawADC, 2);
 8007318:	2302      	movs	r3, #2
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	4b60      	ldr	r3, [pc, #384]	; (80074a0 <calibrateMPU9250+0x5a4>)
 800731e:	2201      	movs	r2, #1
 8007320:	217d      	movs	r1, #125	; 0x7d
 8007322:	20d2      	movs	r0, #210	; 0xd2
 8007324:	f003 ff96 	bl	800b254 <I2C_ByteRead>
	accel_bias_reg[2] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
 8007328:	4b5d      	ldr	r3, [pc, #372]	; (80074a0 <calibrateMPU9250+0x5a4>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	b21b      	sxth	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	4b5b      	ldr	r3, [pc, #364]	; (80074a0 <calibrateMPU9250+0x5a4>)
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	4313      	orrs	r3, r2
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 800733a:	2301      	movs	r3, #1
 800733c:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 800733e:	2300      	movs	r3, #0
 8007340:	773b      	strb	r3, [r7, #28]
 8007342:	2300      	movs	r3, #0
 8007344:	777b      	strb	r3, [r7, #29]
 8007346:	2300      	movs	r3, #0
 8007348:	77bb      	strb	r3, [r7, #30]

	for(ii = 0; ii < 3; ii++)
 800734a:	2300      	movs	r3, #0
 800734c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007350:	e019      	b.n	8007386 <calibrateMPU9250+0x48a>
	{
		if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8007352:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800735c:	4413      	add	r3, r2
 800735e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8007362:	461a      	mov	r2, r3
 8007364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007366:	4013      	ands	r3, r2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d007      	beq.n	800737c <calibrateMPU9250+0x480>
 800736c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007370:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007374:	4413      	add	r3, r2
 8007376:	2201      	movs	r2, #1
 8007378:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(ii = 0; ii < 3; ii++)
 800737c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007380:	3301      	adds	r3, #1
 8007382:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007386:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800738a:	2b02      	cmp	r3, #2
 800738c:	d9e1      	bls.n	8007352 <calibrateMPU9250+0x456>
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800738e:	6a3a      	ldr	r2, [r7, #32]
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007392:	2b00      	cmp	r3, #0
 8007394:	da00      	bge.n	8007398 <calibrateMPU9250+0x49c>
 8007396:	3307      	adds	r3, #7
 8007398:	10db      	asrs	r3, r3, #3
 800739a:	425b      	negs	r3, r3
 800739c:	4413      	add	r3, r2
 800739e:	623b      	str	r3, [r7, #32]
	accel_bias_reg[1] -= (accel_bias[1]/8);
 80073a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	da00      	bge.n	80073aa <calibrateMPU9250+0x4ae>
 80073a8:	3307      	adds	r3, #7
 80073aa:	10db      	asrs	r3, r3, #3
 80073ac:	425b      	negs	r3, r3
 80073ae:	4413      	add	r3, r2
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[2] -= (accel_bias[2]/8);
 80073b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	da00      	bge.n	80073bc <calibrateMPU9250+0x4c0>
 80073ba:	3307      	adds	r3, #7
 80073bc:	10db      	asrs	r3, r3, #3
 80073be:	425b      	negs	r3, r3
 80073c0:	4413      	add	r3, r2
 80073c2:	62bb      	str	r3, [r7, #40]	; 0x28

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	121b      	asrs	r3, r3, #8
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (accel_bias_reg[0])      & 0xFF;
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80073d6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80073da:	7f3b      	ldrb	r3, [r7, #28]
 80073dc:	4313      	orrs	r3, r2
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	121b      	asrs	r3, r3, #8
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (accel_bias_reg[1])      & 0xFF;
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80073f6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80073fa:	7f7b      	ldrb	r3, [r7, #29]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	121b      	asrs	r3, r3, #8
 8007408:	b2db      	uxtb	r3, r3
 800740a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (accel_bias_reg[2])      & 0xFF;
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8007416:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800741a:	7fbb      	ldrb	r3, [r7, #30]
 800741c:	4313      	orrs	r3, r2
 800741e:	b2db      	uxtb	r3, r3
 8007420:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_L, 7, 8, data[5]);*/


	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	4618      	mov	r0, r3
 8007428:	f7f9 fc72 	bl	8000d10 <__aeabi_i2f>
 800742c:	4604      	mov	r4, r0
 800742e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007432:	4618      	mov	r0, r3
 8007434:	f7f9 fc68 	bl	8000d08 <__aeabi_ui2f>
 8007438:	4603      	mov	r3, r0
 800743a:	4619      	mov	r1, r3
 800743c:	4620      	mov	r0, r4
 800743e:	f7f9 fd6f 	bl	8000f20 <__aeabi_fdiv>
 8007442:	4603      	mov	r3, r0
 8007444:	461a      	mov	r2, r3
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	601a      	str	r2, [r3, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	4618      	mov	r0, r3
 800744e:	f7f9 fc5f 	bl	8000d10 <__aeabi_i2f>
 8007452:	4605      	mov	r5, r0
 8007454:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007458:	4618      	mov	r0, r3
 800745a:	f7f9 fc55 	bl	8000d08 <__aeabi_ui2f>
 800745e:	4602      	mov	r2, r0
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	1d1c      	adds	r4, r3, #4
 8007464:	4611      	mov	r1, r2
 8007466:	4628      	mov	r0, r5
 8007468:	f7f9 fd5a 	bl	8000f20 <__aeabi_fdiv>
 800746c:	4603      	mov	r3, r0
 800746e:	6023      	str	r3, [r4, #0]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8007470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007472:	4618      	mov	r0, r3
 8007474:	f7f9 fc4c 	bl	8000d10 <__aeabi_i2f>
 8007478:	4605      	mov	r5, r0
 800747a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800747e:	4618      	mov	r0, r3
 8007480:	f7f9 fc42 	bl	8000d08 <__aeabi_ui2f>
 8007484:	4602      	mov	r2, r0
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	f103 0408 	add.w	r4, r3, #8
 800748c:	4611      	mov	r1, r2
 800748e:	4628      	mov	r0, r5
 8007490:	f7f9 fd46 	bl	8000f20 <__aeabi_fdiv>
 8007494:	4603      	mov	r3, r0
 8007496:	6023      	str	r3, [r4, #0]
}
 8007498:	bf00      	nop
 800749a:	3760      	adds	r7, #96	; 0x60
 800749c:	46bd      	mov	sp, r7
 800749e:	bdb0      	pop	{r4, r5, r7, pc}
 80074a0:	20000f0c 	.word	0x20000f0c

080074a4 <initAK8963>:
void initAK8963(float * destination){
 80074a4:	b590      	push	{r4, r7, lr}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 80074ac:	2300      	movs	r3, #0
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	2308      	movs	r3, #8
 80074b2:	2207      	movs	r2, #7
 80074b4:	210a      	movs	r1, #10
 80074b6:	2018      	movs	r0, #24
 80074b8:	f003 fe44 	bl	800b144 <I2C_ByteWrite>
	  HAL_Delay(10);
 80074bc:	200a      	movs	r0, #10
 80074be:	f005 f853 	bl	800c568 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x0F);// Enter Fuse ROM access mode
 80074c2:	230f      	movs	r3, #15
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	2308      	movs	r3, #8
 80074c8:	2207      	movs	r2, #7
 80074ca:	210a      	movs	r1, #10
 80074cc:	2018      	movs	r0, #24
 80074ce:	f003 fe39 	bl	800b144 <I2C_ByteWrite>
	  HAL_Delay(10);
 80074d2:	200a      	movs	r0, #10
 80074d4:	f005 f848 	bl	800c568 <HAL_Delay>
	  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, AK8963_ASAX, 1, rawADC, 3);// Read the x-, y-, and z-axis calibration values
 80074d8:	2303      	movs	r3, #3
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	4b36      	ldr	r3, [pc, #216]	; (80075b8 <initAK8963+0x114>)
 80074de:	2201      	movs	r2, #1
 80074e0:	2110      	movs	r1, #16
 80074e2:	2018      	movs	r0, #24
 80074e4:	f003 feb6 	bl	800b254 <I2C_ByteRead>
	  destination[0] =  (float)(rawADC[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 80074e8:	4b33      	ldr	r3, [pc, #204]	; (80075b8 <initAK8963+0x114>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	3b80      	subs	r3, #128	; 0x80
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7f9 fc0e 	bl	8000d10 <__aeabi_i2f>
 80074f4:	4603      	mov	r3, r0
 80074f6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7f9 fd10 	bl	8000f20 <__aeabi_fdiv>
 8007500:	4603      	mov	r3, r0
 8007502:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007506:	4618      	mov	r0, r3
 8007508:	f7f9 fb4e 	bl	8000ba8 <__addsf3>
 800750c:	4603      	mov	r3, r0
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]
	  destination[1] =  (float)(rawADC[1] - 128)/256.0f + 1.0f;
 8007514:	4b28      	ldr	r3, [pc, #160]	; (80075b8 <initAK8963+0x114>)
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	3b80      	subs	r3, #128	; 0x80
 800751a:	4618      	mov	r0, r3
 800751c:	f7f9 fbf8 	bl	8000d10 <__aeabi_i2f>
 8007520:	4603      	mov	r3, r0
 8007522:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007526:	4618      	mov	r0, r3
 8007528:	f7f9 fcfa 	bl	8000f20 <__aeabi_fdiv>
 800752c:	4603      	mov	r3, r0
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	1d1c      	adds	r4, r3, #4
 8007534:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007538:	4610      	mov	r0, r2
 800753a:	f7f9 fb35 	bl	8000ba8 <__addsf3>
 800753e:	4603      	mov	r3, r0
 8007540:	6023      	str	r3, [r4, #0]
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 8007542:	4b1d      	ldr	r3, [pc, #116]	; (80075b8 <initAK8963+0x114>)
 8007544:	789b      	ldrb	r3, [r3, #2]
 8007546:	3b80      	subs	r3, #128	; 0x80
 8007548:	4618      	mov	r0, r3
 800754a:	f7f9 fbe1 	bl	8000d10 <__aeabi_i2f>
 800754e:	4603      	mov	r3, r0
 8007550:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007554:	4618      	mov	r0, r3
 8007556:	f7f9 fce3 	bl	8000f20 <__aeabi_fdiv>
 800755a:	4603      	mov	r3, r0
 800755c:	461a      	mov	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f103 0408 	add.w	r4, r3, #8
 8007564:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007568:	4610      	mov	r0, r2
 800756a:	f7f9 fb1d 	bl	8000ba8 <__addsf3>
 800756e:	4603      	mov	r3, r0
 8007570:	6023      	str	r3, [r4, #0]
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8007572:	2300      	movs	r3, #0
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	2308      	movs	r3, #8
 8007578:	2207      	movs	r2, #7
 800757a:	210a      	movs	r1, #10
 800757c:	2018      	movs	r0, #24
 800757e:	f003 fde1 	bl	800b144 <I2C_ByteWrite>
	  HAL_Delay(10);
 8007582:	200a      	movs	r0, #10
 8007584:	f004 fff0 	bl	800c568 <HAL_Delay>
	  // Configure the magnetometer for continuous read and highest resolution
	  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8007588:	4b0c      	ldr	r3, [pc, #48]	; (80075bc <initAK8963+0x118>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	b25a      	sxtb	r2, r3
 8007590:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <initAK8963+0x11c>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b25b      	sxtb	r3, r3
 8007596:	4313      	orrs	r3, r2
 8007598:	b25b      	sxtb	r3, r3
 800759a:	b2db      	uxtb	r3, r3
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	2308      	movs	r3, #8
 80075a0:	2207      	movs	r2, #7
 80075a2:	210a      	movs	r1, #10
 80075a4:	2018      	movs	r0, #24
 80075a6:	f003 fdcd 	bl	800b144 <I2C_ByteWrite>
	  HAL_Delay(10);
 80075aa:	200a      	movs	r0, #10
 80075ac:	f004 ffdc 	bl	800c568 <HAL_Delay>
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd90      	pop	{r4, r7, pc}
 80075b8:	20000f0c 	.word	0x20000f0c
 80075bc:	20000010 	.word	0x20000010
 80075c0:	20000011 	.word	0x20000011
 80075c4:	00000000 	.word	0x00000000

080075c8 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 80075c8:	b5b0      	push	{r4, r5, r7, lr}
 80075ca:	b096      	sub	sp, #88	; 0x58
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	6078      	str	r0, [r7, #4]
   uint8_t selfTest[6] = {0, 0, 0, 0, 0, 0};
 80075d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	809a      	strh	r2, [r3, #4]
   uint16_t i, ii;
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80075da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	809a      	strh	r2, [r3, #4]
 80075e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	809a      	strh	r2, [r3, #4]
 80075ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	809a      	strh	r2, [r3, #4]
 80075f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	809a      	strh	r2, [r3, #4]
   float factoryTrim[6];
   uint8_t FS = GFS_250DPS;
 8007602:	2300      	movs	r3, #0
 8007604:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 8007608:	2300      	movs	r3, #0
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	2308      	movs	r3, #8
 800760e:	2207      	movs	r2, #7
 8007610:	2119      	movs	r1, #25
 8007612:	20d2      	movs	r0, #210	; 0xd2
 8007614:	f003 fd96 	bl	800b144 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8007618:	2302      	movs	r3, #2
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	2308      	movs	r3, #8
 800761e:	2207      	movs	r2, #7
 8007620:	211a      	movs	r1, #26
 8007622:	20d2      	movs	r0, #210	; 0xd2
 8007624:	f003 fd8e 	bl	800b144 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, FS<<3);// Set full scale range for the gyro to 250 dps
 8007628:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	b2db      	uxtb	r3, r3
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	2308      	movs	r3, #8
 8007634:	2207      	movs	r2, #7
 8007636:	211b      	movs	r1, #27
 8007638:	20d2      	movs	r0, #210	; 0xd2
 800763a:	f003 fd83 	bl	800b144 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, 0x1D, 7, 8, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800763e:	2302      	movs	r3, #2
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	2308      	movs	r3, #8
 8007644:	2207      	movs	r2, #7
 8007646:	211d      	movs	r1, #29
 8007648:	20d2      	movs	r0, #210	; 0xd2
 800764a:	f003 fd7b 	bl	800b144 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, FS<<3);// Set full scale range for the accelerometer to 2 g
 800764e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	b2db      	uxtb	r3, r3
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	2308      	movs	r3, #8
 800765a:	2207      	movs	r2, #7
 800765c:	211c      	movs	r1, #28
 800765e:	20d2      	movs	r0, #210	; 0xd2
 8007660:	f003 fd70 	bl	800b144 <I2C_ByteWrite>

  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8007664:	2300      	movs	r3, #0
 8007666:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800766a:	e07b      	b.n	8007764 <MPU9250SelfTest+0x19c>

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);  // Read the six raw data registers into data array
 800766c:	2306      	movs	r3, #6
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	4baa      	ldr	r3, [pc, #680]	; (800791c <MPU9250SelfTest+0x354>)
 8007672:	2201      	movs	r2, #1
 8007674:	213b      	movs	r1, #59	; 0x3b
 8007676:	20d2      	movs	r0, #210	; 0xd2
 8007678:	f003 fdec 	bl	800b254 <I2C_ByteRead>
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800767c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8007680:	b29a      	uxth	r2, r3
 8007682:	4ba6      	ldr	r3, [pc, #664]	; (800791c <MPU9250SelfTest+0x354>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	021b      	lsls	r3, r3, #8
 8007688:	b219      	sxth	r1, r3
 800768a:	4ba4      	ldr	r3, [pc, #656]	; (800791c <MPU9250SelfTest+0x354>)
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	b21b      	sxth	r3, r3
 8007690:	430b      	orrs	r3, r1
 8007692:	b21b      	sxth	r3, r3
 8007694:	b29b      	uxth	r3, r3
 8007696:	4413      	add	r3, r2
 8007698:	b29b      	uxth	r3, r3
 800769a:	b21b      	sxth	r3, r3
 800769c:	86bb      	strh	r3, [r7, #52]	; 0x34
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 800769e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	4b9d      	ldr	r3, [pc, #628]	; (800791c <MPU9250SelfTest+0x354>)
 80076a6:	789b      	ldrb	r3, [r3, #2]
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	b219      	sxth	r1, r3
 80076ac:	4b9b      	ldr	r3, [pc, #620]	; (800791c <MPU9250SelfTest+0x354>)
 80076ae:	78db      	ldrb	r3, [r3, #3]
 80076b0:	b21b      	sxth	r3, r3
 80076b2:	430b      	orrs	r3, r1
 80076b4:	b21b      	sxth	r3, r3
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	4413      	add	r3, r2
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	b21b      	sxth	r3, r3
 80076be:	86fb      	strh	r3, [r7, #54]	; 0x36
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 80076c0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	4b95      	ldr	r3, [pc, #596]	; (800791c <MPU9250SelfTest+0x354>)
 80076c8:	791b      	ldrb	r3, [r3, #4]
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	b219      	sxth	r1, r3
 80076ce:	4b93      	ldr	r3, [pc, #588]	; (800791c <MPU9250SelfTest+0x354>)
 80076d0:	795b      	ldrb	r3, [r3, #5]
 80076d2:	b21b      	sxth	r3, r3
 80076d4:	430b      	orrs	r3, r1
 80076d6:	b21b      	sxth	r3, r3
 80076d8:	b29b      	uxth	r3, r3
 80076da:	4413      	add	r3, r2
 80076dc:	b29b      	uxth	r3, r3
 80076de:	b21b      	sxth	r3, r3
 80076e0:	873b      	strh	r3, [r7, #56]	; 0x38

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 80076e2:	2306      	movs	r3, #6
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	4b8d      	ldr	r3, [pc, #564]	; (800791c <MPU9250SelfTest+0x354>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	2143      	movs	r1, #67	; 0x43
 80076ec:	20d2      	movs	r0, #210	; 0xd2
 80076ee:	f003 fdb1 	bl	800b254 <I2C_ByteRead>
  gAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80076f2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	4b88      	ldr	r3, [pc, #544]	; (800791c <MPU9250SelfTest+0x354>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	021b      	lsls	r3, r3, #8
 80076fe:	b219      	sxth	r1, r3
 8007700:	4b86      	ldr	r3, [pc, #536]	; (800791c <MPU9250SelfTest+0x354>)
 8007702:	785b      	ldrb	r3, [r3, #1]
 8007704:	b21b      	sxth	r3, r3
 8007706:	430b      	orrs	r3, r1
 8007708:	b21b      	sxth	r3, r3
 800770a:	b29b      	uxth	r3, r3
 800770c:	4413      	add	r3, r2
 800770e:	b29b      	uxth	r3, r3
 8007710:	b21b      	sxth	r3, r3
 8007712:	87bb      	strh	r3, [r7, #60]	; 0x3c
  gAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8007714:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8007718:	b29a      	uxth	r2, r3
 800771a:	4b80      	ldr	r3, [pc, #512]	; (800791c <MPU9250SelfTest+0x354>)
 800771c:	789b      	ldrb	r3, [r3, #2]
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	b219      	sxth	r1, r3
 8007722:	4b7e      	ldr	r3, [pc, #504]	; (800791c <MPU9250SelfTest+0x354>)
 8007724:	78db      	ldrb	r3, [r3, #3]
 8007726:	b21b      	sxth	r3, r3
 8007728:	430b      	orrs	r3, r1
 800772a:	b21b      	sxth	r3, r3
 800772c:	b29b      	uxth	r3, r3
 800772e:	4413      	add	r3, r2
 8007730:	b29b      	uxth	r3, r3
 8007732:	b21b      	sxth	r3, r3
 8007734:	87fb      	strh	r3, [r7, #62]	; 0x3e
  gAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8007736:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800773a:	b29a      	uxth	r2, r3
 800773c:	4b77      	ldr	r3, [pc, #476]	; (800791c <MPU9250SelfTest+0x354>)
 800773e:	791b      	ldrb	r3, [r3, #4]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	b219      	sxth	r1, r3
 8007744:	4b75      	ldr	r3, [pc, #468]	; (800791c <MPU9250SelfTest+0x354>)
 8007746:	795b      	ldrb	r3, [r3, #5]
 8007748:	b21b      	sxth	r3, r3
 800774a:	430b      	orrs	r3, r1
 800774c:	b21b      	sxth	r3, r3
 800774e:	b29b      	uxth	r3, r3
 8007750:	4413      	add	r3, r2
 8007752:	b29b      	uxth	r3, r3
 8007754:	b21b      	sxth	r3, r3
 8007756:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800775a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800775e:	3301      	adds	r3, #1
 8007760:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007764:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007768:	2bc7      	cmp	r3, #199	; 0xc7
 800776a:	f67f af7f 	bls.w	800766c <MPU9250SelfTest+0xa4>
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 800776e:	2300      	movs	r3, #0
 8007770:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007774:	e034      	b.n	80077e0 <MPU9250SelfTest+0x218>
  aAvg[ii] /= 200;
 8007776:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007780:	4413      	add	r3, r2
 8007782:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8007786:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800778a:	4965      	ldr	r1, [pc, #404]	; (8007920 <MPU9250SelfTest+0x358>)
 800778c:	fb81 0103 	smull	r0, r1, r1, r3
 8007790:	1189      	asrs	r1, r1, #6
 8007792:	17db      	asrs	r3, r3, #31
 8007794:	1acb      	subs	r3, r1, r3
 8007796:	b219      	sxth	r1, r3
 8007798:	0053      	lsls	r3, r2, #1
 800779a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800779e:	4413      	add	r3, r2
 80077a0:	460a      	mov	r2, r1
 80077a2:	f823 2c1c 	strh.w	r2, [r3, #-28]
  gAvg[ii] /= 200;
 80077a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80077b0:	4413      	add	r3, r2
 80077b2:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80077b6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80077ba:	4959      	ldr	r1, [pc, #356]	; (8007920 <MPU9250SelfTest+0x358>)
 80077bc:	fb81 0103 	smull	r0, r1, r1, r3
 80077c0:	1189      	asrs	r1, r1, #6
 80077c2:	17db      	asrs	r3, r3, #31
 80077c4:	1acb      	subs	r3, r1, r3
 80077c6:	b219      	sxth	r1, r3
 80077c8:	0053      	lsls	r3, r2, #1
 80077ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80077ce:	4413      	add	r3, r2
 80077d0:	460a      	mov	r2, r1
 80077d2:	f823 2c14 	strh.w	r2, [r3, #-20]
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80077d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077da:	3301      	adds	r3, #1
 80077dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80077e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d9c6      	bls.n	8007776 <MPU9250SelfTest+0x1ae>
  }

// Configure the accelerometer for self-test
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80077e8:	23e0      	movs	r3, #224	; 0xe0
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	2308      	movs	r3, #8
 80077ee:	2207      	movs	r2, #7
 80077f0:	211c      	movs	r1, #28
 80077f2:	20d2      	movs	r0, #210	; 0xd2
 80077f4:	f003 fca6 	bl	800b144 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80077f8:	23e0      	movs	r3, #224	; 0xe0
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	2308      	movs	r3, #8
 80077fe:	2207      	movs	r2, #7
 8007800:	211b      	movs	r1, #27
 8007802:	20d2      	movs	r0, #210	; 0xd2
 8007804:	f003 fc9e 	bl	800b144 <I2C_ByteWrite>
   HAL_Delay(25); // Delay a while to let the device stabilize
 8007808:	2019      	movs	r0, #25
 800780a:	f004 fead 	bl	800c568 <HAL_Delay>

  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 800780e:	2300      	movs	r3, #0
 8007810:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007814:	e07a      	b.n	800790c <MPU9250SelfTest+0x344>

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6); // Read the six raw data registers into data array
 8007816:	2306      	movs	r3, #6
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	4b40      	ldr	r3, [pc, #256]	; (800791c <MPU9250SelfTest+0x354>)
 800781c:	2201      	movs	r2, #1
 800781e:	213b      	movs	r1, #59	; 0x3b
 8007820:	20d2      	movs	r0, #210	; 0xd2
 8007822:	f003 fd17 	bl	800b254 <I2C_ByteRead>
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8007826:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800782a:	b29a      	uxth	r2, r3
 800782c:	4b3b      	ldr	r3, [pc, #236]	; (800791c <MPU9250SelfTest+0x354>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	b219      	sxth	r1, r3
 8007834:	4b39      	ldr	r3, [pc, #228]	; (800791c <MPU9250SelfTest+0x354>)
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	b21b      	sxth	r3, r3
 800783a:	430b      	orrs	r3, r1
 800783c:	b21b      	sxth	r3, r3
 800783e:	b29b      	uxth	r3, r3
 8007840:	4413      	add	r3, r2
 8007842:	b29b      	uxth	r3, r3
 8007844:	b21b      	sxth	r3, r3
 8007846:	85bb      	strh	r3, [r7, #44]	; 0x2c
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8007848:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800784c:	b29a      	uxth	r2, r3
 800784e:	4b33      	ldr	r3, [pc, #204]	; (800791c <MPU9250SelfTest+0x354>)
 8007850:	789b      	ldrb	r3, [r3, #2]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	b219      	sxth	r1, r3
 8007856:	4b31      	ldr	r3, [pc, #196]	; (800791c <MPU9250SelfTest+0x354>)
 8007858:	78db      	ldrb	r3, [r3, #3]
 800785a:	b21b      	sxth	r3, r3
 800785c:	430b      	orrs	r3, r1
 800785e:	b21b      	sxth	r3, r3
 8007860:	b29b      	uxth	r3, r3
 8007862:	4413      	add	r3, r2
 8007864:	b29b      	uxth	r3, r3
 8007866:	b21b      	sxth	r3, r3
 8007868:	85fb      	strh	r3, [r7, #46]	; 0x2e
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 800786a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800786e:	b29a      	uxth	r2, r3
 8007870:	4b2a      	ldr	r3, [pc, #168]	; (800791c <MPU9250SelfTest+0x354>)
 8007872:	791b      	ldrb	r3, [r3, #4]
 8007874:	021b      	lsls	r3, r3, #8
 8007876:	b219      	sxth	r1, r3
 8007878:	4b28      	ldr	r3, [pc, #160]	; (800791c <MPU9250SelfTest+0x354>)
 800787a:	795b      	ldrb	r3, [r3, #5]
 800787c:	b21b      	sxth	r3, r3
 800787e:	430b      	orrs	r3, r1
 8007880:	b21b      	sxth	r3, r3
 8007882:	b29b      	uxth	r3, r3
 8007884:	4413      	add	r3, r2
 8007886:	b29b      	uxth	r3, r3
 8007888:	b21b      	sxth	r3, r3
 800788a:	863b      	strh	r3, [r7, #48]	; 0x30

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 800788c:	2306      	movs	r3, #6
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	4b22      	ldr	r3, [pc, #136]	; (800791c <MPU9250SelfTest+0x354>)
 8007892:	2201      	movs	r2, #1
 8007894:	2143      	movs	r1, #67	; 0x43
 8007896:	20d2      	movs	r0, #210	; 0xd2
 8007898:	f003 fcdc 	bl	800b254 <I2C_ByteRead>
  gSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800789c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	4b1e      	ldr	r3, [pc, #120]	; (800791c <MPU9250SelfTest+0x354>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	021b      	lsls	r3, r3, #8
 80078a8:	b219      	sxth	r1, r3
 80078aa:	4b1c      	ldr	r3, [pc, #112]	; (800791c <MPU9250SelfTest+0x354>)
 80078ac:	785b      	ldrb	r3, [r3, #1]
 80078ae:	b21b      	sxth	r3, r3
 80078b0:	430b      	orrs	r3, r1
 80078b2:	b21b      	sxth	r3, r3
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	4413      	add	r3, r2
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	b21b      	sxth	r3, r3
 80078bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  gSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 80078be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	4b15      	ldr	r3, [pc, #84]	; (800791c <MPU9250SelfTest+0x354>)
 80078c6:	789b      	ldrb	r3, [r3, #2]
 80078c8:	021b      	lsls	r3, r3, #8
 80078ca:	b219      	sxth	r1, r3
 80078cc:	4b13      	ldr	r3, [pc, #76]	; (800791c <MPU9250SelfTest+0x354>)
 80078ce:	78db      	ldrb	r3, [r3, #3]
 80078d0:	b21b      	sxth	r3, r3
 80078d2:	430b      	orrs	r3, r1
 80078d4:	b21b      	sxth	r3, r3
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	4413      	add	r3, r2
 80078da:	b29b      	uxth	r3, r3
 80078dc:	b21b      	sxth	r3, r3
 80078de:	84fb      	strh	r3, [r7, #38]	; 0x26
  gSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 80078e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	4b0d      	ldr	r3, [pc, #52]	; (800791c <MPU9250SelfTest+0x354>)
 80078e8:	791b      	ldrb	r3, [r3, #4]
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	b219      	sxth	r1, r3
 80078ee:	4b0b      	ldr	r3, [pc, #44]	; (800791c <MPU9250SelfTest+0x354>)
 80078f0:	795b      	ldrb	r3, [r3, #5]
 80078f2:	b21b      	sxth	r3, r3
 80078f4:	430b      	orrs	r3, r1
 80078f6:	b21b      	sxth	r3, r3
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	4413      	add	r3, r2
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	b21b      	sxth	r3, r3
 8007900:	853b      	strh	r3, [r7, #40]	; 0x28
  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8007902:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007906:	3301      	adds	r3, #1
 8007908:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800790c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007910:	2bc7      	cmp	r3, #199	; 0xc7
 8007912:	d980      	bls.n	8007816 <MPU9250SelfTest+0x24e>
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8007914:	2300      	movs	r3, #0
 8007916:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800791a:	e038      	b.n	800798e <MPU9250SelfTest+0x3c6>
 800791c:	20000f0c 	.word	0x20000f0c
 8007920:	51eb851f 	.word	0x51eb851f
  aSTAvg[ii] /= 200;
 8007924:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800792e:	4413      	add	r3, r2
 8007930:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8007934:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007938:	49cf      	ldr	r1, [pc, #828]	; (8007c78 <MPU9250SelfTest+0x6b0>)
 800793a:	fb81 0103 	smull	r0, r1, r1, r3
 800793e:	1189      	asrs	r1, r1, #6
 8007940:	17db      	asrs	r3, r3, #31
 8007942:	1acb      	subs	r3, r1, r3
 8007944:	b219      	sxth	r1, r3
 8007946:	0053      	lsls	r3, r2, #1
 8007948:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800794c:	4413      	add	r3, r2
 800794e:	460a      	mov	r2, r1
 8007950:	f823 2c24 	strh.w	r2, [r3, #-36]
  gSTAvg[ii] /= 200;
 8007954:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800795e:	4413      	add	r3, r2
 8007960:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8007964:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007968:	49c3      	ldr	r1, [pc, #780]	; (8007c78 <MPU9250SelfTest+0x6b0>)
 800796a:	fb81 0103 	smull	r0, r1, r1, r3
 800796e:	1189      	asrs	r1, r1, #6
 8007970:	17db      	asrs	r3, r3, #31
 8007972:	1acb      	subs	r3, r1, r3
 8007974:	b219      	sxth	r1, r3
 8007976:	0053      	lsls	r3, r2, #1
 8007978:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800797c:	4413      	add	r3, r2
 800797e:	460a      	mov	r2, r1
 8007980:	f823 2c2c 	strh.w	r2, [r3, #-44]
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8007984:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007988:	3301      	adds	r3, #1
 800798a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800798e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007992:	2b02      	cmp	r3, #2
 8007994:	d9c6      	bls.n	8007924 <MPU9250SelfTest+0x35c>
  }

 // Configure the gyro and accelerometer for normal operation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 8007996:	2300      	movs	r3, #0
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	2308      	movs	r3, #8
 800799c:	2207      	movs	r2, #7
 800799e:	211c      	movs	r1, #28
 80079a0:	20d2      	movs	r0, #210	; 0xd2
 80079a2:	f003 fbcf 	bl	800b144 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
 80079a6:	2300      	movs	r3, #0
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	2308      	movs	r3, #8
 80079ac:	2207      	movs	r2, #7
 80079ae:	211b      	movs	r1, #27
 80079b0:	20d2      	movs	r0, #210	; 0xd2
 80079b2:	f003 fbc7 	bl	800b144 <I2C_ByteWrite>
  HAL_Delay(25); // Delay a while to let the device stabilize
 80079b6:	2019      	movs	r0, #25
 80079b8:	f004 fdd6 	bl	800c568 <HAL_Delay>

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 80079bc:	2303      	movs	r3, #3
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	4bae      	ldr	r3, [pc, #696]	; (8007c7c <MPU9250SelfTest+0x6b4>)
 80079c2:	2201      	movs	r2, #1
 80079c4:	210d      	movs	r1, #13
 80079c6:	20d2      	movs	r0, #210	; 0xd2
 80079c8:	f003 fc44 	bl	800b254 <I2C_ByteRead>
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
 80079cc:	4bab      	ldr	r3, [pc, #684]	; (8007c7c <MPU9250SelfTest+0x6b4>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
 80079d4:	4ba9      	ldr	r3, [pc, #676]	; (8007c7c <MPU9250SelfTest+0x6b4>)
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 80079dc:	4ba7      	ldr	r3, [pc, #668]	; (8007c7c <MPU9250SelfTest+0x6b4>)
 80079de:	789b      	ldrb	r3, [r3, #2]
 80079e0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 80079e4:	2303      	movs	r3, #3
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	4ba4      	ldr	r3, [pc, #656]	; (8007c7c <MPU9250SelfTest+0x6b4>)
 80079ea:	2201      	movs	r2, #1
 80079ec:	2100      	movs	r1, #0
 80079ee:	20d2      	movs	r0, #210	; 0xd2
 80079f0:	f003 fc30 	bl	800b254 <I2C_ByteRead>
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 80079f4:	4ba1      	ldr	r3, [pc, #644]	; (8007c7c <MPU9250SelfTest+0x6b4>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 80079fc:	4b9f      	ldr	r3, [pc, #636]	; (8007c7c <MPU9250SelfTest+0x6b4>)
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results
 8007a04:	4b9d      	ldr	r3, [pc, #628]	; (8007c7c <MPU9250SelfTest+0x6b4>)
 8007a06:	789b      	ldrb	r3, [r3, #2]
 8007a08:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8007a0c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a10:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7f9 f979 	bl	8000d10 <__aeabi_i2f>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7f8 fd1b 	bl	800045c <__aeabi_f2d>
 8007a26:	4604      	mov	r4, r0
 8007a28:	460d      	mov	r5, r1
 8007a2a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7f9 f96a 	bl	8000d08 <__aeabi_ui2f>
 8007a34:	4603      	mov	r3, r0
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7f8 fd10 	bl	800045c <__aeabi_f2d>
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	4b8f      	ldr	r3, [pc, #572]	; (8007c80 <MPU9250SelfTest+0x6b8>)
 8007a42:	f7f8 fbab 	bl	800019c <__aeabi_dsub>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	a189      	add	r1, pc, #548	; (adr r1, 8007c70 <MPU9250SelfTest+0x6a8>)
 8007a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a50:	f00d fd10 	bl	8015474 <pow>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4620      	mov	r0, r4
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	f7f8 fd56 	bl	800050c <__aeabi_dmul>
 8007a60:	4603      	mov	r3, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	4618      	mov	r0, r3
 8007a66:	4621      	mov	r1, r4
 8007a68:	f7f9 f848 	bl	8000afc <__aeabi_d2f>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	60fb      	str	r3, [r7, #12]
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8007a70:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a74:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007a78:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7f9 f947 	bl	8000d10 <__aeabi_i2f>
 8007a82:	4603      	mov	r3, r0
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7f8 fce9 	bl	800045c <__aeabi_f2d>
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	460d      	mov	r5, r1
 8007a8e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7f9 f938 	bl	8000d08 <__aeabi_ui2f>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7f8 fcde 	bl	800045c <__aeabi_f2d>
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	4b76      	ldr	r3, [pc, #472]	; (8007c80 <MPU9250SelfTest+0x6b8>)
 8007aa6:	f7f8 fb79 	bl	800019c <__aeabi_dsub>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	a170      	add	r1, pc, #448	; (adr r1, 8007c70 <MPU9250SelfTest+0x6a8>)
 8007ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab4:	f00d fcde 	bl	8015474 <pow>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4620      	mov	r0, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f7f8 fd24 	bl	800050c <__aeabi_dmul>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	4618      	mov	r0, r3
 8007aca:	4621      	mov	r1, r4
 8007acc:	f7f9 f816 	bl	8000afc <__aeabi_d2f>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	613b      	str	r3, [r7, #16]
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8007ad4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007ad8:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007adc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7f9 f915 	bl	8000d10 <__aeabi_i2f>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7f8 fcb7 	bl	800045c <__aeabi_f2d>
 8007aee:	4604      	mov	r4, r0
 8007af0:	460d      	mov	r5, r1
 8007af2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7f9 f906 	bl	8000d08 <__aeabi_ui2f>
 8007afc:	4603      	mov	r3, r0
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7f8 fcac 	bl	800045c <__aeabi_f2d>
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	4b5d      	ldr	r3, [pc, #372]	; (8007c80 <MPU9250SelfTest+0x6b8>)
 8007b0a:	f7f8 fb47 	bl	800019c <__aeabi_dsub>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	a157      	add	r1, pc, #348	; (adr r1, 8007c70 <MPU9250SelfTest+0x6a8>)
 8007b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b18:	f00d fcac 	bl	8015474 <pow>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4620      	mov	r0, r4
 8007b22:	4629      	mov	r1, r5
 8007b24:	f7f8 fcf2 	bl	800050c <__aeabi_dmul>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	4621      	mov	r1, r4
 8007b30:	f7f8 ffe4 	bl	8000afc <__aeabi_d2f>
 8007b34:	4603      	mov	r3, r0
 8007b36:	617b      	str	r3, [r7, #20]
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8007b38:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007b3c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007b40:	fa02 f303 	lsl.w	r3, r2, r3
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7f9 f8e3 	bl	8000d10 <__aeabi_i2f>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7f8 fc85 	bl	800045c <__aeabi_f2d>
 8007b52:	4604      	mov	r4, r0
 8007b54:	460d      	mov	r5, r1
 8007b56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7f9 f8d4 	bl	8000d08 <__aeabi_ui2f>
 8007b60:	4603      	mov	r3, r0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7f8 fc7a 	bl	800045c <__aeabi_f2d>
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	4b44      	ldr	r3, [pc, #272]	; (8007c80 <MPU9250SelfTest+0x6b8>)
 8007b6e:	f7f8 fb15 	bl	800019c <__aeabi_dsub>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	a13e      	add	r1, pc, #248	; (adr r1, 8007c70 <MPU9250SelfTest+0x6a8>)
 8007b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b7c:	f00d fc7a 	bl	8015474 <pow>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4620      	mov	r0, r4
 8007b86:	4629      	mov	r1, r5
 8007b88:	f7f8 fcc0 	bl	800050c <__aeabi_dmul>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	4618      	mov	r0, r3
 8007b92:	4621      	mov	r1, r4
 8007b94:	f7f8 ffb2 	bl	8000afc <__aeabi_d2f>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	61bb      	str	r3, [r7, #24]
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8007b9c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007ba0:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7f9 f8b1 	bl	8000d10 <__aeabi_i2f>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7f8 fc53 	bl	800045c <__aeabi_f2d>
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	460d      	mov	r5, r1
 8007bba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7f9 f8a2 	bl	8000d08 <__aeabi_ui2f>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7f8 fc48 	bl	800045c <__aeabi_f2d>
 8007bcc:	f04f 0200 	mov.w	r2, #0
 8007bd0:	4b2b      	ldr	r3, [pc, #172]	; (8007c80 <MPU9250SelfTest+0x6b8>)
 8007bd2:	f7f8 fae3 	bl	800019c <__aeabi_dsub>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	a125      	add	r1, pc, #148	; (adr r1, 8007c70 <MPU9250SelfTest+0x6a8>)
 8007bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007be0:	f00d fc48 	bl	8015474 <pow>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4620      	mov	r0, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	f7f8 fc8e 	bl	800050c <__aeabi_dmul>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	f7f8 ff80 	bl	8000afc <__aeabi_d2f>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	61fb      	str	r3, [r7, #28]
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8007c00:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007c04:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7f9 f87f 	bl	8000d10 <__aeabi_i2f>
 8007c12:	4603      	mov	r3, r0
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7f8 fc21 	bl	800045c <__aeabi_f2d>
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	460d      	mov	r5, r1
 8007c1e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7f9 f870 	bl	8000d08 <__aeabi_ui2f>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7f8 fc16 	bl	800045c <__aeabi_f2d>
 8007c30:	f04f 0200 	mov.w	r2, #0
 8007c34:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <MPU9250SelfTest+0x6b8>)
 8007c36:	f7f8 fab1 	bl	800019c <__aeabi_dsub>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	a10c      	add	r1, pc, #48	; (adr r1, 8007c70 <MPU9250SelfTest+0x6a8>)
 8007c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c44:	f00d fc16 	bl	8015474 <pow>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	4629      	mov	r1, r5
 8007c50:	f7f8 fc5c 	bl	800050c <__aeabi_dmul>
 8007c54:	4603      	mov	r3, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	4618      	mov	r0, r3
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	f7f8 ff4e 	bl	8000afc <__aeabi_d2f>
 8007c60:	4603      	mov	r3, r0
 8007c62:	623b      	str	r3, [r7, #32]

 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (i = 0; i < 3; i++) {
 8007c64:	2300      	movs	r3, #0
 8007c66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c6a:	e092      	b.n	8007d92 <MPU9250SelfTest+0x7ca>
 8007c6c:	f3af 8000 	nop.w
 8007c70:	c28f5c29 	.word	0xc28f5c29
 8007c74:	3ff028f5 	.word	0x3ff028f5
 8007c78:	51eb851f 	.word	0x51eb851f
 8007c7c:	20000f0c 	.word	0x20000f0c
 8007c80:	3ff00000 	.word	0x3ff00000
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];// - 100.0; // Report percent differences
 8007c84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007c8e:	4413      	add	r3, r2
 8007c90:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8007c94:	461a      	mov	r2, r3
 8007c96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007ca0:	440b      	add	r3, r1
 8007ca2:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7f9 f831 	bl	8000d10 <__aeabi_i2f>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7f8 fbd3 	bl	800045c <__aeabi_f2d>
 8007cb6:	f04f 0200 	mov.w	r2, #0
 8007cba:	4b3a      	ldr	r3, [pc, #232]	; (8007da4 <MPU9250SelfTest+0x7dc>)
 8007cbc:	f7f8 fc26 	bl	800050c <__aeabi_dmul>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	4625      	mov	r5, r4
 8007cc6:	461c      	mov	r4, r3
 8007cc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7f8 fbbf 	bl	800045c <__aeabi_f2d>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	f7f8 fd3b 	bl	8000760 <__aeabi_ddiv>
 8007cea:	4603      	mov	r3, r0
 8007cec:	460c      	mov	r4, r1
 8007cee:	4618      	mov	r0, r3
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	18d4      	adds	r4, r2, r3
 8007cfc:	f7f8 fefe 	bl	8000afc <__aeabi_d2f>
 8007d00:	4603      	mov	r3, r0
 8007d02:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3];// - 100.0; // Report percent differences
 8007d04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007d0e:	4413      	add	r3, r2
 8007d10:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8007d14:	461a      	mov	r2, r3
 8007d16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007d20:	440b      	add	r3, r1
 8007d22:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7f8 fff1 	bl	8000d10 <__aeabi_i2f>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7f8 fb93 	bl	800045c <__aeabi_f2d>
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <MPU9250SelfTest+0x7dc>)
 8007d3c:	f7f8 fbe6 	bl	800050c <__aeabi_dmul>
 8007d40:	4603      	mov	r3, r0
 8007d42:	460c      	mov	r4, r1
 8007d44:	4625      	mov	r5, r4
 8007d46:	461c      	mov	r4, r3
 8007d48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d4c:	3303      	adds	r3, #3
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007d54:	4413      	add	r3, r2
 8007d56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7f8 fb7e 	bl	800045c <__aeabi_f2d>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 fcfa 	bl	8000760 <__aeabi_ddiv>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	460c      	mov	r4, r1
 8007d70:	4618      	mov	r0, r3
 8007d72:	4621      	mov	r1, r4
 8007d74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d78:	3303      	adds	r3, #3
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	18d4      	adds	r4, r2, r3
 8007d80:	f7f8 febc 	bl	8000afc <__aeabi_d2f>
 8007d84:	4603      	mov	r3, r0
 8007d86:	6023      	str	r3, [r4, #0]
   for (i = 0; i < 3; i++) {
 8007d88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	f67f af74 	bls.w	8007c84 <MPU9250SelfTest+0x6bc>
   }
}
 8007d9c:	bf00      	nop
 8007d9e:	3750      	adds	r7, #80	; 0x50
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bdb0      	pop	{r4, r5, r7, pc}
 8007da4:	40590000 	.word	0x40590000

08007da8 <MS5611_Init>:
alt_t alt;

static void cliBaro(cli_args_t *args);

void MS5611_Init(ms5611_osr_t osr)
{
 8007da8:	b590      	push	{r4, r7, lr}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	71fb      	strb	r3, [r7, #7]
#ifdef debug
	logPrintf("Initialize MS-5611 Sensor\r\n");
#endif
  I2C_Write(MS5611_ADDRESS, MS5611_CMD_RESET, 1);
 8007db2:	2201      	movs	r2, #1
 8007db4:	211e      	movs	r1, #30
 8007db6:	20ee      	movs	r0, #238	; 0xee
 8007db8:	f003 fac8 	bl	800b34c <I2C_Write>
  // Set oversampling value
  switch (osr)
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	2b08      	cmp	r3, #8
 8007dc0:	d828      	bhi.n	8007e14 <MS5611_Init+0x6c>
 8007dc2:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <MS5611_Init+0x20>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007ded 	.word	0x08007ded
 8007dcc:	08007e15 	.word	0x08007e15
 8007dd0:	08007df5 	.word	0x08007df5
 8007dd4:	08007e15 	.word	0x08007e15
 8007dd8:	08007dfd 	.word	0x08007dfd
 8007ddc:	08007e15 	.word	0x08007e15
 8007de0:	08007e05 	.word	0x08007e05
 8007de4:	08007e15 	.word	0x08007e15
 8007de8:	08007e0d 	.word	0x08007e0d
  {
    case MS5611_ULTRA_LOW_POWER:
      ms5611.ct = 1;
 8007dec:	4b1c      	ldr	r3, [pc, #112]	; (8007e60 <MS5611_Init+0xb8>)
 8007dee:	2201      	movs	r2, #1
 8007df0:	731a      	strb	r2, [r3, #12]
      break;
 8007df2:	e00f      	b.n	8007e14 <MS5611_Init+0x6c>
    case MS5611_LOW_POWER:
      ms5611.ct = 2;
 8007df4:	4b1a      	ldr	r3, [pc, #104]	; (8007e60 <MS5611_Init+0xb8>)
 8007df6:	2202      	movs	r2, #2
 8007df8:	731a      	strb	r2, [r3, #12]
      break;
 8007dfa:	e00b      	b.n	8007e14 <MS5611_Init+0x6c>
    case MS5611_STANDARD:
      ms5611.ct = 3;
 8007dfc:	4b18      	ldr	r3, [pc, #96]	; (8007e60 <MS5611_Init+0xb8>)
 8007dfe:	2203      	movs	r2, #3
 8007e00:	731a      	strb	r2, [r3, #12]
      break;
 8007e02:	e007      	b.n	8007e14 <MS5611_Init+0x6c>
    case MS5611_HIGH_RES:
      ms5611.ct = 5;
 8007e04:	4b16      	ldr	r3, [pc, #88]	; (8007e60 <MS5611_Init+0xb8>)
 8007e06:	2205      	movs	r2, #5
 8007e08:	731a      	strb	r2, [r3, #12]
      break;
 8007e0a:	e003      	b.n	8007e14 <MS5611_Init+0x6c>
    case MS5611_ULTRA_HIGH_RES:
      ms5611.ct = 10;
 8007e0c:	4b14      	ldr	r3, [pc, #80]	; (8007e60 <MS5611_Init+0xb8>)
 8007e0e:	220a      	movs	r2, #10
 8007e10:	731a      	strb	r2, [r3, #12]
      break;
 8007e12:	bf00      	nop
  }
  ms5611.uosr = osr;
 8007e14:	4a12      	ldr	r2, [pc, #72]	; (8007e60 <MS5611_Init+0xb8>)
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	7353      	strb	r3, [r2, #13]
  HAL_Delay(100);
 8007e1a:	2064      	movs	r0, #100	; 0x64
 8007e1c:	f004 fba4 	bl	800c568 <HAL_Delay>

  for (uint8_t offset = 0; offset < 6; offset++)
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
 8007e24:	e010      	b.n	8007e48 <MS5611_Init+0xa0>
  {
    ms5611.fc[offset] = readRegister16(MS5611_CMD_READ_PROM + (offset * 2));
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	3351      	adds	r3, #81	; 0x51
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	7bfc      	ldrb	r4, [r7, #15]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fbfa 	bl	800862c <readRegister16>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <MS5611_Init+0xb8>)
 8007e3e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  for (uint8_t offset = 0; offset < 6; offset++)
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	3301      	adds	r3, #1
 8007e46:	73fb      	strb	r3, [r7, #15]
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	d9eb      	bls.n	8007e26 <MS5611_Init+0x7e>
  }
  cliAdd("baro", cliBaro);
 8007e4e:	4905      	ldr	r1, [pc, #20]	; (8007e64 <MS5611_Init+0xbc>)
 8007e50:	4805      	ldr	r0, [pc, #20]	; (8007e68 <MS5611_Init+0xc0>)
 8007e52:	f003 f81f 	bl	800ae94 <cliAdd>
#ifdef debug
  logPrintf("Oversampling: %d\r\n", ms5611.uosr);
#endif
}
 8007e56:	bf00      	nop
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd90      	pop	{r4, r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000da0 	.word	0x20000da0
 8007e64:	080086c9 	.word	0x080086c9
 8007e68:	080197e4 	.word	0x080197e4

08007e6c <applyBarometerMedianFilter>:

#define PRESSURE_SAMPLES_MEDIAN 3

static int32_t applyBarometerMedianFilter(int32_t newPressureReading)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
    static int32_t barometerFilterSamples[PRESSURE_SAMPLES_MEDIAN];
    static int currentFilterSampleIndex = 0;
    static bool medianFilterReady = false;
    int nextSampleIndex;

    nextSampleIndex = (currentFilterSampleIndex + 1);
 8007e74:	4b11      	ldr	r3, [pc, #68]	; (8007ebc <applyBarometerMedianFilter+0x50>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	60fb      	str	r3, [r7, #12]
    if (nextSampleIndex == PRESSURE_SAMPLES_MEDIAN) {
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d104      	bne.n	8007e8c <applyBarometerMedianFilter+0x20>
        nextSampleIndex = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60fb      	str	r3, [r7, #12]
        medianFilterReady = true;
 8007e86:	4b0e      	ldr	r3, [pc, #56]	; (8007ec0 <applyBarometerMedianFilter+0x54>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	701a      	strb	r2, [r3, #0]
    }

    barometerFilterSamples[currentFilterSampleIndex] = newPressureReading;
 8007e8c:	4b0b      	ldr	r3, [pc, #44]	; (8007ebc <applyBarometerMedianFilter+0x50>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	490c      	ldr	r1, [pc, #48]	; (8007ec4 <applyBarometerMedianFilter+0x58>)
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    currentFilterSampleIndex = nextSampleIndex;
 8007e98:	4a08      	ldr	r2, [pc, #32]	; (8007ebc <applyBarometerMedianFilter+0x50>)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6013      	str	r3, [r2, #0]

    if (medianFilterReady)
 8007e9e:	4b08      	ldr	r3, [pc, #32]	; (8007ec0 <applyBarometerMedianFilter+0x54>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d004      	beq.n	8007eb0 <applyBarometerMedianFilter+0x44>
        return quickMedianFilter3(barometerFilterSamples);
 8007ea6:	4807      	ldr	r0, [pc, #28]	; (8007ec4 <applyBarometerMedianFilter+0x58>)
 8007ea8:	f7f9 feca 	bl	8001c40 <quickMedianFilter3>
 8007eac:	4603      	mov	r3, r0
 8007eae:	e000      	b.n	8007eb2 <applyBarometerMedianFilter+0x46>
    else
        return newPressureReading;
 8007eb0:	687b      	ldr	r3, [r7, #4]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	200003d0 	.word	0x200003d0
 8007ec0:	200003d4 	.word	0x200003d4
 8007ec4:	200003d8 	.word	0x200003d8

08007ec8 <Baro_Common>:

void Baro_Common(void){
 8007ec8:	b590      	push	{r4, r7, lr}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
  static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
  static int baroHistIdx = 0;

  uint8_t indexplus1 = (baroHistIdx + 1);
 8007ece:	4b18      	ldr	r3, [pc, #96]	; (8007f30 <Baro_Common+0x68>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	71fb      	strb	r3, [r7, #7]
  if (indexplus1 == 21) indexplus1 = 0;
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	2b15      	cmp	r3, #21
 8007edc:	d101      	bne.n	8007ee2 <Baro_Common+0x1a>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	71fb      	strb	r3, [r7, #7]
  baroHistTab[baroHistIdx] = applyBarometerMedianFilter(ms5611.realPressure);
 8007ee2:	4b14      	ldr	r3, [pc, #80]	; (8007f34 <Baro_Common+0x6c>)
 8007ee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ee6:	4b12      	ldr	r3, [pc, #72]	; (8007f30 <Baro_Common+0x68>)
 8007ee8:	681c      	ldr	r4, [r3, #0]
 8007eea:	4610      	mov	r0, r2
 8007eec:	f7ff ffbe 	bl	8007e6c <applyBarometerMedianFilter>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <Baro_Common+0x70>)
 8007ef4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  baroPressureSum += baroHistTab[baroHistIdx];
 8007ef8:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <Baro_Common+0x68>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a0e      	ldr	r2, [pc, #56]	; (8007f38 <Baro_Common+0x70>)
 8007efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f02:	461a      	mov	r2, r3
 8007f04:	4b0d      	ldr	r3, [pc, #52]	; (8007f3c <Baro_Common+0x74>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4413      	add	r3, r2
 8007f0a:	4a0c      	ldr	r2, [pc, #48]	; (8007f3c <Baro_Common+0x74>)
 8007f0c:	6013      	str	r3, [r2, #0]
  baroPressureSum -= baroHistTab[indexplus1];
 8007f0e:	4b0b      	ldr	r3, [pc, #44]	; (8007f3c <Baro_Common+0x74>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	79fa      	ldrb	r2, [r7, #7]
 8007f14:	4908      	ldr	r1, [pc, #32]	; (8007f38 <Baro_Common+0x70>)
 8007f16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	4a07      	ldr	r2, [pc, #28]	; (8007f3c <Baro_Common+0x74>)
 8007f1e:	6013      	str	r3, [r2, #0]
  baroHistIdx = indexplus1;
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	4a03      	ldr	r2, [pc, #12]	; (8007f30 <Baro_Common+0x68>)
 8007f24:	6013      	str	r3, [r2, #0]
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd90      	pop	{r4, r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	200003e4 	.word	0x200003e4
 8007f34:	20000da0 	.word	0x20000da0
 8007f38:	200003e8 	.word	0x200003e8
 8007f3c:	20000380 	.word	0x20000380

08007f40 <Baro_update>:

uint8_t Baro_update(uint32_t currentTime)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
	static uint32_t baroDeadline = 0;
	static int state = 0;

	if(state >= 2)
 8007f48:	4b29      	ldr	r3, [pc, #164]	; (8007ff0 <Baro_update+0xb0>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	dd06      	ble.n	8007f5e <Baro_update+0x1e>
	{
		state = 0;
 8007f50:	4b27      	ldr	r3, [pc, #156]	; (8007ff0 <Baro_update+0xb0>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]
		MS561101BA_Calculate();
 8007f56:	f000 f965 	bl	8008224 <MS561101BA_Calculate>
		return 1;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e043      	b.n	8007fe6 <Baro_update+0xa6>
	}
	if ((int32_t)(currentTime - baroDeadline) < 0) return 0;
 8007f5e:	4b25      	ldr	r3, [pc, #148]	; (8007ff4 <Baro_update+0xb4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da01      	bge.n	8007f6e <Baro_update+0x2e>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e03b      	b.n	8007fe6 <Baro_update+0xa6>
	baroDeadline = currentTime;
 8007f6e:	4a21      	ldr	r2, [pc, #132]	; (8007ff4 <Baro_update+0xb4>)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6013      	str	r3, [r2, #0]
	if (state == 0)
 8007f74:	4b1e      	ldr	r3, [pc, #120]	; (8007ff0 <Baro_update+0xb0>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d118      	bne.n	8007fae <Baro_update+0x6e>
	{
		Baro_Common();
 8007f7c:	f7ff ffa4 	bl	8007ec8 <Baro_Common>
		ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8007f80:	2000      	movs	r0, #0
 8007f82:	f000 fb79 	bl	8008678 <readRegister24>
 8007f86:	4602      	mov	r2, r0
 8007f88:	4b1b      	ldr	r3, [pc, #108]	; (8007ff8 <Baro_update+0xb8>)
 8007f8a:	651a      	str	r2, [r3, #80]	; 0x50
		//Request pressure data
		I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8007f8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ff8 <Baro_update+0xb8>)
 8007f8e:	7b5b      	ldrb	r3, [r3, #13]
 8007f90:	3340      	adds	r3, #64	; 0x40
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2201      	movs	r2, #1
 8007f96:	4619      	mov	r1, r3
 8007f98:	20ee      	movs	r0, #238	; 0xee
 8007f9a:	f003 f9d7 	bl	800b34c <I2C_Write>
		baroDeadline +=10000;
 8007f9e:	4b15      	ldr	r3, [pc, #84]	; (8007ff4 <Baro_update+0xb4>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007fa6:	3310      	adds	r3, #16
 8007fa8:	4a12      	ldr	r2, [pc, #72]	; (8007ff4 <Baro_update+0xb4>)
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	e015      	b.n	8007fda <Baro_update+0x9a>
	} else
	{
		ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8007fae:	2000      	movs	r0, #0
 8007fb0:	f000 fb62 	bl	8008678 <readRegister24>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <Baro_update+0xb8>)
 8007fb8:	659a      	str	r2, [r3, #88]	; 0x58
		//Request temperature data
		I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8007fba:	4b0f      	ldr	r3, [pc, #60]	; (8007ff8 <Baro_update+0xb8>)
 8007fbc:	7b5b      	ldrb	r3, [r3, #13]
 8007fbe:	3350      	adds	r3, #80	; 0x50
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	20ee      	movs	r0, #238	; 0xee
 8007fc8:	f003 f9c0 	bl	800b34c <I2C_Write>
		baroDeadline +=10000;
 8007fcc:	4b09      	ldr	r3, [pc, #36]	; (8007ff4 <Baro_update+0xb4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007fd4:	3310      	adds	r3, #16
 8007fd6:	4a07      	ldr	r2, [pc, #28]	; (8007ff4 <Baro_update+0xb4>)
 8007fd8:	6013      	str	r3, [r2, #0]
	}
	state ++;
 8007fda:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <Baro_update+0xb0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	4a03      	ldr	r2, [pc, #12]	; (8007ff0 <Baro_update+0xb0>)
 8007fe2:	6013      	str	r3, [r2, #0]
	return 1;
 8007fe4:	2301      	movs	r3, #1
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	2000043c 	.word	0x2000043c
 8007ff4:	20000440 	.word	0x20000440
 8007ff8:	20000da0 	.word	0x20000da0

08007ffc <getEstimatedAltitude>:

uint8_t getEstimatedAltitude(void){
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
  static int32_t baroAltOffset = 0;
  int32_t BaroAlt_tmp;
  static int32_t baroGroundAltitude = 0;
  static int32_t baroGroundPressure = 8*101325;
  static uint16_t previousT;
  uint16_t currentT = micros();
 8008002:	f7f9 fa63 	bl	80014cc <micros>
 8008006:	4603      	mov	r3, r0
 8008008:	80fb      	strh	r3, [r7, #6]
  uint16_t dTime;

  dTime = currentT - previousT;
 800800a:	4b6e      	ldr	r3, [pc, #440]	; (80081c4 <getEstimatedAltitude+0x1c8>)
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	88fa      	ldrh	r2, [r7, #6]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	80bb      	strh	r3, [r7, #4]
  if (dTime < 25000) return 0;
 8008014:	88bb      	ldrh	r3, [r7, #4]
 8008016:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800801a:	4293      	cmp	r3, r2
 800801c:	d801      	bhi.n	8008022 <getEstimatedAltitude+0x26>
 800801e:	2300      	movs	r3, #0
 8008020:	e0cc      	b.n	80081bc <getEstimatedAltitude+0x1c0>
  previousT = currentT;
 8008022:	4a68      	ldr	r2, [pc, #416]	; (80081c4 <getEstimatedAltitude+0x1c8>)
 8008024:	88fb      	ldrh	r3, [r7, #6]
 8008026:	8013      	strh	r3, [r2, #0]
  if (calibratingB > 0) {
 8008028:	4b67      	ldr	r3, [pc, #412]	; (80081c8 <getEstimatedAltitude+0x1cc>)
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d043      	beq.n	80080b8 <getEstimatedAltitude+0xbc>
//    logBaroGroundPressureSum = log(baroPressureSum);
//    baroGroundTemperatureScale = ((int32_t)ms5611.realTemperature + 27315) * (2 * 29.271267f); // 2 *  is included here => no need for * 2  on BaroAlt in additional LPF

    baroGroundPressure -= baroGroundPressure / 8;
 8008030:	4b66      	ldr	r3, [pc, #408]	; (80081cc <getEstimatedAltitude+0x1d0>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	da00      	bge.n	800803a <getEstimatedAltitude+0x3e>
 8008038:	3307      	adds	r3, #7
 800803a:	10db      	asrs	r3, r3, #3
 800803c:	425b      	negs	r3, r3
 800803e:	461a      	mov	r2, r3
 8008040:	4b62      	ldr	r3, [pc, #392]	; (80081cc <getEstimatedAltitude+0x1d0>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4413      	add	r3, r2
 8008046:	4a61      	ldr	r2, [pc, #388]	; (80081cc <getEstimatedAltitude+0x1d0>)
 8008048:	6013      	str	r3, [r2, #0]
    baroGroundPressure += baroPressureSum / 20;
 800804a:	4b61      	ldr	r3, [pc, #388]	; (80081d0 <getEstimatedAltitude+0x1d4>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a61      	ldr	r2, [pc, #388]	; (80081d4 <getEstimatedAltitude+0x1d8>)
 8008050:	fba2 2303 	umull	r2, r3, r2, r3
 8008054:	091b      	lsrs	r3, r3, #4
 8008056:	4a5d      	ldr	r2, [pc, #372]	; (80081cc <getEstimatedAltitude+0x1d0>)
 8008058:	6812      	ldr	r2, [r2, #0]
 800805a:	4413      	add	r3, r2
 800805c:	461a      	mov	r2, r3
 800805e:	4b5b      	ldr	r3, [pc, #364]	; (80081cc <getEstimatedAltitude+0x1d0>)
 8008060:	601a      	str	r2, [r3, #0]
    //debug = baroGroundPressure;
    baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190259f)) * 4433000.0f;
 8008062:	4b5a      	ldr	r3, [pc, #360]	; (80081cc <getEstimatedAltitude+0x1d0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	da00      	bge.n	800806c <getEstimatedAltitude+0x70>
 800806a:	3307      	adds	r3, #7
 800806c:	10db      	asrs	r3, r3, #3
 800806e:	4618      	mov	r0, r3
 8008070:	f7f8 fe4e 	bl	8000d10 <__aeabi_i2f>
 8008074:	4603      	mov	r3, r0
 8008076:	4958      	ldr	r1, [pc, #352]	; (80081d8 <getEstimatedAltitude+0x1dc>)
 8008078:	4618      	mov	r0, r3
 800807a:	f7f8 ff51 	bl	8000f20 <__aeabi_fdiv>
 800807e:	4603      	mov	r3, r0
 8008080:	4956      	ldr	r1, [pc, #344]	; (80081dc <getEstimatedAltitude+0x1e0>)
 8008082:	4618      	mov	r0, r3
 8008084:	f00d fbf6 	bl	8015874 <powf>
 8008088:	4603      	mov	r3, r0
 800808a:	4619      	mov	r1, r3
 800808c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008090:	f7f8 fd88 	bl	8000ba4 <__aeabi_fsub>
 8008094:	4603      	mov	r3, r0
 8008096:	4952      	ldr	r1, [pc, #328]	; (80081e0 <getEstimatedAltitude+0x1e4>)
 8008098:	4618      	mov	r0, r3
 800809a:	f7f8 fe8d 	bl	8000db8 <__aeabi_fmul>
 800809e:	4603      	mov	r3, r0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7f9 f865 	bl	8001170 <__aeabi_f2iz>
 80080a6:	4602      	mov	r2, r0
 80080a8:	4b4e      	ldr	r3, [pc, #312]	; (80081e4 <getEstimatedAltitude+0x1e8>)
 80080aa:	601a      	str	r2, [r3, #0]
    //debug = baroGroundAltitude;
    calibratingB--;
 80080ac:	4b46      	ldr	r3, [pc, #280]	; (80081c8 <getEstimatedAltitude+0x1cc>)
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	4b44      	ldr	r3, [pc, #272]	; (80081c8 <getEstimatedAltitude+0x1cc>)
 80080b6:	801a      	strh	r2, [r3, #0]
  }

  // calculates height from ground via baro readings
  // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
  if(isBaroCalibrationComplete()){
 80080b8:	f000 f8a4 	bl	8008204 <isBaroCalibrationComplete>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d04c      	beq.n	800815c <getEstimatedAltitude+0x160>
  BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / 20) / 101325.0f, 0.190259f)) * 4433000.0f); // in cm
 80080c2:	4b43      	ldr	r3, [pc, #268]	; (80081d0 <getEstimatedAltitude+0x1d4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a43      	ldr	r2, [pc, #268]	; (80081d4 <getEstimatedAltitude+0x1d8>)
 80080c8:	fba2 2303 	umull	r2, r3, r2, r3
 80080cc:	091b      	lsrs	r3, r3, #4
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7f8 fe1a 	bl	8000d08 <__aeabi_ui2f>
 80080d4:	4603      	mov	r3, r0
 80080d6:	4940      	ldr	r1, [pc, #256]	; (80081d8 <getEstimatedAltitude+0x1dc>)
 80080d8:	4618      	mov	r0, r3
 80080da:	f7f8 ff21 	bl	8000f20 <__aeabi_fdiv>
 80080de:	4603      	mov	r3, r0
 80080e0:	493e      	ldr	r1, [pc, #248]	; (80081dc <getEstimatedAltitude+0x1e0>)
 80080e2:	4618      	mov	r0, r3
 80080e4:	f00d fbc6 	bl	8015874 <powf>
 80080e8:	4603      	mov	r3, r0
 80080ea:	4619      	mov	r1, r3
 80080ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80080f0:	f7f8 fd58 	bl	8000ba4 <__aeabi_fsub>
 80080f4:	4603      	mov	r3, r0
 80080f6:	493a      	ldr	r1, [pc, #232]	; (80081e0 <getEstimatedAltitude+0x1e4>)
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7f8 fe5d 	bl	8000db8 <__aeabi_fmul>
 80080fe:	4603      	mov	r3, r0
 8008100:	4618      	mov	r0, r3
 8008102:	f00d f8e9 	bl	80152d8 <lrintf>
 8008106:	6038      	str	r0, [r7, #0]
  BaroAlt_tmp -= baroGroundAltitude;
 8008108:	4b36      	ldr	r3, [pc, #216]	; (80081e4 <getEstimatedAltitude+0x1e8>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	603b      	str	r3, [r7, #0]
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.6f + (float)BaroAlt_tmp * (1.0f - 0.6f)); // additional LPF to reduce baro noise
 8008112:	4b35      	ldr	r3, [pc, #212]	; (80081e8 <getEstimatedAltitude+0x1ec>)
 8008114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008116:	4618      	mov	r0, r3
 8008118:	f7f8 fdfa 	bl	8000d10 <__aeabi_i2f>
 800811c:	4603      	mov	r3, r0
 800811e:	4933      	ldr	r1, [pc, #204]	; (80081ec <getEstimatedAltitude+0x1f0>)
 8008120:	4618      	mov	r0, r3
 8008122:	f7f8 fe49 	bl	8000db8 <__aeabi_fmul>
 8008126:	4603      	mov	r3, r0
 8008128:	461c      	mov	r4, r3
 800812a:	6838      	ldr	r0, [r7, #0]
 800812c:	f7f8 fdf0 	bl	8000d10 <__aeabi_i2f>
 8008130:	4603      	mov	r3, r0
 8008132:	492f      	ldr	r1, [pc, #188]	; (80081f0 <getEstimatedAltitude+0x1f4>)
 8008134:	4618      	mov	r0, r3
 8008136:	f7f8 fe3f 	bl	8000db8 <__aeabi_fmul>
 800813a:	4603      	mov	r3, r0
 800813c:	4619      	mov	r1, r3
 800813e:	4620      	mov	r0, r4
 8008140:	f7f8 fd32 	bl	8000ba8 <__addsf3>
 8008144:	4603      	mov	r3, r0
 8008146:	4618      	mov	r0, r3
 8008148:	f00d f8c6 	bl	80152d8 <lrintf>
 800814c:	4602      	mov	r2, r0
 800814e:	4b26      	ldr	r3, [pc, #152]	; (80081e8 <getEstimatedAltitude+0x1ec>)
 8008150:	671a      	str	r2, [r3, #112]	; 0x70
  alt.EstAlt = ms5611.BaroAlt;
 8008152:	4b25      	ldr	r3, [pc, #148]	; (80081e8 <getEstimatedAltitude+0x1ec>)
 8008154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008156:	4a27      	ldr	r2, [pc, #156]	; (80081f4 <getEstimatedAltitude+0x1f8>)
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	e002      	b.n	8008162 <getEstimatedAltitude+0x166>
  }else{
    alt.EstAlt = 0;
 800815c:	4b25      	ldr	r3, [pc, #148]	; (80081f4 <getEstimatedAltitude+0x1f8>)
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]

  //  ms5611.BaroAlt = ( logBaroGroundPressureSum - log(baroPressureSum) ) * baroGroundTemperatureScale;
  //  alt.EstAlt = (alt.EstAlt * 6 + ms5611.BaroAlt ) >> 3; // additional LPF to reduce baro noise (faster by 30 µs)
  //if(alt.EstAlt < 0) alt.EstAlt = 0;

  if ((f.ARMED|f.mag_reset) && !altitudeOffsetSet) {
 8008162:	4b25      	ldr	r3, [pc, #148]	; (80081f8 <getEstimatedAltitude+0x1fc>)
 8008164:	785a      	ldrb	r2, [r3, #1]
 8008166:	4b24      	ldr	r3, [pc, #144]	; (80081f8 <getEstimatedAltitude+0x1fc>)
 8008168:	7e9b      	ldrb	r3, [r3, #26]
 800816a:	4313      	orrs	r3, r2
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d011      	beq.n	8008196 <getEstimatedAltitude+0x19a>
 8008172:	4b22      	ldr	r3, [pc, #136]	; (80081fc <getEstimatedAltitude+0x200>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	f083 0301 	eor.w	r3, r3, #1
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00a      	beq.n	8008196 <getEstimatedAltitude+0x19a>
      f.mag_reset = false;
 8008180:	4b1d      	ldr	r3, [pc, #116]	; (80081f8 <getEstimatedAltitude+0x1fc>)
 8008182:	2200      	movs	r2, #0
 8008184:	769a      	strb	r2, [r3, #26]
      baroAltOffset = alt.EstAlt;
 8008186:	4b1b      	ldr	r3, [pc, #108]	; (80081f4 <getEstimatedAltitude+0x1f8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a1d      	ldr	r2, [pc, #116]	; (8008200 <getEstimatedAltitude+0x204>)
 800818c:	6013      	str	r3, [r2, #0]
      altitudeOffsetSet = true;
 800818e:	4b1b      	ldr	r3, [pc, #108]	; (80081fc <getEstimatedAltitude+0x200>)
 8008190:	2201      	movs	r2, #1
 8008192:	701a      	strb	r2, [r3, #0]
 8008194:	e00a      	b.n	80081ac <getEstimatedAltitude+0x1b0>
  } else if (!f.ARMED && altitudeOffsetSet) {
 8008196:	4b18      	ldr	r3, [pc, #96]	; (80081f8 <getEstimatedAltitude+0x1fc>)
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d106      	bne.n	80081ac <getEstimatedAltitude+0x1b0>
 800819e:	4b17      	ldr	r3, [pc, #92]	; (80081fc <getEstimatedAltitude+0x200>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <getEstimatedAltitude+0x1b0>
      altitudeOffsetSet = false;
 80081a6:	4b15      	ldr	r3, [pc, #84]	; (80081fc <getEstimatedAltitude+0x200>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]
  }
  alt.EstAlt -= baroAltOffset;
 80081ac:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <getEstimatedAltitude+0x1f8>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	4b13      	ldr	r3, [pc, #76]	; (8008200 <getEstimatedAltitude+0x204>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	4a0f      	ldr	r2, [pc, #60]	; (80081f4 <getEstimatedAltitude+0x1f8>)
 80081b8:	6013      	str	r3, [r2, #0]
  return 1;
 80081ba:	2301      	movs	r3, #1
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd90      	pop	{r4, r7, pc}
 80081c4:	20000444 	.word	0x20000444
 80081c8:	2000000a 	.word	0x2000000a
 80081cc:	20000024 	.word	0x20000024
 80081d0:	20000380 	.word	0x20000380
 80081d4:	cccccccd 	.word	0xcccccccd
 80081d8:	47c5e680 	.word	0x47c5e680
 80081dc:	3e42d341 	.word	0x3e42d341
 80081e0:	4a8748d0 	.word	0x4a8748d0
 80081e4:	20000448 	.word	0x20000448
 80081e8:	20000da0 	.word	0x20000da0
 80081ec:	3f19999a 	.word	0x3f19999a
 80081f0:	3ecccccc 	.word	0x3ecccccc
 80081f4:	20000ef0 	.word	0x20000ef0
 80081f8:	20000ed4 	.word	0x20000ed4
 80081fc:	2000044c 	.word	0x2000044c
 8008200:	20000450 	.word	0x20000450

08008204 <isBaroCalibrationComplete>:

bool isBaroCalibrationComplete(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
    return calibratingB == 0;
 8008208:	4b05      	ldr	r3, [pc, #20]	; (8008220 <isBaroCalibrationComplete+0x1c>)
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	bf0c      	ite	eq
 8008210:	2301      	moveq	r3, #1
 8008212:	2300      	movne	r3, #0
 8008214:	b2db      	uxtb	r3, r3
}
 8008216:	4618      	mov	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	2000000a 	.word	0x2000000a

08008224 <MS561101BA_Calculate>:

    return readRegister24(MS5611_CMD_ADC_READ);
}

void MS561101BA_Calculate(void)
{
 8008224:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8008228:	b08d      	sub	sp, #52	; 0x34
 800822a:	af00      	add	r7, sp, #0
  int64_t delt;

  uint32_t D1 = ms5611.rawPressure;
 800822c:	4bc6      	ldr	r3, [pc, #792]	; (8008548 <MS561101BA_Calculate+0x324>)
 800822e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t D2 = ms5611.rawTemp;
 8008232:	4bc5      	ldr	r3, [pc, #788]	; (8008548 <MS561101BA_Calculate+0x324>)
 8008234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008236:	623b      	str	r3, [r7, #32]
  int64_t dT = D2 - ((uint32_t)ms5611.fc[4] << 8);
 8008238:	4bc3      	ldr	r3, [pc, #780]	; (8008548 <MS561101BA_Calculate+0x324>)
 800823a:	891b      	ldrh	r3, [r3, #8]
 800823c:	021b      	lsls	r3, r3, #8
 800823e:	6a3a      	ldr	r2, [r7, #32]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	f04f 0400 	mov.w	r4, #0
 8008246:	e9c7 3406 	strd	r3, r4, [r7, #24]

  int64_t OFF = ((int64_t)ms5611.fc[1] << 16) + (((int64_t)ms5611.fc[3] * dT) >> 7);
 800824a:	4bbf      	ldr	r3, [pc, #764]	; (8008548 <MS561101BA_Calculate+0x324>)
 800824c:	885b      	ldrh	r3, [r3, #2]
 800824e:	b29b      	uxth	r3, r3
 8008250:	f04f 0400 	mov.w	r4, #0
 8008254:	0c1e      	lsrs	r6, r3, #16
 8008256:	041d      	lsls	r5, r3, #16
 8008258:	4bbb      	ldr	r3, [pc, #748]	; (8008548 <MS561101BA_Calculate+0x324>)
 800825a:	88db      	ldrh	r3, [r3, #6]
 800825c:	b29b      	uxth	r3, r3
 800825e:	f04f 0400 	mov.w	r4, #0
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	fb04 f102 	mul.w	r1, r4, r2
 8008268:	69fa      	ldr	r2, [r7, #28]
 800826a:	fb03 f202 	mul.w	r2, r3, r2
 800826e:	1888      	adds	r0, r1, r2
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	fba2 1203 	umull	r1, r2, r2, r3
 8008276:	1883      	adds	r3, r0, r2
 8008278:	461a      	mov	r2, r3
 800827a:	f04f 0800 	mov.w	r8, #0
 800827e:	f04f 0900 	mov.w	r9, #0
 8008282:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 8008286:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 800828a:	ea4f 19e2 	mov.w	r9, r2, asr #7
 800828e:	eb18 0305 	adds.w	r3, r8, r5
 8008292:	eb49 0406 	adc.w	r4, r9, r6
 8008296:	e9c7 3404 	strd	r3, r4, [r7, #16]
  int64_t SENS =((int64_t)ms5611.fc[0] << 15) + (((int64_t)ms5611.fc[2] * dT) >> 8);
 800829a:	4bab      	ldr	r3, [pc, #684]	; (8008548 <MS561101BA_Calculate+0x324>)
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f04f 0400 	mov.w	r4, #0
 80082a4:	f04f 0100 	mov.w	r1, #0
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	03e2      	lsls	r2, r4, #15
 80082ae:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 80082b2:	03d9      	lsls	r1, r3, #15
 80082b4:	4ba4      	ldr	r3, [pc, #656]	; (8008548 <MS561101BA_Calculate+0x324>)
 80082b6:	889b      	ldrh	r3, [r3, #4]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	f04f 0400 	mov.w	r4, #0
 80082be:	69b8      	ldr	r0, [r7, #24]
 80082c0:	fb04 f500 	mul.w	r5, r4, r0
 80082c4:	69f8      	ldr	r0, [r7, #28]
 80082c6:	fb03 f000 	mul.w	r0, r3, r0
 80082ca:	4428      	add	r0, r5
 80082cc:	69bd      	ldr	r5, [r7, #24]
 80082ce:	fba5 5603 	umull	r5, r6, r5, r3
 80082d2:	1983      	adds	r3, r0, r6
 80082d4:	461e      	mov	r6, r3
 80082d6:	f04f 0800 	mov.w	r8, #0
 80082da:	f04f 0900 	mov.w	r9, #0
 80082de:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80082e2:	ea48 6806 	orr.w	r8, r8, r6, lsl #24
 80082e6:	ea4f 2926 	mov.w	r9, r6, asr #8
 80082ea:	eb18 0301 	adds.w	r3, r8, r1
 80082ee:	eb49 0402 	adc.w	r4, r9, r2
 80082f2:	e9c7 3402 	strd	r3, r4, [r7, #8]

  int64_t TEMP = 2000 + ((dT * (int64_t)ms5611.fc[5]) >> 23);
 80082f6:	4b94      	ldr	r3, [pc, #592]	; (8008548 <MS561101BA_Calculate+0x324>)
 80082f8:	895b      	ldrh	r3, [r3, #10]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	f04f 0400 	mov.w	r4, #0
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	fb04 f102 	mul.w	r1, r4, r2
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	fb03 f202 	mul.w	r2, r3, r2
 800830c:	1888      	adds	r0, r1, r2
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	fba2 1203 	umull	r1, r2, r2, r3
 8008314:	1883      	adds	r3, r0, r2
 8008316:	461a      	mov	r2, r3
 8008318:	f04f 0500 	mov.w	r5, #0
 800831c:	f04f 0600 	mov.w	r6, #0
 8008320:	0dcd      	lsrs	r5, r1, #23
 8008322:	ea45 2542 	orr.w	r5, r5, r2, lsl #9
 8008326:	15d6      	asrs	r6, r2, #23
 8008328:	f515 63fa 	adds.w	r3, r5, #2000	; 0x7d0
 800832c:	f146 0400 	adc.w	r4, r6, #0
 8008330:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

  ms5611.OFF2 = 0;
 8008334:	4a84      	ldr	r2, [pc, #528]	; (8008548 <MS561101BA_Calculate+0x324>)
 8008336:	f04f 0300 	mov.w	r3, #0
 800833a:	f04f 0400 	mov.w	r4, #0
 800833e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
  ms5611.SENS2 = 0;
 8008342:	4a81      	ldr	r2, [pc, #516]	; (8008548 <MS561101BA_Calculate+0x324>)
 8008344:	f04f 0300 	mov.w	r3, #0
 8008348:	f04f 0400 	mov.w	r4, #0
 800834c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

  if (TEMP < 2000)
 8008350:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008354:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	4299      	cmp	r1, r3
 800835e:	eb72 0304 	sbcs.w	r3, r2, r4
 8008362:	f2c0 8115 	blt.w	8008590 <MS561101BA_Calculate+0x36c>
  {
    delt = TEMP - 2000;
 8008366:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800836a:	f5b3 61fa 	subs.w	r1, r3, #2000	; 0x7d0
 800836e:	f144 32ff 	adc.w	r2, r4, #4294967295
 8008372:	e9c7 1200 	strd	r1, r2, [r7]
    ms5611.OFF2 = 5 * (delt * delt) / 2;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	fb02 f203 	mul.w	r2, r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	fb01 f303 	mul.w	r3, r1, r3
 8008386:	4413      	add	r3, r2
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	fba1 5602 	umull	r5, r6, r1, r2
 8008390:	4433      	add	r3, r6
 8008392:	461e      	mov	r6, r3
 8008394:	4629      	mov	r1, r5
 8008396:	4632      	mov	r2, r6
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	f04f 0400 	mov.w	r4, #0
 80083a0:	0094      	lsls	r4, r2, #2
 80083a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80083a6:	008b      	lsls	r3, r1, #2
 80083a8:	4619      	mov	r1, r3
 80083aa:	4622      	mov	r2, r4
 80083ac:	eb11 0805 	adds.w	r8, r1, r5
 80083b0:	eb42 0906 	adc.w	r9, r2, r6
 80083b4:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 80083b8:	4611      	mov	r1, r2
 80083ba:	f04f 0200 	mov.w	r2, #0
 80083be:	eb18 0301 	adds.w	r3, r8, r1
 80083c2:	eb49 0402 	adc.w	r4, r9, r2
 80083c6:	1064      	asrs	r4, r4, #1
 80083c8:	ea4f 0333 	mov.w	r3, r3, rrx
 80083cc:	4a5e      	ldr	r2, [pc, #376]	; (8008548 <MS561101BA_Calculate+0x324>)
 80083ce:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    ms5611.SENS2 = 5 * (delt * delt) / 4;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	fb02 f203 	mul.w	r2, r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	fb01 f303 	mul.w	r3, r1, r3
 80083e2:	4413      	add	r3, r2
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	fba1 5602 	umull	r5, r6, r1, r2
 80083ec:	4433      	add	r3, r6
 80083ee:	461e      	mov	r6, r3
 80083f0:	4629      	mov	r1, r5
 80083f2:	4632      	mov	r2, r6
 80083f4:	f04f 0300 	mov.w	r3, #0
 80083f8:	f04f 0400 	mov.w	r4, #0
 80083fc:	0094      	lsls	r4, r2, #2
 80083fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008402:	008b      	lsls	r3, r1, #2
 8008404:	4619      	mov	r1, r3
 8008406:	4622      	mov	r2, r4
 8008408:	194b      	adds	r3, r1, r5
 800840a:	eb42 0406 	adc.w	r4, r2, r6
 800840e:	2b00      	cmp	r3, #0
 8008410:	f174 0200 	sbcs.w	r2, r4, #0
 8008414:	da02      	bge.n	800841c <MS561101BA_Calculate+0x1f8>
 8008416:	3303      	adds	r3, #3
 8008418:	f144 0400 	adc.w	r4, r4, #0
 800841c:	f04f 0100 	mov.w	r1, #0
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	0899      	lsrs	r1, r3, #2
 8008426:	ea41 7184 	orr.w	r1, r1, r4, lsl #30
 800842a:	10a2      	asrs	r2, r4, #2
 800842c:	460b      	mov	r3, r1
 800842e:	4614      	mov	r4, r2
 8008430:	4a45      	ldr	r2, [pc, #276]	; (8008548 <MS561101BA_Calculate+0x324>)
 8008432:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    if (TEMP < -1500)
 8008436:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800843a:	4944      	ldr	r1, [pc, #272]	; (800854c <MS561101BA_Calculate+0x328>)
 800843c:	f04f 32ff 	mov.w	r2, #4294967295
 8008440:	428b      	cmp	r3, r1
 8008442:	eb74 0302 	sbcs.w	r3, r4, r2
 8008446:	f280 8083 	bge.w	8008550 <MS561101BA_Calculate+0x32c>
    {
      delt = TEMP + 1500;
 800844a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800844e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8008452:	f04f 0200 	mov.w	r2, #0
 8008456:	185d      	adds	r5, r3, r1
 8008458:	eb44 0602 	adc.w	r6, r4, r2
 800845c:	e9c7 5600 	strd	r5, r6, [r7]
      ms5611.OFF2 = ms5611.OFF2 + 7 * (delt * delt);
 8008460:	4b39      	ldr	r3, [pc, #228]	; (8008548 <MS561101BA_Calculate+0x324>)
 8008462:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	fb02 f203 	mul.w	r2, r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	fb01 f303 	mul.w	r3, r1, r3
 8008476:	4413      	add	r3, r2
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	fba1 5602 	umull	r5, r6, r1, r2
 8008480:	4433      	add	r3, r6
 8008482:	461e      	mov	r6, r3
 8008484:	4629      	mov	r1, r5
 8008486:	4632      	mov	r2, r6
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	f04f 0400 	mov.w	r4, #0
 8008490:	00d4      	lsls	r4, r2, #3
 8008492:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008496:	00cb      	lsls	r3, r1, #3
 8008498:	4619      	mov	r1, r3
 800849a:	4622      	mov	r2, r4
 800849c:	460b      	mov	r3, r1
 800849e:	4614      	mov	r4, r2
 80084a0:	1b5b      	subs	r3, r3, r5
 80084a2:	eb64 0406 	sbc.w	r4, r4, r6
 80084a6:	4619      	mov	r1, r3
 80084a8:	4622      	mov	r2, r4
 80084aa:	eb11 0308 	adds.w	r3, r1, r8
 80084ae:	eb42 0409 	adc.w	r4, r2, r9
 80084b2:	4a25      	ldr	r2, [pc, #148]	; (8008548 <MS561101BA_Calculate+0x324>)
 80084b4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
      ms5611.SENS2 = ms5611.SENS2 + 11 * (delt * delt) / 2;
 80084b8:	4b23      	ldr	r3, [pc, #140]	; (8008548 <MS561101BA_Calculate+0x324>)
 80084ba:	e9d3 8912 	ldrd	r8, r9, [r3, #72]	; 0x48
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	fb02 f203 	mul.w	r2, r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	fb01 f303 	mul.w	r3, r1, r3
 80084ce:	4413      	add	r3, r2
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	fba1 5602 	umull	r5, r6, r1, r2
 80084d8:	4433      	add	r3, r6
 80084da:	461e      	mov	r6, r3
 80084dc:	46ab      	mov	fp, r5
 80084de:	46b4      	mov	ip, r6
 80084e0:	eb1b 030b 	adds.w	r3, fp, fp
 80084e4:	eb4c 040c 	adc.w	r4, ip, ip
 80084e8:	469b      	mov	fp, r3
 80084ea:	46a4      	mov	ip, r4
 80084ec:	eb1b 0b05 	adds.w	fp, fp, r5
 80084f0:	eb4c 0c06 	adc.w	ip, ip, r6
 80084f4:	f04f 0100 	mov.w	r1, #0
 80084f8:	f04f 0200 	mov.w	r2, #0
 80084fc:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8008500:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8008504:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8008508:	468b      	mov	fp, r1
 800850a:	4694      	mov	ip, r2
 800850c:	ebbb 0b05 	subs.w	fp, fp, r5
 8008510:	eb6c 0c06 	sbc.w	ip, ip, r6
 8008514:	465c      	mov	r4, fp
 8008516:	4665      	mov	r5, ip
 8008518:	462b      	mov	r3, r5
 800851a:	0fda      	lsrs	r2, r3, #31
 800851c:	4611      	mov	r1, r2
 800851e:	f04f 0200 	mov.w	r2, #0
 8008522:	4623      	mov	r3, r4
 8008524:	462c      	mov	r4, r5
 8008526:	185b      	adds	r3, r3, r1
 8008528:	eb44 0402 	adc.w	r4, r4, r2
 800852c:	1064      	asrs	r4, r4, #1
 800852e:	ea4f 0333 	mov.w	r3, r3, rrx
 8008532:	4619      	mov	r1, r3
 8008534:	4622      	mov	r2, r4
 8008536:	eb11 0308 	adds.w	r3, r1, r8
 800853a:	eb42 0409 	adc.w	r4, r2, r9
 800853e:	4a02      	ldr	r2, [pc, #8]	; (8008548 <MS561101BA_Calculate+0x324>)
 8008540:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 8008544:	e004      	b.n	8008550 <MS561101BA_Calculate+0x32c>
 8008546:	bf00      	nop
 8008548:	20000da0 	.word	0x20000da0
 800854c:	fffffa24 	.word	0xfffffa24
    }
    TEMP -= ((dT * dT) >> 31);
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	fb02 f203 	mul.w	r2, r2, r3
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	69b9      	ldr	r1, [r7, #24]
 800855c:	fb01 f303 	mul.w	r3, r1, r3
 8008560:	4413      	add	r3, r2
 8008562:	69b9      	ldr	r1, [r7, #24]
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	fba1 1202 	umull	r1, r2, r1, r2
 800856a:	4413      	add	r3, r2
 800856c:	461a      	mov	r2, r3
 800856e:	f04f 0500 	mov.w	r5, #0
 8008572:	f04f 0600 	mov.w	r6, #0
 8008576:	0fcd      	lsrs	r5, r1, #31
 8008578:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 800857c:	17d6      	asrs	r6, r2, #31
 800857e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008582:	460b      	mov	r3, r1
 8008584:	4614      	mov	r4, r2
 8008586:	1b5b      	subs	r3, r3, r5
 8008588:	eb64 0406 	sbc.w	r4, r4, r6
 800858c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  }

  OFF = OFF - ms5611.OFF2;
 8008590:	4b25      	ldr	r3, [pc, #148]	; (8008628 <MS561101BA_Calculate+0x404>)
 8008592:	e9d3 5610 	ldrd	r5, r6, [r3, #64]	; 0x40
 8008596:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800859a:	460b      	mov	r3, r1
 800859c:	4614      	mov	r4, r2
 800859e:	1b5b      	subs	r3, r3, r5
 80085a0:	eb64 0406 	sbc.w	r4, r4, r6
 80085a4:	e9c7 3404 	strd	r3, r4, [r7, #16]
  SENS = SENS - ms5611.SENS2;
 80085a8:	4b1f      	ldr	r3, [pc, #124]	; (8008628 <MS561101BA_Calculate+0x404>)
 80085aa:	e9d3 5612 	ldrd	r5, r6, [r3, #72]	; 0x48
 80085ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80085b2:	460b      	mov	r3, r1
 80085b4:	4614      	mov	r4, r2
 80085b6:	1b5b      	subs	r3, r3, r5
 80085b8:	eb64 0406 	sbc.w	r4, r4, r6
 80085bc:	e9c7 3402 	strd	r3, r4, [r7, #8]

  ms5611.realPressure = ((((int64_t)D1 * SENS) >> 21) - OFF) >> 15;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	f04f 0400 	mov.w	r4, #0
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	fb04 f102 	mul.w	r1, r4, r2
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	fb03 f202 	mul.w	r2, r3, r2
 80085d2:	1888      	adds	r0, r1, r2
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	fba2 1203 	umull	r1, r2, r2, r3
 80085da:	1883      	adds	r3, r0, r2
 80085dc:	461a      	mov	r2, r3
 80085de:	f04f 0300 	mov.w	r3, #0
 80085e2:	f04f 0400 	mov.w	r4, #0
 80085e6:	0d4b      	lsrs	r3, r1, #21
 80085e8:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80085ec:	1554      	asrs	r4, r2, #21
 80085ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80085f2:	1a5b      	subs	r3, r3, r1
 80085f4:	eb64 0402 	sbc.w	r4, r4, r2
 80085f8:	461d      	mov	r5, r3
 80085fa:	4626      	mov	r6, r4
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	f04f 0400 	mov.w	r4, #0
 8008604:	0beb      	lsrs	r3, r5, #15
 8008606:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800860a:	13f4      	asrs	r4, r6, #15
 800860c:	461a      	mov	r2, r3
 800860e:	4b06      	ldr	r3, [pc, #24]	; (8008628 <MS561101BA_Calculate+0x404>)
 8008610:	65da      	str	r2, [r3, #92]	; 0x5c
  ms5611.realTemperature = (uint32_t)TEMP;
 8008612:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8008616:	4b04      	ldr	r3, [pc, #16]	; (8008628 <MS561101BA_Calculate+0x404>)
 8008618:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 800861c:	bf00      	nop
 800861e:	3734      	adds	r7, #52	; 0x34
 8008620:	46bd      	mov	sp, r7
 8008622:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8008626:	4770      	bx	lr
 8008628:	20000da0 	.word	0x20000da0

0800862c <readRegister16>:

// Read 16-bit from register (oops MSB, LSB)
uint16_t readRegister16(uint8_t reg)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	71fb      	strb	r3, [r7, #7]
    uint16_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	2201      	movs	r2, #1
 800863a:	4619      	mov	r1, r3
 800863c:	20ee      	movs	r0, #238	; 0xee
 800863e:	f002 fe85 	bl	800b34c <I2C_Write>

    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 8008642:	2202      	movs	r2, #2
 8008644:	490b      	ldr	r1, [pc, #44]	; (8008674 <readRegister16+0x48>)
 8008646:	20ee      	movs	r0, #238	; 0xee
 8008648:	f002 fec0 	bl	800b3cc <I2C_Read>

    uint8_t vha = rawADC[0];
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <readRegister16+0x48>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	73fb      	strb	r3, [r7, #15]
    uint8_t vla = rawADC[1];
 8008652:	4b08      	ldr	r3, [pc, #32]	; (8008674 <readRegister16+0x48>)
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	73bb      	strb	r3, [r7, #14]

    value = vha << 8 | vla;
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	021b      	lsls	r3, r3, #8
 800865c:	b21a      	sxth	r2, r3
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	b21b      	sxth	r3, r3
 8008662:	4313      	orrs	r3, r2
 8008664:	b21b      	sxth	r3, r3
 8008666:	81bb      	strh	r3, [r7, #12]

    return value;
 8008668:	89bb      	ldrh	r3, [r7, #12]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	20000f0c 	.word	0x20000f0c

08008678 <readRegister24>:

// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	71fb      	strb	r3, [r7, #7]
    uint32_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	2201      	movs	r2, #1
 8008686:	4619      	mov	r1, r3
 8008688:	20ee      	movs	r0, #238	; 0xee
 800868a:	f002 fe5f 	bl	800b34c <I2C_Write>

    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 800868e:	2203      	movs	r2, #3
 8008690:	490c      	ldr	r1, [pc, #48]	; (80086c4 <readRegister24+0x4c>)
 8008692:	20ee      	movs	r0, #238	; 0xee
 8008694:	f002 fe9a 	bl	800b3cc <I2C_Read>

    uint8_t vxa = rawADC[0];
 8008698:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <readRegister24+0x4c>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	73fb      	strb	r3, [r7, #15]
    uint8_t vha = rawADC[1];
 800869e:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <readRegister24+0x4c>)
 80086a0:	785b      	ldrb	r3, [r3, #1]
 80086a2:	73bb      	strb	r3, [r7, #14]
    uint8_t vla = rawADC[2];
 80086a4:	4b07      	ldr	r3, [pc, #28]	; (80086c4 <readRegister24+0x4c>)
 80086a6:	789b      	ldrb	r3, [r3, #2]
 80086a8:	737b      	strb	r3, [r7, #13]

    value = ((int32_t)vxa << 16) | ((int32_t)vha << 8) | vla;
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	041a      	lsls	r2, r3, #16
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	021b      	lsls	r3, r3, #8
 80086b2:	431a      	orrs	r2, r3
 80086b4:	7b7b      	ldrb	r3, [r7, #13]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60bb      	str	r3, [r7, #8]

    return value;
 80086ba:	68bb      	ldr	r3, [r7, #8]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20000f0c 	.word	0x20000f0c

080086c8 <cliBaro>:


void cliBaro(cli_args_t *args)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80086d0:	2300      	movs	r3, #0
 80086d2:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 1 && args->isStr(0, "show")==true)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d14b      	bne.n	8008774 <cliBaro+0xac>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	492b      	ldr	r1, [pc, #172]	; (8008790 <cliBaro+0xc8>)
 80086e2:	2000      	movs	r0, #0
 80086e4:	4798      	blx	r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d043      	beq.n	8008774 <cliBaro+0xac>
	{
		uint32_t currentTime;
		uint32_t pre_time;

		pre_time = micros();
 80086ec:	f7f8 feee 	bl	80014cc <micros>
 80086f0:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 80086f2:	e03a      	b.n	800876a <cliBaro+0xa2>
		{
			currentTime = micros()-pre_time;
 80086f4:	f7f8 feea 	bl	80014cc <micros>
 80086f8:	4602      	mov	r2, r0
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	60fb      	str	r3, [r7, #12]
			if(currentTime >= 4000)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008706:	d32e      	bcc.n	8008766 <cliBaro+0x9e>
			{
				pre_time = micros();
 8008708:	f7f8 fee0 	bl	80014cc <micros>
 800870c:	6138      	str	r0, [r7, #16]
		  	static uint8_t taskOrder = 0;
		  	    switch (taskOrder){ //4~206us
 800870e:	4b21      	ldr	r3, [pc, #132]	; (8008794 <cliBaro+0xcc>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d00f      	beq.n	8008736 <cliBaro+0x6e>
 8008716:	2b02      	cmp	r3, #2
 8008718:	d018      	beq.n	800874c <cliBaro+0x84>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d123      	bne.n	8008766 <cliBaro+0x9e>
		  	      case 0: //200us
		  	        taskOrder++;
 800871e:	4b1d      	ldr	r3, [pc, #116]	; (8008794 <cliBaro+0xcc>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	3301      	adds	r3, #1
 8008724:	b2da      	uxtb	r2, r3
 8008726:	4b1b      	ldr	r3, [pc, #108]	; (8008794 <cliBaro+0xcc>)
 8008728:	701a      	strb	r2, [r3, #0]
		  	        if(Baro_update(currentTime)) break;
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f7ff fc08 	bl	8007f40 <Baro_update>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d114      	bne.n	8008760 <cliBaro+0x98>
		  	      case 1:  //80us
		  	      	taskOrder++;
 8008736:	4b17      	ldr	r3, [pc, #92]	; (8008794 <cliBaro+0xcc>)
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	3301      	adds	r3, #1
 800873c:	b2da      	uxtb	r2, r3
 800873e:	4b15      	ldr	r3, [pc, #84]	; (8008794 <cliBaro+0xcc>)
 8008740:	701a      	strb	r2, [r3, #0]
		  	        if(getEstimatedAltitude() !=0) break;
 8008742:	f7ff fc5b 	bl	8007ffc <getEstimatedAltitude>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10b      	bne.n	8008764 <cliBaro+0x9c>
		  	      case 2:  //40~50us
		  	        taskOrder = 0;
 800874c:	4b11      	ldr	r3, [pc, #68]	; (8008794 <cliBaro+0xcc>)
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]
		  	        cliPrintf("Baro : %d cm\r\n", ms5611.rawTemp);
 8008752:	4b11      	ldr	r3, [pc, #68]	; (8008798 <cliBaro+0xd0>)
 8008754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008756:	4619      	mov	r1, r3
 8008758:	4810      	ldr	r0, [pc, #64]	; (800879c <cliBaro+0xd4>)
 800875a:	f002 fa91 	bl	800ac80 <cliPrintf>
 800875e:	e002      	b.n	8008766 <cliBaro+0x9e>
		  	        if(Baro_update(currentTime)) break;
 8008760:	bf00      	nop
 8008762:	e000      	b.n	8008766 <cliBaro+0x9e>
		  	        if(getEstimatedAltitude() !=0) break;
 8008764:	bf00      	nop
		  	    }
			}
			ret = true;
 8008766:	2301      	movs	r3, #1
 8008768:	75fb      	strb	r3, [r7, #23]
		while(cliKeepLoop())
 800876a:	f002 fb7d 	bl	800ae68 <cliKeepLoop>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1bf      	bne.n	80086f4 <cliBaro+0x2c>
		}
	}
	if(ret !=true)
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	f083 0301 	eor.w	r3, r3, #1
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <cliBaro+0xbe>
	{
		cliPrintf("baro show");
 8008780:	4807      	ldr	r0, [pc, #28]	; (80087a0 <cliBaro+0xd8>)
 8008782:	f002 fa7d 	bl	800ac80 <cliPrintf>
	}
}
 8008786:	bf00      	nop
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	080197ec 	.word	0x080197ec
 8008794:	20000454 	.word	0x20000454
 8008798:	20000da0 	.word	0x20000da0
 800879c:	080197f4 	.word	0x080197f4
 80087a0:	08019804 	.word	0x08019804

080087a4 <serialize8>:
static void s_struct_partial(uint8_t *cb,uint8_t siz);
static void s_struct(uint8_t *cb,uint8_t siz);


void serialize8(uint8_t a)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	71fb      	strb	r3, [r7, #7]
	SerialSerialize(CURRENTPORT,a);
 80087ae:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <serialize8+0x34>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	79fa      	ldrb	r2, [r7, #7]
 80087b4:	4611      	mov	r1, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f001 fc80 	bl	800a0bc <SerialSerialize>
	currentPortState->checksum ^= (a & 0xFF);
 80087bc:	4b07      	ldr	r3, [pc, #28]	; (80087dc <serialize8+0x38>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	7819      	ldrb	r1, [r3, #0]
 80087c2:	4b06      	ldr	r3, [pc, #24]	; (80087dc <serialize8+0x38>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	79fa      	ldrb	r2, [r7, #7]
 80087c8:	404a      	eors	r2, r1
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000662 	.word	0x20000662
 80087dc:	20000028 	.word	0x20000028

080087e0 <read8>:
	serialize8((a>>16) & 0xFF);
	serialize8((a>>24) & 0xFF);
}

uint8_t read8(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
	return currentPortState->inBuf[currentPortState->indRX++] & 0xff;
 80087e4:	4b07      	ldr	r3, [pc, #28]	; (8008804 <read8+0x24>)
 80087e6:	6819      	ldr	r1, [r3, #0]
 80087e8:	4b06      	ldr	r3, [pc, #24]	; (8008804 <read8+0x24>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	785a      	ldrb	r2, [r3, #1]
 80087ee:	1c50      	adds	r0, r2, #1
 80087f0:	b2c0      	uxtb	r0, r0
 80087f2:	7058      	strb	r0, [r3, #1]
 80087f4:	4613      	mov	r3, r2
 80087f6:	440b      	add	r3, r1
 80087f8:	789b      	ldrb	r3, [r3, #2]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bc80      	pop	{r7}
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	20000028 	.word	0x20000028

08008808 <read16>:

uint16_t read16(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
	uint16_t t = read8();
 800880e:	f7ff ffe7 	bl	80087e0 <read8>
 8008812:	4603      	mov	r3, r0
 8008814:	80fb      	strh	r3, [r7, #6]
	t += (uint16_t)read8() << 8;
 8008816:	f7ff ffe3 	bl	80087e0 <read8>
 800881a:	4603      	mov	r3, r0
 800881c:	021b      	lsls	r3, r3, #8
 800881e:	b29a      	uxth	r2, r3
 8008820:	88fb      	ldrh	r3, [r7, #6]
 8008822:	4413      	add	r3, r2
 8008824:	80fb      	strh	r3, [r7, #6]
	return t;
 8008826:	88fb      	ldrh	r3, [r7, #6]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <headSerialResponse>:
{
	headSerial(0, s, cmdMSP);
}

void headSerialResponse(uint8_t err, uint8_t s)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	460a      	mov	r2, r1
 800883a:	71fb      	strb	r3, [r7, #7]
 800883c:	4613      	mov	r3, r2
 800883e:	71bb      	strb	r3, [r7, #6]
	serialize8('$');
 8008840:	2024      	movs	r0, #36	; 0x24
 8008842:	f7ff ffaf 	bl	80087a4 <serialize8>
	serialize8('M');
 8008846:	204d      	movs	r0, #77	; 0x4d
 8008848:	f7ff ffac 	bl	80087a4 <serialize8>
	serialize8(err ? '!' : '>');
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <headSerialResponse+0x26>
 8008852:	2321      	movs	r3, #33	; 0x21
 8008854:	e000      	b.n	8008858 <headSerialResponse+0x28>
 8008856:	233e      	movs	r3, #62	; 0x3e
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff ffa3 	bl	80087a4 <serialize8>
	currentPortState->checksum = 0;               // start calculating a new checksum
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <headSerialResponse+0x54>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2200      	movs	r2, #0
 8008864:	701a      	strb	r2, [r3, #0]
	serialize8(s);
 8008866:	79bb      	ldrb	r3, [r7, #6]
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff ff9b 	bl	80087a4 <serialize8>
	serialize8(currentPortState->cmdMSP);
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <headSerialResponse+0x54>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff ff94 	bl	80087a4 <serialize8>
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20000028 	.word	0x20000028

08008888 <headSerialReply>:

void headSerialReply(uint8_t s)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	71fb      	strb	r3, [r7, #7]
	headSerialResponse(0, s);
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	4619      	mov	r1, r3
 8008896:	2000      	movs	r0, #0
 8008898:	f7ff ffca 	bl	8008830 <headSerialResponse>
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <tailSerialReply>:
{
	headSerialResponse(1, s);
}

void tailSerialReply(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
	SerialSerialize(CURRENTPORT,currentPortState->checksum);
 80088a8:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <tailSerialReply+0x24>)
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	4b07      	ldr	r3, [pc, #28]	; (80088cc <tailSerialReply+0x28>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	4619      	mov	r1, r3
 80088b4:	4610      	mov	r0, r2
 80088b6:	f001 fc01 	bl	800a0bc <SerialSerialize>
	UartSendData(CURRENTPORT);
 80088ba:	4b03      	ldr	r3, [pc, #12]	; (80088c8 <tailSerialReply+0x24>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 fc26 	bl	800a110 <UartSendData>
	//serialize8(currentPortState->checksum);
}
 80088c4:	bf00      	nop
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000662 	.word	0x20000662
 80088cc:	20000028 	.word	0x20000028

080088d0 <s_struct_partial>:

void s_struct_partial(uint8_t *cb,uint8_t siz)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
	while(siz--) serialize8(*cb++);
 80088dc:	e006      	b.n	80088ec <s_struct_partial+0x1c>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	1c5a      	adds	r2, r3, #1
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff ff5c 	bl	80087a4 <serialize8>
 80088ec:	78fb      	ldrb	r3, [r7, #3]
 80088ee:	1e5a      	subs	r2, r3, #1
 80088f0:	70fa      	strb	r2, [r7, #3]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1f3      	bne.n	80088de <s_struct_partial+0xe>
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <s_struct>:

void s_struct(uint8_t *cb,uint8_t siz)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
	headSerialReply(siz);
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff ffbb 	bl	8008888 <headSerialReply>
	s_struct_partial(cb,siz);
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff ffda 	bl	80088d0 <s_struct_partial>
	tailSerialReply();
 800891c:	f7ff ffc2 	bl	80088a4 <tailSerialReply>
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <SerialCom>:
///////////////////////////////////////////////////

void SerialCom(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t timeMax; // limit max time in this function in case of GPS
	timeMax = micros();
 800892e:	f7f8 fdcd 	bl	80014cc <micros>
 8008932:	60f8      	str	r0, [r7, #12]
	int i = 1;
 8008934:	2301      	movs	r3, #1
 8008936:	60bb      	str	r3, [r7, #8]
#ifndef _USE_HW_CLI
	for(int i = 0; i < 2; i++)
	{
#endif
		currentPortState = &ports[i];
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2286      	movs	r2, #134	; 0x86
 800893c:	fb02 f303 	mul.w	r3, r2, r3
 8008940:	4a8f      	ldr	r2, [pc, #572]	; (8008b80 <SerialCom+0x258>)
 8008942:	4413      	add	r3, r2
 8008944:	4a8f      	ldr	r2, [pc, #572]	; (8008b84 <SerialCom+0x25c>)
 8008946:	6013      	str	r3, [r2, #0]
		CURRENTPORT = i;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	b2da      	uxtb	r2, r3
 800894c:	4b8e      	ldr	r3, [pc, #568]	; (8008b88 <SerialCom+0x260>)
 800894e:	701a      	strb	r2, [r3, #0]
		while(uartAvailable(CURRENTPORT) > 0)
 8008950:	e108      	b.n	8008b64 <SerialCom+0x23c>
		{
			c = uartRead(CURRENTPORT);
 8008952:	4b8d      	ldr	r3, [pc, #564]	; (8008b88 <SerialCom+0x260>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	4618      	mov	r0, r3
 8008958:	f003 faa8 	bl	800beac <uartRead>
 800895c:	4603      	mov	r3, r0
 800895e:	71fb      	strb	r3, [r7, #7]
			if (currentPortState->c_state == IDLE)
 8008960:	4b88      	ldr	r3, [pc, #544]	; (8008b84 <SerialCom+0x25c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10a      	bne.n	8008982 <SerialCom+0x5a>
			{
				currentPortState->c_state = (c=='$') ? HEADER_START : IDLE;
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	2b24      	cmp	r3, #36	; 0x24
 8008970:	bf0c      	ite	eq
 8008972:	2301      	moveq	r3, #1
 8008974:	2300      	movne	r3, #0
 8008976:	b2da      	uxtb	r2, r3
 8008978:	4b82      	ldr	r3, [pc, #520]	; (8008b84 <SerialCom+0x25c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8008980:	e0b0      	b.n	8008ae4 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_START)
 8008982:	4b80      	ldr	r3, [pc, #512]	; (8008b84 <SerialCom+0x25c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800898a:	2b01      	cmp	r3, #1
 800898c:	d10a      	bne.n	80089a4 <SerialCom+0x7c>
			{
				currentPortState->c_state = (c=='M') ? HEADER_M : IDLE;
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	2b4d      	cmp	r3, #77	; 0x4d
 8008992:	d101      	bne.n	8008998 <SerialCom+0x70>
 8008994:	2202      	movs	r2, #2
 8008996:	e000      	b.n	800899a <SerialCom+0x72>
 8008998:	2200      	movs	r2, #0
 800899a:	4b7a      	ldr	r3, [pc, #488]	; (8008b84 <SerialCom+0x25c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 80089a2:	e09f      	b.n	8008ae4 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_M)
 80089a4:	4b77      	ldr	r3, [pc, #476]	; (8008b84 <SerialCom+0x25c>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d10a      	bne.n	80089c6 <SerialCom+0x9e>
			{
				currentPortState->c_state = (c=='<') ? HEADER_ARROW : IDLE;
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	2b3c      	cmp	r3, #60	; 0x3c
 80089b4:	d101      	bne.n	80089ba <SerialCom+0x92>
 80089b6:	2203      	movs	r2, #3
 80089b8:	e000      	b.n	80089bc <SerialCom+0x94>
 80089ba:	2200      	movs	r2, #0
 80089bc:	4b71      	ldr	r3, [pc, #452]	; (8008b84 <SerialCom+0x25c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 80089c4:	e08e      	b.n	8008ae4 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_ARROW)
 80089c6:	4b6f      	ldr	r3, [pc, #444]	; (8008b84 <SerialCom+0x25c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d129      	bne.n	8008a26 <SerialCom+0xfe>
			{
				if (c > INBUF_SIZE)
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	2b80      	cmp	r3, #128	; 0x80
 80089d6:	d905      	bls.n	80089e4 <SerialCom+0xbc>
				{  // now we are expecting the payload size
					currentPortState->c_state = IDLE;
 80089d8:	4b6a      	ldr	r3, [pc, #424]	; (8008b84 <SerialCom+0x25c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
					continue;
 80089e2:	e0bf      	b.n	8008b64 <SerialCom+0x23c>
				}
				currentPortState->dataSize = c;
 80089e4:	4b67      	ldr	r3, [pc, #412]	; (8008b84 <SerialCom+0x25c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	79fa      	ldrb	r2, [r7, #7]
 80089ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				currentPortState->offset = 0;
 80089ee:	4b65      	ldr	r3, [pc, #404]	; (8008b84 <SerialCom+0x25c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				currentPortState->indRX = 0;
 80089f8:	4b62      	ldr	r3, [pc, #392]	; (8008b84 <SerialCom+0x25c>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2200      	movs	r2, #0
 80089fe:	705a      	strb	r2, [r3, #1]
				currentPortState->checksum = 0;
 8008a00:	4b60      	ldr	r3, [pc, #384]	; (8008b84 <SerialCom+0x25c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2200      	movs	r2, #0
 8008a06:	701a      	strb	r2, [r3, #0]
				currentPortState->checksum ^= c;
 8008a08:	4b5e      	ldr	r3, [pc, #376]	; (8008b84 <SerialCom+0x25c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	7819      	ldrb	r1, [r3, #0]
 8008a0e:	4b5d      	ldr	r3, [pc, #372]	; (8008b84 <SerialCom+0x25c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	79fa      	ldrb	r2, [r7, #7]
 8008a14:	404a      	eors	r2, r1
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]
				currentPortState->c_state = HEADER_SIZE;
 8008a1a:	4b5a      	ldr	r3, [pc, #360]	; (8008b84 <SerialCom+0x25c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2204      	movs	r2, #4
 8008a20:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8008a24:	e05e      	b.n	8008ae4 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_SIZE)
 8008a26:	4b57      	ldr	r3, [pc, #348]	; (8008b84 <SerialCom+0x25c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d113      	bne.n	8008a5a <SerialCom+0x132>
			{
				currentPortState->cmdMSP = c;
 8008a32:	4b54      	ldr	r3, [pc, #336]	; (8008b84 <SerialCom+0x25c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	79fa      	ldrb	r2, [r7, #7]
 8008a38:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				currentPortState->checksum ^= c;
 8008a3c:	4b51      	ldr	r3, [pc, #324]	; (8008b84 <SerialCom+0x25c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	7819      	ldrb	r1, [r3, #0]
 8008a42:	4b50      	ldr	r3, [pc, #320]	; (8008b84 <SerialCom+0x25c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	79fa      	ldrb	r2, [r7, #7]
 8008a48:	404a      	eors	r2, r1
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]
				currentPortState->c_state = HEADER_CMD;
 8008a4e:	4b4d      	ldr	r3, [pc, #308]	; (8008b84 <SerialCom+0x25c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2205      	movs	r2, #5
 8008a54:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8008a58:	e044      	b.n	8008ae4 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset < currentPortState->dataSize)
 8008a5a:	4b4a      	ldr	r3, [pc, #296]	; (8008b84 <SerialCom+0x25c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008a62:	2b05      	cmp	r3, #5
 8008a64:	d121      	bne.n	8008aaa <SerialCom+0x182>
 8008a66:	4b47      	ldr	r3, [pc, #284]	; (8008b84 <SerialCom+0x25c>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8008a6e:	4b45      	ldr	r3, [pc, #276]	; (8008b84 <SerialCom+0x25c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d217      	bcs.n	8008aaa <SerialCom+0x182>
			{
				currentPortState->checksum ^= c;
 8008a7a:	4b42      	ldr	r3, [pc, #264]	; (8008b84 <SerialCom+0x25c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	7819      	ldrb	r1, [r3, #0]
 8008a80:	4b40      	ldr	r3, [pc, #256]	; (8008b84 <SerialCom+0x25c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	79fa      	ldrb	r2, [r7, #7]
 8008a86:	404a      	eors	r2, r1
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	701a      	strb	r2, [r3, #0]
				currentPortState->inBuf[currentPortState->offset++] = c;
 8008a8c:	4b3d      	ldr	r3, [pc, #244]	; (8008b84 <SerialCom+0x25c>)
 8008a8e:	6819      	ldr	r1, [r3, #0]
 8008a90:	4b3c      	ldr	r3, [pc, #240]	; (8008b84 <SerialCom+0x25c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8008a98:	1c50      	adds	r0, r2, #1
 8008a9a:	b2c0      	uxtb	r0, r0
 8008a9c:	f883 0083 	strb.w	r0, [r3, #131]	; 0x83
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	440b      	add	r3, r1
 8008aa4:	79fa      	ldrb	r2, [r7, #7]
 8008aa6:	709a      	strb	r2, [r3, #2]
 8008aa8:	e01c      	b.n	8008ae4 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset >= currentPortState->dataSize)
 8008aaa:	4b36      	ldr	r3, [pc, #216]	; (8008b84 <SerialCom+0x25c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008ab2:	2b05      	cmp	r3, #5
 8008ab4:	d116      	bne.n	8008ae4 <SerialCom+0x1bc>
 8008ab6:	4b33      	ldr	r3, [pc, #204]	; (8008b84 <SerialCom+0x25c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8008abe:	4b31      	ldr	r3, [pc, #196]	; (8008b84 <SerialCom+0x25c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d30c      	bcc.n	8008ae4 <SerialCom+0x1bc>
			{
				if (currentPortState->checksum == c)
 8008aca:	4b2e      	ldr	r3, [pc, #184]	; (8008b84 <SerialCom+0x25c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	79fa      	ldrb	r2, [r7, #7]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d101      	bne.n	8008ada <SerialCom+0x1b2>
				{
					evaluateCommand();
 8008ad6:	f000 f863 	bl	8008ba0 <evaluateCommand>
				}
				currentPortState->c_state = IDLE;
 8008ada:	4b2a      	ldr	r3, [pc, #168]	; (8008b84 <SerialCom+0x25c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
			}
#ifdef GPS_Recive
			if(i == _DEF_UART1||GPS_virtual)
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <SerialCom+0x1ca>
 8008aea:	4b28      	ldr	r3, [pc, #160]	; (8008b8c <SerialCom+0x264>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d031      	beq.n	8008b56 <SerialCom+0x22e>
			{
				static uint32_t GPS_last_frame_seen; //Last gps frame seen at this time, used to detect stalled gps communication
				if (GPS_newFrame(c)||GPS_virtual)
 8008af2:	79fb      	ldrb	r3, [r7, #7]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7f9 fe71 	bl	80027dc <GPS_newFrame>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d103      	bne.n	8008b08 <SerialCom+0x1e0>
 8008b00:	4b22      	ldr	r3, [pc, #136]	; (8008b8c <SerialCom+0x264>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d014      	beq.n	8008b32 <SerialCom+0x20a>
				{

					//We had a valid GPS data frame, so signal task scheduler to switch to compute
					if (GPS.GPS_update == 1) GPS.GPS_update = 0; else GPS.GPS_update = 1; //Blink GPS update
 8008b08:	4b21      	ldr	r3, [pc, #132]	; (8008b90 <SerialCom+0x268>)
 8008b0a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d104      	bne.n	8008b1c <SerialCom+0x1f4>
 8008b12:	4b1f      	ldr	r3, [pc, #124]	; (8008b90 <SerialCom+0x268>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8008b1a:	e003      	b.n	8008b24 <SerialCom+0x1fc>
 8008b1c:	4b1c      	ldr	r3, [pc, #112]	; (8008b90 <SerialCom+0x268>)
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
					GPS_last_frame_seen = timeMax;
 8008b24:	4a1b      	ldr	r2, [pc, #108]	; (8008b94 <SerialCom+0x26c>)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6013      	str	r3, [r2, #0]
					GPS.GPS_Frame = 1;
 8008b2a:	4b19      	ldr	r3, [pc, #100]	; (8008b90 <SerialCom+0x268>)
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
				}
				// Check for stalled GPS, if no frames seen for 1.2sec then consider it LOST
				if ((timeMax - GPS_last_frame_seen) > 1200000)
 8008b32:	4b18      	ldr	r3, [pc, #96]	; (8008b94 <SerialCom+0x26c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	4a17      	ldr	r2, [pc, #92]	; (8008b98 <SerialCom+0x270>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d90a      	bls.n	8008b56 <SerialCom+0x22e>
				{
					//No update since 1200ms clear fix...
					f.GPS_FIX = 0;
 8008b40:	4b16      	ldr	r3, [pc, #88]	; (8008b9c <SerialCom+0x274>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	741a      	strb	r2, [r3, #16]
					GPS.fixquality = 0;
 8008b46:	4b12      	ldr	r3, [pc, #72]	; (8008b90 <SerialCom+0x268>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
					GPS.satellites = 0;
 8008b4e:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <SerialCom+0x268>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
				}
			}
			if (micros()-timeMax>250) return;  // Limit the maximum execution time of serial decoding to avoid time spike
 8008b56:	f7f8 fcb9 	bl	80014cc <micros>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	2bfa      	cmp	r3, #250	; 0xfa
 8008b62:	d809      	bhi.n	8008b78 <SerialCom+0x250>
		while(uartAvailable(CURRENTPORT) > 0)
 8008b64:	4b08      	ldr	r3, [pc, #32]	; (8008b88 <SerialCom+0x260>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f003 f93b 	bl	800bde4 <uartAvailable>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f47f aeee 	bne.w	8008952 <SerialCom+0x2a>
 8008b76:	e000      	b.n	8008b7a <SerialCom+0x252>
			if (micros()-timeMax>250) return;  // Limit the maximum execution time of serial decoding to avoid time spike
 8008b78:	bf00      	nop
#endif
		}
#ifndef _USE_HW_CLI
	}
#endif
}
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	2000067c 	.word	0x2000067c
 8008b84:	20000028 	.word	0x20000028
 8008b88:	20000662 	.word	0x20000662
 8008b8c:	20000678 	.word	0x20000678
 8008b90:	20000b78 	.word	0x20000b78
 8008b94:	20000788 	.word	0x20000788
 8008b98:	00124f80 	.word	0x00124f80
 8008b9c:	20000ed4 	.word	0x20000ed4

08008ba0 <evaluateCommand>:

void evaluateCommand(void)
{
 8008ba0:	b590      	push	{r4, r7, lr}
 8008ba2:	b0ab      	sub	sp, #172	; 0xac
 8008ba4:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	uint32_t tmp=0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	switch(currentPortState->cmdMSP)
 8008bb2:	4be5      	ldr	r3, [pc, #916]	; (8008f48 <evaluateCommand+0x3a8>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008bba:	3b38      	subs	r3, #56	; 0x38
 8008bbc:	2b9e      	cmp	r3, #158	; 0x9e
 8008bbe:	f201 826e 	bhi.w	800a09e <evaluateCommand+0x14fe>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <evaluateCommand+0x28>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08009ea5 	.word	0x08009ea5
 8008bcc:	0800a09f 	.word	0x0800a09f
 8008bd0:	0800a09f 	.word	0x0800a09f
 8008bd4:	0800a09f 	.word	0x0800a09f
 8008bd8:	0800a09f 	.word	0x0800a09f
 8008bdc:	0800a09f 	.word	0x0800a09f
 8008be0:	0800a09f 	.word	0x0800a09f
 8008be4:	0800a09f 	.word	0x0800a09f
 8008be8:	0800a09f 	.word	0x0800a09f
 8008bec:	0800a09f 	.word	0x0800a09f
 8008bf0:	0800a09f 	.word	0x0800a09f
 8008bf4:	0800a09f 	.word	0x0800a09f
 8008bf8:	0800a09f 	.word	0x0800a09f
 8008bfc:	0800a09f 	.word	0x0800a09f
 8008c00:	0800a09f 	.word	0x0800a09f
 8008c04:	0800a09f 	.word	0x0800a09f
 8008c08:	0800a09f 	.word	0x0800a09f
 8008c0c:	0800a09f 	.word	0x0800a09f
 8008c10:	0800a09f 	.word	0x0800a09f
 8008c14:	0800a09f 	.word	0x0800a09f
 8008c18:	0800a09f 	.word	0x0800a09f
 8008c1c:	0800a09f 	.word	0x0800a09f
 8008c20:	0800a09f 	.word	0x0800a09f
 8008c24:	0800a09f 	.word	0x0800a09f
 8008c28:	0800a09f 	.word	0x0800a09f
 8008c2c:	0800a09f 	.word	0x0800a09f
 8008c30:	0800a09f 	.word	0x0800a09f
 8008c34:	0800a09f 	.word	0x0800a09f
 8008c38:	0800a09f 	.word	0x0800a09f
 8008c3c:	0800a09f 	.word	0x0800a09f
 8008c40:	0800a09f 	.word	0x0800a09f
 8008c44:	0800a09f 	.word	0x0800a09f
 8008c48:	0800a09f 	.word	0x0800a09f
 8008c4c:	0800a09f 	.word	0x0800a09f
 8008c50:	0800a09f 	.word	0x0800a09f
 8008c54:	0800a09f 	.word	0x0800a09f
 8008c58:	0800a09f 	.word	0x0800a09f
 8008c5c:	0800a09f 	.word	0x0800a09f
 8008c60:	0800a09f 	.word	0x0800a09f
 8008c64:	0800a09f 	.word	0x0800a09f
 8008c68:	0800a09f 	.word	0x0800a09f
 8008c6c:	0800a09f 	.word	0x0800a09f
 8008c70:	0800a09f 	.word	0x0800a09f
 8008c74:	0800a09f 	.word	0x0800a09f
 8008c78:	0800a09f 	.word	0x0800a09f
 8008c7c:	08008fb7 	.word	0x08008fb7
 8008c80:	080092f3 	.word	0x080092f3
 8008c84:	0800a09f 	.word	0x0800a09f
 8008c88:	080093e5 	.word	0x080093e5
 8008c8c:	08008f5d 	.word	0x08008f5d
 8008c90:	080093af 	.word	0x080093af
 8008c94:	0800a09f 	.word	0x0800a09f
 8008c98:	08009013 	.word	0x08009013
 8008c9c:	0800901f 	.word	0x0800901f
 8008ca0:	080097cf 	.word	0x080097cf
 8008ca4:	0800a09f 	.word	0x0800a09f
 8008ca8:	08009405 	.word	0x08009405
 8008cac:	0800a09f 	.word	0x0800a09f
 8008cb0:	0800903b 	.word	0x0800903b
 8008cb4:	0800a09f 	.word	0x0800a09f
 8008cb8:	0800a09f 	.word	0x0800a09f
 8008cbc:	0800a09f 	.word	0x0800a09f
 8008cc0:	0800a09f 	.word	0x0800a09f
 8008cc4:	0800a09f 	.word	0x0800a09f
 8008cc8:	0800a09f 	.word	0x0800a09f
 8008ccc:	08009c95 	.word	0x08009c95
 8008cd0:	08009cbd 	.word	0x08009cbd
 8008cd4:	0800a09f 	.word	0x0800a09f
 8008cd8:	0800a09f 	.word	0x0800a09f
 8008cdc:	0800a09f 	.word	0x0800a09f
 8008ce0:	0800a09f 	.word	0x0800a09f
 8008ce4:	0800a09f 	.word	0x0800a09f
 8008ce8:	0800a09f 	.word	0x0800a09f
 8008cec:	0800a09f 	.word	0x0800a09f
 8008cf0:	0800a09f 	.word	0x0800a09f
 8008cf4:	0800a09f 	.word	0x0800a09f
 8008cf8:	0800a09f 	.word	0x0800a09f
 8008cfc:	0800a09f 	.word	0x0800a09f
 8008d00:	0800a09f 	.word	0x0800a09f
 8008d04:	0800a09f 	.word	0x0800a09f
 8008d08:	0800a09f 	.word	0x0800a09f
 8008d0c:	0800a09f 	.word	0x0800a09f
 8008d10:	0800a09f 	.word	0x0800a09f
 8008d14:	0800a09f 	.word	0x0800a09f
 8008d18:	0800a09f 	.word	0x0800a09f
 8008d1c:	0800a09f 	.word	0x0800a09f
 8008d20:	0800a09f 	.word	0x0800a09f
 8008d24:	0800a09f 	.word	0x0800a09f
 8008d28:	0800a09f 	.word	0x0800a09f
 8008d2c:	0800a09f 	.word	0x0800a09f
 8008d30:	0800a09f 	.word	0x0800a09f
 8008d34:	0800a09f 	.word	0x0800a09f
 8008d38:	0800a09f 	.word	0x0800a09f
 8008d3c:	0800a09f 	.word	0x0800a09f
 8008d40:	08008e55 	.word	0x08008e55
 8008d44:	08008e45 	.word	0x08008e45
 8008d48:	08008e4d 	.word	0x08008e4d
 8008d4c:	08009e75 	.word	0x08009e75
 8008d50:	08009e81 	.word	0x08009e81
 8008d54:	08009e8d 	.word	0x08009e8d
 8008d58:	08009e99 	.word	0x08009e99
 8008d5c:	0800a09f 	.word	0x0800a09f
 8008d60:	0800a09f 	.word	0x0800a09f
 8008d64:	0800a09f 	.word	0x0800a09f
 8008d68:	0800a09f 	.word	0x0800a09f
 8008d6c:	0800a09f 	.word	0x0800a09f
 8008d70:	0800a09f 	.word	0x0800a09f
 8008d74:	0800a09f 	.word	0x0800a09f
 8008d78:	0800a09f 	.word	0x0800a09f
 8008d7c:	0800a09f 	.word	0x0800a09f
 8008d80:	0800a09f 	.word	0x0800a09f
 8008d84:	0800a09f 	.word	0x0800a09f
 8008d88:	0800a09f 	.word	0x0800a09f
 8008d8c:	0800a09f 	.word	0x0800a09f
 8008d90:	0800a09f 	.word	0x0800a09f
 8008d94:	0800a09f 	.word	0x0800a09f
 8008d98:	0800a09f 	.word	0x0800a09f
 8008d9c:	0800a09f 	.word	0x0800a09f
 8008da0:	0800a09f 	.word	0x0800a09f
 8008da4:	0800a09f 	.word	0x0800a09f
 8008da8:	0800a09f 	.word	0x0800a09f
 8008dac:	0800a09f 	.word	0x0800a09f
 8008db0:	0800a09f 	.word	0x0800a09f
 8008db4:	0800a09f 	.word	0x0800a09f
 8008db8:	0800a09f 	.word	0x0800a09f
 8008dbc:	0800a09f 	.word	0x0800a09f
 8008dc0:	0800a09f 	.word	0x0800a09f
 8008dc4:	0800a09f 	.word	0x0800a09f
 8008dc8:	0800a09f 	.word	0x0800a09f
 8008dcc:	0800a09f 	.word	0x0800a09f
 8008dd0:	0800a09f 	.word	0x0800a09f
 8008dd4:	0800a09f 	.word	0x0800a09f
 8008dd8:	0800a09f 	.word	0x0800a09f
 8008ddc:	0800a09f 	.word	0x0800a09f
 8008de0:	0800a09f 	.word	0x0800a09f
 8008de4:	0800a09f 	.word	0x0800a09f
 8008de8:	0800a09f 	.word	0x0800a09f
 8008dec:	0800a09f 	.word	0x0800a09f
 8008df0:	0800a09f 	.word	0x0800a09f
 8008df4:	0800a09f 	.word	0x0800a09f
 8008df8:	0800a09f 	.word	0x0800a09f
 8008dfc:	0800a09f 	.word	0x0800a09f
 8008e00:	0800a09f 	.word	0x0800a09f
 8008e04:	0800a09f 	.word	0x0800a09f
 8008e08:	0800a09f 	.word	0x0800a09f
 8008e0c:	0800a09f 	.word	0x0800a09f
 8008e10:	08009803 	.word	0x08009803
 8008e14:	0800a09f 	.word	0x0800a09f
 8008e18:	0800a09f 	.word	0x0800a09f
 8008e1c:	08009e3b 	.word	0x08009e3b
 8008e20:	08009e55 	.word	0x08009e55
 8008e24:	0800a09f 	.word	0x0800a09f
 8008e28:	0800a09f 	.word	0x0800a09f
 8008e2c:	0800a09f 	.word	0x0800a09f
 8008e30:	0800a09f 	.word	0x0800a09f
 8008e34:	0800a09f 	.word	0x0800a09f
 8008e38:	0800a09f 	.word	0x0800a09f
 8008e3c:	0800a09f 	.word	0x0800a09f
 8008e40:	08009c33 	.word	0x08009c33
	{
		case MSP_ARM:
			mwArm();
 8008e44:	f7fc fe56 	bl	8005af4 <mwArm>
			break;
 8008e48:	f001 b92e 	b.w	800a0a8 <evaluateCommand+0x1508>

		case MSP_DISARM:
			mwDisarm();
 8008e4c:	f7fc fe6a 	bl	8005b24 <mwDisarm>
			break;
 8008e50:	f001 b92a 	b.w	800a0a8 <evaluateCommand+0x1508>

		case MSP_RC_RAW:
			for(i=0; i < 5; i++)
 8008e54:	2300      	movs	r3, #0
 8008e56:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8008e5a:	e00f      	b.n	8008e7c <evaluateCommand+0x2dc>
			{
				RC_Raw.rcCommand[i]  = read8();
 8008e5c:	f7ff fcc0 	bl	80087e0 <read8>
 8008e60:	4603      	mov	r3, r0
 8008e62:	461a      	mov	r2, r3
 8008e64:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008e68:	b211      	sxth	r1, r2
 8008e6a:	4a38      	ldr	r2, [pc, #224]	; (8008f4c <evaluateCommand+0x3ac>)
 8008e6c:	3328      	adds	r3, #40	; 0x28
 8008e6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i=0; i < 5; i++)
 8008e72:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008e76:	3301      	adds	r3, #1
 8008e78:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8008e7c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d9eb      	bls.n	8008e5c <evaluateCommand+0x2bc>
			}
			RC.rcCommand[ROLL]     = map(RC_Raw.rcCommand[ROLL], 0, 250, -20, 20)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
 8008e84:	4b31      	ldr	r3, [pc, #196]	; (8008f4c <evaluateCommand+0x3ac>)
 8008e86:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	4a2e      	ldr	r2, [pc, #184]	; (8008f50 <evaluateCommand+0x3b0>)
 8008e96:	fb82 1203 	smull	r1, r2, r2, r3
 8008e9a:	1112      	asrs	r2, r2, #4
 8008e9c:	17db      	asrs	r3, r3, #31
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	4b2c      	ldr	r3, [pc, #176]	; (8008f54 <evaluateCommand+0x3b4>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	4413      	add	r3, r2
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	3b14      	subs	r3, #20
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	b21a      	sxth	r2, r3
 8008eb2:	4b29      	ldr	r3, [pc, #164]	; (8008f58 <evaluateCommand+0x3b8>)
 8008eb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			RC.rcCommand[PITCH]    = map(RC_Raw.rcCommand[PITCH], 0, 250, -20, 20)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 8008eb8:	4b24      	ldr	r3, [pc, #144]	; (8008f4c <evaluateCommand+0x3ac>)
 8008eba:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	00db      	lsls	r3, r3, #3
 8008ec8:	4a21      	ldr	r2, [pc, #132]	; (8008f50 <evaluateCommand+0x3b0>)
 8008eca:	fb82 1203 	smull	r1, r2, r2, r3
 8008ece:	1112      	asrs	r2, r2, #4
 8008ed0:	17db      	asrs	r3, r3, #31
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	4b1f      	ldr	r3, [pc, #124]	; (8008f54 <evaluateCommand+0x3b4>)
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	4413      	add	r3, r2
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3b14      	subs	r3, #20
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	b21a      	sxth	r2, r3
 8008ee6:	4b1c      	ldr	r3, [pc, #112]	; (8008f58 <evaluateCommand+0x3b8>)
 8008ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			RC.rcCommand[YAW]      = map(RC_Raw.rcCommand[YAW], 0, 250, -100, 100); //0~250 left:0, right:250
 8008eec:	4b17      	ldr	r3, [pc, #92]	; (8008f4c <evaluateCommand+0x3ac>)
 8008eee:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	23c8      	movs	r3, #200	; 0xc8
 8008ef6:	fb03 f302 	mul.w	r3, r3, r2
 8008efa:	4a15      	ldr	r2, [pc, #84]	; (8008f50 <evaluateCommand+0x3b0>)
 8008efc:	fb82 1203 	smull	r1, r2, r2, r3
 8008f00:	1112      	asrs	r2, r2, #4
 8008f02:	17db      	asrs	r3, r3, #31
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	3b64      	subs	r3, #100	; 0x64
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	b21a      	sxth	r2, r3
 8008f0e:	4b12      	ldr	r3, [pc, #72]	; (8008f58 <evaluateCommand+0x3b8>)
 8008f10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			RC.rcCommand[THROTTLE] = map(RC_Raw.rcCommand[THROTTLE], 0, 250, 0, 1800);//0~250
 8008f14:	4b0d      	ldr	r3, [pc, #52]	; (8008f4c <evaluateCommand+0x3ac>)
 8008f16:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8008f20:	fb03 f302 	mul.w	r3, r3, r2
 8008f24:	4a0a      	ldr	r2, [pc, #40]	; (8008f50 <evaluateCommand+0x3b0>)
 8008f26:	fb82 1203 	smull	r1, r2, r2, r3
 8008f2a:	1112      	asrs	r2, r2, #4
 8008f2c:	17db      	asrs	r3, r3, #31
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	b21a      	sxth	r2, r3
 8008f32:	4b09      	ldr	r3, [pc, #36]	; (8008f58 <evaluateCommand+0x3b8>)
 8008f34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			RC.rcCommand[AUX1] 	   =  RC_Raw.rcCommand[GEAR];
 8008f38:	4b04      	ldr	r3, [pc, #16]	; (8008f4c <evaluateCommand+0x3ac>)
 8008f3a:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 8008f3e:	4b06      	ldr	r3, [pc, #24]	; (8008f58 <evaluateCommand+0x3b8>)
 8008f40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			break;
 8008f44:	f001 b8b0 	b.w	800a0a8 <evaluateCommand+0x1508>
 8008f48:	20000028 	.word	0x20000028
 8008f4c:	20000cd4 	.word	0x20000cd4
 8008f50:	10624dd3 	.word	0x10624dd3
 8008f54:	20000664 	.word	0x20000664
 8008f58:	20000d40 	.word	0x20000d40

		case MSP_RC:
		{  struct {
			uint16_t roll, pitch, yaw, throttle, gear, aux1;
		} rc;
		rc.roll     = RC.rcCommand[ROLL];
 8008f5c:	4b92      	ldr	r3, [pc, #584]	; (80091a8 <evaluateCommand+0x608>)
 8008f5e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		rc.pitch    = RC.rcCommand[PITCH];
 8008f68:	4b8f      	ldr	r3, [pc, #572]	; (80091a8 <evaluateCommand+0x608>)
 8008f6a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		rc.yaw      = RC.rcCommand[YAW];
 8008f74:	4b8c      	ldr	r3, [pc, #560]	; (80091a8 <evaluateCommand+0x608>)
 8008f76:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		rc.throttle = RC.rcCommand[THROTTLE];
 8008f80:	4b89      	ldr	r3, [pc, #548]	; (80091a8 <evaluateCommand+0x608>)
 8008f82:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		rc.aux1     = RC.rcCommand[AUX1];
 8008f8c:	4b86      	ldr	r3, [pc, #536]	; (80091a8 <evaluateCommand+0x608>)
 8008f8e:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		rc.gear     = RC.rcCommand[GEAR];
 8008f98:	4b83      	ldr	r3, [pc, #524]	; (80091a8 <evaluateCommand+0x608>)
 8008f9a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		s_struct((uint8_t*)&rc, 12);
 8008fa4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008fa8:	210c      	movs	r1, #12
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff fca7 	bl	80088fe <s_struct>
		break;
 8008fb0:	bf00      	nop
 8008fb2:	f001 b879 	b.w	800a0a8 <evaluateCommand+0x1508>
		{ struct {
			uint32_t ArmedTime;
			uint32_t cycleTime;
			uint8_t error, flag;
		} st;
		st.ArmedTime    = armedTime;
 8008fb6:	4b7d      	ldr	r3, [pc, #500]	; (80091ac <evaluateCommand+0x60c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		st.cycleTime    = loopTime;
 8008fbe:	4b7c      	ldr	r3, [pc, #496]	; (80091b0 <evaluateCommand+0x610>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		st.error        = Error.error;
 8008fc6:	4b7b      	ldr	r3, [pc, #492]	; (80091b4 <evaluateCommand+0x614>)
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		if(f.ARMED) tmp |= 1<<BOXARM;
 8008fce:	4b7a      	ldr	r3, [pc, #488]	; (80091b8 <evaluateCommand+0x618>)
 8008fd0:	785b      	ldrb	r3, [r3, #1]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <evaluateCommand+0x442>
 8008fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fda:	f043 0301 	orr.w	r3, r3, #1
 8008fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8008fe2:	4b75      	ldr	r3, [pc, #468]	; (80091b8 <evaluateCommand+0x618>)
 8008fe4:	7b9b      	ldrb	r3, [r3, #14]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d005      	beq.n	8008ff6 <evaluateCommand+0x456>
 8008fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fee:	f043 0302 	orr.w	r3, r3, #2
 8008ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		st.flag         = tmp;
 8008ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
		s_struct((uint8_t*)&st,10);
 8009000:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009004:	210a      	movs	r1, #10
 8009006:	4618      	mov	r0, r3
 8009008:	f7ff fc79 	bl	80088fe <s_struct>
		break;
 800900c:	bf00      	nop
 800900e:	f001 b84b 	b.w	800a0a8 <evaluateCommand+0x1508>
		}

		case MSP_ATTITUDE:
			s_struct((uint8_t*)&att,8);
 8009012:	2108      	movs	r1, #8
 8009014:	4869      	ldr	r0, [pc, #420]	; (80091bc <evaluateCommand+0x61c>)
 8009016:	f7ff fc72 	bl	80088fe <s_struct>
			break;
 800901a:	f001 b845 	b.w	800a0a8 <evaluateCommand+0x1508>

		case MSP_ALTITUDE:
		{ struct {
			int16_t alt;
		} tmp;
		tmp.alt = (int16_t) alt.EstAlt;
 800901e:	4b68      	ldr	r3, [pc, #416]	; (80091c0 <evaluateCommand+0x620>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	b21b      	sxth	r3, r3
 8009024:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		s_struct((uint8_t*)&tmp,2);
 8009028:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800902c:	2102      	movs	r1, #2
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff fc65 	bl	80088fe <s_struct>
		break;
 8009034:	bf00      	nop
 8009036:	f001 b837 	b.w	800a0a8 <evaluateCommand+0x1508>
			int16_t e;
			uint16_t f;
			int16_t motor[4];//74
			int16_t debug_t[4];//82
		} tele;
		tele.roll     = RC.rcCommand[ROLL];
 800903a:	4b5b      	ldr	r3, [pc, #364]	; (80091a8 <evaluateCommand+0x608>)
 800903c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8009040:	b29b      	uxth	r3, r3
 8009042:	80bb      	strh	r3, [r7, #4]
		tele.pitch    = RC.rcCommand[PITCH];
 8009044:	4b58      	ldr	r3, [pc, #352]	; (80091a8 <evaluateCommand+0x608>)
 8009046:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800904a:	b29b      	uxth	r3, r3
 800904c:	80fb      	strh	r3, [r7, #6]
		tele.yaw      = RC.rcCommand[YAW];
 800904e:	4b56      	ldr	r3, [pc, #344]	; (80091a8 <evaluateCommand+0x608>)
 8009050:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8009054:	b29b      	uxth	r3, r3
 8009056:	813b      	strh	r3, [r7, #8]
		tele.throttle = RC.rcCommand[THROTTLE];
 8009058:	4b53      	ldr	r3, [pc, #332]	; (80091a8 <evaluateCommand+0x608>)
 800905a:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800905e:	b29b      	uxth	r3, r3
 8009060:	817b      	strh	r3, [r7, #10]
		tele.aux1     = RC.rcCommand[AUX1];
 8009062:	4b51      	ldr	r3, [pc, #324]	; (80091a8 <evaluateCommand+0x608>)
 8009064:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8009068:	b29b      	uxth	r3, r3
 800906a:	81fb      	strh	r3, [r7, #14]
		tele.gear     = RC.rcCommand[GEAR];
 800906c:	4b4e      	ldr	r3, [pc, #312]	; (80091a8 <evaluateCommand+0x608>)
 800906e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8009072:	b29b      	uxth	r3, r3
 8009074:	81bb      	strh	r3, [r7, #12]
		tele.ArmedTime    = armedTime;
 8009076:	4b4d      	ldr	r3, [pc, #308]	; (80091ac <evaluateCommand+0x60c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	613b      	str	r3, [r7, #16]
		tele.cycleTime    = loopTime;
 800907c:	4b4c      	ldr	r3, [pc, #304]	; (80091b0 <evaluateCommand+0x610>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	617b      	str	r3, [r7, #20]
		tele.error        = Error.error;
 8009082:	4b4c      	ldr	r3, [pc, #304]	; (80091b4 <evaluateCommand+0x614>)
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	763b      	strb	r3, [r7, #24]
		if(f.ARMED) tmp |= 1<<BOXARM;
 8009088:	4b4b      	ldr	r3, [pc, #300]	; (80091b8 <evaluateCommand+0x618>)
 800908a:	785b      	ldrb	r3, [r3, #1]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <evaluateCommand+0x4fc>
 8009090:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009094:	f043 0301 	orr.w	r3, r3, #1
 8009098:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 800909c:	4b46      	ldr	r3, [pc, #280]	; (80091b8 <evaluateCommand+0x618>)
 800909e:	7b9b      	ldrb	r3, [r3, #14]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <evaluateCommand+0x510>
 80090a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090a8:	f043 0302 	orr.w	r3, r3, #2
 80090ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ACRO_MODE) tmp |= 1<<BOXACRO_MODE;
 80090b0:	4b41      	ldr	r3, [pc, #260]	; (80091b8 <evaluateCommand+0x618>)
 80090b2:	79db      	ldrb	r3, [r3, #7]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <evaluateCommand+0x524>
 80090b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090bc:	f043 0304 	orr.w	r3, r3, #4
 80090c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ANGLE_MODE) tmp |= 1<<BOXANGLE_MODE;
 80090c4:	4b3c      	ldr	r3, [pc, #240]	; (80091b8 <evaluateCommand+0x618>)
 80090c6:	795b      	ldrb	r3, [r3, #5]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <evaluateCommand+0x538>
 80090cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090d0:	f043 0308 	orr.w	r3, r3, #8
 80090d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_ACC) tmp |= 1<<BOXCALIBRATE_ACC;
 80090d8:	4b37      	ldr	r3, [pc, #220]	; (80091b8 <evaluateCommand+0x618>)
 80090da:	791b      	ldrb	r3, [r3, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d005      	beq.n	80090ec <evaluateCommand+0x54c>
 80090e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090e4:	f043 0310 	orr.w	r3, r3, #16
 80090e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_MAG) tmp |= 1<<BOXCALIBRATE_MAG;
 80090ec:	4b32      	ldr	r3, [pc, #200]	; (80091b8 <evaluateCommand+0x618>)
 80090ee:	7cdb      	ldrb	r3, [r3, #19]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <evaluateCommand+0x560>
 80090f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090f8:	f043 0320 	orr.w	r3, r3, #32
 80090fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.GPS_HOLD_MODE) tmp |= 1<<BOXGPS_MODE;
 8009100:	4b2d      	ldr	r3, [pc, #180]	; (80091b8 <evaluateCommand+0x618>)
 8009102:	7b5b      	ldrb	r3, [r3, #13]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d005      	beq.n	8009114 <evaluateCommand+0x574>
 8009108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800910c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009110:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		tele.flag         = tmp;
 8009114:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009118:	b2db      	uxtb	r3, r3
 800911a:	767b      	strb	r3, [r7, #25]
		tele.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 800911c:	4b29      	ldr	r3, [pc, #164]	; (80091c4 <evaluateCommand+0x624>)
 800911e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009122:	4618      	mov	r0, r3
 8009124:	f7f8 f824 	bl	8001170 <__aeabi_f2iz>
 8009128:	4603      	mov	r3, r0
 800912a:	b21b      	sxth	r3, r3
 800912c:	b29b      	uxth	r3, r3
 800912e:	461a      	mov	r2, r3
 8009130:	0092      	lsls	r2, r2, #2
 8009132:	4413      	add	r3, r2
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	b29b      	uxth	r3, r3
 8009138:	b21b      	sxth	r3, r3
 800913a:	837b      	strh	r3, [r7, #26]
		tele.angle[PITCH] = (int16_t) imu.AHRS[PITCH] * 10;
 800913c:	4b21      	ldr	r3, [pc, #132]	; (80091c4 <evaluateCommand+0x624>)
 800913e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009142:	4618      	mov	r0, r3
 8009144:	f7f8 f814 	bl	8001170 <__aeabi_f2iz>
 8009148:	4603      	mov	r3, r0
 800914a:	b21b      	sxth	r3, r3
 800914c:	b29b      	uxth	r3, r3
 800914e:	461a      	mov	r2, r3
 8009150:	0092      	lsls	r2, r2, #2
 8009152:	4413      	add	r3, r2
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	b29b      	uxth	r3, r3
 8009158:	b21b      	sxth	r3, r3
 800915a:	83bb      	strh	r3, [r7, #28]
		tele.heading = (int16_t) imu.gyroRaw[YAW];
 800915c:	4b19      	ldr	r3, [pc, #100]	; (80091c4 <evaluateCommand+0x624>)
 800915e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009160:	4618      	mov	r0, r3
 8009162:	f7f8 f805 	bl	8001170 <__aeabi_f2iz>
 8009166:	4603      	mov	r3, r0
 8009168:	b21b      	sxth	r3, r3
 800916a:	83fb      	strh	r3, [r7, #30]
		tele.mag_heading = (int16_t) imu.actual_compass_heading;
 800916c:	4b15      	ldr	r3, [pc, #84]	; (80091c4 <evaluateCommand+0x624>)
 800916e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009172:	b21b      	sxth	r3, r3
 8009174:	843b      	strh	r3, [r7, #32]
		tele.alt = (int16_t) alt.EstAlt;
 8009176:	4b12      	ldr	r3, [pc, #72]	; (80091c0 <evaluateCommand+0x620>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	b21b      	sxth	r3, r3
 800917c:	847b      	strh	r3, [r7, #34]	; 0x22
		tele.VBAT = (int16_t) 100;//BAT.VBAT;
 800917e:	2364      	movs	r3, #100	; 0x64
 8009180:	84bb      	strh	r3, [r7, #36]	; 0x24
		tele.Temp = (int16_t) imu.Temp*10;
 8009182:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <evaluateCommand+0x624>)
 8009184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009186:	4618      	mov	r0, r3
 8009188:	f7f7 fff2 	bl	8001170 <__aeabi_f2iz>
 800918c:	4603      	mov	r3, r0
 800918e:	b21b      	sxth	r3, r3
 8009190:	b29b      	uxth	r3, r3
 8009192:	461a      	mov	r2, r3
 8009194:	0092      	lsls	r2, r2, #2
 8009196:	4413      	add	r3, r2
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	b29b      	uxth	r3, r3
 800919c:	b21b      	sxth	r3, r3
 800919e:	84fb      	strh	r3, [r7, #38]	; 0x26
		for(uint8_t axis=0; axis<3;axis++)
 80091a0:	2300      	movs	r3, #0
 80091a2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80091a6:	e055      	b.n	8009254 <evaluateCommand+0x6b4>
 80091a8:	20000d40 	.word	0x20000d40
 80091ac:	20000268 	.word	0x20000268
 80091b0:	20000260 	.word	0x20000260
 80091b4:	20000acc 	.word	0x20000acc
 80091b8:	20000ed4 	.word	0x20000ed4
 80091bc:	20000ef8 	.word	0x20000ef8
 80091c0:	20000ef0 	.word	0x20000ef0
 80091c4:	20000e20 	.word	0x20000e20
		{
			tele.acc[axis]  = (int16_t) imu.accSmooth[axis];
 80091c8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80091cc:	4a88      	ldr	r2, [pc, #544]	; (80093f0 <evaluateCommand+0x850>)
 80091ce:	330a      	adds	r3, #10
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 80091da:	4618      	mov	r0, r3
 80091dc:	f7f7 ffc8 	bl	8001170 <__aeabi_f2iz>
 80091e0:	4603      	mov	r3, r0
 80091e2:	b21a      	sxth	r2, r3
 80091e4:	f104 0310 	add.w	r3, r4, #16
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80091ee:	440b      	add	r3, r1
 80091f0:	f823 2ca0 	strh.w	r2, [r3, #-160]
			tele.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 80091f4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80091f8:	4a7d      	ldr	r2, [pc, #500]	; (80093f0 <evaluateCommand+0x850>)
 80091fa:	330e      	adds	r3, #14
 80091fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009200:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 8009204:	4618      	mov	r0, r3
 8009206:	f7f7 ffb3 	bl	8001170 <__aeabi_f2iz>
 800920a:	4603      	mov	r3, r0
 800920c:	b21a      	sxth	r2, r3
 800920e:	f104 0314 	add.w	r3, r4, #20
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8009218:	440b      	add	r3, r1
 800921a:	f823 2ca2 	strh.w	r2, [r3, #-162]
			tele.mag[axis]  = (int16_t) imu.magSmooth[axis];
 800921e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8009222:	4a73      	ldr	r2, [pc, #460]	; (80093f0 <evaluateCommand+0x850>)
 8009224:	3310      	adds	r3, #16
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 8009230:	4618      	mov	r0, r3
 8009232:	f7f7 ff9d 	bl	8001170 <__aeabi_f2iz>
 8009236:	4603      	mov	r3, r0
 8009238:	b21a      	sxth	r2, r3
 800923a:	f104 0318 	add.w	r3, r4, #24
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8009244:	440b      	add	r3, r1
 8009246:	f823 2ca4 	strh.w	r2, [r3, #-164]
		for(uint8_t axis=0; axis<3;axis++)
 800924a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800924e:	3301      	adds	r3, #1
 8009250:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8009254:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8009258:	2b02      	cmp	r3, #2
 800925a:	d9b5      	bls.n	80091c8 <evaluateCommand+0x628>
		}
		tele.a     = GPS.fixquality;
 800925c:	4b65      	ldr	r3, [pc, #404]	; (80093f4 <evaluateCommand+0x854>)
 800925e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009262:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		tele.b     = GPS.satellites;
 8009266:	4b63      	ldr	r3, [pc, #396]	; (80093f4 <evaluateCommand+0x854>)
 8009268:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800926c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		tele.c     = GPS_coord[LAT];
 8009270:	4b61      	ldr	r3, [pc, #388]	; (80093f8 <evaluateCommand+0x858>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	63fb      	str	r3, [r7, #60]	; 0x3c
		tele.d     = GPS_coord[LON];
 8009276:	4b60      	ldr	r3, [pc, #384]	; (80093f8 <evaluateCommand+0x858>)
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	643b      	str	r3, [r7, #64]	; 0x40
		tele.e     = GPS.altitude;
 800927c:	4b5d      	ldr	r3, [pc, #372]	; (80093f4 <evaluateCommand+0x854>)
 800927e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8009282:	b21b      	sxth	r3, r3
 8009284:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		tele.f     = GPS.speed;
 8009288:	4b5a      	ldr	r3, [pc, #360]	; (80093f4 <evaluateCommand+0x854>)
 800928a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800928e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		tele.motor[0] = motor[0];
 8009292:	4b5a      	ldr	r3, [pc, #360]	; (80093fc <evaluateCommand+0x85c>)
 8009294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009298:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		tele.motor[1] = motor[1];
 800929c:	4b57      	ldr	r3, [pc, #348]	; (80093fc <evaluateCommand+0x85c>)
 800929e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80092a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		tele.motor[2] = motor[2];
 80092a6:	4b55      	ldr	r3, [pc, #340]	; (80093fc <evaluateCommand+0x85c>)
 80092a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80092ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		tele.motor[3] = motor[3];
 80092b0:	4b52      	ldr	r3, [pc, #328]	; (80093fc <evaluateCommand+0x85c>)
 80092b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80092b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		tele.debug_t[0] = debug[0];
 80092ba:	4b51      	ldr	r3, [pc, #324]	; (8009400 <evaluateCommand+0x860>)
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	b21b      	sxth	r3, r3
 80092c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		tele.debug_t[1] = debug[1];
 80092c4:	4b4e      	ldr	r3, [pc, #312]	; (8009400 <evaluateCommand+0x860>)
 80092c6:	885b      	ldrh	r3, [r3, #2]
 80092c8:	b21b      	sxth	r3, r3
 80092ca:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		tele.debug_t[2] = debug[2];
 80092ce:	4b4c      	ldr	r3, [pc, #304]	; (8009400 <evaluateCommand+0x860>)
 80092d0:	889b      	ldrh	r3, [r3, #4]
 80092d2:	b21b      	sxth	r3, r3
 80092d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		tele.debug_t[3] = debug[3];
 80092d8:	4b49      	ldr	r3, [pc, #292]	; (8009400 <evaluateCommand+0x860>)
 80092da:	88db      	ldrh	r3, [r3, #6]
 80092dc:	b21b      	sxth	r3, r3
 80092de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		s_struct((uint8_t*)&tele, 86);
 80092e2:	1d3b      	adds	r3, r7, #4
 80092e4:	2156      	movs	r1, #86	; 0x56
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff fb09 	bl	80088fe <s_struct>
		break;
 80092ec:	bf00      	nop
 80092ee:	f000 bedb 	b.w	800a0a8 <evaluateCommand+0x1508>
		{ struct {
			int16_t acc[3];
			int16_t gyro[3];
			int16_t mag[3];
		} mpu;
		for(uint8_t axis=0; axis<3;axis++)
 80092f2:	2300      	movs	r3, #0
 80092f4:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80092f8:	e04c      	b.n	8009394 <evaluateCommand+0x7f4>
		{
			mpu.acc[axis]  = (int16_t) map(imu.accADC[axis], -32768, 32768, -1000, 1000);
 80092fa:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80092fe:	4a3c      	ldr	r2, [pc, #240]	; (80093f0 <evaluateCommand+0x850>)
 8009300:	3308      	adds	r3, #8
 8009302:	005b      	lsls	r3, r3, #1
 8009304:	4413      	add	r3, r2
 8009306:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800930a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800930e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009312:	fb02 f303 	mul.w	r3, r2, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	da02      	bge.n	8009320 <evaluateCommand+0x780>
 800931a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800931e:	33ff      	adds	r3, #255	; 0xff
 8009320:	141b      	asrs	r3, r3, #16
 8009322:	b29b      	uxth	r3, r3
 8009324:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8009328:	b29a      	uxth	r2, r3
 800932a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800932e:	b212      	sxth	r2, r2
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8009336:	440b      	add	r3, r1
 8009338:	f823 2c40 	strh.w	r2, [r3, #-64]
			mpu.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 800933c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8009340:	4a2b      	ldr	r2, [pc, #172]	; (80093f0 <evaluateCommand+0x850>)
 8009342:	330e      	adds	r3, #14
 8009344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009348:	f897 409e 	ldrb.w	r4, [r7, #158]	; 0x9e
 800934c:	4618      	mov	r0, r3
 800934e:	f7f7 ff0f 	bl	8001170 <__aeabi_f2iz>
 8009352:	4603      	mov	r3, r0
 8009354:	b21a      	sxth	r2, r3
 8009356:	0063      	lsls	r3, r4, #1
 8009358:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800935c:	440b      	add	r3, r1
 800935e:	f823 2c3a 	strh.w	r2, [r3, #-58]
			mpu.mag[axis]  = (int16_t) imu.magRaw[axis];
 8009362:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8009366:	4a22      	ldr	r2, [pc, #136]	; (80093f0 <evaluateCommand+0x850>)
 8009368:	3314      	adds	r3, #20
 800936a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800936e:	f897 409e 	ldrb.w	r4, [r7, #158]	; 0x9e
 8009372:	4618      	mov	r0, r3
 8009374:	f7f7 fefc 	bl	8001170 <__aeabi_f2iz>
 8009378:	4603      	mov	r3, r0
 800937a:	b21a      	sxth	r2, r3
 800937c:	1d23      	adds	r3, r4, #4
 800937e:	005b      	lsls	r3, r3, #1
 8009380:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8009384:	440b      	add	r3, r1
 8009386:	f823 2c3c 	strh.w	r2, [r3, #-60]
		for(uint8_t axis=0; axis<3;axis++)
 800938a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800938e:	3301      	adds	r3, #1
 8009390:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8009394:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8009398:	2b02      	cmp	r3, #2
 800939a:	d9ae      	bls.n	80092fa <evaluateCommand+0x75a>
		}
		s_struct((uint8_t*)&mpu,18);
 800939c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80093a0:	2112      	movs	r1, #18
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff faab 	bl	80088fe <s_struct>
		break;
 80093a8:	bf00      	nop
 80093aa:	f000 be7d 	b.w	800a0a8 <evaluateCommand+0x1508>
			uint8_t a,b;
			int32_t c,d;
			//	        int16_t e;
			//	        uint16_t f,g;
		} msp_raw_gps;
		msp_raw_gps.a     = GPS.fixquality;
 80093ae:	4b11      	ldr	r3, [pc, #68]	; (80093f4 <evaluateCommand+0x854>)
 80093b0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80093b4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		msp_raw_gps.b     = GPS.satellites;
 80093b8:	4b0e      	ldr	r3, [pc, #56]	; (80093f4 <evaluateCommand+0x854>)
 80093ba:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80093be:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		msp_raw_gps.c     = GPS.GPS_coord[LAT];
 80093c2:	4b0c      	ldr	r3, [pc, #48]	; (80093f4 <evaluateCommand+0x854>)
 80093c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c8:	663b      	str	r3, [r7, #96]	; 0x60
		msp_raw_gps.d     = GPS.GPS_coord[LON];
 80093ca:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <evaluateCommand+0x854>)
 80093cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093d0:	667b      	str	r3, [r7, #100]	; 0x64
		//msp_raw_gps.e     = GPS_altitude;
		//msp_raw_gps.f     = GPS_speed;
		//msp_raw_gps.g     = GPS_ground_course;
		s_struct((uint8_t*)&msp_raw_gps,10);
 80093d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80093d6:	210a      	movs	r1, #10
 80093d8:	4618      	mov	r0, r3
 80093da:	f7ff fa90 	bl	80088fe <s_struct>
		break;
 80093de:	bf00      	nop
 80093e0:	f000 be62 	b.w	800a0a8 <evaluateCommand+0x1508>
		}

		case MSP_MOTOR:
			s_struct((uint8_t*)&motor,8);
 80093e4:	2108      	movs	r1, #8
 80093e6:	4805      	ldr	r0, [pc, #20]	; (80093fc <evaluateCommand+0x85c>)
 80093e8:	f7ff fa89 	bl	80088fe <s_struct>
			break;
 80093ec:	f000 be5c 	b.w	800a0a8 <evaluateCommand+0x1508>
 80093f0:	20000e20 	.word	0x20000e20
 80093f4:	20000b78 	.word	0x20000b78
 80093f8:	20000c5c 	.word	0x20000c5c
 80093fc:	20000cc8 	.word	0x20000cc8
 8009400:	20000670 	.word	0x20000670
			uint16_t inner_YAW[3];
			uint16_t YAW_rate[3];
		} pid_t;


		pid_t.GPS_P[0]  = (int16_t) (posholdPID_PARAM.kP  * 100);
 8009404:	4b9a      	ldr	r3, [pc, #616]	; (8009670 <evaluateCommand+0xad0>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	499a      	ldr	r1, [pc, #616]	; (8009674 <evaluateCommand+0xad4>)
 800940a:	4618      	mov	r0, r3
 800940c:	f7f7 fcd4 	bl	8000db8 <__aeabi_fmul>
 8009410:	4603      	mov	r3, r0
 8009412:	4618      	mov	r0, r3
 8009414:	f7f7 feac 	bl	8001170 <__aeabi_f2iz>
 8009418:	4603      	mov	r3, r0
 800941a:	b21b      	sxth	r3, r3
 800941c:	b29b      	uxth	r3, r3
 800941e:	80bb      	strh	r3, [r7, #4]
		pid_t.GPS_P[1]  = (int16_t) (poshold_ratePID_PARAM.kP  * 100);
 8009420:	4b95      	ldr	r3, [pc, #596]	; (8009678 <evaluateCommand+0xad8>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4993      	ldr	r1, [pc, #588]	; (8009674 <evaluateCommand+0xad4>)
 8009426:	4618      	mov	r0, r3
 8009428:	f7f7 fcc6 	bl	8000db8 <__aeabi_fmul>
 800942c:	4603      	mov	r3, r0
 800942e:	4618      	mov	r0, r3
 8009430:	f7f7 fe9e 	bl	8001170 <__aeabi_f2iz>
 8009434:	4603      	mov	r3, r0
 8009436:	b21b      	sxth	r3, r3
 8009438:	b29b      	uxth	r3, r3
 800943a:	80fb      	strh	r3, [r7, #6]
		pid_t.GPS_P[2]  = (int16_t) (navPID_PARAM.kP  * 100);
 800943c:	4b8f      	ldr	r3, [pc, #572]	; (800967c <evaluateCommand+0xadc>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	498c      	ldr	r1, [pc, #560]	; (8009674 <evaluateCommand+0xad4>)
 8009442:	4618      	mov	r0, r3
 8009444:	f7f7 fcb8 	bl	8000db8 <__aeabi_fmul>
 8009448:	4603      	mov	r3, r0
 800944a:	4618      	mov	r0, r3
 800944c:	f7f7 fe90 	bl	8001170 <__aeabi_f2iz>
 8009450:	4603      	mov	r3, r0
 8009452:	b21b      	sxth	r3, r3
 8009454:	b29b      	uxth	r3, r3
 8009456:	813b      	strh	r3, [r7, #8]
		pid_t.GPS_I[0]  = (int16_t) (posholdPID_PARAM.kI * 100);
 8009458:	4b85      	ldr	r3, [pc, #532]	; (8009670 <evaluateCommand+0xad0>)
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	4985      	ldr	r1, [pc, #532]	; (8009674 <evaluateCommand+0xad4>)
 800945e:	4618      	mov	r0, r3
 8009460:	f7f7 fcaa 	bl	8000db8 <__aeabi_fmul>
 8009464:	4603      	mov	r3, r0
 8009466:	4618      	mov	r0, r3
 8009468:	f7f7 fe82 	bl	8001170 <__aeabi_f2iz>
 800946c:	4603      	mov	r3, r0
 800946e:	b21b      	sxth	r3, r3
 8009470:	b29b      	uxth	r3, r3
 8009472:	837b      	strh	r3, [r7, #26]
		pid_t.GPS_I[1]  = (int16_t) (poshold_ratePID_PARAM.kI * 100);
 8009474:	4b80      	ldr	r3, [pc, #512]	; (8009678 <evaluateCommand+0xad8>)
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	497e      	ldr	r1, [pc, #504]	; (8009674 <evaluateCommand+0xad4>)
 800947a:	4618      	mov	r0, r3
 800947c:	f7f7 fc9c 	bl	8000db8 <__aeabi_fmul>
 8009480:	4603      	mov	r3, r0
 8009482:	4618      	mov	r0, r3
 8009484:	f7f7 fe74 	bl	8001170 <__aeabi_f2iz>
 8009488:	4603      	mov	r3, r0
 800948a:	b21b      	sxth	r3, r3
 800948c:	b29b      	uxth	r3, r3
 800948e:	83bb      	strh	r3, [r7, #28]
		pid_t.GPS_I[2]  = (int16_t) (navPID_PARAM.kI * 100);
 8009490:	4b7a      	ldr	r3, [pc, #488]	; (800967c <evaluateCommand+0xadc>)
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	4977      	ldr	r1, [pc, #476]	; (8009674 <evaluateCommand+0xad4>)
 8009496:	4618      	mov	r0, r3
 8009498:	f7f7 fc8e 	bl	8000db8 <__aeabi_fmul>
 800949c:	4603      	mov	r3, r0
 800949e:	4618      	mov	r0, r3
 80094a0:	f7f7 fe66 	bl	8001170 <__aeabi_f2iz>
 80094a4:	4603      	mov	r3, r0
 80094a6:	b21b      	sxth	r3, r3
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	83fb      	strh	r3, [r7, #30]
		pid_t.GPS_D[0]  = (int16_t) (poshold_ratePID_PARAM.kD  * 1000);
 80094ac:	4b72      	ldr	r3, [pc, #456]	; (8009678 <evaluateCommand+0xad8>)
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	4973      	ldr	r1, [pc, #460]	; (8009680 <evaluateCommand+0xae0>)
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7f7 fc80 	bl	8000db8 <__aeabi_fmul>
 80094b8:	4603      	mov	r3, r0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7f7 fe58 	bl	8001170 <__aeabi_f2iz>
 80094c0:	4603      	mov	r3, r0
 80094c2:	b21b      	sxth	r3, r3
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	863b      	strh	r3, [r7, #48]	; 0x30
		pid_t.GPS_D[1]  = (int16_t) (navPID_PARAM.kD   * 1000);
 80094c8:	4b6c      	ldr	r3, [pc, #432]	; (800967c <evaluateCommand+0xadc>)
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	496c      	ldr	r1, [pc, #432]	; (8009680 <evaluateCommand+0xae0>)
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7f7 fc72 	bl	8000db8 <__aeabi_fmul>
 80094d4:	4603      	mov	r3, r0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7f7 fe4a 	bl	8001170 <__aeabi_f2iz>
 80094dc:	4603      	mov	r3, r0
 80094de:	b21b      	sxth	r3, r3
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	867b      	strh	r3, [r7, #50]	; 0x32
		pid_t.GPS_D[2]  = (int16_t) (posholdPID_PARAM.Imax);
 80094e4:	4b62      	ldr	r3, [pc, #392]	; (8009670 <evaluateCommand+0xad0>)
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7f7 fe41 	bl	8001170 <__aeabi_f2iz>
 80094ee:	4603      	mov	r3, r0
 80094f0:	b21b      	sxth	r3, r3
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	86bb      	strh	r3, [r7, #52]	; 0x34

		pid_t.outer_ROLL[0] = (int16_t) (pid.kp1[ROLL] * 10);
 80094f6:	4b63      	ldr	r3, [pc, #396]	; (8009684 <evaluateCommand+0xae4>)
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	4963      	ldr	r1, [pc, #396]	; (8009688 <evaluateCommand+0xae8>)
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7f7 fc5b 	bl	8000db8 <__aeabi_fmul>
 8009502:	4603      	mov	r3, r0
 8009504:	4618      	mov	r0, r3
 8009506:	f7f7 fe33 	bl	8001170 <__aeabi_f2iz>
 800950a:	4603      	mov	r3, r0
 800950c:	b21b      	sxth	r3, r3
 800950e:	b29b      	uxth	r3, r3
 8009510:	817b      	strh	r3, [r7, #10]
		pid_t.outer_ROLL[1] = (int16_t) (pid.ki1[ROLL] * 10);
 8009512:	4b5c      	ldr	r3, [pc, #368]	; (8009684 <evaluateCommand+0xae4>)
 8009514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009516:	495c      	ldr	r1, [pc, #368]	; (8009688 <evaluateCommand+0xae8>)
 8009518:	4618      	mov	r0, r3
 800951a:	f7f7 fc4d 	bl	8000db8 <__aeabi_fmul>
 800951e:	4603      	mov	r3, r0
 8009520:	4618      	mov	r0, r3
 8009522:	f7f7 fe25 	bl	8001170 <__aeabi_f2iz>
 8009526:	4603      	mov	r3, r0
 8009528:	b21b      	sxth	r3, r3
 800952a:	b29b      	uxth	r3, r3
 800952c:	81bb      	strh	r3, [r7, #12]
		pid_t.outer_PITCH[0] = (int16_t) (pid.kp1[PITCH] * 10);
 800952e:	4b55      	ldr	r3, [pc, #340]	; (8009684 <evaluateCommand+0xae4>)
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	4955      	ldr	r1, [pc, #340]	; (8009688 <evaluateCommand+0xae8>)
 8009534:	4618      	mov	r0, r3
 8009536:	f7f7 fc3f 	bl	8000db8 <__aeabi_fmul>
 800953a:	4603      	mov	r3, r0
 800953c:	4618      	mov	r0, r3
 800953e:	f7f7 fe17 	bl	8001170 <__aeabi_f2iz>
 8009542:	4603      	mov	r3, r0
 8009544:	b21b      	sxth	r3, r3
 8009546:	b29b      	uxth	r3, r3
 8009548:	843b      	strh	r3, [r7, #32]
		pid_t.outer_PITCH[1] = (int16_t) (pid.ki1[PITCH] * 10);
 800954a:	4b4e      	ldr	r3, [pc, #312]	; (8009684 <evaluateCommand+0xae4>)
 800954c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954e:	494e      	ldr	r1, [pc, #312]	; (8009688 <evaluateCommand+0xae8>)
 8009550:	4618      	mov	r0, r3
 8009552:	f7f7 fc31 	bl	8000db8 <__aeabi_fmul>
 8009556:	4603      	mov	r3, r0
 8009558:	4618      	mov	r0, r3
 800955a:	f7f7 fe09 	bl	8001170 <__aeabi_f2iz>
 800955e:	4603      	mov	r3, r0
 8009560:	b21b      	sxth	r3, r3
 8009562:	b29b      	uxth	r3, r3
 8009564:	847b      	strh	r3, [r7, #34]	; 0x22
		pid_t.outer_YAW[0] = (int16_t) (pid.kp1[YAW] * 10);
 8009566:	4b47      	ldr	r3, [pc, #284]	; (8009684 <evaluateCommand+0xae4>)
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	4947      	ldr	r1, [pc, #284]	; (8009688 <evaluateCommand+0xae8>)
 800956c:	4618      	mov	r0, r3
 800956e:	f7f7 fc23 	bl	8000db8 <__aeabi_fmul>
 8009572:	4603      	mov	r3, r0
 8009574:	4618      	mov	r0, r3
 8009576:	f7f7 fdfb 	bl	8001170 <__aeabi_f2iz>
 800957a:	4603      	mov	r3, r0
 800957c:	b21b      	sxth	r3, r3
 800957e:	b29b      	uxth	r3, r3
 8009580:	86fb      	strh	r3, [r7, #54]	; 0x36
		pid_t.outer_YAW[1] = (int16_t) (pid.ki1[YAW] * 10);
 8009582:	4b40      	ldr	r3, [pc, #256]	; (8009684 <evaluateCommand+0xae4>)
 8009584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009586:	4940      	ldr	r1, [pc, #256]	; (8009688 <evaluateCommand+0xae8>)
 8009588:	4618      	mov	r0, r3
 800958a:	f7f7 fc15 	bl	8000db8 <__aeabi_fmul>
 800958e:	4603      	mov	r3, r0
 8009590:	4618      	mov	r0, r3
 8009592:	f7f7 fded 	bl	8001170 <__aeabi_f2iz>
 8009596:	4603      	mov	r3, r0
 8009598:	b21b      	sxth	r3, r3
 800959a:	b29b      	uxth	r3, r3
 800959c:	873b      	strh	r3, [r7, #56]	; 0x38

		pid_t.inner_ROLL[0] = (int16_t) (pid.kp2[ROLL] * 10);
 800959e:	4b39      	ldr	r3, [pc, #228]	; (8009684 <evaluateCommand+0xae4>)
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	4939      	ldr	r1, [pc, #228]	; (8009688 <evaluateCommand+0xae8>)
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7f7 fc07 	bl	8000db8 <__aeabi_fmul>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7f7 fddf 	bl	8001170 <__aeabi_f2iz>
 80095b2:	4603      	mov	r3, r0
 80095b4:	b21b      	sxth	r3, r3
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	81fb      	strh	r3, [r7, #14]
		pid_t.inner_ROLL[1] = (int16_t) (pid.ki2[ROLL] * 10);
 80095ba:	4b32      	ldr	r3, [pc, #200]	; (8009684 <evaluateCommand+0xae4>)
 80095bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095be:	4932      	ldr	r1, [pc, #200]	; (8009688 <evaluateCommand+0xae8>)
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7f7 fbf9 	bl	8000db8 <__aeabi_fmul>
 80095c6:	4603      	mov	r3, r0
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7f7 fdd1 	bl	8001170 <__aeabi_f2iz>
 80095ce:	4603      	mov	r3, r0
 80095d0:	b21b      	sxth	r3, r3
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	823b      	strh	r3, [r7, #16]
		pid_t.inner_ROLL[2] = (int16_t) (pid.kd2[ROLL] * 100);
 80095d6:	4b2b      	ldr	r3, [pc, #172]	; (8009684 <evaluateCommand+0xae4>)
 80095d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095da:	4926      	ldr	r1, [pc, #152]	; (8009674 <evaluateCommand+0xad4>)
 80095dc:	4618      	mov	r0, r3
 80095de:	f7f7 fbeb 	bl	8000db8 <__aeabi_fmul>
 80095e2:	4603      	mov	r3, r0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7f7 fdc3 	bl	8001170 <__aeabi_f2iz>
 80095ea:	4603      	mov	r3, r0
 80095ec:	b21b      	sxth	r3, r3
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	827b      	strh	r3, [r7, #18]
		pid_t.inner_PITCH[0] = (int16_t) (pid.kp2[PITCH] * 10);
 80095f2:	4b24      	ldr	r3, [pc, #144]	; (8009684 <evaluateCommand+0xae4>)
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	4924      	ldr	r1, [pc, #144]	; (8009688 <evaluateCommand+0xae8>)
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7f7 fbdd 	bl	8000db8 <__aeabi_fmul>
 80095fe:	4603      	mov	r3, r0
 8009600:	4618      	mov	r0, r3
 8009602:	f7f7 fdb5 	bl	8001170 <__aeabi_f2iz>
 8009606:	4603      	mov	r3, r0
 8009608:	b21b      	sxth	r3, r3
 800960a:	b29b      	uxth	r3, r3
 800960c:	84bb      	strh	r3, [r7, #36]	; 0x24
		pid_t.inner_PITCH[1] = (int16_t) (pid.ki2[PITCH] * 10);
 800960e:	4b1d      	ldr	r3, [pc, #116]	; (8009684 <evaluateCommand+0xae4>)
 8009610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009612:	491d      	ldr	r1, [pc, #116]	; (8009688 <evaluateCommand+0xae8>)
 8009614:	4618      	mov	r0, r3
 8009616:	f7f7 fbcf 	bl	8000db8 <__aeabi_fmul>
 800961a:	4603      	mov	r3, r0
 800961c:	4618      	mov	r0, r3
 800961e:	f7f7 fda7 	bl	8001170 <__aeabi_f2iz>
 8009622:	4603      	mov	r3, r0
 8009624:	b21b      	sxth	r3, r3
 8009626:	b29b      	uxth	r3, r3
 8009628:	84fb      	strh	r3, [r7, #38]	; 0x26
		pid_t.inner_PITCH[2] = (int16_t) (pid.kd2[PITCH] * 100);
 800962a:	4b16      	ldr	r3, [pc, #88]	; (8009684 <evaluateCommand+0xae4>)
 800962c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800962e:	4911      	ldr	r1, [pc, #68]	; (8009674 <evaluateCommand+0xad4>)
 8009630:	4618      	mov	r0, r3
 8009632:	f7f7 fbc1 	bl	8000db8 <__aeabi_fmul>
 8009636:	4603      	mov	r3, r0
 8009638:	4618      	mov	r0, r3
 800963a:	f7f7 fd99 	bl	8001170 <__aeabi_f2iz>
 800963e:	4603      	mov	r3, r0
 8009640:	b21b      	sxth	r3, r3
 8009642:	b29b      	uxth	r3, r3
 8009644:	853b      	strh	r3, [r7, #40]	; 0x28
		pid_t.inner_YAW[0] = (int16_t) (pid.kp2[YAW] * 10);
 8009646:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <evaluateCommand+0xae4>)
 8009648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964a:	490f      	ldr	r1, [pc, #60]	; (8009688 <evaluateCommand+0xae8>)
 800964c:	4618      	mov	r0, r3
 800964e:	f7f7 fbb3 	bl	8000db8 <__aeabi_fmul>
 8009652:	4603      	mov	r3, r0
 8009654:	4618      	mov	r0, r3
 8009656:	f7f7 fd8b 	bl	8001170 <__aeabi_f2iz>
 800965a:	4603      	mov	r3, r0
 800965c:	b21b      	sxth	r3, r3
 800965e:	b29b      	uxth	r3, r3
 8009660:	877b      	strh	r3, [r7, #58]	; 0x3a
		pid_t.inner_YAW[1] = (int16_t) (pid.ki2[YAW] * 10);
 8009662:	4b08      	ldr	r3, [pc, #32]	; (8009684 <evaluateCommand+0xae4>)
 8009664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009666:	4908      	ldr	r1, [pc, #32]	; (8009688 <evaluateCommand+0xae8>)
 8009668:	4618      	mov	r0, r3
 800966a:	f7f7 fba5 	bl	8000db8 <__aeabi_fmul>
 800966e:	e00d      	b.n	800968c <evaluateCommand+0xaec>
 8009670:	20000c64 	.word	0x20000c64
 8009674:	42c80000 	.word	0x42c80000
 8009678:	20000b68 	.word	0x20000b68
 800967c:	20000b20 	.word	0x20000b20
 8009680:	447a0000 	.word	0x447a0000
 8009684:	200009b0 	.word	0x200009b0
 8009688:	41200000 	.word	0x41200000
 800968c:	4603      	mov	r3, r0
 800968e:	4618      	mov	r0, r3
 8009690:	f7f7 fd6e 	bl	8001170 <__aeabi_f2iz>
 8009694:	4603      	mov	r3, r0
 8009696:	b21b      	sxth	r3, r3
 8009698:	b29b      	uxth	r3, r3
 800969a:	87bb      	strh	r3, [r7, #60]	; 0x3c
		pid_t.inner_YAW[2] = (int16_t) (pid.kd2[YAW] * 100);
 800969c:	4b8a      	ldr	r3, [pc, #552]	; (80098c8 <evaluateCommand+0xd28>)
 800969e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096a0:	498a      	ldr	r1, [pc, #552]	; (80098cc <evaluateCommand+0xd2c>)
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f7 fb88 	bl	8000db8 <__aeabi_fmul>
 80096a8:	4603      	mov	r3, r0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7f7 fd60 	bl	8001170 <__aeabi_f2iz>
 80096b0:	4603      	mov	r3, r0
 80096b2:	b21b      	sxth	r3, r3
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	87fb      	strh	r3, [r7, #62]	; 0x3e

		pid_t.ROLL_rate[0]  = (int16_t) (pid.kp_rate[ROLL]  * 10);
 80096b8:	4b83      	ldr	r3, [pc, #524]	; (80098c8 <evaluateCommand+0xd28>)
 80096ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096bc:	4984      	ldr	r1, [pc, #528]	; (80098d0 <evaluateCommand+0xd30>)
 80096be:	4618      	mov	r0, r3
 80096c0:	f7f7 fb7a 	bl	8000db8 <__aeabi_fmul>
 80096c4:	4603      	mov	r3, r0
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7f7 fd52 	bl	8001170 <__aeabi_f2iz>
 80096cc:	4603      	mov	r3, r0
 80096ce:	b21b      	sxth	r3, r3
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	82bb      	strh	r3, [r7, #20]
		pid_t.ROLL_rate[1]  = (int16_t) (pid.ki_rate[ROLL]  * 10);
 80096d4:	4b7c      	ldr	r3, [pc, #496]	; (80098c8 <evaluateCommand+0xd28>)
 80096d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d8:	497d      	ldr	r1, [pc, #500]	; (80098d0 <evaluateCommand+0xd30>)
 80096da:	4618      	mov	r0, r3
 80096dc:	f7f7 fb6c 	bl	8000db8 <__aeabi_fmul>
 80096e0:	4603      	mov	r3, r0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7f7 fd44 	bl	8001170 <__aeabi_f2iz>
 80096e8:	4603      	mov	r3, r0
 80096ea:	b21b      	sxth	r3, r3
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	82fb      	strh	r3, [r7, #22]
		pid_t.ROLL_rate[2]  = (int16_t) (pid.kd_rate[ROLL]  * 100);
 80096f0:	4b75      	ldr	r3, [pc, #468]	; (80098c8 <evaluateCommand+0xd28>)
 80096f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096f4:	4975      	ldr	r1, [pc, #468]	; (80098cc <evaluateCommand+0xd2c>)
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7f7 fb5e 	bl	8000db8 <__aeabi_fmul>
 80096fc:	4603      	mov	r3, r0
 80096fe:	4618      	mov	r0, r3
 8009700:	f7f7 fd36 	bl	8001170 <__aeabi_f2iz>
 8009704:	4603      	mov	r3, r0
 8009706:	b21b      	sxth	r3, r3
 8009708:	b29b      	uxth	r3, r3
 800970a:	833b      	strh	r3, [r7, #24]
		pid_t.PITCH_rate[0] = (int16_t) (pid.kp_rate[PITCH] * 10);
 800970c:	4b6e      	ldr	r3, [pc, #440]	; (80098c8 <evaluateCommand+0xd28>)
 800970e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009710:	496f      	ldr	r1, [pc, #444]	; (80098d0 <evaluateCommand+0xd30>)
 8009712:	4618      	mov	r0, r3
 8009714:	f7f7 fb50 	bl	8000db8 <__aeabi_fmul>
 8009718:	4603      	mov	r3, r0
 800971a:	4618      	mov	r0, r3
 800971c:	f7f7 fd28 	bl	8001170 <__aeabi_f2iz>
 8009720:	4603      	mov	r3, r0
 8009722:	b21b      	sxth	r3, r3
 8009724:	b29b      	uxth	r3, r3
 8009726:	857b      	strh	r3, [r7, #42]	; 0x2a
		pid_t.PITCH_rate[1] = (int16_t) (pid.ki_rate[PITCH] * 10);
 8009728:	4b67      	ldr	r3, [pc, #412]	; (80098c8 <evaluateCommand+0xd28>)
 800972a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800972c:	4968      	ldr	r1, [pc, #416]	; (80098d0 <evaluateCommand+0xd30>)
 800972e:	4618      	mov	r0, r3
 8009730:	f7f7 fb42 	bl	8000db8 <__aeabi_fmul>
 8009734:	4603      	mov	r3, r0
 8009736:	4618      	mov	r0, r3
 8009738:	f7f7 fd1a 	bl	8001170 <__aeabi_f2iz>
 800973c:	4603      	mov	r3, r0
 800973e:	b21b      	sxth	r3, r3
 8009740:	b29b      	uxth	r3, r3
 8009742:	85bb      	strh	r3, [r7, #44]	; 0x2c
		pid_t.PITCH_rate[2] = (int16_t) (pid.kd_rate[PITCH] * 100);
 8009744:	4b60      	ldr	r3, [pc, #384]	; (80098c8 <evaluateCommand+0xd28>)
 8009746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800974a:	4960      	ldr	r1, [pc, #384]	; (80098cc <evaluateCommand+0xd2c>)
 800974c:	4618      	mov	r0, r3
 800974e:	f7f7 fb33 	bl	8000db8 <__aeabi_fmul>
 8009752:	4603      	mov	r3, r0
 8009754:	4618      	mov	r0, r3
 8009756:	f7f7 fd0b 	bl	8001170 <__aeabi_f2iz>
 800975a:	4603      	mov	r3, r0
 800975c:	b21b      	sxth	r3, r3
 800975e:	b29b      	uxth	r3, r3
 8009760:	85fb      	strh	r3, [r7, #46]	; 0x2e
		pid_t.YAW_rate[0]   = (int16_t) (pid.kp_rate[YAW]   * 10);
 8009762:	4b59      	ldr	r3, [pc, #356]	; (80098c8 <evaluateCommand+0xd28>)
 8009764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009766:	495a      	ldr	r1, [pc, #360]	; (80098d0 <evaluateCommand+0xd30>)
 8009768:	4618      	mov	r0, r3
 800976a:	f7f7 fb25 	bl	8000db8 <__aeabi_fmul>
 800976e:	4603      	mov	r3, r0
 8009770:	4618      	mov	r0, r3
 8009772:	f7f7 fcfd 	bl	8001170 <__aeabi_f2iz>
 8009776:	4603      	mov	r3, r0
 8009778:	b21b      	sxth	r3, r3
 800977a:	b29b      	uxth	r3, r3
 800977c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		pid_t.YAW_rate[1]   = (int16_t) (pid.ki_rate[YAW]   * 10);
 8009780:	4b51      	ldr	r3, [pc, #324]	; (80098c8 <evaluateCommand+0xd28>)
 8009782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009784:	4952      	ldr	r1, [pc, #328]	; (80098d0 <evaluateCommand+0xd30>)
 8009786:	4618      	mov	r0, r3
 8009788:	f7f7 fb16 	bl	8000db8 <__aeabi_fmul>
 800978c:	4603      	mov	r3, r0
 800978e:	4618      	mov	r0, r3
 8009790:	f7f7 fcee 	bl	8001170 <__aeabi_f2iz>
 8009794:	4603      	mov	r3, r0
 8009796:	b21b      	sxth	r3, r3
 8009798:	b29b      	uxth	r3, r3
 800979a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pid_t.YAW_rate[2]   = (int16_t) (pid.kd_rate[YAW]   * 100);
 800979e:	4b4a      	ldr	r3, [pc, #296]	; (80098c8 <evaluateCommand+0xd28>)
 80097a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097a4:	4949      	ldr	r1, [pc, #292]	; (80098cc <evaluateCommand+0xd2c>)
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7f7 fb06 	bl	8000db8 <__aeabi_fmul>
 80097ac:	4603      	mov	r3, r0
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7f7 fcde 	bl	8001170 <__aeabi_f2iz>
 80097b4:	4603      	mov	r3, r0
 80097b6:	b21b      	sxth	r3, r3
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

		s_struct((uint8_t*)&pid_t,66);
 80097be:	1d3b      	adds	r3, r7, #4
 80097c0:	2142      	movs	r1, #66	; 0x42
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7ff f89b 	bl	80088fe <s_struct>

		break;
 80097c8:	bf00      	nop
 80097ca:	f000 bc6d 	b.w	800a0a8 <evaluateCommand+0x1508>
		{ struct {
			uint16_t VBAT;
			uint16_t Temp;
		} analog;

		analog.VBAT = 100;//BAT.VBAT;
 80097ce:	2364      	movs	r3, #100	; 0x64
 80097d0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		analog.Temp = (imu.Temp*10);
 80097d4:	4b3f      	ldr	r3, [pc, #252]	; (80098d4 <evaluateCommand+0xd34>)
 80097d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d8:	493d      	ldr	r1, [pc, #244]	; (80098d0 <evaluateCommand+0xd30>)
 80097da:	4618      	mov	r0, r3
 80097dc:	f7f7 faec 	bl	8000db8 <__aeabi_fmul>
 80097e0:	4603      	mov	r3, r0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7f7 fcea 	bl	80011bc <__aeabi_f2uiz>
 80097e8:	4603      	mov	r3, r0
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

		s_struct((uint8_t*)&analog,4);
 80097f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80097f4:	2104      	movs	r1, #4
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff f881 	bl	80088fe <s_struct>
		break;
 80097fc:	bf00      	nop
 80097fe:	f000 bc53 	b.w	800a0a8 <evaluateCommand+0x1508>
		}

		case MSP_SET_PID:
			posholdPID_PARAM.kP   = 0.15f;
 8009802:	4b35      	ldr	r3, [pc, #212]	; (80098d8 <evaluateCommand+0xd38>)
 8009804:	4a35      	ldr	r2, [pc, #212]	; (80098dc <evaluateCommand+0xd3c>)
 8009806:	601a      	str	r2, [r3, #0]
			posholdPID_PARAM.kI   = 0;
 8009808:	4b33      	ldr	r3, [pc, #204]	; (80098d8 <evaluateCommand+0xd38>)
 800980a:	f04f 0200 	mov.w	r2, #0
 800980e:	605a      	str	r2, [r3, #4]
			posholdPID_PARAM.Imax = 2000;
 8009810:	4b31      	ldr	r3, [pc, #196]	; (80098d8 <evaluateCommand+0xd38>)
 8009812:	4a33      	ldr	r2, [pc, #204]	; (80098e0 <evaluateCommand+0xd40>)
 8009814:	60da      	str	r2, [r3, #12]

			poshold_ratePID_PARAM.kP   = 3.4f;
 8009816:	4b33      	ldr	r3, [pc, #204]	; (80098e4 <evaluateCommand+0xd44>)
 8009818:	4a33      	ldr	r2, [pc, #204]	; (80098e8 <evaluateCommand+0xd48>)
 800981a:	601a      	str	r2, [r3, #0]
			poshold_ratePID_PARAM.kI   = 0.14f;
 800981c:	4b31      	ldr	r3, [pc, #196]	; (80098e4 <evaluateCommand+0xd44>)
 800981e:	4a33      	ldr	r2, [pc, #204]	; (80098ec <evaluateCommand+0xd4c>)
 8009820:	605a      	str	r2, [r3, #4]
			poshold_ratePID_PARAM.kD   = 0.053f;
 8009822:	4b30      	ldr	r3, [pc, #192]	; (80098e4 <evaluateCommand+0xd44>)
 8009824:	4a32      	ldr	r2, [pc, #200]	; (80098f0 <evaluateCommand+0xd50>)
 8009826:	609a      	str	r2, [r3, #8]
			poshold_ratePID_PARAM.Imax = 2000;
 8009828:	4b2e      	ldr	r3, [pc, #184]	; (80098e4 <evaluateCommand+0xd44>)
 800982a:	4a2d      	ldr	r2, [pc, #180]	; (80098e0 <evaluateCommand+0xd40>)
 800982c:	60da      	str	r2, [r3, #12]

			navPID_PARAM.kP   = 2.5f;
 800982e:	4b31      	ldr	r3, [pc, #196]	; (80098f4 <evaluateCommand+0xd54>)
 8009830:	4a31      	ldr	r2, [pc, #196]	; (80098f8 <evaluateCommand+0xd58>)
 8009832:	601a      	str	r2, [r3, #0]
			navPID_PARAM.kI   = 0.33f;
 8009834:	4b2f      	ldr	r3, [pc, #188]	; (80098f4 <evaluateCommand+0xd54>)
 8009836:	4a31      	ldr	r2, [pc, #196]	; (80098fc <evaluateCommand+0xd5c>)
 8009838:	605a      	str	r2, [r3, #4]
			navPID_PARAM.kD   = 0.053f;
 800983a:	4b2e      	ldr	r3, [pc, #184]	; (80098f4 <evaluateCommand+0xd54>)
 800983c:	4a2c      	ldr	r2, [pc, #176]	; (80098f0 <evaluateCommand+0xd50>)
 800983e:	609a      	str	r2, [r3, #8]
			navPID_PARAM.Imax = 2000;
 8009840:	4b2c      	ldr	r3, [pc, #176]	; (80098f4 <evaluateCommand+0xd54>)
 8009842:	4a27      	ldr	r2, [pc, #156]	; (80098e0 <evaluateCommand+0xd40>)
 8009844:	60da      	str	r2, [r3, #12]

			for(i=0; i < 3; i++)
 8009846:	2300      	movs	r3, #0
 8009848:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800984c:	e1eb      	b.n	8009c26 <evaluateCommand+0x1086>
			{
				if(i==0)
 800984e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009852:	2b00      	cmp	r3, #0
 8009854:	d154      	bne.n	8009900 <evaluateCommand+0xd60>
				{
					posholdPID_PARAM.kP   = (float) read16();
 8009856:	f7fe ffd7 	bl	8008808 <read16>
 800985a:	4603      	mov	r3, r0
 800985c:	4618      	mov	r0, r3
 800985e:	f7f7 fa53 	bl	8000d08 <__aeabi_ui2f>
 8009862:	4602      	mov	r2, r0
 8009864:	4b1c      	ldr	r3, [pc, #112]	; (80098d8 <evaluateCommand+0xd38>)
 8009866:	601a      	str	r2, [r3, #0]
					posholdPID_PARAM.kP /= 100;
 8009868:	4b1b      	ldr	r3, [pc, #108]	; (80098d8 <evaluateCommand+0xd38>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4917      	ldr	r1, [pc, #92]	; (80098cc <evaluateCommand+0xd2c>)
 800986e:	4618      	mov	r0, r3
 8009870:	f7f7 fb56 	bl	8000f20 <__aeabi_fdiv>
 8009874:	4603      	mov	r3, r0
 8009876:	461a      	mov	r2, r3
 8009878:	4b17      	ldr	r3, [pc, #92]	; (80098d8 <evaluateCommand+0xd38>)
 800987a:	601a      	str	r2, [r3, #0]

					posholdPID_PARAM.kI = (float) read16();
 800987c:	f7fe ffc4 	bl	8008808 <read16>
 8009880:	4603      	mov	r3, r0
 8009882:	4618      	mov	r0, r3
 8009884:	f7f7 fa40 	bl	8000d08 <__aeabi_ui2f>
 8009888:	4602      	mov	r2, r0
 800988a:	4b13      	ldr	r3, [pc, #76]	; (80098d8 <evaluateCommand+0xd38>)
 800988c:	605a      	str	r2, [r3, #4]
					posholdPID_PARAM.kI /= 100;
 800988e:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <evaluateCommand+0xd38>)
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	490e      	ldr	r1, [pc, #56]	; (80098cc <evaluateCommand+0xd2c>)
 8009894:	4618      	mov	r0, r3
 8009896:	f7f7 fb43 	bl	8000f20 <__aeabi_fdiv>
 800989a:	4603      	mov	r3, r0
 800989c:	461a      	mov	r2, r3
 800989e:	4b0e      	ldr	r3, [pc, #56]	; (80098d8 <evaluateCommand+0xd38>)
 80098a0:	605a      	str	r2, [r3, #4]

					posholdPID_PARAM.Imax = (float) read16();
 80098a2:	f7fe ffb1 	bl	8008808 <read16>
 80098a6:	4603      	mov	r3, r0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7f7 fa2d 	bl	8000d08 <__aeabi_ui2f>
 80098ae:	4602      	mov	r2, r0
 80098b0:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <evaluateCommand+0xd38>)
 80098b2:	60da      	str	r2, [r3, #12]
					poshold_ratePID_PARAM.Imax = posholdPID_PARAM.Imax;
 80098b4:	4b08      	ldr	r3, [pc, #32]	; (80098d8 <evaluateCommand+0xd38>)
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	4a0a      	ldr	r2, [pc, #40]	; (80098e4 <evaluateCommand+0xd44>)
 80098ba:	60d3      	str	r3, [r2, #12]
					navPID_PARAM.Imax = posholdPID_PARAM.Imax;
 80098bc:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <evaluateCommand+0xd38>)
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	4a0c      	ldr	r2, [pc, #48]	; (80098f4 <evaluateCommand+0xd54>)
 80098c2:	60d3      	str	r3, [r2, #12]
 80098c4:	e09d      	b.n	8009a02 <evaluateCommand+0xe62>
 80098c6:	bf00      	nop
 80098c8:	200009b0 	.word	0x200009b0
 80098cc:	42c80000 	.word	0x42c80000
 80098d0:	41200000 	.word	0x41200000
 80098d4:	20000e20 	.word	0x20000e20
 80098d8:	20000c64 	.word	0x20000c64
 80098dc:	3e19999a 	.word	0x3e19999a
 80098e0:	44fa0000 	.word	0x44fa0000
 80098e4:	20000b68 	.word	0x20000b68
 80098e8:	4059999a 	.word	0x4059999a
 80098ec:	3e0f5c29 	.word	0x3e0f5c29
 80098f0:	3d591687 	.word	0x3d591687
 80098f4:	20000b20 	.word	0x20000b20
 80098f8:	40200000 	.word	0x40200000
 80098fc:	3ea8f5c3 	.word	0x3ea8f5c3
				}else if(i == 1)
 8009900:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009904:	2b01      	cmp	r3, #1
 8009906:	d13f      	bne.n	8009988 <evaluateCommand+0xde8>
				{
					poshold_ratePID_PARAM.kP = (float) read16();
 8009908:	f7fe ff7e 	bl	8008808 <read16>
 800990c:	4603      	mov	r3, r0
 800990e:	4618      	mov	r0, r3
 8009910:	f7f7 f9fa 	bl	8000d08 <__aeabi_ui2f>
 8009914:	4602      	mov	r2, r0
 8009916:	4b19      	ldr	r3, [pc, #100]	; (800997c <evaluateCommand+0xddc>)
 8009918:	601a      	str	r2, [r3, #0]
					poshold_ratePID_PARAM.kP /= 100;
 800991a:	4b18      	ldr	r3, [pc, #96]	; (800997c <evaluateCommand+0xddc>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4918      	ldr	r1, [pc, #96]	; (8009980 <evaluateCommand+0xde0>)
 8009920:	4618      	mov	r0, r3
 8009922:	f7f7 fafd 	bl	8000f20 <__aeabi_fdiv>
 8009926:	4603      	mov	r3, r0
 8009928:	461a      	mov	r2, r3
 800992a:	4b14      	ldr	r3, [pc, #80]	; (800997c <evaluateCommand+0xddc>)
 800992c:	601a      	str	r2, [r3, #0]

					poshold_ratePID_PARAM.kI = (float) read16();
 800992e:	f7fe ff6b 	bl	8008808 <read16>
 8009932:	4603      	mov	r3, r0
 8009934:	4618      	mov	r0, r3
 8009936:	f7f7 f9e7 	bl	8000d08 <__aeabi_ui2f>
 800993a:	4602      	mov	r2, r0
 800993c:	4b0f      	ldr	r3, [pc, #60]	; (800997c <evaluateCommand+0xddc>)
 800993e:	605a      	str	r2, [r3, #4]
					poshold_ratePID_PARAM.kI /= 100;
 8009940:	4b0e      	ldr	r3, [pc, #56]	; (800997c <evaluateCommand+0xddc>)
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	490e      	ldr	r1, [pc, #56]	; (8009980 <evaluateCommand+0xde0>)
 8009946:	4618      	mov	r0, r3
 8009948:	f7f7 faea 	bl	8000f20 <__aeabi_fdiv>
 800994c:	4603      	mov	r3, r0
 800994e:	461a      	mov	r2, r3
 8009950:	4b0a      	ldr	r3, [pc, #40]	; (800997c <evaluateCommand+0xddc>)
 8009952:	605a      	str	r2, [r3, #4]

					poshold_ratePID_PARAM.kD = (float) read16();
 8009954:	f7fe ff58 	bl	8008808 <read16>
 8009958:	4603      	mov	r3, r0
 800995a:	4618      	mov	r0, r3
 800995c:	f7f7 f9d4 	bl	8000d08 <__aeabi_ui2f>
 8009960:	4602      	mov	r2, r0
 8009962:	4b06      	ldr	r3, [pc, #24]	; (800997c <evaluateCommand+0xddc>)
 8009964:	609a      	str	r2, [r3, #8]
					poshold_ratePID_PARAM.kD /= 1000;
 8009966:	4b05      	ldr	r3, [pc, #20]	; (800997c <evaluateCommand+0xddc>)
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	4906      	ldr	r1, [pc, #24]	; (8009984 <evaluateCommand+0xde4>)
 800996c:	4618      	mov	r0, r3
 800996e:	f7f7 fad7 	bl	8000f20 <__aeabi_fdiv>
 8009972:	4603      	mov	r3, r0
 8009974:	461a      	mov	r2, r3
 8009976:	4b01      	ldr	r3, [pc, #4]	; (800997c <evaluateCommand+0xddc>)
 8009978:	609a      	str	r2, [r3, #8]
 800997a:	e042      	b.n	8009a02 <evaluateCommand+0xe62>
 800997c:	20000b68 	.word	0x20000b68
 8009980:	42c80000 	.word	0x42c80000
 8009984:	447a0000 	.word	0x447a0000


				}else if(i == 2)
 8009988:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800998c:	2b02      	cmp	r3, #2
 800998e:	d138      	bne.n	8009a02 <evaluateCommand+0xe62>
				{
					navPID_PARAM.kP = (float) read16();
 8009990:	f7fe ff3a 	bl	8008808 <read16>
 8009994:	4603      	mov	r3, r0
 8009996:	4618      	mov	r0, r3
 8009998:	f7f7 f9b6 	bl	8000d08 <__aeabi_ui2f>
 800999c:	4602      	mov	r2, r0
 800999e:	4bb5      	ldr	r3, [pc, #724]	; (8009c74 <evaluateCommand+0x10d4>)
 80099a0:	601a      	str	r2, [r3, #0]
					navPID_PARAM.kP /= 100;
 80099a2:	4bb4      	ldr	r3, [pc, #720]	; (8009c74 <evaluateCommand+0x10d4>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	49b4      	ldr	r1, [pc, #720]	; (8009c78 <evaluateCommand+0x10d8>)
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7f7 fab9 	bl	8000f20 <__aeabi_fdiv>
 80099ae:	4603      	mov	r3, r0
 80099b0:	461a      	mov	r2, r3
 80099b2:	4bb0      	ldr	r3, [pc, #704]	; (8009c74 <evaluateCommand+0x10d4>)
 80099b4:	601a      	str	r2, [r3, #0]

					navPID_PARAM.kI = (float) read16();
 80099b6:	f7fe ff27 	bl	8008808 <read16>
 80099ba:	4603      	mov	r3, r0
 80099bc:	4618      	mov	r0, r3
 80099be:	f7f7 f9a3 	bl	8000d08 <__aeabi_ui2f>
 80099c2:	4602      	mov	r2, r0
 80099c4:	4bab      	ldr	r3, [pc, #684]	; (8009c74 <evaluateCommand+0x10d4>)
 80099c6:	605a      	str	r2, [r3, #4]
					navPID_PARAM.kI /= 100;
 80099c8:	4baa      	ldr	r3, [pc, #680]	; (8009c74 <evaluateCommand+0x10d4>)
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	49aa      	ldr	r1, [pc, #680]	; (8009c78 <evaluateCommand+0x10d8>)
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7f7 faa6 	bl	8000f20 <__aeabi_fdiv>
 80099d4:	4603      	mov	r3, r0
 80099d6:	461a      	mov	r2, r3
 80099d8:	4ba6      	ldr	r3, [pc, #664]	; (8009c74 <evaluateCommand+0x10d4>)
 80099da:	605a      	str	r2, [r3, #4]

					navPID_PARAM.kD = (float) read16();
 80099dc:	f7fe ff14 	bl	8008808 <read16>
 80099e0:	4603      	mov	r3, r0
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7f7 f990 	bl	8000d08 <__aeabi_ui2f>
 80099e8:	4602      	mov	r2, r0
 80099ea:	4ba2      	ldr	r3, [pc, #648]	; (8009c74 <evaluateCommand+0x10d4>)
 80099ec:	609a      	str	r2, [r3, #8]
					navPID_PARAM.kD /= 1000;
 80099ee:	4ba1      	ldr	r3, [pc, #644]	; (8009c74 <evaluateCommand+0x10d4>)
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	49a2      	ldr	r1, [pc, #648]	; (8009c7c <evaluateCommand+0x10dc>)
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7f7 fa93 	bl	8000f20 <__aeabi_fdiv>
 80099fa:	4603      	mov	r3, r0
 80099fc:	461a      	mov	r2, r3
 80099fe:	4b9d      	ldr	r3, [pc, #628]	; (8009c74 <evaluateCommand+0x10d4>)
 8009a00:	609a      	str	r2, [r3, #8]
				}

				pid.kp1[i] = (float) read16();
 8009a02:	f7fe ff01 	bl	8008808 <read16>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7f7 f97b 	bl	8000d08 <__aeabi_ui2f>
 8009a12:	4601      	mov	r1, r0
 8009a14:	4a9a      	ldr	r2, [pc, #616]	; (8009c80 <evaluateCommand+0x10e0>)
 8009a16:	1d23      	adds	r3, r4, #4
 8009a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kp1[i] /= 10;
 8009a1c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009a20:	4a97      	ldr	r2, [pc, #604]	; (8009c80 <evaluateCommand+0x10e0>)
 8009a22:	3304      	adds	r3, #4
 8009a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a28:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a2c:	4995      	ldr	r1, [pc, #596]	; (8009c84 <evaluateCommand+0x10e4>)
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7f7 fa76 	bl	8000f20 <__aeabi_fdiv>
 8009a34:	4603      	mov	r3, r0
 8009a36:	4619      	mov	r1, r3
 8009a38:	4a91      	ldr	r2, [pc, #580]	; (8009c80 <evaluateCommand+0x10e0>)
 8009a3a:	1d23      	adds	r3, r4, #4
 8009a3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki1[i] = (float) read16();
 8009a40:	f7fe fee2 	bl	8008808 <read16>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7f7 f95c 	bl	8000d08 <__aeabi_ui2f>
 8009a50:	4601      	mov	r1, r0
 8009a52:	4a8b      	ldr	r2, [pc, #556]	; (8009c80 <evaluateCommand+0x10e0>)
 8009a54:	f104 0310 	add.w	r3, r4, #16
 8009a58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki1[i] /= 10;
 8009a5c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009a60:	4a87      	ldr	r2, [pc, #540]	; (8009c80 <evaluateCommand+0x10e0>)
 8009a62:	3310      	adds	r3, #16
 8009a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a68:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a6c:	4985      	ldr	r1, [pc, #532]	; (8009c84 <evaluateCommand+0x10e4>)
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7f7 fa56 	bl	8000f20 <__aeabi_fdiv>
 8009a74:	4603      	mov	r3, r0
 8009a76:	4619      	mov	r1, r3
 8009a78:	4a81      	ldr	r2, [pc, #516]	; (8009c80 <evaluateCommand+0x10e0>)
 8009a7a:	f104 0310 	add.w	r3, r4, #16
 8009a7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kp2[i] = (float) read16();
 8009a82:	f7fe fec1 	bl	8008808 <read16>
 8009a86:	4603      	mov	r3, r0
 8009a88:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7f7 f93b 	bl	8000d08 <__aeabi_ui2f>
 8009a92:	4601      	mov	r1, r0
 8009a94:	4a7a      	ldr	r2, [pc, #488]	; (8009c80 <evaluateCommand+0x10e0>)
 8009a96:	1da3      	adds	r3, r4, #6
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	6059      	str	r1, [r3, #4]
				pid.kp2[i] /= 10;
 8009a9e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009aa2:	4a77      	ldr	r2, [pc, #476]	; (8009c80 <evaluateCommand+0x10e0>)
 8009aa4:	3306      	adds	r3, #6
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009ab0:	4974      	ldr	r1, [pc, #464]	; (8009c84 <evaluateCommand+0x10e4>)
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7f7 fa34 	bl	8000f20 <__aeabi_fdiv>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	4619      	mov	r1, r3
 8009abc:	4a70      	ldr	r2, [pc, #448]	; (8009c80 <evaluateCommand+0x10e0>)
 8009abe:	1da3      	adds	r3, r4, #6
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	6059      	str	r1, [r3, #4]
				pid.ki2[i] = (float) read16();
 8009ac6:	f7fe fe9f 	bl	8008808 <read16>
 8009aca:	4603      	mov	r3, r0
 8009acc:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7f7 f919 	bl	8000d08 <__aeabi_ui2f>
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	4a69      	ldr	r2, [pc, #420]	; (8009c80 <evaluateCommand+0x10e0>)
 8009ada:	f104 0312 	add.w	r3, r4, #18
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	6059      	str	r1, [r3, #4]
				pid.ki2[i] /= 10;
 8009ae4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009ae8:	4a65      	ldr	r2, [pc, #404]	; (8009c80 <evaluateCommand+0x10e0>)
 8009aea:	3312      	adds	r3, #18
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009af6:	4963      	ldr	r1, [pc, #396]	; (8009c84 <evaluateCommand+0x10e4>)
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7f7 fa11 	bl	8000f20 <__aeabi_fdiv>
 8009afe:	4603      	mov	r3, r0
 8009b00:	4619      	mov	r1, r3
 8009b02:	4a5f      	ldr	r2, [pc, #380]	; (8009c80 <evaluateCommand+0x10e0>)
 8009b04:	f104 0312 	add.w	r3, r4, #18
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	6059      	str	r1, [r3, #4]
				pid.kd2[i] = (float) read16();
 8009b0e:	f7fe fe7b 	bl	8008808 <read16>
 8009b12:	4603      	mov	r3, r0
 8009b14:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7f7 f8f5 	bl	8000d08 <__aeabi_ui2f>
 8009b1e:	4601      	mov	r1, r0
 8009b20:	4a57      	ldr	r2, [pc, #348]	; (8009c80 <evaluateCommand+0x10e0>)
 8009b22:	f104 031c 	add.w	r3, r4, #28
 8009b26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kd2[i] /= 100;
 8009b2a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009b2e:	4a54      	ldr	r2, [pc, #336]	; (8009c80 <evaluateCommand+0x10e0>)
 8009b30:	331c      	adds	r3, #28
 8009b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b36:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b3a:	494f      	ldr	r1, [pc, #316]	; (8009c78 <evaluateCommand+0x10d8>)
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7f7 f9ef 	bl	8000f20 <__aeabi_fdiv>
 8009b42:	4603      	mov	r3, r0
 8009b44:	4619      	mov	r1, r3
 8009b46:	4a4e      	ldr	r2, [pc, #312]	; (8009c80 <evaluateCommand+0x10e0>)
 8009b48:	f104 031c 	add.w	r3, r4, #28
 8009b4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				pid.kp_rate[i] = (float) read16();
 8009b50:	f7fe fe5a 	bl	8008808 <read16>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7f7 f8d4 	bl	8000d08 <__aeabi_ui2f>
 8009b60:	4601      	mov	r1, r0
 8009b62:	4a47      	ldr	r2, [pc, #284]	; (8009c80 <evaluateCommand+0x10e0>)
 8009b64:	f104 030a 	add.w	r3, r4, #10
 8009b68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kp_rate[i] /= 10;
 8009b6c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009b70:	4a43      	ldr	r2, [pc, #268]	; (8009c80 <evaluateCommand+0x10e0>)
 8009b72:	330a      	adds	r3, #10
 8009b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b78:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b7c:	4941      	ldr	r1, [pc, #260]	; (8009c84 <evaluateCommand+0x10e4>)
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7f7 f9ce 	bl	8000f20 <__aeabi_fdiv>
 8009b84:	4603      	mov	r3, r0
 8009b86:	4619      	mov	r1, r3
 8009b88:	4a3d      	ldr	r2, [pc, #244]	; (8009c80 <evaluateCommand+0x10e0>)
 8009b8a:	f104 030a 	add.w	r3, r4, #10
 8009b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki_rate[i] = (float) read16();
 8009b92:	f7fe fe39 	bl	8008808 <read16>
 8009b96:	4603      	mov	r3, r0
 8009b98:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7f7 f8b3 	bl	8000d08 <__aeabi_ui2f>
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	4a36      	ldr	r2, [pc, #216]	; (8009c80 <evaluateCommand+0x10e0>)
 8009ba6:	f104 0316 	add.w	r3, r4, #22
 8009baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki_rate[i] /= 10;
 8009bae:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009bb2:	4a33      	ldr	r2, [pc, #204]	; (8009c80 <evaluateCommand+0x10e0>)
 8009bb4:	3316      	adds	r3, #22
 8009bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bba:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009bbe:	4931      	ldr	r1, [pc, #196]	; (8009c84 <evaluateCommand+0x10e4>)
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7f7 f9ad 	bl	8000f20 <__aeabi_fdiv>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4a2d      	ldr	r2, [pc, #180]	; (8009c80 <evaluateCommand+0x10e0>)
 8009bcc:	f104 0316 	add.w	r3, r4, #22
 8009bd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kd_rate[i] = (float) read16();
 8009bd4:	f7fe fe18 	bl	8008808 <read16>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7f7 f892 	bl	8000d08 <__aeabi_ui2f>
 8009be4:	4601      	mov	r1, r0
 8009be6:	4a26      	ldr	r2, [pc, #152]	; (8009c80 <evaluateCommand+0x10e0>)
 8009be8:	f104 031e 	add.w	r3, r4, #30
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	6059      	str	r1, [r3, #4]
				pid.kd_rate[i] /= 100;
 8009bf2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009bf6:	4a22      	ldr	r2, [pc, #136]	; (8009c80 <evaluateCommand+0x10e0>)
 8009bf8:	331e      	adds	r3, #30
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009c04:	491c      	ldr	r1, [pc, #112]	; (8009c78 <evaluateCommand+0x10d8>)
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7f7 f98a 	bl	8000f20 <__aeabi_fdiv>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4a1b      	ldr	r2, [pc, #108]	; (8009c80 <evaluateCommand+0x10e0>)
 8009c12:	f104 031e 	add.w	r3, r4, #30
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	6059      	str	r1, [r3, #4]
			for(i=0; i < 3; i++)
 8009c1c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009c20:	3301      	adds	r3, #1
 8009c22:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8009c26:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	f67f ae0f 	bls.w	800984e <evaluateCommand+0xcae>
			}
			break;
 8009c30:	e23a      	b.n	800a0a8 <evaluateCommand+0x1508>

		case MSP_SET_MOTOR:
			M_motor[0] = read16();
 8009c32:	f7fe fde9 	bl	8008808 <read16>
 8009c36:	4603      	mov	r3, r0
 8009c38:	b21a      	sxth	r2, r3
 8009c3a:	4b13      	ldr	r3, [pc, #76]	; (8009c88 <evaluateCommand+0x10e8>)
 8009c3c:	801a      	strh	r2, [r3, #0]
			M_motor[1] = read16();
 8009c3e:	f7fe fde3 	bl	8008808 <read16>
 8009c42:	4603      	mov	r3, r0
 8009c44:	b21a      	sxth	r2, r3
 8009c46:	4b10      	ldr	r3, [pc, #64]	; (8009c88 <evaluateCommand+0x10e8>)
 8009c48:	805a      	strh	r2, [r3, #2]
			M_motor[2] = read16();
 8009c4a:	f7fe fddd 	bl	8008808 <read16>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	b21a      	sxth	r2, r3
 8009c52:	4b0d      	ldr	r3, [pc, #52]	; (8009c88 <evaluateCommand+0x10e8>)
 8009c54:	809a      	strh	r2, [r3, #4]
			M_motor[3] = read16();
 8009c56:	f7fe fdd7 	bl	8008808 <read16>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	b21a      	sxth	r2, r3
 8009c5e:	4b0a      	ldr	r3, [pc, #40]	; (8009c88 <evaluateCommand+0x10e8>)
 8009c60:	80da      	strh	r2, [r3, #6]
			Manual_Motor_flag = true;
 8009c62:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <evaluateCommand+0x10ec>)
 8009c64:	2201      	movs	r2, #1
 8009c66:	701a      	strb	r2, [r3, #0]
			time_manual_motor = micros();
 8009c68:	f7f7 fc30 	bl	80014cc <micros>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	4b08      	ldr	r3, [pc, #32]	; (8009c90 <evaluateCommand+0x10f0>)
 8009c70:	601a      	str	r2, [r3, #0]
			break;
 8009c72:	e219      	b.n	800a0a8 <evaluateCommand+0x1508>
 8009c74:	20000b20 	.word	0x20000b20
 8009c78:	42c80000 	.word	0x42c80000
 8009c7c:	447a0000 	.word	0x447a0000
 8009c80:	200009b0 	.word	0x200009b0
 8009c84:	41200000 	.word	0x41200000
 8009c88:	20000cb8 	.word	0x20000cb8
 8009c8c:	200002e8 	.word	0x200002e8
 8009c90:	20000cc4 	.word	0x20000cc4

		case MSP_RESET:
			Error.error = 0;
 8009c94:	4ba2      	ldr	r3, [pc, #648]	; (8009f20 <evaluateCommand+0x1380>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	701a      	strb	r2, [r3, #0]
			ledOff(RGB_RED);
 8009c9a:	2002      	movs	r0, #2
 8009c9c:	f001 fc82 	bl	800b5a4 <ledOff>
			cycleTimeMax = 0;
 8009ca0:	4ba0      	ldr	r3, [pc, #640]	; (8009f24 <evaluateCommand+0x1384>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	801a      	strh	r2, [r3, #0]
			cycleTimeMin = 65535;
 8009ca6:	4ba0      	ldr	r3, [pc, #640]	; (8009f28 <evaluateCommand+0x1388>)
 8009ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cac:	801a      	strh	r2, [r3, #0]
			f.mag_reset = 1;
 8009cae:	4b9f      	ldr	r3, [pc, #636]	; (8009f2c <evaluateCommand+0x138c>)
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	769a      	strb	r2, [r3, #26]
			ledToggle(RGB_GREEN);
 8009cb4:	2003      	movs	r0, #3
 8009cb6:	f001 fc95 	bl	800b5e4 <ledToggle>
			break;
 8009cba:	e1f5      	b.n	800a0a8 <evaluateCommand+0x1508>
			int16_t angle[2];//17
			int16_t mag_heading;//19
			int16_t motor[4];//74
		} debug_t;

		debug_t.roll     = RC.rcCommand[ROLL];
 8009cbc:	4b9c      	ldr	r3, [pc, #624]	; (8009f30 <evaluateCommand+0x1390>)
 8009cbe:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	80bb      	strh	r3, [r7, #4]
		debug_t.pitch    = RC.rcCommand[PITCH];
 8009cc6:	4b9a      	ldr	r3, [pc, #616]	; (8009f30 <evaluateCommand+0x1390>)
 8009cc8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	80fb      	strh	r3, [r7, #6]
		debug_t.yaw      = RC.rcCommand[YAW];
 8009cd0:	4b97      	ldr	r3, [pc, #604]	; (8009f30 <evaluateCommand+0x1390>)
 8009cd2:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	813b      	strh	r3, [r7, #8]
		debug_t.throttle = RC.rcCommand[THROTTLE];
 8009cda:	4b95      	ldr	r3, [pc, #596]	; (8009f30 <evaluateCommand+0x1390>)
 8009cdc:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	817b      	strh	r3, [r7, #10]
		debug_t.aux1     = RC.rcCommand[AUX1];
 8009ce4:	4b92      	ldr	r3, [pc, #584]	; (8009f30 <evaluateCommand+0x1390>)
 8009ce6:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	81fb      	strh	r3, [r7, #14]
		debug_t.gear     = RC.rcCommand[GEAR];
 8009cee:	4b90      	ldr	r3, [pc, #576]	; (8009f30 <evaluateCommand+0x1390>)
 8009cf0:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	81bb      	strh	r3, [r7, #12]
		//debug_t.ArmedTime    = armedTime;
		debug_t.cycleTime    = loopTime;
 8009cf8:	4b8e      	ldr	r3, [pc, #568]	; (8009f34 <evaluateCommand+0x1394>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	613b      	str	r3, [r7, #16]
		debug_t.error        = Error.error;
 8009cfe:	4b88      	ldr	r3, [pc, #544]	; (8009f20 <evaluateCommand+0x1380>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	82bb      	strh	r3, [r7, #20]
		if(f.ARMED) tmp |= 1<<BOXARM;
 8009d06:	4b89      	ldr	r3, [pc, #548]	; (8009f2c <evaluateCommand+0x138c>)
 8009d08:	785b      	ldrb	r3, [r3, #1]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d005      	beq.n	8009d1a <evaluateCommand+0x117a>
 8009d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d12:	f043 0301 	orr.w	r3, r3, #1
 8009d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8009d1a:	4b84      	ldr	r3, [pc, #528]	; (8009f2c <evaluateCommand+0x138c>)
 8009d1c:	7b9b      	ldrb	r3, [r3, #14]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d005      	beq.n	8009d2e <evaluateCommand+0x118e>
 8009d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d26:	f043 0302 	orr.w	r3, r3, #2
 8009d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ACRO_MODE) tmp |= 1<<BOXACRO_MODE;
 8009d2e:	4b7f      	ldr	r3, [pc, #508]	; (8009f2c <evaluateCommand+0x138c>)
 8009d30:	79db      	ldrb	r3, [r3, #7]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d005      	beq.n	8009d42 <evaluateCommand+0x11a2>
 8009d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d3a:	f043 0304 	orr.w	r3, r3, #4
 8009d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ANGLE_MODE) tmp |= 1<<BOXANGLE_MODE;
 8009d42:	4b7a      	ldr	r3, [pc, #488]	; (8009f2c <evaluateCommand+0x138c>)
 8009d44:	795b      	ldrb	r3, [r3, #5]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d005      	beq.n	8009d56 <evaluateCommand+0x11b6>
 8009d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d4e:	f043 0308 	orr.w	r3, r3, #8
 8009d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.GPS_HOLD_MODE) tmp |= 1<<BOXGPS_MODE;
 8009d56:	4b75      	ldr	r3, [pc, #468]	; (8009f2c <evaluateCommand+0x138c>)
 8009d58:	7b5b      	ldrb	r3, [r3, #13]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d005      	beq.n	8009d6a <evaluateCommand+0x11ca>
 8009d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_ACC) tmp |= 1<<BOXCALIBRATE_ACC;
 8009d6a:	4b70      	ldr	r3, [pc, #448]	; (8009f2c <evaluateCommand+0x138c>)
 8009d6c:	791b      	ldrb	r3, [r3, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d005      	beq.n	8009d7e <evaluateCommand+0x11de>
 8009d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d76:	f043 0310 	orr.w	r3, r3, #16
 8009d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_MAG) tmp |= 1<<BOXCALIBRATE_MAG;
 8009d7e:	4b6b      	ldr	r3, [pc, #428]	; (8009f2c <evaluateCommand+0x138c>)
 8009d80:	7cdb      	ldrb	r3, [r3, #19]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d005      	beq.n	8009d92 <evaluateCommand+0x11f2>
 8009d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d8a:	f043 0320 	orr.w	r3, r3, #32
 8009d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		debug_t.flag         = tmp;
 8009d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	82fb      	strh	r3, [r7, #22]
		debug_t.alt = (int16_t) alt.EstAlt;
 8009d9a:	4b67      	ldr	r3, [pc, #412]	; (8009f38 <evaluateCommand+0x1398>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	b21b      	sxth	r3, r3
 8009da0:	833b      	strh	r3, [r7, #24]
		debug_t.VBAT = 100;//BAT.VBAT;
 8009da2:	2364      	movs	r3, #100	; 0x64
 8009da4:	837b      	strh	r3, [r7, #26]
		debug_t.Temp = imu.Temp*10;
 8009da6:	4b65      	ldr	r3, [pc, #404]	; (8009f3c <evaluateCommand+0x139c>)
 8009da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009daa:	4965      	ldr	r1, [pc, #404]	; (8009f40 <evaluateCommand+0x13a0>)
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7f7 f803 	bl	8000db8 <__aeabi_fmul>
 8009db2:	4603      	mov	r3, r0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7f7 f9db 	bl	8001170 <__aeabi_f2iz>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	b21b      	sxth	r3, r3
 8009dbe:	83bb      	strh	r3, [r7, #28]

		debug_t.angle[ROLL] = imu.AHRS[ROLL]*10;
 8009dc0:	4b5e      	ldr	r3, [pc, #376]	; (8009f3c <evaluateCommand+0x139c>)
 8009dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc6:	495e      	ldr	r1, [pc, #376]	; (8009f40 <evaluateCommand+0x13a0>)
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7f6 fff5 	bl	8000db8 <__aeabi_fmul>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7f7 f9cd 	bl	8001170 <__aeabi_f2iz>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	b21b      	sxth	r3, r3
 8009dda:	83fb      	strh	r3, [r7, #30]
		debug_t.angle[PITCH] = imu.AHRS[PITCH]*10;
 8009ddc:	4b57      	ldr	r3, [pc, #348]	; (8009f3c <evaluateCommand+0x139c>)
 8009dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009de2:	4957      	ldr	r1, [pc, #348]	; (8009f40 <evaluateCommand+0x13a0>)
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7f6 ffe7 	bl	8000db8 <__aeabi_fmul>
 8009dea:	4603      	mov	r3, r0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7f7 f9bf 	bl	8001170 <__aeabi_f2iz>
 8009df2:	4603      	mov	r3, r0
 8009df4:	b21b      	sxth	r3, r3
 8009df6:	843b      	strh	r3, [r7, #32]
		debug_t.mag_heading = (int16_t)imu.actual_compass_heading*10;
 8009df8:	4b50      	ldr	r3, [pc, #320]	; (8009f3c <evaluateCommand+0x139c>)
 8009dfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	461a      	mov	r2, r3
 8009e02:	0092      	lsls	r2, r2, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	005b      	lsls	r3, r3, #1
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	b21b      	sxth	r3, r3
 8009e0c:	847b      	strh	r3, [r7, #34]	; 0x22

		debug_t.motor[0] = motor[0];
 8009e0e:	4b4d      	ldr	r3, [pc, #308]	; (8009f44 <evaluateCommand+0x13a4>)
 8009e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e14:	84bb      	strh	r3, [r7, #36]	; 0x24
		debug_t.motor[1] = motor[1];
 8009e16:	4b4b      	ldr	r3, [pc, #300]	; (8009f44 <evaluateCommand+0x13a4>)
 8009e18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009e1c:	84fb      	strh	r3, [r7, #38]	; 0x26
		debug_t.motor[2] = motor[2];
 8009e1e:	4b49      	ldr	r3, [pc, #292]	; (8009f44 <evaluateCommand+0x13a4>)
 8009e20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009e24:	853b      	strh	r3, [r7, #40]	; 0x28
		debug_t.motor[3] = motor[3];
 8009e26:	4b47      	ldr	r3, [pc, #284]	; (8009f44 <evaluateCommand+0x13a4>)
 8009e28:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009e2c:	857b      	strh	r3, [r7, #42]	; 0x2a

		s_struct((uint8_t*)&debug_t, 41);
 8009e2e:	1d3b      	adds	r3, r7, #4
 8009e30:	2129      	movs	r1, #41	; 0x29
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fe fd63 	bl	80088fe <s_struct>
		}
		break;
 8009e38:	e136      	b.n	800a0a8 <evaluateCommand+0x1508>

		case MSP_ACC_CALIBRATION:
			if(!f.ARMED)
 8009e3a:	4b3c      	ldr	r3, [pc, #240]	; (8009f2c <evaluateCommand+0x138c>)
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f040 812f 	bne.w	800a0a2 <evaluateCommand+0x1502>
			{
				calibratingA=512;
 8009e44:	4b40      	ldr	r3, [pc, #256]	; (8009f48 <evaluateCommand+0x13a8>)
 8009e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e4a:	801a      	strh	r2, [r3, #0]
				f.CALIBRATE_ACC = 1;
 8009e4c:	4b37      	ldr	r3, [pc, #220]	; (8009f2c <evaluateCommand+0x138c>)
 8009e4e:	2201      	movs	r2, #1
 8009e50:	711a      	strb	r2, [r3, #4]
			}
			break;
 8009e52:	e126      	b.n	800a0a2 <evaluateCommand+0x1502>

		case MSP_MAG_CALIBRATION:
			if(!f.ARMED)
 8009e54:	4b35      	ldr	r3, [pc, #212]	; (8009f2c <evaluateCommand+0x138c>)
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f040 8124 	bne.w	800a0a6 <evaluateCommand+0x1506>
			{
				f.CALIBRATE_MAG=!f.CALIBRATE_MAG;
 8009e5e:	4b33      	ldr	r3, [pc, #204]	; (8009f2c <evaluateCommand+0x138c>)
 8009e60:	7cdb      	ldrb	r3, [r3, #19]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	bf0c      	ite	eq
 8009e66:	2301      	moveq	r3, #1
 8009e68:	2300      	movne	r3, #0
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4b2f      	ldr	r3, [pc, #188]	; (8009f2c <evaluateCommand+0x138c>)
 8009e70:	74da      	strb	r2, [r3, #19]
			}
			break;
 8009e72:	e118      	b.n	800a0a6 <evaluateCommand+0x1506>

		case MSP_TRIM_UP:
			MSP_TRIM[PITCH] += 1;
 8009e74:	4b35      	ldr	r3, [pc, #212]	; (8009f4c <evaluateCommand+0x13ac>)
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	4a34      	ldr	r2, [pc, #208]	; (8009f4c <evaluateCommand+0x13ac>)
 8009e7c:	6053      	str	r3, [r2, #4]
			break;
 8009e7e:	e113      	b.n	800a0a8 <evaluateCommand+0x1508>

		case MSP_TRIM_DOWN:
			MSP_TRIM[PITCH] -= 1;
 8009e80:	4b32      	ldr	r3, [pc, #200]	; (8009f4c <evaluateCommand+0x13ac>)
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	4a31      	ldr	r2, [pc, #196]	; (8009f4c <evaluateCommand+0x13ac>)
 8009e88:	6053      	str	r3, [r2, #4]
			break;
 8009e8a:	e10d      	b.n	800a0a8 <evaluateCommand+0x1508>

		case MSP_TRIM_LEFT:
			MSP_TRIM[ROLL] -= 1;
 8009e8c:	4b2f      	ldr	r3, [pc, #188]	; (8009f4c <evaluateCommand+0x13ac>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3b01      	subs	r3, #1
 8009e92:	4a2e      	ldr	r2, [pc, #184]	; (8009f4c <evaluateCommand+0x13ac>)
 8009e94:	6013      	str	r3, [r2, #0]
			break;
 8009e96:	e107      	b.n	800a0a8 <evaluateCommand+0x1508>

		case MSP_TRIM_RIGHT:
			MSP_TRIM[ROLL] += 1;
 8009e98:	4b2c      	ldr	r3, [pc, #176]	; (8009f4c <evaluateCommand+0x13ac>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	4a2b      	ldr	r2, [pc, #172]	; (8009f4c <evaluateCommand+0x13ac>)
 8009ea0:	6013      	str	r3, [r2, #0]
			break;
 8009ea2:	e101      	b.n	800a0a8 <evaluateCommand+0x1508>

		case TELEMERY_PID_SAVE:
			ledToggle(RGB_BLUE);
 8009ea4:	2004      	movs	r0, #4
 8009ea6:	f001 fb9d 	bl	800b5e4 <ledToggle>
			writeFloat(0, posholdPID_PARAM.kP);
 8009eaa:	4b29      	ldr	r3, [pc, #164]	; (8009f50 <evaluateCommand+0x13b0>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	f7f7 fdf3 	bl	8001a9c <writeFloat>
			writeFloat(4, posholdPID_PARAM.kI);
 8009eb6:	4b26      	ldr	r3, [pc, #152]	; (8009f50 <evaluateCommand+0x13b0>)
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	2004      	movs	r0, #4
 8009ebe:	f7f7 fded 	bl	8001a9c <writeFloat>
			writeFloat(8, poshold_ratePID_PARAM.kP);
 8009ec2:	4b24      	ldr	r3, [pc, #144]	; (8009f54 <evaluateCommand+0x13b4>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	2008      	movs	r0, #8
 8009eca:	f7f7 fde7 	bl	8001a9c <writeFloat>
			writeFloat(12, poshold_ratePID_PARAM.kI);
 8009ece:	4b21      	ldr	r3, [pc, #132]	; (8009f54 <evaluateCommand+0x13b4>)
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	200c      	movs	r0, #12
 8009ed6:	f7f7 fde1 	bl	8001a9c <writeFloat>
			writeFloat(16, poshold_ratePID_PARAM.kD);
 8009eda:	4b1e      	ldr	r3, [pc, #120]	; (8009f54 <evaluateCommand+0x13b4>)
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	2010      	movs	r0, #16
 8009ee2:	f7f7 fddb 	bl	8001a9c <writeFloat>
			writeFloat(20, navPID_PARAM.kP);
 8009ee6:	4b1c      	ldr	r3, [pc, #112]	; (8009f58 <evaluateCommand+0x13b8>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4619      	mov	r1, r3
 8009eec:	2014      	movs	r0, #20
 8009eee:	f7f7 fdd5 	bl	8001a9c <writeFloat>
			writeFloat(24, navPID_PARAM.kI);
 8009ef2:	4b19      	ldr	r3, [pc, #100]	; (8009f58 <evaluateCommand+0x13b8>)
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	2018      	movs	r0, #24
 8009efa:	f7f7 fdcf 	bl	8001a9c <writeFloat>
			writeFloat(28, navPID_PARAM.kD);
 8009efe:	4b16      	ldr	r3, [pc, #88]	; (8009f58 <evaluateCommand+0x13b8>)
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	4619      	mov	r1, r3
 8009f04:	201c      	movs	r0, #28
 8009f06:	f7f7 fdc9 	bl	8001a9c <writeFloat>
			writeFloat(32, posholdPID_PARAM.Imax);
 8009f0a:	4b11      	ldr	r3, [pc, #68]	; (8009f50 <evaluateCommand+0x13b0>)
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	4619      	mov	r1, r3
 8009f10:	2020      	movs	r0, #32
 8009f12:	f7f7 fdc3 	bl	8001a9c <writeFloat>
			for(int i = 0; i < 3; i++){
 8009f16:	2300      	movs	r3, #0
 8009f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f1c:	e096      	b.n	800a04c <evaluateCommand+0x14ac>
 8009f1e:	bf00      	nop
 8009f20:	20000acc 	.word	0x20000acc
 8009f24:	20000264 	.word	0x20000264
 8009f28:	20000000 	.word	0x20000000
 8009f2c:	20000ed4 	.word	0x20000ed4
 8009f30:	20000d40 	.word	0x20000d40
 8009f34:	20000260 	.word	0x20000260
 8009f38:	20000ef0 	.word	0x20000ef0
 8009f3c:	20000e20 	.word	0x20000e20
 8009f40:	41200000 	.word	0x41200000
 8009f44:	20000cc8 	.word	0x20000cc8
 8009f48:	20000008 	.word	0x20000008
 8009f4c:	20000664 	.word	0x20000664
 8009f50:	20000c64 	.word	0x20000c64
 8009f54:	20000b68 	.word	0x20000b68
 8009f58:	20000b20 	.word	0x20000b20
				writeFloat( 36+(4*i), pid.kp1[i]);
 8009f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f60:	3309      	adds	r3, #9
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4618      	mov	r0, r3
 8009f66:	4a52      	ldr	r2, [pc, #328]	; (800a0b0 <evaluateCommand+0x1510>)
 8009f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f72:	4619      	mov	r1, r3
 8009f74:	f7f7 fd92 	bl	8001a9c <writeFloat>
				writeFloat( 48+(4*i), pid.ki1[i]);
 8009f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f7c:	330c      	adds	r3, #12
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4618      	mov	r0, r3
 8009f82:	4a4b      	ldr	r2, [pc, #300]	; (800a0b0 <evaluateCommand+0x1510>)
 8009f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f88:	3310      	adds	r3, #16
 8009f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	f7f7 fd84 	bl	8001a9c <writeFloat>
				writeFloat( 60+(4*i), pid.kp2[i]);
 8009f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f98:	330f      	adds	r3, #15
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	4a44      	ldr	r2, [pc, #272]	; (800a0b0 <evaluateCommand+0x1510>)
 8009fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fa4:	3306      	adds	r3, #6
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	4619      	mov	r1, r3
 8009fae:	f7f7 fd75 	bl	8001a9c <writeFloat>
				writeFloat( 72+(4*i), pid.ki2[i]);
 8009fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fb6:	3312      	adds	r3, #18
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4618      	mov	r0, r3
 8009fbc:	4a3c      	ldr	r2, [pc, #240]	; (800a0b0 <evaluateCommand+0x1510>)
 8009fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fc2:	3312      	adds	r3, #18
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	f7f7 fd66 	bl	8001a9c <writeFloat>
				writeFloat( 84+(4*i), pid.kd2[i]);
 8009fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fd4:	3315      	adds	r3, #21
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4618      	mov	r0, r3
 8009fda:	4a35      	ldr	r2, [pc, #212]	; (800a0b0 <evaluateCommand+0x1510>)
 8009fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fe0:	331c      	adds	r3, #28
 8009fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	f7f7 fd58 	bl	8001a9c <writeFloat>

				writeFloat( 96+(4*i), pid.kp_rate[i]);
 8009fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ff0:	3318      	adds	r3, #24
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	4a2e      	ldr	r2, [pc, #184]	; (800a0b0 <evaluateCommand+0x1510>)
 8009ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ffc:	330a      	adds	r3, #10
 8009ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a002:	4619      	mov	r1, r3
 800a004:	f7f7 fd4a 	bl	8001a9c <writeFloat>
				writeFloat(108+(4*i), pid.ki_rate[i]);
 800a008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a00c:	331b      	adds	r3, #27
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4618      	mov	r0, r3
 800a012:	4a27      	ldr	r2, [pc, #156]	; (800a0b0 <evaluateCommand+0x1510>)
 800a014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a018:	3316      	adds	r3, #22
 800a01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a01e:	4619      	mov	r1, r3
 800a020:	f7f7 fd3c 	bl	8001a9c <writeFloat>
				writeFloat(120+(4*i), pid.kd_rate[i]);
 800a024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a028:	331e      	adds	r3, #30
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4618      	mov	r0, r3
 800a02e:	4a20      	ldr	r2, [pc, #128]	; (800a0b0 <evaluateCommand+0x1510>)
 800a030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a034:	331e      	adds	r3, #30
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	4619      	mov	r1, r3
 800a03e:	f7f7 fd2d 	bl	8001a9c <writeFloat>
			for(int i = 0; i < 3; i++){
 800a042:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a046:	3301      	adds	r3, #1
 800a048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a04c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a050:	2b02      	cmp	r3, #2
 800a052:	dd83      	ble.n	8009f5c <evaluateCommand+0x13bc>
			}
			writeFloat(132, magBias[0]);
 800a054:	4b17      	ldr	r3, [pc, #92]	; (800a0b4 <evaluateCommand+0x1514>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4619      	mov	r1, r3
 800a05a:	2084      	movs	r0, #132	; 0x84
 800a05c:	f7f7 fd1e 	bl	8001a9c <writeFloat>
			writeFloat(136, magBias[1]);
 800a060:	4b14      	ldr	r3, [pc, #80]	; (800a0b4 <evaluateCommand+0x1514>)
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	4619      	mov	r1, r3
 800a066:	2088      	movs	r0, #136	; 0x88
 800a068:	f7f7 fd18 	bl	8001a9c <writeFloat>
			writeFloat(140, magBias[2]);
 800a06c:	4b11      	ldr	r3, [pc, #68]	; (800a0b4 <evaluateCommand+0x1514>)
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	4619      	mov	r1, r3
 800a072:	208c      	movs	r0, #140	; 0x8c
 800a074:	f7f7 fd12 	bl	8001a9c <writeFloat>
			writeFloat(144, magScale[0]);
 800a078:	4b0f      	ldr	r3, [pc, #60]	; (800a0b8 <evaluateCommand+0x1518>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4619      	mov	r1, r3
 800a07e:	2090      	movs	r0, #144	; 0x90
 800a080:	f7f7 fd0c 	bl	8001a9c <writeFloat>
			writeFloat(148, magScale[1]);
 800a084:	4b0c      	ldr	r3, [pc, #48]	; (800a0b8 <evaluateCommand+0x1518>)
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	4619      	mov	r1, r3
 800a08a:	2094      	movs	r0, #148	; 0x94
 800a08c:	f7f7 fd06 	bl	8001a9c <writeFloat>
			writeFloat(152, magScale[2]);
 800a090:	4b09      	ldr	r3, [pc, #36]	; (800a0b8 <evaluateCommand+0x1518>)
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	4619      	mov	r1, r3
 800a096:	2098      	movs	r0, #152	; 0x98
 800a098:	f7f7 fd00 	bl	8001a9c <writeFloat>
			break;
 800a09c:	e004      	b.n	800a0a8 <evaluateCommand+0x1508>

		default:
			//headSerialError();
			//tailSerialReply();
			break;
 800a09e:	bf00      	nop
 800a0a0:	e002      	b.n	800a0a8 <evaluateCommand+0x1508>
			break;
 800a0a2:	bf00      	nop
 800a0a4:	e000      	b.n	800a0a8 <evaluateCommand+0x1508>
			break;
 800a0a6:	bf00      	nop
	}

}
 800a0a8:	bf00      	nop
 800a0aa:	37ac      	adds	r7, #172	; 0xac
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd90      	pop	{r4, r7, pc}
 800a0b0:	200009b0 	.word	0x200009b0
 800a0b4:	20000344 	.word	0x20000344
 800a0b8:	20000f00 	.word	0x20000f00

0800a0bc <SerialSerialize>:

void SerialSerialize(uint8_t port,uint8_t a) {
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	460a      	mov	r2, r1
 800a0c6:	71fb      	strb	r3, [r7, #7]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	71bb      	strb	r3, [r7, #6]
	uint8_t t = serialHeadTX[port];
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	4a0e      	ldr	r2, [pc, #56]	; (800a108 <SerialSerialize+0x4c>)
 800a0d0:	5cd3      	ldrb	r3, [r2, r3]
 800a0d2:	73fb      	strb	r3, [r7, #15]
	if (++t >= TX_BUFFER_SIZE) t = 0;
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	73fb      	strb	r3, [r7, #15]
 800a0da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	da01      	bge.n	800a0e6 <SerialSerialize+0x2a>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73fb      	strb	r3, [r7, #15]
	serialBufferTX[t][port] = a;
 800a0e6:	7bfa      	ldrb	r2, [r7, #15]
 800a0e8:	79fb      	ldrb	r3, [r7, #7]
 800a0ea:	4908      	ldr	r1, [pc, #32]	; (800a10c <SerialSerialize+0x50>)
 800a0ec:	0052      	lsls	r2, r2, #1
 800a0ee:	440a      	add	r2, r1
 800a0f0:	4413      	add	r3, r2
 800a0f2:	79ba      	ldrb	r2, [r7, #6]
 800a0f4:	701a      	strb	r2, [r3, #0]
	serialHeadTX[port] = t;
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	4903      	ldr	r1, [pc, #12]	; (800a108 <SerialSerialize+0x4c>)
 800a0fa:	7bfa      	ldrb	r2, [r7, #15]
 800a0fc:	54ca      	strb	r2, [r1, r3]
}
 800a0fe:	bf00      	nop
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	bc80      	pop	{r7}
 800a106:	4770      	bx	lr
 800a108:	20000458 	.word	0x20000458
 800a10c:	20000460 	.word	0x20000460

0800a110 <UartSendData>:

void UartSendData(uint8_t port)
{
 800a110:	b590      	push	{r4, r7, lr}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	71fb      	strb	r3, [r7, #7]
	uint8_t t = serialTailTX[port];
 800a11a:	79fb      	ldrb	r3, [r7, #7]
 800a11c:	4a37      	ldr	r2, [pc, #220]	; (800a1fc <UartSendData+0xec>)
 800a11e:	5cd3      	ldrb	r3, [r2, r3]
 800a120:	73fb      	strb	r3, [r7, #15]
	switch(port){
 800a122:	79fb      	ldrb	r3, [r7, #7]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d01c      	beq.n	800a162 <UartSendData+0x52>
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d04b      	beq.n	800a1c4 <UartSendData+0xb4>
			serialTailTX[port] = t;
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
			serialHead_1 = 0;
			break;
	}
}
 800a12c:	e061      	b.n	800a1f2 <UartSendData+0xe2>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
 800a130:	3301      	adds	r3, #1
 800a132:	73fb      	strb	r3, [r7, #15]
 800a134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	da01      	bge.n	800a140 <UartSendData+0x30>
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
				serialBufTx_0[serialHead_0++] = serialBufferTX[t][port];
 800a140:	7bf9      	ldrb	r1, [r7, #15]
 800a142:	79fa      	ldrb	r2, [r7, #7]
 800a144:	4b2e      	ldr	r3, [pc, #184]	; (800a200 <UartSendData+0xf0>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	1c58      	adds	r0, r3, #1
 800a14c:	b2c4      	uxtb	r4, r0
 800a14e:	482c      	ldr	r0, [pc, #176]	; (800a200 <UartSendData+0xf0>)
 800a150:	7004      	strb	r4, [r0, #0]
 800a152:	461c      	mov	r4, r3
 800a154:	482b      	ldr	r0, [pc, #172]	; (800a204 <UartSendData+0xf4>)
 800a156:	004b      	lsls	r3, r1, #1
 800a158:	4403      	add	r3, r0
 800a15a:	4413      	add	r3, r2
 800a15c:	781a      	ldrb	r2, [r3, #0]
 800a15e:	4b2a      	ldr	r3, [pc, #168]	; (800a208 <UartSendData+0xf8>)
 800a160:	551a      	strb	r2, [r3, r4]
			while (serialHeadTX[port] != t)
 800a162:	79fb      	ldrb	r3, [r7, #7]
 800a164:	4a29      	ldr	r2, [pc, #164]	; (800a20c <UartSendData+0xfc>)
 800a166:	5cd3      	ldrb	r3, [r2, r3]
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	7bfa      	ldrb	r2, [r7, #15]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d1de      	bne.n	800a12e <UartSendData+0x1e>
			serialTailTX[port] = t;
 800a170:	79fb      	ldrb	r3, [r7, #7]
 800a172:	4922      	ldr	r1, [pc, #136]	; (800a1fc <UartSendData+0xec>)
 800a174:	7bfa      	ldrb	r2, [r7, #15]
 800a176:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART1, serialBufTx_0, serialHead_0);
 800a178:	4b21      	ldr	r3, [pc, #132]	; (800a200 <UartSendData+0xf0>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	461a      	mov	r2, r3
 800a180:	4921      	ldr	r1, [pc, #132]	; (800a208 <UartSendData+0xf8>)
 800a182:	2000      	movs	r0, #0
 800a184:	f001 fef2 	bl	800bf6c <uartWriteIT>
			serialHead_0 = 0;
 800a188:	4b1d      	ldr	r3, [pc, #116]	; (800a200 <UartSendData+0xf0>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	701a      	strb	r2, [r3, #0]
			break;
 800a18e:	e030      	b.n	800a1f2 <UartSendData+0xe2>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	3301      	adds	r3, #1
 800a194:	73fb      	strb	r3, [r7, #15]
 800a196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	da01      	bge.n	800a1a2 <UartSendData+0x92>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	73fb      	strb	r3, [r7, #15]
				serialBufTx_1[serialHead_1++] = serialBufferTX[t][port];
 800a1a2:	7bf9      	ldrb	r1, [r7, #15]
 800a1a4:	79fa      	ldrb	r2, [r7, #7]
 800a1a6:	4b1a      	ldr	r3, [pc, #104]	; (800a210 <UartSendData+0x100>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	1c58      	adds	r0, r3, #1
 800a1ae:	b2c4      	uxtb	r4, r0
 800a1b0:	4817      	ldr	r0, [pc, #92]	; (800a210 <UartSendData+0x100>)
 800a1b2:	7004      	strb	r4, [r0, #0]
 800a1b4:	461c      	mov	r4, r3
 800a1b6:	4813      	ldr	r0, [pc, #76]	; (800a204 <UartSendData+0xf4>)
 800a1b8:	004b      	lsls	r3, r1, #1
 800a1ba:	4403      	add	r3, r0
 800a1bc:	4413      	add	r3, r2
 800a1be:	781a      	ldrb	r2, [r3, #0]
 800a1c0:	4b14      	ldr	r3, [pc, #80]	; (800a214 <UartSendData+0x104>)
 800a1c2:	551a      	strb	r2, [r3, r4]
			while (serialHeadTX[port] != t)
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	4a11      	ldr	r2, [pc, #68]	; (800a20c <UartSendData+0xfc>)
 800a1c8:	5cd3      	ldrb	r3, [r2, r3]
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	7bfa      	ldrb	r2, [r7, #15]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d1de      	bne.n	800a190 <UartSendData+0x80>
			serialTailTX[port] = t;
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	4909      	ldr	r1, [pc, #36]	; (800a1fc <UartSendData+0xec>)
 800a1d6:	7bfa      	ldrb	r2, [r7, #15]
 800a1d8:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
 800a1da:	4b0d      	ldr	r3, [pc, #52]	; (800a210 <UartSendData+0x100>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	490c      	ldr	r1, [pc, #48]	; (800a214 <UartSendData+0x104>)
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	f001 fec1 	bl	800bf6c <uartWriteIT>
			serialHead_1 = 0;
 800a1ea:	4b09      	ldr	r3, [pc, #36]	; (800a210 <UartSendData+0x100>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	701a      	strb	r2, [r3, #0]
			break;
 800a1f0:	bf00      	nop
}
 800a1f2:	bf00      	nop
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd90      	pop	{r4, r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	2000045c 	.word	0x2000045c
 800a200:	20000660 	.word	0x20000660
 800a204:	20000460 	.word	0x20000460
 800a208:	20000560 	.word	0x20000560
 800a20c:	20000458 	.word	0x20000458
 800a210:	20000661 	.word	0x20000661
 800a214:	200005e0 	.word	0x200005e0

0800a218 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800a21c:	4b1b      	ldr	r3, [pc, #108]	; (800a28c <cliInit+0x74>)
 800a21e:	2200      	movs	r2, #0
 800a220:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800a222:	4b1a      	ldr	r3, [pc, #104]	; (800a28c <cliInit+0x74>)
 800a224:	2200      	movs	r2, #0
 800a226:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 800a228:	4b18      	ldr	r3, [pc, #96]	; (800a28c <cliInit+0x74>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800a22e:	4b17      	ldr	r3, [pc, #92]	; (800a28c <cliInit+0x74>)
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800a236:	4b15      	ldr	r3, [pc, #84]	; (800a28c <cliInit+0x74>)
 800a238:	2200      	movs	r2, #0
 800a23a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800a23e:	4b13      	ldr	r3, [pc, #76]	; (800a28c <cliInit+0x74>)
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800a246:	4b11      	ldr	r3, [pc, #68]	; (800a28c <cliInit+0x74>)
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800a24e:	4b0f      	ldr	r3, [pc, #60]	; (800a28c <cliInit+0x74>)
 800a250:	4a0f      	ldr	r2, [pc, #60]	; (800a290 <cliInit+0x78>)
 800a252:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800a256:	4b0d      	ldr	r3, [pc, #52]	; (800a28c <cliInit+0x74>)
 800a258:	4a0e      	ldr	r2, [pc, #56]	; (800a294 <cliInit+0x7c>)
 800a25a:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800a25e:	4b0b      	ldr	r3, [pc, #44]	; (800a28c <cliInit+0x74>)
 800a260:	4a0d      	ldr	r2, [pc, #52]	; (800a298 <cliInit+0x80>)
 800a262:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800a266:	4b09      	ldr	r3, [pc, #36]	; (800a28c <cliInit+0x74>)
 800a268:	4a0c      	ldr	r2, [pc, #48]	; (800a29c <cliInit+0x84>)
 800a26a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 800a26e:	4807      	ldr	r0, [pc, #28]	; (800a28c <cliInit+0x74>)
 800a270:	f000 fb5c 	bl	800a92c <cliLineClean>


  cliAdd("help", cliShowList);
 800a274:	490a      	ldr	r1, [pc, #40]	; (800a2a0 <cliInit+0x88>)
 800a276:	480b      	ldr	r0, [pc, #44]	; (800a2a4 <cliInit+0x8c>)
 800a278:	f000 fe0c 	bl	800ae94 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800a27c:	490a      	ldr	r1, [pc, #40]	; (800a2a8 <cliInit+0x90>)
 800a27e:	480b      	ldr	r0, [pc, #44]	; (800a2ac <cliInit+0x94>)
 800a280:	f000 fe08 	bl	800ae94 <cliAdd>

  return true;
 800a284:	2301      	movs	r3, #1
}
 800a286:	4618      	mov	r0, r3
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	20000f18 	.word	0x20000f18
 800a290:	0800ad31 	.word	0x0800ad31
 800a294:	0800ad81 	.word	0x0800ad81
 800a298:	0800add1 	.word	0x0800add1
 800a29c:	0800ae15 	.word	0x0800ae15
 800a2a0:	0800af29 	.word	0x0800af29
 800a2a4:	08019810 	.word	0x08019810
 800a2a8:	0800af99 	.word	0x0800af99
 800a2ac:	08019818 	.word	0x08019818

0800a2b0 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	6039      	str	r1, [r7, #0]
 800a2ba:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 800a2bc:	4a0a      	ldr	r2, [pc, #40]	; (800a2e8 <cliOpen+0x38>)
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800a2c2:	4a09      	ldr	r2, [pc, #36]	; (800a2e8 <cliOpen+0x38>)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f001 fc89 	bl	800bbe4 <uartOpen>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	4b04      	ldr	r3, [pc, #16]	; (800a2e8 <cliOpen+0x38>)
 800a2d8:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800a2da:	4b03      	ldr	r3, [pc, #12]	; (800a2e8 <cliOpen+0x38>)
 800a2dc:	7a1b      	ldrb	r3, [r3, #8]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000f18 	.word	0x20000f18

0800a2ec <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800a2f4:	4b34      	ldr	r3, [pc, #208]	; (800a3c8 <cliShowLog+0xdc>)
 800a2f6:	7a5b      	ldrb	r3, [r3, #9]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d061      	beq.n	800a3c0 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	7a98      	ldrb	r0, [r3, #10]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800a306:	461a      	mov	r2, r3
 800a308:	4930      	ldr	r1, [pc, #192]	; (800a3cc <cliShowLog+0xe0>)
 800a30a:	f001 fe69 	bl	800bfe0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	7a98      	ldrb	r0, [r3, #10]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800a318:	461a      	mov	r2, r3
 800a31a:	492d      	ldr	r1, [pc, #180]	; (800a3d0 <cliShowLog+0xe4>)
 800a31c:	f001 fe60 	bl	800bfe0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	7a98      	ldrb	r0, [r3, #10]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800a32a:	461a      	mov	r2, r3
 800a32c:	4929      	ldr	r1, [pc, #164]	; (800a3d4 <cliShowLog+0xe8>)
 800a32e:	f001 fe57 	bl	800bfe0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	7a98      	ldrb	r0, [r3, #10]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a33c:	461a      	mov	r2, r3
 800a33e:	4926      	ldr	r1, [pc, #152]	; (800a3d8 <cliShowLog+0xec>)
 800a340:	f001 fe4e 	bl	800bfe0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	7a98      	ldrb	r0, [r3, #10]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800a34e:	461a      	mov	r2, r3
 800a350:	4922      	ldr	r1, [pc, #136]	; (800a3dc <cliShowLog+0xf0>)
 800a352:	f001 fe45 	bl	800bfe0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	7a98      	ldrb	r0, [r3, #10]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a360:	461a      	mov	r2, r3
 800a362:	491f      	ldr	r1, [pc, #124]	; (800a3e0 <cliShowLog+0xf4>)
 800a364:	f001 fe3c 	bl	800bfe0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	7a98      	ldrb	r0, [r3, #10]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a372:	461a      	mov	r2, r3
 800a374:	491b      	ldr	r1, [pc, #108]	; (800a3e4 <cliShowLog+0xf8>)
 800a376:	f001 fe33 	bl	800bfe0 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 800a37a:	2300      	movs	r3, #0
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	e012      	b.n	800a3a6 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	7a98      	ldrb	r0, [r3, #10]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	4613      	mov	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	00da      	lsls	r2, r3, #3
 800a38e:	1ad2      	subs	r2, r2, r3
 800a390:	f502 73cc 	add.w	r3, r2, #408	; 0x198
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	4413      	add	r3, r2
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	4913      	ldr	r1, [pc, #76]	; (800a3e8 <cliShowLog+0xfc>)
 800a39c:	f001 fe20 	bl	800bfe0 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	60fb      	str	r3, [r7, #12]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	dbe5      	blt.n	800a380 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	7a9b      	ldrb	r3, [r3, #10]
 800a3b8:	490c      	ldr	r1, [pc, #48]	; (800a3ec <cliShowLog+0x100>)
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f001 fe10 	bl	800bfe0 <uartPrintf>
  }
}
 800a3c0:	bf00      	nop
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20000f18 	.word	0x20000f18
 800a3cc:	0801981c 	.word	0x0801981c
 800a3d0:	0801982c 	.word	0x0801982c
 800a3d4:	0801983c 	.word	0x0801983c
 800a3d8:	0801984c 	.word	0x0801984c
 800a3dc:	0801985c 	.word	0x0801985c
 800a3e0:	0801986c 	.word	0x0801986c
 800a3e4:	0801987c 	.word	0x0801987c
 800a3e8:	0801988c 	.word	0x0801988c
 800a3ec:	0801989c 	.word	0x0801989c

0800a3f0 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	4906      	ldr	r1, [pc, #24]	; (800a418 <cliShowPrompt+0x28>)
 800a3fe:	4618      	mov	r0, r3
 800a400:	f001 fdee 	bl	800bfe0 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	4904      	ldr	r1, [pc, #16]	; (800a41c <cliShowPrompt+0x2c>)
 800a40a:	4618      	mov	r0, r3
 800a40c:	f001 fde8 	bl	800bfe0 <uartPrintf>
}
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	080198a0 	.word	0x080198a0
 800a41c:	080198a4 	.word	0x080198a4

0800a420 <cliMain>:

bool cliMain(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800a424:	4b0e      	ldr	r3, [pc, #56]	; (800a460 <cliMain+0x40>)
 800a426:	7a1b      	ldrb	r3, [r3, #8]
 800a428:	f083 0301 	eor.w	r3, r3, #1
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <cliMain+0x16>
  {
    return false;
 800a432:	2300      	movs	r3, #0
 800a434:	e012      	b.n	800a45c <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 800a436:	4b0a      	ldr	r3, [pc, #40]	; (800a460 <cliMain+0x40>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f001 fcd2 	bl	800bde4 <uartAvailable>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d009      	beq.n	800a45a <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800a446:	4b06      	ldr	r3, [pc, #24]	; (800a460 <cliMain+0x40>)
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f001 fd2e 	bl	800beac <uartRead>
 800a450:	4603      	mov	r3, r0
 800a452:	4619      	mov	r1, r3
 800a454:	4802      	ldr	r0, [pc, #8]	; (800a460 <cliMain+0x40>)
 800a456:	f000 f805 	bl	800a464 <cliUpdate>
  }

  return true;
 800a45a:	2301      	movs	r3, #1
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	20000f18 	.word	0x20000f18

0800a464 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b08c      	sub	sp, #48	; 0x30
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 800a470:	2300      	movs	r3, #0
 800a472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a47c:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	7c1b      	ldrb	r3, [r3, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	f040 8165 	bne.w	800a752 <cliUpdate+0x2ee>
  {
    switch(rx_data)
 800a488:	78fb      	ldrb	r3, [r7, #3]
 800a48a:	2b0d      	cmp	r3, #13
 800a48c:	d009      	beq.n	800a4a2 <cliUpdate+0x3e>
 800a48e:	2b0d      	cmp	r3, #13
 800a490:	dc02      	bgt.n	800a498 <cliUpdate+0x34>
 800a492:	2b08      	cmp	r3, #8
 800a494:	d065      	beq.n	800a562 <cliUpdate+0xfe>
 800a496:	e0d4      	b.n	800a642 <cliUpdate+0x1de>
 800a498:	2b1b      	cmp	r3, #27
 800a49a:	d01c      	beq.n	800a4d6 <cliUpdate+0x72>
 800a49c:	2b7f      	cmp	r3, #127	; 0x7f
 800a49e:	d01e      	beq.n	800a4de <cliUpdate+0x7a>
 800a4a0:	e0cf      	b.n	800a642 <cliUpdate+0x1de>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d005      	beq.n	800a4b8 <cliUpdate+0x54>
        {
          cliLineAdd(p_cli);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fa56 	bl	800a95e <cliLineAdd>
          cliRunCmd(p_cli);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fb42 	bl	800ab3c <cliRunCmd>
        }

        line->count = 0;
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7ff ff8e 	bl	800a3f0 <cliShowPrompt>
        break;
 800a4d4:	e144      	b.n	800a760 <cliUpdate+0x2fc>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	741a      	strb	r2, [r3, #16]
        break;
 800a4dc:	e140      	b.n	800a760 <cliUpdate+0x2fc>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	f080 8133 	bcs.w	800a756 <cliUpdate+0x2f2>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800a500:	2301      	movs	r3, #1
 800a502:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a504:	e013      	b.n	800a52e <cliUpdate+0xca>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a50c:	461a      	mov	r2, r3
 800a50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a510:	441a      	add	r2, r3
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a518:	4619      	mov	r1, r3
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	440b      	add	r3, r1
 800a51e:	3b01      	subs	r3, #1
 800a520:	69f9      	ldr	r1, [r7, #28]
 800a522:	5c89      	ldrb	r1, [r1, r2]
 800a524:	69fa      	ldr	r2, [r7, #28]
 800a526:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800a528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52a:	3301      	adds	r3, #1
 800a52c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a52e:	7efb      	ldrb	r3, [r7, #27]
 800a530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a532:	429a      	cmp	r2, r3
 800a534:	dbe7      	blt.n	800a506 <cliUpdate+0xa2>
          }

          line->count--;
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a53c:	3b01      	subs	r3, #1
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a54c:	461a      	mov	r2, r3
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	2100      	movs	r1, #0
 800a552:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	498e      	ldr	r1, [pc, #568]	; (800a794 <cliUpdate+0x330>)
 800a55a:	4618      	mov	r0, r3
 800a55c:	f001 fd40 	bl	800bfe0 <uartPrintf>
        }
        break;
 800a560:	e0f9      	b.n	800a756 <cliUpdate+0x2f2>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d055      	beq.n	800a618 <cliUpdate+0x1b4>
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a572:	2b00      	cmp	r3, #0
 800a574:	d050      	beq.n	800a618 <cliUpdate+0x1b4>
        {
          if (line->cursor == line->count)
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a582:	429a      	cmp	r2, r3
 800a584:	d10e      	bne.n	800a5a4 <cliUpdate+0x140>
          {
            line->count--;
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a58c:	3b01      	subs	r3, #1
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a59c:	461a      	mov	r2, r3
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d231      	bcs.n	800a618 <cliUpdate+0x1b4>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5c8:	e013      	b.n	800a5f2 <cliUpdate+0x18e>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	441a      	add	r2, r3
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e0:	440b      	add	r3, r1
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	69f9      	ldr	r1, [r7, #28]
 800a5e6:	5c89      	ldrb	r1, [r1, r2]
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5f2:	7ebb      	ldrb	r3, [r7, #26]
 800a5f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	dbe7      	blt.n	800a5ca <cliUpdate+0x166>
            }

            line->count--;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a600:	3b01      	subs	r3, #1
 800a602:	b2da      	uxtb	r2, r3
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a610:	461a      	mov	r2, r3
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	2100      	movs	r1, #0
 800a616:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 809b 	beq.w	800a75a <cliUpdate+0x2f6>
        {
          line->cursor--;
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a62a:	3b01      	subs	r3, #1
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	4957      	ldr	r1, [pc, #348]	; (800a798 <cliUpdate+0x334>)
 800a63a:	4618      	mov	r0, r3
 800a63c:	f001 fcd0 	bl	800bfe0 <uartPrintf>
        }
        break;
 800a640:	e08b      	b.n	800a75a <cliUpdate+0x2f6>


      default:
        if ((line->count + 1) < line->buf_len)
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a648:	3301      	adds	r3, #1
 800a64a:	69fa      	ldr	r2, [r7, #28]
 800a64c:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a650:	4293      	cmp	r3, r2
 800a652:	f280 8084 	bge.w	800a75e <cliUpdate+0x2fa>
        {
          if (line->cursor == line->count)
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a662:	429a      	cmp	r2, r3
 800a664:	d124      	bne.n	800a6b0 <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	1cf9      	adds	r1, r7, #3
 800a66c:	2201      	movs	r2, #1
 800a66e:	4618      	mov	r0, r3
 800a670:	f001 fc42 	bl	800bef8 <uartWrite>

            line->buf[line->cursor] = rx_data;
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a67a:	461a      	mov	r2, r3
 800a67c:	78f9      	ldrb	r1, [r7, #3]
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	5499      	strb	r1, [r3, r2]
            line->count++;
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a688:	3301      	adds	r3, #1
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a698:	3301      	adds	r3, #1
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d24e      	bcs.n	800a75e <cliUpdate+0x2fa>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
 800a6d4:	e013      	b.n	800a6fe <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a6dc:	461a      	mov	r2, r3
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	1e5a      	subs	r2, r3, #1
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	1acb      	subs	r3, r1, r3
 800a6f0:	69f9      	ldr	r1, [r7, #28]
 800a6f2:	5c89      	ldrb	r1, [r1, r2]
 800a6f4:	69fa      	ldr	r2, [r7, #28]
 800a6f6:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a6fe:	7e7b      	ldrb	r3, [r7, #25]
 800a700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a702:	429a      	cmp	r2, r3
 800a704:	dbe7      	blt.n	800a6d6 <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a70c:	461a      	mov	r2, r3
 800a70e:	78f9      	ldrb	r1, [r7, #3]
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	5499      	strb	r1, [r3, r2]
            line->count++;
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a71a:	3301      	adds	r3, #1
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a72a:	3301      	adds	r3, #1
 800a72c:	b2da      	uxtb	r2, r3
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a73a:	461a      	mov	r2, r3
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	2100      	movs	r1, #0
 800a740:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	78fa      	ldrb	r2, [r7, #3]
 800a748:	4914      	ldr	r1, [pc, #80]	; (800a79c <cliUpdate+0x338>)
 800a74a:	4618      	mov	r0, r3
 800a74c:	f001 fc48 	bl	800bfe0 <uartPrintf>
          }
        }
        break;
 800a750:	e005      	b.n	800a75e <cliUpdate+0x2fa>
    }
  }
 800a752:	bf00      	nop
 800a754:	e004      	b.n	800a760 <cliUpdate+0x2fc>
        break;
 800a756:	bf00      	nop
 800a758:	e002      	b.n	800a760 <cliUpdate+0x2fc>
        break;
 800a75a:	bf00      	nop
 800a75c:	e000      	b.n	800a760 <cliUpdate+0x2fc>
        break;
 800a75e:	bf00      	nop

  switch(p_cli->state)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7c1b      	ldrb	r3, [r3, #16]
 800a764:	3b01      	subs	r3, #1
 800a766:	2b03      	cmp	r3, #3
 800a768:	f200 80d3 	bhi.w	800a912 <cliUpdate+0x4ae>
 800a76c:	a201      	add	r2, pc, #4	; (adr r2, 800a774 <cliUpdate+0x310>)
 800a76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a772:	bf00      	nop
 800a774:	0800a785 	.word	0x0800a785
 800a778:	0800a78d 	.word	0x0800a78d
 800a77c:	0800a7a1 	.word	0x0800a7a1
 800a780:	0800a909 	.word	0x0800a909
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	741a      	strb	r2, [r3, #16]
      break;
 800a78a:	e0c2      	b.n	800a912 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2203      	movs	r2, #3
 800a790:	741a      	strb	r2, [r3, #16]
      break;
 800a792:	e0be      	b.n	800a912 <cliUpdate+0x4ae>
 800a794:	080198ac 	.word	0x080198ac
 800a798:	080198b4 	.word	0x080198b4
 800a79c:	080198bc 	.word	0x080198bc

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800a7a6:	78fb      	ldrb	r3, [r7, #3]
 800a7a8:	2b44      	cmp	r3, #68	; 0x44
 800a7aa:	d11a      	bne.n	800a7e2 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d015      	beq.n	800a7e2 <cliUpdate+0x37e>
        {
          line->cursor--;
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800a7c6:	231b      	movs	r3, #27
 800a7c8:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800a7ca:	235b      	movs	r3, #91	; 0x5b
 800a7cc:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800a7ce:	78fb      	ldrb	r3, [r7, #3]
 800a7d0:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	f107 010c 	add.w	r1, r7, #12
 800a7da:	2203      	movs	r2, #3
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f001 fb8b 	bl	800bef8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 800a7e2:	78fb      	ldrb	r3, [r7, #3]
 800a7e4:	2b43      	cmp	r3, #67	; 0x43
 800a7e6:	d11d      	bne.n	800a824 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->buf_len)
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d215      	bcs.n	800a824 <cliUpdate+0x3c0>
        {
          line->cursor++;
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a7fe:	3301      	adds	r3, #1
 800a800:	b2da      	uxtb	r2, r3
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800a808:	231b      	movs	r3, #27
 800a80a:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800a80c:	235b      	movs	r3, #91	; 0x5b
 800a80e:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	f107 010c 	add.w	r1, r7, #12
 800a81c:	2203      	movs	r2, #3
 800a81e:	4618      	mov	r0, r3
 800a820:	f001 fb6a 	bl	800bef8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	2b41      	cmp	r3, #65	; 0x41
 800a828:	d10c      	bne.n	800a844 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800a82a:	2101      	movs	r1, #1
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f8eb 	bl	800aa08 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	781a      	ldrb	r2, [r3, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a83c:	4619      	mov	r1, r3
 800a83e:	4610      	mov	r0, r2
 800a840:	f001 fbce 	bl	800bfe0 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	2b42      	cmp	r3, #66	; 0x42
 800a848:	d10c      	bne.n	800a864 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 800a84a:	2100      	movs	r1, #0
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f8db 	bl	800aa08 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	781a      	ldrb	r2, [r3, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a85c:	4619      	mov	r1, r3
 800a85e:	4610      	mov	r0, r2
 800a860:	f001 fbbe 	bl	800bfe0 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 800a864:	78fb      	ldrb	r3, [r7, #3]
 800a866:	2b31      	cmp	r3, #49	; 0x31
 800a868:	d10f      	bne.n	800a88a <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	7818      	ldrb	r0, [r3, #0]
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a874:	461a      	mov	r2, r3
 800a876:	492b      	ldr	r1, [pc, #172]	; (800a924 <cliUpdate+0x4c0>)
 800a878:	f001 fbb2 	bl	800bfe0 <uartPrintf>
        line->cursor = 0;
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2204      	movs	r2, #4
 800a888:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800a88a:	78fb      	ldrb	r3, [r7, #3]
 800a88c:	2b34      	cmp	r3, #52	; 0x34
 800a88e:	d13f      	bne.n	800a910 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d210      	bcs.n	800a8c2 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	8afa      	ldrh	r2, [r7, #22]
 800a8ba:	491b      	ldr	r1, [pc, #108]	; (800a928 <cliUpdate+0x4c4>)
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f001 fb8f 	bl	800bfe0 <uartPrintf>
        }
        if (line->cursor > line->count)
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d910      	bls.n	800a8f4 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	8afa      	ldrh	r2, [r7, #22]
 800a8ec:	490d      	ldr	r1, [pc, #52]	; (800a924 <cliUpdate+0x4c0>)
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f001 fb76 	bl	800bfe0 <uartPrintf>
        }
        line->cursor = line->count;
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2204      	movs	r2, #4
 800a904:	741a      	strb	r2, [r3, #16]
      }
      break;
 800a906:	e003      	b.n	800a910 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	741a      	strb	r2, [r3, #16]
      break;
 800a90e:	e000      	b.n	800a912 <cliUpdate+0x4ae>
      break;
 800a910:	bf00      	nop
  }



  cliShowLog(p_cli);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7ff fcea 	bl	800a2ec <cliShowLog>

  return ret;
 800a918:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3730      	adds	r7, #48	; 0x30
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	080198c8 	.word	0x080198c8
 800a928:	080198d0 	.word	0x080198d0

0800a92c <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	221f      	movs	r2, #31
 800a948:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	bc80      	pop	{r7}
 800a95c:	4770      	bx	lr

0800a95e <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 800a95e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a960:	b083      	sub	sp, #12
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a96c:	461a      	mov	r2, r3
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	4613      	mov	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4413      	add	r3, r2
 800a976:	00da      	lsls	r2, r3, #3
 800a978:	1ad2      	subs	r2, r2, r3
 800a97a:	188b      	adds	r3, r1, r2
 800a97c:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f503 7409 	add.w	r4, r3, #548	; 0x224
 800a986:	4694      	mov	ip, r2
 800a988:	f104 0e20 	add.w	lr, r4, #32
 800a98c:	4665      	mov	r5, ip
 800a98e:	4626      	mov	r6, r4
 800a990:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a992:	6028      	str	r0, [r5, #0]
 800a994:	6069      	str	r1, [r5, #4]
 800a996:	60aa      	str	r2, [r5, #8]
 800a998:	60eb      	str	r3, [r5, #12]
 800a99a:	3410      	adds	r4, #16
 800a99c:	f10c 0c10 	add.w	ip, ip, #16
 800a9a0:	4574      	cmp	r4, lr
 800a9a2:	d1f3      	bne.n	800a98c <cliLineAdd+0x2e>
 800a9a4:	4663      	mov	r3, ip
 800a9a6:	4622      	mov	r2, r4
 800a9a8:	8811      	ldrh	r1, [r2, #0]
 800a9aa:	7892      	ldrb	r2, [r2, #2]
 800a9ac:	8019      	strh	r1, [r3, #0]
 800a9ae:	709a      	strb	r2, [r3, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	d807      	bhi.n	800a9ca <cliLineAdd+0x6c>
  {
    p_cli->hist_line_count++;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a9d0:	b25a      	sxtb	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a9de:	3301      	adds	r3, #1
 800a9e0:	425a      	negs	r2, r3
 800a9e2:	f003 0303 	and.w	r3, r3, #3
 800a9e6:	f002 0203 	and.w	r2, r2, #3
 800a9ea:	bf58      	it	pl
 800a9ec:	4253      	negpl	r3, r2
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 800a9fe:	bf00      	nop
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800aa08 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800aa08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f000 8086 	beq.w	800ab2c <cliLineChange+0x124>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d008      	beq.n	800aa3c <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	7818      	ldrb	r0, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800aa34:	461a      	mov	r2, r3
 800aa36:	493f      	ldr	r1, [pc, #252]	; (800ab34 <cliLineChange+0x12c>)
 800aa38:	f001 fad2 	bl	800bfe0 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d008      	beq.n	800aa58 <cliLineChange+0x50>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	7818      	ldrb	r0, [r3, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800aa50:	461a      	mov	r2, r3
 800aa52:	4939      	ldr	r1, [pc, #228]	; (800ab38 <cliLineChange+0x130>)
 800aa54:	f001 fac4 	bl	800bfe0 <uartPrintf>
  }


  if (key_up == true)
 800aa58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d125      	bne.n	800aaac <cliLineChange+0xa4>
  {
    if (p_cli->hist_line_new == true)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d006      	beq.n	800aa78 <cliLineChange+0x70>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800aa70:	b25a      	sxtb	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aa7e:	461a      	mov	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800aa86:	4413      	add	r3, r2
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800aa90:	fb93 f1f2 	sdiv	r1, r3, r2
 800aa94:	fb02 f201 	mul.w	r2, r2, r1
 800aa98:	1a9b      	subs	r3, r3, r2
 800aa9a:	b25a      	sxtb	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aaa8:	73fb      	strb	r3, [r7, #15]
 800aaaa:	e013      	b.n	800aad4 <cliLineChange+0xcc>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aab2:	3301      	adds	r3, #1
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800aaba:	fb93 f1f2 	sdiv	r1, r3, r2
 800aabe:	fb02 f201 	mul.w	r2, r2, r1
 800aac2:	1a9b      	subs	r3, r3, r2
 800aac4:	b25a      	sxtb	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aad2:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800aad4:	7bfa      	ldrb	r2, [r7, #15]
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	4613      	mov	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	00da      	lsls	r2, r3, #3
 800aae2:	1ad2      	subs	r2, r2, r3
 800aae4:	1883      	adds	r3, r0, r2
 800aae6:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800aaea:	461c      	mov	r4, r3
 800aaec:	f501 7609 	add.w	r6, r1, #548	; 0x224
 800aaf0:	f104 0c20 	add.w	ip, r4, #32
 800aaf4:	4635      	mov	r5, r6
 800aaf6:	4623      	mov	r3, r4
 800aaf8:	6818      	ldr	r0, [r3, #0]
 800aafa:	6859      	ldr	r1, [r3, #4]
 800aafc:	689a      	ldr	r2, [r3, #8]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab02:	3410      	adds	r4, #16
 800ab04:	3610      	adds	r6, #16
 800ab06:	4564      	cmp	r4, ip
 800ab08:	d1f4      	bne.n	800aaf4 <cliLineChange+0xec>
 800ab0a:	4633      	mov	r3, r6
 800ab0c:	4622      	mov	r2, r4
 800ab0e:	8811      	ldrh	r1, [r2, #0]
 800ab10:	7892      	ldrb	r2, [r2, #2]
 800ab12:	8019      	strh	r1, [r3, #0]
 800ab14:	709a      	strb	r2, [r3, #2]
  p_cli->line.cursor = p_cli->line.count;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

  p_cli->hist_line_new = false;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800ab2a:	e000      	b.n	800ab2e <cliLineChange+0x126>
    return;
 800ab2c:	bf00      	nop
}
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab34:	080198c8 	.word	0x080198c8
 800ab38:	080198d8 	.word	0x080198d8

0800ab3c <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800ab44:	2300      	movs	r3, #0
 800ab46:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f851 	bl	800abf0 <cliParseArgs>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d046      	beq.n	800abe2 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 800ab54:	4825      	ldr	r0, [pc, #148]	; (800abec <cliRunCmd+0xb0>)
 800ab56:	f000 f893 	bl	800ac80 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab60:	4618      	mov	r0, r3
 800ab62:	f000 f8b1 	bl	800acc8 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 800ab66:	2300      	movs	r3, #0
 800ab68:	60fb      	str	r3, [r7, #12]
 800ab6a:	e033      	b.n	800abd4 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	4613      	mov	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	4413      	add	r3, r2
 800ab84:	3304      	adds	r3, #4
 800ab86:	4619      	mov	r1, r3
 800ab88:	f7f5 faf2 	bl	8000170 <strcmp>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d11d      	bne.n	800abce <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	440b      	add	r3, r1
 800abbc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 800abc8:	4610      	mov	r0, r2
 800abca:	4798      	blx	r3
        break;
 800abcc:	e009      	b.n	800abe2 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3301      	adds	r3, #1
 800abd2:	60fb      	str	r3, [r7, #12]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800abda:	461a      	mov	r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	4293      	cmp	r3, r2
 800abe0:	dbc4      	blt.n	800ab6c <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800abe2:	7afb      	ldrb	r3, [r7, #11]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	080198e0 	.word	0x080198e0

0800abf0 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800abf8:	2300      	movs	r3, #0
 800abfa:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  cmdline = (char *)p_cli->line.buf;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800ac0e:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800ac16:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800ac18:	8afb      	ldrh	r3, [r7, #22]
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	4413      	add	r3, r2
 800ac20:	2200      	movs	r2, #0
 800ac22:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800ac24:	4b15      	ldr	r3, [pc, #84]	; (800ac7c <cliParseArgs+0x8c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f107 0208 	add.w	r2, r7, #8
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6938      	ldr	r0, [r7, #16]
 800ac30:	f007 fd4c 	bl	80126cc <strtok_r>
 800ac34:	61b8      	str	r0, [r7, #24]
 800ac36:	e010      	b.n	800ac5a <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800ac38:	8afb      	ldrh	r3, [r7, #22]
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	82fa      	strh	r2, [r7, #22]
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	4413      	add	r3, r2
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800ac48:	4b0c      	ldr	r3, [pc, #48]	; (800ac7c <cliParseArgs+0x8c>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f107 0208 	add.w	r2, r7, #8
 800ac50:	4619      	mov	r1, r3
 800ac52:	2000      	movs	r0, #0
 800ac54:	f007 fd3a 	bl	80126cc <strtok_r>
 800ac58:	61b8      	str	r0, [r7, #24]
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1eb      	bne.n	800ac38 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	8afa      	ldrh	r2, [r7, #22]
 800ac64:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  if (argc > 0)
 800ac68:	8afb      	ldrh	r3, [r7, #22]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <cliParseArgs+0x82>
  {
    ret = true;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800ac72:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3720      	adds	r7, #32
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	2000002c 	.word	0x2000002c

0800ac80 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 800ac80:	b40f      	push	{r0, r1, r2, r3}
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b084      	sub	sp, #16
 800ac86:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800ac88:	f107 031c 	add.w	r3, r7, #28
 800ac8c:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800ac8e:	4b0d      	ldr	r3, [pc, #52]	; (800acc4 <cliPrintf+0x44>)
 800ac90:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 255, fmt, arg);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f103 0011 	add.w	r0, r3, #17
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	69ba      	ldr	r2, [r7, #24]
 800ac9c:	21ff      	movs	r1, #255	; 0xff
 800ac9e:	f007 fdd5 	bl	801284c <vsniprintf>
 800aca2:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	7818      	ldrb	r0, [r3, #0]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	3311      	adds	r3, #17
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	4619      	mov	r1, r3
 800acb0:	f001 f922 	bl	800bef8 <uartWrite>
}
 800acb4:	bf00      	nop
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acbe:	b004      	add	sp, #16
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	20000f18 	.word	0x20000f18

0800acc8 <cliToUpper>:

void cliToUpper(char *str)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800acd0:	2300      	movs	r3, #0
 800acd2:	81fb      	strh	r3, [r7, #14]
 800acd4:	e018      	b.n	800ad08 <cliToUpper+0x40>
  {
    str_ch = str[i];
 800acd6:	89fb      	ldrh	r3, [r7, #14]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	4413      	add	r3, r2
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 800ace0:	7b7b      	ldrb	r3, [r7, #13]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d014      	beq.n	800ad10 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800ace6:	7b7b      	ldrb	r3, [r7, #13]
 800ace8:	2b60      	cmp	r3, #96	; 0x60
 800acea:	d905      	bls.n	800acf8 <cliToUpper+0x30>
 800acec:	7b7b      	ldrb	r3, [r7, #13]
 800acee:	2b7a      	cmp	r3, #122	; 0x7a
 800acf0:	d802      	bhi.n	800acf8 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800acf2:	7b7b      	ldrb	r3, [r7, #13]
 800acf4:	3b20      	subs	r3, #32
 800acf6:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800acf8:	89fb      	ldrh	r3, [r7, #14]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	4413      	add	r3, r2
 800acfe:	7b7a      	ldrb	r2, [r7, #13]
 800ad00:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800ad02:	89fb      	ldrh	r3, [r7, #14]
 800ad04:	3301      	adds	r3, #1
 800ad06:	81fb      	strh	r3, [r7, #14]
 800ad08:	89fb      	ldrh	r3, [r7, #14]
 800ad0a:	2b0f      	cmp	r3, #15
 800ad0c:	d9e3      	bls.n	800acd6 <cliToUpper+0xe>
 800ad0e:	e000      	b.n	800ad12 <cliToUpper+0x4a>
      break;
 800ad10:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800ad12:	89fb      	ldrh	r3, [r7, #14]
 800ad14:	2b10      	cmp	r3, #16
 800ad16:	d105      	bne.n	800ad24 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800ad18:	89fb      	ldrh	r3, [r7, #14]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	4413      	add	r3, r2
 800ad20:	2200      	movs	r2, #0
 800ad22:	701a      	strb	r2, [r3, #0]
  }
}
 800ad24:	bf00      	nop
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bc80      	pop	{r7}
 800ad2c:	4770      	bx	lr
	...

0800ad30 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	4603      	mov	r3, r0
 800ad38:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800ad3e:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <cliArgsGetData+0x4c>)
 800ad40:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800ad42:	79fb      	ldrb	r3, [r7, #7]
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d301      	bcc.n	800ad54 <cliArgsGetData+0x24>
  {
    return 0;
 800ad50:	2300      	movs	r3, #0
 800ad52:	e00e      	b.n	800ad72 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	4413      	add	r3, r2
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2200      	movs	r2, #0
 800ad64:	2100      	movs	r1, #0
 800ad66:	4618      	mov	r0, r3
 800ad68:	f007 fd2e 	bl	80127c8 <strtoul>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	60fb      	str	r3, [r7, #12]

  return ret;
 800ad70:	68fb      	ldr	r3, [r7, #12]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20000f18 	.word	0x20000f18

0800ad80 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	4603      	mov	r3, r0
 800ad88:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800ad8a:	f04f 0300 	mov.w	r3, #0
 800ad8e:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800ad90:	4b0e      	ldr	r3, [pc, #56]	; (800adcc <cliArgsGetFloat+0x4c>)
 800ad92:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d302      	bcc.n	800ada8 <cliArgsGetFloat+0x28>
  {
    return 0;
 800ada2:	f04f 0300 	mov.w	r3, #0
 800ada6:	e00c      	b.n	800adc2 <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800adae:	79fb      	ldrb	r3, [r7, #7]
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2100      	movs	r1, #0
 800adb8:	4618      	mov	r0, r3
 800adba:	f007 fc0f 	bl	80125dc <strtof>
 800adbe:	60f8      	str	r0, [r7, #12]

  return ret;
 800adc0:	68fb      	ldr	r3, [r7, #12]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	20000f18 	.word	0x20000f18

0800add0 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	4603      	mov	r3, r0
 800add8:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800adde:	4b0c      	ldr	r3, [pc, #48]	; (800ae10 <cliArgsGetStr+0x40>)
 800ade0:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800ade2:	79fb      	ldrb	r3, [r7, #7]
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800adec:	429a      	cmp	r2, r3
 800adee:	d301      	bcc.n	800adf4 <cliArgsGetStr+0x24>
  {
    return 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	e008      	b.n	800ae06 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	60fb      	str	r3, [r7, #12]

  return ret;
 800ae04:	68fb      	ldr	r3, [r7, #12]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bc80      	pop	{r7}
 800ae0e:	4770      	bx	lr
 800ae10:	20000f18 	.word	0x20000f18

0800ae14 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	6039      	str	r1, [r7, #0]
 800ae1e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800ae20:	2300      	movs	r3, #0
 800ae22:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 800ae24:	4b0f      	ldr	r3, [pc, #60]	; (800ae64 <cliArgsIsStr+0x50>)
 800ae26:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800ae28:	79fb      	ldrb	r3, [r7, #7]
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d301      	bcc.n	800ae3a <cliArgsIsStr+0x26>
  {
    return 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	e010      	b.n	800ae5c <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800ae40:	79fb      	ldrb	r3, [r7, #7]
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	6838      	ldr	r0, [r7, #0]
 800ae4c:	f7f5 f990 	bl	8000170 <strcmp>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <cliArgsIsStr+0x46>
  {
    ret = true;
 800ae56:	2301      	movs	r3, #1
 800ae58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	20000f18 	.word	0x20000f18

0800ae68 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800ae6e:	4b08      	ldr	r3, [pc, #32]	; (800ae90 <cliKeepLoop+0x28>)
 800ae70:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 ffb4 	bl	800bde4 <uartAvailable>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <cliKeepLoop+0x1e>
  {
    return true;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 800ae86:	2300      	movs	r3, #0
  }
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	20000f18 	.word	0x20000f18

0800ae94 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800aea2:	4b20      	ldr	r3, [pc, #128]	; (800af24 <cliAdd+0x90>)
 800aea4:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800aeac:	2b0f      	cmp	r3, #15
 800aeae:	d901      	bls.n	800aeb4 <cliAdd+0x20>
  {
    return false;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	e032      	b.n	800af1a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800aeba:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800aebc:	89fa      	ldrh	r2, [r7, #14]
 800aebe:	4613      	mov	r3, r2
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	4413      	add	r3, r2
 800aece:	3304      	adds	r3, #4
 800aed0:	6879      	ldr	r1, [r7, #4]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f006 fd44 	bl	8011960 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800aed8:	89fa      	ldrh	r2, [r7, #14]
 800aeda:	6939      	ldr	r1, [r7, #16]
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	440b      	add	r3, r1
 800aee6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800aeee:	89fa      	ldrh	r2, [r7, #14]
 800aef0:	4613      	mov	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aefc:	693a      	ldr	r2, [r7, #16]
 800aefe:	4413      	add	r3, r2
 800af00:	3304      	adds	r3, #4
 800af02:	4618      	mov	r0, r3
 800af04:	f7ff fee0 	bl	800acc8 <cliToUpper>

  p_cli->cmd_count++;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800af0e:	3301      	adds	r3, #1
 800af10:	b29a      	uxth	r2, r3
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 800af18:	7dfb      	ldrb	r3, [r7, #23]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20000f18 	.word	0x20000f18

0800af28 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 800af30:	4b15      	ldr	r3, [pc, #84]	; (800af88 <cliShowList+0x60>)
 800af32:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 800af34:	4815      	ldr	r0, [pc, #84]	; (800af8c <cliShowList+0x64>)
 800af36:	f7ff fea3 	bl	800ac80 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800af3a:	4815      	ldr	r0, [pc, #84]	; (800af90 <cliShowList+0x68>)
 800af3c:	f7ff fea0 	bl	800ac80 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800af40:	2300      	movs	r3, #0
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	e012      	b.n	800af6c <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4613      	mov	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	4413      	add	r3, r2
 800af58:	3304      	adds	r3, #4
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff fe90 	bl	800ac80 <cliPrintf>
    cliPrintf("\r\n");
 800af60:	480a      	ldr	r0, [pc, #40]	; (800af8c <cliShowList+0x64>)
 800af62:	f7ff fe8d 	bl	800ac80 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	3301      	adds	r3, #1
 800af6a:	60fb      	str	r3, [r7, #12]
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800af72:	461a      	mov	r2, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4293      	cmp	r3, r2
 800af78:	dbe5      	blt.n	800af46 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800af7a:	4806      	ldr	r0, [pc, #24]	; (800af94 <cliShowList+0x6c>)
 800af7c:	f7ff fe80 	bl	800ac80 <cliPrintf>
}
 800af80:	bf00      	nop
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	20000f18 	.word	0x20000f18
 800af8c:	080198e0 	.word	0x080198e0
 800af90:	080198e4 	.word	0x080198e4
 800af94:	08019904 	.word	0x08019904

0800af98 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b08c      	sub	sp, #48	; 0x30
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 800afa0:	2310      	movs	r3, #16
 800afa2:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d103      	bne.n	800afc0 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800afb8:	4840      	ldr	r0, [pc, #256]	; (800b0bc <cliMemoryDump+0x124>)
 800afba:	f7ff fe61 	bl	800ac80 <cliPrintf>
 800afbe:	e07a      	b.n	800b0b6 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	dd09      	ble.n	800afda <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	3304      	adds	r3, #4
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2200      	movs	r2, #0
 800afce:	2100      	movs	r1, #0
 800afd0:	4618      	mov	r0, r3
 800afd2:	f007 fbf9 	bl	80127c8 <strtoul>
 800afd6:	4603      	mov	r3, r0
 800afd8:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2200      	movs	r2, #0
 800afe0:	2100      	movs	r1, #0
 800afe2:	4618      	mov	r0, r3
 800afe4:	f007 fbf0 	bl	80127c8 <strtoul>
 800afe8:	4603      	mov	r3, r0
 800afea:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 800aff0:	4833      	ldr	r0, [pc, #204]	; (800b0c0 <cliMemoryDump+0x128>)
 800aff2:	f7ff fe45 	bl	800ac80 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800aff6:	2300      	movs	r3, #0
 800aff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800affa:	e058      	b.n	800b0ae <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800affc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affe:	f003 0303 	and.w	r3, r3, #3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d104      	bne.n	800b010 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800b006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b008:	4619      	mov	r1, r3
 800b00a:	482e      	ldr	r0, [pc, #184]	; (800b0c4 <cliMemoryDump+0x12c>)
 800b00c:	f7ff fe38 	bl	800ac80 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 800b010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4619      	mov	r1, r3
 800b016:	482c      	ldr	r0, [pc, #176]	; (800b0c8 <cliMemoryDump+0x130>)
 800b018:	f7ff fe32 	bl	800ac80 <cliPrintf>

    if ((idx%4) == 3)
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	425a      	negs	r2, r3
 800b020:	f003 0303 	and.w	r3, r3, #3
 800b024:	f002 0203 	and.w	r2, r2, #3
 800b028:	bf58      	it	pl
 800b02a:	4253      	negpl	r3, r2
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d138      	bne.n	800b0a2 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 800b030:	4826      	ldr	r0, [pc, #152]	; (800b0cc <cliMemoryDump+0x134>)
 800b032:	f7ff fe25 	bl	800ac80 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800b036:	2300      	movs	r3, #0
 800b038:	623b      	str	r3, [r7, #32]
 800b03a:	e02c      	b.n	800b096 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800b042:	2300      	movs	r3, #0
 800b044:	61fb      	str	r3, [r7, #28]
 800b046:	e01d      	b.n	800b084 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800b048:	f107 020c 	add.w	r2, r7, #12
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	4413      	add	r3, r2
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	2b1f      	cmp	r3, #31
 800b054:	d910      	bls.n	800b078 <cliMemoryDump+0xe0>
 800b056:	f107 020c 	add.w	r2, r7, #12
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	4413      	add	r3, r2
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	2b7e      	cmp	r3, #126	; 0x7e
 800b062:	d809      	bhi.n	800b078 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 800b064:	f107 020c 	add.w	r2, r7, #12
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	4413      	add	r3, r2
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	4619      	mov	r1, r3
 800b070:	4817      	ldr	r0, [pc, #92]	; (800b0d0 <cliMemoryDump+0x138>)
 800b072:	f7ff fe05 	bl	800ac80 <cliPrintf>
 800b076:	e002      	b.n	800b07e <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800b078:	4816      	ldr	r0, [pc, #88]	; (800b0d4 <cliMemoryDump+0x13c>)
 800b07a:	f7ff fe01 	bl	800ac80 <cliPrintf>
        for (i=0;i<4;i++)
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	3301      	adds	r3, #1
 800b082:	61fb      	str	r3, [r7, #28]
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	2b03      	cmp	r3, #3
 800b088:	ddde      	ble.n	800b048 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	3304      	adds	r3, #4
 800b08e:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	3301      	adds	r3, #1
 800b094:	623b      	str	r3, [r7, #32]
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	2b03      	cmp	r3, #3
 800b09a:	ddcf      	ble.n	800b03c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800b09c:	480e      	ldr	r0, [pc, #56]	; (800b0d8 <cliMemoryDump+0x140>)
 800b09e:	f7ff fdef 	bl	800ac80 <cliPrintf>
    }
    addr++;
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 800b0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	dba2      	blt.n	800affc <cliMemoryDump+0x64>
  }
}
 800b0b6:	3730      	adds	r7, #48	; 0x30
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	08019924 	.word	0x08019924
 800b0c0:	08019938 	.word	0x08019938
 800b0c4:	08019940 	.word	0x08019940
 800b0c8:	0801994c 	.word	0x0801994c
 800b0cc:	08019954 	.word	0x08019954
 800b0d0:	08019958 	.word	0x08019958
 800b0d4:	0801995c 	.word	0x0801995c
 800b0d8:	08019960 	.word	0x08019960

0800b0dc <i2cInit>:

I2C_HandleTypeDef hi2c2;


bool i2cInit(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
  bool ret = true;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	71fb      	strb	r3, [r7, #7]

  hi2c2.Instance = I2C2;
 800b0e6:	4b14      	ldr	r3, [pc, #80]	; (800b138 <i2cInit+0x5c>)
 800b0e8:	4a14      	ldr	r2, [pc, #80]	; (800b13c <i2cInit+0x60>)
 800b0ea:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800b0ec:	4b12      	ldr	r3, [pc, #72]	; (800b138 <i2cInit+0x5c>)
 800b0ee:	4a14      	ldr	r2, [pc, #80]	; (800b140 <i2cInit+0x64>)
 800b0f0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b0f2:	4b11      	ldr	r3, [pc, #68]	; (800b138 <i2cInit+0x5c>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800b0f8:	4b0f      	ldr	r3, [pc, #60]	; (800b138 <i2cInit+0x5c>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b0fe:	4b0e      	ldr	r3, [pc, #56]	; (800b138 <i2cInit+0x5c>)
 800b100:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b104:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b106:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <i2cInit+0x5c>)
 800b108:	2200      	movs	r2, #0
 800b10a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800b10c:	4b0a      	ldr	r3, [pc, #40]	; (800b138 <i2cInit+0x5c>)
 800b10e:	2200      	movs	r2, #0
 800b110:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b112:	4b09      	ldr	r3, [pc, #36]	; (800b138 <i2cInit+0x5c>)
 800b114:	2200      	movs	r2, #0
 800b116:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b118:	4b07      	ldr	r3, [pc, #28]	; (800b138 <i2cInit+0x5c>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b11e:	4806      	ldr	r0, [pc, #24]	; (800b138 <i2cInit+0x5c>)
 800b120:	f001 ff48 	bl	800cfb4 <HAL_I2C_Init>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <i2cInit+0x52>
  {
    Error_Handler();
 800b12a:	f7f6 fa45 	bl	80015b8 <Error_Handler>
  }
  return ret;
 800b12e:	79fb      	ldrb	r3, [r7, #7]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	200012bc 	.word	0x200012bc
 800b13c:	40005800 	.word	0x40005800
 800b140:	00061a80 	.word	0x00061a80

0800b144 <I2C_ByteWrite>:


bool I2C_ByteWrite(uint8_t DevAddress, uint8_t MemAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 800b144:	b590      	push	{r4, r7, lr}
 800b146:	b08b      	sub	sp, #44	; 0x2c
 800b148:	af04      	add	r7, sp, #16
 800b14a:	4604      	mov	r4, r0
 800b14c:	4608      	mov	r0, r1
 800b14e:	4611      	mov	r1, r2
 800b150:	461a      	mov	r2, r3
 800b152:	4623      	mov	r3, r4
 800b154:	71fb      	strb	r3, [r7, #7]
 800b156:	4603      	mov	r3, r0
 800b158:	71bb      	strb	r3, [r7, #6]
 800b15a:	460b      	mov	r3, r1
 800b15c:	717b      	strb	r3, [r7, #5]
 800b15e:	4613      	mov	r3, r2
 800b160:	713b      	strb	r3, [r7, #4]
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t tmp;
	state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1000);
 800b162:	79fb      	ldrb	r3, [r7, #7]
 800b164:	b299      	uxth	r1, r3
 800b166:	79bb      	ldrb	r3, [r7, #6]
 800b168:	b29a      	uxth	r2, r3
 800b16a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b16e:	9302      	str	r3, [sp, #8]
 800b170:	2301      	movs	r3, #1
 800b172:	9301      	str	r3, [sp, #4]
 800b174:	f107 030e 	add.w	r3, r7, #14
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	2301      	movs	r3, #1
 800b17c:	4832      	ldr	r0, [pc, #200]	; (800b248 <I2C_ByteWrite+0x104>)
 800b17e:	f002 fca3 	bl	800dac8 <HAL_I2C_Mem_Read>
 800b182:	4603      	mov	r3, r0
 800b184:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b186:	4b30      	ldr	r3, [pc, #192]	; (800b248 <I2C_ByteWrite+0x104>)
 800b188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18a:	613b      	str	r3, [r7, #16]
//      Error.error = 2;
//      error_signal();
//      HAL_Delay(4);
//    }
//  }
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800b18c:	793b      	ldrb	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	fa02 f303 	lsl.w	r3, r2, r3
 800b194:	1e5a      	subs	r2, r3, #1
 800b196:	7979      	ldrb	r1, [r7, #5]
 800b198:	793b      	ldrb	r3, [r7, #4]
 800b19a:	1acb      	subs	r3, r1, r3
 800b19c:	3301      	adds	r3, #1
 800b19e:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a2:	73fb      	strb	r3, [r7, #15]
	data <<= (bitStart - length + 1); // shift data into correct position
 800b1a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b1a8:	7979      	ldrb	r1, [r7, #5]
 800b1aa:	793b      	ldrb	r3, [r7, #4]
 800b1ac:	1acb      	subs	r3, r1, r3
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	data &= mask; // zero all non-important bits in data
 800b1b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
 800b1be:	4013      	ands	r3, r2
 800b1c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tmp &= ~(mask); // zero all important bits in existing byte
 800b1c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1c8:	43db      	mvns	r3, r3
 800b1ca:	b25a      	sxtb	r2, r3
 800b1cc:	7bbb      	ldrb	r3, [r7, #14]
 800b1ce:	b25b      	sxtb	r3, r3
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	b25b      	sxtb	r3, r3
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	73bb      	strb	r3, [r7, #14]
	tmp |= data; // combine data with existing byte
 800b1d8:	7bba      	ldrb	r2, [r7, #14]
 800b1da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	73bb      	strb	r3, [r7, #14]
	state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1000);
 800b1e4:	79fb      	ldrb	r3, [r7, #7]
 800b1e6:	b299      	uxth	r1, r3
 800b1e8:	79bb      	ldrb	r3, [r7, #6]
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b1f0:	9302      	str	r3, [sp, #8]
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	9301      	str	r3, [sp, #4]
 800b1f6:	f107 030e 	add.w	r3, r7, #14
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	4812      	ldr	r0, [pc, #72]	; (800b248 <I2C_ByteWrite+0x104>)
 800b200:	f002 fb68 	bl	800d8d4 <HAL_I2C_Mem_Write>
 800b204:	4603      	mov	r3, r0
 800b206:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b208:	4b0f      	ldr	r3, [pc, #60]	; (800b248 <I2C_ByteWrite+0x104>)
 800b20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20c:	613b      	str	r3, [r7, #16]
  while(state)
 800b20e:	e012      	b.n	800b236 <I2C_ByteWrite+0xf2>
  {
  	logPrintf("MPU9250_Tx(write)_Error : %d, %ld\r\n", state, ErrorCode);
 800b210:	7dfb      	ldrb	r3, [r7, #23]
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	4619      	mov	r1, r3
 800b216:	480d      	ldr	r0, [pc, #52]	; (800b24c <I2C_ByteWrite+0x108>)
 800b218:	f006 fb8a 	bl	8011930 <iprintf>
    while (Error.error !=0)
 800b21c:	e007      	b.n	800b22e <I2C_ByteWrite+0xea>
    {
      Error.error = 2;
 800b21e:	4b0c      	ldr	r3, [pc, #48]	; (800b250 <I2C_ByteWrite+0x10c>)
 800b220:	2202      	movs	r2, #2
 800b222:	701a      	strb	r2, [r3, #0]
      error_signal();
 800b224:	f7f8 fd9e 	bl	8003d64 <error_signal>
      HAL_Delay(4);
 800b228:	2004      	movs	r0, #4
 800b22a:	f001 f99d 	bl	800c568 <HAL_Delay>
    while (Error.error !=0)
 800b22e:	4b08      	ldr	r3, [pc, #32]	; (800b250 <I2C_ByteWrite+0x10c>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1f3      	bne.n	800b21e <I2C_ByteWrite+0xda>
  while(state)
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1e9      	bne.n	800b210 <I2C_ByteWrite+0xcc>
    }
  }
  return true;
 800b23c:	2301      	movs	r3, #1
}
 800b23e:	4618      	mov	r0, r3
 800b240:	371c      	adds	r7, #28
 800b242:	46bd      	mov	sp, r7
 800b244:	bd90      	pop	{r4, r7, pc}
 800b246:	bf00      	nop
 800b248:	200012bc 	.word	0x200012bc
 800b24c:	08019970 	.word	0x08019970
 800b250:	20000acc 	.word	0x20000acc

0800b254 <I2C_ByteRead>:
//	tmp >>= (bitStart - length + 1);
//	*data = tmp;
//}

bool I2C_ByteRead(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b08a      	sub	sp, #40	; 0x28
 800b258:	af04      	add	r7, sp, #16
 800b25a:	607b      	str	r3, [r7, #4]
 800b25c:	4603      	mov	r3, r0
 800b25e:	81fb      	strh	r3, [r7, #14]
 800b260:	460b      	mov	r3, r1
 800b262:	81bb      	strh	r3, [r7, #12]
 800b264:	4613      	mov	r3, r2
 800b266:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;
  state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 800b268:	8978      	ldrh	r0, [r7, #10]
 800b26a:	89ba      	ldrh	r2, [r7, #12]
 800b26c:	89f9      	ldrh	r1, [r7, #14]
 800b26e:	2301      	movs	r3, #1
 800b270:	9302      	str	r3, [sp, #8]
 800b272:	8c3b      	ldrh	r3, [r7, #32]
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	4603      	mov	r3, r0
 800b27c:	4811      	ldr	r0, [pc, #68]	; (800b2c4 <I2C_ByteRead+0x70>)
 800b27e:	f002 fc23 	bl	800dac8 <HAL_I2C_Mem_Read>
 800b282:	4603      	mov	r3, r0
 800b284:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b286:	4b0f      	ldr	r3, [pc, #60]	; (800b2c4 <I2C_ByteRead+0x70>)
 800b288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28a:	613b      	str	r3, [r7, #16]
  while(state)
 800b28c:	e012      	b.n	800b2b4 <I2C_ByteRead+0x60>
  {
  	logPrintf("MPU9250_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 800b28e:	7dfb      	ldrb	r3, [r7, #23]
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	4619      	mov	r1, r3
 800b294:	480c      	ldr	r0, [pc, #48]	; (800b2c8 <I2C_ByteRead+0x74>)
 800b296:	f006 fb4b 	bl	8011930 <iprintf>
    while (Error.error !=0)
 800b29a:	e007      	b.n	800b2ac <I2C_ByteRead+0x58>
    {
      Error.error = 2;
 800b29c:	4b0b      	ldr	r3, [pc, #44]	; (800b2cc <I2C_ByteRead+0x78>)
 800b29e:	2202      	movs	r2, #2
 800b2a0:	701a      	strb	r2, [r3, #0]
      error_signal();
 800b2a2:	f7f8 fd5f 	bl	8003d64 <error_signal>
      HAL_Delay(4);
 800b2a6:	2004      	movs	r0, #4
 800b2a8:	f001 f95e 	bl	800c568 <HAL_Delay>
    while (Error.error !=0)
 800b2ac:	4b07      	ldr	r3, [pc, #28]	; (800b2cc <I2C_ByteRead+0x78>)
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1f3      	bne.n	800b29c <I2C_ByteRead+0x48>
  while(state)
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1e9      	bne.n	800b28e <I2C_ByteRead+0x3a>
    }
  }
  return true;
 800b2ba:	2301      	movs	r3, #1
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3718      	adds	r7, #24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	200012bc 	.word	0x200012bc
 800b2c8:	08019994 	.word	0x08019994
 800b2cc:	20000acc 	.word	0x20000acc

0800b2d0 <I2C_ByteWrite_HAL>:

bool I2C_ByteWrite_HAL(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08a      	sub	sp, #40	; 0x28
 800b2d4:	af04      	add	r7, sp, #16
 800b2d6:	607b      	str	r3, [r7, #4]
 800b2d8:	4603      	mov	r3, r0
 800b2da:	81fb      	strh	r3, [r7, #14]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	81bb      	strh	r3, [r7, #12]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;
  state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 800b2e4:	8978      	ldrh	r0, [r7, #10]
 800b2e6:	89ba      	ldrh	r2, [r7, #12]
 800b2e8:	89f9      	ldrh	r1, [r7, #14]
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	9302      	str	r3, [sp, #8]
 800b2ee:	8c3b      	ldrh	r3, [r7, #32]
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	4811      	ldr	r0, [pc, #68]	; (800b340 <I2C_ByteWrite_HAL+0x70>)
 800b2fa:	f002 faeb 	bl	800d8d4 <HAL_I2C_Mem_Write>
 800b2fe:	4603      	mov	r3, r0
 800b300:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b302:	4b0f      	ldr	r3, [pc, #60]	; (800b340 <I2C_ByteWrite_HAL+0x70>)
 800b304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b306:	613b      	str	r3, [r7, #16]
  while(state)
 800b308:	e012      	b.n	800b330 <I2C_ByteWrite_HAL+0x60>
  {
  	logPrintf("MPU9250_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 800b30a:	7dfb      	ldrb	r3, [r7, #23]
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	4619      	mov	r1, r3
 800b310:	480c      	ldr	r0, [pc, #48]	; (800b344 <I2C_ByteWrite_HAL+0x74>)
 800b312:	f006 fb0d 	bl	8011930 <iprintf>
    while (Error.error !=0)
 800b316:	e007      	b.n	800b328 <I2C_ByteWrite_HAL+0x58>
    {
      Error.error = 2;
 800b318:	4b0b      	ldr	r3, [pc, #44]	; (800b348 <I2C_ByteWrite_HAL+0x78>)
 800b31a:	2202      	movs	r2, #2
 800b31c:	701a      	strb	r2, [r3, #0]
      error_signal();
 800b31e:	f7f8 fd21 	bl	8003d64 <error_signal>
      HAL_Delay(4);
 800b322:	2004      	movs	r0, #4
 800b324:	f001 f920 	bl	800c568 <HAL_Delay>
    while (Error.error !=0)
 800b328:	4b07      	ldr	r3, [pc, #28]	; (800b348 <I2C_ByteWrite_HAL+0x78>)
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1f3      	bne.n	800b318 <I2C_ByteWrite_HAL+0x48>
  while(state)
 800b330:	7dfb      	ldrb	r3, [r7, #23]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1e9      	bne.n	800b30a <I2C_ByteWrite_HAL+0x3a>
    }
  }
  return true;
 800b336:	2301      	movs	r3, #1
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	200012bc 	.word	0x200012bc
 800b344:	080199b4 	.word	0x080199b4
 800b348:	20000acc 	.word	0x20000acc

0800b34c <I2C_Write>:
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1000);
	*data = tmp & (1 << bitNum);
}

void I2C_Write(uint16_t DevAddress, uint8_t data, uint16_t Size)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af02      	add	r7, sp, #8
 800b352:	4603      	mov	r3, r0
 800b354:	80fb      	strh	r3, [r7, #6]
 800b356:	460b      	mov	r3, r1
 800b358:	717b      	strb	r3, [r7, #5]
 800b35a:	4613      	mov	r3, r2
 800b35c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 800b35e:	4818      	ldr	r0, [pc, #96]	; (800b3c0 <I2C_Write+0x74>)
 800b360:	f002 fe14 	bl	800df8c <HAL_I2C_GetState>
 800b364:	4603      	mov	r3, r0
 800b366:	2b20      	cmp	r3, #32
 800b368:	d125      	bne.n	800b3b6 <I2C_Write+0x6a>

  state = HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1000);
 800b36a:	8878      	ldrh	r0, [r7, #2]
 800b36c:	1d7a      	adds	r2, r7, #5
 800b36e:	88f9      	ldrh	r1, [r7, #6]
 800b370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	4603      	mov	r3, r0
 800b378:	4811      	ldr	r0, [pc, #68]	; (800b3c0 <I2C_Write+0x74>)
 800b37a:	f001 ff53 	bl	800d224 <HAL_I2C_Master_Transmit>
 800b37e:	4603      	mov	r3, r0
 800b380:	73fb      	strb	r3, [r7, #15]
  ErrorCode = hi2c2.ErrorCode;
 800b382:	4b0f      	ldr	r3, [pc, #60]	; (800b3c0 <I2C_Write+0x74>)
 800b384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b386:	60bb      	str	r3, [r7, #8]
   while(state)
 800b388:	e012      	b.n	800b3b0 <I2C_Write+0x64>
   {
  	 logPrintf("MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	4619      	mov	r1, r3
 800b390:	480c      	ldr	r0, [pc, #48]	; (800b3c4 <I2C_Write+0x78>)
 800b392:	f006 facd 	bl	8011930 <iprintf>
     while (Error.error !=0)
 800b396:	e007      	b.n	800b3a8 <I2C_Write+0x5c>
     {
       Error.error = 2;
 800b398:	4b0b      	ldr	r3, [pc, #44]	; (800b3c8 <I2C_Write+0x7c>)
 800b39a:	2202      	movs	r2, #2
 800b39c:	701a      	strb	r2, [r3, #0]
       error_signal();
 800b39e:	f7f8 fce1 	bl	8003d64 <error_signal>
       HAL_Delay(4);
 800b3a2:	2004      	movs	r0, #4
 800b3a4:	f001 f8e0 	bl	800c568 <HAL_Delay>
     while (Error.error !=0)
 800b3a8:	4b07      	ldr	r3, [pc, #28]	; (800b3c8 <I2C_Write+0x7c>)
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1f3      	bne.n	800b398 <I2C_Write+0x4c>
   while(state)
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1e9      	bne.n	800b38a <I2C_Write+0x3e>
     }
   }
  }
}
 800b3b6:	bf00      	nop
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	200012bc 	.word	0x200012bc
 800b3c4:	080199d4 	.word	0x080199d4
 800b3c8:	20000acc 	.word	0x20000acc

0800b3cc <I2C_Read>:

void I2C_Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af02      	add	r7, sp, #8
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	6039      	str	r1, [r7, #0]
 800b3d6:	80fb      	strh	r3, [r7, #6]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 800b3dc:	4817      	ldr	r0, [pc, #92]	; (800b43c <I2C_Read+0x70>)
 800b3de:	f002 fdd5 	bl	800df8c <HAL_I2C_GetState>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b20      	cmp	r3, #32
 800b3e6:	d125      	bne.n	800b434 <I2C_Read+0x68>

  state = HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1000);
 800b3e8:	88ba      	ldrh	r2, [r7, #4]
 800b3ea:	88f9      	ldrh	r1, [r7, #6]
 800b3ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	683a      	ldr	r2, [r7, #0]
 800b3f6:	4811      	ldr	r0, [pc, #68]	; (800b43c <I2C_Read+0x70>)
 800b3f8:	f002 f812 	bl	800d420 <HAL_I2C_Master_Receive>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73fb      	strb	r3, [r7, #15]
  ErrorCode = hi2c2.ErrorCode;
 800b400:	4b0e      	ldr	r3, [pc, #56]	; (800b43c <I2C_Read+0x70>)
 800b402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b404:	60bb      	str	r3, [r7, #8]
    while(state)
 800b406:	e012      	b.n	800b42e <I2C_Read+0x62>
    {
    	logPrintf("MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	4619      	mov	r1, r3
 800b40e:	480c      	ldr	r0, [pc, #48]	; (800b440 <I2C_Read+0x74>)
 800b410:	f006 fa8e 	bl	8011930 <iprintf>
      while (Error.error !=0)
 800b414:	e007      	b.n	800b426 <I2C_Read+0x5a>
      {
        Error.error = 3;
 800b416:	4b0b      	ldr	r3, [pc, #44]	; (800b444 <I2C_Read+0x78>)
 800b418:	2203      	movs	r2, #3
 800b41a:	701a      	strb	r2, [r3, #0]
        error_signal();
 800b41c:	f7f8 fca2 	bl	8003d64 <error_signal>
        HAL_Delay(4);
 800b420:	2004      	movs	r0, #4
 800b422:	f001 f8a1 	bl	800c568 <HAL_Delay>
      while (Error.error !=0)
 800b426:	4b07      	ldr	r3, [pc, #28]	; (800b444 <I2C_Read+0x78>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1f3      	bne.n	800b416 <I2C_Read+0x4a>
    while(state)
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1e9      	bne.n	800b408 <I2C_Read+0x3c>
      }
    }
  }
}
 800b434:	bf00      	nop
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	200012bc 	.word	0x200012bc
 800b440:	080199d4 	.word	0x080199d4
 800b444:	20000acc 	.word	0x20000acc

0800b448 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b088      	sub	sp, #32
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b450:	f107 0310 	add.w	r3, r7, #16
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	605a      	str	r2, [r3, #4]
 800b45a:	609a      	str	r2, [r3, #8]
 800b45c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a16      	ldr	r2, [pc, #88]	; (800b4bc <HAL_I2C_MspInit+0x74>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d124      	bne.n	800b4b2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b468:	4b15      	ldr	r3, [pc, #84]	; (800b4c0 <HAL_I2C_MspInit+0x78>)
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	4a14      	ldr	r2, [pc, #80]	; (800b4c0 <HAL_I2C_MspInit+0x78>)
 800b46e:	f043 0308 	orr.w	r3, r3, #8
 800b472:	6193      	str	r3, [r2, #24]
 800b474:	4b12      	ldr	r3, [pc, #72]	; (800b4c0 <HAL_I2C_MspInit+0x78>)
 800b476:	699b      	ldr	r3, [r3, #24]
 800b478:	f003 0308 	and.w	r3, r3, #8
 800b47c:	60fb      	str	r3, [r7, #12]
 800b47e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b480:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b484:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b486:	2312      	movs	r3, #18
 800b488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b48a:	2303      	movs	r3, #3
 800b48c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b48e:	f107 0310 	add.w	r3, r7, #16
 800b492:	4619      	mov	r1, r3
 800b494:	480b      	ldr	r0, [pc, #44]	; (800b4c4 <HAL_I2C_MspInit+0x7c>)
 800b496:	f001 fc01 	bl	800cc9c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b49a:	4b09      	ldr	r3, [pc, #36]	; (800b4c0 <HAL_I2C_MspInit+0x78>)
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	4a08      	ldr	r2, [pc, #32]	; (800b4c0 <HAL_I2C_MspInit+0x78>)
 800b4a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b4a4:	61d3      	str	r3, [r2, #28]
 800b4a6:	4b06      	ldr	r3, [pc, #24]	; (800b4c0 <HAL_I2C_MspInit+0x78>)
 800b4a8:	69db      	ldr	r3, [r3, #28]
 800b4aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4ae:	60bb      	str	r3, [r7, #8]
 800b4b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b4b2:	bf00      	nop
 800b4b4:	3720      	adds	r7, #32
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	40005800 	.word	0x40005800
 800b4c0:	40021000 	.word	0x40021000
 800b4c4:	40010c00 	.word	0x40010c00

0800b4c8 <ledInit>:
#ifdef _USE_HW_CLI
static void cliLed(cli_args_t *args);
#endif

bool ledInit(void)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af00      	add	r7, sp, #0
  bool ret = true;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4d2:	f107 0308 	add.w	r3, r7, #8
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	601a      	str	r2, [r3, #0]
 800b4da:	605a      	str	r2, [r3, #4]
 800b4dc:	609a      	str	r2, [r3, #8]
 800b4de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4e0:	4b1b      	ldr	r3, [pc, #108]	; (800b550 <ledInit+0x88>)
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	4a1a      	ldr	r2, [pc, #104]	; (800b550 <ledInit+0x88>)
 800b4e6:	f043 0308 	orr.w	r3, r3, #8
 800b4ea:	6193      	str	r3, [r2, #24]
 800b4ec:	4b18      	ldr	r3, [pc, #96]	; (800b550 <ledInit+0x88>)
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	f003 0308 	and.w	r3, r3, #8
 800b4f4:	607b      	str	r3, [r7, #4]
 800b4f6:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b500:	2303      	movs	r3, #3
 800b502:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 800b504:	2300      	movs	r3, #0
 800b506:	61fb      	str	r3, [r7, #28]
 800b508:	e00f      	b.n	800b52a <ledInit+0x62>
  {
    GPIO_InitStruct.Pin |= led_tbl[i].pin;
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	4911      	ldr	r1, [pc, #68]	; (800b554 <ledInit+0x8c>)
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	00db      	lsls	r3, r3, #3
 800b512:	440b      	add	r3, r1
 800b514:	889b      	ldrh	r3, [r3, #4]
 800b516:	4313      	orrs	r3, r2
 800b518:	60bb      	str	r3, [r7, #8]
    ledOff(i);
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 f840 	bl	800b5a4 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	3301      	adds	r3, #1
 800b528:	61fb      	str	r3, [r7, #28]
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	ddec      	ble.n	800b50a <ledInit+0x42>
  }

   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b530:	f107 0308 	add.w	r3, r7, #8
 800b534:	4619      	mov	r1, r3
 800b536:	4808      	ldr	r0, [pc, #32]	; (800b558 <ledInit+0x90>)
 800b538:	f001 fbb0 	bl	800cc9c <HAL_GPIO_Init>

	#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 800b53c:	4907      	ldr	r1, [pc, #28]	; (800b55c <ledInit+0x94>)
 800b53e:	4808      	ldr	r0, [pc, #32]	; (800b560 <ledInit+0x98>)
 800b540:	f7ff fca8 	bl	800ae94 <cliAdd>
	#endif

  return ret;
 800b544:	7efb      	ldrb	r3, [r7, #27]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3720      	adds	r7, #32
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	40021000 	.word	0x40021000
 800b554:	20000030 	.word	0x20000030
 800b558:	40010c00 	.word	0x40010c00
 800b55c:	0800b61d 	.word	0x0800b61d
 800b560:	080199f0 	.word	0x080199f0

0800b564 <ledOn>:

void ledOn(uint8_t ch)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	4603      	mov	r3, r0
 800b56c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	2b04      	cmp	r3, #4
 800b572:	d811      	bhi.n	800b598 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 800b574:	79fb      	ldrb	r3, [r7, #7]
 800b576:	4a0a      	ldr	r2, [pc, #40]	; (800b5a0 <ledOn+0x3c>)
 800b578:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b57c:	79fb      	ldrb	r3, [r7, #7]
 800b57e:	4a08      	ldr	r2, [pc, #32]	; (800b5a0 <ledOn+0x3c>)
 800b580:	00db      	lsls	r3, r3, #3
 800b582:	4413      	add	r3, r2
 800b584:	8899      	ldrh	r1, [r3, #4]
 800b586:	79fb      	ldrb	r3, [r7, #7]
 800b588:	4a05      	ldr	r2, [pc, #20]	; (800b5a0 <ledOn+0x3c>)
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	4413      	add	r3, r2
 800b58e:	799b      	ldrb	r3, [r3, #6]
 800b590:	461a      	mov	r2, r3
 800b592:	f001 fcdd 	bl	800cf50 <HAL_GPIO_WritePin>
 800b596:	e000      	b.n	800b59a <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 800b598:	bf00      	nop
}
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	20000030 	.word	0x20000030

0800b5a4 <ledOff>:

void ledOff(uint8_t ch)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800b5ae:	79fb      	ldrb	r3, [r7, #7]
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	d811      	bhi.n	800b5d8 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800b5b4:	79fb      	ldrb	r3, [r7, #7]
 800b5b6:	4a0a      	ldr	r2, [pc, #40]	; (800b5e0 <ledOff+0x3c>)
 800b5b8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b5bc:	79fb      	ldrb	r3, [r7, #7]
 800b5be:	4a08      	ldr	r2, [pc, #32]	; (800b5e0 <ledOff+0x3c>)
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	4413      	add	r3, r2
 800b5c4:	8899      	ldrh	r1, [r3, #4]
 800b5c6:	79fb      	ldrb	r3, [r7, #7]
 800b5c8:	4a05      	ldr	r2, [pc, #20]	; (800b5e0 <ledOff+0x3c>)
 800b5ca:	00db      	lsls	r3, r3, #3
 800b5cc:	4413      	add	r3, r2
 800b5ce:	79db      	ldrb	r3, [r3, #7]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	f001 fcbd 	bl	800cf50 <HAL_GPIO_WritePin>
 800b5d6:	e000      	b.n	800b5da <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 800b5d8:	bf00      	nop
}
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	20000030 	.word	0x20000030

0800b5e4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800b5ee:	79fb      	ldrb	r3, [r7, #7]
 800b5f0:	2b04      	cmp	r3, #4
 800b5f2:	d80c      	bhi.n	800b60e <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	4a08      	ldr	r2, [pc, #32]	; (800b618 <ledToggle+0x34>)
 800b5f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b5fc:	79fb      	ldrb	r3, [r7, #7]
 800b5fe:	4a06      	ldr	r2, [pc, #24]	; (800b618 <ledToggle+0x34>)
 800b600:	00db      	lsls	r3, r3, #3
 800b602:	4413      	add	r3, r2
 800b604:	889b      	ldrh	r3, [r3, #4]
 800b606:	4619      	mov	r1, r3
 800b608:	f001 fcba 	bl	800cf80 <HAL_GPIO_TogglePin>
 800b60c:	e000      	b.n	800b610 <ledToggle+0x2c>
  if (ch >= LED_MAX_CH) return;
 800b60e:	bf00      	nop
}
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	20000030 	.word	0x20000030

0800b61c <cliLed>:

#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800b624:	2300      	movs	r3, #0
 800b626:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	881b      	ldrh	r3, [r3, #0]
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d133      	bne.n	800b698 <cliLed+0x7c>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	491f      	ldr	r1, [pc, #124]	; (800b6b4 <cliLed+0x98>)
 800b636:	2000      	movs	r0, #0
 800b638:	4798      	blx	r3
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d02b      	beq.n	800b698 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = args->getData(1);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	2001      	movs	r0, #1
 800b646:	4798      	blx	r3
 800b648:	4603      	mov	r3, r0
 800b64a:	75bb      	strb	r3, [r7, #22]
    toggle_time = args->getData(2);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	2002      	movs	r0, #2
 800b652:	4798      	blx	r3
 800b654:	4603      	mov	r3, r0
 800b656:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 800b658:	7dbb      	ldrb	r3, [r7, #22]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d002      	beq.n	800b664 <cliLed+0x48>
    {
      led_ch--;
 800b65e:	7dbb      	ldrb	r3, [r7, #22]
 800b660:	3b01      	subs	r3, #1
 800b662:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 800b664:	f7f5 ff2a 	bl	80014bc <millis>
 800b668:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800b66a:	e00e      	b.n	800b68a <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 800b66c:	f7f5 ff26 	bl	80014bc <millis>
 800b670:	4602      	mov	r2, r0
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d806      	bhi.n	800b68a <cliLed+0x6e>
      {
        pre_time = millis();
 800b67c:	f7f5 ff1e 	bl	80014bc <millis>
 800b680:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 800b682:	7dbb      	ldrb	r3, [r7, #22]
 800b684:	4618      	mov	r0, r3
 800b686:	f7ff ffad 	bl	800b5e4 <ledToggle>
    while(cliKeepLoop())
 800b68a:	f7ff fbed 	bl	800ae68 <cliKeepLoop>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1eb      	bne.n	800b66c <cliLed+0x50>
      }
    }
    ret = true;
 800b694:	2301      	movs	r3, #1
 800b696:	75fb      	strb	r3, [r7, #23]
  }



  if (ret != true)
 800b698:	7dfb      	ldrb	r3, [r7, #23]
 800b69a:	f083 0301 	eor.w	r3, r3, #1
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time(ms)\n", LED_MAX_CH);
 800b6a4:	2105      	movs	r1, #5
 800b6a6:	4804      	ldr	r0, [pc, #16]	; (800b6b8 <cliLed+0x9c>)
 800b6a8:	f7ff faea 	bl	800ac80 <cliPrintf>
  }
}
 800b6ac:	bf00      	nop
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	080199f4 	.word	0x080199f4
 800b6b8:	080199fc 	.word	0x080199fc

0800b6bc <timerInit>:
TIM_HandleTypeDef htim4;

static void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

bool timerInit(void)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b092      	sub	sp, #72	; 0x48
 800b6c0:	af00      	add	r7, sp, #0
	bool ret = true;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	//time4 init

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b6c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	601a      	str	r2, [r3, #0]
 800b6d0:	605a      	str	r2, [r3, #4]
 800b6d2:	609a      	str	r2, [r3, #8]
 800b6d4:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b6d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b6da:	2200      	movs	r2, #0
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800b6e0:	f107 0310 	add.w	r3, r7, #16
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	605a      	str	r2, [r3, #4]
 800b6ea:	609a      	str	r2, [r3, #8]
 800b6ec:	60da      	str	r2, [r3, #12]
 800b6ee:	611a      	str	r2, [r3, #16]
 800b6f0:	615a      	str	r2, [r3, #20]
 800b6f2:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 800b6f4:	4bb3      	ldr	r3, [pc, #716]	; (800b9c4 <timerInit+0x308>)
 800b6f6:	4ab4      	ldr	r2, [pc, #720]	; (800b9c8 <timerInit+0x30c>)
 800b6f8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72-1;
 800b6fa:	4bb2      	ldr	r3, [pc, #712]	; (800b9c4 <timerInit+0x308>)
 800b6fc:	2247      	movs	r2, #71	; 0x47
 800b6fe:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b700:	4bb0      	ldr	r3, [pc, #704]	; (800b9c4 <timerInit+0x308>)
 800b702:	2200      	movs	r2, #0
 800b704:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 2000-1; //500hz
 800b706:	4baf      	ldr	r3, [pc, #700]	; (800b9c4 <timerInit+0x308>)
 800b708:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800b70c:	60da      	str	r2, [r3, #12]
#ifdef MOTOR_ESC
	htim4.Init.Period = 2041-1;//490hz
 800b70e:	4bad      	ldr	r3, [pc, #692]	; (800b9c4 <timerInit+0x308>)
 800b710:	f44f 62ff 	mov.w	r2, #2040	; 0x7f8
 800b714:	60da      	str	r2, [r3, #12]
#endif
#ifdef MOTOR_ESC_OneShot125
	htim4.Init.Prescaler = 3; //4khz
 800b716:	4bab      	ldr	r3, [pc, #684]	; (800b9c4 <timerInit+0x308>)
 800b718:	2203      	movs	r2, #3
 800b71a:	605a      	str	r2, [r3, #4]
	htim4.Init.Period = 4500-1;
 800b71c:	4ba9      	ldr	r3, [pc, #676]	; (800b9c4 <timerInit+0x308>)
 800b71e:	f241 1293 	movw	r2, #4499	; 0x1193
 800b722:	60da      	str	r2, [r3, #12]
#endif
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b724:	4ba7      	ldr	r3, [pc, #668]	; (800b9c4 <timerInit+0x308>)
 800b726:	2200      	movs	r2, #0
 800b728:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b72a:	4ba6      	ldr	r3, [pc, #664]	; (800b9c4 <timerInit+0x308>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b730:	48a4      	ldr	r0, [pc, #656]	; (800b9c4 <timerInit+0x308>)
 800b732:	f003 fcff 	bl	800f134 <HAL_TIM_Base_Init>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d001      	beq.n	800b740 <timerInit+0x84>
	{
		Error_Handler();
 800b73c:	f7f5 ff3c 	bl	80015b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b744:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b74a:	4619      	mov	r1, r3
 800b74c:	489d      	ldr	r0, [pc, #628]	; (800b9c4 <timerInit+0x308>)
 800b74e:	f004 f9eb 	bl	800fb28 <HAL_TIM_ConfigClockSource>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d001      	beq.n	800b75c <timerInit+0xa0>
	{
		Error_Handler();
 800b758:	f7f5 ff2e 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800b75c:	4899      	ldr	r0, [pc, #612]	; (800b9c4 <timerInit+0x308>)
 800b75e:	f003 fd38 	bl	800f1d2 <HAL_TIM_PWM_Init>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <timerInit+0xb0>
	{
		Error_Handler();
 800b768:	f7f5 ff26 	bl	80015b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b76c:	2300      	movs	r3, #0
 800b76e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b770:	2300      	movs	r3, #0
 800b772:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b778:	4619      	mov	r1, r3
 800b77a:	4892      	ldr	r0, [pc, #584]	; (800b9c4 <timerInit+0x308>)
 800b77c:	f004 fe62 	bl	8010444 <HAL_TIMEx_MasterConfigSynchronization>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <timerInit+0xce>
	{
		Error_Handler();
 800b786:	f7f5 ff17 	bl	80015b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b78a:	2360      	movs	r3, #96	; 0x60
 800b78c:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	617b      	str	r3, [r7, #20]
#ifdef MOTOR_ESC
	sConfigOC.Pulse = 1000;
 800b792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b796:	617b      	str	r3, [r7, #20]
#endif
#ifdef MOTOR_ESC_OneShot125
	sConfigOC.Pulse = 2250;
 800b798:	f640 03ca 	movw	r3, #2250	; 0x8ca
 800b79c:	617b      	str	r3, [r7, #20]
#endif
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b7a6:	f107 0310 	add.w	r3, r7, #16
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4885      	ldr	r0, [pc, #532]	; (800b9c4 <timerInit+0x308>)
 800b7b0:	f004 f8fc 	bl	800f9ac <HAL_TIM_PWM_ConfigChannel>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <timerInit+0x102>
	{
		Error_Handler();
 800b7ba:	f7f5 fefd 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b7be:	f107 0310 	add.w	r3, r7, #16
 800b7c2:	2204      	movs	r2, #4
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	487f      	ldr	r0, [pc, #508]	; (800b9c4 <timerInit+0x308>)
 800b7c8:	f004 f8f0 	bl	800f9ac <HAL_TIM_PWM_ConfigChannel>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d001      	beq.n	800b7d6 <timerInit+0x11a>
	{
		Error_Handler();
 800b7d2:	f7f5 fef1 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b7d6:	f107 0310 	add.w	r3, r7, #16
 800b7da:	2208      	movs	r2, #8
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4879      	ldr	r0, [pc, #484]	; (800b9c4 <timerInit+0x308>)
 800b7e0:	f004 f8e4 	bl	800f9ac <HAL_TIM_PWM_ConfigChannel>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <timerInit+0x132>
	{
		Error_Handler();
 800b7ea:	f7f5 fee5 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b7ee:	f107 0310 	add.w	r3, r7, #16
 800b7f2:	220c      	movs	r2, #12
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	4873      	ldr	r0, [pc, #460]	; (800b9c4 <timerInit+0x308>)
 800b7f8:	f004 f8d8 	bl	800f9ac <HAL_TIM_PWM_ConfigChannel>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <timerInit+0x14a>
	{
		Error_Handler();
 800b802:	f7f5 fed9 	bl	80015b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800b806:	2100      	movs	r1, #0
 800b808:	486e      	ldr	r0, [pc, #440]	; (800b9c4 <timerInit+0x308>)
 800b80a:	f003 fd3b 	bl	800f284 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800b80e:	2104      	movs	r1, #4
 800b810:	486c      	ldr	r0, [pc, #432]	; (800b9c4 <timerInit+0x308>)
 800b812:	f003 fd37 	bl	800f284 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800b816:	2108      	movs	r1, #8
 800b818:	486a      	ldr	r0, [pc, #424]	; (800b9c4 <timerInit+0x308>)
 800b81a:	f003 fd33 	bl	800f284 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800b81e:	210c      	movs	r1, #12
 800b820:	4868      	ldr	r0, [pc, #416]	; (800b9c4 <timerInit+0x308>)
 800b822:	f003 fd2f 	bl	800f284 <HAL_TIM_PWM_Start>
	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800b826:	4867      	ldr	r0, [pc, #412]	; (800b9c4 <timerInit+0x308>)
 800b828:	f000 f98e 	bl	800bb48 <HAL_TIM_MspPostInit>


	//TIM2 Init
	TIM_IC_InitTypeDef sConfigIC = {0};
 800b82c:	463b      	mov	r3, r7
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]
 800b832:	605a      	str	r2, [r3, #4]
 800b834:	609a      	str	r2, [r3, #8]
 800b836:	60da      	str	r2, [r3, #12]

	htim2.Instance = TIM2;
 800b838:	4b64      	ldr	r3, [pc, #400]	; (800b9cc <timerInit+0x310>)
 800b83a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b83e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72-1;
 800b840:	4b62      	ldr	r3, [pc, #392]	; (800b9cc <timerInit+0x310>)
 800b842:	2247      	movs	r2, #71	; 0x47
 800b844:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b846:	4b61      	ldr	r3, [pc, #388]	; (800b9cc <timerInit+0x310>)
 800b848:	2200      	movs	r2, #0
 800b84a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFF;
 800b84c:	4b5f      	ldr	r3, [pc, #380]	; (800b9cc <timerInit+0x310>)
 800b84e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b852:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b854:	4b5d      	ldr	r3, [pc, #372]	; (800b9cc <timerInit+0x310>)
 800b856:	2200      	movs	r2, #0
 800b858:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b85a:	4b5c      	ldr	r3, [pc, #368]	; (800b9cc <timerInit+0x310>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800b860:	485a      	ldr	r0, [pc, #360]	; (800b9cc <timerInit+0x310>)
 800b862:	f003 fdb1 	bl	800f3c8 <HAL_TIM_IC_Init>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <timerInit+0x1b4>
	{
		Error_Handler();
 800b86c:	f7f5 fea4 	bl	80015b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b870:	2300      	movs	r3, #0
 800b872:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b874:	2300      	movs	r3, #0
 800b876:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b87c:	4619      	mov	r1, r3
 800b87e:	4853      	ldr	r0, [pc, #332]	; (800b9cc <timerInit+0x310>)
 800b880:	f004 fde0 	bl	8010444 <HAL_TIMEx_MasterConfigSynchronization>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <timerInit+0x1d2>
	{
		Error_Handler();
 800b88a:	f7f5 fe95 	bl	80015b8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800b88e:	2300      	movs	r3, #0
 800b890:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b892:	2301      	movs	r3, #1
 800b894:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b896:	2300      	movs	r3, #0
 800b898:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800b89e:	463b      	mov	r3, r7
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4849      	ldr	r0, [pc, #292]	; (800b9cc <timerInit+0x310>)
 800b8a6:	f003 ffed 	bl	800f884 <HAL_TIM_IC_ConfigChannel>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <timerInit+0x1f8>
	{
		Error_Handler();
 800b8b0:	f7f5 fe82 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800b8b4:	463b      	mov	r3, r7
 800b8b6:	2204      	movs	r2, #4
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	4844      	ldr	r0, [pc, #272]	; (800b9cc <timerInit+0x310>)
 800b8bc:	f003 ffe2 	bl	800f884 <HAL_TIM_IC_ConfigChannel>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <timerInit+0x20e>
	{
		Error_Handler();
 800b8c6:	f7f5 fe77 	bl	80015b8 <Error_Handler>
	}

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	483f      	ldr	r0, [pc, #252]	; (800b9cc <timerInit+0x310>)
 800b8ce:	f003 fdcb 	bl	800f468 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800b8d2:	2104      	movs	r1, #4
 800b8d4:	483d      	ldr	r0, [pc, #244]	; (800b9cc <timerInit+0x310>)
 800b8d6:	f003 fdc7 	bl	800f468 <HAL_TIM_IC_Start_IT>


	//timer3 init

	htim3.Instance = TIM3;
 800b8da:	4b3d      	ldr	r3, [pc, #244]	; (800b9d0 <timerInit+0x314>)
 800b8dc:	4a3d      	ldr	r2, [pc, #244]	; (800b9d4 <timerInit+0x318>)
 800b8de:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72-1;
 800b8e0:	4b3b      	ldr	r3, [pc, #236]	; (800b9d0 <timerInit+0x314>)
 800b8e2:	2247      	movs	r2, #71	; 0x47
 800b8e4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b8e6:	4b3a      	ldr	r3, [pc, #232]	; (800b9d0 <timerInit+0x314>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800b8ec:	4b38      	ldr	r3, [pc, #224]	; (800b9d0 <timerInit+0x314>)
 800b8ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8f2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b8f4:	4b36      	ldr	r3, [pc, #216]	; (800b9d0 <timerInit+0x314>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b8fa:	4b35      	ldr	r3, [pc, #212]	; (800b9d0 <timerInit+0x314>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800b900:	4833      	ldr	r0, [pc, #204]	; (800b9d0 <timerInit+0x314>)
 800b902:	f003 fd61 	bl	800f3c8 <HAL_TIM_IC_Init>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <timerInit+0x254>
	{
		Error_Handler();
 800b90c:	f7f5 fe54 	bl	80015b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b910:	2300      	movs	r3, #0
 800b912:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b914:	2300      	movs	r3, #0
 800b916:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b91c:	4619      	mov	r1, r3
 800b91e:	482c      	ldr	r0, [pc, #176]	; (800b9d0 <timerInit+0x314>)
 800b920:	f004 fd90 	bl	8010444 <HAL_TIMEx_MasterConfigSynchronization>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <timerInit+0x272>
	{
		Error_Handler();
 800b92a:	f7f5 fe45 	bl	80015b8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800b92e:	2300      	movs	r3, #0
 800b930:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b932:	2301      	movs	r3, #1
 800b934:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b936:	2300      	movs	r3, #0
 800b938:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800b93a:	2300      	movs	r3, #0
 800b93c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800b93e:	463b      	mov	r3, r7
 800b940:	2200      	movs	r2, #0
 800b942:	4619      	mov	r1, r3
 800b944:	4822      	ldr	r0, [pc, #136]	; (800b9d0 <timerInit+0x314>)
 800b946:	f003 ff9d 	bl	800f884 <HAL_TIM_IC_ConfigChannel>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <timerInit+0x298>
	{
		Error_Handler();
 800b950:	f7f5 fe32 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800b954:	463b      	mov	r3, r7
 800b956:	2204      	movs	r2, #4
 800b958:	4619      	mov	r1, r3
 800b95a:	481d      	ldr	r0, [pc, #116]	; (800b9d0 <timerInit+0x314>)
 800b95c:	f003 ff92 	bl	800f884 <HAL_TIM_IC_ConfigChannel>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <timerInit+0x2ae>
	{
		Error_Handler();
 800b966:	f7f5 fe27 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800b96a:	463b      	mov	r3, r7
 800b96c:	2208      	movs	r2, #8
 800b96e:	4619      	mov	r1, r3
 800b970:	4817      	ldr	r0, [pc, #92]	; (800b9d0 <timerInit+0x314>)
 800b972:	f003 ff87 	bl	800f884 <HAL_TIM_IC_ConfigChannel>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <timerInit+0x2c4>
	{
		Error_Handler();
 800b97c:	f7f5 fe1c 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800b980:	463b      	mov	r3, r7
 800b982:	220c      	movs	r2, #12
 800b984:	4619      	mov	r1, r3
 800b986:	4812      	ldr	r0, [pc, #72]	; (800b9d0 <timerInit+0x314>)
 800b988:	f003 ff7c 	bl	800f884 <HAL_TIM_IC_ConfigChannel>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <timerInit+0x2da>
	{
		Error_Handler();
 800b992:	f7f5 fe11 	bl	80015b8 <Error_Handler>
	}

	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800b996:	2100      	movs	r1, #0
 800b998:	480d      	ldr	r0, [pc, #52]	; (800b9d0 <timerInit+0x314>)
 800b99a:	f003 fd65 	bl	800f468 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800b99e:	2104      	movs	r1, #4
 800b9a0:	480b      	ldr	r0, [pc, #44]	; (800b9d0 <timerInit+0x314>)
 800b9a2:	f003 fd61 	bl	800f468 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 800b9a6:	2108      	movs	r1, #8
 800b9a8:	4809      	ldr	r0, [pc, #36]	; (800b9d0 <timerInit+0x314>)
 800b9aa:	f003 fd5d 	bl	800f468 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 800b9ae:	210c      	movs	r1, #12
 800b9b0:	4807      	ldr	r0, [pc, #28]	; (800b9d0 <timerInit+0x314>)
 800b9b2:	f003 fd59 	bl	800f468 <HAL_TIM_IC_Start_IT>

	return ret;
 800b9b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3748      	adds	r7, #72	; 0x48
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20001310 	.word	0x20001310
 800b9c8:	40000800 	.word	0x40000800
 800b9cc:	200013a0 	.word	0x200013a0
 800b9d0:	20001358 	.word	0x20001358
 800b9d4:	40000400 	.word	0x40000400

0800b9d8 <HAL_TIM_IC_MspInit>:


void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b08c      	sub	sp, #48	; 0x30
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9e0:	f107 0320 	add.w	r3, r7, #32
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	601a      	str	r2, [r3, #0]
 800b9e8:	605a      	str	r2, [r3, #4]
 800b9ea:	609a      	str	r2, [r3, #8]
 800b9ec:	60da      	str	r2, [r3, #12]
	if(tim_icHandle->Instance==TIM2)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9f6:	d12c      	bne.n	800ba52 <HAL_TIM_IC_MspInit+0x7a>
	{
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 800b9f8:	4b3c      	ldr	r3, [pc, #240]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800b9fa:	69db      	ldr	r3, [r3, #28]
 800b9fc:	4a3b      	ldr	r2, [pc, #236]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800b9fe:	f043 0301 	orr.w	r3, r3, #1
 800ba02:	61d3      	str	r3, [r2, #28]
 800ba04:	4b39      	ldr	r3, [pc, #228]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba06:	69db      	ldr	r3, [r3, #28]
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	61fb      	str	r3, [r7, #28]
 800ba0e:	69fb      	ldr	r3, [r7, #28]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800ba10:	4b36      	ldr	r3, [pc, #216]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	4a35      	ldr	r2, [pc, #212]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba16:	f043 0304 	orr.w	r3, r3, #4
 800ba1a:	6193      	str	r3, [r2, #24]
 800ba1c:	4b33      	ldr	r3, [pc, #204]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba1e:	699b      	ldr	r3, [r3, #24]
 800ba20:	f003 0304 	and.w	r3, r3, #4
 800ba24:	61bb      	str	r3, [r7, #24]
 800ba26:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP ------> TIM2_CH1
    PA1      ------> TIM2_CH2
    PA2      ------> TIM2_CH3  //UART2 reserved
    PA3      ------> TIM2_CH4  //UART2 reserved
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba34:	f107 0320 	add.w	r3, r7, #32
 800ba38:	4619      	mov	r1, r3
 800ba3a:	482d      	ldr	r0, [pc, #180]	; (800baf0 <HAL_TIM_IC_MspInit+0x118>)
 800ba3c:	f001 f92e 	bl	800cc9c <HAL_GPIO_Init>

		/* TIM2 interrupt Init */
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800ba40:	2200      	movs	r2, #0
 800ba42:	2100      	movs	r1, #0
 800ba44:	201c      	movs	r0, #28
 800ba46:	f000 fe88 	bl	800c75a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ba4a:	201c      	movs	r0, #28
 800ba4c:	f000 fea1 	bl	800c792 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 800ba50:	e048      	b.n	800bae4 <HAL_TIM_IC_MspInit+0x10c>
	else if(tim_icHandle->Instance==TIM3)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a27      	ldr	r2, [pc, #156]	; (800baf4 <HAL_TIM_IC_MspInit+0x11c>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d143      	bne.n	800bae4 <HAL_TIM_IC_MspInit+0x10c>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800ba5c:	4b23      	ldr	r3, [pc, #140]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba5e:	69db      	ldr	r3, [r3, #28]
 800ba60:	4a22      	ldr	r2, [pc, #136]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba62:	f043 0302 	orr.w	r3, r3, #2
 800ba66:	61d3      	str	r3, [r2, #28]
 800ba68:	4b20      	ldr	r3, [pc, #128]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba6a:	69db      	ldr	r3, [r3, #28]
 800ba6c:	f003 0302 	and.w	r3, r3, #2
 800ba70:	617b      	str	r3, [r7, #20]
 800ba72:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800ba74:	4b1d      	ldr	r3, [pc, #116]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba76:	699b      	ldr	r3, [r3, #24]
 800ba78:	4a1c      	ldr	r2, [pc, #112]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba7a:	f043 0304 	orr.w	r3, r3, #4
 800ba7e:	6193      	str	r3, [r2, #24]
 800ba80:	4b1a      	ldr	r3, [pc, #104]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	f003 0304 	and.w	r3, r3, #4
 800ba88:	613b      	str	r3, [r7, #16]
 800ba8a:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800ba8c:	4b17      	ldr	r3, [pc, #92]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	4a16      	ldr	r2, [pc, #88]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba92:	f043 0308 	orr.w	r3, r3, #8
 800ba96:	6193      	str	r3, [r2, #24]
 800ba98:	4b14      	ldr	r3, [pc, #80]	; (800baec <HAL_TIM_IC_MspInit+0x114>)
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	f003 0308 	and.w	r3, r3, #8
 800baa0:	60fb      	str	r3, [r7, #12]
 800baa2:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800baa4:	23c0      	movs	r3, #192	; 0xc0
 800baa6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800baa8:	2300      	movs	r3, #0
 800baaa:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baac:	2300      	movs	r3, #0
 800baae:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bab0:	f107 0320 	add.w	r3, r7, #32
 800bab4:	4619      	mov	r1, r3
 800bab6:	480e      	ldr	r0, [pc, #56]	; (800baf0 <HAL_TIM_IC_MspInit+0x118>)
 800bab8:	f001 f8f0 	bl	800cc9c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800babc:	2303      	movs	r3, #3
 800babe:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bac0:	2300      	movs	r3, #0
 800bac2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bac4:	2300      	movs	r3, #0
 800bac6:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bac8:	f107 0320 	add.w	r3, r7, #32
 800bacc:	4619      	mov	r1, r3
 800bace:	480a      	ldr	r0, [pc, #40]	; (800baf8 <HAL_TIM_IC_MspInit+0x120>)
 800bad0:	f001 f8e4 	bl	800cc9c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800bad4:	2200      	movs	r2, #0
 800bad6:	2100      	movs	r1, #0
 800bad8:	201d      	movs	r0, #29
 800bada:	f000 fe3e 	bl	800c75a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800bade:	201d      	movs	r0, #29
 800bae0:	f000 fe57 	bl	800c792 <HAL_NVIC_EnableIRQ>
}
 800bae4:	bf00      	nop
 800bae6:	3730      	adds	r7, #48	; 0x30
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	40021000 	.word	0x40021000
 800baf0:	40010800 	.word	0x40010800
 800baf4:	40000400 	.word	0x40000400
 800baf8:	40010c00 	.word	0x40010c00

0800bafc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]

	if(tim_baseHandle->Instance==TIM4)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a0d      	ldr	r2, [pc, #52]	; (800bb40 <HAL_TIM_Base_MspInit+0x44>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d113      	bne.n	800bb36 <HAL_TIM_Base_MspInit+0x3a>
	{
		/* USER CODE BEGIN TIM4_MspInit 0 */

		/* USER CODE END TIM4_MspInit 0 */
		/* TIM4 clock enable */
		__HAL_RCC_TIM4_CLK_ENABLE();
 800bb0e:	4b0d      	ldr	r3, [pc, #52]	; (800bb44 <HAL_TIM_Base_MspInit+0x48>)
 800bb10:	69db      	ldr	r3, [r3, #28]
 800bb12:	4a0c      	ldr	r2, [pc, #48]	; (800bb44 <HAL_TIM_Base_MspInit+0x48>)
 800bb14:	f043 0304 	orr.w	r3, r3, #4
 800bb18:	61d3      	str	r3, [r2, #28]
 800bb1a:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <HAL_TIM_Base_MspInit+0x48>)
 800bb1c:	69db      	ldr	r3, [r3, #28]
 800bb1e:	f003 0304 	and.w	r3, r3, #4
 800bb22:	60fb      	str	r3, [r7, #12]
 800bb24:	68fb      	ldr	r3, [r7, #12]

		/* TIM4 interrupt Init */
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800bb26:	2200      	movs	r2, #0
 800bb28:	2100      	movs	r1, #0
 800bb2a:	201e      	movs	r0, #30
 800bb2c:	f000 fe15 	bl	800c75a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800bb30:	201e      	movs	r0, #30
 800bb32:	f000 fe2e 	bl	800c792 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	}
}
 800bb36:	bf00      	nop
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	40000800 	.word	0x40000800
 800bb44:	40021000 	.word	0x40021000

0800bb48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb50:	f107 0310 	add.w	r3, r7, #16
 800bb54:	2200      	movs	r2, #0
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	605a      	str	r2, [r3, #4]
 800bb5a:	609a      	str	r2, [r3, #8]
 800bb5c:	60da      	str	r2, [r3, #12]
	if(timHandle->Instance==TIM4)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a10      	ldr	r2, [pc, #64]	; (800bba4 <HAL_TIM_MspPostInit+0x5c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d118      	bne.n	800bb9a <HAL_TIM_MspPostInit+0x52>
	{
		/* USER CODE BEGIN TIM4_MspPostInit 0 */

		/* USER CODE END TIM4_MspPostInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800bb68:	4b0f      	ldr	r3, [pc, #60]	; (800bba8 <HAL_TIM_MspPostInit+0x60>)
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	4a0e      	ldr	r2, [pc, #56]	; (800bba8 <HAL_TIM_MspPostInit+0x60>)
 800bb6e:	f043 0308 	orr.w	r3, r3, #8
 800bb72:	6193      	str	r3, [r2, #24]
 800bb74:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <HAL_TIM_MspPostInit+0x60>)
 800bb76:	699b      	ldr	r3, [r3, #24]
 800bb78:	f003 0308 	and.w	r3, r3, #8
 800bb7c:	60fb      	str	r3, [r7, #12]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800bb80:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bb84:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb86:	2302      	movs	r3, #2
 800bb88:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb8e:	f107 0310 	add.w	r3, r7, #16
 800bb92:	4619      	mov	r1, r3
 800bb94:	4805      	ldr	r0, [pc, #20]	; (800bbac <HAL_TIM_MspPostInit+0x64>)
 800bb96:	f001 f881 	bl	800cc9c <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM4_MspPostInit 1 */

		/* USER CODE END TIM4_MspPostInit 1 */
	}

}
 800bb9a:	bf00      	nop
 800bb9c:	3720      	adds	r7, #32
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	40000800 	.word	0x40000800
 800bba8:	40021000 	.word	0x40021000
 800bbac:	40010c00 	.word	0x40010c00

0800bbb0 <uartInit>:

static void MX_DMA_Init(void);


bool uartInit(void)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	607b      	str	r3, [r7, #4]
 800bbba:	e007      	b.n	800bbcc <uartInit+0x1c>
  {
    is_open[i] = false;
 800bbbc:	4a08      	ldr	r2, [pc, #32]	; (800bbe0 <uartInit+0x30>)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	607b      	str	r3, [r7, #4]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	ddf4      	ble.n	800bbbc <uartInit+0xc>
  }

  MX_DMA_Init();
 800bbd2:	f000 fbfd 	bl	800c3d0 <MX_DMA_Init>
  return true;
 800bbd6:	2301      	movs	r3, #1
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	2000078c 	.word	0x2000078c

0800bbe4 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	4603      	mov	r3, r0
 800bbec:	6039      	str	r1, [r7, #0]
 800bbee:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 800bbf4:	79fb      	ldrb	r3, [r7, #7]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d002      	beq.n	800bc00 <uartOpen+0x1c>
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d06c      	beq.n	800bcd8 <uartOpen+0xf4>
 800bbfe:	e0d7      	b.n	800bdb0 <uartOpen+0x1cc>
  {
    case _DEF_UART1:
    	huart1.Instance = USART1;
 800bc00:	4b6e      	ldr	r3, [pc, #440]	; (800bdbc <uartOpen+0x1d8>)
 800bc02:	4a6f      	ldr	r2, [pc, #444]	; (800bdc0 <uartOpen+0x1dc>)
 800bc04:	601a      	str	r2, [r3, #0]
    	huart1.Init.BaudRate = baud;
 800bc06:	4a6d      	ldr	r2, [pc, #436]	; (800bdbc <uartOpen+0x1d8>)
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	6053      	str	r3, [r2, #4]
    	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bc0c:	4b6b      	ldr	r3, [pc, #428]	; (800bdbc <uartOpen+0x1d8>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 800bc12:	4b6a      	ldr	r3, [pc, #424]	; (800bdbc <uartOpen+0x1d8>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	60da      	str	r2, [r3, #12]
    	huart1.Init.Parity = UART_PARITY_NONE;
 800bc18:	4b68      	ldr	r3, [pc, #416]	; (800bdbc <uartOpen+0x1d8>)
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	611a      	str	r2, [r3, #16]
    	huart1.Init.Mode = UART_MODE_TX_RX;
 800bc1e:	4b67      	ldr	r3, [pc, #412]	; (800bdbc <uartOpen+0x1d8>)
 800bc20:	220c      	movs	r2, #12
 800bc22:	615a      	str	r2, [r3, #20]
    	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bc24:	4b65      	ldr	r3, [pc, #404]	; (800bdbc <uartOpen+0x1d8>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	619a      	str	r2, [r3, #24]
    	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bc2a:	4b64      	ldr	r3, [pc, #400]	; (800bdbc <uartOpen+0x1d8>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	61da      	str	r2, [r3, #28]

    	QueueCreate(&ring_buffer[ch], &u1_rx_buf[0], MAX_SIZE);
 800bc30:	79fa      	ldrb	r2, [r7, #7]
 800bc32:	4613      	mov	r3, r2
 800bc34:	005b      	lsls	r3, r3, #1
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	4a62      	ldr	r2, [pc, #392]	; (800bdc4 <uartOpen+0x1e0>)
 800bc3c:	4413      	add	r3, r2
 800bc3e:	22ff      	movs	r2, #255	; 0xff
 800bc40:	4961      	ldr	r1, [pc, #388]	; (800bdc8 <uartOpen+0x1e4>)
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fa fa1e 	bl	8006084 <QueueCreate>

    	if (HAL_UART_Init(&huart1) != HAL_OK)
 800bc48:	485c      	ldr	r0, [pc, #368]	; (800bdbc <uartOpen+0x1d8>)
 800bc4a:	f004 fc6b 	bl	8010524 <HAL_UART_Init>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <uartOpen+0x76>
    	{
    	  Error_Handler();
 800bc54:	f7f5 fcb0 	bl	80015b8 <Error_Handler>
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart1_rx.Instance->CNDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
    	}
      break;
 800bc58:	e0aa      	b.n	800bdb0 <uartOpen+0x1cc>
    		ret = true;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 800bc5e:	79fb      	ldrb	r3, [r7, #7]
 800bc60:	4a5a      	ldr	r2, [pc, #360]	; (800bdcc <uartOpen+0x1e8>)
 800bc62:	2101      	movs	r1, #1
 800bc64:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&u1_rx_buf[0], MAX_SIZE) != HAL_OK)
 800bc66:	22ff      	movs	r2, #255	; 0xff
 800bc68:	4957      	ldr	r1, [pc, #348]	; (800bdc8 <uartOpen+0x1e4>)
 800bc6a:	4854      	ldr	r0, [pc, #336]	; (800bdbc <uartOpen+0x1d8>)
 800bc6c:	f004 fd7e 	bl	801076c <HAL_UART_Receive_DMA>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <uartOpen+0x96>
          ret = false;
 800bc76:	2300      	movs	r3, #0
 800bc78:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart1_rx.Instance->CNDTR;
 800bc7a:	79fa      	ldrb	r2, [r7, #7]
 800bc7c:	4951      	ldr	r1, [pc, #324]	; (800bdc4 <uartOpen+0x1e0>)
 800bc7e:	4613      	mov	r3, r2
 800bc80:	005b      	lsls	r3, r3, #1
 800bc82:	4413      	add	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	440b      	add	r3, r1
 800bc88:	3306      	adds	r3, #6
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	b2d9      	uxtb	r1, r3
 800bc8e:	4b50      	ldr	r3, [pc, #320]	; (800bdd0 <uartOpen+0x1ec>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	79fa      	ldrb	r2, [r7, #7]
 800bc98:	1acb      	subs	r3, r1, r3
 800bc9a:	b2d8      	uxtb	r0, r3
 800bc9c:	4949      	ldr	r1, [pc, #292]	; (800bdc4 <uartOpen+0x1e0>)
 800bc9e:	4613      	mov	r3, r2
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	4413      	add	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	440b      	add	r3, r1
 800bca8:	3304      	adds	r3, #4
 800bcaa:	4602      	mov	r2, r0
 800bcac:	701a      	strb	r2, [r3, #0]
        ring_buffer[ch].tail = ring_buffer[ch].head;
 800bcae:	79f9      	ldrb	r1, [r7, #7]
 800bcb0:	79fa      	ldrb	r2, [r7, #7]
 800bcb2:	4844      	ldr	r0, [pc, #272]	; (800bdc4 <uartOpen+0x1e0>)
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	440b      	add	r3, r1
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	4403      	add	r3, r0
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	b2d8      	uxtb	r0, r3
 800bcc4:	493f      	ldr	r1, [pc, #252]	; (800bdc4 <uartOpen+0x1e0>)
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	005b      	lsls	r3, r3, #1
 800bcca:	4413      	add	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	440b      	add	r3, r1
 800bcd0:	3305      	adds	r3, #5
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	701a      	strb	r2, [r3, #0]
      break;
 800bcd6:	e06b      	b.n	800bdb0 <uartOpen+0x1cc>

    case _DEF_UART2:
      huart2.Instance = USART2;
 800bcd8:	4b3e      	ldr	r3, [pc, #248]	; (800bdd4 <uartOpen+0x1f0>)
 800bcda:	4a3f      	ldr	r2, [pc, #252]	; (800bdd8 <uartOpen+0x1f4>)
 800bcdc:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 800bcde:	4a3d      	ldr	r2, [pc, #244]	; (800bdd4 <uartOpen+0x1f0>)
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800bce4:	4b3b      	ldr	r3, [pc, #236]	; (800bdd4 <uartOpen+0x1f0>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 800bcea:	4b3a      	ldr	r3, [pc, #232]	; (800bdd4 <uartOpen+0x1f0>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 800bcf0:	4b38      	ldr	r3, [pc, #224]	; (800bdd4 <uartOpen+0x1f0>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 800bcf6:	4b37      	ldr	r3, [pc, #220]	; (800bdd4 <uartOpen+0x1f0>)
 800bcf8:	220c      	movs	r2, #12
 800bcfa:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bcfc:	4b35      	ldr	r3, [pc, #212]	; (800bdd4 <uartOpen+0x1f0>)
 800bcfe:	2200      	movs	r2, #0
 800bd00:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800bd02:	4b34      	ldr	r3, [pc, #208]	; (800bdd4 <uartOpen+0x1f0>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	61da      	str	r2, [r3, #28]

      QueueCreate(&ring_buffer[ch], &u2_rx_buf[0], MAX_SIZE);
 800bd08:	79fa      	ldrb	r2, [r7, #7]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	4413      	add	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4a2c      	ldr	r2, [pc, #176]	; (800bdc4 <uartOpen+0x1e0>)
 800bd14:	4413      	add	r3, r2
 800bd16:	22ff      	movs	r2, #255	; 0xff
 800bd18:	4930      	ldr	r1, [pc, #192]	; (800bddc <uartOpen+0x1f8>)
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fa f9b2 	bl	8006084 <QueueCreate>

      if (HAL_UART_Init(&huart2) != HAL_OK)
 800bd20:	482c      	ldr	r0, [pc, #176]	; (800bdd4 <uartOpen+0x1f0>)
 800bd22:	f004 fbff 	bl	8010524 <HAL_UART_Init>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <uartOpen+0x14e>
      {
        ret = false;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73fb      	strb	r3, [r7, #15]
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart2_rx.Instance->CNDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
      }
      break;
 800bd30:	e03d      	b.n	800bdae <uartOpen+0x1ca>
        ret = true;
 800bd32:	2301      	movs	r3, #1
 800bd34:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 800bd36:	79fb      	ldrb	r3, [r7, #7]
 800bd38:	4a24      	ldr	r2, [pc, #144]	; (800bdcc <uartOpen+0x1e8>)
 800bd3a:	2101      	movs	r1, #1
 800bd3c:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&u2_rx_buf[0], MAX_SIZE) != HAL_OK)
 800bd3e:	22ff      	movs	r2, #255	; 0xff
 800bd40:	4926      	ldr	r1, [pc, #152]	; (800bddc <uartOpen+0x1f8>)
 800bd42:	4824      	ldr	r0, [pc, #144]	; (800bdd4 <uartOpen+0x1f0>)
 800bd44:	f004 fd12 	bl	801076c <HAL_UART_Receive_DMA>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <uartOpen+0x16e>
          ret = false;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart2_rx.Instance->CNDTR;
 800bd52:	79fa      	ldrb	r2, [r7, #7]
 800bd54:	491b      	ldr	r1, [pc, #108]	; (800bdc4 <uartOpen+0x1e0>)
 800bd56:	4613      	mov	r3, r2
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	4413      	add	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	440b      	add	r3, r1
 800bd60:	3306      	adds	r3, #6
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	b2d9      	uxtb	r1, r3
 800bd66:	4b1e      	ldr	r3, [pc, #120]	; (800bde0 <uartOpen+0x1fc>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	79fa      	ldrb	r2, [r7, #7]
 800bd70:	1acb      	subs	r3, r1, r3
 800bd72:	b2d8      	uxtb	r0, r3
 800bd74:	4913      	ldr	r1, [pc, #76]	; (800bdc4 <uartOpen+0x1e0>)
 800bd76:	4613      	mov	r3, r2
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	4413      	add	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	440b      	add	r3, r1
 800bd80:	3304      	adds	r3, #4
 800bd82:	4602      	mov	r2, r0
 800bd84:	701a      	strb	r2, [r3, #0]
        ring_buffer[ch].tail = ring_buffer[ch].head;
 800bd86:	79f9      	ldrb	r1, [r7, #7]
 800bd88:	79fa      	ldrb	r2, [r7, #7]
 800bd8a:	480e      	ldr	r0, [pc, #56]	; (800bdc4 <uartOpen+0x1e0>)
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	440b      	add	r3, r1
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4403      	add	r3, r0
 800bd96:	3304      	adds	r3, #4
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	b2d8      	uxtb	r0, r3
 800bd9c:	4909      	ldr	r1, [pc, #36]	; (800bdc4 <uartOpen+0x1e0>)
 800bd9e:	4613      	mov	r3, r2
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	4413      	add	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	440b      	add	r3, r1
 800bda8:	3305      	adds	r3, #5
 800bdaa:	4602      	mov	r2, r0
 800bdac:	701a      	strb	r2, [r3, #0]
      break;
 800bdae:	bf00      	nop
  }

  return ret;
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	200014f8 	.word	0x200014f8
 800bdc0:	40013800 	.word	0x40013800
 800bdc4:	20000790 	.word	0x20000790
 800bdc8:	200007a8 	.word	0x200007a8
 800bdcc:	2000078c 	.word	0x2000078c
 800bdd0:	20001470 	.word	0x20001470
 800bdd4:	20001538 	.word	0x20001538
 800bdd8:	40004400 	.word	0x40004400
 800bddc:	200008a8 	.word	0x200008a8
 800bde0:	200013e8 	.word	0x200013e8

0800bde4 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <uartAvailable+0x1a>
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d026      	beq.n	800be4a <uartAvailable+0x66>
 800bdfc:	e04b      	b.n	800be96 <uartAvailable+0xb2>
  {
    case _DEF_UART1:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_usart1_rx.Instance->CNDTR);
 800bdfe:	79fa      	ldrb	r2, [r7, #7]
 800be00:	4927      	ldr	r1, [pc, #156]	; (800bea0 <uartAvailable+0xbc>)
 800be02:	4613      	mov	r3, r2
 800be04:	005b      	lsls	r3, r3, #1
 800be06:	4413      	add	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	440b      	add	r3, r1
 800be0c:	3306      	adds	r3, #6
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	b2d9      	uxtb	r1, r3
 800be12:	4b24      	ldr	r3, [pc, #144]	; (800bea4 <uartAvailable+0xc0>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	79fa      	ldrb	r2, [r7, #7]
 800be1c:	1acb      	subs	r3, r1, r3
 800be1e:	b2d8      	uxtb	r0, r3
 800be20:	491f      	ldr	r1, [pc, #124]	; (800bea0 <uartAvailable+0xbc>)
 800be22:	4613      	mov	r3, r2
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	440b      	add	r3, r1
 800be2c:	3304      	adds	r3, #4
 800be2e:	4602      	mov	r2, r0
 800be30:	701a      	strb	r2, [r3, #0]
      ret = QueueAvailable(&ring_buffer[ch]);
 800be32:	79fa      	ldrb	r2, [r7, #7]
 800be34:	4613      	mov	r3, r2
 800be36:	005b      	lsls	r3, r3, #1
 800be38:	4413      	add	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4a18      	ldr	r2, [pc, #96]	; (800bea0 <uartAvailable+0xbc>)
 800be3e:	4413      	add	r3, r2
 800be40:	4618      	mov	r0, r3
 800be42:	f7fa f991 	bl	8006168 <QueueAvailable>
 800be46:	60f8      	str	r0, [r7, #12]
      break;
 800be48:	e025      	b.n	800be96 <uartAvailable+0xb2>

    case _DEF_UART2:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_usart2_rx.Instance->CNDTR);
 800be4a:	79fa      	ldrb	r2, [r7, #7]
 800be4c:	4914      	ldr	r1, [pc, #80]	; (800bea0 <uartAvailable+0xbc>)
 800be4e:	4613      	mov	r3, r2
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	4413      	add	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	440b      	add	r3, r1
 800be58:	3306      	adds	r3, #6
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	b2d9      	uxtb	r1, r3
 800be5e:	4b12      	ldr	r3, [pc, #72]	; (800bea8 <uartAvailable+0xc4>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	b2db      	uxtb	r3, r3
 800be66:	79fa      	ldrb	r2, [r7, #7]
 800be68:	1acb      	subs	r3, r1, r3
 800be6a:	b2d8      	uxtb	r0, r3
 800be6c:	490c      	ldr	r1, [pc, #48]	; (800bea0 <uartAvailable+0xbc>)
 800be6e:	4613      	mov	r3, r2
 800be70:	005b      	lsls	r3, r3, #1
 800be72:	4413      	add	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	440b      	add	r3, r1
 800be78:	3304      	adds	r3, #4
 800be7a:	4602      	mov	r2, r0
 800be7c:	701a      	strb	r2, [r3, #0]
      ret = QueueAvailable(&ring_buffer[ch]);
 800be7e:	79fa      	ldrb	r2, [r7, #7]
 800be80:	4613      	mov	r3, r2
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	4413      	add	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4a05      	ldr	r2, [pc, #20]	; (800bea0 <uartAvailable+0xbc>)
 800be8a:	4413      	add	r3, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7fa f96b 	bl	8006168 <QueueAvailable>
 800be92:	60f8      	str	r0, [r7, #12]
      break;
 800be94:	bf00      	nop
  }

  return ret;
 800be96:	68fb      	ldr	r3, [r7, #12]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	20000790 	.word	0x20000790
 800bea4:	20001470 	.word	0x20001470
 800bea8:	200013e8 	.word	0x200013e8

0800beac <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800beba:	79fb      	ldrb	r3, [r7, #7]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <uartRead+0x1a>
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d008      	beq.n	800bed6 <uartRead+0x2a>
 800bec4:	e00f      	b.n	800bee6 <uartRead+0x3a>
  {
    case _DEF_UART1:
    	Q_read(&ring_buffer[_DEF_UART1], &ret, 1);
 800bec6:	f107 030f 	add.w	r3, r7, #15
 800beca:	2201      	movs	r2, #1
 800becc:	4619      	mov	r1, r3
 800bece:	4808      	ldr	r0, [pc, #32]	; (800bef0 <uartRead+0x44>)
 800bed0:	f7fa f90c 	bl	80060ec <Q_read>
      break;
 800bed4:	e007      	b.n	800bee6 <uartRead+0x3a>

    case _DEF_UART2:
    	Q_read(&ring_buffer[_DEF_UART2], &ret, 1);
 800bed6:	f107 030f 	add.w	r3, r7, #15
 800beda:	2201      	movs	r2, #1
 800bedc:	4619      	mov	r1, r3
 800bede:	4805      	ldr	r0, [pc, #20]	; (800bef4 <uartRead+0x48>)
 800bee0:	f7fa f904 	bl	80060ec <Q_read>
      break;
 800bee4:	bf00      	nop
  }

  return ret;
 800bee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	20000790 	.word	0x20000790
 800bef4:	2000079c 	.word	0x2000079c

0800bef8 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b086      	sub	sp, #24
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
 800bf04:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800bf06:	2300      	movs	r3, #0
 800bf08:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 800bf0a:	7bfb      	ldrb	r3, [r7, #15]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <uartWrite+0x1e>
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d00f      	beq.n	800bf34 <uartWrite+0x3c>
 800bf14:	e020      	b.n	800bf58 <uartWrite+0x60>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	2364      	movs	r3, #100	; 0x64
 800bf1c:	68b9      	ldr	r1, [r7, #8]
 800bf1e:	4811      	ldr	r0, [pc, #68]	; (800bf64 <uartWrite+0x6c>)
 800bf20:	f004 fb4d 	bl	80105be <HAL_UART_Transmit>
 800bf24:	4603      	mov	r3, r0
 800bf26:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800bf28:	7cfb      	ldrb	r3, [r7, #19]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d111      	bne.n	800bf52 <uartWrite+0x5a>
      {
        ret = length;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	617b      	str	r3, [r7, #20]
      }
      break;
 800bf32:	e00e      	b.n	800bf52 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart2, p_data, length, 100);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	b29a      	uxth	r2, r3
 800bf38:	2364      	movs	r3, #100	; 0x64
 800bf3a:	68b9      	ldr	r1, [r7, #8]
 800bf3c:	480a      	ldr	r0, [pc, #40]	; (800bf68 <uartWrite+0x70>)
 800bf3e:	f004 fb3e 	bl	80105be <HAL_UART_Transmit>
 800bf42:	4603      	mov	r3, r0
 800bf44:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800bf46:	7cfb      	ldrb	r3, [r7, #19]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d104      	bne.n	800bf56 <uartWrite+0x5e>
      {
        ret = length;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	617b      	str	r3, [r7, #20]
      }
      break;
 800bf50:	e001      	b.n	800bf56 <uartWrite+0x5e>
      break;
 800bf52:	bf00      	nop
 800bf54:	e000      	b.n	800bf58 <uartWrite+0x60>
      break;
 800bf56:	bf00      	nop
  }

  return ret;
 800bf58:	697b      	ldr	r3, [r7, #20]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	200014f8 	.word	0x200014f8
 800bf68:	20001538 	.word	0x20001538

0800bf6c <uartWriteIT>:

uint32_t uartWriteIT(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	4603      	mov	r3, r0
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
 800bf78:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d002      	beq.n	800bf8a <uartWriteIT+0x1e>
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d00f      	beq.n	800bfa8 <uartWriteIT+0x3c>
 800bf88:	e020      	b.n	800bfcc <uartWriteIT+0x60>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit_IT(&huart1, p_data, length);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	461a      	mov	r2, r3
 800bf90:	68b9      	ldr	r1, [r7, #8]
 800bf92:	4811      	ldr	r0, [pc, #68]	; (800bfd8 <uartWriteIT+0x6c>)
 800bf94:	f004 fba5 	bl	80106e2 <HAL_UART_Transmit_IT>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800bf9c:	7cfb      	ldrb	r3, [r7, #19]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d111      	bne.n	800bfc6 <uartWriteIT+0x5a>
      {
        ret = length;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	617b      	str	r3, [r7, #20]
      }
      break;
 800bfa6:	e00e      	b.n	800bfc6 <uartWriteIT+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit_IT(&huart2, p_data, length);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	461a      	mov	r2, r3
 800bfae:	68b9      	ldr	r1, [r7, #8]
 800bfb0:	480a      	ldr	r0, [pc, #40]	; (800bfdc <uartWriteIT+0x70>)
 800bfb2:	f004 fb96 	bl	80106e2 <HAL_UART_Transmit_IT>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800bfba:	7cfb      	ldrb	r3, [r7, #19]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d104      	bne.n	800bfca <uartWriteIT+0x5e>
      {
        ret = length;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	617b      	str	r3, [r7, #20]
      }
      break;
 800bfc4:	e001      	b.n	800bfca <uartWriteIT+0x5e>
      break;
 800bfc6:	bf00      	nop
 800bfc8:	e000      	b.n	800bfcc <uartWriteIT+0x60>
      break;
 800bfca:	bf00      	nop
  }

  return ret;
 800bfcc:	697b      	ldr	r3, [r7, #20]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	200014f8 	.word	0x200014f8
 800bfdc:	20001538 	.word	0x20001538

0800bfe0 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800bfe0:	b40e      	push	{r1, r2, r3}
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b0c7      	sub	sp, #284	; 0x11c
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	4602      	mov	r2, r0
 800bfea:	1dfb      	adds	r3, r7, #7
 800bfec:	701a      	strb	r2, [r3, #0]
  char buf[MAX_SIZE];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800bfee:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800bff2:	f107 030c 	add.w	r3, r7, #12
 800bff6:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, MAX_SIZE, fmt, args);
 800bff8:	f107 030c 	add.w	r3, r7, #12
 800bffc:	f107 0010 	add.w	r0, r7, #16
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c006:	21ff      	movs	r1, #255	; 0xff
 800c008:	f006 fc20 	bl	801284c <vsniprintf>
 800c00c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800c010:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c014:	f107 0110 	add.w	r1, r7, #16
 800c018:	1dfb      	adds	r3, r7, #7
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff ff6b 	bl	800bef8 <uartWrite>
 800c022:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 800c026:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800c030:	46bd      	mov	sp, r7
 800c032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c036:	b003      	add	sp, #12
 800c038:	4770      	bx	lr
	...

0800c03c <uartGetBaud>:

  return ret;
}

uint32_t uartGetBaud(uint8_t ch)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	4603      	mov	r3, r0
 800c044:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	60fb      	str	r3, [r7, #12]


  switch(ch)
 800c04a:	79fb      	ldrb	r3, [r7, #7]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <uartGetBaud+0x1a>
 800c050:	2b01      	cmp	r3, #1
 800c052:	d004      	beq.n	800c05e <uartGetBaud+0x22>
 800c054:	e007      	b.n	800c066 <uartGetBaud+0x2a>
  {
    case _DEF_UART1:
      ret = huart1.Init.BaudRate;
 800c056:	4b07      	ldr	r3, [pc, #28]	; (800c074 <uartGetBaud+0x38>)
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	60fb      	str	r3, [r7, #12]
      break;
 800c05c:	e003      	b.n	800c066 <uartGetBaud+0x2a>

    case _DEF_UART2:
      ret = huart2.Init.BaudRate;
 800c05e:	4b06      	ldr	r3, [pc, #24]	; (800c078 <uartGetBaud+0x3c>)
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	60fb      	str	r3, [r7, #12]
      break;
 800c064:	bf00      	nop
  }

  return ret;
 800c066:	68fb      	ldr	r3, [r7, #12]
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3714      	adds	r7, #20
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bc80      	pop	{r7}
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	200014f8 	.word	0x200014f8
 800c078:	20001538 	.word	0x20001538

0800c07c <uartSetBaud>:

bool uartSetBaud(uint8_t ch, uint32_t baud)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	4603      	mov	r3, r0
 800c084:	6039      	str	r1, [r7, #0]
 800c086:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 800c088:	2300      	movs	r3, #0
 800c08a:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 800c08c:	79fb      	ldrb	r3, [r7, #7]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d002      	beq.n	800c098 <uartSetBaud+0x1c>
 800c092:	2b01      	cmp	r3, #1
 800c094:	d00f      	beq.n	800c0b6 <uartSetBaud+0x3a>
 800c096:	e01d      	b.n	800c0d4 <uartSetBaud+0x58>
	{
		case _DEF_UART1:
			huart1.Init.BaudRate = baud;
 800c098:	4a11      	ldr	r2, [pc, #68]	; (800c0e0 <uartSetBaud+0x64>)
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart1) != HAL_OK)
 800c09e:	4810      	ldr	r0, [pc, #64]	; (800c0e0 <uartSetBaud+0x64>)
 800c0a0:	f004 fa40 	bl	8010524 <HAL_UART_Init>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d002      	beq.n	800c0b0 <uartSetBaud+0x34>
    	{
    	  Error_Handler();
 800c0aa:	f7f5 fa85 	bl	80015b8 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 800c0ae:	e011      	b.n	800c0d4 <uartSetBaud+0x58>
    		ret = true;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	73fb      	strb	r3, [r7, #15]
			break;
 800c0b4:	e00e      	b.n	800c0d4 <uartSetBaud+0x58>

		case _DEF_UART2:
			huart2.Init.BaudRate = baud;
 800c0b6:	4a0b      	ldr	r2, [pc, #44]	; (800c0e4 <uartSetBaud+0x68>)
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart2) != HAL_OK)
 800c0bc:	4809      	ldr	r0, [pc, #36]	; (800c0e4 <uartSetBaud+0x68>)
 800c0be:	f004 fa31 	bl	8010524 <HAL_UART_Init>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <uartSetBaud+0x52>
    	{
    	  Error_Handler();
 800c0c8:	f7f5 fa76 	bl	80015b8 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 800c0cc:	e001      	b.n	800c0d2 <uartSetBaud+0x56>
    		ret = true;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	73fb      	strb	r3, [r7, #15]
			break;
 800c0d2:	bf00      	nop
	}

	return ret;
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	200014f8 	.word	0x200014f8
 800c0e4:	20001538 	.word	0x20001538

0800c0e8 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }

  if(huart->ErrorCode == HAL_UART_ERROR_FE) //current USART
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f4:	2b04      	cmp	r3, #4
 800c0f6:	d109      	bne.n	800c10c <HAL_UART_ErrorCallback+0x24>
  {
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)&u1_rx_buf[0], 1);
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	490d      	ldr	r1, [pc, #52]	; (800c130 <HAL_UART_ErrorCallback+0x48>)
 800c0fc:	480d      	ldr	r0, [pc, #52]	; (800c134 <HAL_UART_ErrorCallback+0x4c>)
 800c0fe:	f004 fb35 	bl	801076c <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, (uint8_t*)&u2_rx_buf[0], 1);
 800c102:	2201      	movs	r2, #1
 800c104:	490c      	ldr	r1, [pc, #48]	; (800c138 <HAL_UART_ErrorCallback+0x50>)
 800c106:	480d      	ldr	r0, [pc, #52]	; (800c13c <HAL_UART_ErrorCallback+0x54>)
 800c108:	f004 fb30 	bl	801076c <HAL_UART_Receive_DMA>
  }
  if(huart->ErrorCode == HAL_UART_ERROR_NE) //current USART
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c110:	2b02      	cmp	r3, #2
 800c112:	d109      	bne.n	800c128 <HAL_UART_ErrorCallback+0x40>
  {
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)&u1_rx_buf[0], 1);
 800c114:	2201      	movs	r2, #1
 800c116:	4906      	ldr	r1, [pc, #24]	; (800c130 <HAL_UART_ErrorCallback+0x48>)
 800c118:	4806      	ldr	r0, [pc, #24]	; (800c134 <HAL_UART_ErrorCallback+0x4c>)
 800c11a:	f004 fb27 	bl	801076c <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, (uint8_t*)&u2_rx_buf[0], 1);
 800c11e:	2201      	movs	r2, #1
 800c120:	4905      	ldr	r1, [pc, #20]	; (800c138 <HAL_UART_ErrorCallback+0x50>)
 800c122:	4806      	ldr	r0, [pc, #24]	; (800c13c <HAL_UART_ErrorCallback+0x54>)
 800c124:	f004 fb22 	bl	801076c <HAL_UART_Receive_DMA>
  }
}
 800c128:	bf00      	nop
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	200007a8 	.word	0x200007a8
 800c134:	200014f8 	.word	0x200014f8
 800c138:	200008a8 	.word	0x200008a8
 800c13c:	20001538 	.word	0x20001538

0800c140 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
//  }
//  else if(huart->Instance == USART2)
//  {
//  	Q_write(&ring_buffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//  }
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bc80      	pop	{r7}
 800c150:	4770      	bx	lr
	...

0800c154 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b08a      	sub	sp, #40	; 0x28
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c15c:	f107 0318 	add.w	r3, r7, #24
 800c160:	2200      	movs	r2, #0
 800c162:	601a      	str	r2, [r3, #0]
 800c164:	605a      	str	r2, [r3, #4]
 800c166:	609a      	str	r2, [r3, #8]
 800c168:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a8c      	ldr	r2, [pc, #560]	; (800c3a0 <HAL_UART_MspInit+0x24c>)
 800c170:	4293      	cmp	r3, r2
 800c172:	f040 8087 	bne.w	800c284 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c176:	4b8b      	ldr	r3, [pc, #556]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	4a8a      	ldr	r2, [pc, #552]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c17c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c180:	6193      	str	r3, [r2, #24]
 800c182:	4b88      	ldr	r3, [pc, #544]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c18a:	617b      	str	r3, [r7, #20]
 800c18c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c18e:	4b85      	ldr	r3, [pc, #532]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	4a84      	ldr	r2, [pc, #528]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c194:	f043 0304 	orr.w	r3, r3, #4
 800c198:	6193      	str	r3, [r2, #24]
 800c19a:	4b82      	ldr	r3, [pc, #520]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	f003 0304 	and.w	r3, r3, #4
 800c1a2:	613b      	str	r3, [r7, #16]
 800c1a4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c1a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1b4:	f107 0318 	add.w	r3, r7, #24
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	487b      	ldr	r0, [pc, #492]	; (800c3a8 <HAL_UART_MspInit+0x254>)
 800c1bc:	f000 fd6e 	bl	800cc9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c1c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1ce:	f107 0318 	add.w	r3, r7, #24
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	4874      	ldr	r0, [pc, #464]	; (800c3a8 <HAL_UART_MspInit+0x254>)
 800c1d6:	f000 fd61 	bl	800cc9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800c1da:	4b74      	ldr	r3, [pc, #464]	; (800c3ac <HAL_UART_MspInit+0x258>)
 800c1dc:	4a74      	ldr	r2, [pc, #464]	; (800c3b0 <HAL_UART_MspInit+0x25c>)
 800c1de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c1e0:	4b72      	ldr	r3, [pc, #456]	; (800c3ac <HAL_UART_MspInit+0x258>)
 800c1e2:	2210      	movs	r2, #16
 800c1e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c1e6:	4b71      	ldr	r3, [pc, #452]	; (800c3ac <HAL_UART_MspInit+0x258>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c1ec:	4b6f      	ldr	r3, [pc, #444]	; (800c3ac <HAL_UART_MspInit+0x258>)
 800c1ee:	2280      	movs	r2, #128	; 0x80
 800c1f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c1f2:	4b6e      	ldr	r3, [pc, #440]	; (800c3ac <HAL_UART_MspInit+0x258>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c1f8:	4b6c      	ldr	r3, [pc, #432]	; (800c3ac <HAL_UART_MspInit+0x258>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800c1fe:	4b6b      	ldr	r3, [pc, #428]	; (800c3ac <HAL_UART_MspInit+0x258>)
 800c200:	2200      	movs	r2, #0
 800c202:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c204:	4b69      	ldr	r3, [pc, #420]	; (800c3ac <HAL_UART_MspInit+0x258>)
 800c206:	2200      	movs	r2, #0
 800c208:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800c20a:	4868      	ldr	r0, [pc, #416]	; (800c3ac <HAL_UART_MspInit+0x258>)
 800c20c:	f000 fae2 	bl	800c7d4 <HAL_DMA_Init>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d001      	beq.n	800c21a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800c216:	f7f5 f9cf 	bl	80015b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a63      	ldr	r2, [pc, #396]	; (800c3ac <HAL_UART_MspInit+0x258>)
 800c21e:	631a      	str	r2, [r3, #48]	; 0x30
 800c220:	4a62      	ldr	r2, [pc, #392]	; (800c3ac <HAL_UART_MspInit+0x258>)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800c226:	4b63      	ldr	r3, [pc, #396]	; (800c3b4 <HAL_UART_MspInit+0x260>)
 800c228:	4a63      	ldr	r2, [pc, #396]	; (800c3b8 <HAL_UART_MspInit+0x264>)
 800c22a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c22c:	4b61      	ldr	r3, [pc, #388]	; (800c3b4 <HAL_UART_MspInit+0x260>)
 800c22e:	2200      	movs	r2, #0
 800c230:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c232:	4b60      	ldr	r3, [pc, #384]	; (800c3b4 <HAL_UART_MspInit+0x260>)
 800c234:	2200      	movs	r2, #0
 800c236:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c238:	4b5e      	ldr	r3, [pc, #376]	; (800c3b4 <HAL_UART_MspInit+0x260>)
 800c23a:	2280      	movs	r2, #128	; 0x80
 800c23c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c23e:	4b5d      	ldr	r3, [pc, #372]	; (800c3b4 <HAL_UART_MspInit+0x260>)
 800c240:	2200      	movs	r2, #0
 800c242:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c244:	4b5b      	ldr	r3, [pc, #364]	; (800c3b4 <HAL_UART_MspInit+0x260>)
 800c246:	2200      	movs	r2, #0
 800c248:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800c24a:	4b5a      	ldr	r3, [pc, #360]	; (800c3b4 <HAL_UART_MspInit+0x260>)
 800c24c:	2220      	movs	r2, #32
 800c24e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c250:	4b58      	ldr	r3, [pc, #352]	; (800c3b4 <HAL_UART_MspInit+0x260>)
 800c252:	2200      	movs	r2, #0
 800c254:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800c256:	4857      	ldr	r0, [pc, #348]	; (800c3b4 <HAL_UART_MspInit+0x260>)
 800c258:	f000 fabc 	bl	800c7d4 <HAL_DMA_Init>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d001      	beq.n	800c266 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800c262:	f7f5 f9a9 	bl	80015b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4a52      	ldr	r2, [pc, #328]	; (800c3b4 <HAL_UART_MspInit+0x260>)
 800c26a:	635a      	str	r2, [r3, #52]	; 0x34
 800c26c:	4a51      	ldr	r2, [pc, #324]	; (800c3b4 <HAL_UART_MspInit+0x260>)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c272:	2200      	movs	r2, #0
 800c274:	2100      	movs	r1, #0
 800c276:	2025      	movs	r0, #37	; 0x25
 800c278:	f000 fa6f 	bl	800c75a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c27c:	2025      	movs	r0, #37	; 0x25
 800c27e:	f000 fa88 	bl	800c792 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800c282:	e089      	b.n	800c398 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a4c      	ldr	r2, [pc, #304]	; (800c3bc <HAL_UART_MspInit+0x268>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	f040 8084 	bne.w	800c398 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 800c290:	4b44      	ldr	r3, [pc, #272]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c292:	69db      	ldr	r3, [r3, #28]
 800c294:	4a43      	ldr	r2, [pc, #268]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c29a:	61d3      	str	r3, [r2, #28]
 800c29c:	4b41      	ldr	r3, [pc, #260]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2a4:	60fb      	str	r3, [r7, #12]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2a8:	4b3e      	ldr	r3, [pc, #248]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c2aa:	699b      	ldr	r3, [r3, #24]
 800c2ac:	4a3d      	ldr	r2, [pc, #244]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c2ae:	f043 0304 	orr.w	r3, r3, #4
 800c2b2:	6193      	str	r3, [r2, #24]
 800c2b4:	4b3b      	ldr	r3, [pc, #236]	; (800c3a4 <HAL_UART_MspInit+0x250>)
 800c2b6:	699b      	ldr	r3, [r3, #24]
 800c2b8:	f003 0304 	and.w	r3, r3, #4
 800c2bc:	60bb      	str	r3, [r7, #8]
 800c2be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c2c0:	2304      	movs	r3, #4
 800c2c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2cc:	f107 0318 	add.w	r3, r7, #24
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	4835      	ldr	r0, [pc, #212]	; (800c3a8 <HAL_UART_MspInit+0x254>)
 800c2d4:	f000 fce2 	bl	800cc9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c2d8:	2308      	movs	r3, #8
 800c2da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2e4:	f107 0318 	add.w	r3, r7, #24
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	482f      	ldr	r0, [pc, #188]	; (800c3a8 <HAL_UART_MspInit+0x254>)
 800c2ec:	f000 fcd6 	bl	800cc9c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800c2f0:	4b33      	ldr	r3, [pc, #204]	; (800c3c0 <HAL_UART_MspInit+0x26c>)
 800c2f2:	4a34      	ldr	r2, [pc, #208]	; (800c3c4 <HAL_UART_MspInit+0x270>)
 800c2f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c2f6:	4b32      	ldr	r3, [pc, #200]	; (800c3c0 <HAL_UART_MspInit+0x26c>)
 800c2f8:	2210      	movs	r2, #16
 800c2fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c2fc:	4b30      	ldr	r3, [pc, #192]	; (800c3c0 <HAL_UART_MspInit+0x26c>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c302:	4b2f      	ldr	r3, [pc, #188]	; (800c3c0 <HAL_UART_MspInit+0x26c>)
 800c304:	2280      	movs	r2, #128	; 0x80
 800c306:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c308:	4b2d      	ldr	r3, [pc, #180]	; (800c3c0 <HAL_UART_MspInit+0x26c>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c30e:	4b2c      	ldr	r3, [pc, #176]	; (800c3c0 <HAL_UART_MspInit+0x26c>)
 800c310:	2200      	movs	r2, #0
 800c312:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800c314:	4b2a      	ldr	r3, [pc, #168]	; (800c3c0 <HAL_UART_MspInit+0x26c>)
 800c316:	2200      	movs	r2, #0
 800c318:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c31a:	4b29      	ldr	r3, [pc, #164]	; (800c3c0 <HAL_UART_MspInit+0x26c>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800c320:	4827      	ldr	r0, [pc, #156]	; (800c3c0 <HAL_UART_MspInit+0x26c>)
 800c322:	f000 fa57 	bl	800c7d4 <HAL_DMA_Init>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 800c32c:	f7f5 f944 	bl	80015b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4a23      	ldr	r2, [pc, #140]	; (800c3c0 <HAL_UART_MspInit+0x26c>)
 800c334:	631a      	str	r2, [r3, #48]	; 0x30
 800c336:	4a22      	ldr	r2, [pc, #136]	; (800c3c0 <HAL_UART_MspInit+0x26c>)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800c33c:	4b22      	ldr	r3, [pc, #136]	; (800c3c8 <HAL_UART_MspInit+0x274>)
 800c33e:	4a23      	ldr	r2, [pc, #140]	; (800c3cc <HAL_UART_MspInit+0x278>)
 800c340:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c342:	4b21      	ldr	r3, [pc, #132]	; (800c3c8 <HAL_UART_MspInit+0x274>)
 800c344:	2200      	movs	r2, #0
 800c346:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c348:	4b1f      	ldr	r3, [pc, #124]	; (800c3c8 <HAL_UART_MspInit+0x274>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c34e:	4b1e      	ldr	r3, [pc, #120]	; (800c3c8 <HAL_UART_MspInit+0x274>)
 800c350:	2280      	movs	r2, #128	; 0x80
 800c352:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c354:	4b1c      	ldr	r3, [pc, #112]	; (800c3c8 <HAL_UART_MspInit+0x274>)
 800c356:	2200      	movs	r2, #0
 800c358:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c35a:	4b1b      	ldr	r3, [pc, #108]	; (800c3c8 <HAL_UART_MspInit+0x274>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800c360:	4b19      	ldr	r3, [pc, #100]	; (800c3c8 <HAL_UART_MspInit+0x274>)
 800c362:	2220      	movs	r2, #32
 800c364:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c366:	4b18      	ldr	r3, [pc, #96]	; (800c3c8 <HAL_UART_MspInit+0x274>)
 800c368:	2200      	movs	r2, #0
 800c36a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800c36c:	4816      	ldr	r0, [pc, #88]	; (800c3c8 <HAL_UART_MspInit+0x274>)
 800c36e:	f000 fa31 	bl	800c7d4 <HAL_DMA_Init>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d001      	beq.n	800c37c <HAL_UART_MspInit+0x228>
      Error_Handler();
 800c378:	f7f5 f91e 	bl	80015b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a12      	ldr	r2, [pc, #72]	; (800c3c8 <HAL_UART_MspInit+0x274>)
 800c380:	635a      	str	r2, [r3, #52]	; 0x34
 800c382:	4a11      	ldr	r2, [pc, #68]	; (800c3c8 <HAL_UART_MspInit+0x274>)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800c388:	2200      	movs	r2, #0
 800c38a:	2100      	movs	r1, #0
 800c38c:	2026      	movs	r0, #38	; 0x26
 800c38e:	f000 f9e4 	bl	800c75a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c392:	2026      	movs	r0, #38	; 0x26
 800c394:	f000 f9fd 	bl	800c792 <HAL_NVIC_EnableIRQ>
}
 800c398:	bf00      	nop
 800c39a:	3728      	adds	r7, #40	; 0x28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	40013800 	.word	0x40013800
 800c3a4:	40021000 	.word	0x40021000
 800c3a8:	40010800 	.word	0x40010800
 800c3ac:	2000142c 	.word	0x2000142c
 800c3b0:	40020044 	.word	0x40020044
 800c3b4:	20001470 	.word	0x20001470
 800c3b8:	40020058 	.word	0x40020058
 800c3bc:	40004400 	.word	0x40004400
 800c3c0:	200014b4 	.word	0x200014b4
 800c3c4:	40020080 	.word	0x40020080
 800c3c8:	200013e8 	.word	0x200013e8
 800c3cc:	4002006c 	.word	0x4002006c

0800c3d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c3d6:	4b18      	ldr	r3, [pc, #96]	; (800c438 <MX_DMA_Init+0x68>)
 800c3d8:	695b      	ldr	r3, [r3, #20]
 800c3da:	4a17      	ldr	r2, [pc, #92]	; (800c438 <MX_DMA_Init+0x68>)
 800c3dc:	f043 0301 	orr.w	r3, r3, #1
 800c3e0:	6153      	str	r3, [r2, #20]
 800c3e2:	4b15      	ldr	r3, [pc, #84]	; (800c438 <MX_DMA_Init+0x68>)
 800c3e4:	695b      	ldr	r3, [r3, #20]
 800c3e6:	f003 0301 	and.w	r3, r3, #1
 800c3ea:	607b      	str	r3, [r7, #4]
 800c3ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	200e      	movs	r0, #14
 800c3f4:	f000 f9b1 	bl	800c75a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800c3f8:	200e      	movs	r0, #14
 800c3fa:	f000 f9ca 	bl	800c792 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800c3fe:	2200      	movs	r2, #0
 800c400:	2100      	movs	r1, #0
 800c402:	200f      	movs	r0, #15
 800c404:	f000 f9a9 	bl	800c75a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800c408:	200f      	movs	r0, #15
 800c40a:	f000 f9c2 	bl	800c792 <HAL_NVIC_EnableIRQ>

  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800c40e:	2200      	movs	r2, #0
 800c410:	2100      	movs	r1, #0
 800c412:	2010      	movs	r0, #16
 800c414:	f000 f9a1 	bl	800c75a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800c418:	2010      	movs	r0, #16
 800c41a:	f000 f9ba 	bl	800c792 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800c41e:	2200      	movs	r2, #0
 800c420:	2100      	movs	r1, #0
 800c422:	2011      	movs	r0, #17
 800c424:	f000 f999 	bl	800c75a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800c428:	2011      	movs	r0, #17
 800c42a:	f000 f9b2 	bl	800c792 <HAL_NVIC_EnableIRQ>

}
 800c42e:	bf00      	nop
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	40021000 	.word	0x40021000

0800c43c <hwInit>:




void hwInit(void)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
  bspInit();
 800c442:	f7f5 f815 	bl	8001470 <bspInit>
  timerInit();
 800c446:	f7ff f939 	bl	800b6bc <timerInit>
  cliInit();
 800c44a:	f7fd fee5 	bl	800a218 <cliInit>
  ledInit();
 800c44e:	f7ff f83b 	bl	800b4c8 <ledInit>
  i2cInit();
 800c452:	f7fe fe43 	bl	800b0dc <i2cInit>
  uartInit();
 800c456:	f7ff fbab 	bl	800bbb0 <uartInit>

	ledOn(ST1);
 800c45a:	2000      	movs	r0, #0
 800c45c:	f7ff f882 	bl	800b564 <ledOn>
  ledOff(ST2);
 800c460:	2001      	movs	r0, #1
 800c462:	f7ff f89f 	bl	800b5a4 <ledOff>
  for (int i = 0; i < 10; i++){
 800c466:	2300      	movs	r3, #0
 800c468:	607b      	str	r3, [r7, #4]
 800c46a:	e00e      	b.n	800c48a <hwInit+0x4e>
    ledToggle(ST1);
 800c46c:	2000      	movs	r0, #0
 800c46e:	f7ff f8b9 	bl	800b5e4 <ledToggle>
    ledToggle(ST2);
 800c472:	2001      	movs	r0, #1
 800c474:	f7ff f8b6 	bl	800b5e4 <ledToggle>
    HAL_Delay(25);
 800c478:	2019      	movs	r0, #25
 800c47a:	f000 f875 	bl	800c568 <HAL_Delay>
    //BEEP_ON;
    HAL_Delay(25);
 800c47e:	2019      	movs	r0, #25
 800c480:	f000 f872 	bl	800c568 <HAL_Delay>
  for (int i = 0; i < 10; i++){
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	3301      	adds	r3, #1
 800c488:	607b      	str	r3, [r7, #4]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b09      	cmp	r3, #9
 800c48e:	dded      	ble.n	800c46c <hwInit+0x30>
    //BEEP_OFF;
  }
  ledOff(ST1);
 800c490:	2000      	movs	r0, #0
 800c492:	f7ff f887 	bl	800b5a4 <ledOff>
  ledOff(ST2);
 800c496:	2001      	movs	r0, #1
 800c498:	f7ff f884 	bl	800b5a4 <ledOff>
}
 800c49c:	bf00      	nop
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c4a8:	4b08      	ldr	r3, [pc, #32]	; (800c4cc <HAL_Init+0x28>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a07      	ldr	r2, [pc, #28]	; (800c4cc <HAL_Init+0x28>)
 800c4ae:	f043 0310 	orr.w	r3, r3, #16
 800c4b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c4b4:	2003      	movs	r0, #3
 800c4b6:	f000 f945 	bl	800c744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	f000 f808 	bl	800c4d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c4c0:	f7f5 f880 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	40022000 	.word	0x40022000

0800c4d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c4d8:	4b12      	ldr	r3, [pc, #72]	; (800c524 <HAL_InitTick+0x54>)
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	4b12      	ldr	r3, [pc, #72]	; (800c528 <HAL_InitTick+0x58>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 f95d 	bl	800c7ae <HAL_SYSTICK_Config>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d001      	beq.n	800c4fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e00e      	b.n	800c51c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b0f      	cmp	r3, #15
 800c502:	d80a      	bhi.n	800c51a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c504:	2200      	movs	r2, #0
 800c506:	6879      	ldr	r1, [r7, #4]
 800c508:	f04f 30ff 	mov.w	r0, #4294967295
 800c50c:	f000 f925 	bl	800c75a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c510:	4a06      	ldr	r2, [pc, #24]	; (800c52c <HAL_InitTick+0x5c>)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c516:	2300      	movs	r3, #0
 800c518:	e000      	b.n	800c51c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	20000004 	.word	0x20000004
 800c528:	2000005c 	.word	0x2000005c
 800c52c:	20000058 	.word	0x20000058

0800c530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c530:	b480      	push	{r7}
 800c532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c534:	4b05      	ldr	r3, [pc, #20]	; (800c54c <HAL_IncTick+0x1c>)
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	461a      	mov	r2, r3
 800c53a:	4b05      	ldr	r3, [pc, #20]	; (800c550 <HAL_IncTick+0x20>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4413      	add	r3, r2
 800c540:	4a03      	ldr	r2, [pc, #12]	; (800c550 <HAL_IncTick+0x20>)
 800c542:	6013      	str	r3, [r2, #0]
}
 800c544:	bf00      	nop
 800c546:	46bd      	mov	sp, r7
 800c548:	bc80      	pop	{r7}
 800c54a:	4770      	bx	lr
 800c54c:	2000005c 	.word	0x2000005c
 800c550:	20001578 	.word	0x20001578

0800c554 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c554:	b480      	push	{r7}
 800c556:	af00      	add	r7, sp, #0
  return uwTick;
 800c558:	4b02      	ldr	r3, [pc, #8]	; (800c564 <HAL_GetTick+0x10>)
 800c55a:	681b      	ldr	r3, [r3, #0]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	46bd      	mov	sp, r7
 800c560:	bc80      	pop	{r7}
 800c562:	4770      	bx	lr
 800c564:	20001578 	.word	0x20001578

0800c568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c570:	f7ff fff0 	bl	800c554 <HAL_GetTick>
 800c574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c580:	d005      	beq.n	800c58e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c582:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <HAL_Delay+0x40>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	461a      	mov	r2, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	4413      	add	r3, r2
 800c58c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c58e:	bf00      	nop
 800c590:	f7ff ffe0 	bl	800c554 <HAL_GetTick>
 800c594:	4602      	mov	r2, r0
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d8f7      	bhi.n	800c590 <HAL_Delay+0x28>
  {
  }
}
 800c5a0:	bf00      	nop
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	2000005c 	.word	0x2000005c

0800c5ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c5bc:	4b0c      	ldr	r3, [pc, #48]	; (800c5f0 <__NVIC_SetPriorityGrouping+0x44>)
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c5c2:	68ba      	ldr	r2, [r7, #8]
 800c5c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c5c8:	4013      	ands	r3, r2
 800c5ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c5d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c5d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c5de:	4a04      	ldr	r2, [pc, #16]	; (800c5f0 <__NVIC_SetPriorityGrouping+0x44>)
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	60d3      	str	r3, [r2, #12]
}
 800c5e4:	bf00      	nop
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bc80      	pop	{r7}
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	e000ed00 	.word	0xe000ed00

0800c5f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c5f8:	4b04      	ldr	r3, [pc, #16]	; (800c60c <__NVIC_GetPriorityGrouping+0x18>)
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	0a1b      	lsrs	r3, r3, #8
 800c5fe:	f003 0307 	and.w	r3, r3, #7
}
 800c602:	4618      	mov	r0, r3
 800c604:	46bd      	mov	sp, r7
 800c606:	bc80      	pop	{r7}
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	e000ed00 	.word	0xe000ed00

0800c610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c61a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	db0b      	blt.n	800c63a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c622:	79fb      	ldrb	r3, [r7, #7]
 800c624:	f003 021f 	and.w	r2, r3, #31
 800c628:	4906      	ldr	r1, [pc, #24]	; (800c644 <__NVIC_EnableIRQ+0x34>)
 800c62a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c62e:	095b      	lsrs	r3, r3, #5
 800c630:	2001      	movs	r0, #1
 800c632:	fa00 f202 	lsl.w	r2, r0, r2
 800c636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c63a:	bf00      	nop
 800c63c:	370c      	adds	r7, #12
 800c63e:	46bd      	mov	sp, r7
 800c640:	bc80      	pop	{r7}
 800c642:	4770      	bx	lr
 800c644:	e000e100 	.word	0xe000e100

0800c648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	4603      	mov	r3, r0
 800c650:	6039      	str	r1, [r7, #0]
 800c652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	db0a      	blt.n	800c672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	b2da      	uxtb	r2, r3
 800c660:	490c      	ldr	r1, [pc, #48]	; (800c694 <__NVIC_SetPriority+0x4c>)
 800c662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c666:	0112      	lsls	r2, r2, #4
 800c668:	b2d2      	uxtb	r2, r2
 800c66a:	440b      	add	r3, r1
 800c66c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c670:	e00a      	b.n	800c688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	b2da      	uxtb	r2, r3
 800c676:	4908      	ldr	r1, [pc, #32]	; (800c698 <__NVIC_SetPriority+0x50>)
 800c678:	79fb      	ldrb	r3, [r7, #7]
 800c67a:	f003 030f 	and.w	r3, r3, #15
 800c67e:	3b04      	subs	r3, #4
 800c680:	0112      	lsls	r2, r2, #4
 800c682:	b2d2      	uxtb	r2, r2
 800c684:	440b      	add	r3, r1
 800c686:	761a      	strb	r2, [r3, #24]
}
 800c688:	bf00      	nop
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bc80      	pop	{r7}
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	e000e100 	.word	0xe000e100
 800c698:	e000ed00 	.word	0xe000ed00

0800c69c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b089      	sub	sp, #36	; 0x24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f003 0307 	and.w	r3, r3, #7
 800c6ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	f1c3 0307 	rsb	r3, r3, #7
 800c6b6:	2b04      	cmp	r3, #4
 800c6b8:	bf28      	it	cs
 800c6ba:	2304      	movcs	r3, #4
 800c6bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	2b06      	cmp	r3, #6
 800c6c4:	d902      	bls.n	800c6cc <NVIC_EncodePriority+0x30>
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	3b03      	subs	r3, #3
 800c6ca:	e000      	b.n	800c6ce <NVIC_EncodePriority+0x32>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6da:	43da      	mvns	r2, r3
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	401a      	ands	r2, r3
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c6e4:	f04f 31ff 	mov.w	r1, #4294967295
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ee:	43d9      	mvns	r1, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c6f4:	4313      	orrs	r3, r2
         );
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3724      	adds	r7, #36	; 0x24
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bc80      	pop	{r7}
 800c6fe:	4770      	bx	lr

0800c700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	3b01      	subs	r3, #1
 800c70c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c710:	d301      	bcc.n	800c716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c712:	2301      	movs	r3, #1
 800c714:	e00f      	b.n	800c736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c716:	4a0a      	ldr	r2, [pc, #40]	; (800c740 <SysTick_Config+0x40>)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c71e:	210f      	movs	r1, #15
 800c720:	f04f 30ff 	mov.w	r0, #4294967295
 800c724:	f7ff ff90 	bl	800c648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c728:	4b05      	ldr	r3, [pc, #20]	; (800c740 <SysTick_Config+0x40>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c72e:	4b04      	ldr	r3, [pc, #16]	; (800c740 <SysTick_Config+0x40>)
 800c730:	2207      	movs	r2, #7
 800c732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	e000e010 	.word	0xe000e010

0800c744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7ff ff2d 	bl	800c5ac <__NVIC_SetPriorityGrouping>
}
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b086      	sub	sp, #24
 800c75e:	af00      	add	r7, sp, #0
 800c760:	4603      	mov	r3, r0
 800c762:	60b9      	str	r1, [r7, #8]
 800c764:	607a      	str	r2, [r7, #4]
 800c766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c768:	2300      	movs	r3, #0
 800c76a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c76c:	f7ff ff42 	bl	800c5f4 <__NVIC_GetPriorityGrouping>
 800c770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	68b9      	ldr	r1, [r7, #8]
 800c776:	6978      	ldr	r0, [r7, #20]
 800c778:	f7ff ff90 	bl	800c69c <NVIC_EncodePriority>
 800c77c:	4602      	mov	r2, r0
 800c77e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c782:	4611      	mov	r1, r2
 800c784:	4618      	mov	r0, r3
 800c786:	f7ff ff5f 	bl	800c648 <__NVIC_SetPriority>
}
 800c78a:	bf00      	nop
 800c78c:	3718      	adds	r7, #24
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b082      	sub	sp, #8
 800c796:	af00      	add	r7, sp, #0
 800c798:	4603      	mov	r3, r0
 800c79a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c79c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7ff ff35 	bl	800c610 <__NVIC_EnableIRQ>
}
 800c7a6:	bf00      	nop
 800c7a8:	3708      	adds	r7, #8
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b082      	sub	sp, #8
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f7ff ffa2 	bl	800c700 <SysTick_Config>
 800c7bc:	4603      	mov	r3, r0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800c7ca:	f7f4 fe43 	bl	8001454 <HAL_SYSTICK_Callback>
}
 800c7ce:	bf00      	nop
 800c7d0:	bd80      	pop	{r7, pc}
	...

0800c7d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d101      	bne.n	800c7ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e043      	b.n	800c872 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	4b22      	ldr	r3, [pc, #136]	; (800c87c <HAL_DMA_Init+0xa8>)
 800c7f2:	4413      	add	r3, r2
 800c7f4:	4a22      	ldr	r2, [pc, #136]	; (800c880 <HAL_DMA_Init+0xac>)
 800c7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7fa:	091b      	lsrs	r3, r3, #4
 800c7fc:	009a      	lsls	r2, r3, #2
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a1f      	ldr	r2, [pc, #124]	; (800c884 <HAL_DMA_Init+0xb0>)
 800c806:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2202      	movs	r2, #2
 800c80c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800c81e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c822:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800c82c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	69db      	ldr	r3, [r3, #28]
 800c84a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	4313      	orrs	r3, r2
 800c850:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3714      	adds	r7, #20
 800c876:	46bd      	mov	sp, r7
 800c878:	bc80      	pop	{r7}
 800c87a:	4770      	bx	lr
 800c87c:	bffdfff8 	.word	0xbffdfff8
 800c880:	cccccccd 	.word	0xcccccccd
 800c884:	40020000 	.word	0x40020000

0800c888 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d101      	bne.n	800c8a8 <HAL_DMA_Start_IT+0x20>
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	e04a      	b.n	800c93e <HAL_DMA_Start_IT+0xb6>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d13a      	bne.n	800c930 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2202      	movs	r2, #2
 800c8be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f022 0201 	bic.w	r2, r2, #1
 800c8d6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	68b9      	ldr	r1, [r7, #8]
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f000 f9ae 	bl	800cc40 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d008      	beq.n	800c8fe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f042 020e 	orr.w	r2, r2, #14
 800c8fa:	601a      	str	r2, [r3, #0]
 800c8fc:	e00f      	b.n	800c91e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f022 0204 	bic.w	r2, r2, #4
 800c90c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f042 020a 	orr.w	r2, r2, #10
 800c91c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f042 0201 	orr.w	r2, r2, #1
 800c92c:	601a      	str	r2, [r3, #0]
 800c92e:	e005      	b.n	800c93c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800c938:	2302      	movs	r3, #2
 800c93a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
	...

0800c948 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	d005      	beq.n	800c96a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2204      	movs	r2, #4
 800c962:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	73fb      	strb	r3, [r7, #15]
 800c968:	e051      	b.n	800ca0e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f022 020e 	bic.w	r2, r2, #14
 800c978:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f022 0201 	bic.w	r2, r2, #1
 800c988:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a22      	ldr	r2, [pc, #136]	; (800ca18 <HAL_DMA_Abort_IT+0xd0>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d029      	beq.n	800c9e8 <HAL_DMA_Abort_IT+0xa0>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a20      	ldr	r2, [pc, #128]	; (800ca1c <HAL_DMA_Abort_IT+0xd4>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d022      	beq.n	800c9e4 <HAL_DMA_Abort_IT+0x9c>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a1f      	ldr	r2, [pc, #124]	; (800ca20 <HAL_DMA_Abort_IT+0xd8>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d01a      	beq.n	800c9de <HAL_DMA_Abort_IT+0x96>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a1d      	ldr	r2, [pc, #116]	; (800ca24 <HAL_DMA_Abort_IT+0xdc>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d012      	beq.n	800c9d8 <HAL_DMA_Abort_IT+0x90>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a1c      	ldr	r2, [pc, #112]	; (800ca28 <HAL_DMA_Abort_IT+0xe0>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d00a      	beq.n	800c9d2 <HAL_DMA_Abort_IT+0x8a>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a1a      	ldr	r2, [pc, #104]	; (800ca2c <HAL_DMA_Abort_IT+0xe4>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d102      	bne.n	800c9cc <HAL_DMA_Abort_IT+0x84>
 800c9c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c9ca:	e00e      	b.n	800c9ea <HAL_DMA_Abort_IT+0xa2>
 800c9cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c9d0:	e00b      	b.n	800c9ea <HAL_DMA_Abort_IT+0xa2>
 800c9d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c9d6:	e008      	b.n	800c9ea <HAL_DMA_Abort_IT+0xa2>
 800c9d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9dc:	e005      	b.n	800c9ea <HAL_DMA_Abort_IT+0xa2>
 800c9de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9e2:	e002      	b.n	800c9ea <HAL_DMA_Abort_IT+0xa2>
 800c9e4:	2310      	movs	r3, #16
 800c9e6:	e000      	b.n	800c9ea <HAL_DMA_Abort_IT+0xa2>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	4a11      	ldr	r2, [pc, #68]	; (800ca30 <HAL_DMA_Abort_IT+0xe8>)
 800c9ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d003      	beq.n	800ca0e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	4798      	blx	r3
    } 
  }
  return status;
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	40020008 	.word	0x40020008
 800ca1c:	4002001c 	.word	0x4002001c
 800ca20:	40020030 	.word	0x40020030
 800ca24:	40020044 	.word	0x40020044
 800ca28:	40020058 	.word	0x40020058
 800ca2c:	4002006c 	.word	0x4002006c
 800ca30:	40020000 	.word	0x40020000

0800ca34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca50:	2204      	movs	r2, #4
 800ca52:	409a      	lsls	r2, r3
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	4013      	ands	r3, r2
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d04f      	beq.n	800cafc <HAL_DMA_IRQHandler+0xc8>
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	f003 0304 	and.w	r3, r3, #4
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d04a      	beq.n	800cafc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 0320 	and.w	r3, r3, #32
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d107      	bne.n	800ca84 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f022 0204 	bic.w	r2, r2, #4
 800ca82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a66      	ldr	r2, [pc, #408]	; (800cc24 <HAL_DMA_IRQHandler+0x1f0>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d029      	beq.n	800cae2 <HAL_DMA_IRQHandler+0xae>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a65      	ldr	r2, [pc, #404]	; (800cc28 <HAL_DMA_IRQHandler+0x1f4>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d022      	beq.n	800cade <HAL_DMA_IRQHandler+0xaa>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a63      	ldr	r2, [pc, #396]	; (800cc2c <HAL_DMA_IRQHandler+0x1f8>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d01a      	beq.n	800cad8 <HAL_DMA_IRQHandler+0xa4>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a62      	ldr	r2, [pc, #392]	; (800cc30 <HAL_DMA_IRQHandler+0x1fc>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d012      	beq.n	800cad2 <HAL_DMA_IRQHandler+0x9e>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a60      	ldr	r2, [pc, #384]	; (800cc34 <HAL_DMA_IRQHandler+0x200>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d00a      	beq.n	800cacc <HAL_DMA_IRQHandler+0x98>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a5f      	ldr	r2, [pc, #380]	; (800cc38 <HAL_DMA_IRQHandler+0x204>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d102      	bne.n	800cac6 <HAL_DMA_IRQHandler+0x92>
 800cac0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cac4:	e00e      	b.n	800cae4 <HAL_DMA_IRQHandler+0xb0>
 800cac6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800caca:	e00b      	b.n	800cae4 <HAL_DMA_IRQHandler+0xb0>
 800cacc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cad0:	e008      	b.n	800cae4 <HAL_DMA_IRQHandler+0xb0>
 800cad2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cad6:	e005      	b.n	800cae4 <HAL_DMA_IRQHandler+0xb0>
 800cad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cadc:	e002      	b.n	800cae4 <HAL_DMA_IRQHandler+0xb0>
 800cade:	2340      	movs	r3, #64	; 0x40
 800cae0:	e000      	b.n	800cae4 <HAL_DMA_IRQHandler+0xb0>
 800cae2:	2304      	movs	r3, #4
 800cae4:	4a55      	ldr	r2, [pc, #340]	; (800cc3c <HAL_DMA_IRQHandler+0x208>)
 800cae6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caec:	2b00      	cmp	r3, #0
 800caee:	f000 8094 	beq.w	800cc1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800cafa:	e08e      	b.n	800cc1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb00:	2202      	movs	r2, #2
 800cb02:	409a      	lsls	r2, r3
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	4013      	ands	r3, r2
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d056      	beq.n	800cbba <HAL_DMA_IRQHandler+0x186>
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d051      	beq.n	800cbba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 0320 	and.w	r3, r3, #32
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10b      	bne.n	800cb3c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f022 020a 	bic.w	r2, r2, #10
 800cb32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2201      	movs	r2, #1
 800cb38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a38      	ldr	r2, [pc, #224]	; (800cc24 <HAL_DMA_IRQHandler+0x1f0>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d029      	beq.n	800cb9a <HAL_DMA_IRQHandler+0x166>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a37      	ldr	r2, [pc, #220]	; (800cc28 <HAL_DMA_IRQHandler+0x1f4>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d022      	beq.n	800cb96 <HAL_DMA_IRQHandler+0x162>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a35      	ldr	r2, [pc, #212]	; (800cc2c <HAL_DMA_IRQHandler+0x1f8>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d01a      	beq.n	800cb90 <HAL_DMA_IRQHandler+0x15c>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a34      	ldr	r2, [pc, #208]	; (800cc30 <HAL_DMA_IRQHandler+0x1fc>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d012      	beq.n	800cb8a <HAL_DMA_IRQHandler+0x156>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a32      	ldr	r2, [pc, #200]	; (800cc34 <HAL_DMA_IRQHandler+0x200>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d00a      	beq.n	800cb84 <HAL_DMA_IRQHandler+0x150>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a31      	ldr	r2, [pc, #196]	; (800cc38 <HAL_DMA_IRQHandler+0x204>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d102      	bne.n	800cb7e <HAL_DMA_IRQHandler+0x14a>
 800cb78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cb7c:	e00e      	b.n	800cb9c <HAL_DMA_IRQHandler+0x168>
 800cb7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb82:	e00b      	b.n	800cb9c <HAL_DMA_IRQHandler+0x168>
 800cb84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cb88:	e008      	b.n	800cb9c <HAL_DMA_IRQHandler+0x168>
 800cb8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb8e:	e005      	b.n	800cb9c <HAL_DMA_IRQHandler+0x168>
 800cb90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb94:	e002      	b.n	800cb9c <HAL_DMA_IRQHandler+0x168>
 800cb96:	2320      	movs	r3, #32
 800cb98:	e000      	b.n	800cb9c <HAL_DMA_IRQHandler+0x168>
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	4a27      	ldr	r2, [pc, #156]	; (800cc3c <HAL_DMA_IRQHandler+0x208>)
 800cb9e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d034      	beq.n	800cc1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800cbb8:	e02f      	b.n	800cc1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbbe:	2208      	movs	r2, #8
 800cbc0:	409a      	lsls	r2, r3
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d028      	beq.n	800cc1c <HAL_DMA_IRQHandler+0x1e8>
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	f003 0308 	and.w	r3, r3, #8
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d023      	beq.n	800cc1c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f022 020e 	bic.w	r2, r2, #14
 800cbe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbec:	2101      	movs	r1, #1
 800cbee:	fa01 f202 	lsl.w	r2, r1, r2
 800cbf2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d004      	beq.n	800cc1c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	4798      	blx	r3
    }
  }
  return;
 800cc1a:	bf00      	nop
 800cc1c:	bf00      	nop
}
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	40020008 	.word	0x40020008
 800cc28:	4002001c 	.word	0x4002001c
 800cc2c:	40020030 	.word	0x40020030
 800cc30:	40020044 	.word	0x40020044
 800cc34:	40020058 	.word	0x40020058
 800cc38:	4002006c 	.word	0x4002006c
 800cc3c:	40020000 	.word	0x40020000

0800cc40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
 800cc4c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc56:	2101      	movs	r1, #1
 800cc58:	fa01 f202 	lsl.w	r2, r1, r2
 800cc5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	2b10      	cmp	r3, #16
 800cc6c:	d108      	bne.n	800cc80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800cc7e:	e007      	b.n	800cc90 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68ba      	ldr	r2, [r7, #8]
 800cc86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	60da      	str	r2, [r3, #12]
}
 800cc90:	bf00      	nop
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bc80      	pop	{r7}
 800cc98:	4770      	bx	lr
	...

0800cc9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b08b      	sub	sp, #44	; 0x2c
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800cca6:	2300      	movs	r3, #0
 800cca8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ccae:	e127      	b.n	800cf00 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	fa02 f303 	lsl.w	r3, r2, r3
 800ccb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	69fa      	ldr	r2, [r7, #28]
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800ccc4:	69ba      	ldr	r2, [r7, #24]
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	f040 8116 	bne.w	800cefa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	2b12      	cmp	r3, #18
 800ccd4:	d034      	beq.n	800cd40 <HAL_GPIO_Init+0xa4>
 800ccd6:	2b12      	cmp	r3, #18
 800ccd8:	d80d      	bhi.n	800ccf6 <HAL_GPIO_Init+0x5a>
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d02b      	beq.n	800cd36 <HAL_GPIO_Init+0x9a>
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d804      	bhi.n	800ccec <HAL_GPIO_Init+0x50>
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d031      	beq.n	800cd4a <HAL_GPIO_Init+0xae>
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d01c      	beq.n	800cd24 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800ccea:	e048      	b.n	800cd7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	d043      	beq.n	800cd78 <HAL_GPIO_Init+0xdc>
 800ccf0:	2b11      	cmp	r3, #17
 800ccf2:	d01b      	beq.n	800cd2c <HAL_GPIO_Init+0x90>
          break;
 800ccf4:	e043      	b.n	800cd7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800ccf6:	4a89      	ldr	r2, [pc, #548]	; (800cf1c <HAL_GPIO_Init+0x280>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d026      	beq.n	800cd4a <HAL_GPIO_Init+0xae>
 800ccfc:	4a87      	ldr	r2, [pc, #540]	; (800cf1c <HAL_GPIO_Init+0x280>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d806      	bhi.n	800cd10 <HAL_GPIO_Init+0x74>
 800cd02:	4a87      	ldr	r2, [pc, #540]	; (800cf20 <HAL_GPIO_Init+0x284>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d020      	beq.n	800cd4a <HAL_GPIO_Init+0xae>
 800cd08:	4a86      	ldr	r2, [pc, #536]	; (800cf24 <HAL_GPIO_Init+0x288>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d01d      	beq.n	800cd4a <HAL_GPIO_Init+0xae>
          break;
 800cd0e:	e036      	b.n	800cd7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800cd10:	4a85      	ldr	r2, [pc, #532]	; (800cf28 <HAL_GPIO_Init+0x28c>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d019      	beq.n	800cd4a <HAL_GPIO_Init+0xae>
 800cd16:	4a85      	ldr	r2, [pc, #532]	; (800cf2c <HAL_GPIO_Init+0x290>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d016      	beq.n	800cd4a <HAL_GPIO_Init+0xae>
 800cd1c:	4a84      	ldr	r2, [pc, #528]	; (800cf30 <HAL_GPIO_Init+0x294>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d013      	beq.n	800cd4a <HAL_GPIO_Init+0xae>
          break;
 800cd22:	e02c      	b.n	800cd7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	623b      	str	r3, [r7, #32]
          break;
 800cd2a:	e028      	b.n	800cd7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	3304      	adds	r3, #4
 800cd32:	623b      	str	r3, [r7, #32]
          break;
 800cd34:	e023      	b.n	800cd7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	3308      	adds	r3, #8
 800cd3c:	623b      	str	r3, [r7, #32]
          break;
 800cd3e:	e01e      	b.n	800cd7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	330c      	adds	r3, #12
 800cd46:	623b      	str	r3, [r7, #32]
          break;
 800cd48:	e019      	b.n	800cd7e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d102      	bne.n	800cd58 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800cd52:	2304      	movs	r3, #4
 800cd54:	623b      	str	r3, [r7, #32]
          break;
 800cd56:	e012      	b.n	800cd7e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d105      	bne.n	800cd6c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800cd60:	2308      	movs	r3, #8
 800cd62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	69fa      	ldr	r2, [r7, #28]
 800cd68:	611a      	str	r2, [r3, #16]
          break;
 800cd6a:	e008      	b.n	800cd7e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800cd6c:	2308      	movs	r3, #8
 800cd6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	69fa      	ldr	r2, [r7, #28]
 800cd74:	615a      	str	r2, [r3, #20]
          break;
 800cd76:	e002      	b.n	800cd7e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	623b      	str	r3, [r7, #32]
          break;
 800cd7c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	2bff      	cmp	r3, #255	; 0xff
 800cd82:	d801      	bhi.n	800cd88 <HAL_GPIO_Init+0xec>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	e001      	b.n	800cd8c <HAL_GPIO_Init+0xf0>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	3304      	adds	r3, #4
 800cd8c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	2bff      	cmp	r3, #255	; 0xff
 800cd92:	d802      	bhi.n	800cd9a <HAL_GPIO_Init+0xfe>
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	e002      	b.n	800cda0 <HAL_GPIO_Init+0x104>
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9c:	3b08      	subs	r3, #8
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	210f      	movs	r1, #15
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	fa01 f303 	lsl.w	r3, r1, r3
 800cdae:	43db      	mvns	r3, r3
 800cdb0:	401a      	ands	r2, r3
 800cdb2:	6a39      	ldr	r1, [r7, #32]
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdba:	431a      	orrs	r2, r3
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f000 8096 	beq.w	800cefa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800cdce:	4b59      	ldr	r3, [pc, #356]	; (800cf34 <HAL_GPIO_Init+0x298>)
 800cdd0:	699b      	ldr	r3, [r3, #24]
 800cdd2:	4a58      	ldr	r2, [pc, #352]	; (800cf34 <HAL_GPIO_Init+0x298>)
 800cdd4:	f043 0301 	orr.w	r3, r3, #1
 800cdd8:	6193      	str	r3, [r2, #24]
 800cdda:	4b56      	ldr	r3, [pc, #344]	; (800cf34 <HAL_GPIO_Init+0x298>)
 800cddc:	699b      	ldr	r3, [r3, #24]
 800cdde:	f003 0301 	and.w	r3, r3, #1
 800cde2:	60bb      	str	r3, [r7, #8]
 800cde4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800cde6:	4a54      	ldr	r2, [pc, #336]	; (800cf38 <HAL_GPIO_Init+0x29c>)
 800cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdea:	089b      	lsrs	r3, r3, #2
 800cdec:	3302      	adds	r3, #2
 800cdee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	f003 0303 	and.w	r3, r3, #3
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	220f      	movs	r2, #15
 800cdfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ce02:	43db      	mvns	r3, r3
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	4013      	ands	r3, r2
 800ce08:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4a4b      	ldr	r2, [pc, #300]	; (800cf3c <HAL_GPIO_Init+0x2a0>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d013      	beq.n	800ce3a <HAL_GPIO_Init+0x19e>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a4a      	ldr	r2, [pc, #296]	; (800cf40 <HAL_GPIO_Init+0x2a4>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d00d      	beq.n	800ce36 <HAL_GPIO_Init+0x19a>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a49      	ldr	r2, [pc, #292]	; (800cf44 <HAL_GPIO_Init+0x2a8>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d007      	beq.n	800ce32 <HAL_GPIO_Init+0x196>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4a48      	ldr	r2, [pc, #288]	; (800cf48 <HAL_GPIO_Init+0x2ac>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d101      	bne.n	800ce2e <HAL_GPIO_Init+0x192>
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e006      	b.n	800ce3c <HAL_GPIO_Init+0x1a0>
 800ce2e:	2304      	movs	r3, #4
 800ce30:	e004      	b.n	800ce3c <HAL_GPIO_Init+0x1a0>
 800ce32:	2302      	movs	r3, #2
 800ce34:	e002      	b.n	800ce3c <HAL_GPIO_Init+0x1a0>
 800ce36:	2301      	movs	r3, #1
 800ce38:	e000      	b.n	800ce3c <HAL_GPIO_Init+0x1a0>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce3e:	f002 0203 	and.w	r2, r2, #3
 800ce42:	0092      	lsls	r2, r2, #2
 800ce44:	4093      	lsls	r3, r2
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800ce4c:	493a      	ldr	r1, [pc, #232]	; (800cf38 <HAL_GPIO_Init+0x29c>)
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	089b      	lsrs	r3, r3, #2
 800ce52:	3302      	adds	r3, #2
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d006      	beq.n	800ce74 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800ce66:	4b39      	ldr	r3, [pc, #228]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	4938      	ldr	r1, [pc, #224]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	600b      	str	r3, [r1, #0]
 800ce72:	e006      	b.n	800ce82 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800ce74:	4b35      	ldr	r3, [pc, #212]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	43db      	mvns	r3, r3
 800ce7c:	4933      	ldr	r1, [pc, #204]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800ce7e:	4013      	ands	r3, r2
 800ce80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d006      	beq.n	800ce9c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800ce8e:	4b2f      	ldr	r3, [pc, #188]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800ce90:	685a      	ldr	r2, [r3, #4]
 800ce92:	492e      	ldr	r1, [pc, #184]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	604b      	str	r3, [r1, #4]
 800ce9a:	e006      	b.n	800ceaa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800ce9c:	4b2b      	ldr	r3, [pc, #172]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800ce9e:	685a      	ldr	r2, [r3, #4]
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	43db      	mvns	r3, r3
 800cea4:	4929      	ldr	r1, [pc, #164]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800cea6:	4013      	ands	r3, r2
 800cea8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d006      	beq.n	800cec4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800ceb6:	4b25      	ldr	r3, [pc, #148]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800ceb8:	689a      	ldr	r2, [r3, #8]
 800ceba:	4924      	ldr	r1, [pc, #144]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	4313      	orrs	r3, r2
 800cec0:	608b      	str	r3, [r1, #8]
 800cec2:	e006      	b.n	800ced2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800cec4:	4b21      	ldr	r3, [pc, #132]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800cec6:	689a      	ldr	r2, [r3, #8]
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	43db      	mvns	r3, r3
 800cecc:	491f      	ldr	r1, [pc, #124]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800cece:	4013      	ands	r3, r2
 800ced0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d006      	beq.n	800ceec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800cede:	4b1b      	ldr	r3, [pc, #108]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800cee0:	68da      	ldr	r2, [r3, #12]
 800cee2:	491a      	ldr	r1, [pc, #104]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	60cb      	str	r3, [r1, #12]
 800ceea:	e006      	b.n	800cefa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800ceec:	4b17      	ldr	r3, [pc, #92]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800ceee:	68da      	ldr	r2, [r3, #12]
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	43db      	mvns	r3, r3
 800cef4:	4915      	ldr	r1, [pc, #84]	; (800cf4c <HAL_GPIO_Init+0x2b0>)
 800cef6:	4013      	ands	r3, r2
 800cef8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800cefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefc:	3301      	adds	r3, #1
 800cefe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf06:	fa22 f303 	lsr.w	r3, r2, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f47f aed0 	bne.w	800ccb0 <HAL_GPIO_Init+0x14>
  }
}
 800cf10:	bf00      	nop
 800cf12:	372c      	adds	r7, #44	; 0x2c
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bc80      	pop	{r7}
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	10210000 	.word	0x10210000
 800cf20:	10110000 	.word	0x10110000
 800cf24:	10120000 	.word	0x10120000
 800cf28:	10310000 	.word	0x10310000
 800cf2c:	10320000 	.word	0x10320000
 800cf30:	10220000 	.word	0x10220000
 800cf34:	40021000 	.word	0x40021000
 800cf38:	40010000 	.word	0x40010000
 800cf3c:	40010800 	.word	0x40010800
 800cf40:	40010c00 	.word	0x40010c00
 800cf44:	40011000 	.word	0x40011000
 800cf48:	40011400 	.word	0x40011400
 800cf4c:	40010400 	.word	0x40010400

0800cf50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	807b      	strh	r3, [r7, #2]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cf60:	787b      	ldrb	r3, [r7, #1]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d003      	beq.n	800cf6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cf66:	887a      	ldrh	r2, [r7, #2]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800cf6c:	e003      	b.n	800cf76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800cf6e:	887b      	ldrh	r3, [r7, #2]
 800cf70:	041a      	lsls	r2, r3, #16
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	611a      	str	r2, [r3, #16]
}
 800cf76:	bf00      	nop
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bc80      	pop	{r7}
 800cf7e:	4770      	bx	lr

0800cf80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cf92:	887a      	ldrh	r2, [r7, #2]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	4013      	ands	r3, r2
 800cf98:	041a      	lsls	r2, r3, #16
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	43d9      	mvns	r1, r3
 800cf9e:	887b      	ldrh	r3, [r7, #2]
 800cfa0:	400b      	ands	r3, r1
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	611a      	str	r2, [r3, #16]
}
 800cfa8:	bf00      	nop
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bc80      	pop	{r7}
 800cfb0:	4770      	bx	lr
	...

0800cfb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d101      	bne.n	800cfc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e11f      	b.n	800d206 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d106      	bne.n	800cfe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7fe fa34 	bl	800b448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2224      	movs	r2, #36	; 0x24
 800cfe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f022 0201 	bic.w	r2, r2, #1
 800cff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d018:	f002 f846 	bl	800f0a8 <HAL_RCC_GetPCLK1Freq>
 800d01c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	4a7b      	ldr	r2, [pc, #492]	; (800d210 <HAL_I2C_Init+0x25c>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d807      	bhi.n	800d038 <HAL_I2C_Init+0x84>
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	4a7a      	ldr	r2, [pc, #488]	; (800d214 <HAL_I2C_Init+0x260>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	bf94      	ite	ls
 800d030:	2301      	movls	r3, #1
 800d032:	2300      	movhi	r3, #0
 800d034:	b2db      	uxtb	r3, r3
 800d036:	e006      	b.n	800d046 <HAL_I2C_Init+0x92>
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	4a77      	ldr	r2, [pc, #476]	; (800d218 <HAL_I2C_Init+0x264>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	bf94      	ite	ls
 800d040:	2301      	movls	r3, #1
 800d042:	2300      	movhi	r3, #0
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d04a:	2301      	movs	r3, #1
 800d04c:	e0db      	b.n	800d206 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	4a72      	ldr	r2, [pc, #456]	; (800d21c <HAL_I2C_Init+0x268>)
 800d052:	fba2 2303 	umull	r2, r3, r2, r3
 800d056:	0c9b      	lsrs	r3, r3, #18
 800d058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	430a      	orrs	r2, r1
 800d06c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	6a1b      	ldr	r3, [r3, #32]
 800d074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	4a64      	ldr	r2, [pc, #400]	; (800d210 <HAL_I2C_Init+0x25c>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d802      	bhi.n	800d088 <HAL_I2C_Init+0xd4>
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	3301      	adds	r3, #1
 800d086:	e009      	b.n	800d09c <HAL_I2C_Init+0xe8>
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d08e:	fb02 f303 	mul.w	r3, r2, r3
 800d092:	4a63      	ldr	r2, [pc, #396]	; (800d220 <HAL_I2C_Init+0x26c>)
 800d094:	fba2 2303 	umull	r2, r3, r2, r3
 800d098:	099b      	lsrs	r3, r3, #6
 800d09a:	3301      	adds	r3, #1
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	6812      	ldr	r2, [r2, #0]
 800d0a0:	430b      	orrs	r3, r1
 800d0a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	69db      	ldr	r3, [r3, #28]
 800d0aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d0ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	4956      	ldr	r1, [pc, #344]	; (800d210 <HAL_I2C_Init+0x25c>)
 800d0b8:	428b      	cmp	r3, r1
 800d0ba:	d80d      	bhi.n	800d0d8 <HAL_I2C_Init+0x124>
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	1e59      	subs	r1, r3, #1
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0d0:	2b04      	cmp	r3, #4
 800d0d2:	bf38      	it	cc
 800d0d4:	2304      	movcc	r3, #4
 800d0d6:	e04f      	b.n	800d178 <HAL_I2C_Init+0x1c4>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d111      	bne.n	800d104 <HAL_I2C_Init+0x150>
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	1e58      	subs	r0, r3, #1
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6859      	ldr	r1, [r3, #4]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	005b      	lsls	r3, r3, #1
 800d0ec:	440b      	add	r3, r1
 800d0ee:	fbb0 f3f3 	udiv	r3, r0, r3
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	bf0c      	ite	eq
 800d0fc:	2301      	moveq	r3, #1
 800d0fe:	2300      	movne	r3, #0
 800d100:	b2db      	uxtb	r3, r3
 800d102:	e012      	b.n	800d12a <HAL_I2C_Init+0x176>
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	1e58      	subs	r0, r3, #1
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6859      	ldr	r1, [r3, #4]
 800d10c:	460b      	mov	r3, r1
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	440b      	add	r3, r1
 800d112:	0099      	lsls	r1, r3, #2
 800d114:	440b      	add	r3, r1
 800d116:	fbb0 f3f3 	udiv	r3, r0, r3
 800d11a:	3301      	adds	r3, #1
 800d11c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d120:	2b00      	cmp	r3, #0
 800d122:	bf0c      	ite	eq
 800d124:	2301      	moveq	r3, #1
 800d126:	2300      	movne	r3, #0
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <HAL_I2C_Init+0x17e>
 800d12e:	2301      	movs	r3, #1
 800d130:	e022      	b.n	800d178 <HAL_I2C_Init+0x1c4>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10e      	bne.n	800d158 <HAL_I2C_Init+0x1a4>
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	1e58      	subs	r0, r3, #1
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6859      	ldr	r1, [r3, #4]
 800d142:	460b      	mov	r3, r1
 800d144:	005b      	lsls	r3, r3, #1
 800d146:	440b      	add	r3, r1
 800d148:	fbb0 f3f3 	udiv	r3, r0, r3
 800d14c:	3301      	adds	r3, #1
 800d14e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d156:	e00f      	b.n	800d178 <HAL_I2C_Init+0x1c4>
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	1e58      	subs	r0, r3, #1
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6859      	ldr	r1, [r3, #4]
 800d160:	460b      	mov	r3, r1
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	440b      	add	r3, r1
 800d166:	0099      	lsls	r1, r3, #2
 800d168:	440b      	add	r3, r1
 800d16a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d16e:	3301      	adds	r3, #1
 800d170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d178:	6879      	ldr	r1, [r7, #4]
 800d17a:	6809      	ldr	r1, [r1, #0]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	69da      	ldr	r2, [r3, #28]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6a1b      	ldr	r3, [r3, #32]
 800d192:	431a      	orrs	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	430a      	orrs	r2, r1
 800d19a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d1a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	6911      	ldr	r1, [r2, #16]
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	68d2      	ldr	r2, [r2, #12]
 800d1b2:	4311      	orrs	r1, r2
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	6812      	ldr	r2, [r2, #0]
 800d1b8:	430b      	orrs	r3, r1
 800d1ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	695a      	ldr	r2, [r3, #20]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	431a      	orrs	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	430a      	orrs	r2, r1
 800d1d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f042 0201 	orr.w	r2, r2, #1
 800d1e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2220      	movs	r2, #32
 800d1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	000186a0 	.word	0x000186a0
 800d214:	001e847f 	.word	0x001e847f
 800d218:	003d08ff 	.word	0x003d08ff
 800d21c:	431bde83 	.word	0x431bde83
 800d220:	10624dd3 	.word	0x10624dd3

0800d224 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b088      	sub	sp, #32
 800d228:	af02      	add	r7, sp, #8
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	607a      	str	r2, [r7, #4]
 800d22e:	461a      	mov	r2, r3
 800d230:	460b      	mov	r3, r1
 800d232:	817b      	strh	r3, [r7, #10]
 800d234:	4613      	mov	r3, r2
 800d236:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d238:	f7ff f98c 	bl	800c554 <HAL_GetTick>
 800d23c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d244:	b2db      	uxtb	r3, r3
 800d246:	2b20      	cmp	r3, #32
 800d248:	f040 80e0 	bne.w	800d40c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	2319      	movs	r3, #25
 800d252:	2201      	movs	r2, #1
 800d254:	4970      	ldr	r1, [pc, #448]	; (800d418 <HAL_I2C_Master_Transmit+0x1f4>)
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	f001 f974 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d001      	beq.n	800d266 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d262:	2302      	movs	r3, #2
 800d264:	e0d3      	b.n	800d40e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d101      	bne.n	800d274 <HAL_I2C_Master_Transmit+0x50>
 800d270:	2302      	movs	r3, #2
 800d272:	e0cc      	b.n	800d40e <HAL_I2C_Master_Transmit+0x1ea>
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2201      	movs	r2, #1
 800d278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b01      	cmp	r3, #1
 800d288:	d007      	beq.n	800d29a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f042 0201 	orr.w	r2, r2, #1
 800d298:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d2a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2221      	movs	r2, #33	; 0x21
 800d2ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2210      	movs	r2, #16
 800d2b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	893a      	ldrh	r2, [r7, #8]
 800d2ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2d0:	b29a      	uxth	r2, r3
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	4a50      	ldr	r2, [pc, #320]	; (800d41c <HAL_I2C_Master_Transmit+0x1f8>)
 800d2da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d2dc:	8979      	ldrh	r1, [r7, #10]
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	6a3a      	ldr	r2, [r7, #32]
 800d2e2:	68f8      	ldr	r0, [r7, #12]
 800d2e4:	f000 fe60 	bl	800dfa8 <I2C_MasterRequestWrite>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e08d      	b.n	800d40e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	613b      	str	r3, [r7, #16]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	695b      	ldr	r3, [r3, #20]
 800d2fc:	613b      	str	r3, [r7, #16]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	613b      	str	r3, [r7, #16]
 800d306:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d308:	e066      	b.n	800d3d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d30a:	697a      	ldr	r2, [r7, #20]
 800d30c:	6a39      	ldr	r1, [r7, #32]
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f001 f9ee 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00d      	beq.n	800d336 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31e:	2b04      	cmp	r3, #4
 800d320:	d107      	bne.n	800d332 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d330:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d332:	2301      	movs	r3, #1
 800d334:	e06b      	b.n	800d40e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33a:	781a      	ldrb	r2, [r3, #0]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d346:	1c5a      	adds	r2, r3, #1
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d350:	b29b      	uxth	r3, r3
 800d352:	3b01      	subs	r3, #1
 800d354:	b29a      	uxth	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d35e:	3b01      	subs	r3, #1
 800d360:	b29a      	uxth	r2, r3
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	695b      	ldr	r3, [r3, #20]
 800d36c:	f003 0304 	and.w	r3, r3, #4
 800d370:	2b04      	cmp	r3, #4
 800d372:	d11b      	bne.n	800d3ac <HAL_I2C_Master_Transmit+0x188>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d017      	beq.n	800d3ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d380:	781a      	ldrb	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38c:	1c5a      	adds	r2, r3, #1
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d396:	b29b      	uxth	r3, r3
 800d398:	3b01      	subs	r3, #1
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	b29a      	uxth	r2, r3
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d3ac:	697a      	ldr	r2, [r7, #20]
 800d3ae:	6a39      	ldr	r1, [r7, #32]
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	f001 f9de 	bl	800e772 <I2C_WaitOnBTFFlagUntilTimeout>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00d      	beq.n	800d3d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c0:	2b04      	cmp	r3, #4
 800d3c2:	d107      	bne.n	800d3d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e01a      	b.n	800d40e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d194      	bne.n	800d30a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2220      	movs	r2, #32
 800d3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2200      	movs	r2, #0
 800d404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	e000      	b.n	800d40e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d40c:	2302      	movs	r3, #2
  }
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3718      	adds	r7, #24
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	00100002 	.word	0x00100002
 800d41c:	ffff0000 	.word	0xffff0000

0800d420 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b08c      	sub	sp, #48	; 0x30
 800d424:	af02      	add	r7, sp, #8
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	607a      	str	r2, [r7, #4]
 800d42a:	461a      	mov	r2, r3
 800d42c:	460b      	mov	r3, r1
 800d42e:	817b      	strh	r3, [r7, #10]
 800d430:	4613      	mov	r3, r2
 800d432:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800d434:	2300      	movs	r3, #0
 800d436:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d438:	f7ff f88c 	bl	800c554 <HAL_GetTick>
 800d43c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b20      	cmp	r3, #32
 800d448:	f040 8238 	bne.w	800d8bc <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44e:	9300      	str	r3, [sp, #0]
 800d450:	2319      	movs	r3, #25
 800d452:	2201      	movs	r2, #1
 800d454:	497e      	ldr	r1, [pc, #504]	; (800d650 <HAL_I2C_Master_Receive+0x230>)
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f001 f874 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800d462:	2302      	movs	r3, #2
 800d464:	e22b      	b.n	800d8be <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d101      	bne.n	800d474 <HAL_I2C_Master_Receive+0x54>
 800d470:	2302      	movs	r3, #2
 800d472:	e224      	b.n	800d8be <HAL_I2C_Master_Receive+0x49e>
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f003 0301 	and.w	r3, r3, #1
 800d486:	2b01      	cmp	r3, #1
 800d488:	d007      	beq.n	800d49a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f042 0201 	orr.w	r2, r2, #1
 800d498:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d4a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2222      	movs	r2, #34	; 0x22
 800d4ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2210      	movs	r2, #16
 800d4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	893a      	ldrh	r2, [r7, #8]
 800d4ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	4a5e      	ldr	r2, [pc, #376]	; (800d654 <HAL_I2C_Master_Receive+0x234>)
 800d4da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d4dc:	8979      	ldrh	r1, [r7, #10]
 800d4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f000 fde2 	bl	800e0ac <I2C_MasterRequestRead>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d001      	beq.n	800d4f2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e1e5      	b.n	800d8be <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d113      	bne.n	800d522 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	61fb      	str	r3, [r7, #28]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	695b      	ldr	r3, [r3, #20]
 800d504:	61fb      	str	r3, [r7, #28]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	699b      	ldr	r3, [r3, #24]
 800d50c:	61fb      	str	r3, [r7, #28]
 800d50e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d51e:	601a      	str	r2, [r3, #0]
 800d520:	e1b9      	b.n	800d896 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d526:	2b01      	cmp	r3, #1
 800d528:	d11d      	bne.n	800d566 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d538:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d53a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d53c:	2300      	movs	r3, #0
 800d53e:	61bb      	str	r3, [r7, #24]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	695b      	ldr	r3, [r3, #20]
 800d546:	61bb      	str	r3, [r7, #24]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	699b      	ldr	r3, [r3, #24]
 800d54e:	61bb      	str	r3, [r7, #24]
 800d550:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d560:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d562:	b662      	cpsie	i
 800d564:	e197      	b.n	800d896 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d11d      	bne.n	800d5aa <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d57c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800d57e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d580:	2300      	movs	r3, #0
 800d582:	617b      	str	r3, [r7, #20]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	695b      	ldr	r3, [r3, #20]
 800d58a:	617b      	str	r3, [r7, #20]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	699b      	ldr	r3, [r3, #24]
 800d592:	617b      	str	r3, [r7, #20]
 800d594:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d5a6:	b662      	cpsie	i
 800d5a8:	e175      	b.n	800d896 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d5b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	613b      	str	r3, [r7, #16]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	695b      	ldr	r3, [r3, #20]
 800d5c4:	613b      	str	r3, [r7, #16]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	699b      	ldr	r3, [r3, #24]
 800d5cc:	613b      	str	r3, [r7, #16]
 800d5ce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800d5d0:	e161      	b.n	800d896 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5d6:	2b03      	cmp	r3, #3
 800d5d8:	f200 811a 	bhi.w	800d810 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d123      	bne.n	800d62c <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d5e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f001 f903 	bl	800e7f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e162      	b.n	800d8be <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	691a      	ldr	r2, [r3, #16]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d602:	b2d2      	uxtb	r2, r2
 800d604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60a:	1c5a      	adds	r2, r3, #1
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d614:	3b01      	subs	r3, #1
 800d616:	b29a      	uxth	r2, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d620:	b29b      	uxth	r3, r3
 800d622:	3b01      	subs	r3, #1
 800d624:	b29a      	uxth	r2, r3
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d62a:	e134      	b.n	800d896 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d630:	2b02      	cmp	r3, #2
 800d632:	d150      	bne.n	800d6d6 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63a:	2200      	movs	r2, #0
 800d63c:	4906      	ldr	r1, [pc, #24]	; (800d658 <HAL_I2C_Master_Receive+0x238>)
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f000 ff80 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d008      	beq.n	800d65c <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800d64a:	2301      	movs	r3, #1
 800d64c:	e137      	b.n	800d8be <HAL_I2C_Master_Receive+0x49e>
 800d64e:	bf00      	nop
 800d650:	00100002 	.word	0x00100002
 800d654:	ffff0000 	.word	0xffff0000
 800d658:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800d65c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d66c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	691a      	ldr	r2, [r3, #16]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d678:	b2d2      	uxtb	r2, r2
 800d67a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d680:	1c5a      	adds	r2, r3, #1
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d68a:	3b01      	subs	r3, #1
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d696:	b29b      	uxth	r3, r3
 800d698:	3b01      	subs	r3, #1
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800d6a0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	691a      	ldr	r2, [r3, #16]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ac:	b2d2      	uxtb	r2, r2
 800d6ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d6d4:	e0df      	b.n	800d896 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	2200      	movs	r2, #0
 800d6de:	497a      	ldr	r1, [pc, #488]	; (800d8c8 <HAL_I2C_Master_Receive+0x4a8>)
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 ff2f 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d001      	beq.n	800d6f0 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e0e6      	b.n	800d8be <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800d700:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	691a      	ldr	r2, [r3, #16]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70c:	b2d2      	uxtb	r2, r2
 800d70e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d714:	1c5a      	adds	r2, r3, #1
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d71e:	3b01      	subs	r3, #1
 800d720:	b29a      	uxth	r2, r3
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	3b01      	subs	r3, #1
 800d72e:	b29a      	uxth	r2, r3
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d734:	4b65      	ldr	r3, [pc, #404]	; (800d8cc <HAL_I2C_Master_Receive+0x4ac>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	08db      	lsrs	r3, r3, #3
 800d73a:	4a65      	ldr	r2, [pc, #404]	; (800d8d0 <HAL_I2C_Master_Receive+0x4b0>)
 800d73c:	fba2 2303 	umull	r2, r3, r2, r3
 800d740:	0a1a      	lsrs	r2, r3, #8
 800d742:	4613      	mov	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4413      	add	r3, r2
 800d748:	00da      	lsls	r2, r3, #3
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	3b01      	subs	r3, #1
 800d752:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800d754:	6a3b      	ldr	r3, [r7, #32]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d117      	bne.n	800d78a <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2220      	movs	r2, #32
 800d764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d774:	f043 0220 	orr.w	r2, r3, #32
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800d77c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e099      	b.n	800d8be <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	695b      	ldr	r3, [r3, #20]
 800d790:	f003 0304 	and.w	r3, r3, #4
 800d794:	2b04      	cmp	r3, #4
 800d796:	d1da      	bne.n	800d74e <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	691a      	ldr	r2, [r3, #16]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b2:	b2d2      	uxtb	r2, r2
 800d7b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ba:	1c5a      	adds	r2, r3, #1
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d7da:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	691a      	ldr	r2, [r3, #16]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e6:	b2d2      	uxtb	r2, r2
 800d7e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ee:	1c5a      	adds	r2, r3, #1
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d804:	b29b      	uxth	r3, r3
 800d806:	3b01      	subs	r3, #1
 800d808:	b29a      	uxth	r2, r3
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d80e:	e042      	b.n	800d896 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f000 ffed 	bl	800e7f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d001      	beq.n	800d824 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	e04c      	b.n	800d8be <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	691a      	ldr	r2, [r3, #16]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82e:	b2d2      	uxtb	r2, r2
 800d830:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	1c5a      	adds	r2, r3, #1
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d840:	3b01      	subs	r3, #1
 800d842:	b29a      	uxth	r2, r3
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	3b01      	subs	r3, #1
 800d850:	b29a      	uxth	r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	695b      	ldr	r3, [r3, #20]
 800d85c:	f003 0304 	and.w	r3, r3, #4
 800d860:	2b04      	cmp	r3, #4
 800d862:	d118      	bne.n	800d896 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	691a      	ldr	r2, [r3, #16]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86e:	b2d2      	uxtb	r2, r2
 800d870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d876:	1c5a      	adds	r2, r3, #1
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d880:	3b01      	subs	r3, #1
 800d882:	b29a      	uxth	r2, r3
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	3b01      	subs	r3, #1
 800d890:	b29a      	uxth	r2, r3
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f47f ae99 	bne.w	800d5d2 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2220      	movs	r2, #32
 800d8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	e000      	b.n	800d8be <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800d8bc:	2302      	movs	r3, #2
  }
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3728      	adds	r7, #40	; 0x28
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	00010004 	.word	0x00010004
 800d8cc:	20000004 	.word	0x20000004
 800d8d0:	14f8b589 	.word	0x14f8b589

0800d8d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b088      	sub	sp, #32
 800d8d8:	af02      	add	r7, sp, #8
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	4608      	mov	r0, r1
 800d8de:	4611      	mov	r1, r2
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	817b      	strh	r3, [r7, #10]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	813b      	strh	r3, [r7, #8]
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d8ee:	f7fe fe31 	bl	800c554 <HAL_GetTick>
 800d8f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b20      	cmp	r3, #32
 800d8fe:	f040 80d9 	bne.w	800dab4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	2319      	movs	r3, #25
 800d908:	2201      	movs	r2, #1
 800d90a:	496d      	ldr	r1, [pc, #436]	; (800dac0 <HAL_I2C_Mem_Write+0x1ec>)
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f000 fe19 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d918:	2302      	movs	r3, #2
 800d91a:	e0cc      	b.n	800dab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d922:	2b01      	cmp	r3, #1
 800d924:	d101      	bne.n	800d92a <HAL_I2C_Mem_Write+0x56>
 800d926:	2302      	movs	r3, #2
 800d928:	e0c5      	b.n	800dab6 <HAL_I2C_Mem_Write+0x1e2>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2201      	movs	r2, #1
 800d92e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f003 0301 	and.w	r3, r3, #1
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d007      	beq.n	800d950 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f042 0201 	orr.w	r2, r2, #1
 800d94e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d95e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2221      	movs	r2, #33	; 0x21
 800d964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2240      	movs	r2, #64	; 0x40
 800d96c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2200      	movs	r2, #0
 800d974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6a3a      	ldr	r2, [r7, #32]
 800d97a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d980:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d986:	b29a      	uxth	r2, r3
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	4a4d      	ldr	r2, [pc, #308]	; (800dac4 <HAL_I2C_Mem_Write+0x1f0>)
 800d990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d992:	88f8      	ldrh	r0, [r7, #6]
 800d994:	893a      	ldrh	r2, [r7, #8]
 800d996:	8979      	ldrh	r1, [r7, #10]
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	9301      	str	r3, [sp, #4]
 800d99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	f000 fc50 	bl	800e248 <I2C_RequestMemoryWrite>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d052      	beq.n	800da54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e081      	b.n	800dab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d9b2:	697a      	ldr	r2, [r7, #20]
 800d9b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f000 fe9a 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00d      	beq.n	800d9de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c6:	2b04      	cmp	r3, #4
 800d9c8:	d107      	bne.n	800d9da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e06b      	b.n	800dab6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e2:	781a      	ldrb	r2, [r3, #0]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ee:	1c5a      	adds	r2, r3, #1
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da04:	b29b      	uxth	r3, r3
 800da06:	3b01      	subs	r3, #1
 800da08:	b29a      	uxth	r2, r3
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	695b      	ldr	r3, [r3, #20]
 800da14:	f003 0304 	and.w	r3, r3, #4
 800da18:	2b04      	cmp	r3, #4
 800da1a:	d11b      	bne.n	800da54 <HAL_I2C_Mem_Write+0x180>
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da20:	2b00      	cmp	r3, #0
 800da22:	d017      	beq.n	800da54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da28:	781a      	ldrb	r2, [r3, #0]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da34:	1c5a      	adds	r2, r3, #1
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da3e:	3b01      	subs	r3, #1
 800da40:	b29a      	uxth	r2, r3
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	3b01      	subs	r3, #1
 800da4e:	b29a      	uxth	r2, r3
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1aa      	bne.n	800d9b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da5c:	697a      	ldr	r2, [r7, #20]
 800da5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da60:	68f8      	ldr	r0, [r7, #12]
 800da62:	f000 fe86 	bl	800e772 <I2C_WaitOnBTFFlagUntilTimeout>
 800da66:	4603      	mov	r3, r0
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00d      	beq.n	800da88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da70:	2b04      	cmp	r3, #4
 800da72:	d107      	bne.n	800da84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800da84:	2301      	movs	r3, #1
 800da86:	e016      	b.n	800dab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2220      	movs	r2, #32
 800da9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2200      	movs	r2, #0
 800daac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dab0:	2300      	movs	r3, #0
 800dab2:	e000      	b.n	800dab6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800dab4:	2302      	movs	r3, #2
  }
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3718      	adds	r7, #24
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	00100002 	.word	0x00100002
 800dac4:	ffff0000 	.word	0xffff0000

0800dac8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b08c      	sub	sp, #48	; 0x30
 800dacc:	af02      	add	r7, sp, #8
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	4608      	mov	r0, r1
 800dad2:	4611      	mov	r1, r2
 800dad4:	461a      	mov	r2, r3
 800dad6:	4603      	mov	r3, r0
 800dad8:	817b      	strh	r3, [r7, #10]
 800dada:	460b      	mov	r3, r1
 800dadc:	813b      	strh	r3, [r7, #8]
 800dade:	4613      	mov	r3, r2
 800dae0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800dae2:	2300      	movs	r3, #0
 800dae4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dae6:	f7fe fd35 	bl	800c554 <HAL_GetTick>
 800daea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	2b20      	cmp	r3, #32
 800daf6:	f040 823d 	bne.w	800df74 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	2319      	movs	r3, #25
 800db00:	2201      	movs	r2, #1
 800db02:	4981      	ldr	r1, [pc, #516]	; (800dd08 <HAL_I2C_Mem_Read+0x240>)
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f000 fd1d 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800db10:	2302      	movs	r3, #2
 800db12:	e230      	b.n	800df76 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d101      	bne.n	800db22 <HAL_I2C_Mem_Read+0x5a>
 800db1e:	2302      	movs	r3, #2
 800db20:	e229      	b.n	800df76 <HAL_I2C_Mem_Read+0x4ae>
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2201      	movs	r2, #1
 800db26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f003 0301 	and.w	r3, r3, #1
 800db34:	2b01      	cmp	r3, #1
 800db36:	d007      	beq.n	800db48 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f042 0201 	orr.w	r2, r2, #1
 800db46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2222      	movs	r2, #34	; 0x22
 800db5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2240      	movs	r2, #64	; 0x40
 800db64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2200      	movs	r2, #0
 800db6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800db78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db7e:	b29a      	uxth	r2, r3
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	4a61      	ldr	r2, [pc, #388]	; (800dd0c <HAL_I2C_Mem_Read+0x244>)
 800db88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800db8a:	88f8      	ldrh	r0, [r7, #6]
 800db8c:	893a      	ldrh	r2, [r7, #8]
 800db8e:	8979      	ldrh	r1, [r7, #10]
 800db90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db92:	9301      	str	r3, [sp, #4]
 800db94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	4603      	mov	r3, r0
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f000 fbea 	bl	800e374 <I2C_RequestMemoryRead>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d001      	beq.n	800dbaa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e1e5      	b.n	800df76 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d113      	bne.n	800dbda <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	61fb      	str	r3, [r7, #28]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	695b      	ldr	r3, [r3, #20]
 800dbbc:	61fb      	str	r3, [r7, #28]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	699b      	ldr	r3, [r3, #24]
 800dbc4:	61fb      	str	r3, [r7, #28]
 800dbc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbd6:	601a      	str	r2, [r3, #0]
 800dbd8:	e1b9      	b.n	800df4e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d11d      	bne.n	800dc1e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbf0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbf2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	61bb      	str	r3, [r7, #24]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	695b      	ldr	r3, [r3, #20]
 800dbfe:	61bb      	str	r3, [r7, #24]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	699b      	ldr	r3, [r3, #24]
 800dc06:	61bb      	str	r3, [r7, #24]
 800dc08:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800dc1a:	b662      	cpsie	i
 800dc1c:	e197      	b.n	800df4e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	d11d      	bne.n	800dc62 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc36:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc38:	2300      	movs	r3, #0
 800dc3a:	617b      	str	r3, [r7, #20]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	617b      	str	r3, [r7, #20]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	699b      	ldr	r3, [r3, #24]
 800dc4a:	617b      	str	r3, [r7, #20]
 800dc4c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800dc5e:	b662      	cpsie	i
 800dc60:	e175      	b.n	800df4e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc70:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc72:	2300      	movs	r3, #0
 800dc74:	613b      	str	r3, [r7, #16]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	695b      	ldr	r3, [r3, #20]
 800dc7c:	613b      	str	r3, [r7, #16]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	613b      	str	r3, [r7, #16]
 800dc86:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800dc88:	e161      	b.n	800df4e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc8e:	2b03      	cmp	r3, #3
 800dc90:	f200 811a 	bhi.w	800dec8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d123      	bne.n	800dce4 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f000 fda7 	bl	800e7f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d001      	beq.n	800dcb0 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 800dcac:	2301      	movs	r3, #1
 800dcae:	e162      	b.n	800df76 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	691a      	ldr	r2, [r3, #16]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcba:	b2d2      	uxtb	r2, r2
 800dcbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc2:	1c5a      	adds	r2, r3, #1
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dccc:	3b01      	subs	r3, #1
 800dcce:	b29a      	uxth	r2, r3
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	3b01      	subs	r3, #1
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dce2:	e134      	b.n	800df4e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	d150      	bne.n	800dd8e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	4906      	ldr	r1, [pc, #24]	; (800dd10 <HAL_I2C_Mem_Read+0x248>)
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f000 fc24 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d008      	beq.n	800dd14 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800dd02:	2301      	movs	r3, #1
 800dd04:	e137      	b.n	800df76 <HAL_I2C_Mem_Read+0x4ae>
 800dd06:	bf00      	nop
 800dd08:	00100002 	.word	0x00100002
 800dd0c:	ffff0000 	.word	0xffff0000
 800dd10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800dd14:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd24:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	691a      	ldr	r2, [r3, #16]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd30:	b2d2      	uxtb	r2, r2
 800dd32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd38:	1c5a      	adds	r2, r3, #1
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd42:	3b01      	subs	r3, #1
 800dd44:	b29a      	uxth	r2, r3
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	3b01      	subs	r3, #1
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800dd58:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	691a      	ldr	r2, [r3, #16]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd64:	b2d2      	uxtb	r2, r2
 800dd66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6c:	1c5a      	adds	r2, r3, #1
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd76:	3b01      	subs	r3, #1
 800dd78:	b29a      	uxth	r2, r3
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	3b01      	subs	r3, #1
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dd8c:	e0df      	b.n	800df4e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd94:	2200      	movs	r2, #0
 800dd96:	497a      	ldr	r1, [pc, #488]	; (800df80 <HAL_I2C_Mem_Read+0x4b8>)
 800dd98:	68f8      	ldr	r0, [r7, #12]
 800dd9a:	f000 fbd3 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d001      	beq.n	800dda8 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 800dda4:	2301      	movs	r3, #1
 800dda6:	e0e6      	b.n	800df76 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ddb8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	691a      	ldr	r2, [r3, #16]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc4:	b2d2      	uxtb	r2, r2
 800ddc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddcc:	1c5a      	adds	r2, r3, #1
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddd6:	3b01      	subs	r3, #1
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	3b01      	subs	r3, #1
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800ddec:	4b65      	ldr	r3, [pc, #404]	; (800df84 <HAL_I2C_Mem_Read+0x4bc>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	08db      	lsrs	r3, r3, #3
 800ddf2:	4a65      	ldr	r2, [pc, #404]	; (800df88 <HAL_I2C_Mem_Read+0x4c0>)
 800ddf4:	fba2 2303 	umull	r2, r3, r2, r3
 800ddf8:	0a1a      	lsrs	r2, r3, #8
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	4413      	add	r3, r2
 800de00:	00da      	lsls	r2, r3, #3
 800de02:	1ad3      	subs	r3, r2, r3
 800de04:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800de06:	6a3b      	ldr	r3, [r7, #32]
 800de08:	3b01      	subs	r3, #1
 800de0a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d117      	bne.n	800de42 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2200      	movs	r2, #0
 800de16:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2220      	movs	r2, #32
 800de1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2200      	movs	r2, #0
 800de24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de2c:	f043 0220 	orr.w	r2, r3, #32
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800de34:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	e099      	b.n	800df76 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	695b      	ldr	r3, [r3, #20]
 800de48:	f003 0304 	and.w	r3, r3, #4
 800de4c:	2b04      	cmp	r3, #4
 800de4e:	d1da      	bne.n	800de06 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	681a      	ldr	r2, [r3, #0]
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	691a      	ldr	r2, [r3, #16]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6a:	b2d2      	uxtb	r2, r2
 800de6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de72:	1c5a      	adds	r2, r3, #1
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de7c:	3b01      	subs	r3, #1
 800de7e:	b29a      	uxth	r2, r3
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de88:	b29b      	uxth	r3, r3
 800de8a:	3b01      	subs	r3, #1
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	855a      	strh	r2, [r3, #42]	; 0x2a
 800de92:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	691a      	ldr	r2, [r3, #16]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9e:	b2d2      	uxtb	r2, r2
 800dea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea6:	1c5a      	adds	r2, r3, #1
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800deb0:	3b01      	subs	r3, #1
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800debc:	b29b      	uxth	r3, r3
 800debe:	3b01      	subs	r3, #1
 800dec0:	b29a      	uxth	r2, r3
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dec6:	e042      	b.n	800df4e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f000 fc91 	bl	800e7f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 800ded8:	2301      	movs	r3, #1
 800deda:	e04c      	b.n	800df76 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	691a      	ldr	r2, [r3, #16]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee6:	b2d2      	uxtb	r2, r2
 800dee8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deee:	1c5a      	adds	r2, r3, #1
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800def8:	3b01      	subs	r3, #1
 800defa:	b29a      	uxth	r2, r3
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df04:	b29b      	uxth	r3, r3
 800df06:	3b01      	subs	r3, #1
 800df08:	b29a      	uxth	r2, r3
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	695b      	ldr	r3, [r3, #20]
 800df14:	f003 0304 	and.w	r3, r3, #4
 800df18:	2b04      	cmp	r3, #4
 800df1a:	d118      	bne.n	800df4e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	691a      	ldr	r2, [r3, #16]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df26:	b2d2      	uxtb	r2, r2
 800df28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2e:	1c5a      	adds	r2, r3, #1
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df38:	3b01      	subs	r3, #1
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df44:	b29b      	uxth	r3, r3
 800df46:	3b01      	subs	r3, #1
 800df48:	b29a      	uxth	r2, r3
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df52:	2b00      	cmp	r3, #0
 800df54:	f47f ae99 	bne.w	800dc8a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2220      	movs	r2, #32
 800df5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2200      	movs	r2, #0
 800df64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2200      	movs	r2, #0
 800df6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800df70:	2300      	movs	r3, #0
 800df72:	e000      	b.n	800df76 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 800df74:	2302      	movs	r3, #2
  }
}
 800df76:	4618      	mov	r0, r3
 800df78:	3728      	adds	r7, #40	; 0x28
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	00010004 	.word	0x00010004
 800df84:	20000004 	.word	0x20000004
 800df88:	14f8b589 	.word	0x14f8b589

0800df8c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df9a:	b2db      	uxtb	r3, r3
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	370c      	adds	r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bc80      	pop	{r7}
 800dfa4:	4770      	bx	lr
	...

0800dfa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b088      	sub	sp, #32
 800dfac:	af02      	add	r7, sp, #8
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	607a      	str	r2, [r7, #4]
 800dfb2:	603b      	str	r3, [r7, #0]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2b08      	cmp	r3, #8
 800dfc2:	d006      	beq.n	800dfd2 <I2C_MasterRequestWrite+0x2a>
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d003      	beq.n	800dfd2 <I2C_MasterRequestWrite+0x2a>
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dfd0:	d108      	bne.n	800dfe4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dfe0:	601a      	str	r2, [r3, #0]
 800dfe2:	e00b      	b.n	800dffc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe8:	2b12      	cmp	r3, #18
 800dfea:	d107      	bne.n	800dffc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dffa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f000 fa9b 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00d      	beq.n	800e030 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e01e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e022:	d103      	bne.n	800e02c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e02a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e02c:	2303      	movs	r3, #3
 800e02e:	e035      	b.n	800e09c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	691b      	ldr	r3, [r3, #16]
 800e034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e038:	d108      	bne.n	800e04c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e03a:	897b      	ldrh	r3, [r7, #10]
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	461a      	mov	r2, r3
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e048:	611a      	str	r2, [r3, #16]
 800e04a:	e01b      	b.n	800e084 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e04c:	897b      	ldrh	r3, [r7, #10]
 800e04e:	11db      	asrs	r3, r3, #7
 800e050:	b2db      	uxtb	r3, r3
 800e052:	f003 0306 	and.w	r3, r3, #6
 800e056:	b2db      	uxtb	r3, r3
 800e058:	f063 030f 	orn	r3, r3, #15
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	490e      	ldr	r1, [pc, #56]	; (800e0a4 <I2C_MasterRequestWrite+0xfc>)
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f000 fac1 	bl	800e5f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d001      	beq.n	800e07a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	e010      	b.n	800e09c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e07a:	897b      	ldrh	r3, [r7, #10]
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	4907      	ldr	r1, [pc, #28]	; (800e0a8 <I2C_MasterRequestWrite+0x100>)
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	f000 fab1 	bl	800e5f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d001      	beq.n	800e09a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e096:	2301      	movs	r3, #1
 800e098:	e000      	b.n	800e09c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3718      	adds	r7, #24
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	00010008 	.word	0x00010008
 800e0a8:	00010002 	.word	0x00010002

0800e0ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b088      	sub	sp, #32
 800e0b0:	af02      	add	r7, sp, #8
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	607a      	str	r2, [r7, #4]
 800e0b6:	603b      	str	r3, [r7, #0]
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e0d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	2b08      	cmp	r3, #8
 800e0d6:	d006      	beq.n	800e0e6 <I2C_MasterRequestRead+0x3a>
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d003      	beq.n	800e0e6 <I2C_MasterRequestRead+0x3a>
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e0e4:	d108      	bne.n	800e0f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	e00b      	b.n	800e110 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0fc:	2b11      	cmp	r3, #17
 800e0fe:	d107      	bne.n	800e110 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e10e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	9300      	str	r3, [sp, #0]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f000 fa11 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00d      	beq.n	800e144 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e136:	d103      	bne.n	800e140 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e13e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e140:	2303      	movs	r3, #3
 800e142:	e079      	b.n	800e238 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e14c:	d108      	bne.n	800e160 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e14e:	897b      	ldrh	r3, [r7, #10]
 800e150:	b2db      	uxtb	r3, r3
 800e152:	f043 0301 	orr.w	r3, r3, #1
 800e156:	b2da      	uxtb	r2, r3
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	611a      	str	r2, [r3, #16]
 800e15e:	e05f      	b.n	800e220 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e160:	897b      	ldrh	r3, [r7, #10]
 800e162:	11db      	asrs	r3, r3, #7
 800e164:	b2db      	uxtb	r3, r3
 800e166:	f003 0306 	and.w	r3, r3, #6
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	f063 030f 	orn	r3, r3, #15
 800e170:	b2da      	uxtb	r2, r3
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	4930      	ldr	r1, [pc, #192]	; (800e240 <I2C_MasterRequestRead+0x194>)
 800e17e:	68f8      	ldr	r0, [r7, #12]
 800e180:	f000 fa37 	bl	800e5f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	d001      	beq.n	800e18e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e18a:	2301      	movs	r3, #1
 800e18c:	e054      	b.n	800e238 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e18e:	897b      	ldrh	r3, [r7, #10]
 800e190:	b2da      	uxtb	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	4929      	ldr	r1, [pc, #164]	; (800e244 <I2C_MasterRequestRead+0x198>)
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f000 fa27 	bl	800e5f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e044      	b.n	800e238 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	613b      	str	r3, [r7, #16]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	695b      	ldr	r3, [r3, #20]
 800e1b8:	613b      	str	r3, [r7, #16]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	613b      	str	r3, [r7, #16]
 800e1c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	f000 f9af 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00d      	beq.n	800e208 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1fa:	d103      	bne.n	800e204 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e202:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e204:	2303      	movs	r3, #3
 800e206:	e017      	b.n	800e238 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e208:	897b      	ldrh	r3, [r7, #10]
 800e20a:	11db      	asrs	r3, r3, #7
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	f003 0306 	and.w	r3, r3, #6
 800e212:	b2db      	uxtb	r3, r3
 800e214:	f063 030e 	orn	r3, r3, #14
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	4907      	ldr	r1, [pc, #28]	; (800e244 <I2C_MasterRequestRead+0x198>)
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f000 f9e3 	bl	800e5f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	e000      	b.n	800e238 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3718      	adds	r7, #24
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	00010008 	.word	0x00010008
 800e244:	00010002 	.word	0x00010002

0800e248 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b088      	sub	sp, #32
 800e24c:	af02      	add	r7, sp, #8
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	4608      	mov	r0, r1
 800e252:	4611      	mov	r1, r2
 800e254:	461a      	mov	r2, r3
 800e256:	4603      	mov	r3, r0
 800e258:	817b      	strh	r3, [r7, #10]
 800e25a:	460b      	mov	r3, r1
 800e25c:	813b      	strh	r3, [r7, #8]
 800e25e:	4613      	mov	r3, r2
 800e260:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e274:	9300      	str	r3, [sp, #0]
 800e276:	6a3b      	ldr	r3, [r7, #32]
 800e278:	2200      	movs	r2, #0
 800e27a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f000 f960 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00d      	beq.n	800e2a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e298:	d103      	bne.n	800e2a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e2a2:	2303      	movs	r3, #3
 800e2a4:	e05f      	b.n	800e366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e2a6:	897b      	ldrh	r3, [r7, #10]
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e2b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b8:	6a3a      	ldr	r2, [r7, #32]
 800e2ba:	492d      	ldr	r1, [pc, #180]	; (800e370 <I2C_RequestMemoryWrite+0x128>)
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f000 f998 	bl	800e5f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e04c      	b.n	800e366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	617b      	str	r3, [r7, #20]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	695b      	ldr	r3, [r3, #20]
 800e2d6:	617b      	str	r3, [r7, #20]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	699b      	ldr	r3, [r3, #24]
 800e2de:	617b      	str	r3, [r7, #20]
 800e2e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2e4:	6a39      	ldr	r1, [r7, #32]
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f000 fa02 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00d      	beq.n	800e30e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2f6:	2b04      	cmp	r3, #4
 800e2f8:	d107      	bne.n	800e30a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e308:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e30a:	2301      	movs	r3, #1
 800e30c:	e02b      	b.n	800e366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e30e:	88fb      	ldrh	r3, [r7, #6]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d105      	bne.n	800e320 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e314:	893b      	ldrh	r3, [r7, #8]
 800e316:	b2da      	uxtb	r2, r3
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	611a      	str	r2, [r3, #16]
 800e31e:	e021      	b.n	800e364 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e320:	893b      	ldrh	r3, [r7, #8]
 800e322:	0a1b      	lsrs	r3, r3, #8
 800e324:	b29b      	uxth	r3, r3
 800e326:	b2da      	uxtb	r2, r3
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e32e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e330:	6a39      	ldr	r1, [r7, #32]
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	f000 f9dc 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00d      	beq.n	800e35a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e342:	2b04      	cmp	r3, #4
 800e344:	d107      	bne.n	800e356 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e354:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e356:	2301      	movs	r3, #1
 800e358:	e005      	b.n	800e366 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e35a:	893b      	ldrh	r3, [r7, #8]
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e364:	2300      	movs	r3, #0
}
 800e366:	4618      	mov	r0, r3
 800e368:	3718      	adds	r7, #24
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	00010002 	.word	0x00010002

0800e374 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b088      	sub	sp, #32
 800e378:	af02      	add	r7, sp, #8
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	4608      	mov	r0, r1
 800e37e:	4611      	mov	r1, r2
 800e380:	461a      	mov	r2, r3
 800e382:	4603      	mov	r3, r0
 800e384:	817b      	strh	r3, [r7, #10]
 800e386:	460b      	mov	r3, r1
 800e388:	813b      	strh	r3, [r7, #8]
 800e38a:	4613      	mov	r3, r2
 800e38c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e39c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e3ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f000 f8c2 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00d      	beq.n	800e3e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3d4:	d103      	bne.n	800e3de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e3de:	2303      	movs	r3, #3
 800e3e0:	e0aa      	b.n	800e538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e3e2:	897b      	ldrh	r3, [r7, #10]
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e3f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f4:	6a3a      	ldr	r2, [r7, #32]
 800e3f6:	4952      	ldr	r1, [pc, #328]	; (800e540 <I2C_RequestMemoryRead+0x1cc>)
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f000 f8fa 	bl	800e5f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e404:	2301      	movs	r3, #1
 800e406:	e097      	b.n	800e538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e408:	2300      	movs	r3, #0
 800e40a:	617b      	str	r3, [r7, #20]
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	695b      	ldr	r3, [r3, #20]
 800e412:	617b      	str	r3, [r7, #20]
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	699b      	ldr	r3, [r3, #24]
 800e41a:	617b      	str	r3, [r7, #20]
 800e41c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e420:	6a39      	ldr	r1, [r7, #32]
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f000 f964 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00d      	beq.n	800e44a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e432:	2b04      	cmp	r3, #4
 800e434:	d107      	bne.n	800e446 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e446:	2301      	movs	r3, #1
 800e448:	e076      	b.n	800e538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e44a:	88fb      	ldrh	r3, [r7, #6]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d105      	bne.n	800e45c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e450:	893b      	ldrh	r3, [r7, #8]
 800e452:	b2da      	uxtb	r2, r3
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	611a      	str	r2, [r3, #16]
 800e45a:	e021      	b.n	800e4a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e45c:	893b      	ldrh	r3, [r7, #8]
 800e45e:	0a1b      	lsrs	r3, r3, #8
 800e460:	b29b      	uxth	r3, r3
 800e462:	b2da      	uxtb	r2, r3
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e46c:	6a39      	ldr	r1, [r7, #32]
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	f000 f93e 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00d      	beq.n	800e496 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e47e:	2b04      	cmp	r3, #4
 800e480:	d107      	bne.n	800e492 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e492:	2301      	movs	r3, #1
 800e494:	e050      	b.n	800e538 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e496:	893b      	ldrh	r3, [r7, #8]
 800e498:	b2da      	uxtb	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4a2:	6a39      	ldr	r1, [r7, #32]
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f000 f923 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00d      	beq.n	800e4cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	d107      	bne.n	800e4c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e4c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e035      	b.n	800e538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e4da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	6a3b      	ldr	r3, [r7, #32]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e4e8:	68f8      	ldr	r0, [r7, #12]
 800e4ea:	f000 f82b 	bl	800e544 <I2C_WaitOnFlagUntilTimeout>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00d      	beq.n	800e510 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e502:	d103      	bne.n	800e50c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e50a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e50c:	2303      	movs	r3, #3
 800e50e:	e013      	b.n	800e538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e510:	897b      	ldrh	r3, [r7, #10]
 800e512:	b2db      	uxtb	r3, r3
 800e514:	f043 0301 	orr.w	r3, r3, #1
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e522:	6a3a      	ldr	r2, [r7, #32]
 800e524:	4906      	ldr	r1, [pc, #24]	; (800e540 <I2C_RequestMemoryRead+0x1cc>)
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	f000 f863 	bl	800e5f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d001      	beq.n	800e536 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e532:	2301      	movs	r3, #1
 800e534:	e000      	b.n	800e538 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e536:	2300      	movs	r3, #0
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3718      	adds	r7, #24
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	00010002 	.word	0x00010002

0800e544 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	603b      	str	r3, [r7, #0]
 800e550:	4613      	mov	r3, r2
 800e552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e554:	e025      	b.n	800e5a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e55c:	d021      	beq.n	800e5a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e55e:	f7fd fff9 	bl	800c554 <HAL_GetTick>
 800e562:	4602      	mov	r2, r0
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	683a      	ldr	r2, [r7, #0]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d302      	bcc.n	800e574 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d116      	bne.n	800e5a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2200      	movs	r2, #0
 800e578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2220      	movs	r2, #32
 800e57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2200      	movs	r2, #0
 800e586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e58e:	f043 0220 	orr.w	r2, r3, #32
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e023      	b.n	800e5ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	0c1b      	lsrs	r3, r3, #16
 800e5a6:	b2db      	uxtb	r3, r3
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d10d      	bne.n	800e5c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	695b      	ldr	r3, [r3, #20]
 800e5b2:	43da      	mvns	r2, r3
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	4013      	ands	r3, r2
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	bf0c      	ite	eq
 800e5be:	2301      	moveq	r3, #1
 800e5c0:	2300      	movne	r3, #0
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	e00c      	b.n	800e5e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	699b      	ldr	r3, [r3, #24]
 800e5ce:	43da      	mvns	r2, r3
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	4013      	ands	r3, r2
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	bf0c      	ite	eq
 800e5da:	2301      	moveq	r3, #1
 800e5dc:	2300      	movne	r3, #0
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	79fb      	ldrb	r3, [r7, #7]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d0b6      	beq.n	800e556 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b084      	sub	sp, #16
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	60f8      	str	r0, [r7, #12]
 800e5fa:	60b9      	str	r1, [r7, #8]
 800e5fc:	607a      	str	r2, [r7, #4]
 800e5fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e600:	e051      	b.n	800e6a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	695b      	ldr	r3, [r3, #20]
 800e608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e60c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e610:	d123      	bne.n	800e65a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e620:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e62a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2200      	movs	r2, #0
 800e630:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2220      	movs	r2, #32
 800e636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2200      	movs	r2, #0
 800e63e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e646:	f043 0204 	orr.w	r2, r3, #4
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2200      	movs	r2, #0
 800e652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e656:	2301      	movs	r3, #1
 800e658:	e046      	b.n	800e6e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e660:	d021      	beq.n	800e6a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e662:	f7fd ff77 	bl	800c554 <HAL_GetTick>
 800e666:	4602      	mov	r2, r0
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d302      	bcc.n	800e678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d116      	bne.n	800e6a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2200      	movs	r2, #0
 800e67c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2220      	movs	r2, #32
 800e682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2200      	movs	r2, #0
 800e68a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e692:	f043 0220 	orr.w	r2, r3, #32
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2200      	movs	r2, #0
 800e69e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e020      	b.n	800e6e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	0c1b      	lsrs	r3, r3, #16
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d10c      	bne.n	800e6ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	695b      	ldr	r3, [r3, #20]
 800e6b6:	43da      	mvns	r2, r3
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	4013      	ands	r3, r2
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	bf14      	ite	ne
 800e6c2:	2301      	movne	r3, #1
 800e6c4:	2300      	moveq	r3, #0
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	e00b      	b.n	800e6e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	699b      	ldr	r3, [r3, #24]
 800e6d0:	43da      	mvns	r2, r3
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	bf14      	ite	ne
 800e6dc:	2301      	movne	r3, #1
 800e6de:	2300      	moveq	r3, #0
 800e6e0:	b2db      	uxtb	r3, r3
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d18d      	bne.n	800e602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e6fc:	e02d      	b.n	800e75a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f000 f8ce 	bl	800e8a0 <I2C_IsAcknowledgeFailed>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	d001      	beq.n	800e70e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	e02d      	b.n	800e76a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e714:	d021      	beq.n	800e75a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e716:	f7fd ff1d 	bl	800c554 <HAL_GetTick>
 800e71a:	4602      	mov	r2, r0
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	1ad3      	subs	r3, r2, r3
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	429a      	cmp	r2, r3
 800e724:	d302      	bcc.n	800e72c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d116      	bne.n	800e75a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2200      	movs	r2, #0
 800e730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2220      	movs	r2, #32
 800e736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e746:	f043 0220 	orr.w	r2, r3, #32
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2200      	movs	r2, #0
 800e752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e756:	2301      	movs	r3, #1
 800e758:	e007      	b.n	800e76a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	695b      	ldr	r3, [r3, #20]
 800e760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e764:	2b80      	cmp	r3, #128	; 0x80
 800e766:	d1ca      	bne.n	800e6fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e768:	2300      	movs	r3, #0
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3710      	adds	r7, #16
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e772:	b580      	push	{r7, lr}
 800e774:	b084      	sub	sp, #16
 800e776:	af00      	add	r7, sp, #0
 800e778:	60f8      	str	r0, [r7, #12]
 800e77a:	60b9      	str	r1, [r7, #8]
 800e77c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e77e:	e02d      	b.n	800e7dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f000 f88d 	bl	800e8a0 <I2C_IsAcknowledgeFailed>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d001      	beq.n	800e790 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e78c:	2301      	movs	r3, #1
 800e78e:	e02d      	b.n	800e7ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e796:	d021      	beq.n	800e7dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e798:	f7fd fedc 	bl	800c554 <HAL_GetTick>
 800e79c:	4602      	mov	r2, r0
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d302      	bcc.n	800e7ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d116      	bne.n	800e7dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2220      	movs	r2, #32
 800e7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c8:	f043 0220 	orr.w	r2, r3, #32
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	e007      	b.n	800e7ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	695b      	ldr	r3, [r3, #20]
 800e7e2:	f003 0304 	and.w	r3, r3, #4
 800e7e6:	2b04      	cmp	r3, #4
 800e7e8:	d1ca      	bne.n	800e780 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b084      	sub	sp, #16
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e800:	e042      	b.n	800e888 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	f003 0310 	and.w	r3, r3, #16
 800e80c:	2b10      	cmp	r3, #16
 800e80e:	d119      	bne.n	800e844 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f06f 0210 	mvn.w	r2, #16
 800e818:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2200      	movs	r2, #0
 800e81e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2220      	movs	r2, #32
 800e824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2200      	movs	r2, #0
 800e82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e840:	2301      	movs	r3, #1
 800e842:	e029      	b.n	800e898 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e844:	f7fd fe86 	bl	800c554 <HAL_GetTick>
 800e848:	4602      	mov	r2, r0
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	1ad3      	subs	r3, r2, r3
 800e84e:	68ba      	ldr	r2, [r7, #8]
 800e850:	429a      	cmp	r2, r3
 800e852:	d302      	bcc.n	800e85a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d116      	bne.n	800e888 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2200      	movs	r2, #0
 800e85e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2220      	movs	r2, #32
 800e864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e874:	f043 0220 	orr.w	r2, r3, #32
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	2200      	movs	r2, #0
 800e880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e884:	2301      	movs	r3, #1
 800e886:	e007      	b.n	800e898 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	695b      	ldr	r3, [r3, #20]
 800e88e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e892:	2b40      	cmp	r3, #64	; 0x40
 800e894:	d1b5      	bne.n	800e802 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	695b      	ldr	r3, [r3, #20]
 800e8ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8b6:	d11b      	bne.n	800e8f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e8c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2220      	movs	r2, #32
 800e8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8dc:	f043 0204 	orr.w	r2, r3, #4
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	e000      	b.n	800e8f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bc80      	pop	{r7}
 800e8fa:	4770      	bx	lr

0800e8fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b086      	sub	sp, #24
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d101      	bne.n	800e90e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	e26c      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f003 0301 	and.w	r3, r3, #1
 800e916:	2b00      	cmp	r3, #0
 800e918:	f000 8087 	beq.w	800ea2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e91c:	4b92      	ldr	r3, [pc, #584]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	f003 030c 	and.w	r3, r3, #12
 800e924:	2b04      	cmp	r3, #4
 800e926:	d00c      	beq.n	800e942 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800e928:	4b8f      	ldr	r3, [pc, #572]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	f003 030c 	and.w	r3, r3, #12
 800e930:	2b08      	cmp	r3, #8
 800e932:	d112      	bne.n	800e95a <HAL_RCC_OscConfig+0x5e>
 800e934:	4b8c      	ldr	r3, [pc, #560]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e93c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e940:	d10b      	bne.n	800e95a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e942:	4b89      	ldr	r3, [pc, #548]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d06c      	beq.n	800ea28 <HAL_RCC_OscConfig+0x12c>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d168      	bne.n	800ea28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800e956:	2301      	movs	r3, #1
 800e958:	e246      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e962:	d106      	bne.n	800e972 <HAL_RCC_OscConfig+0x76>
 800e964:	4b80      	ldr	r3, [pc, #512]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a7f      	ldr	r2, [pc, #508]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e96a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e96e:	6013      	str	r3, [r2, #0]
 800e970:	e02e      	b.n	800e9d0 <HAL_RCC_OscConfig+0xd4>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d10c      	bne.n	800e994 <HAL_RCC_OscConfig+0x98>
 800e97a:	4b7b      	ldr	r3, [pc, #492]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a7a      	ldr	r2, [pc, #488]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e984:	6013      	str	r3, [r2, #0]
 800e986:	4b78      	ldr	r3, [pc, #480]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a77      	ldr	r2, [pc, #476]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e98c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e990:	6013      	str	r3, [r2, #0]
 800e992:	e01d      	b.n	800e9d0 <HAL_RCC_OscConfig+0xd4>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e99c:	d10c      	bne.n	800e9b8 <HAL_RCC_OscConfig+0xbc>
 800e99e:	4b72      	ldr	r3, [pc, #456]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	4a71      	ldr	r2, [pc, #452]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e9a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e9a8:	6013      	str	r3, [r2, #0]
 800e9aa:	4b6f      	ldr	r3, [pc, #444]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a6e      	ldr	r2, [pc, #440]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e9b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e9b4:	6013      	str	r3, [r2, #0]
 800e9b6:	e00b      	b.n	800e9d0 <HAL_RCC_OscConfig+0xd4>
 800e9b8:	4b6b      	ldr	r3, [pc, #428]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a6a      	ldr	r2, [pc, #424]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e9be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e9c2:	6013      	str	r3, [r2, #0]
 800e9c4:	4b68      	ldr	r3, [pc, #416]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a67      	ldr	r2, [pc, #412]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e9ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e9ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d013      	beq.n	800ea00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e9d8:	f7fd fdbc 	bl	800c554 <HAL_GetTick>
 800e9dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9de:	e008      	b.n	800e9f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e9e0:	f7fd fdb8 	bl	800c554 <HAL_GetTick>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	1ad3      	subs	r3, r2, r3
 800e9ea:	2b64      	cmp	r3, #100	; 0x64
 800e9ec:	d901      	bls.n	800e9f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800e9ee:	2303      	movs	r3, #3
 800e9f0:	e1fa      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9f2:	4b5d      	ldr	r3, [pc, #372]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d0f0      	beq.n	800e9e0 <HAL_RCC_OscConfig+0xe4>
 800e9fe:	e014      	b.n	800ea2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea00:	f7fd fda8 	bl	800c554 <HAL_GetTick>
 800ea04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea06:	e008      	b.n	800ea1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea08:	f7fd fda4 	bl	800c554 <HAL_GetTick>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	1ad3      	subs	r3, r2, r3
 800ea12:	2b64      	cmp	r3, #100	; 0x64
 800ea14:	d901      	bls.n	800ea1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ea16:	2303      	movs	r3, #3
 800ea18:	e1e6      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea1a:	4b53      	ldr	r3, [pc, #332]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1f0      	bne.n	800ea08 <HAL_RCC_OscConfig+0x10c>
 800ea26:	e000      	b.n	800ea2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f003 0302 	and.w	r3, r3, #2
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d063      	beq.n	800eafe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ea36:	4b4c      	ldr	r3, [pc, #304]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	f003 030c 	and.w	r3, r3, #12
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00b      	beq.n	800ea5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ea42:	4b49      	ldr	r3, [pc, #292]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	f003 030c 	and.w	r3, r3, #12
 800ea4a:	2b08      	cmp	r3, #8
 800ea4c:	d11c      	bne.n	800ea88 <HAL_RCC_OscConfig+0x18c>
 800ea4e:	4b46      	ldr	r3, [pc, #280]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d116      	bne.n	800ea88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea5a:	4b43      	ldr	r3, [pc, #268]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f003 0302 	and.w	r3, r3, #2
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d005      	beq.n	800ea72 <HAL_RCC_OscConfig+0x176>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	691b      	ldr	r3, [r3, #16]
 800ea6a:	2b01      	cmp	r3, #1
 800ea6c:	d001      	beq.n	800ea72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e1ba      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea72:	4b3d      	ldr	r3, [pc, #244]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	695b      	ldr	r3, [r3, #20]
 800ea7e:	00db      	lsls	r3, r3, #3
 800ea80:	4939      	ldr	r1, [pc, #228]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800ea82:	4313      	orrs	r3, r2
 800ea84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea86:	e03a      	b.n	800eafe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	691b      	ldr	r3, [r3, #16]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d020      	beq.n	800ead2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ea90:	4b36      	ldr	r3, [pc, #216]	; (800eb6c <HAL_RCC_OscConfig+0x270>)
 800ea92:	2201      	movs	r2, #1
 800ea94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea96:	f7fd fd5d 	bl	800c554 <HAL_GetTick>
 800ea9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea9c:	e008      	b.n	800eab0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea9e:	f7fd fd59 	bl	800c554 <HAL_GetTick>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	1ad3      	subs	r3, r2, r3
 800eaa8:	2b02      	cmp	r3, #2
 800eaaa:	d901      	bls.n	800eab0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800eaac:	2303      	movs	r3, #3
 800eaae:	e19b      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eab0:	4b2d      	ldr	r3, [pc, #180]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f003 0302 	and.w	r3, r3, #2
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d0f0      	beq.n	800ea9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eabc:	4b2a      	ldr	r3, [pc, #168]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	695b      	ldr	r3, [r3, #20]
 800eac8:	00db      	lsls	r3, r3, #3
 800eaca:	4927      	ldr	r1, [pc, #156]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800eacc:	4313      	orrs	r3, r2
 800eace:	600b      	str	r3, [r1, #0]
 800ead0:	e015      	b.n	800eafe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ead2:	4b26      	ldr	r3, [pc, #152]	; (800eb6c <HAL_RCC_OscConfig+0x270>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ead8:	f7fd fd3c 	bl	800c554 <HAL_GetTick>
 800eadc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eade:	e008      	b.n	800eaf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eae0:	f7fd fd38 	bl	800c554 <HAL_GetTick>
 800eae4:	4602      	mov	r2, r0
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	2b02      	cmp	r3, #2
 800eaec:	d901      	bls.n	800eaf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800eaee:	2303      	movs	r3, #3
 800eaf0:	e17a      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eaf2:	4b1d      	ldr	r3, [pc, #116]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f003 0302 	and.w	r3, r3, #2
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1f0      	bne.n	800eae0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f003 0308 	and.w	r3, r3, #8
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d03a      	beq.n	800eb80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	699b      	ldr	r3, [r3, #24]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d019      	beq.n	800eb46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eb12:	4b17      	ldr	r3, [pc, #92]	; (800eb70 <HAL_RCC_OscConfig+0x274>)
 800eb14:	2201      	movs	r2, #1
 800eb16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eb18:	f7fd fd1c 	bl	800c554 <HAL_GetTick>
 800eb1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb1e:	e008      	b.n	800eb32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eb20:	f7fd fd18 	bl	800c554 <HAL_GetTick>
 800eb24:	4602      	mov	r2, r0
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	1ad3      	subs	r3, r2, r3
 800eb2a:	2b02      	cmp	r3, #2
 800eb2c:	d901      	bls.n	800eb32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800eb2e:	2303      	movs	r3, #3
 800eb30:	e15a      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb32:	4b0d      	ldr	r3, [pc, #52]	; (800eb68 <HAL_RCC_OscConfig+0x26c>)
 800eb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb36:	f003 0302 	and.w	r3, r3, #2
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d0f0      	beq.n	800eb20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800eb3e:	2001      	movs	r0, #1
 800eb40:	f000 fada 	bl	800f0f8 <RCC_Delay>
 800eb44:	e01c      	b.n	800eb80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eb46:	4b0a      	ldr	r3, [pc, #40]	; (800eb70 <HAL_RCC_OscConfig+0x274>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eb4c:	f7fd fd02 	bl	800c554 <HAL_GetTick>
 800eb50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eb52:	e00f      	b.n	800eb74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eb54:	f7fd fcfe 	bl	800c554 <HAL_GetTick>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	d908      	bls.n	800eb74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800eb62:	2303      	movs	r3, #3
 800eb64:	e140      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
 800eb66:	bf00      	nop
 800eb68:	40021000 	.word	0x40021000
 800eb6c:	42420000 	.word	0x42420000
 800eb70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eb74:	4b9e      	ldr	r3, [pc, #632]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800eb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb78:	f003 0302 	and.w	r3, r3, #2
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d1e9      	bne.n	800eb54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f003 0304 	and.w	r3, r3, #4
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f000 80a6 	beq.w	800ecda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb92:	4b97      	ldr	r3, [pc, #604]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800eb94:	69db      	ldr	r3, [r3, #28]
 800eb96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d10d      	bne.n	800ebba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb9e:	4b94      	ldr	r3, [pc, #592]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800eba0:	69db      	ldr	r3, [r3, #28]
 800eba2:	4a93      	ldr	r2, [pc, #588]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800eba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eba8:	61d3      	str	r3, [r2, #28]
 800ebaa:	4b91      	ldr	r3, [pc, #580]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ebac:	69db      	ldr	r3, [r3, #28]
 800ebae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebb2:	60bb      	str	r3, [r7, #8]
 800ebb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebba:	4b8e      	ldr	r3, [pc, #568]	; (800edf4 <HAL_RCC_OscConfig+0x4f8>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d118      	bne.n	800ebf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ebc6:	4b8b      	ldr	r3, [pc, #556]	; (800edf4 <HAL_RCC_OscConfig+0x4f8>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4a8a      	ldr	r2, [pc, #552]	; (800edf4 <HAL_RCC_OscConfig+0x4f8>)
 800ebcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ebd2:	f7fd fcbf 	bl	800c554 <HAL_GetTick>
 800ebd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebd8:	e008      	b.n	800ebec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ebda:	f7fd fcbb 	bl	800c554 <HAL_GetTick>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	2b64      	cmp	r3, #100	; 0x64
 800ebe6:	d901      	bls.n	800ebec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ebe8:	2303      	movs	r3, #3
 800ebea:	e0fd      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebec:	4b81      	ldr	r3, [pc, #516]	; (800edf4 <HAL_RCC_OscConfig+0x4f8>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d0f0      	beq.n	800ebda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	68db      	ldr	r3, [r3, #12]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d106      	bne.n	800ec0e <HAL_RCC_OscConfig+0x312>
 800ec00:	4b7b      	ldr	r3, [pc, #492]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec02:	6a1b      	ldr	r3, [r3, #32]
 800ec04:	4a7a      	ldr	r2, [pc, #488]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec06:	f043 0301 	orr.w	r3, r3, #1
 800ec0a:	6213      	str	r3, [r2, #32]
 800ec0c:	e02d      	b.n	800ec6a <HAL_RCC_OscConfig+0x36e>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d10c      	bne.n	800ec30 <HAL_RCC_OscConfig+0x334>
 800ec16:	4b76      	ldr	r3, [pc, #472]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec18:	6a1b      	ldr	r3, [r3, #32]
 800ec1a:	4a75      	ldr	r2, [pc, #468]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec1c:	f023 0301 	bic.w	r3, r3, #1
 800ec20:	6213      	str	r3, [r2, #32]
 800ec22:	4b73      	ldr	r3, [pc, #460]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec24:	6a1b      	ldr	r3, [r3, #32]
 800ec26:	4a72      	ldr	r2, [pc, #456]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec28:	f023 0304 	bic.w	r3, r3, #4
 800ec2c:	6213      	str	r3, [r2, #32]
 800ec2e:	e01c      	b.n	800ec6a <HAL_RCC_OscConfig+0x36e>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	2b05      	cmp	r3, #5
 800ec36:	d10c      	bne.n	800ec52 <HAL_RCC_OscConfig+0x356>
 800ec38:	4b6d      	ldr	r3, [pc, #436]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec3a:	6a1b      	ldr	r3, [r3, #32]
 800ec3c:	4a6c      	ldr	r2, [pc, #432]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec3e:	f043 0304 	orr.w	r3, r3, #4
 800ec42:	6213      	str	r3, [r2, #32]
 800ec44:	4b6a      	ldr	r3, [pc, #424]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec46:	6a1b      	ldr	r3, [r3, #32]
 800ec48:	4a69      	ldr	r2, [pc, #420]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec4a:	f043 0301 	orr.w	r3, r3, #1
 800ec4e:	6213      	str	r3, [r2, #32]
 800ec50:	e00b      	b.n	800ec6a <HAL_RCC_OscConfig+0x36e>
 800ec52:	4b67      	ldr	r3, [pc, #412]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec54:	6a1b      	ldr	r3, [r3, #32]
 800ec56:	4a66      	ldr	r2, [pc, #408]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec58:	f023 0301 	bic.w	r3, r3, #1
 800ec5c:	6213      	str	r3, [r2, #32]
 800ec5e:	4b64      	ldr	r3, [pc, #400]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec60:	6a1b      	ldr	r3, [r3, #32]
 800ec62:	4a63      	ldr	r2, [pc, #396]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec64:	f023 0304 	bic.w	r3, r3, #4
 800ec68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d015      	beq.n	800ec9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec72:	f7fd fc6f 	bl	800c554 <HAL_GetTick>
 800ec76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec78:	e00a      	b.n	800ec90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec7a:	f7fd fc6b 	bl	800c554 <HAL_GetTick>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d901      	bls.n	800ec90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ec8c:	2303      	movs	r3, #3
 800ec8e:	e0ab      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec90:	4b57      	ldr	r3, [pc, #348]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ec92:	6a1b      	ldr	r3, [r3, #32]
 800ec94:	f003 0302 	and.w	r3, r3, #2
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d0ee      	beq.n	800ec7a <HAL_RCC_OscConfig+0x37e>
 800ec9c:	e014      	b.n	800ecc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec9e:	f7fd fc59 	bl	800c554 <HAL_GetTick>
 800eca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eca4:	e00a      	b.n	800ecbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eca6:	f7fd fc55 	bl	800c554 <HAL_GetTick>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d901      	bls.n	800ecbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	e095      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ecbc:	4b4c      	ldr	r3, [pc, #304]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ecbe:	6a1b      	ldr	r3, [r3, #32]
 800ecc0:	f003 0302 	and.w	r3, r3, #2
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1ee      	bne.n	800eca6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ecc8:	7dfb      	ldrb	r3, [r7, #23]
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d105      	bne.n	800ecda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ecce:	4b48      	ldr	r3, [pc, #288]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ecd0:	69db      	ldr	r3, [r3, #28]
 800ecd2:	4a47      	ldr	r2, [pc, #284]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ecd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ecd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	69db      	ldr	r3, [r3, #28]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f000 8081 	beq.w	800ede6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ece4:	4b42      	ldr	r3, [pc, #264]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	f003 030c 	and.w	r3, r3, #12
 800ecec:	2b08      	cmp	r3, #8
 800ecee:	d061      	beq.n	800edb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	69db      	ldr	r3, [r3, #28]
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d146      	bne.n	800ed86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ecf8:	4b3f      	ldr	r3, [pc, #252]	; (800edf8 <HAL_RCC_OscConfig+0x4fc>)
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecfe:	f7fd fc29 	bl	800c554 <HAL_GetTick>
 800ed02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ed04:	e008      	b.n	800ed18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed06:	f7fd fc25 	bl	800c554 <HAL_GetTick>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	d901      	bls.n	800ed18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ed14:	2303      	movs	r3, #3
 800ed16:	e067      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ed18:	4b35      	ldr	r3, [pc, #212]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1f0      	bne.n	800ed06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6a1b      	ldr	r3, [r3, #32]
 800ed28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed2c:	d108      	bne.n	800ed40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ed2e:	4b30      	ldr	r3, [pc, #192]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	492d      	ldr	r1, [pc, #180]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ed40:	4b2b      	ldr	r3, [pc, #172]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6a19      	ldr	r1, [r3, #32]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed50:	430b      	orrs	r3, r1
 800ed52:	4927      	ldr	r1, [pc, #156]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ed54:	4313      	orrs	r3, r2
 800ed56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ed58:	4b27      	ldr	r3, [pc, #156]	; (800edf8 <HAL_RCC_OscConfig+0x4fc>)
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed5e:	f7fd fbf9 	bl	800c554 <HAL_GetTick>
 800ed62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ed64:	e008      	b.n	800ed78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed66:	f7fd fbf5 	bl	800c554 <HAL_GetTick>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	1ad3      	subs	r3, r2, r3
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	d901      	bls.n	800ed78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ed74:	2303      	movs	r3, #3
 800ed76:	e037      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ed78:	4b1d      	ldr	r3, [pc, #116]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d0f0      	beq.n	800ed66 <HAL_RCC_OscConfig+0x46a>
 800ed84:	e02f      	b.n	800ede6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed86:	4b1c      	ldr	r3, [pc, #112]	; (800edf8 <HAL_RCC_OscConfig+0x4fc>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed8c:	f7fd fbe2 	bl	800c554 <HAL_GetTick>
 800ed90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ed92:	e008      	b.n	800eda6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed94:	f7fd fbde 	bl	800c554 <HAL_GetTick>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	2b02      	cmp	r3, #2
 800eda0:	d901      	bls.n	800eda6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800eda2:	2303      	movs	r3, #3
 800eda4:	e020      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800eda6:	4b12      	ldr	r3, [pc, #72]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d1f0      	bne.n	800ed94 <HAL_RCC_OscConfig+0x498>
 800edb2:	e018      	b.n	800ede6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	69db      	ldr	r3, [r3, #28]
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d101      	bne.n	800edc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800edbc:	2301      	movs	r3, #1
 800edbe:	e013      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800edc0:	4b0b      	ldr	r3, [pc, #44]	; (800edf0 <HAL_RCC_OscConfig+0x4f4>)
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6a1b      	ldr	r3, [r3, #32]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d106      	bne.n	800ede2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800edde:	429a      	cmp	r2, r3
 800ede0:	d001      	beq.n	800ede6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800ede2:	2301      	movs	r3, #1
 800ede4:	e000      	b.n	800ede8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3718      	adds	r7, #24
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}
 800edf0:	40021000 	.word	0x40021000
 800edf4:	40007000 	.word	0x40007000
 800edf8:	42420060 	.word	0x42420060

0800edfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d101      	bne.n	800ee10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	e0d0      	b.n	800efb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee10:	4b6a      	ldr	r3, [pc, #424]	; (800efbc <HAL_RCC_ClockConfig+0x1c0>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f003 0307 	and.w	r3, r3, #7
 800ee18:	683a      	ldr	r2, [r7, #0]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d910      	bls.n	800ee40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee1e:	4b67      	ldr	r3, [pc, #412]	; (800efbc <HAL_RCC_ClockConfig+0x1c0>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f023 0207 	bic.w	r2, r3, #7
 800ee26:	4965      	ldr	r1, [pc, #404]	; (800efbc <HAL_RCC_ClockConfig+0x1c0>)
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee2e:	4b63      	ldr	r3, [pc, #396]	; (800efbc <HAL_RCC_ClockConfig+0x1c0>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f003 0307 	and.w	r3, r3, #7
 800ee36:	683a      	ldr	r2, [r7, #0]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d001      	beq.n	800ee40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	e0b8      	b.n	800efb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f003 0302 	and.w	r3, r3, #2
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d020      	beq.n	800ee8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f003 0304 	and.w	r3, r3, #4
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d005      	beq.n	800ee64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ee58:	4b59      	ldr	r3, [pc, #356]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	4a58      	ldr	r2, [pc, #352]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ee5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ee62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f003 0308 	and.w	r3, r3, #8
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d005      	beq.n	800ee7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ee70:	4b53      	ldr	r3, [pc, #332]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	4a52      	ldr	r2, [pc, #328]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ee76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ee7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee7c:	4b50      	ldr	r3, [pc, #320]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	494d      	ldr	r1, [pc, #308]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ee8a:	4313      	orrs	r3, r2
 800ee8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f003 0301 	and.w	r3, r3, #1
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d040      	beq.n	800ef1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	2b01      	cmp	r3, #1
 800eea0:	d107      	bne.n	800eeb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eea2:	4b47      	ldr	r3, [pc, #284]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d115      	bne.n	800eeda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e07f      	b.n	800efb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	d107      	bne.n	800eeca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eeba:	4b41      	ldr	r3, [pc, #260]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d109      	bne.n	800eeda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eec6:	2301      	movs	r3, #1
 800eec8:	e073      	b.n	800efb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eeca:	4b3d      	ldr	r3, [pc, #244]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 0302 	and.w	r3, r3, #2
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d101      	bne.n	800eeda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eed6:	2301      	movs	r3, #1
 800eed8:	e06b      	b.n	800efb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800eeda:	4b39      	ldr	r3, [pc, #228]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	f023 0203 	bic.w	r2, r3, #3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	4936      	ldr	r1, [pc, #216]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800eee8:	4313      	orrs	r3, r2
 800eeea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800eeec:	f7fd fb32 	bl	800c554 <HAL_GetTick>
 800eef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eef2:	e00a      	b.n	800ef0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eef4:	f7fd fb2e 	bl	800c554 <HAL_GetTick>
 800eef8:	4602      	mov	r2, r0
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d901      	bls.n	800ef0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ef06:	2303      	movs	r3, #3
 800ef08:	e053      	b.n	800efb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef0a:	4b2d      	ldr	r3, [pc, #180]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	f003 020c 	and.w	r2, r3, #12
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	009b      	lsls	r3, r3, #2
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d1eb      	bne.n	800eef4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ef1c:	4b27      	ldr	r3, [pc, #156]	; (800efbc <HAL_RCC_ClockConfig+0x1c0>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f003 0307 	and.w	r3, r3, #7
 800ef24:	683a      	ldr	r2, [r7, #0]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d210      	bcs.n	800ef4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef2a:	4b24      	ldr	r3, [pc, #144]	; (800efbc <HAL_RCC_ClockConfig+0x1c0>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f023 0207 	bic.w	r2, r3, #7
 800ef32:	4922      	ldr	r1, [pc, #136]	; (800efbc <HAL_RCC_ClockConfig+0x1c0>)
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	4313      	orrs	r3, r2
 800ef38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef3a:	4b20      	ldr	r3, [pc, #128]	; (800efbc <HAL_RCC_ClockConfig+0x1c0>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f003 0307 	and.w	r3, r3, #7
 800ef42:	683a      	ldr	r2, [r7, #0]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d001      	beq.n	800ef4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	e032      	b.n	800efb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f003 0304 	and.w	r3, r3, #4
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d008      	beq.n	800ef6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ef58:	4b19      	ldr	r3, [pc, #100]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	4916      	ldr	r1, [pc, #88]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ef66:	4313      	orrs	r3, r2
 800ef68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f003 0308 	and.w	r3, r3, #8
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d009      	beq.n	800ef8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ef76:	4b12      	ldr	r3, [pc, #72]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	691b      	ldr	r3, [r3, #16]
 800ef82:	00db      	lsls	r3, r3, #3
 800ef84:	490e      	ldr	r1, [pc, #56]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ef86:	4313      	orrs	r3, r2
 800ef88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ef8a:	f000 f821 	bl	800efd0 <HAL_RCC_GetSysClockFreq>
 800ef8e:	4601      	mov	r1, r0
 800ef90:	4b0b      	ldr	r3, [pc, #44]	; (800efc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	091b      	lsrs	r3, r3, #4
 800ef96:	f003 030f 	and.w	r3, r3, #15
 800ef9a:	4a0a      	ldr	r2, [pc, #40]	; (800efc4 <HAL_RCC_ClockConfig+0x1c8>)
 800ef9c:	5cd3      	ldrb	r3, [r2, r3]
 800ef9e:	fa21 f303 	lsr.w	r3, r1, r3
 800efa2:	4a09      	ldr	r2, [pc, #36]	; (800efc8 <HAL_RCC_ClockConfig+0x1cc>)
 800efa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800efa6:	4b09      	ldr	r3, [pc, #36]	; (800efcc <HAL_RCC_ClockConfig+0x1d0>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4618      	mov	r0, r3
 800efac:	f7fd fa90 	bl	800c4d0 <HAL_InitTick>

  return HAL_OK;
 800efb0:	2300      	movs	r3, #0
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	40022000 	.word	0x40022000
 800efc0:	40021000 	.word	0x40021000
 800efc4:	08019a30 	.word	0x08019a30
 800efc8:	20000004 	.word	0x20000004
 800efcc:	20000058 	.word	0x20000058

0800efd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800efd0:	b490      	push	{r4, r7}
 800efd2:	b08a      	sub	sp, #40	; 0x28
 800efd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800efd6:	4b2a      	ldr	r3, [pc, #168]	; (800f080 <HAL_RCC_GetSysClockFreq+0xb0>)
 800efd8:	1d3c      	adds	r4, r7, #4
 800efda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800efdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800efe0:	4b28      	ldr	r3, [pc, #160]	; (800f084 <HAL_RCC_GetSysClockFreq+0xb4>)
 800efe2:	881b      	ldrh	r3, [r3, #0]
 800efe4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800efe6:	2300      	movs	r3, #0
 800efe8:	61fb      	str	r3, [r7, #28]
 800efea:	2300      	movs	r3, #0
 800efec:	61bb      	str	r3, [r7, #24]
 800efee:	2300      	movs	r3, #0
 800eff0:	627b      	str	r3, [r7, #36]	; 0x24
 800eff2:	2300      	movs	r3, #0
 800eff4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800eff6:	2300      	movs	r3, #0
 800eff8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800effa:	4b23      	ldr	r3, [pc, #140]	; (800f088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	f003 030c 	and.w	r3, r3, #12
 800f006:	2b04      	cmp	r3, #4
 800f008:	d002      	beq.n	800f010 <HAL_RCC_GetSysClockFreq+0x40>
 800f00a:	2b08      	cmp	r3, #8
 800f00c:	d003      	beq.n	800f016 <HAL_RCC_GetSysClockFreq+0x46>
 800f00e:	e02d      	b.n	800f06c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f010:	4b1e      	ldr	r3, [pc, #120]	; (800f08c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f012:	623b      	str	r3, [r7, #32]
      break;
 800f014:	e02d      	b.n	800f072 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	0c9b      	lsrs	r3, r3, #18
 800f01a:	f003 030f 	and.w	r3, r3, #15
 800f01e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f022:	4413      	add	r3, r2
 800f024:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800f028:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f030:	2b00      	cmp	r3, #0
 800f032:	d013      	beq.n	800f05c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800f034:	4b14      	ldr	r3, [pc, #80]	; (800f088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	0c5b      	lsrs	r3, r3, #17
 800f03a:	f003 0301 	and.w	r3, r3, #1
 800f03e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f042:	4413      	add	r3, r2
 800f044:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800f048:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	4a0f      	ldr	r2, [pc, #60]	; (800f08c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f04e:	fb02 f203 	mul.w	r2, r2, r3
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	fbb2 f3f3 	udiv	r3, r2, r3
 800f058:	627b      	str	r3, [r7, #36]	; 0x24
 800f05a:	e004      	b.n	800f066 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	4a0c      	ldr	r2, [pc, #48]	; (800f090 <HAL_RCC_GetSysClockFreq+0xc0>)
 800f060:	fb02 f303 	mul.w	r3, r2, r3
 800f064:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800f066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f068:	623b      	str	r3, [r7, #32]
      break;
 800f06a:	e002      	b.n	800f072 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800f06c:	4b07      	ldr	r3, [pc, #28]	; (800f08c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f06e:	623b      	str	r3, [r7, #32]
      break;
 800f070:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f072:	6a3b      	ldr	r3, [r7, #32]
}
 800f074:	4618      	mov	r0, r3
 800f076:	3728      	adds	r7, #40	; 0x28
 800f078:	46bd      	mov	sp, r7
 800f07a:	bc90      	pop	{r4, r7}
 800f07c:	4770      	bx	lr
 800f07e:	bf00      	nop
 800f080:	08019a1c 	.word	0x08019a1c
 800f084:	08019a2c 	.word	0x08019a2c
 800f088:	40021000 	.word	0x40021000
 800f08c:	007a1200 	.word	0x007a1200
 800f090:	003d0900 	.word	0x003d0900

0800f094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f094:	b480      	push	{r7}
 800f096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f098:	4b02      	ldr	r3, [pc, #8]	; (800f0a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800f09a:	681b      	ldr	r3, [r3, #0]
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bc80      	pop	{r7}
 800f0a2:	4770      	bx	lr
 800f0a4:	20000004 	.word	0x20000004

0800f0a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f0ac:	f7ff fff2 	bl	800f094 <HAL_RCC_GetHCLKFreq>
 800f0b0:	4601      	mov	r1, r0
 800f0b2:	4b05      	ldr	r3, [pc, #20]	; (800f0c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	0a1b      	lsrs	r3, r3, #8
 800f0b8:	f003 0307 	and.w	r3, r3, #7
 800f0bc:	4a03      	ldr	r2, [pc, #12]	; (800f0cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f0be:	5cd3      	ldrb	r3, [r2, r3]
 800f0c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	40021000 	.word	0x40021000
 800f0cc:	08019a40 	.word	0x08019a40

0800f0d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f0d4:	f7ff ffde 	bl	800f094 <HAL_RCC_GetHCLKFreq>
 800f0d8:	4601      	mov	r1, r0
 800f0da:	4b05      	ldr	r3, [pc, #20]	; (800f0f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f0dc:	685b      	ldr	r3, [r3, #4]
 800f0de:	0adb      	lsrs	r3, r3, #11
 800f0e0:	f003 0307 	and.w	r3, r3, #7
 800f0e4:	4a03      	ldr	r2, [pc, #12]	; (800f0f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f0e6:	5cd3      	ldrb	r3, [r2, r3]
 800f0e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	40021000 	.word	0x40021000
 800f0f4:	08019a40 	.word	0x08019a40

0800f0f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800f100:	4b0a      	ldr	r3, [pc, #40]	; (800f12c <RCC_Delay+0x34>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4a0a      	ldr	r2, [pc, #40]	; (800f130 <RCC_Delay+0x38>)
 800f106:	fba2 2303 	umull	r2, r3, r2, r3
 800f10a:	0a5b      	lsrs	r3, r3, #9
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	fb02 f303 	mul.w	r3, r2, r3
 800f112:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800f114:	bf00      	nop
  }
  while (Delay --);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	1e5a      	subs	r2, r3, #1
 800f11a:	60fa      	str	r2, [r7, #12]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d1f9      	bne.n	800f114 <RCC_Delay+0x1c>
}
 800f120:	bf00      	nop
 800f122:	3714      	adds	r7, #20
 800f124:	46bd      	mov	sp, r7
 800f126:	bc80      	pop	{r7}
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop
 800f12c:	20000004 	.word	0x20000004
 800f130:	10624dd3 	.word	0x10624dd3

0800f134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d101      	bne.n	800f146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f142:	2301      	movs	r3, #1
 800f144:	e041      	b.n	800f1ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d106      	bne.n	800f160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2200      	movs	r2, #0
 800f156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7fc fcce 	bl	800bafc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2202      	movs	r2, #2
 800f164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681a      	ldr	r2, [r3, #0]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	3304      	adds	r3, #4
 800f170:	4619      	mov	r1, r3
 800f172:	4610      	mov	r0, r2
 800f174:	f000 fdb4 	bl	800fce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2201      	movs	r2, #1
 800f18c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2201      	movs	r2, #1
 800f194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2201      	movs	r2, #1
 800f19c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1c8:	2300      	movs	r3, #0
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3708      	adds	r7, #8
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b082      	sub	sp, #8
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d101      	bne.n	800f1e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	e041      	b.n	800f268 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d106      	bne.n	800f1fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f000 f839 	bl	800f270 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2202      	movs	r2, #2
 800f202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	3304      	adds	r3, #4
 800f20e:	4619      	mov	r1, r3
 800f210:	4610      	mov	r0, r2
 800f212:	f000 fd65 	bl	800fce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2201      	movs	r2, #1
 800f21a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2201      	movs	r2, #1
 800f222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2201      	movs	r2, #1
 800f22a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2201      	movs	r2, #1
 800f232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2201      	movs	r2, #1
 800f23a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2201      	movs	r2, #1
 800f242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2201      	movs	r2, #1
 800f24a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2201      	movs	r2, #1
 800f252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2201      	movs	r2, #1
 800f25a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2201      	movs	r2, #1
 800f262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f266:	2300      	movs	r3, #0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f278:	bf00      	nop
 800f27a:	370c      	adds	r7, #12
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bc80      	pop	{r7}
 800f280:	4770      	bx	lr
	...

0800f284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d109      	bne.n	800f2a8 <HAL_TIM_PWM_Start+0x24>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	2b01      	cmp	r3, #1
 800f29e:	bf14      	ite	ne
 800f2a0:	2301      	movne	r3, #1
 800f2a2:	2300      	moveq	r3, #0
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	e022      	b.n	800f2ee <HAL_TIM_PWM_Start+0x6a>
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	2b04      	cmp	r3, #4
 800f2ac:	d109      	bne.n	800f2c2 <HAL_TIM_PWM_Start+0x3e>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	2b01      	cmp	r3, #1
 800f2b8:	bf14      	ite	ne
 800f2ba:	2301      	movne	r3, #1
 800f2bc:	2300      	moveq	r3, #0
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	e015      	b.n	800f2ee <HAL_TIM_PWM_Start+0x6a>
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	2b08      	cmp	r3, #8
 800f2c6:	d109      	bne.n	800f2dc <HAL_TIM_PWM_Start+0x58>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	bf14      	ite	ne
 800f2d4:	2301      	movne	r3, #1
 800f2d6:	2300      	moveq	r3, #0
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	e008      	b.n	800f2ee <HAL_TIM_PWM_Start+0x6a>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	bf14      	ite	ne
 800f2e8:	2301      	movne	r3, #1
 800f2ea:	2300      	moveq	r3, #0
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d001      	beq.n	800f2f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e05e      	b.n	800f3b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d104      	bne.n	800f306 <HAL_TIM_PWM_Start+0x82>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2202      	movs	r2, #2
 800f300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f304:	e013      	b.n	800f32e <HAL_TIM_PWM_Start+0xaa>
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	2b04      	cmp	r3, #4
 800f30a:	d104      	bne.n	800f316 <HAL_TIM_PWM_Start+0x92>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2202      	movs	r2, #2
 800f310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f314:	e00b      	b.n	800f32e <HAL_TIM_PWM_Start+0xaa>
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	2b08      	cmp	r3, #8
 800f31a:	d104      	bne.n	800f326 <HAL_TIM_PWM_Start+0xa2>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2202      	movs	r2, #2
 800f320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f324:	e003      	b.n	800f32e <HAL_TIM_PWM_Start+0xaa>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2202      	movs	r2, #2
 800f32a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2201      	movs	r2, #1
 800f334:	6839      	ldr	r1, [r7, #0]
 800f336:	4618      	mov	r0, r3
 800f338:	f001 f85f 	bl	80103fa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4a1e      	ldr	r2, [pc, #120]	; (800f3bc <HAL_TIM_PWM_Start+0x138>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d107      	bne.n	800f356 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f354:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	4a18      	ldr	r2, [pc, #96]	; (800f3bc <HAL_TIM_PWM_Start+0x138>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d00e      	beq.n	800f37e <HAL_TIM_PWM_Start+0xfa>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f368:	d009      	beq.n	800f37e <HAL_TIM_PWM_Start+0xfa>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	4a14      	ldr	r2, [pc, #80]	; (800f3c0 <HAL_TIM_PWM_Start+0x13c>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d004      	beq.n	800f37e <HAL_TIM_PWM_Start+0xfa>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4a12      	ldr	r2, [pc, #72]	; (800f3c4 <HAL_TIM_PWM_Start+0x140>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d111      	bne.n	800f3a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	689b      	ldr	r3, [r3, #8]
 800f384:	f003 0307 	and.w	r3, r3, #7
 800f388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2b06      	cmp	r3, #6
 800f38e:	d010      	beq.n	800f3b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f042 0201 	orr.w	r2, r2, #1
 800f39e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3a0:	e007      	b.n	800f3b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f042 0201 	orr.w	r2, r2, #1
 800f3b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	40012c00 	.word	0x40012c00
 800f3c0:	40000400 	.word	0x40000400
 800f3c4:	40000800 	.word	0x40000800

0800f3c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d101      	bne.n	800f3da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e041      	b.n	800f45e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d106      	bne.n	800f3f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7fc faf2 	bl	800b9d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2202      	movs	r2, #2
 800f3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	3304      	adds	r3, #4
 800f404:	4619      	mov	r1, r3
 800f406:	4610      	mov	r0, r2
 800f408:	f000 fc6a 	bl	800fce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2201      	movs	r2, #1
 800f410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2201      	movs	r2, #1
 800f418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2201      	movs	r2, #1
 800f420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2201      	movs	r2, #1
 800f428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2201      	movs	r2, #1
 800f430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2201      	movs	r2, #1
 800f438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2201      	movs	r2, #1
 800f440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2201      	movs	r2, #1
 800f448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2201      	movs	r2, #1
 800f450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2201      	movs	r2, #1
 800f458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
	...

0800f468 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d104      	bne.n	800f482 <HAL_TIM_IC_Start_IT+0x1a>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	e013      	b.n	800f4aa <HAL_TIM_IC_Start_IT+0x42>
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	2b04      	cmp	r3, #4
 800f486:	d104      	bne.n	800f492 <HAL_TIM_IC_Start_IT+0x2a>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	e00b      	b.n	800f4aa <HAL_TIM_IC_Start_IT+0x42>
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	2b08      	cmp	r3, #8
 800f496:	d104      	bne.n	800f4a2 <HAL_TIM_IC_Start_IT+0x3a>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	e003      	b.n	800f4aa <HAL_TIM_IC_Start_IT+0x42>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d104      	bne.n	800f4bc <HAL_TIM_IC_Start_IT+0x54>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	e013      	b.n	800f4e4 <HAL_TIM_IC_Start_IT+0x7c>
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	2b04      	cmp	r3, #4
 800f4c0:	d104      	bne.n	800f4cc <HAL_TIM_IC_Start_IT+0x64>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	e00b      	b.n	800f4e4 <HAL_TIM_IC_Start_IT+0x7c>
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2b08      	cmp	r3, #8
 800f4d0:	d104      	bne.n	800f4dc <HAL_TIM_IC_Start_IT+0x74>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	e003      	b.n	800f4e4 <HAL_TIM_IC_Start_IT+0x7c>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800f4e6:	7bfb      	ldrb	r3, [r7, #15]
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d102      	bne.n	800f4f2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800f4ec:	7bbb      	ldrb	r3, [r7, #14]
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d001      	beq.n	800f4f6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e0b3      	b.n	800f65e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d104      	bne.n	800f506 <HAL_TIM_IC_Start_IT+0x9e>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2202      	movs	r2, #2
 800f500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f504:	e013      	b.n	800f52e <HAL_TIM_IC_Start_IT+0xc6>
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	2b04      	cmp	r3, #4
 800f50a:	d104      	bne.n	800f516 <HAL_TIM_IC_Start_IT+0xae>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2202      	movs	r2, #2
 800f510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f514:	e00b      	b.n	800f52e <HAL_TIM_IC_Start_IT+0xc6>
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	2b08      	cmp	r3, #8
 800f51a:	d104      	bne.n	800f526 <HAL_TIM_IC_Start_IT+0xbe>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2202      	movs	r2, #2
 800f520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f524:	e003      	b.n	800f52e <HAL_TIM_IC_Start_IT+0xc6>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2202      	movs	r2, #2
 800f52a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d104      	bne.n	800f53e <HAL_TIM_IC_Start_IT+0xd6>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2202      	movs	r2, #2
 800f538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f53c:	e013      	b.n	800f566 <HAL_TIM_IC_Start_IT+0xfe>
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	2b04      	cmp	r3, #4
 800f542:	d104      	bne.n	800f54e <HAL_TIM_IC_Start_IT+0xe6>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2202      	movs	r2, #2
 800f548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f54c:	e00b      	b.n	800f566 <HAL_TIM_IC_Start_IT+0xfe>
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	2b08      	cmp	r3, #8
 800f552:	d104      	bne.n	800f55e <HAL_TIM_IC_Start_IT+0xf6>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2202      	movs	r2, #2
 800f558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f55c:	e003      	b.n	800f566 <HAL_TIM_IC_Start_IT+0xfe>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2202      	movs	r2, #2
 800f562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	2b0c      	cmp	r3, #12
 800f56a:	d841      	bhi.n	800f5f0 <HAL_TIM_IC_Start_IT+0x188>
 800f56c:	a201      	add	r2, pc, #4	; (adr r2, 800f574 <HAL_TIM_IC_Start_IT+0x10c>)
 800f56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f572:	bf00      	nop
 800f574:	0800f5a9 	.word	0x0800f5a9
 800f578:	0800f5f1 	.word	0x0800f5f1
 800f57c:	0800f5f1 	.word	0x0800f5f1
 800f580:	0800f5f1 	.word	0x0800f5f1
 800f584:	0800f5bb 	.word	0x0800f5bb
 800f588:	0800f5f1 	.word	0x0800f5f1
 800f58c:	0800f5f1 	.word	0x0800f5f1
 800f590:	0800f5f1 	.word	0x0800f5f1
 800f594:	0800f5cd 	.word	0x0800f5cd
 800f598:	0800f5f1 	.word	0x0800f5f1
 800f59c:	0800f5f1 	.word	0x0800f5f1
 800f5a0:	0800f5f1 	.word	0x0800f5f1
 800f5a4:	0800f5df 	.word	0x0800f5df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	68da      	ldr	r2, [r3, #12]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f042 0202 	orr.w	r2, r2, #2
 800f5b6:	60da      	str	r2, [r3, #12]
      break;
 800f5b8:	e01b      	b.n	800f5f2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	68da      	ldr	r2, [r3, #12]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f042 0204 	orr.w	r2, r2, #4
 800f5c8:	60da      	str	r2, [r3, #12]
      break;
 800f5ca:	e012      	b.n	800f5f2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	68da      	ldr	r2, [r3, #12]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f042 0208 	orr.w	r2, r2, #8
 800f5da:	60da      	str	r2, [r3, #12]
      break;
 800f5dc:	e009      	b.n	800f5f2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	68da      	ldr	r2, [r3, #12]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f042 0210 	orr.w	r2, r2, #16
 800f5ec:	60da      	str	r2, [r3, #12]
      break;
 800f5ee:	e000      	b.n	800f5f2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800f5f0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	6839      	ldr	r1, [r7, #0]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f000 fefd 	bl	80103fa <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4a18      	ldr	r2, [pc, #96]	; (800f668 <HAL_TIM_IC_Start_IT+0x200>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d00e      	beq.n	800f628 <HAL_TIM_IC_Start_IT+0x1c0>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f612:	d009      	beq.n	800f628 <HAL_TIM_IC_Start_IT+0x1c0>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4a14      	ldr	r2, [pc, #80]	; (800f66c <HAL_TIM_IC_Start_IT+0x204>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d004      	beq.n	800f628 <HAL_TIM_IC_Start_IT+0x1c0>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	4a13      	ldr	r2, [pc, #76]	; (800f670 <HAL_TIM_IC_Start_IT+0x208>)
 800f624:	4293      	cmp	r3, r2
 800f626:	d111      	bne.n	800f64c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	689b      	ldr	r3, [r3, #8]
 800f62e:	f003 0307 	and.w	r3, r3, #7
 800f632:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	2b06      	cmp	r3, #6
 800f638:	d010      	beq.n	800f65c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f042 0201 	orr.w	r2, r2, #1
 800f648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f64a:	e007      	b.n	800f65c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f042 0201 	orr.w	r2, r2, #1
 800f65a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f65c:	2300      	movs	r3, #0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3710      	adds	r7, #16
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	40012c00 	.word	0x40012c00
 800f66c:	40000400 	.word	0x40000400
 800f670:	40000800 	.word	0x40000800

0800f674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	691b      	ldr	r3, [r3, #16]
 800f682:	f003 0302 	and.w	r3, r3, #2
 800f686:	2b02      	cmp	r3, #2
 800f688:	d122      	bne.n	800f6d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	f003 0302 	and.w	r3, r3, #2
 800f694:	2b02      	cmp	r3, #2
 800f696:	d11b      	bne.n	800f6d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f06f 0202 	mvn.w	r2, #2
 800f6a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	699b      	ldr	r3, [r3, #24]
 800f6ae:	f003 0303 	and.w	r3, r3, #3
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d003      	beq.n	800f6be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7f6 f8c6 	bl	8005848 <HAL_TIM_IC_CaptureCallback>
 800f6bc:	e005      	b.n	800f6ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 faf2 	bl	800fca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f000 faf8 	bl	800fcba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	691b      	ldr	r3, [r3, #16]
 800f6d6:	f003 0304 	and.w	r3, r3, #4
 800f6da:	2b04      	cmp	r3, #4
 800f6dc:	d122      	bne.n	800f724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	f003 0304 	and.w	r3, r3, #4
 800f6e8:	2b04      	cmp	r3, #4
 800f6ea:	d11b      	bne.n	800f724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f06f 0204 	mvn.w	r2, #4
 800f6f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2202      	movs	r2, #2
 800f6fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	699b      	ldr	r3, [r3, #24]
 800f702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f706:	2b00      	cmp	r3, #0
 800f708:	d003      	beq.n	800f712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f7f6 f89c 	bl	8005848 <HAL_TIM_IC_CaptureCallback>
 800f710:	e005      	b.n	800f71e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 fac8 	bl	800fca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 face 	bl	800fcba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2200      	movs	r2, #0
 800f722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	691b      	ldr	r3, [r3, #16]
 800f72a:	f003 0308 	and.w	r3, r3, #8
 800f72e:	2b08      	cmp	r3, #8
 800f730:	d122      	bne.n	800f778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	f003 0308 	and.w	r3, r3, #8
 800f73c:	2b08      	cmp	r3, #8
 800f73e:	d11b      	bne.n	800f778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f06f 0208 	mvn.w	r2, #8
 800f748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2204      	movs	r2, #4
 800f74e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	69db      	ldr	r3, [r3, #28]
 800f756:	f003 0303 	and.w	r3, r3, #3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d003      	beq.n	800f766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f7f6 f872 	bl	8005848 <HAL_TIM_IC_CaptureCallback>
 800f764:	e005      	b.n	800f772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f000 fa9e 	bl	800fca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 faa4 	bl	800fcba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2200      	movs	r2, #0
 800f776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	691b      	ldr	r3, [r3, #16]
 800f77e:	f003 0310 	and.w	r3, r3, #16
 800f782:	2b10      	cmp	r3, #16
 800f784:	d122      	bne.n	800f7cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	f003 0310 	and.w	r3, r3, #16
 800f790:	2b10      	cmp	r3, #16
 800f792:	d11b      	bne.n	800f7cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	f06f 0210 	mvn.w	r2, #16
 800f79c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2208      	movs	r2, #8
 800f7a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	69db      	ldr	r3, [r3, #28]
 800f7aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d003      	beq.n	800f7ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f7f6 f848 	bl	8005848 <HAL_TIM_IC_CaptureCallback>
 800f7b8:	e005      	b.n	800f7c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 fa74 	bl	800fca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 fa7a 	bl	800fcba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	691b      	ldr	r3, [r3, #16]
 800f7d2:	f003 0301 	and.w	r3, r3, #1
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	d10e      	bne.n	800f7f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	68db      	ldr	r3, [r3, #12]
 800f7e0:	f003 0301 	and.w	r3, r3, #1
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d107      	bne.n	800f7f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f06f 0201 	mvn.w	r2, #1
 800f7f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f000 fa4f 	bl	800fc96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	691b      	ldr	r3, [r3, #16]
 800f7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f802:	2b80      	cmp	r3, #128	; 0x80
 800f804:	d10e      	bne.n	800f824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f810:	2b80      	cmp	r3, #128	; 0x80
 800f812:	d107      	bne.n	800f824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f81c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fe77 	bl	8010512 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	691b      	ldr	r3, [r3, #16]
 800f82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f82e:	2b40      	cmp	r3, #64	; 0x40
 800f830:	d10e      	bne.n	800f850 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f83c:	2b40      	cmp	r3, #64	; 0x40
 800f83e:	d107      	bne.n	800f850 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f000 fa3e 	bl	800fccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	691b      	ldr	r3, [r3, #16]
 800f856:	f003 0320 	and.w	r3, r3, #32
 800f85a:	2b20      	cmp	r3, #32
 800f85c:	d10e      	bne.n	800f87c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	f003 0320 	and.w	r3, r3, #32
 800f868:	2b20      	cmp	r3, #32
 800f86a:	d107      	bne.n	800f87c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f06f 0220 	mvn.w	r2, #32
 800f874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 fe42 	bl	8010500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f87c:	bf00      	nop
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f896:	2b01      	cmp	r3, #1
 800f898:	d101      	bne.n	800f89e <HAL_TIM_IC_ConfigChannel+0x1a>
 800f89a:	2302      	movs	r3, #2
 800f89c:	e082      	b.n	800f9a4 <HAL_TIM_IC_ConfigChannel+0x120>
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d11b      	bne.n	800f8e4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	6818      	ldr	r0, [r3, #0]
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	6819      	ldr	r1, [r3, #0]
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	685a      	ldr	r2, [r3, #4]
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	f000 fbfa 	bl	80100b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	699a      	ldr	r2, [r3, #24]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f022 020c 	bic.w	r2, r2, #12
 800f8ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	6999      	ldr	r1, [r3, #24]
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	689a      	ldr	r2, [r3, #8]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	430a      	orrs	r2, r1
 800f8e0:	619a      	str	r2, [r3, #24]
 800f8e2:	e05a      	b.n	800f99a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2b04      	cmp	r3, #4
 800f8e8:	d11c      	bne.n	800f924 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	6818      	ldr	r0, [r3, #0]
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	6819      	ldr	r1, [r3, #0]
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	685a      	ldr	r2, [r3, #4]
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	68db      	ldr	r3, [r3, #12]
 800f8fa:	f000 fc63 	bl	80101c4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	699a      	ldr	r2, [r3, #24]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f90c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	6999      	ldr	r1, [r3, #24]
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	021a      	lsls	r2, r3, #8
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	430a      	orrs	r2, r1
 800f920:	619a      	str	r2, [r3, #24]
 800f922:	e03a      	b.n	800f99a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2b08      	cmp	r3, #8
 800f928:	d11b      	bne.n	800f962 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6818      	ldr	r0, [r3, #0]
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	6819      	ldr	r1, [r3, #0]
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	685a      	ldr	r2, [r3, #4]
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	f000 fcae 	bl	801029a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	69da      	ldr	r2, [r3, #28]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f022 020c 	bic.w	r2, r2, #12
 800f94c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	69d9      	ldr	r1, [r3, #28]
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	689a      	ldr	r2, [r3, #8]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	430a      	orrs	r2, r1
 800f95e:	61da      	str	r2, [r3, #28]
 800f960:	e01b      	b.n	800f99a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6818      	ldr	r0, [r3, #0]
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	6819      	ldr	r1, [r3, #0]
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	685a      	ldr	r2, [r3, #4]
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	f000 fccd 	bl	8010310 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	69da      	ldr	r2, [r3, #28]
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f984:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	69d9      	ldr	r1, [r3, #28]
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	689b      	ldr	r3, [r3, #8]
 800f990:	021a      	lsls	r2, r3, #8
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	430a      	orrs	r2, r1
 800f998:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2200      	movs	r2, #0
 800f99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f9a2:	2300      	movs	r3, #0
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3710      	adds	r7, #16
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	60b9      	str	r1, [r7, #8]
 800f9b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d101      	bne.n	800f9c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f9c2:	2302      	movs	r3, #2
 800f9c4:	e0ac      	b.n	800fb20 <HAL_TIM_PWM_ConfigChannel+0x174>
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2b0c      	cmp	r3, #12
 800f9d2:	f200 809f 	bhi.w	800fb14 <HAL_TIM_PWM_ConfigChannel+0x168>
 800f9d6:	a201      	add	r2, pc, #4	; (adr r2, 800f9dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9dc:	0800fa11 	.word	0x0800fa11
 800f9e0:	0800fb15 	.word	0x0800fb15
 800f9e4:	0800fb15 	.word	0x0800fb15
 800f9e8:	0800fb15 	.word	0x0800fb15
 800f9ec:	0800fa51 	.word	0x0800fa51
 800f9f0:	0800fb15 	.word	0x0800fb15
 800f9f4:	0800fb15 	.word	0x0800fb15
 800f9f8:	0800fb15 	.word	0x0800fb15
 800f9fc:	0800fa93 	.word	0x0800fa93
 800fa00:	0800fb15 	.word	0x0800fb15
 800fa04:	0800fb15 	.word	0x0800fb15
 800fa08:	0800fb15 	.word	0x0800fb15
 800fa0c:	0800fad3 	.word	0x0800fad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	68b9      	ldr	r1, [r7, #8]
 800fa16:	4618      	mov	r0, r3
 800fa18:	f000 f9c4 	bl	800fda4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	699a      	ldr	r2, [r3, #24]
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f042 0208 	orr.w	r2, r2, #8
 800fa2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	699a      	ldr	r2, [r3, #24]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	f022 0204 	bic.w	r2, r2, #4
 800fa3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	6999      	ldr	r1, [r3, #24]
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	691a      	ldr	r2, [r3, #16]
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	430a      	orrs	r2, r1
 800fa4c:	619a      	str	r2, [r3, #24]
      break;
 800fa4e:	e062      	b.n	800fb16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	68b9      	ldr	r1, [r7, #8]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f000 fa0a 	bl	800fe70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	699a      	ldr	r2, [r3, #24]
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	699a      	ldr	r2, [r3, #24]
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	6999      	ldr	r1, [r3, #24]
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	691b      	ldr	r3, [r3, #16]
 800fa86:	021a      	lsls	r2, r3, #8
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	430a      	orrs	r2, r1
 800fa8e:	619a      	str	r2, [r3, #24]
      break;
 800fa90:	e041      	b.n	800fb16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	68b9      	ldr	r1, [r7, #8]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f000 fa53 	bl	800ff44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	69da      	ldr	r2, [r3, #28]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f042 0208 	orr.w	r2, r2, #8
 800faac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	69da      	ldr	r2, [r3, #28]
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f022 0204 	bic.w	r2, r2, #4
 800fabc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	69d9      	ldr	r1, [r3, #28]
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	691a      	ldr	r2, [r3, #16]
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	430a      	orrs	r2, r1
 800face:	61da      	str	r2, [r3, #28]
      break;
 800fad0:	e021      	b.n	800fb16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	68b9      	ldr	r1, [r7, #8]
 800fad8:	4618      	mov	r0, r3
 800fada:	f000 fa9d 	bl	8010018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	69da      	ldr	r2, [r3, #28]
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800faec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	69da      	ldr	r2, [r3, #28]
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fafc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	69d9      	ldr	r1, [r3, #28]
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	691b      	ldr	r3, [r3, #16]
 800fb08:	021a      	lsls	r2, r3, #8
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	430a      	orrs	r2, r1
 800fb10:	61da      	str	r2, [r3, #28]
      break;
 800fb12:	e000      	b.n	800fb16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800fb14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb1e:	2300      	movs	r3, #0
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3710      	adds	r7, #16
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d101      	bne.n	800fb40 <HAL_TIM_ConfigClockSource+0x18>
 800fb3c:	2302      	movs	r3, #2
 800fb3e:	e0a6      	b.n	800fc8e <HAL_TIM_ConfigClockSource+0x166>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2202      	movs	r2, #2
 800fb4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fb5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fb66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	68fa      	ldr	r2, [r7, #12]
 800fb6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	2b40      	cmp	r3, #64	; 0x40
 800fb76:	d067      	beq.n	800fc48 <HAL_TIM_ConfigClockSource+0x120>
 800fb78:	2b40      	cmp	r3, #64	; 0x40
 800fb7a:	d80b      	bhi.n	800fb94 <HAL_TIM_ConfigClockSource+0x6c>
 800fb7c:	2b10      	cmp	r3, #16
 800fb7e:	d073      	beq.n	800fc68 <HAL_TIM_ConfigClockSource+0x140>
 800fb80:	2b10      	cmp	r3, #16
 800fb82:	d802      	bhi.n	800fb8a <HAL_TIM_ConfigClockSource+0x62>
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d06f      	beq.n	800fc68 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800fb88:	e078      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fb8a:	2b20      	cmp	r3, #32
 800fb8c:	d06c      	beq.n	800fc68 <HAL_TIM_ConfigClockSource+0x140>
 800fb8e:	2b30      	cmp	r3, #48	; 0x30
 800fb90:	d06a      	beq.n	800fc68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800fb92:	e073      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fb94:	2b70      	cmp	r3, #112	; 0x70
 800fb96:	d00d      	beq.n	800fbb4 <HAL_TIM_ConfigClockSource+0x8c>
 800fb98:	2b70      	cmp	r3, #112	; 0x70
 800fb9a:	d804      	bhi.n	800fba6 <HAL_TIM_ConfigClockSource+0x7e>
 800fb9c:	2b50      	cmp	r3, #80	; 0x50
 800fb9e:	d033      	beq.n	800fc08 <HAL_TIM_ConfigClockSource+0xe0>
 800fba0:	2b60      	cmp	r3, #96	; 0x60
 800fba2:	d041      	beq.n	800fc28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800fba4:	e06a      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbaa:	d066      	beq.n	800fc7a <HAL_TIM_ConfigClockSource+0x152>
 800fbac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fbb0:	d017      	beq.n	800fbe2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800fbb2:	e063      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6818      	ldr	r0, [r3, #0]
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	6899      	ldr	r1, [r3, #8]
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	685a      	ldr	r2, [r3, #4]
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	f000 fbfa 	bl	80103bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fbd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	609a      	str	r2, [r3, #8]
      break;
 800fbe0:	e04c      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6818      	ldr	r0, [r3, #0]
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	6899      	ldr	r1, [r3, #8]
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	685a      	ldr	r2, [r3, #4]
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	68db      	ldr	r3, [r3, #12]
 800fbf2:	f000 fbe3 	bl	80103bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	689a      	ldr	r2, [r3, #8]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fc04:	609a      	str	r2, [r3, #8]
      break;
 800fc06:	e039      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6818      	ldr	r0, [r3, #0]
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	6859      	ldr	r1, [r3, #4]
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	461a      	mov	r2, r3
 800fc16:	f000 faa7 	bl	8010168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2150      	movs	r1, #80	; 0x50
 800fc20:	4618      	mov	r0, r3
 800fc22:	f000 fbb1 	bl	8010388 <TIM_ITRx_SetConfig>
      break;
 800fc26:	e029      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	6818      	ldr	r0, [r3, #0]
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	6859      	ldr	r1, [r3, #4]
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	68db      	ldr	r3, [r3, #12]
 800fc34:	461a      	mov	r2, r3
 800fc36:	f000 fb01 	bl	801023c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	2160      	movs	r1, #96	; 0x60
 800fc40:	4618      	mov	r0, r3
 800fc42:	f000 fba1 	bl	8010388 <TIM_ITRx_SetConfig>
      break;
 800fc46:	e019      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6818      	ldr	r0, [r3, #0]
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	6859      	ldr	r1, [r3, #4]
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	68db      	ldr	r3, [r3, #12]
 800fc54:	461a      	mov	r2, r3
 800fc56:	f000 fa87 	bl	8010168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	2140      	movs	r1, #64	; 0x40
 800fc60:	4618      	mov	r0, r3
 800fc62:	f000 fb91 	bl	8010388 <TIM_ITRx_SetConfig>
      break;
 800fc66:	e009      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	4619      	mov	r1, r3
 800fc72:	4610      	mov	r0, r2
 800fc74:	f000 fb88 	bl	8010388 <TIM_ITRx_SetConfig>
        break;
 800fc78:	e000      	b.n	800fc7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800fc7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc8c:	2300      	movs	r3, #0
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fc96:	b480      	push	{r7}
 800fc98:	b083      	sub	sp, #12
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fc9e:	bf00      	nop
 800fca0:	370c      	adds	r7, #12
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bc80      	pop	{r7}
 800fca6:	4770      	bx	lr

0800fca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fcb0:	bf00      	nop
 800fcb2:	370c      	adds	r7, #12
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bc80      	pop	{r7}
 800fcb8:	4770      	bx	lr

0800fcba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fcba:	b480      	push	{r7}
 800fcbc:	b083      	sub	sp, #12
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fcc2:	bf00      	nop
 800fcc4:	370c      	adds	r7, #12
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bc80      	pop	{r7}
 800fcca:	4770      	bx	lr

0800fccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fcd4:	bf00      	nop
 800fcd6:	370c      	adds	r7, #12
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bc80      	pop	{r7}
 800fcdc:	4770      	bx	lr
	...

0800fce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b085      	sub	sp, #20
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4a29      	ldr	r2, [pc, #164]	; (800fd98 <TIM_Base_SetConfig+0xb8>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d00b      	beq.n	800fd10 <TIM_Base_SetConfig+0x30>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcfe:	d007      	beq.n	800fd10 <TIM_Base_SetConfig+0x30>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	4a26      	ldr	r2, [pc, #152]	; (800fd9c <TIM_Base_SetConfig+0xbc>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d003      	beq.n	800fd10 <TIM_Base_SetConfig+0x30>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	4a25      	ldr	r2, [pc, #148]	; (800fda0 <TIM_Base_SetConfig+0xc0>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d108      	bne.n	800fd22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	68fa      	ldr	r2, [r7, #12]
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	4a1c      	ldr	r2, [pc, #112]	; (800fd98 <TIM_Base_SetConfig+0xb8>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d00b      	beq.n	800fd42 <TIM_Base_SetConfig+0x62>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd30:	d007      	beq.n	800fd42 <TIM_Base_SetConfig+0x62>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	4a19      	ldr	r2, [pc, #100]	; (800fd9c <TIM_Base_SetConfig+0xbc>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d003      	beq.n	800fd42 <TIM_Base_SetConfig+0x62>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4a18      	ldr	r2, [pc, #96]	; (800fda0 <TIM_Base_SetConfig+0xc0>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d108      	bne.n	800fd54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	68db      	ldr	r3, [r3, #12]
 800fd4e:	68fa      	ldr	r2, [r7, #12]
 800fd50:	4313      	orrs	r3, r2
 800fd52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	695b      	ldr	r3, [r3, #20]
 800fd5e:	4313      	orrs	r3, r2
 800fd60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	68fa      	ldr	r2, [r7, #12]
 800fd66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	689a      	ldr	r2, [r3, #8]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4a07      	ldr	r2, [pc, #28]	; (800fd98 <TIM_Base_SetConfig+0xb8>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d103      	bne.n	800fd88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	691a      	ldr	r2, [r3, #16]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	615a      	str	r2, [r3, #20]
}
 800fd8e:	bf00      	nop
 800fd90:	3714      	adds	r7, #20
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bc80      	pop	{r7}
 800fd96:	4770      	bx	lr
 800fd98:	40012c00 	.word	0x40012c00
 800fd9c:	40000400 	.word	0x40000400
 800fda0:	40000800 	.word	0x40000800

0800fda4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b087      	sub	sp, #28
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6a1b      	ldr	r3, [r3, #32]
 800fdb2:	f023 0201 	bic.w	r2, r3, #1
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6a1b      	ldr	r3, [r3, #32]
 800fdbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	699b      	ldr	r3, [r3, #24]
 800fdca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f023 0303 	bic.w	r3, r3, #3
 800fdda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	68fa      	ldr	r2, [r7, #12]
 800fde2:	4313      	orrs	r3, r2
 800fde4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	f023 0302 	bic.w	r3, r3, #2
 800fdec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	689b      	ldr	r3, [r3, #8]
 800fdf2:	697a      	ldr	r2, [r7, #20]
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	4a1c      	ldr	r2, [pc, #112]	; (800fe6c <TIM_OC1_SetConfig+0xc8>)
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d10c      	bne.n	800fe1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	f023 0308 	bic.w	r3, r3, #8
 800fe06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	697a      	ldr	r2, [r7, #20]
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	f023 0304 	bic.w	r3, r3, #4
 800fe18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4a13      	ldr	r2, [pc, #76]	; (800fe6c <TIM_OC1_SetConfig+0xc8>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d111      	bne.n	800fe46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fe30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	695b      	ldr	r3, [r3, #20]
 800fe36:	693a      	ldr	r2, [r7, #16]
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	699b      	ldr	r3, [r3, #24]
 800fe40:	693a      	ldr	r2, [r7, #16]
 800fe42:	4313      	orrs	r3, r2
 800fe44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	693a      	ldr	r2, [r7, #16]
 800fe4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	68fa      	ldr	r2, [r7, #12]
 800fe50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	685a      	ldr	r2, [r3, #4]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	697a      	ldr	r2, [r7, #20]
 800fe5e:	621a      	str	r2, [r3, #32]
}
 800fe60:	bf00      	nop
 800fe62:	371c      	adds	r7, #28
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bc80      	pop	{r7}
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	40012c00 	.word	0x40012c00

0800fe70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b087      	sub	sp, #28
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6a1b      	ldr	r3, [r3, #32]
 800fe7e:	f023 0210 	bic.w	r2, r3, #16
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6a1b      	ldr	r3, [r3, #32]
 800fe8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	699b      	ldr	r3, [r3, #24]
 800fe96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	021b      	lsls	r3, r3, #8
 800feae:	68fa      	ldr	r2, [r7, #12]
 800feb0:	4313      	orrs	r3, r2
 800feb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	f023 0320 	bic.w	r3, r3, #32
 800feba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	689b      	ldr	r3, [r3, #8]
 800fec0:	011b      	lsls	r3, r3, #4
 800fec2:	697a      	ldr	r2, [r7, #20]
 800fec4:	4313      	orrs	r3, r2
 800fec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	4a1d      	ldr	r2, [pc, #116]	; (800ff40 <TIM_OC2_SetConfig+0xd0>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d10d      	bne.n	800feec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	011b      	lsls	r3, r3, #4
 800fede:	697a      	ldr	r2, [r7, #20]
 800fee0:	4313      	orrs	r3, r2
 800fee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800feea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	4a14      	ldr	r2, [pc, #80]	; (800ff40 <TIM_OC2_SetConfig+0xd0>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d113      	bne.n	800ff1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fefa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ff02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	695b      	ldr	r3, [r3, #20]
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	693a      	ldr	r2, [r7, #16]
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	699b      	ldr	r3, [r3, #24]
 800ff14:	009b      	lsls	r3, r3, #2
 800ff16:	693a      	ldr	r2, [r7, #16]
 800ff18:	4313      	orrs	r3, r2
 800ff1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	693a      	ldr	r2, [r7, #16]
 800ff20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	68fa      	ldr	r2, [r7, #12]
 800ff26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	685a      	ldr	r2, [r3, #4]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	697a      	ldr	r2, [r7, #20]
 800ff34:	621a      	str	r2, [r3, #32]
}
 800ff36:	bf00      	nop
 800ff38:	371c      	adds	r7, #28
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bc80      	pop	{r7}
 800ff3e:	4770      	bx	lr
 800ff40:	40012c00 	.word	0x40012c00

0800ff44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b087      	sub	sp, #28
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6a1b      	ldr	r3, [r3, #32]
 800ff52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a1b      	ldr	r3, [r3, #32]
 800ff5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	69db      	ldr	r3, [r3, #28]
 800ff6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f023 0303 	bic.w	r3, r3, #3
 800ff7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	4313      	orrs	r3, r2
 800ff84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ff8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	021b      	lsls	r3, r3, #8
 800ff94:	697a      	ldr	r2, [r7, #20]
 800ff96:	4313      	orrs	r3, r2
 800ff98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4a1d      	ldr	r2, [pc, #116]	; (8010014 <TIM_OC3_SetConfig+0xd0>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d10d      	bne.n	800ffbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ffa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	021b      	lsls	r3, r3, #8
 800ffb0:	697a      	ldr	r2, [r7, #20]
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ffbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4a14      	ldr	r2, [pc, #80]	; (8010014 <TIM_OC3_SetConfig+0xd0>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d113      	bne.n	800ffee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ffd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	695b      	ldr	r3, [r3, #20]
 800ffda:	011b      	lsls	r3, r3, #4
 800ffdc:	693a      	ldr	r2, [r7, #16]
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	699b      	ldr	r3, [r3, #24]
 800ffe6:	011b      	lsls	r3, r3, #4
 800ffe8:	693a      	ldr	r2, [r7, #16]
 800ffea:	4313      	orrs	r3, r2
 800ffec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	693a      	ldr	r2, [r7, #16]
 800fff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	68fa      	ldr	r2, [r7, #12]
 800fff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	685a      	ldr	r2, [r3, #4]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	697a      	ldr	r2, [r7, #20]
 8010006:	621a      	str	r2, [r3, #32]
}
 8010008:	bf00      	nop
 801000a:	371c      	adds	r7, #28
 801000c:	46bd      	mov	sp, r7
 801000e:	bc80      	pop	{r7}
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop
 8010014:	40012c00 	.word	0x40012c00

08010018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010018:	b480      	push	{r7}
 801001a:	b087      	sub	sp, #28
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6a1b      	ldr	r3, [r3, #32]
 8010026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6a1b      	ldr	r3, [r3, #32]
 8010032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	69db      	ldr	r3, [r3, #28]
 801003e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801004e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	021b      	lsls	r3, r3, #8
 8010056:	68fa      	ldr	r2, [r7, #12]
 8010058:	4313      	orrs	r3, r2
 801005a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	689b      	ldr	r3, [r3, #8]
 8010068:	031b      	lsls	r3, r3, #12
 801006a:	693a      	ldr	r2, [r7, #16]
 801006c:	4313      	orrs	r3, r2
 801006e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	4a0f      	ldr	r2, [pc, #60]	; (80100b0 <TIM_OC4_SetConfig+0x98>)
 8010074:	4293      	cmp	r3, r2
 8010076:	d109      	bne.n	801008c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801007e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	695b      	ldr	r3, [r3, #20]
 8010084:	019b      	lsls	r3, r3, #6
 8010086:	697a      	ldr	r2, [r7, #20]
 8010088:	4313      	orrs	r3, r2
 801008a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	697a      	ldr	r2, [r7, #20]
 8010090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	68fa      	ldr	r2, [r7, #12]
 8010096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	685a      	ldr	r2, [r3, #4]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	693a      	ldr	r2, [r7, #16]
 80100a4:	621a      	str	r2, [r3, #32]
}
 80100a6:	bf00      	nop
 80100a8:	371c      	adds	r7, #28
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bc80      	pop	{r7}
 80100ae:	4770      	bx	lr
 80100b0:	40012c00 	.word	0x40012c00

080100b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80100b4:	b480      	push	{r7}
 80100b6:	b087      	sub	sp, #28
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]
 80100c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6a1b      	ldr	r3, [r3, #32]
 80100c6:	f023 0201 	bic.w	r2, r3, #1
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	699b      	ldr	r3, [r3, #24]
 80100d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	6a1b      	ldr	r3, [r3, #32]
 80100d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	4a1f      	ldr	r2, [pc, #124]	; (801015c <TIM_TI1_SetConfig+0xa8>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d00b      	beq.n	80100fa <TIM_TI1_SetConfig+0x46>
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100e8:	d007      	beq.n	80100fa <TIM_TI1_SetConfig+0x46>
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	4a1c      	ldr	r2, [pc, #112]	; (8010160 <TIM_TI1_SetConfig+0xac>)
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d003      	beq.n	80100fa <TIM_TI1_SetConfig+0x46>
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	4a1b      	ldr	r2, [pc, #108]	; (8010164 <TIM_TI1_SetConfig+0xb0>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d101      	bne.n	80100fe <TIM_TI1_SetConfig+0x4a>
 80100fa:	2301      	movs	r3, #1
 80100fc:	e000      	b.n	8010100 <TIM_TI1_SetConfig+0x4c>
 80100fe:	2300      	movs	r3, #0
 8010100:	2b00      	cmp	r3, #0
 8010102:	d008      	beq.n	8010116 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	f023 0303 	bic.w	r3, r3, #3
 801010a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801010c:	697a      	ldr	r2, [r7, #20]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4313      	orrs	r3, r2
 8010112:	617b      	str	r3, [r7, #20]
 8010114:	e003      	b.n	801011e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	f043 0301 	orr.w	r3, r3, #1
 801011c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	011b      	lsls	r3, r3, #4
 801012a:	b2db      	uxtb	r3, r3
 801012c:	697a      	ldr	r2, [r7, #20]
 801012e:	4313      	orrs	r3, r2
 8010130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	f023 030a 	bic.w	r3, r3, #10
 8010138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	f003 030a 	and.w	r3, r3, #10
 8010140:	693a      	ldr	r2, [r7, #16]
 8010142:	4313      	orrs	r3, r2
 8010144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	697a      	ldr	r2, [r7, #20]
 801014a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	693a      	ldr	r2, [r7, #16]
 8010150:	621a      	str	r2, [r3, #32]
}
 8010152:	bf00      	nop
 8010154:	371c      	adds	r7, #28
 8010156:	46bd      	mov	sp, r7
 8010158:	bc80      	pop	{r7}
 801015a:	4770      	bx	lr
 801015c:	40012c00 	.word	0x40012c00
 8010160:	40000400 	.word	0x40000400
 8010164:	40000800 	.word	0x40000800

08010168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010168:	b480      	push	{r7}
 801016a:	b087      	sub	sp, #28
 801016c:	af00      	add	r7, sp, #0
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6a1b      	ldr	r3, [r3, #32]
 8010178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	6a1b      	ldr	r3, [r3, #32]
 801017e:	f023 0201 	bic.w	r2, r3, #1
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	699b      	ldr	r3, [r3, #24]
 801018a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	011b      	lsls	r3, r3, #4
 8010198:	693a      	ldr	r2, [r7, #16]
 801019a:	4313      	orrs	r3, r2
 801019c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	f023 030a 	bic.w	r3, r3, #10
 80101a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80101a6:	697a      	ldr	r2, [r7, #20]
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	4313      	orrs	r3, r2
 80101ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	693a      	ldr	r2, [r7, #16]
 80101b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	697a      	ldr	r2, [r7, #20]
 80101b8:	621a      	str	r2, [r3, #32]
}
 80101ba:	bf00      	nop
 80101bc:	371c      	adds	r7, #28
 80101be:	46bd      	mov	sp, r7
 80101c0:	bc80      	pop	{r7}
 80101c2:	4770      	bx	lr

080101c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b087      	sub	sp, #28
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	607a      	str	r2, [r7, #4]
 80101d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	6a1b      	ldr	r3, [r3, #32]
 80101d6:	f023 0210 	bic.w	r2, r3, #16
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	699b      	ldr	r3, [r3, #24]
 80101e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	6a1b      	ldr	r3, [r3, #32]
 80101e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	021b      	lsls	r3, r3, #8
 80101f6:	697a      	ldr	r2, [r7, #20]
 80101f8:	4313      	orrs	r3, r2
 80101fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010202:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	031b      	lsls	r3, r3, #12
 8010208:	b29b      	uxth	r3, r3
 801020a:	697a      	ldr	r2, [r7, #20]
 801020c:	4313      	orrs	r3, r2
 801020e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010216:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	011b      	lsls	r3, r3, #4
 801021c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010220:	693a      	ldr	r2, [r7, #16]
 8010222:	4313      	orrs	r3, r2
 8010224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	697a      	ldr	r2, [r7, #20]
 801022a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	693a      	ldr	r2, [r7, #16]
 8010230:	621a      	str	r2, [r3, #32]
}
 8010232:	bf00      	nop
 8010234:	371c      	adds	r7, #28
 8010236:	46bd      	mov	sp, r7
 8010238:	bc80      	pop	{r7}
 801023a:	4770      	bx	lr

0801023c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801023c:	b480      	push	{r7}
 801023e:	b087      	sub	sp, #28
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	6a1b      	ldr	r3, [r3, #32]
 801024c:	f023 0210 	bic.w	r2, r3, #16
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	699b      	ldr	r3, [r3, #24]
 8010258:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	6a1b      	ldr	r3, [r3, #32]
 801025e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010266:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	031b      	lsls	r3, r3, #12
 801026c:	697a      	ldr	r2, [r7, #20]
 801026e:	4313      	orrs	r3, r2
 8010270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010278:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	011b      	lsls	r3, r3, #4
 801027e:	693a      	ldr	r2, [r7, #16]
 8010280:	4313      	orrs	r3, r2
 8010282:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	697a      	ldr	r2, [r7, #20]
 8010288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	693a      	ldr	r2, [r7, #16]
 801028e:	621a      	str	r2, [r3, #32]
}
 8010290:	bf00      	nop
 8010292:	371c      	adds	r7, #28
 8010294:	46bd      	mov	sp, r7
 8010296:	bc80      	pop	{r7}
 8010298:	4770      	bx	lr

0801029a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801029a:	b480      	push	{r7}
 801029c:	b087      	sub	sp, #28
 801029e:	af00      	add	r7, sp, #0
 80102a0:	60f8      	str	r0, [r7, #12]
 80102a2:	60b9      	str	r1, [r7, #8]
 80102a4:	607a      	str	r2, [r7, #4]
 80102a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	6a1b      	ldr	r3, [r3, #32]
 80102ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	69db      	ldr	r3, [r3, #28]
 80102b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	6a1b      	ldr	r3, [r3, #32]
 80102be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	f023 0303 	bic.w	r3, r3, #3
 80102c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80102c8:	697a      	ldr	r2, [r7, #20]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4313      	orrs	r3, r2
 80102ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80102d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	011b      	lsls	r3, r3, #4
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	697a      	ldr	r2, [r7, #20]
 80102e0:	4313      	orrs	r3, r2
 80102e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80102ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	021b      	lsls	r3, r3, #8
 80102f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	4313      	orrs	r3, r2
 80102f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	697a      	ldr	r2, [r7, #20]
 80102fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	693a      	ldr	r2, [r7, #16]
 8010304:	621a      	str	r2, [r3, #32]
}
 8010306:	bf00      	nop
 8010308:	371c      	adds	r7, #28
 801030a:	46bd      	mov	sp, r7
 801030c:	bc80      	pop	{r7}
 801030e:	4770      	bx	lr

08010310 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010310:	b480      	push	{r7}
 8010312:	b087      	sub	sp, #28
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	607a      	str	r2, [r7, #4]
 801031c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	6a1b      	ldr	r3, [r3, #32]
 8010322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	69db      	ldr	r3, [r3, #28]
 801032e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	6a1b      	ldr	r3, [r3, #32]
 8010334:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801033c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	021b      	lsls	r3, r3, #8
 8010342:	697a      	ldr	r2, [r7, #20]
 8010344:	4313      	orrs	r3, r2
 8010346:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801034e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	031b      	lsls	r3, r3, #12
 8010354:	b29b      	uxth	r3, r3
 8010356:	697a      	ldr	r2, [r7, #20]
 8010358:	4313      	orrs	r3, r2
 801035a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010362:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	031b      	lsls	r3, r3, #12
 8010368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801036c:	693a      	ldr	r2, [r7, #16]
 801036e:	4313      	orrs	r3, r2
 8010370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	697a      	ldr	r2, [r7, #20]
 8010376:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	693a      	ldr	r2, [r7, #16]
 801037c:	621a      	str	r2, [r3, #32]
}
 801037e:	bf00      	nop
 8010380:	371c      	adds	r7, #28
 8010382:	46bd      	mov	sp, r7
 8010384:	bc80      	pop	{r7}
 8010386:	4770      	bx	lr

08010388 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010388:	b480      	push	{r7}
 801038a:	b085      	sub	sp, #20
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	689b      	ldr	r3, [r3, #8]
 8010396:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801039e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80103a0:	683a      	ldr	r2, [r7, #0]
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	4313      	orrs	r3, r2
 80103a6:	f043 0307 	orr.w	r3, r3, #7
 80103aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	68fa      	ldr	r2, [r7, #12]
 80103b0:	609a      	str	r2, [r3, #8]
}
 80103b2:	bf00      	nop
 80103b4:	3714      	adds	r7, #20
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bc80      	pop	{r7}
 80103ba:	4770      	bx	lr

080103bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80103bc:	b480      	push	{r7}
 80103be:	b087      	sub	sp, #28
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	607a      	str	r2, [r7, #4]
 80103c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80103d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	021a      	lsls	r2, r3, #8
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	431a      	orrs	r2, r3
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	4313      	orrs	r3, r2
 80103e4:	697a      	ldr	r2, [r7, #20]
 80103e6:	4313      	orrs	r3, r2
 80103e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	697a      	ldr	r2, [r7, #20]
 80103ee:	609a      	str	r2, [r3, #8]
}
 80103f0:	bf00      	nop
 80103f2:	371c      	adds	r7, #28
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bc80      	pop	{r7}
 80103f8:	4770      	bx	lr

080103fa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80103fa:	b480      	push	{r7}
 80103fc:	b087      	sub	sp, #28
 80103fe:	af00      	add	r7, sp, #0
 8010400:	60f8      	str	r0, [r7, #12]
 8010402:	60b9      	str	r1, [r7, #8]
 8010404:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	f003 031f 	and.w	r3, r3, #31
 801040c:	2201      	movs	r2, #1
 801040e:	fa02 f303 	lsl.w	r3, r2, r3
 8010412:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	6a1a      	ldr	r2, [r3, #32]
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	43db      	mvns	r3, r3
 801041c:	401a      	ands	r2, r3
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	6a1a      	ldr	r2, [r3, #32]
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	f003 031f 	and.w	r3, r3, #31
 801042c:	6879      	ldr	r1, [r7, #4]
 801042e:	fa01 f303 	lsl.w	r3, r1, r3
 8010432:	431a      	orrs	r2, r3
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	621a      	str	r2, [r3, #32]
}
 8010438:	bf00      	nop
 801043a:	371c      	adds	r7, #28
 801043c:	46bd      	mov	sp, r7
 801043e:	bc80      	pop	{r7}
 8010440:	4770      	bx	lr
	...

08010444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010444:	b480      	push	{r7}
 8010446:	b085      	sub	sp, #20
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010454:	2b01      	cmp	r3, #1
 8010456:	d101      	bne.n	801045c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010458:	2302      	movs	r3, #2
 801045a:	e046      	b.n	80104ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2201      	movs	r2, #1
 8010460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2202      	movs	r2, #2
 8010468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	689b      	ldr	r3, [r3, #8]
 801047a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	68fa      	ldr	r2, [r7, #12]
 801048a:	4313      	orrs	r3, r2
 801048c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4a16      	ldr	r2, [pc, #88]	; (80104f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801049c:	4293      	cmp	r3, r2
 801049e:	d00e      	beq.n	80104be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104a8:	d009      	beq.n	80104be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	4a12      	ldr	r2, [pc, #72]	; (80104f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d004      	beq.n	80104be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	4a10      	ldr	r2, [pc, #64]	; (80104fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80104ba:	4293      	cmp	r3, r2
 80104bc:	d10c      	bne.n	80104d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	68ba      	ldr	r2, [r7, #8]
 80104cc:	4313      	orrs	r3, r2
 80104ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	68ba      	ldr	r2, [r7, #8]
 80104d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2201      	movs	r2, #1
 80104dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2200      	movs	r2, #0
 80104e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80104e8:	2300      	movs	r3, #0
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3714      	adds	r7, #20
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bc80      	pop	{r7}
 80104f2:	4770      	bx	lr
 80104f4:	40012c00 	.word	0x40012c00
 80104f8:	40000400 	.word	0x40000400
 80104fc:	40000800 	.word	0x40000800

08010500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010508:	bf00      	nop
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	bc80      	pop	{r7}
 8010510:	4770      	bx	lr

08010512 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010512:	b480      	push	{r7}
 8010514:	b083      	sub	sp, #12
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801051a:	bf00      	nop
 801051c:	370c      	adds	r7, #12
 801051e:	46bd      	mov	sp, r7
 8010520:	bc80      	pop	{r7}
 8010522:	4770      	bx	lr

08010524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d101      	bne.n	8010536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010532:	2301      	movs	r3, #1
 8010534:	e03f      	b.n	80105b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801053c:	b2db      	uxtb	r3, r3
 801053e:	2b00      	cmp	r3, #0
 8010540:	d106      	bne.n	8010550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2200      	movs	r2, #0
 8010546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f7fb fe02 	bl	800c154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2224      	movs	r2, #36	; 0x24
 8010554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	68da      	ldr	r2, [r3, #12]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f000 fc95 	bl	8010e98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	691a      	ldr	r2, [r3, #16]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801057c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	695a      	ldr	r2, [r3, #20]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801058c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	68da      	ldr	r2, [r3, #12]
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801059c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2200      	movs	r2, #0
 80105a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2220      	movs	r2, #32
 80105a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2220      	movs	r2, #32
 80105b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80105b4:	2300      	movs	r3, #0
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}

080105be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b08a      	sub	sp, #40	; 0x28
 80105c2:	af02      	add	r7, sp, #8
 80105c4:	60f8      	str	r0, [r7, #12]
 80105c6:	60b9      	str	r1, [r7, #8]
 80105c8:	603b      	str	r3, [r7, #0]
 80105ca:	4613      	mov	r3, r2
 80105cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80105ce:	2300      	movs	r3, #0
 80105d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80105d8:	b2db      	uxtb	r3, r3
 80105da:	2b20      	cmp	r3, #32
 80105dc:	d17c      	bne.n	80106d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d002      	beq.n	80105ea <HAL_UART_Transmit+0x2c>
 80105e4:	88fb      	ldrh	r3, [r7, #6]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d101      	bne.n	80105ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80105ea:	2301      	movs	r3, #1
 80105ec:	e075      	b.n	80106da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d101      	bne.n	80105fc <HAL_UART_Transmit+0x3e>
 80105f8:	2302      	movs	r3, #2
 80105fa:	e06e      	b.n	80106da <HAL_UART_Transmit+0x11c>
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2201      	movs	r2, #1
 8010600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2200      	movs	r2, #0
 8010608:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2221      	movs	r2, #33	; 0x21
 801060e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010612:	f7fb ff9f 	bl	800c554 <HAL_GetTick>
 8010616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	88fa      	ldrh	r2, [r7, #6]
 801061c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	88fa      	ldrh	r2, [r7, #6]
 8010622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	689b      	ldr	r3, [r3, #8]
 8010628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801062c:	d108      	bne.n	8010640 <HAL_UART_Transmit+0x82>
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	691b      	ldr	r3, [r3, #16]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d104      	bne.n	8010640 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8010636:	2300      	movs	r3, #0
 8010638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	61bb      	str	r3, [r7, #24]
 801063e:	e003      	b.n	8010648 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010644:	2300      	movs	r3, #0
 8010646:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2200      	movs	r2, #0
 801064c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8010650:	e02a      	b.n	80106a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	2200      	movs	r2, #0
 801065a:	2180      	movs	r1, #128	; 0x80
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f000 faa3 	bl	8010ba8 <UART_WaitOnFlagUntilTimeout>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d001      	beq.n	801066c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8010668:	2303      	movs	r3, #3
 801066a:	e036      	b.n	80106da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d10b      	bne.n	801068a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	881b      	ldrh	r3, [r3, #0]
 8010676:	461a      	mov	r2, r3
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	3302      	adds	r3, #2
 8010686:	61bb      	str	r3, [r7, #24]
 8010688:	e007      	b.n	801069a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801068a:	69fb      	ldr	r3, [r7, #28]
 801068c:	781a      	ldrb	r2, [r3, #0]
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010694:	69fb      	ldr	r3, [r7, #28]
 8010696:	3301      	adds	r3, #1
 8010698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801069e:	b29b      	uxth	r3, r3
 80106a0:	3b01      	subs	r3, #1
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d1cf      	bne.n	8010652 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	9300      	str	r3, [sp, #0]
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	2200      	movs	r2, #0
 80106ba:	2140      	movs	r1, #64	; 0x40
 80106bc:	68f8      	ldr	r0, [r7, #12]
 80106be:	f000 fa73 	bl	8010ba8 <UART_WaitOnFlagUntilTimeout>
 80106c2:	4603      	mov	r3, r0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d001      	beq.n	80106cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80106c8:	2303      	movs	r3, #3
 80106ca:	e006      	b.n	80106da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2220      	movs	r2, #32
 80106d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80106d4:	2300      	movs	r3, #0
 80106d6:	e000      	b.n	80106da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80106d8:	2302      	movs	r3, #2
  }
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3720      	adds	r7, #32
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}

080106e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80106e2:	b480      	push	{r7}
 80106e4:	b085      	sub	sp, #20
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	60f8      	str	r0, [r7, #12]
 80106ea:	60b9      	str	r1, [r7, #8]
 80106ec:	4613      	mov	r3, r2
 80106ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	2b20      	cmp	r3, #32
 80106fa:	d130      	bne.n	801075e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d002      	beq.n	8010708 <HAL_UART_Transmit_IT+0x26>
 8010702:	88fb      	ldrh	r3, [r7, #6]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d101      	bne.n	801070c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8010708:	2301      	movs	r3, #1
 801070a:	e029      	b.n	8010760 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010712:	2b01      	cmp	r3, #1
 8010714:	d101      	bne.n	801071a <HAL_UART_Transmit_IT+0x38>
 8010716:	2302      	movs	r3, #2
 8010718:	e022      	b.n	8010760 <HAL_UART_Transmit_IT+0x7e>
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2201      	movs	r2, #1
 801071e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	68ba      	ldr	r2, [r7, #8]
 8010726:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	88fa      	ldrh	r2, [r7, #6]
 801072c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	88fa      	ldrh	r2, [r7, #6]
 8010732:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	2200      	movs	r2, #0
 8010738:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2221      	movs	r2, #33	; 0x21
 801073e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2200      	movs	r2, #0
 8010746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	68da      	ldr	r2, [r3, #12]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010758:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801075a:	2300      	movs	r3, #0
 801075c:	e000      	b.n	8010760 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 801075e:	2302      	movs	r3, #2
  }
}
 8010760:	4618      	mov	r0, r3
 8010762:	3714      	adds	r7, #20
 8010764:	46bd      	mov	sp, r7
 8010766:	bc80      	pop	{r7}
 8010768:	4770      	bx	lr
	...

0801076c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b086      	sub	sp, #24
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	4613      	mov	r3, r2
 8010778:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010780:	b2db      	uxtb	r3, r3
 8010782:	2b20      	cmp	r3, #32
 8010784:	d166      	bne.n	8010854 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d002      	beq.n	8010792 <HAL_UART_Receive_DMA+0x26>
 801078c:	88fb      	ldrh	r3, [r7, #6]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d101      	bne.n	8010796 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010792:	2301      	movs	r3, #1
 8010794:	e05f      	b.n	8010856 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801079c:	2b01      	cmp	r3, #1
 801079e:	d101      	bne.n	80107a4 <HAL_UART_Receive_DMA+0x38>
 80107a0:	2302      	movs	r3, #2
 80107a2:	e058      	b.n	8010856 <HAL_UART_Receive_DMA+0xea>
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2201      	movs	r2, #1
 80107a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	88fa      	ldrh	r2, [r7, #6]
 80107b6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2200      	movs	r2, #0
 80107bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	2222      	movs	r2, #34	; 0x22
 80107c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ca:	4a25      	ldr	r2, [pc, #148]	; (8010860 <HAL_UART_Receive_DMA+0xf4>)
 80107cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d2:	4a24      	ldr	r2, [pc, #144]	; (8010864 <HAL_UART_Receive_DMA+0xf8>)
 80107d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107da:	4a23      	ldr	r2, [pc, #140]	; (8010868 <HAL_UART_Receive_DMA+0xfc>)
 80107dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107e2:	2200      	movs	r2, #0
 80107e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80107e6:	f107 0308 	add.w	r3, r7, #8
 80107ea:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	3304      	adds	r3, #4
 80107f6:	4619      	mov	r1, r3
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	88fb      	ldrh	r3, [r7, #6]
 80107fe:	f7fc f843 	bl	800c888 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8010802:	2300      	movs	r3, #0
 8010804:	613b      	str	r3, [r7, #16]
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	613b      	str	r3, [r7, #16]
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	613b      	str	r3, [r7, #16]
 8010816:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2200      	movs	r2, #0
 801081c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	68da      	ldr	r2, [r3, #12]
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801082e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	695a      	ldr	r2, [r3, #20]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f042 0201 	orr.w	r2, r2, #1
 801083e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	695a      	ldr	r2, [r3, #20]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801084e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8010850:	2300      	movs	r3, #0
 8010852:	e000      	b.n	8010856 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010854:	2302      	movs	r3, #2
  }
}
 8010856:	4618      	mov	r0, r3
 8010858:	3718      	adds	r7, #24
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	08010a91 	.word	0x08010a91
 8010864:	08010af9 	.word	0x08010af9
 8010868:	08010b15 	.word	0x08010b15

0801086c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b088      	sub	sp, #32
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	68db      	ldr	r3, [r3, #12]
 8010882:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	695b      	ldr	r3, [r3, #20]
 801088a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 801088c:	2300      	movs	r3, #0
 801088e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010890:	2300      	movs	r3, #0
 8010892:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	f003 030f 	and.w	r3, r3, #15
 801089a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d10d      	bne.n	80108be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80108a2:	69fb      	ldr	r3, [r7, #28]
 80108a4:	f003 0320 	and.w	r3, r3, #32
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d008      	beq.n	80108be <HAL_UART_IRQHandler+0x52>
 80108ac:	69bb      	ldr	r3, [r7, #24]
 80108ae:	f003 0320 	and.w	r3, r3, #32
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d003      	beq.n	80108be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 fa6d 	bl	8010d96 <UART_Receive_IT>
      return;
 80108bc:	e0d1      	b.n	8010a62 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	f000 80b0 	beq.w	8010a26 <HAL_UART_IRQHandler+0x1ba>
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	f003 0301 	and.w	r3, r3, #1
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d105      	bne.n	80108dc <HAL_UART_IRQHandler+0x70>
 80108d0:	69bb      	ldr	r3, [r7, #24]
 80108d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	f000 80a5 	beq.w	8010a26 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	f003 0301 	and.w	r3, r3, #1
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00a      	beq.n	80108fc <HAL_UART_IRQHandler+0x90>
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d005      	beq.n	80108fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108f4:	f043 0201 	orr.w	r2, r3, #1
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	f003 0304 	and.w	r3, r3, #4
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00a      	beq.n	801091c <HAL_UART_IRQHandler+0xb0>
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	f003 0301 	and.w	r3, r3, #1
 801090c:	2b00      	cmp	r3, #0
 801090e:	d005      	beq.n	801091c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010914:	f043 0202 	orr.w	r2, r3, #2
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	f003 0302 	and.w	r3, r3, #2
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00a      	beq.n	801093c <HAL_UART_IRQHandler+0xd0>
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	f003 0301 	and.w	r3, r3, #1
 801092c:	2b00      	cmp	r3, #0
 801092e:	d005      	beq.n	801093c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010934:	f043 0204 	orr.w	r2, r3, #4
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	f003 0308 	and.w	r3, r3, #8
 8010942:	2b00      	cmp	r3, #0
 8010944:	d00f      	beq.n	8010966 <HAL_UART_IRQHandler+0xfa>
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	f003 0320 	and.w	r3, r3, #32
 801094c:	2b00      	cmp	r3, #0
 801094e:	d104      	bne.n	801095a <HAL_UART_IRQHandler+0xee>
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	f003 0301 	and.w	r3, r3, #1
 8010956:	2b00      	cmp	r3, #0
 8010958:	d005      	beq.n	8010966 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801095e:	f043 0208 	orr.w	r2, r3, #8
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801096a:	2b00      	cmp	r3, #0
 801096c:	d078      	beq.n	8010a60 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	f003 0320 	and.w	r3, r3, #32
 8010974:	2b00      	cmp	r3, #0
 8010976:	d007      	beq.n	8010988 <HAL_UART_IRQHandler+0x11c>
 8010978:	69bb      	ldr	r3, [r7, #24]
 801097a:	f003 0320 	and.w	r3, r3, #32
 801097e:	2b00      	cmp	r3, #0
 8010980:	d002      	beq.n	8010988 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 fa07 	bl	8010d96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	695b      	ldr	r3, [r3, #20]
 801098e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010992:	2b00      	cmp	r3, #0
 8010994:	bf14      	ite	ne
 8010996:	2301      	movne	r3, #1
 8010998:	2300      	moveq	r3, #0
 801099a:	b2db      	uxtb	r3, r3
 801099c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109a2:	f003 0308 	and.w	r3, r3, #8
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d102      	bne.n	80109b0 <HAL_UART_IRQHandler+0x144>
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d031      	beq.n	8010a14 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 f958 	bl	8010c66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	695b      	ldr	r3, [r3, #20]
 80109bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d023      	beq.n	8010a0c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	695a      	ldr	r2, [r3, #20]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80109d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d013      	beq.n	8010a04 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109e0:	4a21      	ldr	r2, [pc, #132]	; (8010a68 <HAL_UART_IRQHandler+0x1fc>)
 80109e2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7fb ffad 	bl	800c948 <HAL_DMA_Abort_IT>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d016      	beq.n	8010a22 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80109fe:	4610      	mov	r0, r2
 8010a00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a02:	e00e      	b.n	8010a22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f7fb fb6f 	bl	800c0e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a0a:	e00a      	b.n	8010a22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f7fb fb6b 	bl	800c0e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a12:	e006      	b.n	8010a22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f7fb fb67 	bl	800c0e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010a20:	e01e      	b.n	8010a60 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a22:	bf00      	nop
    return;
 8010a24:	e01c      	b.n	8010a60 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010a26:	69fb      	ldr	r3, [r7, #28]
 8010a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d008      	beq.n	8010a42 <HAL_UART_IRQHandler+0x1d6>
 8010a30:	69bb      	ldr	r3, [r7, #24]
 8010a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d003      	beq.n	8010a42 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 f944 	bl	8010cc8 <UART_Transmit_IT>
    return;
 8010a40:	e00f      	b.n	8010a62 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010a42:	69fb      	ldr	r3, [r7, #28]
 8010a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d00a      	beq.n	8010a62 <HAL_UART_IRQHandler+0x1f6>
 8010a4c:	69bb      	ldr	r3, [r7, #24]
 8010a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d005      	beq.n	8010a62 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f000 f985 	bl	8010d66 <UART_EndTransmit_IT>
    return;
 8010a5c:	bf00      	nop
 8010a5e:	e000      	b.n	8010a62 <HAL_UART_IRQHandler+0x1f6>
    return;
 8010a60:	bf00      	nop
  }
}
 8010a62:	3720      	adds	r7, #32
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	08010ca1 	.word	0x08010ca1

08010a6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	b083      	sub	sp, #12
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010a74:	bf00      	nop
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bc80      	pop	{r7}
 8010a7c:	4770      	bx	lr

08010a7e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010a7e:	b480      	push	{r7}
 8010a80:	b083      	sub	sp, #12
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010a86:	bf00      	nop
 8010a88:	370c      	adds	r7, #12
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bc80      	pop	{r7}
 8010a8e:	4770      	bx	lr

08010a90 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b084      	sub	sp, #16
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a9c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f003 0320 	and.w	r3, r3, #32
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d11e      	bne.n	8010aea <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	68da      	ldr	r2, [r3, #12]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010ac0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	695a      	ldr	r2, [r3, #20]
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f022 0201 	bic.w	r2, r2, #1
 8010ad0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	695a      	ldr	r2, [r3, #20]
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ae0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2220      	movs	r2, #32
 8010ae6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010aea:	68f8      	ldr	r0, [r7, #12]
 8010aec:	f7fb fb28 	bl	800c140 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010af0:	bf00      	nop
 8010af2:	3710      	adds	r7, #16
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b084      	sub	sp, #16
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b04:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	f7ff ffb9 	bl	8010a7e <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b0c:	bf00      	nop
 8010b0e:	3710      	adds	r7, #16
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b084      	sub	sp, #16
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b24:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	695b      	ldr	r3, [r3, #20]
 8010b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	bf14      	ite	ne
 8010b34:	2301      	movne	r3, #1
 8010b36:	2300      	moveq	r3, #0
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	2b21      	cmp	r3, #33	; 0x21
 8010b46:	d108      	bne.n	8010b5a <UART_DMAError+0x46>
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d005      	beq.n	8010b5a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	2200      	movs	r2, #0
 8010b52:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010b54:	68b8      	ldr	r0, [r7, #8]
 8010b56:	f000 f871 	bl	8010c3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	695b      	ldr	r3, [r3, #20]
 8010b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	bf14      	ite	ne
 8010b68:	2301      	movne	r3, #1
 8010b6a:	2300      	moveq	r3, #0
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	2b22      	cmp	r3, #34	; 0x22
 8010b7a:	d108      	bne.n	8010b8e <UART_DMAError+0x7a>
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d005      	beq.n	8010b8e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	2200      	movs	r2, #0
 8010b86:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010b88:	68b8      	ldr	r0, [r7, #8]
 8010b8a:	f000 f86c 	bl	8010c66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b92:	f043 0210 	orr.w	r2, r3, #16
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b9a:	68b8      	ldr	r0, [r7, #8]
 8010b9c:	f7fb faa4 	bl	800c0e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ba0:	bf00      	nop
 8010ba2:	3710      	adds	r7, #16
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	603b      	str	r3, [r7, #0]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010bb8:	e02c      	b.n	8010c14 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010bba:	69bb      	ldr	r3, [r7, #24]
 8010bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc0:	d028      	beq.n	8010c14 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d007      	beq.n	8010bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8010bc8:	f7fb fcc4 	bl	800c554 <HAL_GetTick>
 8010bcc:	4602      	mov	r2, r0
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	1ad3      	subs	r3, r2, r3
 8010bd2:	69ba      	ldr	r2, [r7, #24]
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d21d      	bcs.n	8010c14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	68da      	ldr	r2, [r3, #12]
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010be6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	695a      	ldr	r2, [r3, #20]
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f022 0201 	bic.w	r2, r2, #1
 8010bf6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2220      	movs	r2, #32
 8010bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2220      	movs	r2, #32
 8010c04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010c10:	2303      	movs	r3, #3
 8010c12:	e00f      	b.n	8010c34 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	4013      	ands	r3, r2
 8010c1e:	68ba      	ldr	r2, [r7, #8]
 8010c20:	429a      	cmp	r2, r3
 8010c22:	bf0c      	ite	eq
 8010c24:	2301      	moveq	r3, #1
 8010c26:	2300      	movne	r3, #0
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	79fb      	ldrb	r3, [r7, #7]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d0c3      	beq.n	8010bba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010c32:	2300      	movs	r3, #0
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b083      	sub	sp, #12
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	68da      	ldr	r2, [r3, #12]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010c52:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2220      	movs	r2, #32
 8010c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8010c5c:	bf00      	nop
 8010c5e:	370c      	adds	r7, #12
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bc80      	pop	{r7}
 8010c64:	4770      	bx	lr

08010c66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c66:	b480      	push	{r7}
 8010c68:	b083      	sub	sp, #12
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	68da      	ldr	r2, [r3, #12]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010c7c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	695a      	ldr	r2, [r3, #20]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	f022 0201 	bic.w	r2, r2, #1
 8010c8c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2220      	movs	r2, #32
 8010c92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010c96:	bf00      	nop
 8010c98:	370c      	adds	r7, #12
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bc80      	pop	{r7}
 8010c9e:	4770      	bx	lr

08010ca0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010cba:	68f8      	ldr	r0, [r7, #12]
 8010cbc:	f7fb fa14 	bl	800c0e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cc0:	bf00      	nop
 8010cc2:	3710      	adds	r7, #16
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010cd6:	b2db      	uxtb	r3, r3
 8010cd8:	2b21      	cmp	r3, #33	; 0x21
 8010cda:	d13e      	bne.n	8010d5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	689b      	ldr	r3, [r3, #8]
 8010ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ce4:	d114      	bne.n	8010d10 <UART_Transmit_IT+0x48>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	691b      	ldr	r3, [r3, #16]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d110      	bne.n	8010d10 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6a1b      	ldr	r3, [r3, #32]
 8010cf2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	881b      	ldrh	r3, [r3, #0]
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010d02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6a1b      	ldr	r3, [r3, #32]
 8010d08:	1c9a      	adds	r2, r3, #2
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	621a      	str	r2, [r3, #32]
 8010d0e:	e008      	b.n	8010d22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6a1b      	ldr	r3, [r3, #32]
 8010d14:	1c59      	adds	r1, r3, #1
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	6211      	str	r1, [r2, #32]
 8010d1a:	781a      	ldrb	r2, [r3, #0]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	3b01      	subs	r3, #1
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d10f      	bne.n	8010d56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	68da      	ldr	r2, [r3, #12]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010d44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	68da      	ldr	r2, [r3, #12]
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010d56:	2300      	movs	r3, #0
 8010d58:	e000      	b.n	8010d5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010d5a:	2302      	movs	r3, #2
  }
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3714      	adds	r7, #20
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bc80      	pop	{r7}
 8010d64:	4770      	bx	lr

08010d66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010d66:	b580      	push	{r7, lr}
 8010d68:	b082      	sub	sp, #8
 8010d6a:	af00      	add	r7, sp, #0
 8010d6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	68da      	ldr	r2, [r3, #12]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2220      	movs	r2, #32
 8010d82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7ff fe70 	bl	8010a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010d8c:	2300      	movs	r3, #0
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3708      	adds	r7, #8
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010d96:	b580      	push	{r7, lr}
 8010d98:	b084      	sub	sp, #16
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	2b22      	cmp	r3, #34	; 0x22
 8010da8:	d170      	bne.n	8010e8c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	689b      	ldr	r3, [r3, #8]
 8010dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010db2:	d117      	bne.n	8010de4 <UART_Receive_IT+0x4e>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	691b      	ldr	r3, [r3, #16]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d113      	bne.n	8010de4 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dc4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	685b      	ldr	r3, [r3, #4]
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dd2:	b29a      	uxth	r2, r3
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ddc:	1c9a      	adds	r2, r3, #2
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	629a      	str	r2, [r3, #40]	; 0x28
 8010de2:	e026      	b.n	8010e32 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010de8:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8010dea:	2300      	movs	r3, #0
 8010dec:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	689b      	ldr	r3, [r3, #8]
 8010df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010df6:	d007      	beq.n	8010e08 <UART_Receive_IT+0x72>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	689b      	ldr	r3, [r3, #8]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d10a      	bne.n	8010e16 <UART_Receive_IT+0x80>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	691b      	ldr	r3, [r3, #16]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d106      	bne.n	8010e16 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	b2da      	uxtb	r2, r3
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	701a      	strb	r2, [r3, #0]
 8010e14:	e008      	b.n	8010e28 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	b2db      	uxtb	r3, r3
 8010e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e22:	b2da      	uxtb	r2, r3
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e2c:	1c5a      	adds	r2, r3, #1
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	3b01      	subs	r3, #1
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	4619      	mov	r1, r3
 8010e40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d120      	bne.n	8010e88 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	68da      	ldr	r2, [r3, #12]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	f022 0220 	bic.w	r2, r2, #32
 8010e54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	68da      	ldr	r2, [r3, #12]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010e64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	695a      	ldr	r2, [r3, #20]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	f022 0201 	bic.w	r2, r2, #1
 8010e74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2220      	movs	r2, #32
 8010e7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f7fb f95e 	bl	800c140 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8010e84:	2300      	movs	r3, #0
 8010e86:	e002      	b.n	8010e8e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	e000      	b.n	8010e8e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8010e8c:	2302      	movs	r3, #2
  }
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3710      	adds	r7, #16
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
	...

08010e98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b084      	sub	sp, #16
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	691b      	ldr	r3, [r3, #16]
 8010ea6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	68da      	ldr	r2, [r3, #12]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	430a      	orrs	r2, r1
 8010eb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	689a      	ldr	r2, [r3, #8]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	691b      	ldr	r3, [r3, #16]
 8010ebe:	431a      	orrs	r2, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	695b      	ldr	r3, [r3, #20]
 8010ec4:	4313      	orrs	r3, r2
 8010ec6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010ed2:	f023 030c 	bic.w	r3, r3, #12
 8010ed6:	687a      	ldr	r2, [r7, #4]
 8010ed8:	6812      	ldr	r2, [r2, #0]
 8010eda:	68b9      	ldr	r1, [r7, #8]
 8010edc:	430b      	orrs	r3, r1
 8010ede:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	695b      	ldr	r3, [r3, #20]
 8010ee6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	699a      	ldr	r2, [r3, #24]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	430a      	orrs	r2, r1
 8010ef4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	4a2c      	ldr	r2, [pc, #176]	; (8010fac <UART_SetConfig+0x114>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d103      	bne.n	8010f08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8010f00:	f7fe f8e6 	bl	800f0d0 <HAL_RCC_GetPCLK2Freq>
 8010f04:	60f8      	str	r0, [r7, #12]
 8010f06:	e002      	b.n	8010f0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8010f08:	f7fe f8ce 	bl	800f0a8 <HAL_RCC_GetPCLK1Freq>
 8010f0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010f0e:	68fa      	ldr	r2, [r7, #12]
 8010f10:	4613      	mov	r3, r2
 8010f12:	009b      	lsls	r3, r3, #2
 8010f14:	4413      	add	r3, r2
 8010f16:	009a      	lsls	r2, r3, #2
 8010f18:	441a      	add	r2, r3
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	009b      	lsls	r3, r3, #2
 8010f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f24:	4a22      	ldr	r2, [pc, #136]	; (8010fb0 <UART_SetConfig+0x118>)
 8010f26:	fba2 2303 	umull	r2, r3, r2, r3
 8010f2a:	095b      	lsrs	r3, r3, #5
 8010f2c:	0119      	lsls	r1, r3, #4
 8010f2e:	68fa      	ldr	r2, [r7, #12]
 8010f30:	4613      	mov	r3, r2
 8010f32:	009b      	lsls	r3, r3, #2
 8010f34:	4413      	add	r3, r2
 8010f36:	009a      	lsls	r2, r3, #2
 8010f38:	441a      	add	r2, r3
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8010f44:	4b1a      	ldr	r3, [pc, #104]	; (8010fb0 <UART_SetConfig+0x118>)
 8010f46:	fba3 0302 	umull	r0, r3, r3, r2
 8010f4a:	095b      	lsrs	r3, r3, #5
 8010f4c:	2064      	movs	r0, #100	; 0x64
 8010f4e:	fb00 f303 	mul.w	r3, r0, r3
 8010f52:	1ad3      	subs	r3, r2, r3
 8010f54:	011b      	lsls	r3, r3, #4
 8010f56:	3332      	adds	r3, #50	; 0x32
 8010f58:	4a15      	ldr	r2, [pc, #84]	; (8010fb0 <UART_SetConfig+0x118>)
 8010f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8010f5e:	095b      	lsrs	r3, r3, #5
 8010f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f64:	4419      	add	r1, r3
 8010f66:	68fa      	ldr	r2, [r7, #12]
 8010f68:	4613      	mov	r3, r2
 8010f6a:	009b      	lsls	r3, r3, #2
 8010f6c:	4413      	add	r3, r2
 8010f6e:	009a      	lsls	r2, r3, #2
 8010f70:	441a      	add	r2, r3
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8010f7c:	4b0c      	ldr	r3, [pc, #48]	; (8010fb0 <UART_SetConfig+0x118>)
 8010f7e:	fba3 0302 	umull	r0, r3, r3, r2
 8010f82:	095b      	lsrs	r3, r3, #5
 8010f84:	2064      	movs	r0, #100	; 0x64
 8010f86:	fb00 f303 	mul.w	r3, r0, r3
 8010f8a:	1ad3      	subs	r3, r2, r3
 8010f8c:	011b      	lsls	r3, r3, #4
 8010f8e:	3332      	adds	r3, #50	; 0x32
 8010f90:	4a07      	ldr	r2, [pc, #28]	; (8010fb0 <UART_SetConfig+0x118>)
 8010f92:	fba2 2303 	umull	r2, r3, r2, r3
 8010f96:	095b      	lsrs	r3, r3, #5
 8010f98:	f003 020f 	and.w	r2, r3, #15
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	440a      	add	r2, r1
 8010fa2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8010fa4:	bf00      	nop
 8010fa6:	3710      	adds	r7, #16
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	40013800 	.word	0x40013800
 8010fb0:	51eb851f 	.word	0x51eb851f

08010fb4 <main>:




int main(void)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	af00      	add	r7, sp, #0
  hwInit();
 8010fb8:	f7fb fa40 	bl	800c43c <hwInit>
  apInit();
 8010fbc:	f7f0 f91e 	bl	80011fc <apInit>

  apMain();
 8010fc0:	f7f0 f948 	bl	8001254 <apMain>

  return 0;
 8010fc4:	2300      	movs	r3, #0
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <atof>:
 8010fca:	2100      	movs	r1, #0
 8010fcc:	f001 baf4 	b.w	80125b8 <strtod>

08010fd0 <__errno>:
 8010fd0:	4b01      	ldr	r3, [pc, #4]	; (8010fd8 <__errno+0x8>)
 8010fd2:	6818      	ldr	r0, [r3, #0]
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	20000060 	.word	0x20000060

08010fdc <__libc_init_array>:
 8010fdc:	b570      	push	{r4, r5, r6, lr}
 8010fde:	2500      	movs	r5, #0
 8010fe0:	4e0c      	ldr	r6, [pc, #48]	; (8011014 <__libc_init_array+0x38>)
 8010fe2:	4c0d      	ldr	r4, [pc, #52]	; (8011018 <__libc_init_array+0x3c>)
 8010fe4:	1ba4      	subs	r4, r4, r6
 8010fe6:	10a4      	asrs	r4, r4, #2
 8010fe8:	42a5      	cmp	r5, r4
 8010fea:	d109      	bne.n	8011000 <__libc_init_array+0x24>
 8010fec:	f008 fb72 	bl	80196d4 <_init>
 8010ff0:	2500      	movs	r5, #0
 8010ff2:	4e0a      	ldr	r6, [pc, #40]	; (801101c <__libc_init_array+0x40>)
 8010ff4:	4c0a      	ldr	r4, [pc, #40]	; (8011020 <__libc_init_array+0x44>)
 8010ff6:	1ba4      	subs	r4, r4, r6
 8010ff8:	10a4      	asrs	r4, r4, #2
 8010ffa:	42a5      	cmp	r5, r4
 8010ffc:	d105      	bne.n	801100a <__libc_init_array+0x2e>
 8010ffe:	bd70      	pop	{r4, r5, r6, pc}
 8011000:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011004:	4798      	blx	r3
 8011006:	3501      	adds	r5, #1
 8011008:	e7ee      	b.n	8010fe8 <__libc_init_array+0xc>
 801100a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801100e:	4798      	blx	r3
 8011010:	3501      	adds	r5, #1
 8011012:	e7f2      	b.n	8010ffa <__libc_init_array+0x1e>
 8011014:	0801a470 	.word	0x0801a470
 8011018:	0801a470 	.word	0x0801a470
 801101c:	0801a470 	.word	0x0801a470
 8011020:	0801a474 	.word	0x0801a474

08011024 <__locale_ctype_ptr_l>:
 8011024:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011028:	4770      	bx	lr
	...

0801102c <__locale_ctype_ptr>:
 801102c:	4b04      	ldr	r3, [pc, #16]	; (8011040 <__locale_ctype_ptr+0x14>)
 801102e:	4a05      	ldr	r2, [pc, #20]	; (8011044 <__locale_ctype_ptr+0x18>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	6a1b      	ldr	r3, [r3, #32]
 8011034:	2b00      	cmp	r3, #0
 8011036:	bf08      	it	eq
 8011038:	4613      	moveq	r3, r2
 801103a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801103e:	4770      	bx	lr
 8011040:	20000060 	.word	0x20000060
 8011044:	200000c4 	.word	0x200000c4

08011048 <__ascii_mbtowc>:
 8011048:	b082      	sub	sp, #8
 801104a:	b901      	cbnz	r1, 801104e <__ascii_mbtowc+0x6>
 801104c:	a901      	add	r1, sp, #4
 801104e:	b142      	cbz	r2, 8011062 <__ascii_mbtowc+0x1a>
 8011050:	b14b      	cbz	r3, 8011066 <__ascii_mbtowc+0x1e>
 8011052:	7813      	ldrb	r3, [r2, #0]
 8011054:	600b      	str	r3, [r1, #0]
 8011056:	7812      	ldrb	r2, [r2, #0]
 8011058:	1c10      	adds	r0, r2, #0
 801105a:	bf18      	it	ne
 801105c:	2001      	movne	r0, #1
 801105e:	b002      	add	sp, #8
 8011060:	4770      	bx	lr
 8011062:	4610      	mov	r0, r2
 8011064:	e7fb      	b.n	801105e <__ascii_mbtowc+0x16>
 8011066:	f06f 0001 	mvn.w	r0, #1
 801106a:	e7f8      	b.n	801105e <__ascii_mbtowc+0x16>

0801106c <memcpy>:
 801106c:	b510      	push	{r4, lr}
 801106e:	1e43      	subs	r3, r0, #1
 8011070:	440a      	add	r2, r1
 8011072:	4291      	cmp	r1, r2
 8011074:	d100      	bne.n	8011078 <memcpy+0xc>
 8011076:	bd10      	pop	{r4, pc}
 8011078:	f811 4b01 	ldrb.w	r4, [r1], #1
 801107c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011080:	e7f7      	b.n	8011072 <memcpy+0x6>

08011082 <memset>:
 8011082:	4603      	mov	r3, r0
 8011084:	4402      	add	r2, r0
 8011086:	4293      	cmp	r3, r2
 8011088:	d100      	bne.n	801108c <memset+0xa>
 801108a:	4770      	bx	lr
 801108c:	f803 1b01 	strb.w	r1, [r3], #1
 8011090:	e7f9      	b.n	8011086 <memset+0x4>

08011092 <__cvt>:
 8011092:	2b00      	cmp	r3, #0
 8011094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011098:	461e      	mov	r6, r3
 801109a:	bfbb      	ittet	lt
 801109c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80110a0:	461e      	movlt	r6, r3
 80110a2:	2300      	movge	r3, #0
 80110a4:	232d      	movlt	r3, #45	; 0x2d
 80110a6:	b088      	sub	sp, #32
 80110a8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80110aa:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80110ae:	f027 0720 	bic.w	r7, r7, #32
 80110b2:	2f46      	cmp	r7, #70	; 0x46
 80110b4:	4614      	mov	r4, r2
 80110b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80110b8:	700b      	strb	r3, [r1, #0]
 80110ba:	d004      	beq.n	80110c6 <__cvt+0x34>
 80110bc:	2f45      	cmp	r7, #69	; 0x45
 80110be:	d100      	bne.n	80110c2 <__cvt+0x30>
 80110c0:	3501      	adds	r5, #1
 80110c2:	2302      	movs	r3, #2
 80110c4:	e000      	b.n	80110c8 <__cvt+0x36>
 80110c6:	2303      	movs	r3, #3
 80110c8:	aa07      	add	r2, sp, #28
 80110ca:	9204      	str	r2, [sp, #16]
 80110cc:	aa06      	add	r2, sp, #24
 80110ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80110d2:	e9cd 3500 	strd	r3, r5, [sp]
 80110d6:	4622      	mov	r2, r4
 80110d8:	4633      	mov	r3, r6
 80110da:	f001 fc61 	bl	80129a0 <_dtoa_r>
 80110de:	2f47      	cmp	r7, #71	; 0x47
 80110e0:	4680      	mov	r8, r0
 80110e2:	d102      	bne.n	80110ea <__cvt+0x58>
 80110e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110e6:	07db      	lsls	r3, r3, #31
 80110e8:	d526      	bpl.n	8011138 <__cvt+0xa6>
 80110ea:	2f46      	cmp	r7, #70	; 0x46
 80110ec:	eb08 0905 	add.w	r9, r8, r5
 80110f0:	d111      	bne.n	8011116 <__cvt+0x84>
 80110f2:	f898 3000 	ldrb.w	r3, [r8]
 80110f6:	2b30      	cmp	r3, #48	; 0x30
 80110f8:	d10a      	bne.n	8011110 <__cvt+0x7e>
 80110fa:	2200      	movs	r2, #0
 80110fc:	2300      	movs	r3, #0
 80110fe:	4620      	mov	r0, r4
 8011100:	4631      	mov	r1, r6
 8011102:	f7ef fc6b 	bl	80009dc <__aeabi_dcmpeq>
 8011106:	b918      	cbnz	r0, 8011110 <__cvt+0x7e>
 8011108:	f1c5 0501 	rsb	r5, r5, #1
 801110c:	f8ca 5000 	str.w	r5, [sl]
 8011110:	f8da 3000 	ldr.w	r3, [sl]
 8011114:	4499      	add	r9, r3
 8011116:	2200      	movs	r2, #0
 8011118:	2300      	movs	r3, #0
 801111a:	4620      	mov	r0, r4
 801111c:	4631      	mov	r1, r6
 801111e:	f7ef fc5d 	bl	80009dc <__aeabi_dcmpeq>
 8011122:	b938      	cbnz	r0, 8011134 <__cvt+0xa2>
 8011124:	2230      	movs	r2, #48	; 0x30
 8011126:	9b07      	ldr	r3, [sp, #28]
 8011128:	454b      	cmp	r3, r9
 801112a:	d205      	bcs.n	8011138 <__cvt+0xa6>
 801112c:	1c59      	adds	r1, r3, #1
 801112e:	9107      	str	r1, [sp, #28]
 8011130:	701a      	strb	r2, [r3, #0]
 8011132:	e7f8      	b.n	8011126 <__cvt+0x94>
 8011134:	f8cd 901c 	str.w	r9, [sp, #28]
 8011138:	4640      	mov	r0, r8
 801113a:	9b07      	ldr	r3, [sp, #28]
 801113c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801113e:	eba3 0308 	sub.w	r3, r3, r8
 8011142:	6013      	str	r3, [r2, #0]
 8011144:	b008      	add	sp, #32
 8011146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801114a <__exponent>:
 801114a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801114c:	2900      	cmp	r1, #0
 801114e:	bfb4      	ite	lt
 8011150:	232d      	movlt	r3, #45	; 0x2d
 8011152:	232b      	movge	r3, #43	; 0x2b
 8011154:	4604      	mov	r4, r0
 8011156:	bfb8      	it	lt
 8011158:	4249      	neglt	r1, r1
 801115a:	2909      	cmp	r1, #9
 801115c:	f804 2b02 	strb.w	r2, [r4], #2
 8011160:	7043      	strb	r3, [r0, #1]
 8011162:	dd21      	ble.n	80111a8 <__exponent+0x5e>
 8011164:	f10d 0307 	add.w	r3, sp, #7
 8011168:	461f      	mov	r7, r3
 801116a:	260a      	movs	r6, #10
 801116c:	fb91 f5f6 	sdiv	r5, r1, r6
 8011170:	fb06 1115 	mls	r1, r6, r5, r1
 8011174:	2d09      	cmp	r5, #9
 8011176:	f101 0130 	add.w	r1, r1, #48	; 0x30
 801117a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801117e:	f103 32ff 	add.w	r2, r3, #4294967295
 8011182:	4629      	mov	r1, r5
 8011184:	dc09      	bgt.n	801119a <__exponent+0x50>
 8011186:	3130      	adds	r1, #48	; 0x30
 8011188:	3b02      	subs	r3, #2
 801118a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801118e:	42bb      	cmp	r3, r7
 8011190:	4622      	mov	r2, r4
 8011192:	d304      	bcc.n	801119e <__exponent+0x54>
 8011194:	1a10      	subs	r0, r2, r0
 8011196:	b003      	add	sp, #12
 8011198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801119a:	4613      	mov	r3, r2
 801119c:	e7e6      	b.n	801116c <__exponent+0x22>
 801119e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111a2:	f804 2b01 	strb.w	r2, [r4], #1
 80111a6:	e7f2      	b.n	801118e <__exponent+0x44>
 80111a8:	2330      	movs	r3, #48	; 0x30
 80111aa:	4419      	add	r1, r3
 80111ac:	7083      	strb	r3, [r0, #2]
 80111ae:	1d02      	adds	r2, r0, #4
 80111b0:	70c1      	strb	r1, [r0, #3]
 80111b2:	e7ef      	b.n	8011194 <__exponent+0x4a>

080111b4 <_printf_float>:
 80111b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b8:	b091      	sub	sp, #68	; 0x44
 80111ba:	460c      	mov	r4, r1
 80111bc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80111be:	4693      	mov	fp, r2
 80111c0:	461e      	mov	r6, r3
 80111c2:	4605      	mov	r5, r0
 80111c4:	f002 fd94 	bl	8013cf0 <_localeconv_r>
 80111c8:	6803      	ldr	r3, [r0, #0]
 80111ca:	4618      	mov	r0, r3
 80111cc:	9309      	str	r3, [sp, #36]	; 0x24
 80111ce:	f7ee ffd9 	bl	8000184 <strlen>
 80111d2:	2300      	movs	r3, #0
 80111d4:	930e      	str	r3, [sp, #56]	; 0x38
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	900a      	str	r0, [sp, #40]	; 0x28
 80111da:	3307      	adds	r3, #7
 80111dc:	f023 0307 	bic.w	r3, r3, #7
 80111e0:	f103 0208 	add.w	r2, r3, #8
 80111e4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80111e8:	f8d4 a000 	ldr.w	sl, [r4]
 80111ec:	603a      	str	r2, [r7, #0]
 80111ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80111f6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80111fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80111fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8011200:	f04f 32ff 	mov.w	r2, #4294967295
 8011204:	4ba6      	ldr	r3, [pc, #664]	; (80114a0 <_printf_float+0x2ec>)
 8011206:	4638      	mov	r0, r7
 8011208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801120a:	f7ef fc19 	bl	8000a40 <__aeabi_dcmpun>
 801120e:	bb68      	cbnz	r0, 801126c <_printf_float+0xb8>
 8011210:	f04f 32ff 	mov.w	r2, #4294967295
 8011214:	4ba2      	ldr	r3, [pc, #648]	; (80114a0 <_printf_float+0x2ec>)
 8011216:	4638      	mov	r0, r7
 8011218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801121a:	f7ef fbf3 	bl	8000a04 <__aeabi_dcmple>
 801121e:	bb28      	cbnz	r0, 801126c <_printf_float+0xb8>
 8011220:	2200      	movs	r2, #0
 8011222:	2300      	movs	r3, #0
 8011224:	4638      	mov	r0, r7
 8011226:	4649      	mov	r1, r9
 8011228:	f7ef fbe2 	bl	80009f0 <__aeabi_dcmplt>
 801122c:	b110      	cbz	r0, 8011234 <_printf_float+0x80>
 801122e:	232d      	movs	r3, #45	; 0x2d
 8011230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011234:	4f9b      	ldr	r7, [pc, #620]	; (80114a4 <_printf_float+0x2f0>)
 8011236:	4b9c      	ldr	r3, [pc, #624]	; (80114a8 <_printf_float+0x2f4>)
 8011238:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801123c:	bf98      	it	ls
 801123e:	461f      	movls	r7, r3
 8011240:	2303      	movs	r3, #3
 8011242:	f04f 0900 	mov.w	r9, #0
 8011246:	6123      	str	r3, [r4, #16]
 8011248:	f02a 0304 	bic.w	r3, sl, #4
 801124c:	6023      	str	r3, [r4, #0]
 801124e:	9600      	str	r6, [sp, #0]
 8011250:	465b      	mov	r3, fp
 8011252:	aa0f      	add	r2, sp, #60	; 0x3c
 8011254:	4621      	mov	r1, r4
 8011256:	4628      	mov	r0, r5
 8011258:	f000 f9e2 	bl	8011620 <_printf_common>
 801125c:	3001      	adds	r0, #1
 801125e:	f040 8090 	bne.w	8011382 <_printf_float+0x1ce>
 8011262:	f04f 30ff 	mov.w	r0, #4294967295
 8011266:	b011      	add	sp, #68	; 0x44
 8011268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801126c:	463a      	mov	r2, r7
 801126e:	464b      	mov	r3, r9
 8011270:	4638      	mov	r0, r7
 8011272:	4649      	mov	r1, r9
 8011274:	f7ef fbe4 	bl	8000a40 <__aeabi_dcmpun>
 8011278:	b110      	cbz	r0, 8011280 <_printf_float+0xcc>
 801127a:	4f8c      	ldr	r7, [pc, #560]	; (80114ac <_printf_float+0x2f8>)
 801127c:	4b8c      	ldr	r3, [pc, #560]	; (80114b0 <_printf_float+0x2fc>)
 801127e:	e7db      	b.n	8011238 <_printf_float+0x84>
 8011280:	6863      	ldr	r3, [r4, #4]
 8011282:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8011286:	1c59      	adds	r1, r3, #1
 8011288:	a80d      	add	r0, sp, #52	; 0x34
 801128a:	a90e      	add	r1, sp, #56	; 0x38
 801128c:	d140      	bne.n	8011310 <_printf_float+0x15c>
 801128e:	2306      	movs	r3, #6
 8011290:	6063      	str	r3, [r4, #4]
 8011292:	f04f 0c00 	mov.w	ip, #0
 8011296:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 801129a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801129e:	6863      	ldr	r3, [r4, #4]
 80112a0:	6022      	str	r2, [r4, #0]
 80112a2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80112a6:	9300      	str	r3, [sp, #0]
 80112a8:	463a      	mov	r2, r7
 80112aa:	464b      	mov	r3, r9
 80112ac:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80112b0:	4628      	mov	r0, r5
 80112b2:	f7ff feee 	bl	8011092 <__cvt>
 80112b6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80112ba:	2b47      	cmp	r3, #71	; 0x47
 80112bc:	4607      	mov	r7, r0
 80112be:	d109      	bne.n	80112d4 <_printf_float+0x120>
 80112c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112c2:	1cd8      	adds	r0, r3, #3
 80112c4:	db02      	blt.n	80112cc <_printf_float+0x118>
 80112c6:	6862      	ldr	r2, [r4, #4]
 80112c8:	4293      	cmp	r3, r2
 80112ca:	dd47      	ble.n	801135c <_printf_float+0x1a8>
 80112cc:	f1a8 0802 	sub.w	r8, r8, #2
 80112d0:	fa5f f888 	uxtb.w	r8, r8
 80112d4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80112d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80112da:	d824      	bhi.n	8011326 <_printf_float+0x172>
 80112dc:	3901      	subs	r1, #1
 80112de:	4642      	mov	r2, r8
 80112e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80112e4:	910d      	str	r1, [sp, #52]	; 0x34
 80112e6:	f7ff ff30 	bl	801114a <__exponent>
 80112ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112ec:	4681      	mov	r9, r0
 80112ee:	1813      	adds	r3, r2, r0
 80112f0:	2a01      	cmp	r2, #1
 80112f2:	6123      	str	r3, [r4, #16]
 80112f4:	dc02      	bgt.n	80112fc <_printf_float+0x148>
 80112f6:	6822      	ldr	r2, [r4, #0]
 80112f8:	07d1      	lsls	r1, r2, #31
 80112fa:	d501      	bpl.n	8011300 <_printf_float+0x14c>
 80112fc:	3301      	adds	r3, #1
 80112fe:	6123      	str	r3, [r4, #16]
 8011300:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011304:	2b00      	cmp	r3, #0
 8011306:	d0a2      	beq.n	801124e <_printf_float+0x9a>
 8011308:	232d      	movs	r3, #45	; 0x2d
 801130a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801130e:	e79e      	b.n	801124e <_printf_float+0x9a>
 8011310:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8011314:	f000 816e 	beq.w	80115f4 <_printf_float+0x440>
 8011318:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801131c:	d1b9      	bne.n	8011292 <_printf_float+0xde>
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1b7      	bne.n	8011292 <_printf_float+0xde>
 8011322:	2301      	movs	r3, #1
 8011324:	e7b4      	b.n	8011290 <_printf_float+0xdc>
 8011326:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 801132a:	d119      	bne.n	8011360 <_printf_float+0x1ac>
 801132c:	2900      	cmp	r1, #0
 801132e:	6863      	ldr	r3, [r4, #4]
 8011330:	dd0c      	ble.n	801134c <_printf_float+0x198>
 8011332:	6121      	str	r1, [r4, #16]
 8011334:	b913      	cbnz	r3, 801133c <_printf_float+0x188>
 8011336:	6822      	ldr	r2, [r4, #0]
 8011338:	07d2      	lsls	r2, r2, #31
 801133a:	d502      	bpl.n	8011342 <_printf_float+0x18e>
 801133c:	3301      	adds	r3, #1
 801133e:	440b      	add	r3, r1
 8011340:	6123      	str	r3, [r4, #16]
 8011342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011344:	f04f 0900 	mov.w	r9, #0
 8011348:	65a3      	str	r3, [r4, #88]	; 0x58
 801134a:	e7d9      	b.n	8011300 <_printf_float+0x14c>
 801134c:	b913      	cbnz	r3, 8011354 <_printf_float+0x1a0>
 801134e:	6822      	ldr	r2, [r4, #0]
 8011350:	07d0      	lsls	r0, r2, #31
 8011352:	d501      	bpl.n	8011358 <_printf_float+0x1a4>
 8011354:	3302      	adds	r3, #2
 8011356:	e7f3      	b.n	8011340 <_printf_float+0x18c>
 8011358:	2301      	movs	r3, #1
 801135a:	e7f1      	b.n	8011340 <_printf_float+0x18c>
 801135c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8011360:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8011364:	4293      	cmp	r3, r2
 8011366:	db05      	blt.n	8011374 <_printf_float+0x1c0>
 8011368:	6822      	ldr	r2, [r4, #0]
 801136a:	6123      	str	r3, [r4, #16]
 801136c:	07d1      	lsls	r1, r2, #31
 801136e:	d5e8      	bpl.n	8011342 <_printf_float+0x18e>
 8011370:	3301      	adds	r3, #1
 8011372:	e7e5      	b.n	8011340 <_printf_float+0x18c>
 8011374:	2b00      	cmp	r3, #0
 8011376:	bfcc      	ite	gt
 8011378:	2301      	movgt	r3, #1
 801137a:	f1c3 0302 	rsble	r3, r3, #2
 801137e:	4413      	add	r3, r2
 8011380:	e7de      	b.n	8011340 <_printf_float+0x18c>
 8011382:	6823      	ldr	r3, [r4, #0]
 8011384:	055a      	lsls	r2, r3, #21
 8011386:	d407      	bmi.n	8011398 <_printf_float+0x1e4>
 8011388:	6923      	ldr	r3, [r4, #16]
 801138a:	463a      	mov	r2, r7
 801138c:	4659      	mov	r1, fp
 801138e:	4628      	mov	r0, r5
 8011390:	47b0      	blx	r6
 8011392:	3001      	adds	r0, #1
 8011394:	d129      	bne.n	80113ea <_printf_float+0x236>
 8011396:	e764      	b.n	8011262 <_printf_float+0xae>
 8011398:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 801139c:	f240 80d7 	bls.w	801154e <_printf_float+0x39a>
 80113a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80113a4:	2200      	movs	r2, #0
 80113a6:	2300      	movs	r3, #0
 80113a8:	f7ef fb18 	bl	80009dc <__aeabi_dcmpeq>
 80113ac:	b388      	cbz	r0, 8011412 <_printf_float+0x25e>
 80113ae:	2301      	movs	r3, #1
 80113b0:	4a40      	ldr	r2, [pc, #256]	; (80114b4 <_printf_float+0x300>)
 80113b2:	4659      	mov	r1, fp
 80113b4:	4628      	mov	r0, r5
 80113b6:	47b0      	blx	r6
 80113b8:	3001      	adds	r0, #1
 80113ba:	f43f af52 	beq.w	8011262 <_printf_float+0xae>
 80113be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80113c2:	429a      	cmp	r2, r3
 80113c4:	db02      	blt.n	80113cc <_printf_float+0x218>
 80113c6:	6823      	ldr	r3, [r4, #0]
 80113c8:	07d8      	lsls	r0, r3, #31
 80113ca:	d50e      	bpl.n	80113ea <_printf_float+0x236>
 80113cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80113d0:	4659      	mov	r1, fp
 80113d2:	4628      	mov	r0, r5
 80113d4:	47b0      	blx	r6
 80113d6:	3001      	adds	r0, #1
 80113d8:	f43f af43 	beq.w	8011262 <_printf_float+0xae>
 80113dc:	2700      	movs	r7, #0
 80113de:	f104 081a 	add.w	r8, r4, #26
 80113e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113e4:	3b01      	subs	r3, #1
 80113e6:	42bb      	cmp	r3, r7
 80113e8:	dc09      	bgt.n	80113fe <_printf_float+0x24a>
 80113ea:	6823      	ldr	r3, [r4, #0]
 80113ec:	079f      	lsls	r7, r3, #30
 80113ee:	f100 80fd 	bmi.w	80115ec <_printf_float+0x438>
 80113f2:	68e0      	ldr	r0, [r4, #12]
 80113f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80113f6:	4298      	cmp	r0, r3
 80113f8:	bfb8      	it	lt
 80113fa:	4618      	movlt	r0, r3
 80113fc:	e733      	b.n	8011266 <_printf_float+0xb2>
 80113fe:	2301      	movs	r3, #1
 8011400:	4642      	mov	r2, r8
 8011402:	4659      	mov	r1, fp
 8011404:	4628      	mov	r0, r5
 8011406:	47b0      	blx	r6
 8011408:	3001      	adds	r0, #1
 801140a:	f43f af2a 	beq.w	8011262 <_printf_float+0xae>
 801140e:	3701      	adds	r7, #1
 8011410:	e7e7      	b.n	80113e2 <_printf_float+0x22e>
 8011412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011414:	2b00      	cmp	r3, #0
 8011416:	dc2b      	bgt.n	8011470 <_printf_float+0x2bc>
 8011418:	2301      	movs	r3, #1
 801141a:	4a26      	ldr	r2, [pc, #152]	; (80114b4 <_printf_float+0x300>)
 801141c:	4659      	mov	r1, fp
 801141e:	4628      	mov	r0, r5
 8011420:	47b0      	blx	r6
 8011422:	3001      	adds	r0, #1
 8011424:	f43f af1d 	beq.w	8011262 <_printf_float+0xae>
 8011428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801142a:	b923      	cbnz	r3, 8011436 <_printf_float+0x282>
 801142c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801142e:	b913      	cbnz	r3, 8011436 <_printf_float+0x282>
 8011430:	6823      	ldr	r3, [r4, #0]
 8011432:	07d9      	lsls	r1, r3, #31
 8011434:	d5d9      	bpl.n	80113ea <_printf_float+0x236>
 8011436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801143a:	4659      	mov	r1, fp
 801143c:	4628      	mov	r0, r5
 801143e:	47b0      	blx	r6
 8011440:	3001      	adds	r0, #1
 8011442:	f43f af0e 	beq.w	8011262 <_printf_float+0xae>
 8011446:	f04f 0800 	mov.w	r8, #0
 801144a:	f104 091a 	add.w	r9, r4, #26
 801144e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011450:	425b      	negs	r3, r3
 8011452:	4543      	cmp	r3, r8
 8011454:	dc01      	bgt.n	801145a <_printf_float+0x2a6>
 8011456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011458:	e797      	b.n	801138a <_printf_float+0x1d6>
 801145a:	2301      	movs	r3, #1
 801145c:	464a      	mov	r2, r9
 801145e:	4659      	mov	r1, fp
 8011460:	4628      	mov	r0, r5
 8011462:	47b0      	blx	r6
 8011464:	3001      	adds	r0, #1
 8011466:	f43f aefc 	beq.w	8011262 <_printf_float+0xae>
 801146a:	f108 0801 	add.w	r8, r8, #1
 801146e:	e7ee      	b.n	801144e <_printf_float+0x29a>
 8011470:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011472:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011474:	429a      	cmp	r2, r3
 8011476:	bfa8      	it	ge
 8011478:	461a      	movge	r2, r3
 801147a:	2a00      	cmp	r2, #0
 801147c:	4690      	mov	r8, r2
 801147e:	dd07      	ble.n	8011490 <_printf_float+0x2dc>
 8011480:	4613      	mov	r3, r2
 8011482:	4659      	mov	r1, fp
 8011484:	463a      	mov	r2, r7
 8011486:	4628      	mov	r0, r5
 8011488:	47b0      	blx	r6
 801148a:	3001      	adds	r0, #1
 801148c:	f43f aee9 	beq.w	8011262 <_printf_float+0xae>
 8011490:	f104 031a 	add.w	r3, r4, #26
 8011494:	f04f 0a00 	mov.w	sl, #0
 8011498:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 801149c:	930b      	str	r3, [sp, #44]	; 0x2c
 801149e:	e015      	b.n	80114cc <_printf_float+0x318>
 80114a0:	7fefffff 	.word	0x7fefffff
 80114a4:	08019de8 	.word	0x08019de8
 80114a8:	08019ace 	.word	0x08019ace
 80114ac:	08019ad6 	.word	0x08019ad6
 80114b0:	08019ad2 	.word	0x08019ad2
 80114b4:	08019ada 	.word	0x08019ada
 80114b8:	2301      	movs	r3, #1
 80114ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80114bc:	4659      	mov	r1, fp
 80114be:	4628      	mov	r0, r5
 80114c0:	47b0      	blx	r6
 80114c2:	3001      	adds	r0, #1
 80114c4:	f43f aecd 	beq.w	8011262 <_printf_float+0xae>
 80114c8:	f10a 0a01 	add.w	sl, sl, #1
 80114cc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80114d0:	eba9 0308 	sub.w	r3, r9, r8
 80114d4:	4553      	cmp	r3, sl
 80114d6:	dcef      	bgt.n	80114b8 <_printf_float+0x304>
 80114d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80114dc:	429a      	cmp	r2, r3
 80114de:	444f      	add	r7, r9
 80114e0:	db14      	blt.n	801150c <_printf_float+0x358>
 80114e2:	6823      	ldr	r3, [r4, #0]
 80114e4:	07da      	lsls	r2, r3, #31
 80114e6:	d411      	bmi.n	801150c <_printf_float+0x358>
 80114e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80114ec:	eba3 0209 	sub.w	r2, r3, r9
 80114f0:	eba3 0901 	sub.w	r9, r3, r1
 80114f4:	4591      	cmp	r9, r2
 80114f6:	bfa8      	it	ge
 80114f8:	4691      	movge	r9, r2
 80114fa:	f1b9 0f00 	cmp.w	r9, #0
 80114fe:	dc0d      	bgt.n	801151c <_printf_float+0x368>
 8011500:	2700      	movs	r7, #0
 8011502:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011506:	f104 081a 	add.w	r8, r4, #26
 801150a:	e018      	b.n	801153e <_printf_float+0x38a>
 801150c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011510:	4659      	mov	r1, fp
 8011512:	4628      	mov	r0, r5
 8011514:	47b0      	blx	r6
 8011516:	3001      	adds	r0, #1
 8011518:	d1e6      	bne.n	80114e8 <_printf_float+0x334>
 801151a:	e6a2      	b.n	8011262 <_printf_float+0xae>
 801151c:	464b      	mov	r3, r9
 801151e:	463a      	mov	r2, r7
 8011520:	4659      	mov	r1, fp
 8011522:	4628      	mov	r0, r5
 8011524:	47b0      	blx	r6
 8011526:	3001      	adds	r0, #1
 8011528:	d1ea      	bne.n	8011500 <_printf_float+0x34c>
 801152a:	e69a      	b.n	8011262 <_printf_float+0xae>
 801152c:	2301      	movs	r3, #1
 801152e:	4642      	mov	r2, r8
 8011530:	4659      	mov	r1, fp
 8011532:	4628      	mov	r0, r5
 8011534:	47b0      	blx	r6
 8011536:	3001      	adds	r0, #1
 8011538:	f43f ae93 	beq.w	8011262 <_printf_float+0xae>
 801153c:	3701      	adds	r7, #1
 801153e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011542:	1a9b      	subs	r3, r3, r2
 8011544:	eba3 0309 	sub.w	r3, r3, r9
 8011548:	42bb      	cmp	r3, r7
 801154a:	dcef      	bgt.n	801152c <_printf_float+0x378>
 801154c:	e74d      	b.n	80113ea <_printf_float+0x236>
 801154e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011550:	2a01      	cmp	r2, #1
 8011552:	dc01      	bgt.n	8011558 <_printf_float+0x3a4>
 8011554:	07db      	lsls	r3, r3, #31
 8011556:	d538      	bpl.n	80115ca <_printf_float+0x416>
 8011558:	2301      	movs	r3, #1
 801155a:	463a      	mov	r2, r7
 801155c:	4659      	mov	r1, fp
 801155e:	4628      	mov	r0, r5
 8011560:	47b0      	blx	r6
 8011562:	3001      	adds	r0, #1
 8011564:	f43f ae7d 	beq.w	8011262 <_printf_float+0xae>
 8011568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801156c:	4659      	mov	r1, fp
 801156e:	4628      	mov	r0, r5
 8011570:	47b0      	blx	r6
 8011572:	3001      	adds	r0, #1
 8011574:	f107 0701 	add.w	r7, r7, #1
 8011578:	f43f ae73 	beq.w	8011262 <_printf_float+0xae>
 801157c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011582:	2200      	movs	r2, #0
 8011584:	f103 38ff 	add.w	r8, r3, #4294967295
 8011588:	2300      	movs	r3, #0
 801158a:	f7ef fa27 	bl	80009dc <__aeabi_dcmpeq>
 801158e:	b9c0      	cbnz	r0, 80115c2 <_printf_float+0x40e>
 8011590:	4643      	mov	r3, r8
 8011592:	463a      	mov	r2, r7
 8011594:	4659      	mov	r1, fp
 8011596:	4628      	mov	r0, r5
 8011598:	47b0      	blx	r6
 801159a:	3001      	adds	r0, #1
 801159c:	d10d      	bne.n	80115ba <_printf_float+0x406>
 801159e:	e660      	b.n	8011262 <_printf_float+0xae>
 80115a0:	2301      	movs	r3, #1
 80115a2:	4642      	mov	r2, r8
 80115a4:	4659      	mov	r1, fp
 80115a6:	4628      	mov	r0, r5
 80115a8:	47b0      	blx	r6
 80115aa:	3001      	adds	r0, #1
 80115ac:	f43f ae59 	beq.w	8011262 <_printf_float+0xae>
 80115b0:	3701      	adds	r7, #1
 80115b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115b4:	3b01      	subs	r3, #1
 80115b6:	42bb      	cmp	r3, r7
 80115b8:	dcf2      	bgt.n	80115a0 <_printf_float+0x3ec>
 80115ba:	464b      	mov	r3, r9
 80115bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80115c0:	e6e4      	b.n	801138c <_printf_float+0x1d8>
 80115c2:	2700      	movs	r7, #0
 80115c4:	f104 081a 	add.w	r8, r4, #26
 80115c8:	e7f3      	b.n	80115b2 <_printf_float+0x3fe>
 80115ca:	2301      	movs	r3, #1
 80115cc:	e7e1      	b.n	8011592 <_printf_float+0x3de>
 80115ce:	2301      	movs	r3, #1
 80115d0:	4642      	mov	r2, r8
 80115d2:	4659      	mov	r1, fp
 80115d4:	4628      	mov	r0, r5
 80115d6:	47b0      	blx	r6
 80115d8:	3001      	adds	r0, #1
 80115da:	f43f ae42 	beq.w	8011262 <_printf_float+0xae>
 80115de:	3701      	adds	r7, #1
 80115e0:	68e3      	ldr	r3, [r4, #12]
 80115e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80115e4:	1a9b      	subs	r3, r3, r2
 80115e6:	42bb      	cmp	r3, r7
 80115e8:	dcf1      	bgt.n	80115ce <_printf_float+0x41a>
 80115ea:	e702      	b.n	80113f2 <_printf_float+0x23e>
 80115ec:	2700      	movs	r7, #0
 80115ee:	f104 0819 	add.w	r8, r4, #25
 80115f2:	e7f5      	b.n	80115e0 <_printf_float+0x42c>
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	f43f ae94 	beq.w	8011322 <_printf_float+0x16e>
 80115fa:	f04f 0c00 	mov.w	ip, #0
 80115fe:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8011602:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8011606:	6022      	str	r2, [r4, #0]
 8011608:	e9cd 0803 	strd	r0, r8, [sp, #12]
 801160c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	463a      	mov	r2, r7
 8011614:	464b      	mov	r3, r9
 8011616:	4628      	mov	r0, r5
 8011618:	f7ff fd3b 	bl	8011092 <__cvt>
 801161c:	4607      	mov	r7, r0
 801161e:	e64f      	b.n	80112c0 <_printf_float+0x10c>

08011620 <_printf_common>:
 8011620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011624:	4691      	mov	r9, r2
 8011626:	461f      	mov	r7, r3
 8011628:	688a      	ldr	r2, [r1, #8]
 801162a:	690b      	ldr	r3, [r1, #16]
 801162c:	4606      	mov	r6, r0
 801162e:	4293      	cmp	r3, r2
 8011630:	bfb8      	it	lt
 8011632:	4613      	movlt	r3, r2
 8011634:	f8c9 3000 	str.w	r3, [r9]
 8011638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801163c:	460c      	mov	r4, r1
 801163e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011642:	b112      	cbz	r2, 801164a <_printf_common+0x2a>
 8011644:	3301      	adds	r3, #1
 8011646:	f8c9 3000 	str.w	r3, [r9]
 801164a:	6823      	ldr	r3, [r4, #0]
 801164c:	0699      	lsls	r1, r3, #26
 801164e:	bf42      	ittt	mi
 8011650:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011654:	3302      	addmi	r3, #2
 8011656:	f8c9 3000 	strmi.w	r3, [r9]
 801165a:	6825      	ldr	r5, [r4, #0]
 801165c:	f015 0506 	ands.w	r5, r5, #6
 8011660:	d107      	bne.n	8011672 <_printf_common+0x52>
 8011662:	f104 0a19 	add.w	sl, r4, #25
 8011666:	68e3      	ldr	r3, [r4, #12]
 8011668:	f8d9 2000 	ldr.w	r2, [r9]
 801166c:	1a9b      	subs	r3, r3, r2
 801166e:	42ab      	cmp	r3, r5
 8011670:	dc29      	bgt.n	80116c6 <_printf_common+0xa6>
 8011672:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011676:	6822      	ldr	r2, [r4, #0]
 8011678:	3300      	adds	r3, #0
 801167a:	bf18      	it	ne
 801167c:	2301      	movne	r3, #1
 801167e:	0692      	lsls	r2, r2, #26
 8011680:	d42e      	bmi.n	80116e0 <_printf_common+0xc0>
 8011682:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011686:	4639      	mov	r1, r7
 8011688:	4630      	mov	r0, r6
 801168a:	47c0      	blx	r8
 801168c:	3001      	adds	r0, #1
 801168e:	d021      	beq.n	80116d4 <_printf_common+0xb4>
 8011690:	6823      	ldr	r3, [r4, #0]
 8011692:	68e5      	ldr	r5, [r4, #12]
 8011694:	f003 0306 	and.w	r3, r3, #6
 8011698:	2b04      	cmp	r3, #4
 801169a:	bf18      	it	ne
 801169c:	2500      	movne	r5, #0
 801169e:	f8d9 2000 	ldr.w	r2, [r9]
 80116a2:	f04f 0900 	mov.w	r9, #0
 80116a6:	bf08      	it	eq
 80116a8:	1aad      	subeq	r5, r5, r2
 80116aa:	68a3      	ldr	r3, [r4, #8]
 80116ac:	6922      	ldr	r2, [r4, #16]
 80116ae:	bf08      	it	eq
 80116b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80116b4:	4293      	cmp	r3, r2
 80116b6:	bfc4      	itt	gt
 80116b8:	1a9b      	subgt	r3, r3, r2
 80116ba:	18ed      	addgt	r5, r5, r3
 80116bc:	341a      	adds	r4, #26
 80116be:	454d      	cmp	r5, r9
 80116c0:	d11a      	bne.n	80116f8 <_printf_common+0xd8>
 80116c2:	2000      	movs	r0, #0
 80116c4:	e008      	b.n	80116d8 <_printf_common+0xb8>
 80116c6:	2301      	movs	r3, #1
 80116c8:	4652      	mov	r2, sl
 80116ca:	4639      	mov	r1, r7
 80116cc:	4630      	mov	r0, r6
 80116ce:	47c0      	blx	r8
 80116d0:	3001      	adds	r0, #1
 80116d2:	d103      	bne.n	80116dc <_printf_common+0xbc>
 80116d4:	f04f 30ff 	mov.w	r0, #4294967295
 80116d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116dc:	3501      	adds	r5, #1
 80116de:	e7c2      	b.n	8011666 <_printf_common+0x46>
 80116e0:	2030      	movs	r0, #48	; 0x30
 80116e2:	18e1      	adds	r1, r4, r3
 80116e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80116e8:	1c5a      	adds	r2, r3, #1
 80116ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80116ee:	4422      	add	r2, r4
 80116f0:	3302      	adds	r3, #2
 80116f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80116f6:	e7c4      	b.n	8011682 <_printf_common+0x62>
 80116f8:	2301      	movs	r3, #1
 80116fa:	4622      	mov	r2, r4
 80116fc:	4639      	mov	r1, r7
 80116fe:	4630      	mov	r0, r6
 8011700:	47c0      	blx	r8
 8011702:	3001      	adds	r0, #1
 8011704:	d0e6      	beq.n	80116d4 <_printf_common+0xb4>
 8011706:	f109 0901 	add.w	r9, r9, #1
 801170a:	e7d8      	b.n	80116be <_printf_common+0x9e>

0801170c <_printf_i>:
 801170c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011710:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011714:	460c      	mov	r4, r1
 8011716:	7e09      	ldrb	r1, [r1, #24]
 8011718:	b085      	sub	sp, #20
 801171a:	296e      	cmp	r1, #110	; 0x6e
 801171c:	4617      	mov	r7, r2
 801171e:	4606      	mov	r6, r0
 8011720:	4698      	mov	r8, r3
 8011722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011724:	f000 80b3 	beq.w	801188e <_printf_i+0x182>
 8011728:	d822      	bhi.n	8011770 <_printf_i+0x64>
 801172a:	2963      	cmp	r1, #99	; 0x63
 801172c:	d036      	beq.n	801179c <_printf_i+0x90>
 801172e:	d80a      	bhi.n	8011746 <_printf_i+0x3a>
 8011730:	2900      	cmp	r1, #0
 8011732:	f000 80b9 	beq.w	80118a8 <_printf_i+0x19c>
 8011736:	2958      	cmp	r1, #88	; 0x58
 8011738:	f000 8083 	beq.w	8011842 <_printf_i+0x136>
 801173c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011740:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011744:	e032      	b.n	80117ac <_printf_i+0xa0>
 8011746:	2964      	cmp	r1, #100	; 0x64
 8011748:	d001      	beq.n	801174e <_printf_i+0x42>
 801174a:	2969      	cmp	r1, #105	; 0x69
 801174c:	d1f6      	bne.n	801173c <_printf_i+0x30>
 801174e:	6820      	ldr	r0, [r4, #0]
 8011750:	6813      	ldr	r3, [r2, #0]
 8011752:	0605      	lsls	r5, r0, #24
 8011754:	f103 0104 	add.w	r1, r3, #4
 8011758:	d52a      	bpl.n	80117b0 <_printf_i+0xa4>
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	6011      	str	r1, [r2, #0]
 801175e:	2b00      	cmp	r3, #0
 8011760:	da03      	bge.n	801176a <_printf_i+0x5e>
 8011762:	222d      	movs	r2, #45	; 0x2d
 8011764:	425b      	negs	r3, r3
 8011766:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801176a:	486f      	ldr	r0, [pc, #444]	; (8011928 <_printf_i+0x21c>)
 801176c:	220a      	movs	r2, #10
 801176e:	e039      	b.n	80117e4 <_printf_i+0xd8>
 8011770:	2973      	cmp	r1, #115	; 0x73
 8011772:	f000 809d 	beq.w	80118b0 <_printf_i+0x1a4>
 8011776:	d808      	bhi.n	801178a <_printf_i+0x7e>
 8011778:	296f      	cmp	r1, #111	; 0x6f
 801177a:	d020      	beq.n	80117be <_printf_i+0xb2>
 801177c:	2970      	cmp	r1, #112	; 0x70
 801177e:	d1dd      	bne.n	801173c <_printf_i+0x30>
 8011780:	6823      	ldr	r3, [r4, #0]
 8011782:	f043 0320 	orr.w	r3, r3, #32
 8011786:	6023      	str	r3, [r4, #0]
 8011788:	e003      	b.n	8011792 <_printf_i+0x86>
 801178a:	2975      	cmp	r1, #117	; 0x75
 801178c:	d017      	beq.n	80117be <_printf_i+0xb2>
 801178e:	2978      	cmp	r1, #120	; 0x78
 8011790:	d1d4      	bne.n	801173c <_printf_i+0x30>
 8011792:	2378      	movs	r3, #120	; 0x78
 8011794:	4865      	ldr	r0, [pc, #404]	; (801192c <_printf_i+0x220>)
 8011796:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801179a:	e055      	b.n	8011848 <_printf_i+0x13c>
 801179c:	6813      	ldr	r3, [r2, #0]
 801179e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117a2:	1d19      	adds	r1, r3, #4
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	6011      	str	r1, [r2, #0]
 80117a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80117ac:	2301      	movs	r3, #1
 80117ae:	e08c      	b.n	80118ca <_printf_i+0x1be>
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80117b6:	6011      	str	r1, [r2, #0]
 80117b8:	bf18      	it	ne
 80117ba:	b21b      	sxthne	r3, r3
 80117bc:	e7cf      	b.n	801175e <_printf_i+0x52>
 80117be:	6813      	ldr	r3, [r2, #0]
 80117c0:	6825      	ldr	r5, [r4, #0]
 80117c2:	1d18      	adds	r0, r3, #4
 80117c4:	6010      	str	r0, [r2, #0]
 80117c6:	0628      	lsls	r0, r5, #24
 80117c8:	d501      	bpl.n	80117ce <_printf_i+0xc2>
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	e002      	b.n	80117d4 <_printf_i+0xc8>
 80117ce:	0668      	lsls	r0, r5, #25
 80117d0:	d5fb      	bpl.n	80117ca <_printf_i+0xbe>
 80117d2:	881b      	ldrh	r3, [r3, #0]
 80117d4:	296f      	cmp	r1, #111	; 0x6f
 80117d6:	bf14      	ite	ne
 80117d8:	220a      	movne	r2, #10
 80117da:	2208      	moveq	r2, #8
 80117dc:	4852      	ldr	r0, [pc, #328]	; (8011928 <_printf_i+0x21c>)
 80117de:	2100      	movs	r1, #0
 80117e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80117e4:	6865      	ldr	r5, [r4, #4]
 80117e6:	2d00      	cmp	r5, #0
 80117e8:	60a5      	str	r5, [r4, #8]
 80117ea:	f2c0 8095 	blt.w	8011918 <_printf_i+0x20c>
 80117ee:	6821      	ldr	r1, [r4, #0]
 80117f0:	f021 0104 	bic.w	r1, r1, #4
 80117f4:	6021      	str	r1, [r4, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d13d      	bne.n	8011876 <_printf_i+0x16a>
 80117fa:	2d00      	cmp	r5, #0
 80117fc:	f040 808e 	bne.w	801191c <_printf_i+0x210>
 8011800:	4665      	mov	r5, ip
 8011802:	2a08      	cmp	r2, #8
 8011804:	d10b      	bne.n	801181e <_printf_i+0x112>
 8011806:	6823      	ldr	r3, [r4, #0]
 8011808:	07db      	lsls	r3, r3, #31
 801180a:	d508      	bpl.n	801181e <_printf_i+0x112>
 801180c:	6923      	ldr	r3, [r4, #16]
 801180e:	6862      	ldr	r2, [r4, #4]
 8011810:	429a      	cmp	r2, r3
 8011812:	bfde      	ittt	le
 8011814:	2330      	movle	r3, #48	; 0x30
 8011816:	f805 3c01 	strble.w	r3, [r5, #-1]
 801181a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801181e:	ebac 0305 	sub.w	r3, ip, r5
 8011822:	6123      	str	r3, [r4, #16]
 8011824:	f8cd 8000 	str.w	r8, [sp]
 8011828:	463b      	mov	r3, r7
 801182a:	aa03      	add	r2, sp, #12
 801182c:	4621      	mov	r1, r4
 801182e:	4630      	mov	r0, r6
 8011830:	f7ff fef6 	bl	8011620 <_printf_common>
 8011834:	3001      	adds	r0, #1
 8011836:	d14d      	bne.n	80118d4 <_printf_i+0x1c8>
 8011838:	f04f 30ff 	mov.w	r0, #4294967295
 801183c:	b005      	add	sp, #20
 801183e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011842:	4839      	ldr	r0, [pc, #228]	; (8011928 <_printf_i+0x21c>)
 8011844:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011848:	6813      	ldr	r3, [r2, #0]
 801184a:	6821      	ldr	r1, [r4, #0]
 801184c:	1d1d      	adds	r5, r3, #4
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	6015      	str	r5, [r2, #0]
 8011852:	060a      	lsls	r2, r1, #24
 8011854:	d50b      	bpl.n	801186e <_printf_i+0x162>
 8011856:	07ca      	lsls	r2, r1, #31
 8011858:	bf44      	itt	mi
 801185a:	f041 0120 	orrmi.w	r1, r1, #32
 801185e:	6021      	strmi	r1, [r4, #0]
 8011860:	b91b      	cbnz	r3, 801186a <_printf_i+0x15e>
 8011862:	6822      	ldr	r2, [r4, #0]
 8011864:	f022 0220 	bic.w	r2, r2, #32
 8011868:	6022      	str	r2, [r4, #0]
 801186a:	2210      	movs	r2, #16
 801186c:	e7b7      	b.n	80117de <_printf_i+0xd2>
 801186e:	064d      	lsls	r5, r1, #25
 8011870:	bf48      	it	mi
 8011872:	b29b      	uxthmi	r3, r3
 8011874:	e7ef      	b.n	8011856 <_printf_i+0x14a>
 8011876:	4665      	mov	r5, ip
 8011878:	fbb3 f1f2 	udiv	r1, r3, r2
 801187c:	fb02 3311 	mls	r3, r2, r1, r3
 8011880:	5cc3      	ldrb	r3, [r0, r3]
 8011882:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011886:	460b      	mov	r3, r1
 8011888:	2900      	cmp	r1, #0
 801188a:	d1f5      	bne.n	8011878 <_printf_i+0x16c>
 801188c:	e7b9      	b.n	8011802 <_printf_i+0xf6>
 801188e:	6813      	ldr	r3, [r2, #0]
 8011890:	6825      	ldr	r5, [r4, #0]
 8011892:	1d18      	adds	r0, r3, #4
 8011894:	6961      	ldr	r1, [r4, #20]
 8011896:	6010      	str	r0, [r2, #0]
 8011898:	0628      	lsls	r0, r5, #24
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	d501      	bpl.n	80118a2 <_printf_i+0x196>
 801189e:	6019      	str	r1, [r3, #0]
 80118a0:	e002      	b.n	80118a8 <_printf_i+0x19c>
 80118a2:	066a      	lsls	r2, r5, #25
 80118a4:	d5fb      	bpl.n	801189e <_printf_i+0x192>
 80118a6:	8019      	strh	r1, [r3, #0]
 80118a8:	2300      	movs	r3, #0
 80118aa:	4665      	mov	r5, ip
 80118ac:	6123      	str	r3, [r4, #16]
 80118ae:	e7b9      	b.n	8011824 <_printf_i+0x118>
 80118b0:	6813      	ldr	r3, [r2, #0]
 80118b2:	1d19      	adds	r1, r3, #4
 80118b4:	6011      	str	r1, [r2, #0]
 80118b6:	681d      	ldr	r5, [r3, #0]
 80118b8:	6862      	ldr	r2, [r4, #4]
 80118ba:	2100      	movs	r1, #0
 80118bc:	4628      	mov	r0, r5
 80118be:	f002 fa2d 	bl	8013d1c <memchr>
 80118c2:	b108      	cbz	r0, 80118c8 <_printf_i+0x1bc>
 80118c4:	1b40      	subs	r0, r0, r5
 80118c6:	6060      	str	r0, [r4, #4]
 80118c8:	6863      	ldr	r3, [r4, #4]
 80118ca:	6123      	str	r3, [r4, #16]
 80118cc:	2300      	movs	r3, #0
 80118ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118d2:	e7a7      	b.n	8011824 <_printf_i+0x118>
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	462a      	mov	r2, r5
 80118d8:	4639      	mov	r1, r7
 80118da:	4630      	mov	r0, r6
 80118dc:	47c0      	blx	r8
 80118de:	3001      	adds	r0, #1
 80118e0:	d0aa      	beq.n	8011838 <_printf_i+0x12c>
 80118e2:	6823      	ldr	r3, [r4, #0]
 80118e4:	079b      	lsls	r3, r3, #30
 80118e6:	d413      	bmi.n	8011910 <_printf_i+0x204>
 80118e8:	68e0      	ldr	r0, [r4, #12]
 80118ea:	9b03      	ldr	r3, [sp, #12]
 80118ec:	4298      	cmp	r0, r3
 80118ee:	bfb8      	it	lt
 80118f0:	4618      	movlt	r0, r3
 80118f2:	e7a3      	b.n	801183c <_printf_i+0x130>
 80118f4:	2301      	movs	r3, #1
 80118f6:	464a      	mov	r2, r9
 80118f8:	4639      	mov	r1, r7
 80118fa:	4630      	mov	r0, r6
 80118fc:	47c0      	blx	r8
 80118fe:	3001      	adds	r0, #1
 8011900:	d09a      	beq.n	8011838 <_printf_i+0x12c>
 8011902:	3501      	adds	r5, #1
 8011904:	68e3      	ldr	r3, [r4, #12]
 8011906:	9a03      	ldr	r2, [sp, #12]
 8011908:	1a9b      	subs	r3, r3, r2
 801190a:	42ab      	cmp	r3, r5
 801190c:	dcf2      	bgt.n	80118f4 <_printf_i+0x1e8>
 801190e:	e7eb      	b.n	80118e8 <_printf_i+0x1dc>
 8011910:	2500      	movs	r5, #0
 8011912:	f104 0919 	add.w	r9, r4, #25
 8011916:	e7f5      	b.n	8011904 <_printf_i+0x1f8>
 8011918:	2b00      	cmp	r3, #0
 801191a:	d1ac      	bne.n	8011876 <_printf_i+0x16a>
 801191c:	7803      	ldrb	r3, [r0, #0]
 801191e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011922:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011926:	e76c      	b.n	8011802 <_printf_i+0xf6>
 8011928:	08019adc 	.word	0x08019adc
 801192c:	08019aed 	.word	0x08019aed

08011930 <iprintf>:
 8011930:	b40f      	push	{r0, r1, r2, r3}
 8011932:	4b0a      	ldr	r3, [pc, #40]	; (801195c <iprintf+0x2c>)
 8011934:	b513      	push	{r0, r1, r4, lr}
 8011936:	681c      	ldr	r4, [r3, #0]
 8011938:	b124      	cbz	r4, 8011944 <iprintf+0x14>
 801193a:	69a3      	ldr	r3, [r4, #24]
 801193c:	b913      	cbnz	r3, 8011944 <iprintf+0x14>
 801193e:	4620      	mov	r0, r4
 8011940:	f001 fe22 	bl	8013588 <__sinit>
 8011944:	ab05      	add	r3, sp, #20
 8011946:	9a04      	ldr	r2, [sp, #16]
 8011948:	68a1      	ldr	r1, [r4, #8]
 801194a:	4620      	mov	r0, r4
 801194c:	9301      	str	r3, [sp, #4]
 801194e:	f003 f819 	bl	8014984 <_vfiprintf_r>
 8011952:	b002      	add	sp, #8
 8011954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011958:	b004      	add	sp, #16
 801195a:	4770      	bx	lr
 801195c:	20000060 	.word	0x20000060

08011960 <strcpy>:
 8011960:	4603      	mov	r3, r0
 8011962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011966:	f803 2b01 	strb.w	r2, [r3], #1
 801196a:	2a00      	cmp	r2, #0
 801196c:	d1f9      	bne.n	8011962 <strcpy+0x2>
 801196e:	4770      	bx	lr

08011970 <sulp>:
 8011970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011974:	460f      	mov	r7, r1
 8011976:	4690      	mov	r8, r2
 8011978:	f002 fca8 	bl	80142cc <__ulp>
 801197c:	4604      	mov	r4, r0
 801197e:	460d      	mov	r5, r1
 8011980:	f1b8 0f00 	cmp.w	r8, #0
 8011984:	d011      	beq.n	80119aa <sulp+0x3a>
 8011986:	f3c7 530a 	ubfx	r3, r7, #20, #11
 801198a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801198e:	2b00      	cmp	r3, #0
 8011990:	dd0b      	ble.n	80119aa <sulp+0x3a>
 8011992:	2400      	movs	r4, #0
 8011994:	051b      	lsls	r3, r3, #20
 8011996:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801199a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801199e:	4622      	mov	r2, r4
 80119a0:	462b      	mov	r3, r5
 80119a2:	f7ee fdb3 	bl	800050c <__aeabi_dmul>
 80119a6:	4604      	mov	r4, r0
 80119a8:	460d      	mov	r5, r1
 80119aa:	4620      	mov	r0, r4
 80119ac:	4629      	mov	r1, r5
 80119ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119b2:	0000      	movs	r0, r0
 80119b4:	0000      	movs	r0, r0
	...

080119b8 <_strtod_l>:
 80119b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119bc:	461f      	mov	r7, r3
 80119be:	2300      	movs	r3, #0
 80119c0:	b0a1      	sub	sp, #132	; 0x84
 80119c2:	4683      	mov	fp, r0
 80119c4:	4638      	mov	r0, r7
 80119c6:	460e      	mov	r6, r1
 80119c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80119ca:	931c      	str	r3, [sp, #112]	; 0x70
 80119cc:	f002 f98e 	bl	8013cec <__localeconv_l>
 80119d0:	4680      	mov	r8, r0
 80119d2:	6800      	ldr	r0, [r0, #0]
 80119d4:	f7ee fbd6 	bl	8000184 <strlen>
 80119d8:	f04f 0900 	mov.w	r9, #0
 80119dc:	4604      	mov	r4, r0
 80119de:	f04f 0a00 	mov.w	sl, #0
 80119e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80119e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80119e6:	781a      	ldrb	r2, [r3, #0]
 80119e8:	2a0d      	cmp	r2, #13
 80119ea:	d832      	bhi.n	8011a52 <_strtod_l+0x9a>
 80119ec:	2a09      	cmp	r2, #9
 80119ee:	d236      	bcs.n	8011a5e <_strtod_l+0xa6>
 80119f0:	2a00      	cmp	r2, #0
 80119f2:	d03e      	beq.n	8011a72 <_strtod_l+0xba>
 80119f4:	2300      	movs	r3, #0
 80119f6:	930d      	str	r3, [sp, #52]	; 0x34
 80119f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80119fa:	782b      	ldrb	r3, [r5, #0]
 80119fc:	2b30      	cmp	r3, #48	; 0x30
 80119fe:	f040 80ac 	bne.w	8011b5a <_strtod_l+0x1a2>
 8011a02:	786b      	ldrb	r3, [r5, #1]
 8011a04:	2b58      	cmp	r3, #88	; 0x58
 8011a06:	d001      	beq.n	8011a0c <_strtod_l+0x54>
 8011a08:	2b78      	cmp	r3, #120	; 0x78
 8011a0a:	d167      	bne.n	8011adc <_strtod_l+0x124>
 8011a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a0e:	9702      	str	r7, [sp, #8]
 8011a10:	9301      	str	r3, [sp, #4]
 8011a12:	ab1c      	add	r3, sp, #112	; 0x70
 8011a14:	9300      	str	r3, [sp, #0]
 8011a16:	4a89      	ldr	r2, [pc, #548]	; (8011c3c <_strtod_l+0x284>)
 8011a18:	ab1d      	add	r3, sp, #116	; 0x74
 8011a1a:	a91b      	add	r1, sp, #108	; 0x6c
 8011a1c:	4658      	mov	r0, fp
 8011a1e:	f001 fe8d 	bl	801373c <__gethex>
 8011a22:	f010 0407 	ands.w	r4, r0, #7
 8011a26:	4606      	mov	r6, r0
 8011a28:	d005      	beq.n	8011a36 <_strtod_l+0x7e>
 8011a2a:	2c06      	cmp	r4, #6
 8011a2c:	d12b      	bne.n	8011a86 <_strtod_l+0xce>
 8011a2e:	2300      	movs	r3, #0
 8011a30:	3501      	adds	r5, #1
 8011a32:	951b      	str	r5, [sp, #108]	; 0x6c
 8011a34:	930d      	str	r3, [sp, #52]	; 0x34
 8011a36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	f040 85a6 	bne.w	801258a <_strtod_l+0xbd2>
 8011a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a40:	b1e3      	cbz	r3, 8011a7c <_strtod_l+0xc4>
 8011a42:	464a      	mov	r2, r9
 8011a44:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8011a48:	4610      	mov	r0, r2
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	b021      	add	sp, #132	; 0x84
 8011a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a52:	2a2b      	cmp	r2, #43	; 0x2b
 8011a54:	d015      	beq.n	8011a82 <_strtod_l+0xca>
 8011a56:	2a2d      	cmp	r2, #45	; 0x2d
 8011a58:	d004      	beq.n	8011a64 <_strtod_l+0xac>
 8011a5a:	2a20      	cmp	r2, #32
 8011a5c:	d1ca      	bne.n	80119f4 <_strtod_l+0x3c>
 8011a5e:	3301      	adds	r3, #1
 8011a60:	931b      	str	r3, [sp, #108]	; 0x6c
 8011a62:	e7bf      	b.n	80119e4 <_strtod_l+0x2c>
 8011a64:	2201      	movs	r2, #1
 8011a66:	920d      	str	r2, [sp, #52]	; 0x34
 8011a68:	1c5a      	adds	r2, r3, #1
 8011a6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8011a6c:	785b      	ldrb	r3, [r3, #1]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d1c2      	bne.n	80119f8 <_strtod_l+0x40>
 8011a72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a74:	961b      	str	r6, [sp, #108]	; 0x6c
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	f040 8585 	bne.w	8012586 <_strtod_l+0xbce>
 8011a7c:	464a      	mov	r2, r9
 8011a7e:	4653      	mov	r3, sl
 8011a80:	e7e2      	b.n	8011a48 <_strtod_l+0x90>
 8011a82:	2200      	movs	r2, #0
 8011a84:	e7ef      	b.n	8011a66 <_strtod_l+0xae>
 8011a86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011a88:	b13a      	cbz	r2, 8011a9a <_strtod_l+0xe2>
 8011a8a:	2135      	movs	r1, #53	; 0x35
 8011a8c:	a81e      	add	r0, sp, #120	; 0x78
 8011a8e:	f002 fd10 	bl	80144b2 <__copybits>
 8011a92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011a94:	4658      	mov	r0, fp
 8011a96:	f002 f983 	bl	8013da0 <_Bfree>
 8011a9a:	3c01      	subs	r4, #1
 8011a9c:	2c04      	cmp	r4, #4
 8011a9e:	d806      	bhi.n	8011aae <_strtod_l+0xf6>
 8011aa0:	e8df f004 	tbb	[pc, r4]
 8011aa4:	1714030a 	.word	0x1714030a
 8011aa8:	0a          	.byte	0x0a
 8011aa9:	00          	.byte	0x00
 8011aaa:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8011aae:	0731      	lsls	r1, r6, #28
 8011ab0:	d5c1      	bpl.n	8011a36 <_strtod_l+0x7e>
 8011ab2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8011ab6:	e7be      	b.n	8011a36 <_strtod_l+0x7e>
 8011ab8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011aba:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8011abe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011ac2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011ac6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8011aca:	e7f0      	b.n	8011aae <_strtod_l+0xf6>
 8011acc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8011c40 <_strtod_l+0x288>
 8011ad0:	e7ed      	b.n	8011aae <_strtod_l+0xf6>
 8011ad2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8011ad6:	f04f 39ff 	mov.w	r9, #4294967295
 8011ada:	e7e8      	b.n	8011aae <_strtod_l+0xf6>
 8011adc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011ade:	1c5a      	adds	r2, r3, #1
 8011ae0:	921b      	str	r2, [sp, #108]	; 0x6c
 8011ae2:	785b      	ldrb	r3, [r3, #1]
 8011ae4:	2b30      	cmp	r3, #48	; 0x30
 8011ae6:	d0f9      	beq.n	8011adc <_strtod_l+0x124>
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d0a4      	beq.n	8011a36 <_strtod_l+0x7e>
 8011aec:	2301      	movs	r3, #1
 8011aee:	2500      	movs	r5, #0
 8011af0:	220a      	movs	r2, #10
 8011af2:	9307      	str	r3, [sp, #28]
 8011af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011af6:	9506      	str	r5, [sp, #24]
 8011af8:	9308      	str	r3, [sp, #32]
 8011afa:	9504      	str	r5, [sp, #16]
 8011afc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011afe:	7807      	ldrb	r7, [r0, #0]
 8011b00:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011b04:	b2d9      	uxtb	r1, r3
 8011b06:	2909      	cmp	r1, #9
 8011b08:	d929      	bls.n	8011b5e <_strtod_l+0x1a6>
 8011b0a:	4622      	mov	r2, r4
 8011b0c:	f8d8 1000 	ldr.w	r1, [r8]
 8011b10:	f003 f8a5 	bl	8014c5e <strncmp>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d031      	beq.n	8011b7c <_strtod_l+0x1c4>
 8011b18:	2000      	movs	r0, #0
 8011b1a:	463b      	mov	r3, r7
 8011b1c:	4602      	mov	r2, r0
 8011b1e:	9c04      	ldr	r4, [sp, #16]
 8011b20:	9005      	str	r0, [sp, #20]
 8011b22:	2b65      	cmp	r3, #101	; 0x65
 8011b24:	d001      	beq.n	8011b2a <_strtod_l+0x172>
 8011b26:	2b45      	cmp	r3, #69	; 0x45
 8011b28:	d114      	bne.n	8011b54 <_strtod_l+0x19c>
 8011b2a:	b924      	cbnz	r4, 8011b36 <_strtod_l+0x17e>
 8011b2c:	b910      	cbnz	r0, 8011b34 <_strtod_l+0x17c>
 8011b2e:	9b07      	ldr	r3, [sp, #28]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d09e      	beq.n	8011a72 <_strtod_l+0xba>
 8011b34:	2400      	movs	r4, #0
 8011b36:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011b38:	1c73      	adds	r3, r6, #1
 8011b3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8011b3c:	7873      	ldrb	r3, [r6, #1]
 8011b3e:	2b2b      	cmp	r3, #43	; 0x2b
 8011b40:	d078      	beq.n	8011c34 <_strtod_l+0x27c>
 8011b42:	2b2d      	cmp	r3, #45	; 0x2d
 8011b44:	d070      	beq.n	8011c28 <_strtod_l+0x270>
 8011b46:	f04f 0c00 	mov.w	ip, #0
 8011b4a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8011b4e:	2f09      	cmp	r7, #9
 8011b50:	d97c      	bls.n	8011c4c <_strtod_l+0x294>
 8011b52:	961b      	str	r6, [sp, #108]	; 0x6c
 8011b54:	f04f 0e00 	mov.w	lr, #0
 8011b58:	e09a      	b.n	8011c90 <_strtod_l+0x2d8>
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	e7c7      	b.n	8011aee <_strtod_l+0x136>
 8011b5e:	9904      	ldr	r1, [sp, #16]
 8011b60:	3001      	adds	r0, #1
 8011b62:	2908      	cmp	r1, #8
 8011b64:	bfd7      	itett	le
 8011b66:	9906      	ldrle	r1, [sp, #24]
 8011b68:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011b6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011b70:	9306      	strle	r3, [sp, #24]
 8011b72:	9b04      	ldr	r3, [sp, #16]
 8011b74:	901b      	str	r0, [sp, #108]	; 0x6c
 8011b76:	3301      	adds	r3, #1
 8011b78:	9304      	str	r3, [sp, #16]
 8011b7a:	e7bf      	b.n	8011afc <_strtod_l+0x144>
 8011b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b7e:	191a      	adds	r2, r3, r4
 8011b80:	921b      	str	r2, [sp, #108]	; 0x6c
 8011b82:	9a04      	ldr	r2, [sp, #16]
 8011b84:	5d1b      	ldrb	r3, [r3, r4]
 8011b86:	2a00      	cmp	r2, #0
 8011b88:	d037      	beq.n	8011bfa <_strtod_l+0x242>
 8011b8a:	4602      	mov	r2, r0
 8011b8c:	9c04      	ldr	r4, [sp, #16]
 8011b8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011b92:	2909      	cmp	r1, #9
 8011b94:	d913      	bls.n	8011bbe <_strtod_l+0x206>
 8011b96:	2101      	movs	r1, #1
 8011b98:	9105      	str	r1, [sp, #20]
 8011b9a:	e7c2      	b.n	8011b22 <_strtod_l+0x16a>
 8011b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b9e:	3001      	adds	r0, #1
 8011ba0:	1c5a      	adds	r2, r3, #1
 8011ba2:	921b      	str	r2, [sp, #108]	; 0x6c
 8011ba4:	785b      	ldrb	r3, [r3, #1]
 8011ba6:	2b30      	cmp	r3, #48	; 0x30
 8011ba8:	d0f8      	beq.n	8011b9c <_strtod_l+0x1e4>
 8011baa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011bae:	2a08      	cmp	r2, #8
 8011bb0:	f200 84f0 	bhi.w	8012594 <_strtod_l+0xbdc>
 8011bb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011bb6:	9208      	str	r2, [sp, #32]
 8011bb8:	4602      	mov	r2, r0
 8011bba:	2000      	movs	r0, #0
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8011bc2:	f100 0101 	add.w	r1, r0, #1
 8011bc6:	d012      	beq.n	8011bee <_strtod_l+0x236>
 8011bc8:	440a      	add	r2, r1
 8011bca:	270a      	movs	r7, #10
 8011bcc:	4621      	mov	r1, r4
 8011bce:	eb00 0c04 	add.w	ip, r0, r4
 8011bd2:	458c      	cmp	ip, r1
 8011bd4:	d113      	bne.n	8011bfe <_strtod_l+0x246>
 8011bd6:	1821      	adds	r1, r4, r0
 8011bd8:	2908      	cmp	r1, #8
 8011bda:	f104 0401 	add.w	r4, r4, #1
 8011bde:	4404      	add	r4, r0
 8011be0:	dc19      	bgt.n	8011c16 <_strtod_l+0x25e>
 8011be2:	210a      	movs	r1, #10
 8011be4:	9b06      	ldr	r3, [sp, #24]
 8011be6:	fb01 e303 	mla	r3, r1, r3, lr
 8011bea:	9306      	str	r3, [sp, #24]
 8011bec:	2100      	movs	r1, #0
 8011bee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011bf0:	1c58      	adds	r0, r3, #1
 8011bf2:	901b      	str	r0, [sp, #108]	; 0x6c
 8011bf4:	785b      	ldrb	r3, [r3, #1]
 8011bf6:	4608      	mov	r0, r1
 8011bf8:	e7c9      	b.n	8011b8e <_strtod_l+0x1d6>
 8011bfa:	9804      	ldr	r0, [sp, #16]
 8011bfc:	e7d3      	b.n	8011ba6 <_strtod_l+0x1ee>
 8011bfe:	2908      	cmp	r1, #8
 8011c00:	f101 0101 	add.w	r1, r1, #1
 8011c04:	dc03      	bgt.n	8011c0e <_strtod_l+0x256>
 8011c06:	9b06      	ldr	r3, [sp, #24]
 8011c08:	437b      	muls	r3, r7
 8011c0a:	9306      	str	r3, [sp, #24]
 8011c0c:	e7e1      	b.n	8011bd2 <_strtod_l+0x21a>
 8011c0e:	2910      	cmp	r1, #16
 8011c10:	bfd8      	it	le
 8011c12:	437d      	mulle	r5, r7
 8011c14:	e7dd      	b.n	8011bd2 <_strtod_l+0x21a>
 8011c16:	2c10      	cmp	r4, #16
 8011c18:	bfdc      	itt	le
 8011c1a:	210a      	movle	r1, #10
 8011c1c:	fb01 e505 	mlale	r5, r1, r5, lr
 8011c20:	e7e4      	b.n	8011bec <_strtod_l+0x234>
 8011c22:	2301      	movs	r3, #1
 8011c24:	9305      	str	r3, [sp, #20]
 8011c26:	e781      	b.n	8011b2c <_strtod_l+0x174>
 8011c28:	f04f 0c01 	mov.w	ip, #1
 8011c2c:	1cb3      	adds	r3, r6, #2
 8011c2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011c30:	78b3      	ldrb	r3, [r6, #2]
 8011c32:	e78a      	b.n	8011b4a <_strtod_l+0x192>
 8011c34:	f04f 0c00 	mov.w	ip, #0
 8011c38:	e7f8      	b.n	8011c2c <_strtod_l+0x274>
 8011c3a:	bf00      	nop
 8011c3c:	08019b00 	.word	0x08019b00
 8011c40:	7ff00000 	.word	0x7ff00000
 8011c44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c46:	1c5f      	adds	r7, r3, #1
 8011c48:	971b      	str	r7, [sp, #108]	; 0x6c
 8011c4a:	785b      	ldrb	r3, [r3, #1]
 8011c4c:	2b30      	cmp	r3, #48	; 0x30
 8011c4e:	d0f9      	beq.n	8011c44 <_strtod_l+0x28c>
 8011c50:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011c54:	2f08      	cmp	r7, #8
 8011c56:	f63f af7d 	bhi.w	8011b54 <_strtod_l+0x19c>
 8011c5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011c5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c60:	9309      	str	r3, [sp, #36]	; 0x24
 8011c62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c64:	1c5f      	adds	r7, r3, #1
 8011c66:	971b      	str	r7, [sp, #108]	; 0x6c
 8011c68:	785b      	ldrb	r3, [r3, #1]
 8011c6a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8011c6e:	f1b8 0f09 	cmp.w	r8, #9
 8011c72:	d937      	bls.n	8011ce4 <_strtod_l+0x32c>
 8011c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c76:	1a7f      	subs	r7, r7, r1
 8011c78:	2f08      	cmp	r7, #8
 8011c7a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011c7e:	dc37      	bgt.n	8011cf0 <_strtod_l+0x338>
 8011c80:	45be      	cmp	lr, r7
 8011c82:	bfa8      	it	ge
 8011c84:	46be      	movge	lr, r7
 8011c86:	f1bc 0f00 	cmp.w	ip, #0
 8011c8a:	d001      	beq.n	8011c90 <_strtod_l+0x2d8>
 8011c8c:	f1ce 0e00 	rsb	lr, lr, #0
 8011c90:	2c00      	cmp	r4, #0
 8011c92:	d151      	bne.n	8011d38 <_strtod_l+0x380>
 8011c94:	2800      	cmp	r0, #0
 8011c96:	f47f aece 	bne.w	8011a36 <_strtod_l+0x7e>
 8011c9a:	9a07      	ldr	r2, [sp, #28]
 8011c9c:	2a00      	cmp	r2, #0
 8011c9e:	f47f aeca 	bne.w	8011a36 <_strtod_l+0x7e>
 8011ca2:	9a05      	ldr	r2, [sp, #20]
 8011ca4:	2a00      	cmp	r2, #0
 8011ca6:	f47f aee4 	bne.w	8011a72 <_strtod_l+0xba>
 8011caa:	2b4e      	cmp	r3, #78	; 0x4e
 8011cac:	d027      	beq.n	8011cfe <_strtod_l+0x346>
 8011cae:	dc21      	bgt.n	8011cf4 <_strtod_l+0x33c>
 8011cb0:	2b49      	cmp	r3, #73	; 0x49
 8011cb2:	f47f aede 	bne.w	8011a72 <_strtod_l+0xba>
 8011cb6:	49a4      	ldr	r1, [pc, #656]	; (8011f48 <_strtod_l+0x590>)
 8011cb8:	a81b      	add	r0, sp, #108	; 0x6c
 8011cba:	f001 ff73 	bl	8013ba4 <__match>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	f43f aed7 	beq.w	8011a72 <_strtod_l+0xba>
 8011cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011cc6:	49a1      	ldr	r1, [pc, #644]	; (8011f4c <_strtod_l+0x594>)
 8011cc8:	3b01      	subs	r3, #1
 8011cca:	a81b      	add	r0, sp, #108	; 0x6c
 8011ccc:	931b      	str	r3, [sp, #108]	; 0x6c
 8011cce:	f001 ff69 	bl	8013ba4 <__match>
 8011cd2:	b910      	cbnz	r0, 8011cda <_strtod_l+0x322>
 8011cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	931b      	str	r3, [sp, #108]	; 0x6c
 8011cda:	f8df a284 	ldr.w	sl, [pc, #644]	; 8011f60 <_strtod_l+0x5a8>
 8011cde:	f04f 0900 	mov.w	r9, #0
 8011ce2:	e6a8      	b.n	8011a36 <_strtod_l+0x7e>
 8011ce4:	210a      	movs	r1, #10
 8011ce6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011cea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011cee:	e7b8      	b.n	8011c62 <_strtod_l+0x2aa>
 8011cf0:	46be      	mov	lr, r7
 8011cf2:	e7c8      	b.n	8011c86 <_strtod_l+0x2ce>
 8011cf4:	2b69      	cmp	r3, #105	; 0x69
 8011cf6:	d0de      	beq.n	8011cb6 <_strtod_l+0x2fe>
 8011cf8:	2b6e      	cmp	r3, #110	; 0x6e
 8011cfa:	f47f aeba 	bne.w	8011a72 <_strtod_l+0xba>
 8011cfe:	4994      	ldr	r1, [pc, #592]	; (8011f50 <_strtod_l+0x598>)
 8011d00:	a81b      	add	r0, sp, #108	; 0x6c
 8011d02:	f001 ff4f 	bl	8013ba4 <__match>
 8011d06:	2800      	cmp	r0, #0
 8011d08:	f43f aeb3 	beq.w	8011a72 <_strtod_l+0xba>
 8011d0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	2b28      	cmp	r3, #40	; 0x28
 8011d12:	d10e      	bne.n	8011d32 <_strtod_l+0x37a>
 8011d14:	aa1e      	add	r2, sp, #120	; 0x78
 8011d16:	498f      	ldr	r1, [pc, #572]	; (8011f54 <_strtod_l+0x59c>)
 8011d18:	a81b      	add	r0, sp, #108	; 0x6c
 8011d1a:	f001 ff57 	bl	8013bcc <__hexnan>
 8011d1e:	2805      	cmp	r0, #5
 8011d20:	d107      	bne.n	8011d32 <_strtod_l+0x37a>
 8011d22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011d24:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8011d28:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8011d2c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8011d30:	e681      	b.n	8011a36 <_strtod_l+0x7e>
 8011d32:	f8df a234 	ldr.w	sl, [pc, #564]	; 8011f68 <_strtod_l+0x5b0>
 8011d36:	e7d2      	b.n	8011cde <_strtod_l+0x326>
 8011d38:	ebae 0302 	sub.w	r3, lr, r2
 8011d3c:	9307      	str	r3, [sp, #28]
 8011d3e:	9b04      	ldr	r3, [sp, #16]
 8011d40:	9806      	ldr	r0, [sp, #24]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	bf08      	it	eq
 8011d46:	4623      	moveq	r3, r4
 8011d48:	2c10      	cmp	r4, #16
 8011d4a:	9304      	str	r3, [sp, #16]
 8011d4c:	46a0      	mov	r8, r4
 8011d4e:	bfa8      	it	ge
 8011d50:	f04f 0810 	movge.w	r8, #16
 8011d54:	f7ee fb60 	bl	8000418 <__aeabi_ui2d>
 8011d58:	2c09      	cmp	r4, #9
 8011d5a:	4681      	mov	r9, r0
 8011d5c:	468a      	mov	sl, r1
 8011d5e:	dc13      	bgt.n	8011d88 <_strtod_l+0x3d0>
 8011d60:	9b07      	ldr	r3, [sp, #28]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	f43f ae67 	beq.w	8011a36 <_strtod_l+0x7e>
 8011d68:	9b07      	ldr	r3, [sp, #28]
 8011d6a:	dd7e      	ble.n	8011e6a <_strtod_l+0x4b2>
 8011d6c:	2b16      	cmp	r3, #22
 8011d6e:	dc65      	bgt.n	8011e3c <_strtod_l+0x484>
 8011d70:	4a79      	ldr	r2, [pc, #484]	; (8011f58 <_strtod_l+0x5a0>)
 8011d72:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011d76:	464a      	mov	r2, r9
 8011d78:	e9de 0100 	ldrd	r0, r1, [lr]
 8011d7c:	4653      	mov	r3, sl
 8011d7e:	f7ee fbc5 	bl	800050c <__aeabi_dmul>
 8011d82:	4681      	mov	r9, r0
 8011d84:	468a      	mov	sl, r1
 8011d86:	e656      	b.n	8011a36 <_strtod_l+0x7e>
 8011d88:	4b73      	ldr	r3, [pc, #460]	; (8011f58 <_strtod_l+0x5a0>)
 8011d8a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011d8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011d92:	f7ee fbbb 	bl	800050c <__aeabi_dmul>
 8011d96:	4606      	mov	r6, r0
 8011d98:	4628      	mov	r0, r5
 8011d9a:	460f      	mov	r7, r1
 8011d9c:	f7ee fb3c 	bl	8000418 <__aeabi_ui2d>
 8011da0:	4602      	mov	r2, r0
 8011da2:	460b      	mov	r3, r1
 8011da4:	4630      	mov	r0, r6
 8011da6:	4639      	mov	r1, r7
 8011da8:	f7ee f9fa 	bl	80001a0 <__adddf3>
 8011dac:	2c0f      	cmp	r4, #15
 8011dae:	4681      	mov	r9, r0
 8011db0:	468a      	mov	sl, r1
 8011db2:	ddd5      	ble.n	8011d60 <_strtod_l+0x3a8>
 8011db4:	9b07      	ldr	r3, [sp, #28]
 8011db6:	eba4 0808 	sub.w	r8, r4, r8
 8011dba:	4498      	add	r8, r3
 8011dbc:	f1b8 0f00 	cmp.w	r8, #0
 8011dc0:	f340 809a 	ble.w	8011ef8 <_strtod_l+0x540>
 8011dc4:	f018 030f 	ands.w	r3, r8, #15
 8011dc8:	d00a      	beq.n	8011de0 <_strtod_l+0x428>
 8011dca:	4963      	ldr	r1, [pc, #396]	; (8011f58 <_strtod_l+0x5a0>)
 8011dcc:	464a      	mov	r2, r9
 8011dce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dd6:	4653      	mov	r3, sl
 8011dd8:	f7ee fb98 	bl	800050c <__aeabi_dmul>
 8011ddc:	4681      	mov	r9, r0
 8011dde:	468a      	mov	sl, r1
 8011de0:	f038 080f 	bics.w	r8, r8, #15
 8011de4:	d077      	beq.n	8011ed6 <_strtod_l+0x51e>
 8011de6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011dea:	dd4b      	ble.n	8011e84 <_strtod_l+0x4cc>
 8011dec:	f04f 0800 	mov.w	r8, #0
 8011df0:	f8cd 8010 	str.w	r8, [sp, #16]
 8011df4:	f8cd 8020 	str.w	r8, [sp, #32]
 8011df8:	f8cd 8018 	str.w	r8, [sp, #24]
 8011dfc:	2322      	movs	r3, #34	; 0x22
 8011dfe:	f04f 0900 	mov.w	r9, #0
 8011e02:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8011f60 <_strtod_l+0x5a8>
 8011e06:	f8cb 3000 	str.w	r3, [fp]
 8011e0a:	9b08      	ldr	r3, [sp, #32]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	f43f ae12 	beq.w	8011a36 <_strtod_l+0x7e>
 8011e12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011e14:	4658      	mov	r0, fp
 8011e16:	f001 ffc3 	bl	8013da0 <_Bfree>
 8011e1a:	9906      	ldr	r1, [sp, #24]
 8011e1c:	4658      	mov	r0, fp
 8011e1e:	f001 ffbf 	bl	8013da0 <_Bfree>
 8011e22:	9904      	ldr	r1, [sp, #16]
 8011e24:	4658      	mov	r0, fp
 8011e26:	f001 ffbb 	bl	8013da0 <_Bfree>
 8011e2a:	9908      	ldr	r1, [sp, #32]
 8011e2c:	4658      	mov	r0, fp
 8011e2e:	f001 ffb7 	bl	8013da0 <_Bfree>
 8011e32:	4641      	mov	r1, r8
 8011e34:	4658      	mov	r0, fp
 8011e36:	f001 ffb3 	bl	8013da0 <_Bfree>
 8011e3a:	e5fc      	b.n	8011a36 <_strtod_l+0x7e>
 8011e3c:	9a07      	ldr	r2, [sp, #28]
 8011e3e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8011e42:	4293      	cmp	r3, r2
 8011e44:	dbb6      	blt.n	8011db4 <_strtod_l+0x3fc>
 8011e46:	4d44      	ldr	r5, [pc, #272]	; (8011f58 <_strtod_l+0x5a0>)
 8011e48:	f1c4 040f 	rsb	r4, r4, #15
 8011e4c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011e50:	464a      	mov	r2, r9
 8011e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e56:	4653      	mov	r3, sl
 8011e58:	f7ee fb58 	bl	800050c <__aeabi_dmul>
 8011e5c:	9b07      	ldr	r3, [sp, #28]
 8011e5e:	1b1c      	subs	r4, r3, r4
 8011e60:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011e64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011e68:	e789      	b.n	8011d7e <_strtod_l+0x3c6>
 8011e6a:	f113 0f16 	cmn.w	r3, #22
 8011e6e:	dba1      	blt.n	8011db4 <_strtod_l+0x3fc>
 8011e70:	4a39      	ldr	r2, [pc, #228]	; (8011f58 <_strtod_l+0x5a0>)
 8011e72:	4648      	mov	r0, r9
 8011e74:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8011e78:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011e7c:	4651      	mov	r1, sl
 8011e7e:	f7ee fc6f 	bl	8000760 <__aeabi_ddiv>
 8011e82:	e77e      	b.n	8011d82 <_strtod_l+0x3ca>
 8011e84:	2300      	movs	r3, #0
 8011e86:	4648      	mov	r0, r9
 8011e88:	4651      	mov	r1, sl
 8011e8a:	461d      	mov	r5, r3
 8011e8c:	4e33      	ldr	r6, [pc, #204]	; (8011f5c <_strtod_l+0x5a4>)
 8011e8e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011e92:	f1b8 0f01 	cmp.w	r8, #1
 8011e96:	dc21      	bgt.n	8011edc <_strtod_l+0x524>
 8011e98:	b10b      	cbz	r3, 8011e9e <_strtod_l+0x4e6>
 8011e9a:	4681      	mov	r9, r0
 8011e9c:	468a      	mov	sl, r1
 8011e9e:	4b2f      	ldr	r3, [pc, #188]	; (8011f5c <_strtod_l+0x5a4>)
 8011ea0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8011ea4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011ea8:	464a      	mov	r2, r9
 8011eaa:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011eae:	4653      	mov	r3, sl
 8011eb0:	f7ee fb2c 	bl	800050c <__aeabi_dmul>
 8011eb4:	4b2a      	ldr	r3, [pc, #168]	; (8011f60 <_strtod_l+0x5a8>)
 8011eb6:	460a      	mov	r2, r1
 8011eb8:	400b      	ands	r3, r1
 8011eba:	492a      	ldr	r1, [pc, #168]	; (8011f64 <_strtod_l+0x5ac>)
 8011ebc:	4681      	mov	r9, r0
 8011ebe:	428b      	cmp	r3, r1
 8011ec0:	d894      	bhi.n	8011dec <_strtod_l+0x434>
 8011ec2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011ec6:	428b      	cmp	r3, r1
 8011ec8:	bf86      	itte	hi
 8011eca:	f04f 39ff 	movhi.w	r9, #4294967295
 8011ece:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8011f6c <_strtod_l+0x5b4>
 8011ed2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	9305      	str	r3, [sp, #20]
 8011eda:	e07b      	b.n	8011fd4 <_strtod_l+0x61c>
 8011edc:	f018 0f01 	tst.w	r8, #1
 8011ee0:	d006      	beq.n	8011ef0 <_strtod_l+0x538>
 8011ee2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8011ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eea:	f7ee fb0f 	bl	800050c <__aeabi_dmul>
 8011eee:	2301      	movs	r3, #1
 8011ef0:	3501      	adds	r5, #1
 8011ef2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011ef6:	e7cc      	b.n	8011e92 <_strtod_l+0x4da>
 8011ef8:	d0ed      	beq.n	8011ed6 <_strtod_l+0x51e>
 8011efa:	f1c8 0800 	rsb	r8, r8, #0
 8011efe:	f018 020f 	ands.w	r2, r8, #15
 8011f02:	d00a      	beq.n	8011f1a <_strtod_l+0x562>
 8011f04:	4b14      	ldr	r3, [pc, #80]	; (8011f58 <_strtod_l+0x5a0>)
 8011f06:	4648      	mov	r0, r9
 8011f08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f0c:	4651      	mov	r1, sl
 8011f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f12:	f7ee fc25 	bl	8000760 <__aeabi_ddiv>
 8011f16:	4681      	mov	r9, r0
 8011f18:	468a      	mov	sl, r1
 8011f1a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011f1e:	d0da      	beq.n	8011ed6 <_strtod_l+0x51e>
 8011f20:	f1b8 0f1f 	cmp.w	r8, #31
 8011f24:	dd24      	ble.n	8011f70 <_strtod_l+0x5b8>
 8011f26:	f04f 0800 	mov.w	r8, #0
 8011f2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8011f2e:	f8cd 8020 	str.w	r8, [sp, #32]
 8011f32:	f8cd 8018 	str.w	r8, [sp, #24]
 8011f36:	2322      	movs	r3, #34	; 0x22
 8011f38:	f04f 0900 	mov.w	r9, #0
 8011f3c:	f04f 0a00 	mov.w	sl, #0
 8011f40:	f8cb 3000 	str.w	r3, [fp]
 8011f44:	e761      	b.n	8011e0a <_strtod_l+0x452>
 8011f46:	bf00      	nop
 8011f48:	08019de9 	.word	0x08019de9
 8011f4c:	08019c54 	.word	0x08019c54
 8011f50:	08019ad7 	.word	0x08019ad7
 8011f54:	08019b14 	.word	0x08019b14
 8011f58:	08019ce8 	.word	0x08019ce8
 8011f5c:	08019cc0 	.word	0x08019cc0
 8011f60:	7ff00000 	.word	0x7ff00000
 8011f64:	7ca00000 	.word	0x7ca00000
 8011f68:	fff80000 	.word	0xfff80000
 8011f6c:	7fefffff 	.word	0x7fefffff
 8011f70:	f018 0310 	ands.w	r3, r8, #16
 8011f74:	bf18      	it	ne
 8011f76:	236a      	movne	r3, #106	; 0x6a
 8011f78:	4648      	mov	r0, r9
 8011f7a:	9305      	str	r3, [sp, #20]
 8011f7c:	4651      	mov	r1, sl
 8011f7e:	2300      	movs	r3, #0
 8011f80:	4da1      	ldr	r5, [pc, #644]	; (8012208 <_strtod_l+0x850>)
 8011f82:	f1b8 0f00 	cmp.w	r8, #0
 8011f86:	f300 8113 	bgt.w	80121b0 <_strtod_l+0x7f8>
 8011f8a:	b10b      	cbz	r3, 8011f90 <_strtod_l+0x5d8>
 8011f8c:	4681      	mov	r9, r0
 8011f8e:	468a      	mov	sl, r1
 8011f90:	9b05      	ldr	r3, [sp, #20]
 8011f92:	b1bb      	cbz	r3, 8011fc4 <_strtod_l+0x60c>
 8011f94:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8011f98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	4651      	mov	r1, sl
 8011fa0:	dd10      	ble.n	8011fc4 <_strtod_l+0x60c>
 8011fa2:	2b1f      	cmp	r3, #31
 8011fa4:	f340 8110 	ble.w	80121c8 <_strtod_l+0x810>
 8011fa8:	2b34      	cmp	r3, #52	; 0x34
 8011faa:	bfd8      	it	le
 8011fac:	f04f 32ff 	movle.w	r2, #4294967295
 8011fb0:	f04f 0900 	mov.w	r9, #0
 8011fb4:	bfcf      	iteee	gt
 8011fb6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8011fba:	3b20      	suble	r3, #32
 8011fbc:	fa02 f303 	lslle.w	r3, r2, r3
 8011fc0:	ea03 0a01 	andle.w	sl, r3, r1
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	4648      	mov	r0, r9
 8011fca:	4651      	mov	r1, sl
 8011fcc:	f7ee fd06 	bl	80009dc <__aeabi_dcmpeq>
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	d1a8      	bne.n	8011f26 <_strtod_l+0x56e>
 8011fd4:	9b06      	ldr	r3, [sp, #24]
 8011fd6:	9a04      	ldr	r2, [sp, #16]
 8011fd8:	9300      	str	r3, [sp, #0]
 8011fda:	9908      	ldr	r1, [sp, #32]
 8011fdc:	4623      	mov	r3, r4
 8011fde:	4658      	mov	r0, fp
 8011fe0:	f001 ff30 	bl	8013e44 <__s2b>
 8011fe4:	9008      	str	r0, [sp, #32]
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	f43f af00 	beq.w	8011dec <_strtod_l+0x434>
 8011fec:	9a07      	ldr	r2, [sp, #28]
 8011fee:	9b07      	ldr	r3, [sp, #28]
 8011ff0:	2a00      	cmp	r2, #0
 8011ff2:	f1c3 0300 	rsb	r3, r3, #0
 8011ff6:	bfa8      	it	ge
 8011ff8:	2300      	movge	r3, #0
 8011ffa:	f04f 0800 	mov.w	r8, #0
 8011ffe:	930e      	str	r3, [sp, #56]	; 0x38
 8012000:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012004:	9316      	str	r3, [sp, #88]	; 0x58
 8012006:	f8cd 8010 	str.w	r8, [sp, #16]
 801200a:	9b08      	ldr	r3, [sp, #32]
 801200c:	4658      	mov	r0, fp
 801200e:	6859      	ldr	r1, [r3, #4]
 8012010:	f001 fe92 	bl	8013d38 <_Balloc>
 8012014:	9006      	str	r0, [sp, #24]
 8012016:	2800      	cmp	r0, #0
 8012018:	f43f aef0 	beq.w	8011dfc <_strtod_l+0x444>
 801201c:	9b08      	ldr	r3, [sp, #32]
 801201e:	300c      	adds	r0, #12
 8012020:	691a      	ldr	r2, [r3, #16]
 8012022:	f103 010c 	add.w	r1, r3, #12
 8012026:	3202      	adds	r2, #2
 8012028:	0092      	lsls	r2, r2, #2
 801202a:	f7ff f81f 	bl	801106c <memcpy>
 801202e:	ab1e      	add	r3, sp, #120	; 0x78
 8012030:	9301      	str	r3, [sp, #4]
 8012032:	ab1d      	add	r3, sp, #116	; 0x74
 8012034:	9300      	str	r3, [sp, #0]
 8012036:	464a      	mov	r2, r9
 8012038:	4653      	mov	r3, sl
 801203a:	4658      	mov	r0, fp
 801203c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8012040:	f002 f9ba 	bl	80143b8 <__d2b>
 8012044:	901c      	str	r0, [sp, #112]	; 0x70
 8012046:	2800      	cmp	r0, #0
 8012048:	f43f aed8 	beq.w	8011dfc <_strtod_l+0x444>
 801204c:	2101      	movs	r1, #1
 801204e:	4658      	mov	r0, fp
 8012050:	f001 ff84 	bl	8013f5c <__i2b>
 8012054:	9004      	str	r0, [sp, #16]
 8012056:	4603      	mov	r3, r0
 8012058:	2800      	cmp	r0, #0
 801205a:	f43f aecf 	beq.w	8011dfc <_strtod_l+0x444>
 801205e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8012060:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012062:	2d00      	cmp	r5, #0
 8012064:	bfab      	itete	ge
 8012066:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8012068:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801206a:	18ee      	addge	r6, r5, r3
 801206c:	1b5c      	sublt	r4, r3, r5
 801206e:	9b05      	ldr	r3, [sp, #20]
 8012070:	bfa8      	it	ge
 8012072:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8012074:	eba5 0503 	sub.w	r5, r5, r3
 8012078:	4415      	add	r5, r2
 801207a:	4b64      	ldr	r3, [pc, #400]	; (801220c <_strtod_l+0x854>)
 801207c:	f105 35ff 	add.w	r5, r5, #4294967295
 8012080:	bfb8      	it	lt
 8012082:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8012084:	429d      	cmp	r5, r3
 8012086:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801208a:	f280 80af 	bge.w	80121ec <_strtod_l+0x834>
 801208e:	1b5b      	subs	r3, r3, r5
 8012090:	2b1f      	cmp	r3, #31
 8012092:	eba2 0203 	sub.w	r2, r2, r3
 8012096:	f04f 0701 	mov.w	r7, #1
 801209a:	f300 809c 	bgt.w	80121d6 <_strtod_l+0x81e>
 801209e:	2500      	movs	r5, #0
 80120a0:	fa07 f303 	lsl.w	r3, r7, r3
 80120a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80120a6:	18b7      	adds	r7, r6, r2
 80120a8:	9b05      	ldr	r3, [sp, #20]
 80120aa:	42be      	cmp	r6, r7
 80120ac:	4414      	add	r4, r2
 80120ae:	441c      	add	r4, r3
 80120b0:	4633      	mov	r3, r6
 80120b2:	bfa8      	it	ge
 80120b4:	463b      	movge	r3, r7
 80120b6:	42a3      	cmp	r3, r4
 80120b8:	bfa8      	it	ge
 80120ba:	4623      	movge	r3, r4
 80120bc:	2b00      	cmp	r3, #0
 80120be:	bfc2      	ittt	gt
 80120c0:	1aff      	subgt	r7, r7, r3
 80120c2:	1ae4      	subgt	r4, r4, r3
 80120c4:	1af6      	subgt	r6, r6, r3
 80120c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80120c8:	b1bb      	cbz	r3, 80120fa <_strtod_l+0x742>
 80120ca:	461a      	mov	r2, r3
 80120cc:	9904      	ldr	r1, [sp, #16]
 80120ce:	4658      	mov	r0, fp
 80120d0:	f001 ffe2 	bl	8014098 <__pow5mult>
 80120d4:	9004      	str	r0, [sp, #16]
 80120d6:	2800      	cmp	r0, #0
 80120d8:	f43f ae90 	beq.w	8011dfc <_strtod_l+0x444>
 80120dc:	4601      	mov	r1, r0
 80120de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80120e0:	4658      	mov	r0, fp
 80120e2:	f001 ff44 	bl	8013f6e <__multiply>
 80120e6:	9009      	str	r0, [sp, #36]	; 0x24
 80120e8:	2800      	cmp	r0, #0
 80120ea:	f43f ae87 	beq.w	8011dfc <_strtod_l+0x444>
 80120ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 80120f0:	4658      	mov	r0, fp
 80120f2:	f001 fe55 	bl	8013da0 <_Bfree>
 80120f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120f8:	931c      	str	r3, [sp, #112]	; 0x70
 80120fa:	2f00      	cmp	r7, #0
 80120fc:	dc7a      	bgt.n	80121f4 <_strtod_l+0x83c>
 80120fe:	9b07      	ldr	r3, [sp, #28]
 8012100:	2b00      	cmp	r3, #0
 8012102:	dd08      	ble.n	8012116 <_strtod_l+0x75e>
 8012104:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012106:	9906      	ldr	r1, [sp, #24]
 8012108:	4658      	mov	r0, fp
 801210a:	f001 ffc5 	bl	8014098 <__pow5mult>
 801210e:	9006      	str	r0, [sp, #24]
 8012110:	2800      	cmp	r0, #0
 8012112:	f43f ae73 	beq.w	8011dfc <_strtod_l+0x444>
 8012116:	2c00      	cmp	r4, #0
 8012118:	dd08      	ble.n	801212c <_strtod_l+0x774>
 801211a:	4622      	mov	r2, r4
 801211c:	9906      	ldr	r1, [sp, #24]
 801211e:	4658      	mov	r0, fp
 8012120:	f002 f808 	bl	8014134 <__lshift>
 8012124:	9006      	str	r0, [sp, #24]
 8012126:	2800      	cmp	r0, #0
 8012128:	f43f ae68 	beq.w	8011dfc <_strtod_l+0x444>
 801212c:	2e00      	cmp	r6, #0
 801212e:	dd08      	ble.n	8012142 <_strtod_l+0x78a>
 8012130:	4632      	mov	r2, r6
 8012132:	9904      	ldr	r1, [sp, #16]
 8012134:	4658      	mov	r0, fp
 8012136:	f001 fffd 	bl	8014134 <__lshift>
 801213a:	9004      	str	r0, [sp, #16]
 801213c:	2800      	cmp	r0, #0
 801213e:	f43f ae5d 	beq.w	8011dfc <_strtod_l+0x444>
 8012142:	9a06      	ldr	r2, [sp, #24]
 8012144:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012146:	4658      	mov	r0, fp
 8012148:	f002 f862 	bl	8014210 <__mdiff>
 801214c:	4680      	mov	r8, r0
 801214e:	2800      	cmp	r0, #0
 8012150:	f43f ae54 	beq.w	8011dfc <_strtod_l+0x444>
 8012154:	2400      	movs	r4, #0
 8012156:	68c3      	ldr	r3, [r0, #12]
 8012158:	9904      	ldr	r1, [sp, #16]
 801215a:	60c4      	str	r4, [r0, #12]
 801215c:	930c      	str	r3, [sp, #48]	; 0x30
 801215e:	f002 f83d 	bl	80141dc <__mcmp>
 8012162:	42a0      	cmp	r0, r4
 8012164:	da54      	bge.n	8012210 <_strtod_l+0x858>
 8012166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012168:	b9f3      	cbnz	r3, 80121a8 <_strtod_l+0x7f0>
 801216a:	f1b9 0f00 	cmp.w	r9, #0
 801216e:	d11b      	bne.n	80121a8 <_strtod_l+0x7f0>
 8012170:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8012174:	b9c3      	cbnz	r3, 80121a8 <_strtod_l+0x7f0>
 8012176:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 801217a:	0d1b      	lsrs	r3, r3, #20
 801217c:	051b      	lsls	r3, r3, #20
 801217e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012182:	d911      	bls.n	80121a8 <_strtod_l+0x7f0>
 8012184:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012188:	b91b      	cbnz	r3, 8012192 <_strtod_l+0x7da>
 801218a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801218e:	2b01      	cmp	r3, #1
 8012190:	dd0a      	ble.n	80121a8 <_strtod_l+0x7f0>
 8012192:	4641      	mov	r1, r8
 8012194:	2201      	movs	r2, #1
 8012196:	4658      	mov	r0, fp
 8012198:	f001 ffcc 	bl	8014134 <__lshift>
 801219c:	9904      	ldr	r1, [sp, #16]
 801219e:	4680      	mov	r8, r0
 80121a0:	f002 f81c 	bl	80141dc <__mcmp>
 80121a4:	2800      	cmp	r0, #0
 80121a6:	dc68      	bgt.n	801227a <_strtod_l+0x8c2>
 80121a8:	9b05      	ldr	r3, [sp, #20]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d172      	bne.n	8012294 <_strtod_l+0x8dc>
 80121ae:	e630      	b.n	8011e12 <_strtod_l+0x45a>
 80121b0:	f018 0f01 	tst.w	r8, #1
 80121b4:	d004      	beq.n	80121c0 <_strtod_l+0x808>
 80121b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80121ba:	f7ee f9a7 	bl	800050c <__aeabi_dmul>
 80121be:	2301      	movs	r3, #1
 80121c0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80121c4:	3508      	adds	r5, #8
 80121c6:	e6dc      	b.n	8011f82 <_strtod_l+0x5ca>
 80121c8:	f04f 32ff 	mov.w	r2, #4294967295
 80121cc:	fa02 f303 	lsl.w	r3, r2, r3
 80121d0:	ea03 0909 	and.w	r9, r3, r9
 80121d4:	e6f6      	b.n	8011fc4 <_strtod_l+0x60c>
 80121d6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80121da:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80121de:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80121e2:	35e2      	adds	r5, #226	; 0xe2
 80121e4:	fa07 f505 	lsl.w	r5, r7, r5
 80121e8:	970f      	str	r7, [sp, #60]	; 0x3c
 80121ea:	e75c      	b.n	80120a6 <_strtod_l+0x6ee>
 80121ec:	2301      	movs	r3, #1
 80121ee:	2500      	movs	r5, #0
 80121f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80121f2:	e758      	b.n	80120a6 <_strtod_l+0x6ee>
 80121f4:	463a      	mov	r2, r7
 80121f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80121f8:	4658      	mov	r0, fp
 80121fa:	f001 ff9b 	bl	8014134 <__lshift>
 80121fe:	901c      	str	r0, [sp, #112]	; 0x70
 8012200:	2800      	cmp	r0, #0
 8012202:	f47f af7c 	bne.w	80120fe <_strtod_l+0x746>
 8012206:	e5f9      	b.n	8011dfc <_strtod_l+0x444>
 8012208:	08019b28 	.word	0x08019b28
 801220c:	fffffc02 	.word	0xfffffc02
 8012210:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012214:	f040 8089 	bne.w	801232a <_strtod_l+0x972>
 8012218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801221a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 801221e:	b342      	cbz	r2, 8012272 <_strtod_l+0x8ba>
 8012220:	4aaf      	ldr	r2, [pc, #700]	; (80124e0 <_strtod_l+0xb28>)
 8012222:	4293      	cmp	r3, r2
 8012224:	d156      	bne.n	80122d4 <_strtod_l+0x91c>
 8012226:	9b05      	ldr	r3, [sp, #20]
 8012228:	4648      	mov	r0, r9
 801222a:	b1eb      	cbz	r3, 8012268 <_strtod_l+0x8b0>
 801222c:	4653      	mov	r3, sl
 801222e:	4aad      	ldr	r2, [pc, #692]	; (80124e4 <_strtod_l+0xb2c>)
 8012230:	f04f 31ff 	mov.w	r1, #4294967295
 8012234:	401a      	ands	r2, r3
 8012236:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801223a:	d818      	bhi.n	801226e <_strtod_l+0x8b6>
 801223c:	0d12      	lsrs	r2, r2, #20
 801223e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012242:	fa01 f303 	lsl.w	r3, r1, r3
 8012246:	4298      	cmp	r0, r3
 8012248:	d144      	bne.n	80122d4 <_strtod_l+0x91c>
 801224a:	4ba7      	ldr	r3, [pc, #668]	; (80124e8 <_strtod_l+0xb30>)
 801224c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801224e:	429a      	cmp	r2, r3
 8012250:	d102      	bne.n	8012258 <_strtod_l+0x8a0>
 8012252:	3001      	adds	r0, #1
 8012254:	f43f add2 	beq.w	8011dfc <_strtod_l+0x444>
 8012258:	4ba2      	ldr	r3, [pc, #648]	; (80124e4 <_strtod_l+0xb2c>)
 801225a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801225c:	f04f 0900 	mov.w	r9, #0
 8012260:	401a      	ands	r2, r3
 8012262:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8012266:	e79f      	b.n	80121a8 <_strtod_l+0x7f0>
 8012268:	f04f 33ff 	mov.w	r3, #4294967295
 801226c:	e7eb      	b.n	8012246 <_strtod_l+0x88e>
 801226e:	460b      	mov	r3, r1
 8012270:	e7e9      	b.n	8012246 <_strtod_l+0x88e>
 8012272:	bb7b      	cbnz	r3, 80122d4 <_strtod_l+0x91c>
 8012274:	f1b9 0f00 	cmp.w	r9, #0
 8012278:	d12c      	bne.n	80122d4 <_strtod_l+0x91c>
 801227a:	9905      	ldr	r1, [sp, #20]
 801227c:	4653      	mov	r3, sl
 801227e:	4a99      	ldr	r2, [pc, #612]	; (80124e4 <_strtod_l+0xb2c>)
 8012280:	b1f1      	cbz	r1, 80122c0 <_strtod_l+0x908>
 8012282:	ea02 010a 	and.w	r1, r2, sl
 8012286:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801228a:	dc19      	bgt.n	80122c0 <_strtod_l+0x908>
 801228c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012290:	f77f ae51 	ble.w	8011f36 <_strtod_l+0x57e>
 8012294:	2300      	movs	r3, #0
 8012296:	4a95      	ldr	r2, [pc, #596]	; (80124ec <_strtod_l+0xb34>)
 8012298:	4648      	mov	r0, r9
 801229a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801229e:	4651      	mov	r1, sl
 80122a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80122a4:	f7ee f932 	bl	800050c <__aeabi_dmul>
 80122a8:	4681      	mov	r9, r0
 80122aa:	468a      	mov	sl, r1
 80122ac:	2900      	cmp	r1, #0
 80122ae:	f47f adb0 	bne.w	8011e12 <_strtod_l+0x45a>
 80122b2:	2800      	cmp	r0, #0
 80122b4:	f47f adad 	bne.w	8011e12 <_strtod_l+0x45a>
 80122b8:	2322      	movs	r3, #34	; 0x22
 80122ba:	f8cb 3000 	str.w	r3, [fp]
 80122be:	e5a8      	b.n	8011e12 <_strtod_l+0x45a>
 80122c0:	4013      	ands	r3, r2
 80122c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80122c6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80122ca:	f04f 39ff 	mov.w	r9, #4294967295
 80122ce:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80122d2:	e769      	b.n	80121a8 <_strtod_l+0x7f0>
 80122d4:	b19d      	cbz	r5, 80122fe <_strtod_l+0x946>
 80122d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d8:	421d      	tst	r5, r3
 80122da:	f43f af65 	beq.w	80121a8 <_strtod_l+0x7f0>
 80122de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80122e0:	9a05      	ldr	r2, [sp, #20]
 80122e2:	4648      	mov	r0, r9
 80122e4:	4651      	mov	r1, sl
 80122e6:	b173      	cbz	r3, 8012306 <_strtod_l+0x94e>
 80122e8:	f7ff fb42 	bl	8011970 <sulp>
 80122ec:	4602      	mov	r2, r0
 80122ee:	460b      	mov	r3, r1
 80122f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80122f4:	f7ed ff54 	bl	80001a0 <__adddf3>
 80122f8:	4681      	mov	r9, r0
 80122fa:	468a      	mov	sl, r1
 80122fc:	e754      	b.n	80121a8 <_strtod_l+0x7f0>
 80122fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012300:	ea13 0f09 	tst.w	r3, r9
 8012304:	e7e9      	b.n	80122da <_strtod_l+0x922>
 8012306:	f7ff fb33 	bl	8011970 <sulp>
 801230a:	4602      	mov	r2, r0
 801230c:	460b      	mov	r3, r1
 801230e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012312:	f7ed ff43 	bl	800019c <__aeabi_dsub>
 8012316:	2200      	movs	r2, #0
 8012318:	2300      	movs	r3, #0
 801231a:	4681      	mov	r9, r0
 801231c:	468a      	mov	sl, r1
 801231e:	f7ee fb5d 	bl	80009dc <__aeabi_dcmpeq>
 8012322:	2800      	cmp	r0, #0
 8012324:	f47f ae07 	bne.w	8011f36 <_strtod_l+0x57e>
 8012328:	e73e      	b.n	80121a8 <_strtod_l+0x7f0>
 801232a:	9904      	ldr	r1, [sp, #16]
 801232c:	4640      	mov	r0, r8
 801232e:	f002 f892 	bl	8014456 <__ratio>
 8012332:	2200      	movs	r2, #0
 8012334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012338:	4606      	mov	r6, r0
 801233a:	460f      	mov	r7, r1
 801233c:	f7ee fb62 	bl	8000a04 <__aeabi_dcmple>
 8012340:	2800      	cmp	r0, #0
 8012342:	d075      	beq.n	8012430 <_strtod_l+0xa78>
 8012344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012346:	2b00      	cmp	r3, #0
 8012348:	d047      	beq.n	80123da <_strtod_l+0xa22>
 801234a:	2600      	movs	r6, #0
 801234c:	4f68      	ldr	r7, [pc, #416]	; (80124f0 <_strtod_l+0xb38>)
 801234e:	4d68      	ldr	r5, [pc, #416]	; (80124f0 <_strtod_l+0xb38>)
 8012350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012352:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012356:	0d1b      	lsrs	r3, r3, #20
 8012358:	051b      	lsls	r3, r3, #20
 801235a:	930f      	str	r3, [sp, #60]	; 0x3c
 801235c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801235e:	4b65      	ldr	r3, [pc, #404]	; (80124f4 <_strtod_l+0xb3c>)
 8012360:	429a      	cmp	r2, r3
 8012362:	f040 80cf 	bne.w	8012504 <_strtod_l+0xb4c>
 8012366:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801236a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801236e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012370:	4648      	mov	r0, r9
 8012372:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8012376:	4651      	mov	r1, sl
 8012378:	f001 ffa8 	bl	80142cc <__ulp>
 801237c:	4602      	mov	r2, r0
 801237e:	460b      	mov	r3, r1
 8012380:	4630      	mov	r0, r6
 8012382:	4639      	mov	r1, r7
 8012384:	f7ee f8c2 	bl	800050c <__aeabi_dmul>
 8012388:	464a      	mov	r2, r9
 801238a:	4653      	mov	r3, sl
 801238c:	f7ed ff08 	bl	80001a0 <__adddf3>
 8012390:	460b      	mov	r3, r1
 8012392:	4954      	ldr	r1, [pc, #336]	; (80124e4 <_strtod_l+0xb2c>)
 8012394:	4a58      	ldr	r2, [pc, #352]	; (80124f8 <_strtod_l+0xb40>)
 8012396:	4019      	ands	r1, r3
 8012398:	4291      	cmp	r1, r2
 801239a:	4681      	mov	r9, r0
 801239c:	d95e      	bls.n	801245c <_strtod_l+0xaa4>
 801239e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123a0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80123a4:	4293      	cmp	r3, r2
 80123a6:	d103      	bne.n	80123b0 <_strtod_l+0x9f8>
 80123a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123aa:	3301      	adds	r3, #1
 80123ac:	f43f ad26 	beq.w	8011dfc <_strtod_l+0x444>
 80123b0:	f04f 39ff 	mov.w	r9, #4294967295
 80123b4:	f8df a130 	ldr.w	sl, [pc, #304]	; 80124e8 <_strtod_l+0xb30>
 80123b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80123ba:	4658      	mov	r0, fp
 80123bc:	f001 fcf0 	bl	8013da0 <_Bfree>
 80123c0:	9906      	ldr	r1, [sp, #24]
 80123c2:	4658      	mov	r0, fp
 80123c4:	f001 fcec 	bl	8013da0 <_Bfree>
 80123c8:	9904      	ldr	r1, [sp, #16]
 80123ca:	4658      	mov	r0, fp
 80123cc:	f001 fce8 	bl	8013da0 <_Bfree>
 80123d0:	4641      	mov	r1, r8
 80123d2:	4658      	mov	r0, fp
 80123d4:	f001 fce4 	bl	8013da0 <_Bfree>
 80123d8:	e617      	b.n	801200a <_strtod_l+0x652>
 80123da:	f1b9 0f00 	cmp.w	r9, #0
 80123de:	d119      	bne.n	8012414 <_strtod_l+0xa5c>
 80123e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80123e6:	b9e3      	cbnz	r3, 8012422 <_strtod_l+0xa6a>
 80123e8:	2200      	movs	r2, #0
 80123ea:	4b41      	ldr	r3, [pc, #260]	; (80124f0 <_strtod_l+0xb38>)
 80123ec:	4630      	mov	r0, r6
 80123ee:	4639      	mov	r1, r7
 80123f0:	f7ee fafe 	bl	80009f0 <__aeabi_dcmplt>
 80123f4:	b9c8      	cbnz	r0, 801242a <_strtod_l+0xa72>
 80123f6:	2200      	movs	r2, #0
 80123f8:	4b40      	ldr	r3, [pc, #256]	; (80124fc <_strtod_l+0xb44>)
 80123fa:	4630      	mov	r0, r6
 80123fc:	4639      	mov	r1, r7
 80123fe:	f7ee f885 	bl	800050c <__aeabi_dmul>
 8012402:	4604      	mov	r4, r0
 8012404:	460d      	mov	r5, r1
 8012406:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801240a:	9418      	str	r4, [sp, #96]	; 0x60
 801240c:	9319      	str	r3, [sp, #100]	; 0x64
 801240e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8012412:	e79d      	b.n	8012350 <_strtod_l+0x998>
 8012414:	f1b9 0f01 	cmp.w	r9, #1
 8012418:	d103      	bne.n	8012422 <_strtod_l+0xa6a>
 801241a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801241c:	2b00      	cmp	r3, #0
 801241e:	f43f ad8a 	beq.w	8011f36 <_strtod_l+0x57e>
 8012422:	2600      	movs	r6, #0
 8012424:	4f36      	ldr	r7, [pc, #216]	; (8012500 <_strtod_l+0xb48>)
 8012426:	2400      	movs	r4, #0
 8012428:	e791      	b.n	801234e <_strtod_l+0x996>
 801242a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801242c:	4d33      	ldr	r5, [pc, #204]	; (80124fc <_strtod_l+0xb44>)
 801242e:	e7ea      	b.n	8012406 <_strtod_l+0xa4e>
 8012430:	4b32      	ldr	r3, [pc, #200]	; (80124fc <_strtod_l+0xb44>)
 8012432:	2200      	movs	r2, #0
 8012434:	4630      	mov	r0, r6
 8012436:	4639      	mov	r1, r7
 8012438:	f7ee f868 	bl	800050c <__aeabi_dmul>
 801243c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801243e:	4604      	mov	r4, r0
 8012440:	460d      	mov	r5, r1
 8012442:	b933      	cbnz	r3, 8012452 <_strtod_l+0xa9a>
 8012444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012448:	9010      	str	r0, [sp, #64]	; 0x40
 801244a:	9311      	str	r3, [sp, #68]	; 0x44
 801244c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012450:	e77e      	b.n	8012350 <_strtod_l+0x998>
 8012452:	4602      	mov	r2, r0
 8012454:	460b      	mov	r3, r1
 8012456:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801245a:	e7f7      	b.n	801244c <_strtod_l+0xa94>
 801245c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8012460:	9b05      	ldr	r3, [sp, #20]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d1a8      	bne.n	80123b8 <_strtod_l+0xa00>
 8012466:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 801246a:	0d1b      	lsrs	r3, r3, #20
 801246c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801246e:	051b      	lsls	r3, r3, #20
 8012470:	429a      	cmp	r2, r3
 8012472:	4656      	mov	r6, sl
 8012474:	d1a0      	bne.n	80123b8 <_strtod_l+0xa00>
 8012476:	4629      	mov	r1, r5
 8012478:	4620      	mov	r0, r4
 801247a:	f7ee faf7 	bl	8000a6c <__aeabi_d2iz>
 801247e:	f7ed ffdb 	bl	8000438 <__aeabi_i2d>
 8012482:	460b      	mov	r3, r1
 8012484:	4602      	mov	r2, r0
 8012486:	4629      	mov	r1, r5
 8012488:	4620      	mov	r0, r4
 801248a:	f7ed fe87 	bl	800019c <__aeabi_dsub>
 801248e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012490:	4604      	mov	r4, r0
 8012492:	460d      	mov	r5, r1
 8012494:	b933      	cbnz	r3, 80124a4 <_strtod_l+0xaec>
 8012496:	f1b9 0f00 	cmp.w	r9, #0
 801249a:	d103      	bne.n	80124a4 <_strtod_l+0xaec>
 801249c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80124a0:	2e00      	cmp	r6, #0
 80124a2:	d06a      	beq.n	801257a <_strtod_l+0xbc2>
 80124a4:	a30a      	add	r3, pc, #40	; (adr r3, 80124d0 <_strtod_l+0xb18>)
 80124a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124aa:	4620      	mov	r0, r4
 80124ac:	4629      	mov	r1, r5
 80124ae:	f7ee fa9f 	bl	80009f0 <__aeabi_dcmplt>
 80124b2:	2800      	cmp	r0, #0
 80124b4:	f47f acad 	bne.w	8011e12 <_strtod_l+0x45a>
 80124b8:	a307      	add	r3, pc, #28	; (adr r3, 80124d8 <_strtod_l+0xb20>)
 80124ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124be:	4620      	mov	r0, r4
 80124c0:	4629      	mov	r1, r5
 80124c2:	f7ee fab3 	bl	8000a2c <__aeabi_dcmpgt>
 80124c6:	2800      	cmp	r0, #0
 80124c8:	f43f af76 	beq.w	80123b8 <_strtod_l+0xa00>
 80124cc:	e4a1      	b.n	8011e12 <_strtod_l+0x45a>
 80124ce:	bf00      	nop
 80124d0:	94a03595 	.word	0x94a03595
 80124d4:	3fdfffff 	.word	0x3fdfffff
 80124d8:	35afe535 	.word	0x35afe535
 80124dc:	3fe00000 	.word	0x3fe00000
 80124e0:	000fffff 	.word	0x000fffff
 80124e4:	7ff00000 	.word	0x7ff00000
 80124e8:	7fefffff 	.word	0x7fefffff
 80124ec:	39500000 	.word	0x39500000
 80124f0:	3ff00000 	.word	0x3ff00000
 80124f4:	7fe00000 	.word	0x7fe00000
 80124f8:	7c9fffff 	.word	0x7c9fffff
 80124fc:	3fe00000 	.word	0x3fe00000
 8012500:	bff00000 	.word	0xbff00000
 8012504:	9b05      	ldr	r3, [sp, #20]
 8012506:	b313      	cbz	r3, 801254e <_strtod_l+0xb96>
 8012508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801250a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801250e:	d81e      	bhi.n	801254e <_strtod_l+0xb96>
 8012510:	a325      	add	r3, pc, #148	; (adr r3, 80125a8 <_strtod_l+0xbf0>)
 8012512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012516:	4620      	mov	r0, r4
 8012518:	4629      	mov	r1, r5
 801251a:	f7ee fa73 	bl	8000a04 <__aeabi_dcmple>
 801251e:	b190      	cbz	r0, 8012546 <_strtod_l+0xb8e>
 8012520:	4629      	mov	r1, r5
 8012522:	4620      	mov	r0, r4
 8012524:	f7ee faca 	bl	8000abc <__aeabi_d2uiz>
 8012528:	2800      	cmp	r0, #0
 801252a:	bf08      	it	eq
 801252c:	2001      	moveq	r0, #1
 801252e:	f7ed ff73 	bl	8000418 <__aeabi_ui2d>
 8012532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012534:	4604      	mov	r4, r0
 8012536:	460d      	mov	r5, r1
 8012538:	b9d3      	cbnz	r3, 8012570 <_strtod_l+0xbb8>
 801253a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801253e:	9012      	str	r0, [sp, #72]	; 0x48
 8012540:	9313      	str	r3, [sp, #76]	; 0x4c
 8012542:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8012546:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012548:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 801254c:	1a9f      	subs	r7, r3, r2
 801254e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012552:	f001 febb 	bl	80142cc <__ulp>
 8012556:	4602      	mov	r2, r0
 8012558:	460b      	mov	r3, r1
 801255a:	4630      	mov	r0, r6
 801255c:	4639      	mov	r1, r7
 801255e:	f7ed ffd5 	bl	800050c <__aeabi_dmul>
 8012562:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012566:	f7ed fe1b 	bl	80001a0 <__adddf3>
 801256a:	4681      	mov	r9, r0
 801256c:	468a      	mov	sl, r1
 801256e:	e777      	b.n	8012460 <_strtod_l+0xaa8>
 8012570:	4602      	mov	r2, r0
 8012572:	460b      	mov	r3, r1
 8012574:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8012578:	e7e3      	b.n	8012542 <_strtod_l+0xb8a>
 801257a:	a30d      	add	r3, pc, #52	; (adr r3, 80125b0 <_strtod_l+0xbf8>)
 801257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012580:	f7ee fa36 	bl	80009f0 <__aeabi_dcmplt>
 8012584:	e79f      	b.n	80124c6 <_strtod_l+0xb0e>
 8012586:	2300      	movs	r3, #0
 8012588:	930d      	str	r3, [sp, #52]	; 0x34
 801258a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801258c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801258e:	6013      	str	r3, [r2, #0]
 8012590:	f7ff ba55 	b.w	8011a3e <_strtod_l+0x86>
 8012594:	2b65      	cmp	r3, #101	; 0x65
 8012596:	f04f 0200 	mov.w	r2, #0
 801259a:	f43f ab42 	beq.w	8011c22 <_strtod_l+0x26a>
 801259e:	2101      	movs	r1, #1
 80125a0:	4614      	mov	r4, r2
 80125a2:	9105      	str	r1, [sp, #20]
 80125a4:	f7ff babf 	b.w	8011b26 <_strtod_l+0x16e>
 80125a8:	ffc00000 	.word	0xffc00000
 80125ac:	41dfffff 	.word	0x41dfffff
 80125b0:	94a03595 	.word	0x94a03595
 80125b4:	3fcfffff 	.word	0x3fcfffff

080125b8 <strtod>:
 80125b8:	4b06      	ldr	r3, [pc, #24]	; (80125d4 <strtod+0x1c>)
 80125ba:	b410      	push	{r4}
 80125bc:	681c      	ldr	r4, [r3, #0]
 80125be:	4a06      	ldr	r2, [pc, #24]	; (80125d8 <strtod+0x20>)
 80125c0:	6a23      	ldr	r3, [r4, #32]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	bf08      	it	eq
 80125c6:	4613      	moveq	r3, r2
 80125c8:	460a      	mov	r2, r1
 80125ca:	4601      	mov	r1, r0
 80125cc:	4620      	mov	r0, r4
 80125ce:	bc10      	pop	{r4}
 80125d0:	f7ff b9f2 	b.w	80119b8 <_strtod_l>
 80125d4:	20000060 	.word	0x20000060
 80125d8:	200000c4 	.word	0x200000c4

080125dc <strtof>:
 80125dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125e0:	4e21      	ldr	r6, [pc, #132]	; (8012668 <strtof+0x8c>)
 80125e2:	4a22      	ldr	r2, [pc, #136]	; (801266c <strtof+0x90>)
 80125e4:	6834      	ldr	r4, [r6, #0]
 80125e6:	6a23      	ldr	r3, [r4, #32]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	bf08      	it	eq
 80125ec:	4613      	moveq	r3, r2
 80125ee:	460a      	mov	r2, r1
 80125f0:	4601      	mov	r1, r0
 80125f2:	4620      	mov	r0, r4
 80125f4:	f7ff f9e0 	bl	80119b8 <_strtod_l>
 80125f8:	4605      	mov	r5, r0
 80125fa:	460c      	mov	r4, r1
 80125fc:	4602      	mov	r2, r0
 80125fe:	460b      	mov	r3, r1
 8012600:	4628      	mov	r0, r5
 8012602:	4621      	mov	r1, r4
 8012604:	f7ee fa1c 	bl	8000a40 <__aeabi_dcmpun>
 8012608:	b120      	cbz	r0, 8012614 <strtof+0x38>
 801260a:	2000      	movs	r0, #0
 801260c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012610:	f002 bade 	b.w	8014bd0 <nanf>
 8012614:	4621      	mov	r1, r4
 8012616:	4628      	mov	r0, r5
 8012618:	f7ee fa70 	bl	8000afc <__aeabi_d2f>
 801261c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8012620:	4607      	mov	r7, r0
 8012622:	4913      	ldr	r1, [pc, #76]	; (8012670 <strtof+0x94>)
 8012624:	4640      	mov	r0, r8
 8012626:	f7ee fd8d 	bl	8001144 <__aeabi_fcmpun>
 801262a:	b9c8      	cbnz	r0, 8012660 <strtof+0x84>
 801262c:	4910      	ldr	r1, [pc, #64]	; (8012670 <strtof+0x94>)
 801262e:	4640      	mov	r0, r8
 8012630:	f7ee fd6a 	bl	8001108 <__aeabi_fcmple>
 8012634:	b9a0      	cbnz	r0, 8012660 <strtof+0x84>
 8012636:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801263a:	f04f 32ff 	mov.w	r2, #4294967295
 801263e:	4b0d      	ldr	r3, [pc, #52]	; (8012674 <strtof+0x98>)
 8012640:	4628      	mov	r0, r5
 8012642:	4621      	mov	r1, r4
 8012644:	f7ee f9fc 	bl	8000a40 <__aeabi_dcmpun>
 8012648:	b938      	cbnz	r0, 801265a <strtof+0x7e>
 801264a:	f04f 32ff 	mov.w	r2, #4294967295
 801264e:	4b09      	ldr	r3, [pc, #36]	; (8012674 <strtof+0x98>)
 8012650:	4628      	mov	r0, r5
 8012652:	4621      	mov	r1, r4
 8012654:	f7ee f9d6 	bl	8000a04 <__aeabi_dcmple>
 8012658:	b110      	cbz	r0, 8012660 <strtof+0x84>
 801265a:	2222      	movs	r2, #34	; 0x22
 801265c:	6833      	ldr	r3, [r6, #0]
 801265e:	601a      	str	r2, [r3, #0]
 8012660:	4638      	mov	r0, r7
 8012662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012666:	bf00      	nop
 8012668:	20000060 	.word	0x20000060
 801266c:	200000c4 	.word	0x200000c4
 8012670:	7f7fffff 	.word	0x7f7fffff
 8012674:	7fefffff 	.word	0x7fefffff

08012678 <__strtok_r>:
 8012678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801267a:	b918      	cbnz	r0, 8012684 <__strtok_r+0xc>
 801267c:	6810      	ldr	r0, [r2, #0]
 801267e:	b908      	cbnz	r0, 8012684 <__strtok_r+0xc>
 8012680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012682:	4620      	mov	r0, r4
 8012684:	4604      	mov	r4, r0
 8012686:	460f      	mov	r7, r1
 8012688:	f814 5b01 	ldrb.w	r5, [r4], #1
 801268c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012690:	b91e      	cbnz	r6, 801269a <__strtok_r+0x22>
 8012692:	b96d      	cbnz	r5, 80126b0 <__strtok_r+0x38>
 8012694:	6015      	str	r5, [r2, #0]
 8012696:	4628      	mov	r0, r5
 8012698:	e7f2      	b.n	8012680 <__strtok_r+0x8>
 801269a:	42b5      	cmp	r5, r6
 801269c:	d1f6      	bne.n	801268c <__strtok_r+0x14>
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d1ef      	bne.n	8012682 <__strtok_r+0xa>
 80126a2:	6014      	str	r4, [r2, #0]
 80126a4:	7003      	strb	r3, [r0, #0]
 80126a6:	e7eb      	b.n	8012680 <__strtok_r+0x8>
 80126a8:	462b      	mov	r3, r5
 80126aa:	e00d      	b.n	80126c8 <__strtok_r+0x50>
 80126ac:	b926      	cbnz	r6, 80126b8 <__strtok_r+0x40>
 80126ae:	461c      	mov	r4, r3
 80126b0:	4623      	mov	r3, r4
 80126b2:	460f      	mov	r7, r1
 80126b4:	f813 5b01 	ldrb.w	r5, [r3], #1
 80126b8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80126bc:	42b5      	cmp	r5, r6
 80126be:	d1f5      	bne.n	80126ac <__strtok_r+0x34>
 80126c0:	2d00      	cmp	r5, #0
 80126c2:	d0f1      	beq.n	80126a8 <__strtok_r+0x30>
 80126c4:	2100      	movs	r1, #0
 80126c6:	7021      	strb	r1, [r4, #0]
 80126c8:	6013      	str	r3, [r2, #0]
 80126ca:	e7d9      	b.n	8012680 <__strtok_r+0x8>

080126cc <strtok_r>:
 80126cc:	2301      	movs	r3, #1
 80126ce:	f7ff bfd3 	b.w	8012678 <__strtok_r>

080126d2 <_strtoul_l.isra.0>:
 80126d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126d6:	4680      	mov	r8, r0
 80126d8:	4689      	mov	r9, r1
 80126da:	4692      	mov	sl, r2
 80126dc:	461e      	mov	r6, r3
 80126de:	460f      	mov	r7, r1
 80126e0:	463d      	mov	r5, r7
 80126e2:	9808      	ldr	r0, [sp, #32]
 80126e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126e8:	f7fe fc9c 	bl	8011024 <__locale_ctype_ptr_l>
 80126ec:	4420      	add	r0, r4
 80126ee:	7843      	ldrb	r3, [r0, #1]
 80126f0:	f013 0308 	ands.w	r3, r3, #8
 80126f4:	d130      	bne.n	8012758 <_strtoul_l.isra.0+0x86>
 80126f6:	2c2d      	cmp	r4, #45	; 0x2d
 80126f8:	d130      	bne.n	801275c <_strtoul_l.isra.0+0x8a>
 80126fa:	2101      	movs	r1, #1
 80126fc:	787c      	ldrb	r4, [r7, #1]
 80126fe:	1cbd      	adds	r5, r7, #2
 8012700:	2e00      	cmp	r6, #0
 8012702:	d05c      	beq.n	80127be <_strtoul_l.isra.0+0xec>
 8012704:	2e10      	cmp	r6, #16
 8012706:	d109      	bne.n	801271c <_strtoul_l.isra.0+0x4a>
 8012708:	2c30      	cmp	r4, #48	; 0x30
 801270a:	d107      	bne.n	801271c <_strtoul_l.isra.0+0x4a>
 801270c:	782b      	ldrb	r3, [r5, #0]
 801270e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012712:	2b58      	cmp	r3, #88	; 0x58
 8012714:	d14e      	bne.n	80127b4 <_strtoul_l.isra.0+0xe2>
 8012716:	2610      	movs	r6, #16
 8012718:	786c      	ldrb	r4, [r5, #1]
 801271a:	3502      	adds	r5, #2
 801271c:	f04f 32ff 	mov.w	r2, #4294967295
 8012720:	fbb2 f2f6 	udiv	r2, r2, r6
 8012724:	2300      	movs	r3, #0
 8012726:	fb06 fc02 	mul.w	ip, r6, r2
 801272a:	4618      	mov	r0, r3
 801272c:	ea6f 0c0c 	mvn.w	ip, ip
 8012730:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012734:	2f09      	cmp	r7, #9
 8012736:	d817      	bhi.n	8012768 <_strtoul_l.isra.0+0x96>
 8012738:	463c      	mov	r4, r7
 801273a:	42a6      	cmp	r6, r4
 801273c:	dd23      	ble.n	8012786 <_strtoul_l.isra.0+0xb4>
 801273e:	2b00      	cmp	r3, #0
 8012740:	db1e      	blt.n	8012780 <_strtoul_l.isra.0+0xae>
 8012742:	4282      	cmp	r2, r0
 8012744:	d31c      	bcc.n	8012780 <_strtoul_l.isra.0+0xae>
 8012746:	d101      	bne.n	801274c <_strtoul_l.isra.0+0x7a>
 8012748:	45a4      	cmp	ip, r4
 801274a:	db19      	blt.n	8012780 <_strtoul_l.isra.0+0xae>
 801274c:	2301      	movs	r3, #1
 801274e:	fb00 4006 	mla	r0, r0, r6, r4
 8012752:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012756:	e7eb      	b.n	8012730 <_strtoul_l.isra.0+0x5e>
 8012758:	462f      	mov	r7, r5
 801275a:	e7c1      	b.n	80126e0 <_strtoul_l.isra.0+0xe>
 801275c:	2c2b      	cmp	r4, #43	; 0x2b
 801275e:	bf04      	itt	eq
 8012760:	1cbd      	addeq	r5, r7, #2
 8012762:	787c      	ldrbeq	r4, [r7, #1]
 8012764:	4619      	mov	r1, r3
 8012766:	e7cb      	b.n	8012700 <_strtoul_l.isra.0+0x2e>
 8012768:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801276c:	2f19      	cmp	r7, #25
 801276e:	d801      	bhi.n	8012774 <_strtoul_l.isra.0+0xa2>
 8012770:	3c37      	subs	r4, #55	; 0x37
 8012772:	e7e2      	b.n	801273a <_strtoul_l.isra.0+0x68>
 8012774:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012778:	2f19      	cmp	r7, #25
 801277a:	d804      	bhi.n	8012786 <_strtoul_l.isra.0+0xb4>
 801277c:	3c57      	subs	r4, #87	; 0x57
 801277e:	e7dc      	b.n	801273a <_strtoul_l.isra.0+0x68>
 8012780:	f04f 33ff 	mov.w	r3, #4294967295
 8012784:	e7e5      	b.n	8012752 <_strtoul_l.isra.0+0x80>
 8012786:	2b00      	cmp	r3, #0
 8012788:	da09      	bge.n	801279e <_strtoul_l.isra.0+0xcc>
 801278a:	2322      	movs	r3, #34	; 0x22
 801278c:	f04f 30ff 	mov.w	r0, #4294967295
 8012790:	f8c8 3000 	str.w	r3, [r8]
 8012794:	f1ba 0f00 	cmp.w	sl, #0
 8012798:	d107      	bne.n	80127aa <_strtoul_l.isra.0+0xd8>
 801279a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801279e:	b101      	cbz	r1, 80127a2 <_strtoul_l.isra.0+0xd0>
 80127a0:	4240      	negs	r0, r0
 80127a2:	f1ba 0f00 	cmp.w	sl, #0
 80127a6:	d0f8      	beq.n	801279a <_strtoul_l.isra.0+0xc8>
 80127a8:	b10b      	cbz	r3, 80127ae <_strtoul_l.isra.0+0xdc>
 80127aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80127ae:	f8ca 9000 	str.w	r9, [sl]
 80127b2:	e7f2      	b.n	801279a <_strtoul_l.isra.0+0xc8>
 80127b4:	2430      	movs	r4, #48	; 0x30
 80127b6:	2e00      	cmp	r6, #0
 80127b8:	d1b0      	bne.n	801271c <_strtoul_l.isra.0+0x4a>
 80127ba:	2608      	movs	r6, #8
 80127bc:	e7ae      	b.n	801271c <_strtoul_l.isra.0+0x4a>
 80127be:	2c30      	cmp	r4, #48	; 0x30
 80127c0:	d0a4      	beq.n	801270c <_strtoul_l.isra.0+0x3a>
 80127c2:	260a      	movs	r6, #10
 80127c4:	e7aa      	b.n	801271c <_strtoul_l.isra.0+0x4a>
	...

080127c8 <strtoul>:
 80127c8:	4b08      	ldr	r3, [pc, #32]	; (80127ec <strtoul+0x24>)
 80127ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127cc:	681c      	ldr	r4, [r3, #0]
 80127ce:	4d08      	ldr	r5, [pc, #32]	; (80127f0 <strtoul+0x28>)
 80127d0:	6a23      	ldr	r3, [r4, #32]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	bf08      	it	eq
 80127d6:	462b      	moveq	r3, r5
 80127d8:	9300      	str	r3, [sp, #0]
 80127da:	4613      	mov	r3, r2
 80127dc:	460a      	mov	r2, r1
 80127de:	4601      	mov	r1, r0
 80127e0:	4620      	mov	r0, r4
 80127e2:	f7ff ff76 	bl	80126d2 <_strtoul_l.isra.0>
 80127e6:	b003      	add	sp, #12
 80127e8:	bd30      	pop	{r4, r5, pc}
 80127ea:	bf00      	nop
 80127ec:	20000060 	.word	0x20000060
 80127f0:	200000c4 	.word	0x200000c4

080127f4 <_vsniprintf_r>:
 80127f4:	b530      	push	{r4, r5, lr}
 80127f6:	1e14      	subs	r4, r2, #0
 80127f8:	4605      	mov	r5, r0
 80127fa:	b09b      	sub	sp, #108	; 0x6c
 80127fc:	4618      	mov	r0, r3
 80127fe:	da05      	bge.n	801280c <_vsniprintf_r+0x18>
 8012800:	238b      	movs	r3, #139	; 0x8b
 8012802:	f04f 30ff 	mov.w	r0, #4294967295
 8012806:	602b      	str	r3, [r5, #0]
 8012808:	b01b      	add	sp, #108	; 0x6c
 801280a:	bd30      	pop	{r4, r5, pc}
 801280c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012810:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012814:	bf0c      	ite	eq
 8012816:	4623      	moveq	r3, r4
 8012818:	f104 33ff 	addne.w	r3, r4, #4294967295
 801281c:	9302      	str	r3, [sp, #8]
 801281e:	9305      	str	r3, [sp, #20]
 8012820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012824:	9100      	str	r1, [sp, #0]
 8012826:	9104      	str	r1, [sp, #16]
 8012828:	f8ad 300e 	strh.w	r3, [sp, #14]
 801282c:	4602      	mov	r2, r0
 801282e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012830:	4669      	mov	r1, sp
 8012832:	4628      	mov	r0, r5
 8012834:	f001 ff86 	bl	8014744 <_svfiprintf_r>
 8012838:	1c43      	adds	r3, r0, #1
 801283a:	bfbc      	itt	lt
 801283c:	238b      	movlt	r3, #139	; 0x8b
 801283e:	602b      	strlt	r3, [r5, #0]
 8012840:	2c00      	cmp	r4, #0
 8012842:	d0e1      	beq.n	8012808 <_vsniprintf_r+0x14>
 8012844:	2200      	movs	r2, #0
 8012846:	9b00      	ldr	r3, [sp, #0]
 8012848:	701a      	strb	r2, [r3, #0]
 801284a:	e7dd      	b.n	8012808 <_vsniprintf_r+0x14>

0801284c <vsniprintf>:
 801284c:	b507      	push	{r0, r1, r2, lr}
 801284e:	9300      	str	r3, [sp, #0]
 8012850:	4613      	mov	r3, r2
 8012852:	460a      	mov	r2, r1
 8012854:	4601      	mov	r1, r0
 8012856:	4803      	ldr	r0, [pc, #12]	; (8012864 <vsniprintf+0x18>)
 8012858:	6800      	ldr	r0, [r0, #0]
 801285a:	f7ff ffcb 	bl	80127f4 <_vsniprintf_r>
 801285e:	b003      	add	sp, #12
 8012860:	f85d fb04 	ldr.w	pc, [sp], #4
 8012864:	20000060 	.word	0x20000060

08012868 <__ascii_wctomb>:
 8012868:	b149      	cbz	r1, 801287e <__ascii_wctomb+0x16>
 801286a:	2aff      	cmp	r2, #255	; 0xff
 801286c:	bf8b      	itete	hi
 801286e:	238a      	movhi	r3, #138	; 0x8a
 8012870:	700a      	strbls	r2, [r1, #0]
 8012872:	6003      	strhi	r3, [r0, #0]
 8012874:	2001      	movls	r0, #1
 8012876:	bf88      	it	hi
 8012878:	f04f 30ff 	movhi.w	r0, #4294967295
 801287c:	4770      	bx	lr
 801287e:	4608      	mov	r0, r1
 8012880:	4770      	bx	lr

08012882 <quorem>:
 8012882:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012886:	6903      	ldr	r3, [r0, #16]
 8012888:	690c      	ldr	r4, [r1, #16]
 801288a:	4680      	mov	r8, r0
 801288c:	42a3      	cmp	r3, r4
 801288e:	f2c0 8084 	blt.w	801299a <quorem+0x118>
 8012892:	3c01      	subs	r4, #1
 8012894:	f101 0714 	add.w	r7, r1, #20
 8012898:	f100 0614 	add.w	r6, r0, #20
 801289c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80128a0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80128a4:	3501      	adds	r5, #1
 80128a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80128aa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80128ae:	eb06 030c 	add.w	r3, r6, ip
 80128b2:	eb07 090c 	add.w	r9, r7, ip
 80128b6:	9301      	str	r3, [sp, #4]
 80128b8:	b39d      	cbz	r5, 8012922 <quorem+0xa0>
 80128ba:	f04f 0a00 	mov.w	sl, #0
 80128be:	4638      	mov	r0, r7
 80128c0:	46b6      	mov	lr, r6
 80128c2:	46d3      	mov	fp, sl
 80128c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80128c8:	b293      	uxth	r3, r2
 80128ca:	fb05 a303 	mla	r3, r5, r3, sl
 80128ce:	0c12      	lsrs	r2, r2, #16
 80128d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80128d4:	fb05 a202 	mla	r2, r5, r2, sl
 80128d8:	b29b      	uxth	r3, r3
 80128da:	ebab 0303 	sub.w	r3, fp, r3
 80128de:	f8de b000 	ldr.w	fp, [lr]
 80128e2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80128e6:	fa1f fb8b 	uxth.w	fp, fp
 80128ea:	445b      	add	r3, fp
 80128ec:	fa1f fb82 	uxth.w	fp, r2
 80128f0:	f8de 2000 	ldr.w	r2, [lr]
 80128f4:	4581      	cmp	r9, r0
 80128f6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80128fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80128fe:	b29b      	uxth	r3, r3
 8012900:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012904:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012908:	f84e 3b04 	str.w	r3, [lr], #4
 801290c:	d2da      	bcs.n	80128c4 <quorem+0x42>
 801290e:	f856 300c 	ldr.w	r3, [r6, ip]
 8012912:	b933      	cbnz	r3, 8012922 <quorem+0xa0>
 8012914:	9b01      	ldr	r3, [sp, #4]
 8012916:	3b04      	subs	r3, #4
 8012918:	429e      	cmp	r6, r3
 801291a:	461a      	mov	r2, r3
 801291c:	d331      	bcc.n	8012982 <quorem+0x100>
 801291e:	f8c8 4010 	str.w	r4, [r8, #16]
 8012922:	4640      	mov	r0, r8
 8012924:	f001 fc5a 	bl	80141dc <__mcmp>
 8012928:	2800      	cmp	r0, #0
 801292a:	db26      	blt.n	801297a <quorem+0xf8>
 801292c:	4630      	mov	r0, r6
 801292e:	f04f 0c00 	mov.w	ip, #0
 8012932:	3501      	adds	r5, #1
 8012934:	f857 1b04 	ldr.w	r1, [r7], #4
 8012938:	f8d0 e000 	ldr.w	lr, [r0]
 801293c:	b28b      	uxth	r3, r1
 801293e:	ebac 0303 	sub.w	r3, ip, r3
 8012942:	fa1f f28e 	uxth.w	r2, lr
 8012946:	4413      	add	r3, r2
 8012948:	0c0a      	lsrs	r2, r1, #16
 801294a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801294e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012952:	b29b      	uxth	r3, r3
 8012954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012958:	45b9      	cmp	r9, r7
 801295a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801295e:	f840 3b04 	str.w	r3, [r0], #4
 8012962:	d2e7      	bcs.n	8012934 <quorem+0xb2>
 8012964:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012968:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801296c:	b92a      	cbnz	r2, 801297a <quorem+0xf8>
 801296e:	3b04      	subs	r3, #4
 8012970:	429e      	cmp	r6, r3
 8012972:	461a      	mov	r2, r3
 8012974:	d30b      	bcc.n	801298e <quorem+0x10c>
 8012976:	f8c8 4010 	str.w	r4, [r8, #16]
 801297a:	4628      	mov	r0, r5
 801297c:	b003      	add	sp, #12
 801297e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012982:	6812      	ldr	r2, [r2, #0]
 8012984:	3b04      	subs	r3, #4
 8012986:	2a00      	cmp	r2, #0
 8012988:	d1c9      	bne.n	801291e <quorem+0x9c>
 801298a:	3c01      	subs	r4, #1
 801298c:	e7c4      	b.n	8012918 <quorem+0x96>
 801298e:	6812      	ldr	r2, [r2, #0]
 8012990:	3b04      	subs	r3, #4
 8012992:	2a00      	cmp	r2, #0
 8012994:	d1ef      	bne.n	8012976 <quorem+0xf4>
 8012996:	3c01      	subs	r4, #1
 8012998:	e7ea      	b.n	8012970 <quorem+0xee>
 801299a:	2000      	movs	r0, #0
 801299c:	e7ee      	b.n	801297c <quorem+0xfa>
	...

080129a0 <_dtoa_r>:
 80129a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a4:	4616      	mov	r6, r2
 80129a6:	461f      	mov	r7, r3
 80129a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80129aa:	b095      	sub	sp, #84	; 0x54
 80129ac:	4604      	mov	r4, r0
 80129ae:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80129b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80129b6:	b93d      	cbnz	r5, 80129c8 <_dtoa_r+0x28>
 80129b8:	2010      	movs	r0, #16
 80129ba:	f001 f9a7 	bl	8013d0c <malloc>
 80129be:	6260      	str	r0, [r4, #36]	; 0x24
 80129c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80129c4:	6005      	str	r5, [r0, #0]
 80129c6:	60c5      	str	r5, [r0, #12]
 80129c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129ca:	6819      	ldr	r1, [r3, #0]
 80129cc:	b151      	cbz	r1, 80129e4 <_dtoa_r+0x44>
 80129ce:	685a      	ldr	r2, [r3, #4]
 80129d0:	2301      	movs	r3, #1
 80129d2:	4093      	lsls	r3, r2
 80129d4:	604a      	str	r2, [r1, #4]
 80129d6:	608b      	str	r3, [r1, #8]
 80129d8:	4620      	mov	r0, r4
 80129da:	f001 f9e1 	bl	8013da0 <_Bfree>
 80129de:	2200      	movs	r2, #0
 80129e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129e2:	601a      	str	r2, [r3, #0]
 80129e4:	1e3b      	subs	r3, r7, #0
 80129e6:	bfaf      	iteee	ge
 80129e8:	2300      	movge	r3, #0
 80129ea:	2201      	movlt	r2, #1
 80129ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80129f0:	9303      	strlt	r3, [sp, #12]
 80129f2:	bfac      	ite	ge
 80129f4:	f8c8 3000 	strge.w	r3, [r8]
 80129f8:	f8c8 2000 	strlt.w	r2, [r8]
 80129fc:	4bae      	ldr	r3, [pc, #696]	; (8012cb8 <_dtoa_r+0x318>)
 80129fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012a02:	ea33 0308 	bics.w	r3, r3, r8
 8012a06:	d11b      	bne.n	8012a40 <_dtoa_r+0xa0>
 8012a08:	f242 730f 	movw	r3, #9999	; 0x270f
 8012a0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012a0e:	6013      	str	r3, [r2, #0]
 8012a10:	9b02      	ldr	r3, [sp, #8]
 8012a12:	b923      	cbnz	r3, 8012a1e <_dtoa_r+0x7e>
 8012a14:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	f000 8545 	beq.w	80134a8 <_dtoa_r+0xb08>
 8012a1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012a20:	b953      	cbnz	r3, 8012a38 <_dtoa_r+0x98>
 8012a22:	4ba6      	ldr	r3, [pc, #664]	; (8012cbc <_dtoa_r+0x31c>)
 8012a24:	e021      	b.n	8012a6a <_dtoa_r+0xca>
 8012a26:	4ba6      	ldr	r3, [pc, #664]	; (8012cc0 <_dtoa_r+0x320>)
 8012a28:	9306      	str	r3, [sp, #24]
 8012a2a:	3308      	adds	r3, #8
 8012a2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012a2e:	6013      	str	r3, [r2, #0]
 8012a30:	9806      	ldr	r0, [sp, #24]
 8012a32:	b015      	add	sp, #84	; 0x54
 8012a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a38:	4ba0      	ldr	r3, [pc, #640]	; (8012cbc <_dtoa_r+0x31c>)
 8012a3a:	9306      	str	r3, [sp, #24]
 8012a3c:	3303      	adds	r3, #3
 8012a3e:	e7f5      	b.n	8012a2c <_dtoa_r+0x8c>
 8012a40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012a44:	2200      	movs	r2, #0
 8012a46:	2300      	movs	r3, #0
 8012a48:	4630      	mov	r0, r6
 8012a4a:	4639      	mov	r1, r7
 8012a4c:	f7ed ffc6 	bl	80009dc <__aeabi_dcmpeq>
 8012a50:	4682      	mov	sl, r0
 8012a52:	b160      	cbz	r0, 8012a6e <_dtoa_r+0xce>
 8012a54:	2301      	movs	r3, #1
 8012a56:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012a58:	6013      	str	r3, [r2, #0]
 8012a5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f000 8520 	beq.w	80134a2 <_dtoa_r+0xb02>
 8012a62:	4b98      	ldr	r3, [pc, #608]	; (8012cc4 <_dtoa_r+0x324>)
 8012a64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012a66:	6013      	str	r3, [r2, #0]
 8012a68:	3b01      	subs	r3, #1
 8012a6a:	9306      	str	r3, [sp, #24]
 8012a6c:	e7e0      	b.n	8012a30 <_dtoa_r+0x90>
 8012a6e:	ab12      	add	r3, sp, #72	; 0x48
 8012a70:	9301      	str	r3, [sp, #4]
 8012a72:	ab13      	add	r3, sp, #76	; 0x4c
 8012a74:	9300      	str	r3, [sp, #0]
 8012a76:	4632      	mov	r2, r6
 8012a78:	463b      	mov	r3, r7
 8012a7a:	4620      	mov	r0, r4
 8012a7c:	f001 fc9c 	bl	80143b8 <__d2b>
 8012a80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012a84:	4683      	mov	fp, r0
 8012a86:	2d00      	cmp	r5, #0
 8012a88:	d07d      	beq.n	8012b86 <_dtoa_r+0x1e6>
 8012a8a:	46b0      	mov	r8, r6
 8012a8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012a90:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8012a94:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8012a98:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012a9c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	4b89      	ldr	r3, [pc, #548]	; (8012cc8 <_dtoa_r+0x328>)
 8012aa4:	4640      	mov	r0, r8
 8012aa6:	4649      	mov	r1, r9
 8012aa8:	f7ed fb78 	bl	800019c <__aeabi_dsub>
 8012aac:	a37c      	add	r3, pc, #496	; (adr r3, 8012ca0 <_dtoa_r+0x300>)
 8012aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab2:	f7ed fd2b 	bl	800050c <__aeabi_dmul>
 8012ab6:	a37c      	add	r3, pc, #496	; (adr r3, 8012ca8 <_dtoa_r+0x308>)
 8012ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012abc:	f7ed fb70 	bl	80001a0 <__adddf3>
 8012ac0:	4606      	mov	r6, r0
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	460f      	mov	r7, r1
 8012ac6:	f7ed fcb7 	bl	8000438 <__aeabi_i2d>
 8012aca:	a379      	add	r3, pc, #484	; (adr r3, 8012cb0 <_dtoa_r+0x310>)
 8012acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad0:	f7ed fd1c 	bl	800050c <__aeabi_dmul>
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	460b      	mov	r3, r1
 8012ad8:	4630      	mov	r0, r6
 8012ada:	4639      	mov	r1, r7
 8012adc:	f7ed fb60 	bl	80001a0 <__adddf3>
 8012ae0:	4606      	mov	r6, r0
 8012ae2:	460f      	mov	r7, r1
 8012ae4:	f7ed ffc2 	bl	8000a6c <__aeabi_d2iz>
 8012ae8:	2200      	movs	r2, #0
 8012aea:	4682      	mov	sl, r0
 8012aec:	2300      	movs	r3, #0
 8012aee:	4630      	mov	r0, r6
 8012af0:	4639      	mov	r1, r7
 8012af2:	f7ed ff7d 	bl	80009f0 <__aeabi_dcmplt>
 8012af6:	b148      	cbz	r0, 8012b0c <_dtoa_r+0x16c>
 8012af8:	4650      	mov	r0, sl
 8012afa:	f7ed fc9d 	bl	8000438 <__aeabi_i2d>
 8012afe:	4632      	mov	r2, r6
 8012b00:	463b      	mov	r3, r7
 8012b02:	f7ed ff6b 	bl	80009dc <__aeabi_dcmpeq>
 8012b06:	b908      	cbnz	r0, 8012b0c <_dtoa_r+0x16c>
 8012b08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b0c:	f1ba 0f16 	cmp.w	sl, #22
 8012b10:	d85a      	bhi.n	8012bc8 <_dtoa_r+0x228>
 8012b12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b16:	496d      	ldr	r1, [pc, #436]	; (8012ccc <_dtoa_r+0x32c>)
 8012b18:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b20:	f7ed ff84 	bl	8000a2c <__aeabi_dcmpgt>
 8012b24:	2800      	cmp	r0, #0
 8012b26:	d051      	beq.n	8012bcc <_dtoa_r+0x22c>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8012b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b32:	1b5d      	subs	r5, r3, r5
 8012b34:	1e6b      	subs	r3, r5, #1
 8012b36:	9307      	str	r3, [sp, #28]
 8012b38:	bf43      	ittte	mi
 8012b3a:	2300      	movmi	r3, #0
 8012b3c:	f1c5 0901 	rsbmi	r9, r5, #1
 8012b40:	9307      	strmi	r3, [sp, #28]
 8012b42:	f04f 0900 	movpl.w	r9, #0
 8012b46:	f1ba 0f00 	cmp.w	sl, #0
 8012b4a:	db41      	blt.n	8012bd0 <_dtoa_r+0x230>
 8012b4c:	9b07      	ldr	r3, [sp, #28]
 8012b4e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8012b52:	4453      	add	r3, sl
 8012b54:	9307      	str	r3, [sp, #28]
 8012b56:	2300      	movs	r3, #0
 8012b58:	9308      	str	r3, [sp, #32]
 8012b5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012b5c:	2b09      	cmp	r3, #9
 8012b5e:	f200 808f 	bhi.w	8012c80 <_dtoa_r+0x2e0>
 8012b62:	2b05      	cmp	r3, #5
 8012b64:	bfc4      	itt	gt
 8012b66:	3b04      	subgt	r3, #4
 8012b68:	931e      	strgt	r3, [sp, #120]	; 0x78
 8012b6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012b6c:	bfc8      	it	gt
 8012b6e:	2500      	movgt	r5, #0
 8012b70:	f1a3 0302 	sub.w	r3, r3, #2
 8012b74:	bfd8      	it	le
 8012b76:	2501      	movle	r5, #1
 8012b78:	2b03      	cmp	r3, #3
 8012b7a:	f200 808d 	bhi.w	8012c98 <_dtoa_r+0x2f8>
 8012b7e:	e8df f003 	tbb	[pc, r3]
 8012b82:	7d7b      	.short	0x7d7b
 8012b84:	6f2f      	.short	0x6f2f
 8012b86:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012b8a:	441d      	add	r5, r3
 8012b8c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012b90:	2820      	cmp	r0, #32
 8012b92:	dd13      	ble.n	8012bbc <_dtoa_r+0x21c>
 8012b94:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012b98:	9b02      	ldr	r3, [sp, #8]
 8012b9a:	fa08 f800 	lsl.w	r8, r8, r0
 8012b9e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012ba2:	fa23 f000 	lsr.w	r0, r3, r0
 8012ba6:	ea48 0000 	orr.w	r0, r8, r0
 8012baa:	f7ed fc35 	bl	8000418 <__aeabi_ui2d>
 8012bae:	2301      	movs	r3, #1
 8012bb0:	4680      	mov	r8, r0
 8012bb2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8012bb6:	3d01      	subs	r5, #1
 8012bb8:	9310      	str	r3, [sp, #64]	; 0x40
 8012bba:	e771      	b.n	8012aa0 <_dtoa_r+0x100>
 8012bbc:	9b02      	ldr	r3, [sp, #8]
 8012bbe:	f1c0 0020 	rsb	r0, r0, #32
 8012bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8012bc6:	e7f0      	b.n	8012baa <_dtoa_r+0x20a>
 8012bc8:	2301      	movs	r3, #1
 8012bca:	e7b0      	b.n	8012b2e <_dtoa_r+0x18e>
 8012bcc:	900d      	str	r0, [sp, #52]	; 0x34
 8012bce:	e7af      	b.n	8012b30 <_dtoa_r+0x190>
 8012bd0:	f1ca 0300 	rsb	r3, sl, #0
 8012bd4:	9308      	str	r3, [sp, #32]
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	eba9 090a 	sub.w	r9, r9, sl
 8012bdc:	930c      	str	r3, [sp, #48]	; 0x30
 8012bde:	e7bc      	b.n	8012b5a <_dtoa_r+0x1ba>
 8012be0:	2301      	movs	r3, #1
 8012be2:	9309      	str	r3, [sp, #36]	; 0x24
 8012be4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	dd74      	ble.n	8012cd4 <_dtoa_r+0x334>
 8012bea:	4698      	mov	r8, r3
 8012bec:	9304      	str	r3, [sp, #16]
 8012bee:	2200      	movs	r2, #0
 8012bf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012bf2:	6072      	str	r2, [r6, #4]
 8012bf4:	2204      	movs	r2, #4
 8012bf6:	f102 0014 	add.w	r0, r2, #20
 8012bfa:	4298      	cmp	r0, r3
 8012bfc:	6871      	ldr	r1, [r6, #4]
 8012bfe:	d96e      	bls.n	8012cde <_dtoa_r+0x33e>
 8012c00:	4620      	mov	r0, r4
 8012c02:	f001 f899 	bl	8013d38 <_Balloc>
 8012c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c08:	6030      	str	r0, [r6, #0]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	f1b8 0f0e 	cmp.w	r8, #14
 8012c10:	9306      	str	r3, [sp, #24]
 8012c12:	f200 80ed 	bhi.w	8012df0 <_dtoa_r+0x450>
 8012c16:	2d00      	cmp	r5, #0
 8012c18:	f000 80ea 	beq.w	8012df0 <_dtoa_r+0x450>
 8012c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c20:	f1ba 0f00 	cmp.w	sl, #0
 8012c24:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012c28:	dd77      	ble.n	8012d1a <_dtoa_r+0x37a>
 8012c2a:	4a28      	ldr	r2, [pc, #160]	; (8012ccc <_dtoa_r+0x32c>)
 8012c2c:	f00a 030f 	and.w	r3, sl, #15
 8012c30:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012c34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012c38:	06f0      	lsls	r0, r6, #27
 8012c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012c42:	d568      	bpl.n	8012d16 <_dtoa_r+0x376>
 8012c44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012c48:	4b21      	ldr	r3, [pc, #132]	; (8012cd0 <_dtoa_r+0x330>)
 8012c4a:	2503      	movs	r5, #3
 8012c4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012c50:	f7ed fd86 	bl	8000760 <__aeabi_ddiv>
 8012c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c58:	f006 060f 	and.w	r6, r6, #15
 8012c5c:	4f1c      	ldr	r7, [pc, #112]	; (8012cd0 <_dtoa_r+0x330>)
 8012c5e:	e04f      	b.n	8012d00 <_dtoa_r+0x360>
 8012c60:	2301      	movs	r3, #1
 8012c62:	9309      	str	r3, [sp, #36]	; 0x24
 8012c64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012c66:	4453      	add	r3, sl
 8012c68:	f103 0801 	add.w	r8, r3, #1
 8012c6c:	9304      	str	r3, [sp, #16]
 8012c6e:	4643      	mov	r3, r8
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	bfb8      	it	lt
 8012c74:	2301      	movlt	r3, #1
 8012c76:	e7ba      	b.n	8012bee <_dtoa_r+0x24e>
 8012c78:	2300      	movs	r3, #0
 8012c7a:	e7b2      	b.n	8012be2 <_dtoa_r+0x242>
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	e7f0      	b.n	8012c62 <_dtoa_r+0x2c2>
 8012c80:	2501      	movs	r5, #1
 8012c82:	2300      	movs	r3, #0
 8012c84:	9509      	str	r5, [sp, #36]	; 0x24
 8012c86:	931e      	str	r3, [sp, #120]	; 0x78
 8012c88:	f04f 33ff 	mov.w	r3, #4294967295
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	9304      	str	r3, [sp, #16]
 8012c90:	4698      	mov	r8, r3
 8012c92:	2312      	movs	r3, #18
 8012c94:	921f      	str	r2, [sp, #124]	; 0x7c
 8012c96:	e7aa      	b.n	8012bee <_dtoa_r+0x24e>
 8012c98:	2301      	movs	r3, #1
 8012c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8012c9c:	e7f4      	b.n	8012c88 <_dtoa_r+0x2e8>
 8012c9e:	bf00      	nop
 8012ca0:	636f4361 	.word	0x636f4361
 8012ca4:	3fd287a7 	.word	0x3fd287a7
 8012ca8:	8b60c8b3 	.word	0x8b60c8b3
 8012cac:	3fc68a28 	.word	0x3fc68a28
 8012cb0:	509f79fb 	.word	0x509f79fb
 8012cb4:	3fd34413 	.word	0x3fd34413
 8012cb8:	7ff00000 	.word	0x7ff00000
 8012cbc:	08019c5a 	.word	0x08019c5a
 8012cc0:	08019c51 	.word	0x08019c51
 8012cc4:	08019adb 	.word	0x08019adb
 8012cc8:	3ff80000 	.word	0x3ff80000
 8012ccc:	08019ce8 	.word	0x08019ce8
 8012cd0:	08019cc0 	.word	0x08019cc0
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	9304      	str	r3, [sp, #16]
 8012cd8:	4698      	mov	r8, r3
 8012cda:	461a      	mov	r2, r3
 8012cdc:	e7da      	b.n	8012c94 <_dtoa_r+0x2f4>
 8012cde:	3101      	adds	r1, #1
 8012ce0:	6071      	str	r1, [r6, #4]
 8012ce2:	0052      	lsls	r2, r2, #1
 8012ce4:	e787      	b.n	8012bf6 <_dtoa_r+0x256>
 8012ce6:	07f1      	lsls	r1, r6, #31
 8012ce8:	d508      	bpl.n	8012cfc <_dtoa_r+0x35c>
 8012cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012cf2:	f7ed fc0b 	bl	800050c <__aeabi_dmul>
 8012cf6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012cfa:	3501      	adds	r5, #1
 8012cfc:	1076      	asrs	r6, r6, #1
 8012cfe:	3708      	adds	r7, #8
 8012d00:	2e00      	cmp	r6, #0
 8012d02:	d1f0      	bne.n	8012ce6 <_dtoa_r+0x346>
 8012d04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d0c:	f7ed fd28 	bl	8000760 <__aeabi_ddiv>
 8012d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d14:	e01b      	b.n	8012d4e <_dtoa_r+0x3ae>
 8012d16:	2502      	movs	r5, #2
 8012d18:	e7a0      	b.n	8012c5c <_dtoa_r+0x2bc>
 8012d1a:	f000 80a4 	beq.w	8012e66 <_dtoa_r+0x4c6>
 8012d1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012d22:	f1ca 0600 	rsb	r6, sl, #0
 8012d26:	4ba0      	ldr	r3, [pc, #640]	; (8012fa8 <_dtoa_r+0x608>)
 8012d28:	f006 020f 	and.w	r2, r6, #15
 8012d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d34:	f7ed fbea 	bl	800050c <__aeabi_dmul>
 8012d38:	2502      	movs	r5, #2
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d40:	4f9a      	ldr	r7, [pc, #616]	; (8012fac <_dtoa_r+0x60c>)
 8012d42:	1136      	asrs	r6, r6, #4
 8012d44:	2e00      	cmp	r6, #0
 8012d46:	f040 8083 	bne.w	8012e50 <_dtoa_r+0x4b0>
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d1e0      	bne.n	8012d10 <_dtoa_r+0x370>
 8012d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	f000 808a 	beq.w	8012e6a <_dtoa_r+0x4ca>
 8012d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d5a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012d5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012d62:	2200      	movs	r2, #0
 8012d64:	4b92      	ldr	r3, [pc, #584]	; (8012fb0 <_dtoa_r+0x610>)
 8012d66:	f7ed fe43 	bl	80009f0 <__aeabi_dcmplt>
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	d07d      	beq.n	8012e6a <_dtoa_r+0x4ca>
 8012d6e:	f1b8 0f00 	cmp.w	r8, #0
 8012d72:	d07a      	beq.n	8012e6a <_dtoa_r+0x4ca>
 8012d74:	9b04      	ldr	r3, [sp, #16]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	dd36      	ble.n	8012de8 <_dtoa_r+0x448>
 8012d7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012d7e:	2200      	movs	r2, #0
 8012d80:	4b8c      	ldr	r3, [pc, #560]	; (8012fb4 <_dtoa_r+0x614>)
 8012d82:	f7ed fbc3 	bl	800050c <__aeabi_dmul>
 8012d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d8a:	9e04      	ldr	r6, [sp, #16]
 8012d8c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8012d90:	3501      	adds	r5, #1
 8012d92:	4628      	mov	r0, r5
 8012d94:	f7ed fb50 	bl	8000438 <__aeabi_i2d>
 8012d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d9c:	f7ed fbb6 	bl	800050c <__aeabi_dmul>
 8012da0:	2200      	movs	r2, #0
 8012da2:	4b85      	ldr	r3, [pc, #532]	; (8012fb8 <_dtoa_r+0x618>)
 8012da4:	f7ed f9fc 	bl	80001a0 <__adddf3>
 8012da8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8012dac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012db0:	950b      	str	r5, [sp, #44]	; 0x2c
 8012db2:	2e00      	cmp	r6, #0
 8012db4:	d15c      	bne.n	8012e70 <_dtoa_r+0x4d0>
 8012db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	4b7f      	ldr	r3, [pc, #508]	; (8012fbc <_dtoa_r+0x61c>)
 8012dbe:	f7ed f9ed 	bl	800019c <__aeabi_dsub>
 8012dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012dc4:	462b      	mov	r3, r5
 8012dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012dca:	f7ed fe2f 	bl	8000a2c <__aeabi_dcmpgt>
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	f040 8281 	bne.w	80132d6 <_dtoa_r+0x936>
 8012dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012dda:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8012dde:	f7ed fe07 	bl	80009f0 <__aeabi_dcmplt>
 8012de2:	2800      	cmp	r0, #0
 8012de4:	f040 8275 	bne.w	80132d2 <_dtoa_r+0x932>
 8012de8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012dec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012df0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	f2c0 814b 	blt.w	801308e <_dtoa_r+0x6ee>
 8012df8:	f1ba 0f0e 	cmp.w	sl, #14
 8012dfc:	f300 8147 	bgt.w	801308e <_dtoa_r+0x6ee>
 8012e00:	4b69      	ldr	r3, [pc, #420]	; (8012fa8 <_dtoa_r+0x608>)
 8012e02:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012e0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	f280 80d7 	bge.w	8012fc4 <_dtoa_r+0x624>
 8012e16:	f1b8 0f00 	cmp.w	r8, #0
 8012e1a:	f300 80d3 	bgt.w	8012fc4 <_dtoa_r+0x624>
 8012e1e:	f040 8257 	bne.w	80132d0 <_dtoa_r+0x930>
 8012e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012e26:	2200      	movs	r2, #0
 8012e28:	4b64      	ldr	r3, [pc, #400]	; (8012fbc <_dtoa_r+0x61c>)
 8012e2a:	f7ed fb6f 	bl	800050c <__aeabi_dmul>
 8012e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e32:	f7ed fdf1 	bl	8000a18 <__aeabi_dcmpge>
 8012e36:	4646      	mov	r6, r8
 8012e38:	4647      	mov	r7, r8
 8012e3a:	2800      	cmp	r0, #0
 8012e3c:	f040 822d 	bne.w	801329a <_dtoa_r+0x8fa>
 8012e40:	9b06      	ldr	r3, [sp, #24]
 8012e42:	9a06      	ldr	r2, [sp, #24]
 8012e44:	1c5d      	adds	r5, r3, #1
 8012e46:	2331      	movs	r3, #49	; 0x31
 8012e48:	f10a 0a01 	add.w	sl, sl, #1
 8012e4c:	7013      	strb	r3, [r2, #0]
 8012e4e:	e228      	b.n	80132a2 <_dtoa_r+0x902>
 8012e50:	07f2      	lsls	r2, r6, #31
 8012e52:	d505      	bpl.n	8012e60 <_dtoa_r+0x4c0>
 8012e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e58:	f7ed fb58 	bl	800050c <__aeabi_dmul>
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	3501      	adds	r5, #1
 8012e60:	1076      	asrs	r6, r6, #1
 8012e62:	3708      	adds	r7, #8
 8012e64:	e76e      	b.n	8012d44 <_dtoa_r+0x3a4>
 8012e66:	2502      	movs	r5, #2
 8012e68:	e771      	b.n	8012d4e <_dtoa_r+0x3ae>
 8012e6a:	4657      	mov	r7, sl
 8012e6c:	4646      	mov	r6, r8
 8012e6e:	e790      	b.n	8012d92 <_dtoa_r+0x3f2>
 8012e70:	4b4d      	ldr	r3, [pc, #308]	; (8012fa8 <_dtoa_r+0x608>)
 8012e72:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012e76:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d048      	beq.n	8012f12 <_dtoa_r+0x572>
 8012e80:	4602      	mov	r2, r0
 8012e82:	460b      	mov	r3, r1
 8012e84:	2000      	movs	r0, #0
 8012e86:	494e      	ldr	r1, [pc, #312]	; (8012fc0 <_dtoa_r+0x620>)
 8012e88:	f7ed fc6a 	bl	8000760 <__aeabi_ddiv>
 8012e8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012e90:	f7ed f984 	bl	800019c <__aeabi_dsub>
 8012e94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012e98:	9d06      	ldr	r5, [sp, #24]
 8012e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e9e:	f7ed fde5 	bl	8000a6c <__aeabi_d2iz>
 8012ea2:	9011      	str	r0, [sp, #68]	; 0x44
 8012ea4:	f7ed fac8 	bl	8000438 <__aeabi_i2d>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	460b      	mov	r3, r1
 8012eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012eb0:	f7ed f974 	bl	800019c <__aeabi_dsub>
 8012eb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012eba:	3330      	adds	r3, #48	; 0x30
 8012ebc:	f805 3b01 	strb.w	r3, [r5], #1
 8012ec0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012ec4:	f7ed fd94 	bl	80009f0 <__aeabi_dcmplt>
 8012ec8:	2800      	cmp	r0, #0
 8012eca:	d163      	bne.n	8012f94 <_dtoa_r+0x5f4>
 8012ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ed0:	2000      	movs	r0, #0
 8012ed2:	4937      	ldr	r1, [pc, #220]	; (8012fb0 <_dtoa_r+0x610>)
 8012ed4:	f7ed f962 	bl	800019c <__aeabi_dsub>
 8012ed8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012edc:	f7ed fd88 	bl	80009f0 <__aeabi_dcmplt>
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	f040 80b5 	bne.w	8013050 <_dtoa_r+0x6b0>
 8012ee6:	9b06      	ldr	r3, [sp, #24]
 8012ee8:	1aeb      	subs	r3, r5, r3
 8012eea:	429e      	cmp	r6, r3
 8012eec:	f77f af7c 	ble.w	8012de8 <_dtoa_r+0x448>
 8012ef0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	4b2f      	ldr	r3, [pc, #188]	; (8012fb4 <_dtoa_r+0x614>)
 8012ef8:	f7ed fb08 	bl	800050c <__aeabi_dmul>
 8012efc:	2200      	movs	r2, #0
 8012efe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f06:	4b2b      	ldr	r3, [pc, #172]	; (8012fb4 <_dtoa_r+0x614>)
 8012f08:	f7ed fb00 	bl	800050c <__aeabi_dmul>
 8012f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f10:	e7c3      	b.n	8012e9a <_dtoa_r+0x4fa>
 8012f12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012f16:	f7ed faf9 	bl	800050c <__aeabi_dmul>
 8012f1a:	9b06      	ldr	r3, [sp, #24]
 8012f1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012f20:	199d      	adds	r5, r3, r6
 8012f22:	461e      	mov	r6, r3
 8012f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f28:	f7ed fda0 	bl	8000a6c <__aeabi_d2iz>
 8012f2c:	9011      	str	r0, [sp, #68]	; 0x44
 8012f2e:	f7ed fa83 	bl	8000438 <__aeabi_i2d>
 8012f32:	4602      	mov	r2, r0
 8012f34:	460b      	mov	r3, r1
 8012f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f3a:	f7ed f92f 	bl	800019c <__aeabi_dsub>
 8012f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f44:	3330      	adds	r3, #48	; 0x30
 8012f46:	f806 3b01 	strb.w	r3, [r6], #1
 8012f4a:	42ae      	cmp	r6, r5
 8012f4c:	f04f 0200 	mov.w	r2, #0
 8012f50:	d124      	bne.n	8012f9c <_dtoa_r+0x5fc>
 8012f52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012f56:	4b1a      	ldr	r3, [pc, #104]	; (8012fc0 <_dtoa_r+0x620>)
 8012f58:	f7ed f922 	bl	80001a0 <__adddf3>
 8012f5c:	4602      	mov	r2, r0
 8012f5e:	460b      	mov	r3, r1
 8012f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f64:	f7ed fd62 	bl	8000a2c <__aeabi_dcmpgt>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	d171      	bne.n	8013050 <_dtoa_r+0x6b0>
 8012f6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012f70:	2000      	movs	r0, #0
 8012f72:	4913      	ldr	r1, [pc, #76]	; (8012fc0 <_dtoa_r+0x620>)
 8012f74:	f7ed f912 	bl	800019c <__aeabi_dsub>
 8012f78:	4602      	mov	r2, r0
 8012f7a:	460b      	mov	r3, r1
 8012f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f80:	f7ed fd36 	bl	80009f0 <__aeabi_dcmplt>
 8012f84:	2800      	cmp	r0, #0
 8012f86:	f43f af2f 	beq.w	8012de8 <_dtoa_r+0x448>
 8012f8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012f8e:	1e6a      	subs	r2, r5, #1
 8012f90:	2b30      	cmp	r3, #48	; 0x30
 8012f92:	d001      	beq.n	8012f98 <_dtoa_r+0x5f8>
 8012f94:	46ba      	mov	sl, r7
 8012f96:	e04a      	b.n	801302e <_dtoa_r+0x68e>
 8012f98:	4615      	mov	r5, r2
 8012f9a:	e7f6      	b.n	8012f8a <_dtoa_r+0x5ea>
 8012f9c:	4b05      	ldr	r3, [pc, #20]	; (8012fb4 <_dtoa_r+0x614>)
 8012f9e:	f7ed fab5 	bl	800050c <__aeabi_dmul>
 8012fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fa6:	e7bd      	b.n	8012f24 <_dtoa_r+0x584>
 8012fa8:	08019ce8 	.word	0x08019ce8
 8012fac:	08019cc0 	.word	0x08019cc0
 8012fb0:	3ff00000 	.word	0x3ff00000
 8012fb4:	40240000 	.word	0x40240000
 8012fb8:	401c0000 	.word	0x401c0000
 8012fbc:	40140000 	.word	0x40140000
 8012fc0:	3fe00000 	.word	0x3fe00000
 8012fc4:	9d06      	ldr	r5, [sp, #24]
 8012fc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fce:	4630      	mov	r0, r6
 8012fd0:	4639      	mov	r1, r7
 8012fd2:	f7ed fbc5 	bl	8000760 <__aeabi_ddiv>
 8012fd6:	f7ed fd49 	bl	8000a6c <__aeabi_d2iz>
 8012fda:	4681      	mov	r9, r0
 8012fdc:	f7ed fa2c 	bl	8000438 <__aeabi_i2d>
 8012fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fe4:	f7ed fa92 	bl	800050c <__aeabi_dmul>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	460b      	mov	r3, r1
 8012fec:	4630      	mov	r0, r6
 8012fee:	4639      	mov	r1, r7
 8012ff0:	f7ed f8d4 	bl	800019c <__aeabi_dsub>
 8012ff4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8012ff8:	f805 6b01 	strb.w	r6, [r5], #1
 8012ffc:	9e06      	ldr	r6, [sp, #24]
 8012ffe:	4602      	mov	r2, r0
 8013000:	1bae      	subs	r6, r5, r6
 8013002:	45b0      	cmp	r8, r6
 8013004:	460b      	mov	r3, r1
 8013006:	d135      	bne.n	8013074 <_dtoa_r+0x6d4>
 8013008:	f7ed f8ca 	bl	80001a0 <__adddf3>
 801300c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013010:	4606      	mov	r6, r0
 8013012:	460f      	mov	r7, r1
 8013014:	f7ed fd0a 	bl	8000a2c <__aeabi_dcmpgt>
 8013018:	b9c8      	cbnz	r0, 801304e <_dtoa_r+0x6ae>
 801301a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801301e:	4630      	mov	r0, r6
 8013020:	4639      	mov	r1, r7
 8013022:	f7ed fcdb 	bl	80009dc <__aeabi_dcmpeq>
 8013026:	b110      	cbz	r0, 801302e <_dtoa_r+0x68e>
 8013028:	f019 0f01 	tst.w	r9, #1
 801302c:	d10f      	bne.n	801304e <_dtoa_r+0x6ae>
 801302e:	4659      	mov	r1, fp
 8013030:	4620      	mov	r0, r4
 8013032:	f000 feb5 	bl	8013da0 <_Bfree>
 8013036:	2300      	movs	r3, #0
 8013038:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801303a:	702b      	strb	r3, [r5, #0]
 801303c:	f10a 0301 	add.w	r3, sl, #1
 8013040:	6013      	str	r3, [r2, #0]
 8013042:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013044:	2b00      	cmp	r3, #0
 8013046:	f43f acf3 	beq.w	8012a30 <_dtoa_r+0x90>
 801304a:	601d      	str	r5, [r3, #0]
 801304c:	e4f0      	b.n	8012a30 <_dtoa_r+0x90>
 801304e:	4657      	mov	r7, sl
 8013050:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013054:	1e6b      	subs	r3, r5, #1
 8013056:	2a39      	cmp	r2, #57	; 0x39
 8013058:	d106      	bne.n	8013068 <_dtoa_r+0x6c8>
 801305a:	9a06      	ldr	r2, [sp, #24]
 801305c:	429a      	cmp	r2, r3
 801305e:	d107      	bne.n	8013070 <_dtoa_r+0x6d0>
 8013060:	2330      	movs	r3, #48	; 0x30
 8013062:	7013      	strb	r3, [r2, #0]
 8013064:	4613      	mov	r3, r2
 8013066:	3701      	adds	r7, #1
 8013068:	781a      	ldrb	r2, [r3, #0]
 801306a:	3201      	adds	r2, #1
 801306c:	701a      	strb	r2, [r3, #0]
 801306e:	e791      	b.n	8012f94 <_dtoa_r+0x5f4>
 8013070:	461d      	mov	r5, r3
 8013072:	e7ed      	b.n	8013050 <_dtoa_r+0x6b0>
 8013074:	2200      	movs	r2, #0
 8013076:	4b99      	ldr	r3, [pc, #612]	; (80132dc <_dtoa_r+0x93c>)
 8013078:	f7ed fa48 	bl	800050c <__aeabi_dmul>
 801307c:	2200      	movs	r2, #0
 801307e:	2300      	movs	r3, #0
 8013080:	4606      	mov	r6, r0
 8013082:	460f      	mov	r7, r1
 8013084:	f7ed fcaa 	bl	80009dc <__aeabi_dcmpeq>
 8013088:	2800      	cmp	r0, #0
 801308a:	d09e      	beq.n	8012fca <_dtoa_r+0x62a>
 801308c:	e7cf      	b.n	801302e <_dtoa_r+0x68e>
 801308e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013090:	2a00      	cmp	r2, #0
 8013092:	f000 8088 	beq.w	80131a6 <_dtoa_r+0x806>
 8013096:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013098:	2a01      	cmp	r2, #1
 801309a:	dc6d      	bgt.n	8013178 <_dtoa_r+0x7d8>
 801309c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801309e:	2a00      	cmp	r2, #0
 80130a0:	d066      	beq.n	8013170 <_dtoa_r+0x7d0>
 80130a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80130a6:	464d      	mov	r5, r9
 80130a8:	9e08      	ldr	r6, [sp, #32]
 80130aa:	9a07      	ldr	r2, [sp, #28]
 80130ac:	2101      	movs	r1, #1
 80130ae:	441a      	add	r2, r3
 80130b0:	4620      	mov	r0, r4
 80130b2:	4499      	add	r9, r3
 80130b4:	9207      	str	r2, [sp, #28]
 80130b6:	f000 ff51 	bl	8013f5c <__i2b>
 80130ba:	4607      	mov	r7, r0
 80130bc:	2d00      	cmp	r5, #0
 80130be:	dd0b      	ble.n	80130d8 <_dtoa_r+0x738>
 80130c0:	9b07      	ldr	r3, [sp, #28]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	dd08      	ble.n	80130d8 <_dtoa_r+0x738>
 80130c6:	42ab      	cmp	r3, r5
 80130c8:	bfa8      	it	ge
 80130ca:	462b      	movge	r3, r5
 80130cc:	9a07      	ldr	r2, [sp, #28]
 80130ce:	eba9 0903 	sub.w	r9, r9, r3
 80130d2:	1aed      	subs	r5, r5, r3
 80130d4:	1ad3      	subs	r3, r2, r3
 80130d6:	9307      	str	r3, [sp, #28]
 80130d8:	9b08      	ldr	r3, [sp, #32]
 80130da:	b1eb      	cbz	r3, 8013118 <_dtoa_r+0x778>
 80130dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d065      	beq.n	80131ae <_dtoa_r+0x80e>
 80130e2:	b18e      	cbz	r6, 8013108 <_dtoa_r+0x768>
 80130e4:	4639      	mov	r1, r7
 80130e6:	4632      	mov	r2, r6
 80130e8:	4620      	mov	r0, r4
 80130ea:	f000 ffd5 	bl	8014098 <__pow5mult>
 80130ee:	465a      	mov	r2, fp
 80130f0:	4601      	mov	r1, r0
 80130f2:	4607      	mov	r7, r0
 80130f4:	4620      	mov	r0, r4
 80130f6:	f000 ff3a 	bl	8013f6e <__multiply>
 80130fa:	4659      	mov	r1, fp
 80130fc:	900a      	str	r0, [sp, #40]	; 0x28
 80130fe:	4620      	mov	r0, r4
 8013100:	f000 fe4e 	bl	8013da0 <_Bfree>
 8013104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013106:	469b      	mov	fp, r3
 8013108:	9b08      	ldr	r3, [sp, #32]
 801310a:	1b9a      	subs	r2, r3, r6
 801310c:	d004      	beq.n	8013118 <_dtoa_r+0x778>
 801310e:	4659      	mov	r1, fp
 8013110:	4620      	mov	r0, r4
 8013112:	f000 ffc1 	bl	8014098 <__pow5mult>
 8013116:	4683      	mov	fp, r0
 8013118:	2101      	movs	r1, #1
 801311a:	4620      	mov	r0, r4
 801311c:	f000 ff1e 	bl	8013f5c <__i2b>
 8013120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013122:	4606      	mov	r6, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	f000 81c6 	beq.w	80134b6 <_dtoa_r+0xb16>
 801312a:	461a      	mov	r2, r3
 801312c:	4601      	mov	r1, r0
 801312e:	4620      	mov	r0, r4
 8013130:	f000 ffb2 	bl	8014098 <__pow5mult>
 8013134:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013136:	4606      	mov	r6, r0
 8013138:	2b01      	cmp	r3, #1
 801313a:	dc3e      	bgt.n	80131ba <_dtoa_r+0x81a>
 801313c:	9b02      	ldr	r3, [sp, #8]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d137      	bne.n	80131b2 <_dtoa_r+0x812>
 8013142:	9b03      	ldr	r3, [sp, #12]
 8013144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013148:	2b00      	cmp	r3, #0
 801314a:	d134      	bne.n	80131b6 <_dtoa_r+0x816>
 801314c:	9b03      	ldr	r3, [sp, #12]
 801314e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013152:	0d1b      	lsrs	r3, r3, #20
 8013154:	051b      	lsls	r3, r3, #20
 8013156:	b12b      	cbz	r3, 8013164 <_dtoa_r+0x7c4>
 8013158:	9b07      	ldr	r3, [sp, #28]
 801315a:	f109 0901 	add.w	r9, r9, #1
 801315e:	3301      	adds	r3, #1
 8013160:	9307      	str	r3, [sp, #28]
 8013162:	2301      	movs	r3, #1
 8013164:	9308      	str	r3, [sp, #32]
 8013166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013168:	2b00      	cmp	r3, #0
 801316a:	d128      	bne.n	80131be <_dtoa_r+0x81e>
 801316c:	2001      	movs	r0, #1
 801316e:	e02e      	b.n	80131ce <_dtoa_r+0x82e>
 8013170:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013172:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013176:	e796      	b.n	80130a6 <_dtoa_r+0x706>
 8013178:	9b08      	ldr	r3, [sp, #32]
 801317a:	f108 36ff 	add.w	r6, r8, #4294967295
 801317e:	42b3      	cmp	r3, r6
 8013180:	bfb7      	itett	lt
 8013182:	9b08      	ldrlt	r3, [sp, #32]
 8013184:	1b9e      	subge	r6, r3, r6
 8013186:	1af2      	sublt	r2, r6, r3
 8013188:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 801318a:	bfbf      	itttt	lt
 801318c:	9608      	strlt	r6, [sp, #32]
 801318e:	189b      	addlt	r3, r3, r2
 8013190:	930c      	strlt	r3, [sp, #48]	; 0x30
 8013192:	2600      	movlt	r6, #0
 8013194:	f1b8 0f00 	cmp.w	r8, #0
 8013198:	bfb9      	ittee	lt
 801319a:	eba9 0508 	sublt.w	r5, r9, r8
 801319e:	2300      	movlt	r3, #0
 80131a0:	464d      	movge	r5, r9
 80131a2:	4643      	movge	r3, r8
 80131a4:	e781      	b.n	80130aa <_dtoa_r+0x70a>
 80131a6:	9e08      	ldr	r6, [sp, #32]
 80131a8:	464d      	mov	r5, r9
 80131aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80131ac:	e786      	b.n	80130bc <_dtoa_r+0x71c>
 80131ae:	9a08      	ldr	r2, [sp, #32]
 80131b0:	e7ad      	b.n	801310e <_dtoa_r+0x76e>
 80131b2:	2300      	movs	r3, #0
 80131b4:	e7d6      	b.n	8013164 <_dtoa_r+0x7c4>
 80131b6:	9b02      	ldr	r3, [sp, #8]
 80131b8:	e7d4      	b.n	8013164 <_dtoa_r+0x7c4>
 80131ba:	2300      	movs	r3, #0
 80131bc:	9308      	str	r3, [sp, #32]
 80131be:	6933      	ldr	r3, [r6, #16]
 80131c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80131c4:	6918      	ldr	r0, [r3, #16]
 80131c6:	f000 fe7b 	bl	8013ec0 <__hi0bits>
 80131ca:	f1c0 0020 	rsb	r0, r0, #32
 80131ce:	9b07      	ldr	r3, [sp, #28]
 80131d0:	4418      	add	r0, r3
 80131d2:	f010 001f 	ands.w	r0, r0, #31
 80131d6:	d047      	beq.n	8013268 <_dtoa_r+0x8c8>
 80131d8:	f1c0 0320 	rsb	r3, r0, #32
 80131dc:	2b04      	cmp	r3, #4
 80131de:	dd3b      	ble.n	8013258 <_dtoa_r+0x8b8>
 80131e0:	9b07      	ldr	r3, [sp, #28]
 80131e2:	f1c0 001c 	rsb	r0, r0, #28
 80131e6:	4481      	add	r9, r0
 80131e8:	4405      	add	r5, r0
 80131ea:	4403      	add	r3, r0
 80131ec:	9307      	str	r3, [sp, #28]
 80131ee:	f1b9 0f00 	cmp.w	r9, #0
 80131f2:	dd05      	ble.n	8013200 <_dtoa_r+0x860>
 80131f4:	4659      	mov	r1, fp
 80131f6:	464a      	mov	r2, r9
 80131f8:	4620      	mov	r0, r4
 80131fa:	f000 ff9b 	bl	8014134 <__lshift>
 80131fe:	4683      	mov	fp, r0
 8013200:	9b07      	ldr	r3, [sp, #28]
 8013202:	2b00      	cmp	r3, #0
 8013204:	dd05      	ble.n	8013212 <_dtoa_r+0x872>
 8013206:	4631      	mov	r1, r6
 8013208:	461a      	mov	r2, r3
 801320a:	4620      	mov	r0, r4
 801320c:	f000 ff92 	bl	8014134 <__lshift>
 8013210:	4606      	mov	r6, r0
 8013212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013214:	b353      	cbz	r3, 801326c <_dtoa_r+0x8cc>
 8013216:	4631      	mov	r1, r6
 8013218:	4658      	mov	r0, fp
 801321a:	f000 ffdf 	bl	80141dc <__mcmp>
 801321e:	2800      	cmp	r0, #0
 8013220:	da24      	bge.n	801326c <_dtoa_r+0x8cc>
 8013222:	2300      	movs	r3, #0
 8013224:	4659      	mov	r1, fp
 8013226:	220a      	movs	r2, #10
 8013228:	4620      	mov	r0, r4
 801322a:	f000 fdd0 	bl	8013dce <__multadd>
 801322e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013234:	4683      	mov	fp, r0
 8013236:	2b00      	cmp	r3, #0
 8013238:	f000 8144 	beq.w	80134c4 <_dtoa_r+0xb24>
 801323c:	2300      	movs	r3, #0
 801323e:	4639      	mov	r1, r7
 8013240:	220a      	movs	r2, #10
 8013242:	4620      	mov	r0, r4
 8013244:	f000 fdc3 	bl	8013dce <__multadd>
 8013248:	9b04      	ldr	r3, [sp, #16]
 801324a:	4607      	mov	r7, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	dc4d      	bgt.n	80132ec <_dtoa_r+0x94c>
 8013250:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013252:	2b02      	cmp	r3, #2
 8013254:	dd4a      	ble.n	80132ec <_dtoa_r+0x94c>
 8013256:	e011      	b.n	801327c <_dtoa_r+0x8dc>
 8013258:	d0c9      	beq.n	80131ee <_dtoa_r+0x84e>
 801325a:	9a07      	ldr	r2, [sp, #28]
 801325c:	331c      	adds	r3, #28
 801325e:	441a      	add	r2, r3
 8013260:	4499      	add	r9, r3
 8013262:	441d      	add	r5, r3
 8013264:	4613      	mov	r3, r2
 8013266:	e7c1      	b.n	80131ec <_dtoa_r+0x84c>
 8013268:	4603      	mov	r3, r0
 801326a:	e7f6      	b.n	801325a <_dtoa_r+0x8ba>
 801326c:	f1b8 0f00 	cmp.w	r8, #0
 8013270:	dc36      	bgt.n	80132e0 <_dtoa_r+0x940>
 8013272:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013274:	2b02      	cmp	r3, #2
 8013276:	dd33      	ble.n	80132e0 <_dtoa_r+0x940>
 8013278:	f8cd 8010 	str.w	r8, [sp, #16]
 801327c:	9b04      	ldr	r3, [sp, #16]
 801327e:	b963      	cbnz	r3, 801329a <_dtoa_r+0x8fa>
 8013280:	4631      	mov	r1, r6
 8013282:	2205      	movs	r2, #5
 8013284:	4620      	mov	r0, r4
 8013286:	f000 fda2 	bl	8013dce <__multadd>
 801328a:	4601      	mov	r1, r0
 801328c:	4606      	mov	r6, r0
 801328e:	4658      	mov	r0, fp
 8013290:	f000 ffa4 	bl	80141dc <__mcmp>
 8013294:	2800      	cmp	r0, #0
 8013296:	f73f add3 	bgt.w	8012e40 <_dtoa_r+0x4a0>
 801329a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801329c:	9d06      	ldr	r5, [sp, #24]
 801329e:	ea6f 0a03 	mvn.w	sl, r3
 80132a2:	f04f 0900 	mov.w	r9, #0
 80132a6:	4631      	mov	r1, r6
 80132a8:	4620      	mov	r0, r4
 80132aa:	f000 fd79 	bl	8013da0 <_Bfree>
 80132ae:	2f00      	cmp	r7, #0
 80132b0:	f43f aebd 	beq.w	801302e <_dtoa_r+0x68e>
 80132b4:	f1b9 0f00 	cmp.w	r9, #0
 80132b8:	d005      	beq.n	80132c6 <_dtoa_r+0x926>
 80132ba:	45b9      	cmp	r9, r7
 80132bc:	d003      	beq.n	80132c6 <_dtoa_r+0x926>
 80132be:	4649      	mov	r1, r9
 80132c0:	4620      	mov	r0, r4
 80132c2:	f000 fd6d 	bl	8013da0 <_Bfree>
 80132c6:	4639      	mov	r1, r7
 80132c8:	4620      	mov	r0, r4
 80132ca:	f000 fd69 	bl	8013da0 <_Bfree>
 80132ce:	e6ae      	b.n	801302e <_dtoa_r+0x68e>
 80132d0:	2600      	movs	r6, #0
 80132d2:	4637      	mov	r7, r6
 80132d4:	e7e1      	b.n	801329a <_dtoa_r+0x8fa>
 80132d6:	46ba      	mov	sl, r7
 80132d8:	4637      	mov	r7, r6
 80132da:	e5b1      	b.n	8012e40 <_dtoa_r+0x4a0>
 80132dc:	40240000 	.word	0x40240000
 80132e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	f000 80f3 	beq.w	80134d2 <_dtoa_r+0xb32>
 80132ec:	2d00      	cmp	r5, #0
 80132ee:	dd05      	ble.n	80132fc <_dtoa_r+0x95c>
 80132f0:	4639      	mov	r1, r7
 80132f2:	462a      	mov	r2, r5
 80132f4:	4620      	mov	r0, r4
 80132f6:	f000 ff1d 	bl	8014134 <__lshift>
 80132fa:	4607      	mov	r7, r0
 80132fc:	9b08      	ldr	r3, [sp, #32]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d04c      	beq.n	801339c <_dtoa_r+0x9fc>
 8013302:	6879      	ldr	r1, [r7, #4]
 8013304:	4620      	mov	r0, r4
 8013306:	f000 fd17 	bl	8013d38 <_Balloc>
 801330a:	4605      	mov	r5, r0
 801330c:	693a      	ldr	r2, [r7, #16]
 801330e:	f107 010c 	add.w	r1, r7, #12
 8013312:	3202      	adds	r2, #2
 8013314:	0092      	lsls	r2, r2, #2
 8013316:	300c      	adds	r0, #12
 8013318:	f7fd fea8 	bl	801106c <memcpy>
 801331c:	2201      	movs	r2, #1
 801331e:	4629      	mov	r1, r5
 8013320:	4620      	mov	r0, r4
 8013322:	f000 ff07 	bl	8014134 <__lshift>
 8013326:	46b9      	mov	r9, r7
 8013328:	4607      	mov	r7, r0
 801332a:	9b06      	ldr	r3, [sp, #24]
 801332c:	9307      	str	r3, [sp, #28]
 801332e:	9b02      	ldr	r3, [sp, #8]
 8013330:	f003 0301 	and.w	r3, r3, #1
 8013334:	9308      	str	r3, [sp, #32]
 8013336:	4631      	mov	r1, r6
 8013338:	4658      	mov	r0, fp
 801333a:	f7ff faa2 	bl	8012882 <quorem>
 801333e:	4649      	mov	r1, r9
 8013340:	4605      	mov	r5, r0
 8013342:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013346:	4658      	mov	r0, fp
 8013348:	f000 ff48 	bl	80141dc <__mcmp>
 801334c:	463a      	mov	r2, r7
 801334e:	9002      	str	r0, [sp, #8]
 8013350:	4631      	mov	r1, r6
 8013352:	4620      	mov	r0, r4
 8013354:	f000 ff5c 	bl	8014210 <__mdiff>
 8013358:	68c3      	ldr	r3, [r0, #12]
 801335a:	4602      	mov	r2, r0
 801335c:	bb03      	cbnz	r3, 80133a0 <_dtoa_r+0xa00>
 801335e:	4601      	mov	r1, r0
 8013360:	9009      	str	r0, [sp, #36]	; 0x24
 8013362:	4658      	mov	r0, fp
 8013364:	f000 ff3a 	bl	80141dc <__mcmp>
 8013368:	4603      	mov	r3, r0
 801336a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801336c:	4611      	mov	r1, r2
 801336e:	4620      	mov	r0, r4
 8013370:	9309      	str	r3, [sp, #36]	; 0x24
 8013372:	f000 fd15 	bl	8013da0 <_Bfree>
 8013376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013378:	b9a3      	cbnz	r3, 80133a4 <_dtoa_r+0xa04>
 801337a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801337c:	b992      	cbnz	r2, 80133a4 <_dtoa_r+0xa04>
 801337e:	9a08      	ldr	r2, [sp, #32]
 8013380:	b982      	cbnz	r2, 80133a4 <_dtoa_r+0xa04>
 8013382:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013386:	d029      	beq.n	80133dc <_dtoa_r+0xa3c>
 8013388:	9b02      	ldr	r3, [sp, #8]
 801338a:	2b00      	cmp	r3, #0
 801338c:	dd01      	ble.n	8013392 <_dtoa_r+0x9f2>
 801338e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013392:	9b07      	ldr	r3, [sp, #28]
 8013394:	1c5d      	adds	r5, r3, #1
 8013396:	f883 8000 	strb.w	r8, [r3]
 801339a:	e784      	b.n	80132a6 <_dtoa_r+0x906>
 801339c:	4638      	mov	r0, r7
 801339e:	e7c2      	b.n	8013326 <_dtoa_r+0x986>
 80133a0:	2301      	movs	r3, #1
 80133a2:	e7e3      	b.n	801336c <_dtoa_r+0x9cc>
 80133a4:	9a02      	ldr	r2, [sp, #8]
 80133a6:	2a00      	cmp	r2, #0
 80133a8:	db04      	blt.n	80133b4 <_dtoa_r+0xa14>
 80133aa:	d123      	bne.n	80133f4 <_dtoa_r+0xa54>
 80133ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80133ae:	bb0a      	cbnz	r2, 80133f4 <_dtoa_r+0xa54>
 80133b0:	9a08      	ldr	r2, [sp, #32]
 80133b2:	b9fa      	cbnz	r2, 80133f4 <_dtoa_r+0xa54>
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	ddec      	ble.n	8013392 <_dtoa_r+0x9f2>
 80133b8:	4659      	mov	r1, fp
 80133ba:	2201      	movs	r2, #1
 80133bc:	4620      	mov	r0, r4
 80133be:	f000 feb9 	bl	8014134 <__lshift>
 80133c2:	4631      	mov	r1, r6
 80133c4:	4683      	mov	fp, r0
 80133c6:	f000 ff09 	bl	80141dc <__mcmp>
 80133ca:	2800      	cmp	r0, #0
 80133cc:	dc03      	bgt.n	80133d6 <_dtoa_r+0xa36>
 80133ce:	d1e0      	bne.n	8013392 <_dtoa_r+0x9f2>
 80133d0:	f018 0f01 	tst.w	r8, #1
 80133d4:	d0dd      	beq.n	8013392 <_dtoa_r+0x9f2>
 80133d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80133da:	d1d8      	bne.n	801338e <_dtoa_r+0x9ee>
 80133dc:	9b07      	ldr	r3, [sp, #28]
 80133de:	9a07      	ldr	r2, [sp, #28]
 80133e0:	1c5d      	adds	r5, r3, #1
 80133e2:	2339      	movs	r3, #57	; 0x39
 80133e4:	7013      	strb	r3, [r2, #0]
 80133e6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80133ea:	1e6a      	subs	r2, r5, #1
 80133ec:	2b39      	cmp	r3, #57	; 0x39
 80133ee:	d04d      	beq.n	801348c <_dtoa_r+0xaec>
 80133f0:	3301      	adds	r3, #1
 80133f2:	e052      	b.n	801349a <_dtoa_r+0xafa>
 80133f4:	9a07      	ldr	r2, [sp, #28]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	f102 0501 	add.w	r5, r2, #1
 80133fc:	dd06      	ble.n	801340c <_dtoa_r+0xa6c>
 80133fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013402:	d0eb      	beq.n	80133dc <_dtoa_r+0xa3c>
 8013404:	f108 0801 	add.w	r8, r8, #1
 8013408:	9b07      	ldr	r3, [sp, #28]
 801340a:	e7c4      	b.n	8013396 <_dtoa_r+0x9f6>
 801340c:	9b06      	ldr	r3, [sp, #24]
 801340e:	9a04      	ldr	r2, [sp, #16]
 8013410:	1aeb      	subs	r3, r5, r3
 8013412:	4293      	cmp	r3, r2
 8013414:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013418:	d021      	beq.n	801345e <_dtoa_r+0xabe>
 801341a:	4659      	mov	r1, fp
 801341c:	2300      	movs	r3, #0
 801341e:	220a      	movs	r2, #10
 8013420:	4620      	mov	r0, r4
 8013422:	f000 fcd4 	bl	8013dce <__multadd>
 8013426:	45b9      	cmp	r9, r7
 8013428:	4683      	mov	fp, r0
 801342a:	f04f 0300 	mov.w	r3, #0
 801342e:	f04f 020a 	mov.w	r2, #10
 8013432:	4649      	mov	r1, r9
 8013434:	4620      	mov	r0, r4
 8013436:	d105      	bne.n	8013444 <_dtoa_r+0xaa4>
 8013438:	f000 fcc9 	bl	8013dce <__multadd>
 801343c:	4681      	mov	r9, r0
 801343e:	4607      	mov	r7, r0
 8013440:	9507      	str	r5, [sp, #28]
 8013442:	e778      	b.n	8013336 <_dtoa_r+0x996>
 8013444:	f000 fcc3 	bl	8013dce <__multadd>
 8013448:	4639      	mov	r1, r7
 801344a:	4681      	mov	r9, r0
 801344c:	2300      	movs	r3, #0
 801344e:	220a      	movs	r2, #10
 8013450:	4620      	mov	r0, r4
 8013452:	f000 fcbc 	bl	8013dce <__multadd>
 8013456:	4607      	mov	r7, r0
 8013458:	e7f2      	b.n	8013440 <_dtoa_r+0xaa0>
 801345a:	f04f 0900 	mov.w	r9, #0
 801345e:	4659      	mov	r1, fp
 8013460:	2201      	movs	r2, #1
 8013462:	4620      	mov	r0, r4
 8013464:	f000 fe66 	bl	8014134 <__lshift>
 8013468:	4631      	mov	r1, r6
 801346a:	4683      	mov	fp, r0
 801346c:	f000 feb6 	bl	80141dc <__mcmp>
 8013470:	2800      	cmp	r0, #0
 8013472:	dcb8      	bgt.n	80133e6 <_dtoa_r+0xa46>
 8013474:	d102      	bne.n	801347c <_dtoa_r+0xadc>
 8013476:	f018 0f01 	tst.w	r8, #1
 801347a:	d1b4      	bne.n	80133e6 <_dtoa_r+0xa46>
 801347c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013480:	1e6a      	subs	r2, r5, #1
 8013482:	2b30      	cmp	r3, #48	; 0x30
 8013484:	f47f af0f 	bne.w	80132a6 <_dtoa_r+0x906>
 8013488:	4615      	mov	r5, r2
 801348a:	e7f7      	b.n	801347c <_dtoa_r+0xadc>
 801348c:	9b06      	ldr	r3, [sp, #24]
 801348e:	4293      	cmp	r3, r2
 8013490:	d105      	bne.n	801349e <_dtoa_r+0xafe>
 8013492:	2331      	movs	r3, #49	; 0x31
 8013494:	9a06      	ldr	r2, [sp, #24]
 8013496:	f10a 0a01 	add.w	sl, sl, #1
 801349a:	7013      	strb	r3, [r2, #0]
 801349c:	e703      	b.n	80132a6 <_dtoa_r+0x906>
 801349e:	4615      	mov	r5, r2
 80134a0:	e7a1      	b.n	80133e6 <_dtoa_r+0xa46>
 80134a2:	4b17      	ldr	r3, [pc, #92]	; (8013500 <_dtoa_r+0xb60>)
 80134a4:	f7ff bae1 	b.w	8012a6a <_dtoa_r+0xca>
 80134a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	f47f aabb 	bne.w	8012a26 <_dtoa_r+0x86>
 80134b0:	4b14      	ldr	r3, [pc, #80]	; (8013504 <_dtoa_r+0xb64>)
 80134b2:	f7ff bada 	b.w	8012a6a <_dtoa_r+0xca>
 80134b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	f77f ae3f 	ble.w	801313c <_dtoa_r+0x79c>
 80134be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134c0:	9308      	str	r3, [sp, #32]
 80134c2:	e653      	b.n	801316c <_dtoa_r+0x7cc>
 80134c4:	9b04      	ldr	r3, [sp, #16]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	dc03      	bgt.n	80134d2 <_dtoa_r+0xb32>
 80134ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80134cc:	2b02      	cmp	r3, #2
 80134ce:	f73f aed5 	bgt.w	801327c <_dtoa_r+0x8dc>
 80134d2:	9d06      	ldr	r5, [sp, #24]
 80134d4:	4631      	mov	r1, r6
 80134d6:	4658      	mov	r0, fp
 80134d8:	f7ff f9d3 	bl	8012882 <quorem>
 80134dc:	9b06      	ldr	r3, [sp, #24]
 80134de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80134e2:	f805 8b01 	strb.w	r8, [r5], #1
 80134e6:	9a04      	ldr	r2, [sp, #16]
 80134e8:	1aeb      	subs	r3, r5, r3
 80134ea:	429a      	cmp	r2, r3
 80134ec:	ddb5      	ble.n	801345a <_dtoa_r+0xaba>
 80134ee:	4659      	mov	r1, fp
 80134f0:	2300      	movs	r3, #0
 80134f2:	220a      	movs	r2, #10
 80134f4:	4620      	mov	r0, r4
 80134f6:	f000 fc6a 	bl	8013dce <__multadd>
 80134fa:	4683      	mov	fp, r0
 80134fc:	e7ea      	b.n	80134d4 <_dtoa_r+0xb34>
 80134fe:	bf00      	nop
 8013500:	08019ada 	.word	0x08019ada
 8013504:	08019c51 	.word	0x08019c51

08013508 <std>:
 8013508:	2300      	movs	r3, #0
 801350a:	b510      	push	{r4, lr}
 801350c:	4604      	mov	r4, r0
 801350e:	e9c0 3300 	strd	r3, r3, [r0]
 8013512:	6083      	str	r3, [r0, #8]
 8013514:	8181      	strh	r1, [r0, #12]
 8013516:	6643      	str	r3, [r0, #100]	; 0x64
 8013518:	81c2      	strh	r2, [r0, #14]
 801351a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801351e:	6183      	str	r3, [r0, #24]
 8013520:	4619      	mov	r1, r3
 8013522:	2208      	movs	r2, #8
 8013524:	305c      	adds	r0, #92	; 0x5c
 8013526:	f7fd fdac 	bl	8011082 <memset>
 801352a:	4b05      	ldr	r3, [pc, #20]	; (8013540 <std+0x38>)
 801352c:	6224      	str	r4, [r4, #32]
 801352e:	6263      	str	r3, [r4, #36]	; 0x24
 8013530:	4b04      	ldr	r3, [pc, #16]	; (8013544 <std+0x3c>)
 8013532:	62a3      	str	r3, [r4, #40]	; 0x28
 8013534:	4b04      	ldr	r3, [pc, #16]	; (8013548 <std+0x40>)
 8013536:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013538:	4b04      	ldr	r3, [pc, #16]	; (801354c <std+0x44>)
 801353a:	6323      	str	r3, [r4, #48]	; 0x30
 801353c:	bd10      	pop	{r4, pc}
 801353e:	bf00      	nop
 8013540:	08014bd9 	.word	0x08014bd9
 8013544:	08014bfb 	.word	0x08014bfb
 8013548:	08014c33 	.word	0x08014c33
 801354c:	08014c57 	.word	0x08014c57

08013550 <_cleanup_r>:
 8013550:	4901      	ldr	r1, [pc, #4]	; (8013558 <_cleanup_r+0x8>)
 8013552:	f000 b885 	b.w	8013660 <_fwalk_reent>
 8013556:	bf00      	nop
 8013558:	08014f55 	.word	0x08014f55

0801355c <__sfmoreglue>:
 801355c:	b570      	push	{r4, r5, r6, lr}
 801355e:	2568      	movs	r5, #104	; 0x68
 8013560:	1e4a      	subs	r2, r1, #1
 8013562:	4355      	muls	r5, r2
 8013564:	460e      	mov	r6, r1
 8013566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801356a:	f001 f837 	bl	80145dc <_malloc_r>
 801356e:	4604      	mov	r4, r0
 8013570:	b140      	cbz	r0, 8013584 <__sfmoreglue+0x28>
 8013572:	2100      	movs	r1, #0
 8013574:	e9c0 1600 	strd	r1, r6, [r0]
 8013578:	300c      	adds	r0, #12
 801357a:	60a0      	str	r0, [r4, #8]
 801357c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013580:	f7fd fd7f 	bl	8011082 <memset>
 8013584:	4620      	mov	r0, r4
 8013586:	bd70      	pop	{r4, r5, r6, pc}

08013588 <__sinit>:
 8013588:	6983      	ldr	r3, [r0, #24]
 801358a:	b510      	push	{r4, lr}
 801358c:	4604      	mov	r4, r0
 801358e:	bb33      	cbnz	r3, 80135de <__sinit+0x56>
 8013590:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013594:	6503      	str	r3, [r0, #80]	; 0x50
 8013596:	4b12      	ldr	r3, [pc, #72]	; (80135e0 <__sinit+0x58>)
 8013598:	4a12      	ldr	r2, [pc, #72]	; (80135e4 <__sinit+0x5c>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	6282      	str	r2, [r0, #40]	; 0x28
 801359e:	4298      	cmp	r0, r3
 80135a0:	bf04      	itt	eq
 80135a2:	2301      	moveq	r3, #1
 80135a4:	6183      	streq	r3, [r0, #24]
 80135a6:	f000 f81f 	bl	80135e8 <__sfp>
 80135aa:	6060      	str	r0, [r4, #4]
 80135ac:	4620      	mov	r0, r4
 80135ae:	f000 f81b 	bl	80135e8 <__sfp>
 80135b2:	60a0      	str	r0, [r4, #8]
 80135b4:	4620      	mov	r0, r4
 80135b6:	f000 f817 	bl	80135e8 <__sfp>
 80135ba:	2200      	movs	r2, #0
 80135bc:	60e0      	str	r0, [r4, #12]
 80135be:	2104      	movs	r1, #4
 80135c0:	6860      	ldr	r0, [r4, #4]
 80135c2:	f7ff ffa1 	bl	8013508 <std>
 80135c6:	2201      	movs	r2, #1
 80135c8:	2109      	movs	r1, #9
 80135ca:	68a0      	ldr	r0, [r4, #8]
 80135cc:	f7ff ff9c 	bl	8013508 <std>
 80135d0:	2202      	movs	r2, #2
 80135d2:	2112      	movs	r1, #18
 80135d4:	68e0      	ldr	r0, [r4, #12]
 80135d6:	f7ff ff97 	bl	8013508 <std>
 80135da:	2301      	movs	r3, #1
 80135dc:	61a3      	str	r3, [r4, #24]
 80135de:	bd10      	pop	{r4, pc}
 80135e0:	08019ac0 	.word	0x08019ac0
 80135e4:	08013551 	.word	0x08013551

080135e8 <__sfp>:
 80135e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ea:	4b1b      	ldr	r3, [pc, #108]	; (8013658 <__sfp+0x70>)
 80135ec:	4607      	mov	r7, r0
 80135ee:	681e      	ldr	r6, [r3, #0]
 80135f0:	69b3      	ldr	r3, [r6, #24]
 80135f2:	b913      	cbnz	r3, 80135fa <__sfp+0x12>
 80135f4:	4630      	mov	r0, r6
 80135f6:	f7ff ffc7 	bl	8013588 <__sinit>
 80135fa:	3648      	adds	r6, #72	; 0x48
 80135fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013600:	3b01      	subs	r3, #1
 8013602:	d503      	bpl.n	801360c <__sfp+0x24>
 8013604:	6833      	ldr	r3, [r6, #0]
 8013606:	b133      	cbz	r3, 8013616 <__sfp+0x2e>
 8013608:	6836      	ldr	r6, [r6, #0]
 801360a:	e7f7      	b.n	80135fc <__sfp+0x14>
 801360c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013610:	b16d      	cbz	r5, 801362e <__sfp+0x46>
 8013612:	3468      	adds	r4, #104	; 0x68
 8013614:	e7f4      	b.n	8013600 <__sfp+0x18>
 8013616:	2104      	movs	r1, #4
 8013618:	4638      	mov	r0, r7
 801361a:	f7ff ff9f 	bl	801355c <__sfmoreglue>
 801361e:	6030      	str	r0, [r6, #0]
 8013620:	2800      	cmp	r0, #0
 8013622:	d1f1      	bne.n	8013608 <__sfp+0x20>
 8013624:	230c      	movs	r3, #12
 8013626:	4604      	mov	r4, r0
 8013628:	603b      	str	r3, [r7, #0]
 801362a:	4620      	mov	r0, r4
 801362c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801362e:	4b0b      	ldr	r3, [pc, #44]	; (801365c <__sfp+0x74>)
 8013630:	6665      	str	r5, [r4, #100]	; 0x64
 8013632:	e9c4 5500 	strd	r5, r5, [r4]
 8013636:	60a5      	str	r5, [r4, #8]
 8013638:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801363c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013640:	2208      	movs	r2, #8
 8013642:	4629      	mov	r1, r5
 8013644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013648:	f7fd fd1b 	bl	8011082 <memset>
 801364c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013654:	e7e9      	b.n	801362a <__sfp+0x42>
 8013656:	bf00      	nop
 8013658:	08019ac0 	.word	0x08019ac0
 801365c:	ffff0001 	.word	0xffff0001

08013660 <_fwalk_reent>:
 8013660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013664:	4680      	mov	r8, r0
 8013666:	4689      	mov	r9, r1
 8013668:	2600      	movs	r6, #0
 801366a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801366e:	b914      	cbnz	r4, 8013676 <_fwalk_reent+0x16>
 8013670:	4630      	mov	r0, r6
 8013672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013676:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801367a:	3f01      	subs	r7, #1
 801367c:	d501      	bpl.n	8013682 <_fwalk_reent+0x22>
 801367e:	6824      	ldr	r4, [r4, #0]
 8013680:	e7f5      	b.n	801366e <_fwalk_reent+0xe>
 8013682:	89ab      	ldrh	r3, [r5, #12]
 8013684:	2b01      	cmp	r3, #1
 8013686:	d907      	bls.n	8013698 <_fwalk_reent+0x38>
 8013688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801368c:	3301      	adds	r3, #1
 801368e:	d003      	beq.n	8013698 <_fwalk_reent+0x38>
 8013690:	4629      	mov	r1, r5
 8013692:	4640      	mov	r0, r8
 8013694:	47c8      	blx	r9
 8013696:	4306      	orrs	r6, r0
 8013698:	3568      	adds	r5, #104	; 0x68
 801369a:	e7ee      	b.n	801367a <_fwalk_reent+0x1a>

0801369c <rshift>:
 801369c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801369e:	6906      	ldr	r6, [r0, #16]
 80136a0:	114b      	asrs	r3, r1, #5
 80136a2:	429e      	cmp	r6, r3
 80136a4:	f100 0414 	add.w	r4, r0, #20
 80136a8:	dd31      	ble.n	801370e <rshift+0x72>
 80136aa:	f011 011f 	ands.w	r1, r1, #31
 80136ae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80136b2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80136b6:	d108      	bne.n	80136ca <rshift+0x2e>
 80136b8:	4621      	mov	r1, r4
 80136ba:	42b2      	cmp	r2, r6
 80136bc:	460b      	mov	r3, r1
 80136be:	d211      	bcs.n	80136e4 <rshift+0x48>
 80136c0:	f852 3b04 	ldr.w	r3, [r2], #4
 80136c4:	f841 3b04 	str.w	r3, [r1], #4
 80136c8:	e7f7      	b.n	80136ba <rshift+0x1e>
 80136ca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80136ce:	4623      	mov	r3, r4
 80136d0:	f1c1 0c20 	rsb	ip, r1, #32
 80136d4:	40cd      	lsrs	r5, r1
 80136d6:	3204      	adds	r2, #4
 80136d8:	42b2      	cmp	r2, r6
 80136da:	4617      	mov	r7, r2
 80136dc:	d30d      	bcc.n	80136fa <rshift+0x5e>
 80136de:	601d      	str	r5, [r3, #0]
 80136e0:	b105      	cbz	r5, 80136e4 <rshift+0x48>
 80136e2:	3304      	adds	r3, #4
 80136e4:	42a3      	cmp	r3, r4
 80136e6:	eba3 0204 	sub.w	r2, r3, r4
 80136ea:	bf08      	it	eq
 80136ec:	2300      	moveq	r3, #0
 80136ee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80136f2:	6102      	str	r2, [r0, #16]
 80136f4:	bf08      	it	eq
 80136f6:	6143      	streq	r3, [r0, #20]
 80136f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136fa:	683f      	ldr	r7, [r7, #0]
 80136fc:	fa07 f70c 	lsl.w	r7, r7, ip
 8013700:	433d      	orrs	r5, r7
 8013702:	f843 5b04 	str.w	r5, [r3], #4
 8013706:	f852 5b04 	ldr.w	r5, [r2], #4
 801370a:	40cd      	lsrs	r5, r1
 801370c:	e7e4      	b.n	80136d8 <rshift+0x3c>
 801370e:	4623      	mov	r3, r4
 8013710:	e7e8      	b.n	80136e4 <rshift+0x48>

08013712 <__hexdig_fun>:
 8013712:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013716:	2b09      	cmp	r3, #9
 8013718:	d802      	bhi.n	8013720 <__hexdig_fun+0xe>
 801371a:	3820      	subs	r0, #32
 801371c:	b2c0      	uxtb	r0, r0
 801371e:	4770      	bx	lr
 8013720:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013724:	2b05      	cmp	r3, #5
 8013726:	d801      	bhi.n	801372c <__hexdig_fun+0x1a>
 8013728:	3847      	subs	r0, #71	; 0x47
 801372a:	e7f7      	b.n	801371c <__hexdig_fun+0xa>
 801372c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013730:	2b05      	cmp	r3, #5
 8013732:	d801      	bhi.n	8013738 <__hexdig_fun+0x26>
 8013734:	3827      	subs	r0, #39	; 0x27
 8013736:	e7f1      	b.n	801371c <__hexdig_fun+0xa>
 8013738:	2000      	movs	r0, #0
 801373a:	4770      	bx	lr

0801373c <__gethex>:
 801373c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013740:	b08b      	sub	sp, #44	; 0x2c
 8013742:	9002      	str	r0, [sp, #8]
 8013744:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013746:	468a      	mov	sl, r1
 8013748:	4690      	mov	r8, r2
 801374a:	9306      	str	r3, [sp, #24]
 801374c:	f000 face 	bl	8013cec <__localeconv_l>
 8013750:	6803      	ldr	r3, [r0, #0]
 8013752:	f04f 0b00 	mov.w	fp, #0
 8013756:	4618      	mov	r0, r3
 8013758:	9303      	str	r3, [sp, #12]
 801375a:	f7ec fd13 	bl	8000184 <strlen>
 801375e:	9b03      	ldr	r3, [sp, #12]
 8013760:	9001      	str	r0, [sp, #4]
 8013762:	4403      	add	r3, r0
 8013764:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013768:	9307      	str	r3, [sp, #28]
 801376a:	f8da 3000 	ldr.w	r3, [sl]
 801376e:	3302      	adds	r3, #2
 8013770:	461f      	mov	r7, r3
 8013772:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013776:	2830      	cmp	r0, #48	; 0x30
 8013778:	d06c      	beq.n	8013854 <__gethex+0x118>
 801377a:	f7ff ffca 	bl	8013712 <__hexdig_fun>
 801377e:	4604      	mov	r4, r0
 8013780:	2800      	cmp	r0, #0
 8013782:	d16a      	bne.n	801385a <__gethex+0x11e>
 8013784:	9a01      	ldr	r2, [sp, #4]
 8013786:	9903      	ldr	r1, [sp, #12]
 8013788:	4638      	mov	r0, r7
 801378a:	f001 fa68 	bl	8014c5e <strncmp>
 801378e:	2800      	cmp	r0, #0
 8013790:	d166      	bne.n	8013860 <__gethex+0x124>
 8013792:	9b01      	ldr	r3, [sp, #4]
 8013794:	5cf8      	ldrb	r0, [r7, r3]
 8013796:	18fe      	adds	r6, r7, r3
 8013798:	f7ff ffbb 	bl	8013712 <__hexdig_fun>
 801379c:	2800      	cmp	r0, #0
 801379e:	d062      	beq.n	8013866 <__gethex+0x12a>
 80137a0:	4633      	mov	r3, r6
 80137a2:	7818      	ldrb	r0, [r3, #0]
 80137a4:	461f      	mov	r7, r3
 80137a6:	2830      	cmp	r0, #48	; 0x30
 80137a8:	f103 0301 	add.w	r3, r3, #1
 80137ac:	d0f9      	beq.n	80137a2 <__gethex+0x66>
 80137ae:	f7ff ffb0 	bl	8013712 <__hexdig_fun>
 80137b2:	fab0 f580 	clz	r5, r0
 80137b6:	4634      	mov	r4, r6
 80137b8:	f04f 0b01 	mov.w	fp, #1
 80137bc:	096d      	lsrs	r5, r5, #5
 80137be:	463a      	mov	r2, r7
 80137c0:	4616      	mov	r6, r2
 80137c2:	7830      	ldrb	r0, [r6, #0]
 80137c4:	3201      	adds	r2, #1
 80137c6:	f7ff ffa4 	bl	8013712 <__hexdig_fun>
 80137ca:	2800      	cmp	r0, #0
 80137cc:	d1f8      	bne.n	80137c0 <__gethex+0x84>
 80137ce:	9a01      	ldr	r2, [sp, #4]
 80137d0:	9903      	ldr	r1, [sp, #12]
 80137d2:	4630      	mov	r0, r6
 80137d4:	f001 fa43 	bl	8014c5e <strncmp>
 80137d8:	b950      	cbnz	r0, 80137f0 <__gethex+0xb4>
 80137da:	b954      	cbnz	r4, 80137f2 <__gethex+0xb6>
 80137dc:	9b01      	ldr	r3, [sp, #4]
 80137de:	18f4      	adds	r4, r6, r3
 80137e0:	4622      	mov	r2, r4
 80137e2:	4616      	mov	r6, r2
 80137e4:	7830      	ldrb	r0, [r6, #0]
 80137e6:	3201      	adds	r2, #1
 80137e8:	f7ff ff93 	bl	8013712 <__hexdig_fun>
 80137ec:	2800      	cmp	r0, #0
 80137ee:	d1f8      	bne.n	80137e2 <__gethex+0xa6>
 80137f0:	b10c      	cbz	r4, 80137f6 <__gethex+0xba>
 80137f2:	1ba4      	subs	r4, r4, r6
 80137f4:	00a4      	lsls	r4, r4, #2
 80137f6:	7833      	ldrb	r3, [r6, #0]
 80137f8:	2b50      	cmp	r3, #80	; 0x50
 80137fa:	d001      	beq.n	8013800 <__gethex+0xc4>
 80137fc:	2b70      	cmp	r3, #112	; 0x70
 80137fe:	d140      	bne.n	8013882 <__gethex+0x146>
 8013800:	7873      	ldrb	r3, [r6, #1]
 8013802:	2b2b      	cmp	r3, #43	; 0x2b
 8013804:	d031      	beq.n	801386a <__gethex+0x12e>
 8013806:	2b2d      	cmp	r3, #45	; 0x2d
 8013808:	d033      	beq.n	8013872 <__gethex+0x136>
 801380a:	f04f 0900 	mov.w	r9, #0
 801380e:	1c71      	adds	r1, r6, #1
 8013810:	7808      	ldrb	r0, [r1, #0]
 8013812:	f7ff ff7e 	bl	8013712 <__hexdig_fun>
 8013816:	1e43      	subs	r3, r0, #1
 8013818:	b2db      	uxtb	r3, r3
 801381a:	2b18      	cmp	r3, #24
 801381c:	d831      	bhi.n	8013882 <__gethex+0x146>
 801381e:	f1a0 0210 	sub.w	r2, r0, #16
 8013822:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013826:	f7ff ff74 	bl	8013712 <__hexdig_fun>
 801382a:	1e43      	subs	r3, r0, #1
 801382c:	b2db      	uxtb	r3, r3
 801382e:	2b18      	cmp	r3, #24
 8013830:	d922      	bls.n	8013878 <__gethex+0x13c>
 8013832:	f1b9 0f00 	cmp.w	r9, #0
 8013836:	d000      	beq.n	801383a <__gethex+0xfe>
 8013838:	4252      	negs	r2, r2
 801383a:	4414      	add	r4, r2
 801383c:	f8ca 1000 	str.w	r1, [sl]
 8013840:	b30d      	cbz	r5, 8013886 <__gethex+0x14a>
 8013842:	f1bb 0f00 	cmp.w	fp, #0
 8013846:	bf0c      	ite	eq
 8013848:	2706      	moveq	r7, #6
 801384a:	2700      	movne	r7, #0
 801384c:	4638      	mov	r0, r7
 801384e:	b00b      	add	sp, #44	; 0x2c
 8013850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013854:	f10b 0b01 	add.w	fp, fp, #1
 8013858:	e78a      	b.n	8013770 <__gethex+0x34>
 801385a:	2500      	movs	r5, #0
 801385c:	462c      	mov	r4, r5
 801385e:	e7ae      	b.n	80137be <__gethex+0x82>
 8013860:	463e      	mov	r6, r7
 8013862:	2501      	movs	r5, #1
 8013864:	e7c7      	b.n	80137f6 <__gethex+0xba>
 8013866:	4604      	mov	r4, r0
 8013868:	e7fb      	b.n	8013862 <__gethex+0x126>
 801386a:	f04f 0900 	mov.w	r9, #0
 801386e:	1cb1      	adds	r1, r6, #2
 8013870:	e7ce      	b.n	8013810 <__gethex+0xd4>
 8013872:	f04f 0901 	mov.w	r9, #1
 8013876:	e7fa      	b.n	801386e <__gethex+0x132>
 8013878:	230a      	movs	r3, #10
 801387a:	fb03 0202 	mla	r2, r3, r2, r0
 801387e:	3a10      	subs	r2, #16
 8013880:	e7cf      	b.n	8013822 <__gethex+0xe6>
 8013882:	4631      	mov	r1, r6
 8013884:	e7da      	b.n	801383c <__gethex+0x100>
 8013886:	4629      	mov	r1, r5
 8013888:	1bf3      	subs	r3, r6, r7
 801388a:	3b01      	subs	r3, #1
 801388c:	2b07      	cmp	r3, #7
 801388e:	dc49      	bgt.n	8013924 <__gethex+0x1e8>
 8013890:	9802      	ldr	r0, [sp, #8]
 8013892:	f000 fa51 	bl	8013d38 <_Balloc>
 8013896:	f04f 0b00 	mov.w	fp, #0
 801389a:	4605      	mov	r5, r0
 801389c:	46da      	mov	sl, fp
 801389e:	9b01      	ldr	r3, [sp, #4]
 80138a0:	f100 0914 	add.w	r9, r0, #20
 80138a4:	f1c3 0301 	rsb	r3, r3, #1
 80138a8:	f8cd 9010 	str.w	r9, [sp, #16]
 80138ac:	9308      	str	r3, [sp, #32]
 80138ae:	42b7      	cmp	r7, r6
 80138b0:	d33b      	bcc.n	801392a <__gethex+0x1ee>
 80138b2:	9804      	ldr	r0, [sp, #16]
 80138b4:	f840 ab04 	str.w	sl, [r0], #4
 80138b8:	eba0 0009 	sub.w	r0, r0, r9
 80138bc:	1080      	asrs	r0, r0, #2
 80138be:	6128      	str	r0, [r5, #16]
 80138c0:	0147      	lsls	r7, r0, #5
 80138c2:	4650      	mov	r0, sl
 80138c4:	f000 fafc 	bl	8013ec0 <__hi0bits>
 80138c8:	f8d8 6000 	ldr.w	r6, [r8]
 80138cc:	1a3f      	subs	r7, r7, r0
 80138ce:	42b7      	cmp	r7, r6
 80138d0:	dd64      	ble.n	801399c <__gethex+0x260>
 80138d2:	1bbf      	subs	r7, r7, r6
 80138d4:	4639      	mov	r1, r7
 80138d6:	4628      	mov	r0, r5
 80138d8:	f000 fe05 	bl	80144e6 <__any_on>
 80138dc:	4682      	mov	sl, r0
 80138de:	b178      	cbz	r0, 8013900 <__gethex+0x1c4>
 80138e0:	f04f 0a01 	mov.w	sl, #1
 80138e4:	1e7b      	subs	r3, r7, #1
 80138e6:	1159      	asrs	r1, r3, #5
 80138e8:	f003 021f 	and.w	r2, r3, #31
 80138ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80138f0:	fa0a f202 	lsl.w	r2, sl, r2
 80138f4:	420a      	tst	r2, r1
 80138f6:	d003      	beq.n	8013900 <__gethex+0x1c4>
 80138f8:	4553      	cmp	r3, sl
 80138fa:	dc46      	bgt.n	801398a <__gethex+0x24e>
 80138fc:	f04f 0a02 	mov.w	sl, #2
 8013900:	4639      	mov	r1, r7
 8013902:	4628      	mov	r0, r5
 8013904:	f7ff feca 	bl	801369c <rshift>
 8013908:	443c      	add	r4, r7
 801390a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801390e:	42a3      	cmp	r3, r4
 8013910:	da52      	bge.n	80139b8 <__gethex+0x27c>
 8013912:	4629      	mov	r1, r5
 8013914:	9802      	ldr	r0, [sp, #8]
 8013916:	f000 fa43 	bl	8013da0 <_Bfree>
 801391a:	2300      	movs	r3, #0
 801391c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801391e:	27a3      	movs	r7, #163	; 0xa3
 8013920:	6013      	str	r3, [r2, #0]
 8013922:	e793      	b.n	801384c <__gethex+0x110>
 8013924:	3101      	adds	r1, #1
 8013926:	105b      	asrs	r3, r3, #1
 8013928:	e7b0      	b.n	801388c <__gethex+0x150>
 801392a:	1e73      	subs	r3, r6, #1
 801392c:	9305      	str	r3, [sp, #20]
 801392e:	9a07      	ldr	r2, [sp, #28]
 8013930:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013934:	4293      	cmp	r3, r2
 8013936:	d018      	beq.n	801396a <__gethex+0x22e>
 8013938:	f1bb 0f20 	cmp.w	fp, #32
 801393c:	d107      	bne.n	801394e <__gethex+0x212>
 801393e:	9b04      	ldr	r3, [sp, #16]
 8013940:	f8c3 a000 	str.w	sl, [r3]
 8013944:	f04f 0a00 	mov.w	sl, #0
 8013948:	46d3      	mov	fp, sl
 801394a:	3304      	adds	r3, #4
 801394c:	9304      	str	r3, [sp, #16]
 801394e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013952:	f7ff fede 	bl	8013712 <__hexdig_fun>
 8013956:	f000 000f 	and.w	r0, r0, #15
 801395a:	fa00 f00b 	lsl.w	r0, r0, fp
 801395e:	ea4a 0a00 	orr.w	sl, sl, r0
 8013962:	f10b 0b04 	add.w	fp, fp, #4
 8013966:	9b05      	ldr	r3, [sp, #20]
 8013968:	e00d      	b.n	8013986 <__gethex+0x24a>
 801396a:	9b05      	ldr	r3, [sp, #20]
 801396c:	9a08      	ldr	r2, [sp, #32]
 801396e:	4413      	add	r3, r2
 8013970:	42bb      	cmp	r3, r7
 8013972:	d3e1      	bcc.n	8013938 <__gethex+0x1fc>
 8013974:	4618      	mov	r0, r3
 8013976:	9a01      	ldr	r2, [sp, #4]
 8013978:	9903      	ldr	r1, [sp, #12]
 801397a:	9309      	str	r3, [sp, #36]	; 0x24
 801397c:	f001 f96f 	bl	8014c5e <strncmp>
 8013980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013982:	2800      	cmp	r0, #0
 8013984:	d1d8      	bne.n	8013938 <__gethex+0x1fc>
 8013986:	461e      	mov	r6, r3
 8013988:	e791      	b.n	80138ae <__gethex+0x172>
 801398a:	1eb9      	subs	r1, r7, #2
 801398c:	4628      	mov	r0, r5
 801398e:	f000 fdaa 	bl	80144e6 <__any_on>
 8013992:	2800      	cmp	r0, #0
 8013994:	d0b2      	beq.n	80138fc <__gethex+0x1c0>
 8013996:	f04f 0a03 	mov.w	sl, #3
 801399a:	e7b1      	b.n	8013900 <__gethex+0x1c4>
 801399c:	da09      	bge.n	80139b2 <__gethex+0x276>
 801399e:	1bf7      	subs	r7, r6, r7
 80139a0:	4629      	mov	r1, r5
 80139a2:	463a      	mov	r2, r7
 80139a4:	9802      	ldr	r0, [sp, #8]
 80139a6:	f000 fbc5 	bl	8014134 <__lshift>
 80139aa:	4605      	mov	r5, r0
 80139ac:	1be4      	subs	r4, r4, r7
 80139ae:	f100 0914 	add.w	r9, r0, #20
 80139b2:	f04f 0a00 	mov.w	sl, #0
 80139b6:	e7a8      	b.n	801390a <__gethex+0x1ce>
 80139b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80139bc:	42a0      	cmp	r0, r4
 80139be:	dd6b      	ble.n	8013a98 <__gethex+0x35c>
 80139c0:	1b04      	subs	r4, r0, r4
 80139c2:	42a6      	cmp	r6, r4
 80139c4:	dc2e      	bgt.n	8013a24 <__gethex+0x2e8>
 80139c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80139ca:	2b02      	cmp	r3, #2
 80139cc:	d022      	beq.n	8013a14 <__gethex+0x2d8>
 80139ce:	2b03      	cmp	r3, #3
 80139d0:	d024      	beq.n	8013a1c <__gethex+0x2e0>
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d115      	bne.n	8013a02 <__gethex+0x2c6>
 80139d6:	42a6      	cmp	r6, r4
 80139d8:	d113      	bne.n	8013a02 <__gethex+0x2c6>
 80139da:	2e01      	cmp	r6, #1
 80139dc:	dc0b      	bgt.n	80139f6 <__gethex+0x2ba>
 80139de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80139e2:	9a06      	ldr	r2, [sp, #24]
 80139e4:	2762      	movs	r7, #98	; 0x62
 80139e6:	6013      	str	r3, [r2, #0]
 80139e8:	2301      	movs	r3, #1
 80139ea:	612b      	str	r3, [r5, #16]
 80139ec:	f8c9 3000 	str.w	r3, [r9]
 80139f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80139f2:	601d      	str	r5, [r3, #0]
 80139f4:	e72a      	b.n	801384c <__gethex+0x110>
 80139f6:	1e71      	subs	r1, r6, #1
 80139f8:	4628      	mov	r0, r5
 80139fa:	f000 fd74 	bl	80144e6 <__any_on>
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d1ed      	bne.n	80139de <__gethex+0x2a2>
 8013a02:	4629      	mov	r1, r5
 8013a04:	9802      	ldr	r0, [sp, #8]
 8013a06:	f000 f9cb 	bl	8013da0 <_Bfree>
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013a0e:	2750      	movs	r7, #80	; 0x50
 8013a10:	6013      	str	r3, [r2, #0]
 8013a12:	e71b      	b.n	801384c <__gethex+0x110>
 8013a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d0e1      	beq.n	80139de <__gethex+0x2a2>
 8013a1a:	e7f2      	b.n	8013a02 <__gethex+0x2c6>
 8013a1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d1dd      	bne.n	80139de <__gethex+0x2a2>
 8013a22:	e7ee      	b.n	8013a02 <__gethex+0x2c6>
 8013a24:	1e67      	subs	r7, r4, #1
 8013a26:	f1ba 0f00 	cmp.w	sl, #0
 8013a2a:	d132      	bne.n	8013a92 <__gethex+0x356>
 8013a2c:	b127      	cbz	r7, 8013a38 <__gethex+0x2fc>
 8013a2e:	4639      	mov	r1, r7
 8013a30:	4628      	mov	r0, r5
 8013a32:	f000 fd58 	bl	80144e6 <__any_on>
 8013a36:	4682      	mov	sl, r0
 8013a38:	2301      	movs	r3, #1
 8013a3a:	117a      	asrs	r2, r7, #5
 8013a3c:	f007 071f 	and.w	r7, r7, #31
 8013a40:	fa03 f707 	lsl.w	r7, r3, r7
 8013a44:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013a48:	4621      	mov	r1, r4
 8013a4a:	421f      	tst	r7, r3
 8013a4c:	f04f 0702 	mov.w	r7, #2
 8013a50:	4628      	mov	r0, r5
 8013a52:	bf18      	it	ne
 8013a54:	f04a 0a02 	orrne.w	sl, sl, #2
 8013a58:	1b36      	subs	r6, r6, r4
 8013a5a:	f7ff fe1f 	bl	801369c <rshift>
 8013a5e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013a62:	f1ba 0f00 	cmp.w	sl, #0
 8013a66:	d048      	beq.n	8013afa <__gethex+0x3be>
 8013a68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013a6c:	2b02      	cmp	r3, #2
 8013a6e:	d015      	beq.n	8013a9c <__gethex+0x360>
 8013a70:	2b03      	cmp	r3, #3
 8013a72:	d017      	beq.n	8013aa4 <__gethex+0x368>
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	d109      	bne.n	8013a8c <__gethex+0x350>
 8013a78:	f01a 0f02 	tst.w	sl, #2
 8013a7c:	d006      	beq.n	8013a8c <__gethex+0x350>
 8013a7e:	f8d9 3000 	ldr.w	r3, [r9]
 8013a82:	ea4a 0a03 	orr.w	sl, sl, r3
 8013a86:	f01a 0f01 	tst.w	sl, #1
 8013a8a:	d10e      	bne.n	8013aaa <__gethex+0x36e>
 8013a8c:	f047 0710 	orr.w	r7, r7, #16
 8013a90:	e033      	b.n	8013afa <__gethex+0x3be>
 8013a92:	f04f 0a01 	mov.w	sl, #1
 8013a96:	e7cf      	b.n	8013a38 <__gethex+0x2fc>
 8013a98:	2701      	movs	r7, #1
 8013a9a:	e7e2      	b.n	8013a62 <__gethex+0x326>
 8013a9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a9e:	f1c3 0301 	rsb	r3, r3, #1
 8013aa2:	9315      	str	r3, [sp, #84]	; 0x54
 8013aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d0f0      	beq.n	8013a8c <__gethex+0x350>
 8013aaa:	f04f 0c00 	mov.w	ip, #0
 8013aae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013ab2:	f105 0314 	add.w	r3, r5, #20
 8013ab6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8013aba:	eb03 010a 	add.w	r1, r3, sl
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ac4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013ac8:	d01c      	beq.n	8013b04 <__gethex+0x3c8>
 8013aca:	3201      	adds	r2, #1
 8013acc:	6002      	str	r2, [r0, #0]
 8013ace:	2f02      	cmp	r7, #2
 8013ad0:	f105 0314 	add.w	r3, r5, #20
 8013ad4:	d138      	bne.n	8013b48 <__gethex+0x40c>
 8013ad6:	f8d8 2000 	ldr.w	r2, [r8]
 8013ada:	3a01      	subs	r2, #1
 8013adc:	42b2      	cmp	r2, r6
 8013ade:	d10a      	bne.n	8013af6 <__gethex+0x3ba>
 8013ae0:	2201      	movs	r2, #1
 8013ae2:	1171      	asrs	r1, r6, #5
 8013ae4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013ae8:	f006 061f 	and.w	r6, r6, #31
 8013aec:	fa02 f606 	lsl.w	r6, r2, r6
 8013af0:	421e      	tst	r6, r3
 8013af2:	bf18      	it	ne
 8013af4:	4617      	movne	r7, r2
 8013af6:	f047 0720 	orr.w	r7, r7, #32
 8013afa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013afc:	601d      	str	r5, [r3, #0]
 8013afe:	9b06      	ldr	r3, [sp, #24]
 8013b00:	601c      	str	r4, [r3, #0]
 8013b02:	e6a3      	b.n	801384c <__gethex+0x110>
 8013b04:	4299      	cmp	r1, r3
 8013b06:	f843 cc04 	str.w	ip, [r3, #-4]
 8013b0a:	d8d8      	bhi.n	8013abe <__gethex+0x382>
 8013b0c:	68ab      	ldr	r3, [r5, #8]
 8013b0e:	4599      	cmp	r9, r3
 8013b10:	db12      	blt.n	8013b38 <__gethex+0x3fc>
 8013b12:	6869      	ldr	r1, [r5, #4]
 8013b14:	9802      	ldr	r0, [sp, #8]
 8013b16:	3101      	adds	r1, #1
 8013b18:	f000 f90e 	bl	8013d38 <_Balloc>
 8013b1c:	4683      	mov	fp, r0
 8013b1e:	692a      	ldr	r2, [r5, #16]
 8013b20:	f105 010c 	add.w	r1, r5, #12
 8013b24:	3202      	adds	r2, #2
 8013b26:	0092      	lsls	r2, r2, #2
 8013b28:	300c      	adds	r0, #12
 8013b2a:	f7fd fa9f 	bl	801106c <memcpy>
 8013b2e:	4629      	mov	r1, r5
 8013b30:	9802      	ldr	r0, [sp, #8]
 8013b32:	f000 f935 	bl	8013da0 <_Bfree>
 8013b36:	465d      	mov	r5, fp
 8013b38:	692b      	ldr	r3, [r5, #16]
 8013b3a:	1c5a      	adds	r2, r3, #1
 8013b3c:	612a      	str	r2, [r5, #16]
 8013b3e:	2201      	movs	r2, #1
 8013b40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013b44:	615a      	str	r2, [r3, #20]
 8013b46:	e7c2      	b.n	8013ace <__gethex+0x392>
 8013b48:	692a      	ldr	r2, [r5, #16]
 8013b4a:	454a      	cmp	r2, r9
 8013b4c:	dd0b      	ble.n	8013b66 <__gethex+0x42a>
 8013b4e:	2101      	movs	r1, #1
 8013b50:	4628      	mov	r0, r5
 8013b52:	f7ff fda3 	bl	801369c <rshift>
 8013b56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013b5a:	3401      	adds	r4, #1
 8013b5c:	42a3      	cmp	r3, r4
 8013b5e:	f6ff aed8 	blt.w	8013912 <__gethex+0x1d6>
 8013b62:	2701      	movs	r7, #1
 8013b64:	e7c7      	b.n	8013af6 <__gethex+0x3ba>
 8013b66:	f016 061f 	ands.w	r6, r6, #31
 8013b6a:	d0fa      	beq.n	8013b62 <__gethex+0x426>
 8013b6c:	449a      	add	sl, r3
 8013b6e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013b72:	f000 f9a5 	bl	8013ec0 <__hi0bits>
 8013b76:	f1c6 0620 	rsb	r6, r6, #32
 8013b7a:	42b0      	cmp	r0, r6
 8013b7c:	dbe7      	blt.n	8013b4e <__gethex+0x412>
 8013b7e:	e7f0      	b.n	8013b62 <__gethex+0x426>

08013b80 <L_shift>:
 8013b80:	f1c2 0208 	rsb	r2, r2, #8
 8013b84:	0092      	lsls	r2, r2, #2
 8013b86:	b570      	push	{r4, r5, r6, lr}
 8013b88:	f1c2 0620 	rsb	r6, r2, #32
 8013b8c:	6843      	ldr	r3, [r0, #4]
 8013b8e:	6804      	ldr	r4, [r0, #0]
 8013b90:	fa03 f506 	lsl.w	r5, r3, r6
 8013b94:	432c      	orrs	r4, r5
 8013b96:	40d3      	lsrs	r3, r2
 8013b98:	6004      	str	r4, [r0, #0]
 8013b9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8013b9e:	4288      	cmp	r0, r1
 8013ba0:	d3f4      	bcc.n	8013b8c <L_shift+0xc>
 8013ba2:	bd70      	pop	{r4, r5, r6, pc}

08013ba4 <__match>:
 8013ba4:	b530      	push	{r4, r5, lr}
 8013ba6:	6803      	ldr	r3, [r0, #0]
 8013ba8:	3301      	adds	r3, #1
 8013baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013bae:	b914      	cbnz	r4, 8013bb6 <__match+0x12>
 8013bb0:	6003      	str	r3, [r0, #0]
 8013bb2:	2001      	movs	r0, #1
 8013bb4:	bd30      	pop	{r4, r5, pc}
 8013bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013bbe:	2d19      	cmp	r5, #25
 8013bc0:	bf98      	it	ls
 8013bc2:	3220      	addls	r2, #32
 8013bc4:	42a2      	cmp	r2, r4
 8013bc6:	d0f0      	beq.n	8013baa <__match+0x6>
 8013bc8:	2000      	movs	r0, #0
 8013bca:	e7f3      	b.n	8013bb4 <__match+0x10>

08013bcc <__hexnan>:
 8013bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd0:	2500      	movs	r5, #0
 8013bd2:	680b      	ldr	r3, [r1, #0]
 8013bd4:	4682      	mov	sl, r0
 8013bd6:	115f      	asrs	r7, r3, #5
 8013bd8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8013bdc:	f013 031f 	ands.w	r3, r3, #31
 8013be0:	bf18      	it	ne
 8013be2:	3704      	addne	r7, #4
 8013be4:	1f3e      	subs	r6, r7, #4
 8013be6:	4690      	mov	r8, r2
 8013be8:	46b1      	mov	r9, r6
 8013bea:	4634      	mov	r4, r6
 8013bec:	46ab      	mov	fp, r5
 8013bee:	b087      	sub	sp, #28
 8013bf0:	6801      	ldr	r1, [r0, #0]
 8013bf2:	9301      	str	r3, [sp, #4]
 8013bf4:	f847 5c04 	str.w	r5, [r7, #-4]
 8013bf8:	9502      	str	r5, [sp, #8]
 8013bfa:	784a      	ldrb	r2, [r1, #1]
 8013bfc:	1c4b      	adds	r3, r1, #1
 8013bfe:	9303      	str	r3, [sp, #12]
 8013c00:	b342      	cbz	r2, 8013c54 <__hexnan+0x88>
 8013c02:	4610      	mov	r0, r2
 8013c04:	9105      	str	r1, [sp, #20]
 8013c06:	9204      	str	r2, [sp, #16]
 8013c08:	f7ff fd83 	bl	8013712 <__hexdig_fun>
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	d143      	bne.n	8013c98 <__hexnan+0xcc>
 8013c10:	9a04      	ldr	r2, [sp, #16]
 8013c12:	9905      	ldr	r1, [sp, #20]
 8013c14:	2a20      	cmp	r2, #32
 8013c16:	d818      	bhi.n	8013c4a <__hexnan+0x7e>
 8013c18:	9b02      	ldr	r3, [sp, #8]
 8013c1a:	459b      	cmp	fp, r3
 8013c1c:	dd13      	ble.n	8013c46 <__hexnan+0x7a>
 8013c1e:	454c      	cmp	r4, r9
 8013c20:	d206      	bcs.n	8013c30 <__hexnan+0x64>
 8013c22:	2d07      	cmp	r5, #7
 8013c24:	dc04      	bgt.n	8013c30 <__hexnan+0x64>
 8013c26:	462a      	mov	r2, r5
 8013c28:	4649      	mov	r1, r9
 8013c2a:	4620      	mov	r0, r4
 8013c2c:	f7ff ffa8 	bl	8013b80 <L_shift>
 8013c30:	4544      	cmp	r4, r8
 8013c32:	d944      	bls.n	8013cbe <__hexnan+0xf2>
 8013c34:	2300      	movs	r3, #0
 8013c36:	f1a4 0904 	sub.w	r9, r4, #4
 8013c3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c3e:	461d      	mov	r5, r3
 8013c40:	464c      	mov	r4, r9
 8013c42:	f8cd b008 	str.w	fp, [sp, #8]
 8013c46:	9903      	ldr	r1, [sp, #12]
 8013c48:	e7d7      	b.n	8013bfa <__hexnan+0x2e>
 8013c4a:	2a29      	cmp	r2, #41	; 0x29
 8013c4c:	d14a      	bne.n	8013ce4 <__hexnan+0x118>
 8013c4e:	3102      	adds	r1, #2
 8013c50:	f8ca 1000 	str.w	r1, [sl]
 8013c54:	f1bb 0f00 	cmp.w	fp, #0
 8013c58:	d044      	beq.n	8013ce4 <__hexnan+0x118>
 8013c5a:	454c      	cmp	r4, r9
 8013c5c:	d206      	bcs.n	8013c6c <__hexnan+0xa0>
 8013c5e:	2d07      	cmp	r5, #7
 8013c60:	dc04      	bgt.n	8013c6c <__hexnan+0xa0>
 8013c62:	462a      	mov	r2, r5
 8013c64:	4649      	mov	r1, r9
 8013c66:	4620      	mov	r0, r4
 8013c68:	f7ff ff8a 	bl	8013b80 <L_shift>
 8013c6c:	4544      	cmp	r4, r8
 8013c6e:	d928      	bls.n	8013cc2 <__hexnan+0xf6>
 8013c70:	4643      	mov	r3, r8
 8013c72:	f854 2b04 	ldr.w	r2, [r4], #4
 8013c76:	42a6      	cmp	r6, r4
 8013c78:	f843 2b04 	str.w	r2, [r3], #4
 8013c7c:	d2f9      	bcs.n	8013c72 <__hexnan+0xa6>
 8013c7e:	2200      	movs	r2, #0
 8013c80:	f843 2b04 	str.w	r2, [r3], #4
 8013c84:	429e      	cmp	r6, r3
 8013c86:	d2fb      	bcs.n	8013c80 <__hexnan+0xb4>
 8013c88:	6833      	ldr	r3, [r6, #0]
 8013c8a:	b91b      	cbnz	r3, 8013c94 <__hexnan+0xc8>
 8013c8c:	4546      	cmp	r6, r8
 8013c8e:	d127      	bne.n	8013ce0 <__hexnan+0x114>
 8013c90:	2301      	movs	r3, #1
 8013c92:	6033      	str	r3, [r6, #0]
 8013c94:	2005      	movs	r0, #5
 8013c96:	e026      	b.n	8013ce6 <__hexnan+0x11a>
 8013c98:	3501      	adds	r5, #1
 8013c9a:	2d08      	cmp	r5, #8
 8013c9c:	f10b 0b01 	add.w	fp, fp, #1
 8013ca0:	dd06      	ble.n	8013cb0 <__hexnan+0xe4>
 8013ca2:	4544      	cmp	r4, r8
 8013ca4:	d9cf      	bls.n	8013c46 <__hexnan+0x7a>
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	2501      	movs	r5, #1
 8013caa:	f844 3c04 	str.w	r3, [r4, #-4]
 8013cae:	3c04      	subs	r4, #4
 8013cb0:	6822      	ldr	r2, [r4, #0]
 8013cb2:	f000 000f 	and.w	r0, r0, #15
 8013cb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013cba:	6020      	str	r0, [r4, #0]
 8013cbc:	e7c3      	b.n	8013c46 <__hexnan+0x7a>
 8013cbe:	2508      	movs	r5, #8
 8013cc0:	e7c1      	b.n	8013c46 <__hexnan+0x7a>
 8013cc2:	9b01      	ldr	r3, [sp, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d0df      	beq.n	8013c88 <__hexnan+0xbc>
 8013cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8013ccc:	f1c3 0320 	rsb	r3, r3, #32
 8013cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8013cd4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013cd8:	401a      	ands	r2, r3
 8013cda:	f847 2c04 	str.w	r2, [r7, #-4]
 8013cde:	e7d3      	b.n	8013c88 <__hexnan+0xbc>
 8013ce0:	3e04      	subs	r6, #4
 8013ce2:	e7d1      	b.n	8013c88 <__hexnan+0xbc>
 8013ce4:	2004      	movs	r0, #4
 8013ce6:	b007      	add	sp, #28
 8013ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013cec <__localeconv_l>:
 8013cec:	30f0      	adds	r0, #240	; 0xf0
 8013cee:	4770      	bx	lr

08013cf0 <_localeconv_r>:
 8013cf0:	4b04      	ldr	r3, [pc, #16]	; (8013d04 <_localeconv_r+0x14>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	6a18      	ldr	r0, [r3, #32]
 8013cf6:	4b04      	ldr	r3, [pc, #16]	; (8013d08 <_localeconv_r+0x18>)
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	bf08      	it	eq
 8013cfc:	4618      	moveq	r0, r3
 8013cfe:	30f0      	adds	r0, #240	; 0xf0
 8013d00:	4770      	bx	lr
 8013d02:	bf00      	nop
 8013d04:	20000060 	.word	0x20000060
 8013d08:	200000c4 	.word	0x200000c4

08013d0c <malloc>:
 8013d0c:	4b02      	ldr	r3, [pc, #8]	; (8013d18 <malloc+0xc>)
 8013d0e:	4601      	mov	r1, r0
 8013d10:	6818      	ldr	r0, [r3, #0]
 8013d12:	f000 bc63 	b.w	80145dc <_malloc_r>
 8013d16:	bf00      	nop
 8013d18:	20000060 	.word	0x20000060

08013d1c <memchr>:
 8013d1c:	b510      	push	{r4, lr}
 8013d1e:	b2c9      	uxtb	r1, r1
 8013d20:	4402      	add	r2, r0
 8013d22:	4290      	cmp	r0, r2
 8013d24:	4603      	mov	r3, r0
 8013d26:	d101      	bne.n	8013d2c <memchr+0x10>
 8013d28:	2300      	movs	r3, #0
 8013d2a:	e003      	b.n	8013d34 <memchr+0x18>
 8013d2c:	781c      	ldrb	r4, [r3, #0]
 8013d2e:	3001      	adds	r0, #1
 8013d30:	428c      	cmp	r4, r1
 8013d32:	d1f6      	bne.n	8013d22 <memchr+0x6>
 8013d34:	4618      	mov	r0, r3
 8013d36:	bd10      	pop	{r4, pc}

08013d38 <_Balloc>:
 8013d38:	b570      	push	{r4, r5, r6, lr}
 8013d3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	460e      	mov	r6, r1
 8013d40:	b93d      	cbnz	r5, 8013d52 <_Balloc+0x1a>
 8013d42:	2010      	movs	r0, #16
 8013d44:	f7ff ffe2 	bl	8013d0c <malloc>
 8013d48:	6260      	str	r0, [r4, #36]	; 0x24
 8013d4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013d4e:	6005      	str	r5, [r0, #0]
 8013d50:	60c5      	str	r5, [r0, #12]
 8013d52:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013d54:	68eb      	ldr	r3, [r5, #12]
 8013d56:	b183      	cbz	r3, 8013d7a <_Balloc+0x42>
 8013d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013d60:	b9b8      	cbnz	r0, 8013d92 <_Balloc+0x5a>
 8013d62:	2101      	movs	r1, #1
 8013d64:	fa01 f506 	lsl.w	r5, r1, r6
 8013d68:	1d6a      	adds	r2, r5, #5
 8013d6a:	0092      	lsls	r2, r2, #2
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f000 fbdb 	bl	8014528 <_calloc_r>
 8013d72:	b160      	cbz	r0, 8013d8e <_Balloc+0x56>
 8013d74:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013d78:	e00e      	b.n	8013d98 <_Balloc+0x60>
 8013d7a:	2221      	movs	r2, #33	; 0x21
 8013d7c:	2104      	movs	r1, #4
 8013d7e:	4620      	mov	r0, r4
 8013d80:	f000 fbd2 	bl	8014528 <_calloc_r>
 8013d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d86:	60e8      	str	r0, [r5, #12]
 8013d88:	68db      	ldr	r3, [r3, #12]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d1e4      	bne.n	8013d58 <_Balloc+0x20>
 8013d8e:	2000      	movs	r0, #0
 8013d90:	bd70      	pop	{r4, r5, r6, pc}
 8013d92:	6802      	ldr	r2, [r0, #0]
 8013d94:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013d98:	2300      	movs	r3, #0
 8013d9a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013d9e:	e7f7      	b.n	8013d90 <_Balloc+0x58>

08013da0 <_Bfree>:
 8013da0:	b570      	push	{r4, r5, r6, lr}
 8013da2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013da4:	4606      	mov	r6, r0
 8013da6:	460d      	mov	r5, r1
 8013da8:	b93c      	cbnz	r4, 8013dba <_Bfree+0x1a>
 8013daa:	2010      	movs	r0, #16
 8013dac:	f7ff ffae 	bl	8013d0c <malloc>
 8013db0:	6270      	str	r0, [r6, #36]	; 0x24
 8013db2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013db6:	6004      	str	r4, [r0, #0]
 8013db8:	60c4      	str	r4, [r0, #12]
 8013dba:	b13d      	cbz	r5, 8013dcc <_Bfree+0x2c>
 8013dbc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013dbe:	686a      	ldr	r2, [r5, #4]
 8013dc0:	68db      	ldr	r3, [r3, #12]
 8013dc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013dc6:	6029      	str	r1, [r5, #0]
 8013dc8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013dcc:	bd70      	pop	{r4, r5, r6, pc}

08013dce <__multadd>:
 8013dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd2:	461f      	mov	r7, r3
 8013dd4:	4606      	mov	r6, r0
 8013dd6:	460c      	mov	r4, r1
 8013dd8:	2300      	movs	r3, #0
 8013dda:	690d      	ldr	r5, [r1, #16]
 8013ddc:	f101 0c14 	add.w	ip, r1, #20
 8013de0:	f8dc 0000 	ldr.w	r0, [ip]
 8013de4:	3301      	adds	r3, #1
 8013de6:	b281      	uxth	r1, r0
 8013de8:	fb02 7101 	mla	r1, r2, r1, r7
 8013dec:	0c00      	lsrs	r0, r0, #16
 8013dee:	0c0f      	lsrs	r7, r1, #16
 8013df0:	fb02 7000 	mla	r0, r2, r0, r7
 8013df4:	b289      	uxth	r1, r1
 8013df6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013dfa:	429d      	cmp	r5, r3
 8013dfc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013e00:	f84c 1b04 	str.w	r1, [ip], #4
 8013e04:	dcec      	bgt.n	8013de0 <__multadd+0x12>
 8013e06:	b1d7      	cbz	r7, 8013e3e <__multadd+0x70>
 8013e08:	68a3      	ldr	r3, [r4, #8]
 8013e0a:	42ab      	cmp	r3, r5
 8013e0c:	dc12      	bgt.n	8013e34 <__multadd+0x66>
 8013e0e:	6861      	ldr	r1, [r4, #4]
 8013e10:	4630      	mov	r0, r6
 8013e12:	3101      	adds	r1, #1
 8013e14:	f7ff ff90 	bl	8013d38 <_Balloc>
 8013e18:	4680      	mov	r8, r0
 8013e1a:	6922      	ldr	r2, [r4, #16]
 8013e1c:	f104 010c 	add.w	r1, r4, #12
 8013e20:	3202      	adds	r2, #2
 8013e22:	0092      	lsls	r2, r2, #2
 8013e24:	300c      	adds	r0, #12
 8013e26:	f7fd f921 	bl	801106c <memcpy>
 8013e2a:	4621      	mov	r1, r4
 8013e2c:	4630      	mov	r0, r6
 8013e2e:	f7ff ffb7 	bl	8013da0 <_Bfree>
 8013e32:	4644      	mov	r4, r8
 8013e34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e38:	3501      	adds	r5, #1
 8013e3a:	615f      	str	r7, [r3, #20]
 8013e3c:	6125      	str	r5, [r4, #16]
 8013e3e:	4620      	mov	r0, r4
 8013e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e44 <__s2b>:
 8013e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e48:	4615      	mov	r5, r2
 8013e4a:	2209      	movs	r2, #9
 8013e4c:	461f      	mov	r7, r3
 8013e4e:	3308      	adds	r3, #8
 8013e50:	460c      	mov	r4, r1
 8013e52:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e56:	4606      	mov	r6, r0
 8013e58:	2201      	movs	r2, #1
 8013e5a:	2100      	movs	r1, #0
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	db20      	blt.n	8013ea2 <__s2b+0x5e>
 8013e60:	4630      	mov	r0, r6
 8013e62:	f7ff ff69 	bl	8013d38 <_Balloc>
 8013e66:	9b08      	ldr	r3, [sp, #32]
 8013e68:	2d09      	cmp	r5, #9
 8013e6a:	6143      	str	r3, [r0, #20]
 8013e6c:	f04f 0301 	mov.w	r3, #1
 8013e70:	6103      	str	r3, [r0, #16]
 8013e72:	dd19      	ble.n	8013ea8 <__s2b+0x64>
 8013e74:	f104 0809 	add.w	r8, r4, #9
 8013e78:	46c1      	mov	r9, r8
 8013e7a:	442c      	add	r4, r5
 8013e7c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013e80:	4601      	mov	r1, r0
 8013e82:	3b30      	subs	r3, #48	; 0x30
 8013e84:	220a      	movs	r2, #10
 8013e86:	4630      	mov	r0, r6
 8013e88:	f7ff ffa1 	bl	8013dce <__multadd>
 8013e8c:	45a1      	cmp	r9, r4
 8013e8e:	d1f5      	bne.n	8013e7c <__s2b+0x38>
 8013e90:	eb08 0405 	add.w	r4, r8, r5
 8013e94:	3c08      	subs	r4, #8
 8013e96:	1b2d      	subs	r5, r5, r4
 8013e98:	1963      	adds	r3, r4, r5
 8013e9a:	42bb      	cmp	r3, r7
 8013e9c:	db07      	blt.n	8013eae <__s2b+0x6a>
 8013e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ea2:	0052      	lsls	r2, r2, #1
 8013ea4:	3101      	adds	r1, #1
 8013ea6:	e7d9      	b.n	8013e5c <__s2b+0x18>
 8013ea8:	340a      	adds	r4, #10
 8013eaa:	2509      	movs	r5, #9
 8013eac:	e7f3      	b.n	8013e96 <__s2b+0x52>
 8013eae:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013eb2:	4601      	mov	r1, r0
 8013eb4:	3b30      	subs	r3, #48	; 0x30
 8013eb6:	220a      	movs	r2, #10
 8013eb8:	4630      	mov	r0, r6
 8013eba:	f7ff ff88 	bl	8013dce <__multadd>
 8013ebe:	e7eb      	b.n	8013e98 <__s2b+0x54>

08013ec0 <__hi0bits>:
 8013ec0:	0c02      	lsrs	r2, r0, #16
 8013ec2:	0412      	lsls	r2, r2, #16
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	b9b2      	cbnz	r2, 8013ef6 <__hi0bits+0x36>
 8013ec8:	0403      	lsls	r3, r0, #16
 8013eca:	2010      	movs	r0, #16
 8013ecc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013ed0:	bf04      	itt	eq
 8013ed2:	021b      	lsleq	r3, r3, #8
 8013ed4:	3008      	addeq	r0, #8
 8013ed6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013eda:	bf04      	itt	eq
 8013edc:	011b      	lsleq	r3, r3, #4
 8013ede:	3004      	addeq	r0, #4
 8013ee0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013ee4:	bf04      	itt	eq
 8013ee6:	009b      	lsleq	r3, r3, #2
 8013ee8:	3002      	addeq	r0, #2
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	db06      	blt.n	8013efc <__hi0bits+0x3c>
 8013eee:	005b      	lsls	r3, r3, #1
 8013ef0:	d503      	bpl.n	8013efa <__hi0bits+0x3a>
 8013ef2:	3001      	adds	r0, #1
 8013ef4:	4770      	bx	lr
 8013ef6:	2000      	movs	r0, #0
 8013ef8:	e7e8      	b.n	8013ecc <__hi0bits+0xc>
 8013efa:	2020      	movs	r0, #32
 8013efc:	4770      	bx	lr

08013efe <__lo0bits>:
 8013efe:	6803      	ldr	r3, [r0, #0]
 8013f00:	4601      	mov	r1, r0
 8013f02:	f013 0207 	ands.w	r2, r3, #7
 8013f06:	d00b      	beq.n	8013f20 <__lo0bits+0x22>
 8013f08:	07da      	lsls	r2, r3, #31
 8013f0a:	d423      	bmi.n	8013f54 <__lo0bits+0x56>
 8013f0c:	0798      	lsls	r0, r3, #30
 8013f0e:	bf49      	itett	mi
 8013f10:	085b      	lsrmi	r3, r3, #1
 8013f12:	089b      	lsrpl	r3, r3, #2
 8013f14:	2001      	movmi	r0, #1
 8013f16:	600b      	strmi	r3, [r1, #0]
 8013f18:	bf5c      	itt	pl
 8013f1a:	600b      	strpl	r3, [r1, #0]
 8013f1c:	2002      	movpl	r0, #2
 8013f1e:	4770      	bx	lr
 8013f20:	b298      	uxth	r0, r3
 8013f22:	b9a8      	cbnz	r0, 8013f50 <__lo0bits+0x52>
 8013f24:	2010      	movs	r0, #16
 8013f26:	0c1b      	lsrs	r3, r3, #16
 8013f28:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013f2c:	bf04      	itt	eq
 8013f2e:	0a1b      	lsreq	r3, r3, #8
 8013f30:	3008      	addeq	r0, #8
 8013f32:	071a      	lsls	r2, r3, #28
 8013f34:	bf04      	itt	eq
 8013f36:	091b      	lsreq	r3, r3, #4
 8013f38:	3004      	addeq	r0, #4
 8013f3a:	079a      	lsls	r2, r3, #30
 8013f3c:	bf04      	itt	eq
 8013f3e:	089b      	lsreq	r3, r3, #2
 8013f40:	3002      	addeq	r0, #2
 8013f42:	07da      	lsls	r2, r3, #31
 8013f44:	d402      	bmi.n	8013f4c <__lo0bits+0x4e>
 8013f46:	085b      	lsrs	r3, r3, #1
 8013f48:	d006      	beq.n	8013f58 <__lo0bits+0x5a>
 8013f4a:	3001      	adds	r0, #1
 8013f4c:	600b      	str	r3, [r1, #0]
 8013f4e:	4770      	bx	lr
 8013f50:	4610      	mov	r0, r2
 8013f52:	e7e9      	b.n	8013f28 <__lo0bits+0x2a>
 8013f54:	2000      	movs	r0, #0
 8013f56:	4770      	bx	lr
 8013f58:	2020      	movs	r0, #32
 8013f5a:	4770      	bx	lr

08013f5c <__i2b>:
 8013f5c:	b510      	push	{r4, lr}
 8013f5e:	460c      	mov	r4, r1
 8013f60:	2101      	movs	r1, #1
 8013f62:	f7ff fee9 	bl	8013d38 <_Balloc>
 8013f66:	2201      	movs	r2, #1
 8013f68:	6144      	str	r4, [r0, #20]
 8013f6a:	6102      	str	r2, [r0, #16]
 8013f6c:	bd10      	pop	{r4, pc}

08013f6e <__multiply>:
 8013f6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f72:	4614      	mov	r4, r2
 8013f74:	690a      	ldr	r2, [r1, #16]
 8013f76:	6923      	ldr	r3, [r4, #16]
 8013f78:	4688      	mov	r8, r1
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	bfbe      	ittt	lt
 8013f7e:	460b      	movlt	r3, r1
 8013f80:	46a0      	movlt	r8, r4
 8013f82:	461c      	movlt	r4, r3
 8013f84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013f88:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013f8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013f90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013f94:	eb07 0609 	add.w	r6, r7, r9
 8013f98:	42b3      	cmp	r3, r6
 8013f9a:	bfb8      	it	lt
 8013f9c:	3101      	addlt	r1, #1
 8013f9e:	f7ff fecb 	bl	8013d38 <_Balloc>
 8013fa2:	f100 0514 	add.w	r5, r0, #20
 8013fa6:	462b      	mov	r3, r5
 8013fa8:	2200      	movs	r2, #0
 8013faa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013fae:	4573      	cmp	r3, lr
 8013fb0:	d316      	bcc.n	8013fe0 <__multiply+0x72>
 8013fb2:	f104 0214 	add.w	r2, r4, #20
 8013fb6:	f108 0114 	add.w	r1, r8, #20
 8013fba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013fbe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013fc2:	9300      	str	r3, [sp, #0]
 8013fc4:	9b00      	ldr	r3, [sp, #0]
 8013fc6:	9201      	str	r2, [sp, #4]
 8013fc8:	4293      	cmp	r3, r2
 8013fca:	d80c      	bhi.n	8013fe6 <__multiply+0x78>
 8013fcc:	2e00      	cmp	r6, #0
 8013fce:	dd03      	ble.n	8013fd8 <__multiply+0x6a>
 8013fd0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d05d      	beq.n	8014094 <__multiply+0x126>
 8013fd8:	6106      	str	r6, [r0, #16]
 8013fda:	b003      	add	sp, #12
 8013fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe0:	f843 2b04 	str.w	r2, [r3], #4
 8013fe4:	e7e3      	b.n	8013fae <__multiply+0x40>
 8013fe6:	f8b2 b000 	ldrh.w	fp, [r2]
 8013fea:	f1bb 0f00 	cmp.w	fp, #0
 8013fee:	d023      	beq.n	8014038 <__multiply+0xca>
 8013ff0:	4689      	mov	r9, r1
 8013ff2:	46ac      	mov	ip, r5
 8013ff4:	f04f 0800 	mov.w	r8, #0
 8013ff8:	f859 4b04 	ldr.w	r4, [r9], #4
 8013ffc:	f8dc a000 	ldr.w	sl, [ip]
 8014000:	b2a3      	uxth	r3, r4
 8014002:	fa1f fa8a 	uxth.w	sl, sl
 8014006:	fb0b a303 	mla	r3, fp, r3, sl
 801400a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801400e:	f8dc 4000 	ldr.w	r4, [ip]
 8014012:	4443      	add	r3, r8
 8014014:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014018:	fb0b 840a 	mla	r4, fp, sl, r8
 801401c:	46e2      	mov	sl, ip
 801401e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014022:	b29b      	uxth	r3, r3
 8014024:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014028:	454f      	cmp	r7, r9
 801402a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801402e:	f84a 3b04 	str.w	r3, [sl], #4
 8014032:	d82b      	bhi.n	801408c <__multiply+0x11e>
 8014034:	f8cc 8004 	str.w	r8, [ip, #4]
 8014038:	9b01      	ldr	r3, [sp, #4]
 801403a:	3204      	adds	r2, #4
 801403c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014040:	f1ba 0f00 	cmp.w	sl, #0
 8014044:	d020      	beq.n	8014088 <__multiply+0x11a>
 8014046:	4689      	mov	r9, r1
 8014048:	46a8      	mov	r8, r5
 801404a:	f04f 0b00 	mov.w	fp, #0
 801404e:	682b      	ldr	r3, [r5, #0]
 8014050:	f8b9 c000 	ldrh.w	ip, [r9]
 8014054:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014058:	b29b      	uxth	r3, r3
 801405a:	fb0a 440c 	mla	r4, sl, ip, r4
 801405e:	46c4      	mov	ip, r8
 8014060:	445c      	add	r4, fp
 8014062:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014066:	f84c 3b04 	str.w	r3, [ip], #4
 801406a:	f859 3b04 	ldr.w	r3, [r9], #4
 801406e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014072:	0c1b      	lsrs	r3, r3, #16
 8014074:	fb0a b303 	mla	r3, sl, r3, fp
 8014078:	454f      	cmp	r7, r9
 801407a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801407e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014082:	d805      	bhi.n	8014090 <__multiply+0x122>
 8014084:	f8c8 3004 	str.w	r3, [r8, #4]
 8014088:	3504      	adds	r5, #4
 801408a:	e79b      	b.n	8013fc4 <__multiply+0x56>
 801408c:	46d4      	mov	ip, sl
 801408e:	e7b3      	b.n	8013ff8 <__multiply+0x8a>
 8014090:	46e0      	mov	r8, ip
 8014092:	e7dd      	b.n	8014050 <__multiply+0xe2>
 8014094:	3e01      	subs	r6, #1
 8014096:	e799      	b.n	8013fcc <__multiply+0x5e>

08014098 <__pow5mult>:
 8014098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801409c:	4615      	mov	r5, r2
 801409e:	f012 0203 	ands.w	r2, r2, #3
 80140a2:	4606      	mov	r6, r0
 80140a4:	460f      	mov	r7, r1
 80140a6:	d007      	beq.n	80140b8 <__pow5mult+0x20>
 80140a8:	4c21      	ldr	r4, [pc, #132]	; (8014130 <__pow5mult+0x98>)
 80140aa:	3a01      	subs	r2, #1
 80140ac:	2300      	movs	r3, #0
 80140ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80140b2:	f7ff fe8c 	bl	8013dce <__multadd>
 80140b6:	4607      	mov	r7, r0
 80140b8:	10ad      	asrs	r5, r5, #2
 80140ba:	d035      	beq.n	8014128 <__pow5mult+0x90>
 80140bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80140be:	b93c      	cbnz	r4, 80140d0 <__pow5mult+0x38>
 80140c0:	2010      	movs	r0, #16
 80140c2:	f7ff fe23 	bl	8013d0c <malloc>
 80140c6:	6270      	str	r0, [r6, #36]	; 0x24
 80140c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80140cc:	6004      	str	r4, [r0, #0]
 80140ce:	60c4      	str	r4, [r0, #12]
 80140d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80140d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80140d8:	b94c      	cbnz	r4, 80140ee <__pow5mult+0x56>
 80140da:	f240 2171 	movw	r1, #625	; 0x271
 80140de:	4630      	mov	r0, r6
 80140e0:	f7ff ff3c 	bl	8013f5c <__i2b>
 80140e4:	2300      	movs	r3, #0
 80140e6:	4604      	mov	r4, r0
 80140e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80140ec:	6003      	str	r3, [r0, #0]
 80140ee:	f04f 0800 	mov.w	r8, #0
 80140f2:	07eb      	lsls	r3, r5, #31
 80140f4:	d50a      	bpl.n	801410c <__pow5mult+0x74>
 80140f6:	4639      	mov	r1, r7
 80140f8:	4622      	mov	r2, r4
 80140fa:	4630      	mov	r0, r6
 80140fc:	f7ff ff37 	bl	8013f6e <__multiply>
 8014100:	4681      	mov	r9, r0
 8014102:	4639      	mov	r1, r7
 8014104:	4630      	mov	r0, r6
 8014106:	f7ff fe4b 	bl	8013da0 <_Bfree>
 801410a:	464f      	mov	r7, r9
 801410c:	106d      	asrs	r5, r5, #1
 801410e:	d00b      	beq.n	8014128 <__pow5mult+0x90>
 8014110:	6820      	ldr	r0, [r4, #0]
 8014112:	b938      	cbnz	r0, 8014124 <__pow5mult+0x8c>
 8014114:	4622      	mov	r2, r4
 8014116:	4621      	mov	r1, r4
 8014118:	4630      	mov	r0, r6
 801411a:	f7ff ff28 	bl	8013f6e <__multiply>
 801411e:	6020      	str	r0, [r4, #0]
 8014120:	f8c0 8000 	str.w	r8, [r0]
 8014124:	4604      	mov	r4, r0
 8014126:	e7e4      	b.n	80140f2 <__pow5mult+0x5a>
 8014128:	4638      	mov	r0, r7
 801412a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801412e:	bf00      	nop
 8014130:	08019db0 	.word	0x08019db0

08014134 <__lshift>:
 8014134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014138:	460c      	mov	r4, r1
 801413a:	4607      	mov	r7, r0
 801413c:	4616      	mov	r6, r2
 801413e:	6923      	ldr	r3, [r4, #16]
 8014140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014144:	eb0a 0903 	add.w	r9, sl, r3
 8014148:	6849      	ldr	r1, [r1, #4]
 801414a:	68a3      	ldr	r3, [r4, #8]
 801414c:	f109 0501 	add.w	r5, r9, #1
 8014150:	42ab      	cmp	r3, r5
 8014152:	db32      	blt.n	80141ba <__lshift+0x86>
 8014154:	4638      	mov	r0, r7
 8014156:	f7ff fdef 	bl	8013d38 <_Balloc>
 801415a:	2300      	movs	r3, #0
 801415c:	4680      	mov	r8, r0
 801415e:	461a      	mov	r2, r3
 8014160:	f100 0114 	add.w	r1, r0, #20
 8014164:	4553      	cmp	r3, sl
 8014166:	db2b      	blt.n	80141c0 <__lshift+0x8c>
 8014168:	6920      	ldr	r0, [r4, #16]
 801416a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801416e:	f104 0314 	add.w	r3, r4, #20
 8014172:	f016 021f 	ands.w	r2, r6, #31
 8014176:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801417a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801417e:	d025      	beq.n	80141cc <__lshift+0x98>
 8014180:	2000      	movs	r0, #0
 8014182:	f1c2 0e20 	rsb	lr, r2, #32
 8014186:	468a      	mov	sl, r1
 8014188:	681e      	ldr	r6, [r3, #0]
 801418a:	4096      	lsls	r6, r2
 801418c:	4330      	orrs	r0, r6
 801418e:	f84a 0b04 	str.w	r0, [sl], #4
 8014192:	f853 0b04 	ldr.w	r0, [r3], #4
 8014196:	459c      	cmp	ip, r3
 8014198:	fa20 f00e 	lsr.w	r0, r0, lr
 801419c:	d814      	bhi.n	80141c8 <__lshift+0x94>
 801419e:	6048      	str	r0, [r1, #4]
 80141a0:	b108      	cbz	r0, 80141a6 <__lshift+0x72>
 80141a2:	f109 0502 	add.w	r5, r9, #2
 80141a6:	3d01      	subs	r5, #1
 80141a8:	4638      	mov	r0, r7
 80141aa:	f8c8 5010 	str.w	r5, [r8, #16]
 80141ae:	4621      	mov	r1, r4
 80141b0:	f7ff fdf6 	bl	8013da0 <_Bfree>
 80141b4:	4640      	mov	r0, r8
 80141b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141ba:	3101      	adds	r1, #1
 80141bc:	005b      	lsls	r3, r3, #1
 80141be:	e7c7      	b.n	8014150 <__lshift+0x1c>
 80141c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80141c4:	3301      	adds	r3, #1
 80141c6:	e7cd      	b.n	8014164 <__lshift+0x30>
 80141c8:	4651      	mov	r1, sl
 80141ca:	e7dc      	b.n	8014186 <__lshift+0x52>
 80141cc:	3904      	subs	r1, #4
 80141ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80141d2:	459c      	cmp	ip, r3
 80141d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80141d8:	d8f9      	bhi.n	80141ce <__lshift+0x9a>
 80141da:	e7e4      	b.n	80141a6 <__lshift+0x72>

080141dc <__mcmp>:
 80141dc:	6903      	ldr	r3, [r0, #16]
 80141de:	690a      	ldr	r2, [r1, #16]
 80141e0:	b530      	push	{r4, r5, lr}
 80141e2:	1a9b      	subs	r3, r3, r2
 80141e4:	d10c      	bne.n	8014200 <__mcmp+0x24>
 80141e6:	0092      	lsls	r2, r2, #2
 80141e8:	3014      	adds	r0, #20
 80141ea:	3114      	adds	r1, #20
 80141ec:	1884      	adds	r4, r0, r2
 80141ee:	4411      	add	r1, r2
 80141f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80141f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80141f8:	4295      	cmp	r5, r2
 80141fa:	d003      	beq.n	8014204 <__mcmp+0x28>
 80141fc:	d305      	bcc.n	801420a <__mcmp+0x2e>
 80141fe:	2301      	movs	r3, #1
 8014200:	4618      	mov	r0, r3
 8014202:	bd30      	pop	{r4, r5, pc}
 8014204:	42a0      	cmp	r0, r4
 8014206:	d3f3      	bcc.n	80141f0 <__mcmp+0x14>
 8014208:	e7fa      	b.n	8014200 <__mcmp+0x24>
 801420a:	f04f 33ff 	mov.w	r3, #4294967295
 801420e:	e7f7      	b.n	8014200 <__mcmp+0x24>

08014210 <__mdiff>:
 8014210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014214:	460d      	mov	r5, r1
 8014216:	4607      	mov	r7, r0
 8014218:	4611      	mov	r1, r2
 801421a:	4628      	mov	r0, r5
 801421c:	4614      	mov	r4, r2
 801421e:	f7ff ffdd 	bl	80141dc <__mcmp>
 8014222:	1e06      	subs	r6, r0, #0
 8014224:	d108      	bne.n	8014238 <__mdiff+0x28>
 8014226:	4631      	mov	r1, r6
 8014228:	4638      	mov	r0, r7
 801422a:	f7ff fd85 	bl	8013d38 <_Balloc>
 801422e:	2301      	movs	r3, #1
 8014230:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014238:	bfa4      	itt	ge
 801423a:	4623      	movge	r3, r4
 801423c:	462c      	movge	r4, r5
 801423e:	4638      	mov	r0, r7
 8014240:	6861      	ldr	r1, [r4, #4]
 8014242:	bfa6      	itte	ge
 8014244:	461d      	movge	r5, r3
 8014246:	2600      	movge	r6, #0
 8014248:	2601      	movlt	r6, #1
 801424a:	f7ff fd75 	bl	8013d38 <_Balloc>
 801424e:	f04f 0e00 	mov.w	lr, #0
 8014252:	60c6      	str	r6, [r0, #12]
 8014254:	692b      	ldr	r3, [r5, #16]
 8014256:	6926      	ldr	r6, [r4, #16]
 8014258:	f104 0214 	add.w	r2, r4, #20
 801425c:	f105 0914 	add.w	r9, r5, #20
 8014260:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014264:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014268:	f100 0114 	add.w	r1, r0, #20
 801426c:	f852 ab04 	ldr.w	sl, [r2], #4
 8014270:	f859 5b04 	ldr.w	r5, [r9], #4
 8014274:	fa1f f38a 	uxth.w	r3, sl
 8014278:	4473      	add	r3, lr
 801427a:	b2ac      	uxth	r4, r5
 801427c:	1b1b      	subs	r3, r3, r4
 801427e:	0c2c      	lsrs	r4, r5, #16
 8014280:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8014284:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8014288:	b29b      	uxth	r3, r3
 801428a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 801428e:	45c8      	cmp	r8, r9
 8014290:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8014294:	4694      	mov	ip, r2
 8014296:	f841 4b04 	str.w	r4, [r1], #4
 801429a:	d8e7      	bhi.n	801426c <__mdiff+0x5c>
 801429c:	45bc      	cmp	ip, r7
 801429e:	d304      	bcc.n	80142aa <__mdiff+0x9a>
 80142a0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80142a4:	b183      	cbz	r3, 80142c8 <__mdiff+0xb8>
 80142a6:	6106      	str	r6, [r0, #16]
 80142a8:	e7c4      	b.n	8014234 <__mdiff+0x24>
 80142aa:	f85c 4b04 	ldr.w	r4, [ip], #4
 80142ae:	b2a2      	uxth	r2, r4
 80142b0:	4472      	add	r2, lr
 80142b2:	1413      	asrs	r3, r2, #16
 80142b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80142b8:	b292      	uxth	r2, r2
 80142ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80142be:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80142c2:	f841 2b04 	str.w	r2, [r1], #4
 80142c6:	e7e9      	b.n	801429c <__mdiff+0x8c>
 80142c8:	3e01      	subs	r6, #1
 80142ca:	e7e9      	b.n	80142a0 <__mdiff+0x90>

080142cc <__ulp>:
 80142cc:	4b10      	ldr	r3, [pc, #64]	; (8014310 <__ulp+0x44>)
 80142ce:	400b      	ands	r3, r1
 80142d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	dd02      	ble.n	80142de <__ulp+0x12>
 80142d8:	2000      	movs	r0, #0
 80142da:	4619      	mov	r1, r3
 80142dc:	4770      	bx	lr
 80142de:	425b      	negs	r3, r3
 80142e0:	151b      	asrs	r3, r3, #20
 80142e2:	2b13      	cmp	r3, #19
 80142e4:	f04f 0000 	mov.w	r0, #0
 80142e8:	f04f 0100 	mov.w	r1, #0
 80142ec:	dc04      	bgt.n	80142f8 <__ulp+0x2c>
 80142ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80142f2:	fa42 f103 	asr.w	r1, r2, r3
 80142f6:	4770      	bx	lr
 80142f8:	2201      	movs	r2, #1
 80142fa:	3b14      	subs	r3, #20
 80142fc:	2b1e      	cmp	r3, #30
 80142fe:	bfce      	itee	gt
 8014300:	4613      	movgt	r3, r2
 8014302:	f1c3 031f 	rsble	r3, r3, #31
 8014306:	fa02 f303 	lslle.w	r3, r2, r3
 801430a:	4618      	mov	r0, r3
 801430c:	4770      	bx	lr
 801430e:	bf00      	nop
 8014310:	7ff00000 	.word	0x7ff00000

08014314 <__b2d>:
 8014314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014318:	6907      	ldr	r7, [r0, #16]
 801431a:	f100 0914 	add.w	r9, r0, #20
 801431e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8014322:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8014326:	f1a7 0804 	sub.w	r8, r7, #4
 801432a:	4630      	mov	r0, r6
 801432c:	f7ff fdc8 	bl	8013ec0 <__hi0bits>
 8014330:	f1c0 0320 	rsb	r3, r0, #32
 8014334:	280a      	cmp	r0, #10
 8014336:	600b      	str	r3, [r1, #0]
 8014338:	491e      	ldr	r1, [pc, #120]	; (80143b4 <__b2d+0xa0>)
 801433a:	dc17      	bgt.n	801436c <__b2d+0x58>
 801433c:	45c1      	cmp	r9, r8
 801433e:	bf28      	it	cs
 8014340:	2200      	movcs	r2, #0
 8014342:	f1c0 0c0b 	rsb	ip, r0, #11
 8014346:	fa26 f30c 	lsr.w	r3, r6, ip
 801434a:	bf38      	it	cc
 801434c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8014350:	ea43 0501 	orr.w	r5, r3, r1
 8014354:	f100 0315 	add.w	r3, r0, #21
 8014358:	fa06 f303 	lsl.w	r3, r6, r3
 801435c:	fa22 f20c 	lsr.w	r2, r2, ip
 8014360:	ea43 0402 	orr.w	r4, r3, r2
 8014364:	4620      	mov	r0, r4
 8014366:	4629      	mov	r1, r5
 8014368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801436c:	45c1      	cmp	r9, r8
 801436e:	bf3a      	itte	cc
 8014370:	f1a7 0808 	subcc.w	r8, r7, #8
 8014374:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8014378:	2200      	movcs	r2, #0
 801437a:	f1b0 030b 	subs.w	r3, r0, #11
 801437e:	d015      	beq.n	80143ac <__b2d+0x98>
 8014380:	409e      	lsls	r6, r3
 8014382:	f1c3 0720 	rsb	r7, r3, #32
 8014386:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 801438a:	fa22 f107 	lsr.w	r1, r2, r7
 801438e:	45c8      	cmp	r8, r9
 8014390:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8014394:	ea46 0501 	orr.w	r5, r6, r1
 8014398:	bf94      	ite	ls
 801439a:	2100      	movls	r1, #0
 801439c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80143a0:	fa02 f003 	lsl.w	r0, r2, r3
 80143a4:	40f9      	lsrs	r1, r7
 80143a6:	ea40 0401 	orr.w	r4, r0, r1
 80143aa:	e7db      	b.n	8014364 <__b2d+0x50>
 80143ac:	ea46 0501 	orr.w	r5, r6, r1
 80143b0:	4614      	mov	r4, r2
 80143b2:	e7d7      	b.n	8014364 <__b2d+0x50>
 80143b4:	3ff00000 	.word	0x3ff00000

080143b8 <__d2b>:
 80143b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80143bc:	461c      	mov	r4, r3
 80143be:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80143c2:	2101      	movs	r1, #1
 80143c4:	4690      	mov	r8, r2
 80143c6:	f7ff fcb7 	bl	8013d38 <_Balloc>
 80143ca:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80143ce:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80143d2:	4607      	mov	r7, r0
 80143d4:	bb34      	cbnz	r4, 8014424 <__d2b+0x6c>
 80143d6:	9201      	str	r2, [sp, #4]
 80143d8:	f1b8 0200 	subs.w	r2, r8, #0
 80143dc:	d027      	beq.n	801442e <__d2b+0x76>
 80143de:	a802      	add	r0, sp, #8
 80143e0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80143e4:	f7ff fd8b 	bl	8013efe <__lo0bits>
 80143e8:	9900      	ldr	r1, [sp, #0]
 80143ea:	b1f0      	cbz	r0, 801442a <__d2b+0x72>
 80143ec:	9a01      	ldr	r2, [sp, #4]
 80143ee:	f1c0 0320 	rsb	r3, r0, #32
 80143f2:	fa02 f303 	lsl.w	r3, r2, r3
 80143f6:	430b      	orrs	r3, r1
 80143f8:	40c2      	lsrs	r2, r0
 80143fa:	617b      	str	r3, [r7, #20]
 80143fc:	9201      	str	r2, [sp, #4]
 80143fe:	9b01      	ldr	r3, [sp, #4]
 8014400:	2b00      	cmp	r3, #0
 8014402:	bf14      	ite	ne
 8014404:	2102      	movne	r1, #2
 8014406:	2101      	moveq	r1, #1
 8014408:	61bb      	str	r3, [r7, #24]
 801440a:	6139      	str	r1, [r7, #16]
 801440c:	b1c4      	cbz	r4, 8014440 <__d2b+0x88>
 801440e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014412:	4404      	add	r4, r0
 8014414:	6034      	str	r4, [r6, #0]
 8014416:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801441a:	6028      	str	r0, [r5, #0]
 801441c:	4638      	mov	r0, r7
 801441e:	b002      	add	sp, #8
 8014420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014424:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014428:	e7d5      	b.n	80143d6 <__d2b+0x1e>
 801442a:	6179      	str	r1, [r7, #20]
 801442c:	e7e7      	b.n	80143fe <__d2b+0x46>
 801442e:	a801      	add	r0, sp, #4
 8014430:	f7ff fd65 	bl	8013efe <__lo0bits>
 8014434:	2101      	movs	r1, #1
 8014436:	9b01      	ldr	r3, [sp, #4]
 8014438:	6139      	str	r1, [r7, #16]
 801443a:	617b      	str	r3, [r7, #20]
 801443c:	3020      	adds	r0, #32
 801443e:	e7e5      	b.n	801440c <__d2b+0x54>
 8014440:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014444:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014448:	6030      	str	r0, [r6, #0]
 801444a:	6918      	ldr	r0, [r3, #16]
 801444c:	f7ff fd38 	bl	8013ec0 <__hi0bits>
 8014450:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014454:	e7e1      	b.n	801441a <__d2b+0x62>

08014456 <__ratio>:
 8014456:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801445a:	4688      	mov	r8, r1
 801445c:	4669      	mov	r1, sp
 801445e:	4681      	mov	r9, r0
 8014460:	f7ff ff58 	bl	8014314 <__b2d>
 8014464:	468b      	mov	fp, r1
 8014466:	4606      	mov	r6, r0
 8014468:	460f      	mov	r7, r1
 801446a:	4640      	mov	r0, r8
 801446c:	a901      	add	r1, sp, #4
 801446e:	f7ff ff51 	bl	8014314 <__b2d>
 8014472:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014476:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801447a:	460d      	mov	r5, r1
 801447c:	eba3 0c02 	sub.w	ip, r3, r2
 8014480:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014484:	1a9b      	subs	r3, r3, r2
 8014486:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801448a:	2b00      	cmp	r3, #0
 801448c:	bfd5      	itete	le
 801448e:	460a      	movle	r2, r1
 8014490:	463a      	movgt	r2, r7
 8014492:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014496:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801449a:	bfd8      	it	le
 801449c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80144a0:	462b      	mov	r3, r5
 80144a2:	4602      	mov	r2, r0
 80144a4:	4659      	mov	r1, fp
 80144a6:	4630      	mov	r0, r6
 80144a8:	f7ec f95a 	bl	8000760 <__aeabi_ddiv>
 80144ac:	b003      	add	sp, #12
 80144ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080144b2 <__copybits>:
 80144b2:	3901      	subs	r1, #1
 80144b4:	b510      	push	{r4, lr}
 80144b6:	1149      	asrs	r1, r1, #5
 80144b8:	6914      	ldr	r4, [r2, #16]
 80144ba:	3101      	adds	r1, #1
 80144bc:	f102 0314 	add.w	r3, r2, #20
 80144c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80144c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80144c8:	42a3      	cmp	r3, r4
 80144ca:	4602      	mov	r2, r0
 80144cc:	d303      	bcc.n	80144d6 <__copybits+0x24>
 80144ce:	2300      	movs	r3, #0
 80144d0:	428a      	cmp	r2, r1
 80144d2:	d305      	bcc.n	80144e0 <__copybits+0x2e>
 80144d4:	bd10      	pop	{r4, pc}
 80144d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80144da:	f840 2b04 	str.w	r2, [r0], #4
 80144de:	e7f3      	b.n	80144c8 <__copybits+0x16>
 80144e0:	f842 3b04 	str.w	r3, [r2], #4
 80144e4:	e7f4      	b.n	80144d0 <__copybits+0x1e>

080144e6 <__any_on>:
 80144e6:	f100 0214 	add.w	r2, r0, #20
 80144ea:	6900      	ldr	r0, [r0, #16]
 80144ec:	114b      	asrs	r3, r1, #5
 80144ee:	4298      	cmp	r0, r3
 80144f0:	b510      	push	{r4, lr}
 80144f2:	db11      	blt.n	8014518 <__any_on+0x32>
 80144f4:	dd0a      	ble.n	801450c <__any_on+0x26>
 80144f6:	f011 011f 	ands.w	r1, r1, #31
 80144fa:	d007      	beq.n	801450c <__any_on+0x26>
 80144fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014500:	fa24 f001 	lsr.w	r0, r4, r1
 8014504:	fa00 f101 	lsl.w	r1, r0, r1
 8014508:	428c      	cmp	r4, r1
 801450a:	d10b      	bne.n	8014524 <__any_on+0x3e>
 801450c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014510:	4293      	cmp	r3, r2
 8014512:	d803      	bhi.n	801451c <__any_on+0x36>
 8014514:	2000      	movs	r0, #0
 8014516:	bd10      	pop	{r4, pc}
 8014518:	4603      	mov	r3, r0
 801451a:	e7f7      	b.n	801450c <__any_on+0x26>
 801451c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014520:	2900      	cmp	r1, #0
 8014522:	d0f5      	beq.n	8014510 <__any_on+0x2a>
 8014524:	2001      	movs	r0, #1
 8014526:	e7f6      	b.n	8014516 <__any_on+0x30>

08014528 <_calloc_r>:
 8014528:	b538      	push	{r3, r4, r5, lr}
 801452a:	fb02 f401 	mul.w	r4, r2, r1
 801452e:	4621      	mov	r1, r4
 8014530:	f000 f854 	bl	80145dc <_malloc_r>
 8014534:	4605      	mov	r5, r0
 8014536:	b118      	cbz	r0, 8014540 <_calloc_r+0x18>
 8014538:	4622      	mov	r2, r4
 801453a:	2100      	movs	r1, #0
 801453c:	f7fc fda1 	bl	8011082 <memset>
 8014540:	4628      	mov	r0, r5
 8014542:	bd38      	pop	{r3, r4, r5, pc}

08014544 <_free_r>:
 8014544:	b538      	push	{r3, r4, r5, lr}
 8014546:	4605      	mov	r5, r0
 8014548:	2900      	cmp	r1, #0
 801454a:	d043      	beq.n	80145d4 <_free_r+0x90>
 801454c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014550:	1f0c      	subs	r4, r1, #4
 8014552:	2b00      	cmp	r3, #0
 8014554:	bfb8      	it	lt
 8014556:	18e4      	addlt	r4, r4, r3
 8014558:	f000 fdb5 	bl	80150c6 <__malloc_lock>
 801455c:	4a1e      	ldr	r2, [pc, #120]	; (80145d8 <_free_r+0x94>)
 801455e:	6813      	ldr	r3, [r2, #0]
 8014560:	4610      	mov	r0, r2
 8014562:	b933      	cbnz	r3, 8014572 <_free_r+0x2e>
 8014564:	6063      	str	r3, [r4, #4]
 8014566:	6014      	str	r4, [r2, #0]
 8014568:	4628      	mov	r0, r5
 801456a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801456e:	f000 bdab 	b.w	80150c8 <__malloc_unlock>
 8014572:	42a3      	cmp	r3, r4
 8014574:	d90b      	bls.n	801458e <_free_r+0x4a>
 8014576:	6821      	ldr	r1, [r4, #0]
 8014578:	1862      	adds	r2, r4, r1
 801457a:	4293      	cmp	r3, r2
 801457c:	bf01      	itttt	eq
 801457e:	681a      	ldreq	r2, [r3, #0]
 8014580:	685b      	ldreq	r3, [r3, #4]
 8014582:	1852      	addeq	r2, r2, r1
 8014584:	6022      	streq	r2, [r4, #0]
 8014586:	6063      	str	r3, [r4, #4]
 8014588:	6004      	str	r4, [r0, #0]
 801458a:	e7ed      	b.n	8014568 <_free_r+0x24>
 801458c:	4613      	mov	r3, r2
 801458e:	685a      	ldr	r2, [r3, #4]
 8014590:	b10a      	cbz	r2, 8014596 <_free_r+0x52>
 8014592:	42a2      	cmp	r2, r4
 8014594:	d9fa      	bls.n	801458c <_free_r+0x48>
 8014596:	6819      	ldr	r1, [r3, #0]
 8014598:	1858      	adds	r0, r3, r1
 801459a:	42a0      	cmp	r0, r4
 801459c:	d10b      	bne.n	80145b6 <_free_r+0x72>
 801459e:	6820      	ldr	r0, [r4, #0]
 80145a0:	4401      	add	r1, r0
 80145a2:	1858      	adds	r0, r3, r1
 80145a4:	4282      	cmp	r2, r0
 80145a6:	6019      	str	r1, [r3, #0]
 80145a8:	d1de      	bne.n	8014568 <_free_r+0x24>
 80145aa:	6810      	ldr	r0, [r2, #0]
 80145ac:	6852      	ldr	r2, [r2, #4]
 80145ae:	4401      	add	r1, r0
 80145b0:	6019      	str	r1, [r3, #0]
 80145b2:	605a      	str	r2, [r3, #4]
 80145b4:	e7d8      	b.n	8014568 <_free_r+0x24>
 80145b6:	d902      	bls.n	80145be <_free_r+0x7a>
 80145b8:	230c      	movs	r3, #12
 80145ba:	602b      	str	r3, [r5, #0]
 80145bc:	e7d4      	b.n	8014568 <_free_r+0x24>
 80145be:	6820      	ldr	r0, [r4, #0]
 80145c0:	1821      	adds	r1, r4, r0
 80145c2:	428a      	cmp	r2, r1
 80145c4:	bf01      	itttt	eq
 80145c6:	6811      	ldreq	r1, [r2, #0]
 80145c8:	6852      	ldreq	r2, [r2, #4]
 80145ca:	1809      	addeq	r1, r1, r0
 80145cc:	6021      	streq	r1, [r4, #0]
 80145ce:	6062      	str	r2, [r4, #4]
 80145d0:	605c      	str	r4, [r3, #4]
 80145d2:	e7c9      	b.n	8014568 <_free_r+0x24>
 80145d4:	bd38      	pop	{r3, r4, r5, pc}
 80145d6:	bf00      	nop
 80145d8:	200009a8 	.word	0x200009a8

080145dc <_malloc_r>:
 80145dc:	b570      	push	{r4, r5, r6, lr}
 80145de:	1ccd      	adds	r5, r1, #3
 80145e0:	f025 0503 	bic.w	r5, r5, #3
 80145e4:	3508      	adds	r5, #8
 80145e6:	2d0c      	cmp	r5, #12
 80145e8:	bf38      	it	cc
 80145ea:	250c      	movcc	r5, #12
 80145ec:	2d00      	cmp	r5, #0
 80145ee:	4606      	mov	r6, r0
 80145f0:	db01      	blt.n	80145f6 <_malloc_r+0x1a>
 80145f2:	42a9      	cmp	r1, r5
 80145f4:	d903      	bls.n	80145fe <_malloc_r+0x22>
 80145f6:	230c      	movs	r3, #12
 80145f8:	6033      	str	r3, [r6, #0]
 80145fa:	2000      	movs	r0, #0
 80145fc:	bd70      	pop	{r4, r5, r6, pc}
 80145fe:	f000 fd62 	bl	80150c6 <__malloc_lock>
 8014602:	4a21      	ldr	r2, [pc, #132]	; (8014688 <_malloc_r+0xac>)
 8014604:	6814      	ldr	r4, [r2, #0]
 8014606:	4621      	mov	r1, r4
 8014608:	b991      	cbnz	r1, 8014630 <_malloc_r+0x54>
 801460a:	4c20      	ldr	r4, [pc, #128]	; (801468c <_malloc_r+0xb0>)
 801460c:	6823      	ldr	r3, [r4, #0]
 801460e:	b91b      	cbnz	r3, 8014618 <_malloc_r+0x3c>
 8014610:	4630      	mov	r0, r6
 8014612:	f000 facd 	bl	8014bb0 <_sbrk_r>
 8014616:	6020      	str	r0, [r4, #0]
 8014618:	4629      	mov	r1, r5
 801461a:	4630      	mov	r0, r6
 801461c:	f000 fac8 	bl	8014bb0 <_sbrk_r>
 8014620:	1c43      	adds	r3, r0, #1
 8014622:	d124      	bne.n	801466e <_malloc_r+0x92>
 8014624:	230c      	movs	r3, #12
 8014626:	4630      	mov	r0, r6
 8014628:	6033      	str	r3, [r6, #0]
 801462a:	f000 fd4d 	bl	80150c8 <__malloc_unlock>
 801462e:	e7e4      	b.n	80145fa <_malloc_r+0x1e>
 8014630:	680b      	ldr	r3, [r1, #0]
 8014632:	1b5b      	subs	r3, r3, r5
 8014634:	d418      	bmi.n	8014668 <_malloc_r+0x8c>
 8014636:	2b0b      	cmp	r3, #11
 8014638:	d90f      	bls.n	801465a <_malloc_r+0x7e>
 801463a:	600b      	str	r3, [r1, #0]
 801463c:	18cc      	adds	r4, r1, r3
 801463e:	50cd      	str	r5, [r1, r3]
 8014640:	4630      	mov	r0, r6
 8014642:	f000 fd41 	bl	80150c8 <__malloc_unlock>
 8014646:	f104 000b 	add.w	r0, r4, #11
 801464a:	1d23      	adds	r3, r4, #4
 801464c:	f020 0007 	bic.w	r0, r0, #7
 8014650:	1ac3      	subs	r3, r0, r3
 8014652:	d0d3      	beq.n	80145fc <_malloc_r+0x20>
 8014654:	425a      	negs	r2, r3
 8014656:	50e2      	str	r2, [r4, r3]
 8014658:	e7d0      	b.n	80145fc <_malloc_r+0x20>
 801465a:	684b      	ldr	r3, [r1, #4]
 801465c:	428c      	cmp	r4, r1
 801465e:	bf16      	itet	ne
 8014660:	6063      	strne	r3, [r4, #4]
 8014662:	6013      	streq	r3, [r2, #0]
 8014664:	460c      	movne	r4, r1
 8014666:	e7eb      	b.n	8014640 <_malloc_r+0x64>
 8014668:	460c      	mov	r4, r1
 801466a:	6849      	ldr	r1, [r1, #4]
 801466c:	e7cc      	b.n	8014608 <_malloc_r+0x2c>
 801466e:	1cc4      	adds	r4, r0, #3
 8014670:	f024 0403 	bic.w	r4, r4, #3
 8014674:	42a0      	cmp	r0, r4
 8014676:	d005      	beq.n	8014684 <_malloc_r+0xa8>
 8014678:	1a21      	subs	r1, r4, r0
 801467a:	4630      	mov	r0, r6
 801467c:	f000 fa98 	bl	8014bb0 <_sbrk_r>
 8014680:	3001      	adds	r0, #1
 8014682:	d0cf      	beq.n	8014624 <_malloc_r+0x48>
 8014684:	6025      	str	r5, [r4, #0]
 8014686:	e7db      	b.n	8014640 <_malloc_r+0x64>
 8014688:	200009a8 	.word	0x200009a8
 801468c:	200009ac 	.word	0x200009ac

08014690 <__ssputs_r>:
 8014690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014694:	688e      	ldr	r6, [r1, #8]
 8014696:	4682      	mov	sl, r0
 8014698:	429e      	cmp	r6, r3
 801469a:	460c      	mov	r4, r1
 801469c:	4690      	mov	r8, r2
 801469e:	4699      	mov	r9, r3
 80146a0:	d837      	bhi.n	8014712 <__ssputs_r+0x82>
 80146a2:	898a      	ldrh	r2, [r1, #12]
 80146a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80146a8:	d031      	beq.n	801470e <__ssputs_r+0x7e>
 80146aa:	2302      	movs	r3, #2
 80146ac:	6825      	ldr	r5, [r4, #0]
 80146ae:	6909      	ldr	r1, [r1, #16]
 80146b0:	1a6f      	subs	r7, r5, r1
 80146b2:	6965      	ldr	r5, [r4, #20]
 80146b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80146b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80146bc:	f109 0301 	add.w	r3, r9, #1
 80146c0:	443b      	add	r3, r7
 80146c2:	429d      	cmp	r5, r3
 80146c4:	bf38      	it	cc
 80146c6:	461d      	movcc	r5, r3
 80146c8:	0553      	lsls	r3, r2, #21
 80146ca:	d530      	bpl.n	801472e <__ssputs_r+0x9e>
 80146cc:	4629      	mov	r1, r5
 80146ce:	f7ff ff85 	bl	80145dc <_malloc_r>
 80146d2:	4606      	mov	r6, r0
 80146d4:	b950      	cbnz	r0, 80146ec <__ssputs_r+0x5c>
 80146d6:	230c      	movs	r3, #12
 80146d8:	f04f 30ff 	mov.w	r0, #4294967295
 80146dc:	f8ca 3000 	str.w	r3, [sl]
 80146e0:	89a3      	ldrh	r3, [r4, #12]
 80146e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146e6:	81a3      	strh	r3, [r4, #12]
 80146e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146ec:	463a      	mov	r2, r7
 80146ee:	6921      	ldr	r1, [r4, #16]
 80146f0:	f7fc fcbc 	bl	801106c <memcpy>
 80146f4:	89a3      	ldrh	r3, [r4, #12]
 80146f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80146fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146fe:	81a3      	strh	r3, [r4, #12]
 8014700:	6126      	str	r6, [r4, #16]
 8014702:	443e      	add	r6, r7
 8014704:	6026      	str	r6, [r4, #0]
 8014706:	464e      	mov	r6, r9
 8014708:	6165      	str	r5, [r4, #20]
 801470a:	1bed      	subs	r5, r5, r7
 801470c:	60a5      	str	r5, [r4, #8]
 801470e:	454e      	cmp	r6, r9
 8014710:	d900      	bls.n	8014714 <__ssputs_r+0x84>
 8014712:	464e      	mov	r6, r9
 8014714:	4632      	mov	r2, r6
 8014716:	4641      	mov	r1, r8
 8014718:	6820      	ldr	r0, [r4, #0]
 801471a:	f000 fcbb 	bl	8015094 <memmove>
 801471e:	68a3      	ldr	r3, [r4, #8]
 8014720:	2000      	movs	r0, #0
 8014722:	1b9b      	subs	r3, r3, r6
 8014724:	60a3      	str	r3, [r4, #8]
 8014726:	6823      	ldr	r3, [r4, #0]
 8014728:	441e      	add	r6, r3
 801472a:	6026      	str	r6, [r4, #0]
 801472c:	e7dc      	b.n	80146e8 <__ssputs_r+0x58>
 801472e:	462a      	mov	r2, r5
 8014730:	f000 fccb 	bl	80150ca <_realloc_r>
 8014734:	4606      	mov	r6, r0
 8014736:	2800      	cmp	r0, #0
 8014738:	d1e2      	bne.n	8014700 <__ssputs_r+0x70>
 801473a:	6921      	ldr	r1, [r4, #16]
 801473c:	4650      	mov	r0, sl
 801473e:	f7ff ff01 	bl	8014544 <_free_r>
 8014742:	e7c8      	b.n	80146d6 <__ssputs_r+0x46>

08014744 <_svfiprintf_r>:
 8014744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014748:	461d      	mov	r5, r3
 801474a:	898b      	ldrh	r3, [r1, #12]
 801474c:	b09d      	sub	sp, #116	; 0x74
 801474e:	061f      	lsls	r7, r3, #24
 8014750:	4680      	mov	r8, r0
 8014752:	460c      	mov	r4, r1
 8014754:	4616      	mov	r6, r2
 8014756:	d50f      	bpl.n	8014778 <_svfiprintf_r+0x34>
 8014758:	690b      	ldr	r3, [r1, #16]
 801475a:	b96b      	cbnz	r3, 8014778 <_svfiprintf_r+0x34>
 801475c:	2140      	movs	r1, #64	; 0x40
 801475e:	f7ff ff3d 	bl	80145dc <_malloc_r>
 8014762:	6020      	str	r0, [r4, #0]
 8014764:	6120      	str	r0, [r4, #16]
 8014766:	b928      	cbnz	r0, 8014774 <_svfiprintf_r+0x30>
 8014768:	230c      	movs	r3, #12
 801476a:	f8c8 3000 	str.w	r3, [r8]
 801476e:	f04f 30ff 	mov.w	r0, #4294967295
 8014772:	e0c8      	b.n	8014906 <_svfiprintf_r+0x1c2>
 8014774:	2340      	movs	r3, #64	; 0x40
 8014776:	6163      	str	r3, [r4, #20]
 8014778:	2300      	movs	r3, #0
 801477a:	9309      	str	r3, [sp, #36]	; 0x24
 801477c:	2320      	movs	r3, #32
 801477e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014782:	2330      	movs	r3, #48	; 0x30
 8014784:	f04f 0b01 	mov.w	fp, #1
 8014788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801478c:	9503      	str	r5, [sp, #12]
 801478e:	4637      	mov	r7, r6
 8014790:	463d      	mov	r5, r7
 8014792:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014796:	b10b      	cbz	r3, 801479c <_svfiprintf_r+0x58>
 8014798:	2b25      	cmp	r3, #37	; 0x25
 801479a:	d13e      	bne.n	801481a <_svfiprintf_r+0xd6>
 801479c:	ebb7 0a06 	subs.w	sl, r7, r6
 80147a0:	d00b      	beq.n	80147ba <_svfiprintf_r+0x76>
 80147a2:	4653      	mov	r3, sl
 80147a4:	4632      	mov	r2, r6
 80147a6:	4621      	mov	r1, r4
 80147a8:	4640      	mov	r0, r8
 80147aa:	f7ff ff71 	bl	8014690 <__ssputs_r>
 80147ae:	3001      	adds	r0, #1
 80147b0:	f000 80a4 	beq.w	80148fc <_svfiprintf_r+0x1b8>
 80147b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147b6:	4453      	add	r3, sl
 80147b8:	9309      	str	r3, [sp, #36]	; 0x24
 80147ba:	783b      	ldrb	r3, [r7, #0]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	f000 809d 	beq.w	80148fc <_svfiprintf_r+0x1b8>
 80147c2:	2300      	movs	r3, #0
 80147c4:	f04f 32ff 	mov.w	r2, #4294967295
 80147c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147cc:	9304      	str	r3, [sp, #16]
 80147ce:	9307      	str	r3, [sp, #28]
 80147d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80147d4:	931a      	str	r3, [sp, #104]	; 0x68
 80147d6:	462f      	mov	r7, r5
 80147d8:	2205      	movs	r2, #5
 80147da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80147de:	4850      	ldr	r0, [pc, #320]	; (8014920 <_svfiprintf_r+0x1dc>)
 80147e0:	f7ff fa9c 	bl	8013d1c <memchr>
 80147e4:	9b04      	ldr	r3, [sp, #16]
 80147e6:	b9d0      	cbnz	r0, 801481e <_svfiprintf_r+0xda>
 80147e8:	06d9      	lsls	r1, r3, #27
 80147ea:	bf44      	itt	mi
 80147ec:	2220      	movmi	r2, #32
 80147ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80147f2:	071a      	lsls	r2, r3, #28
 80147f4:	bf44      	itt	mi
 80147f6:	222b      	movmi	r2, #43	; 0x2b
 80147f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80147fc:	782a      	ldrb	r2, [r5, #0]
 80147fe:	2a2a      	cmp	r2, #42	; 0x2a
 8014800:	d015      	beq.n	801482e <_svfiprintf_r+0xea>
 8014802:	462f      	mov	r7, r5
 8014804:	2000      	movs	r0, #0
 8014806:	250a      	movs	r5, #10
 8014808:	9a07      	ldr	r2, [sp, #28]
 801480a:	4639      	mov	r1, r7
 801480c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014810:	3b30      	subs	r3, #48	; 0x30
 8014812:	2b09      	cmp	r3, #9
 8014814:	d94d      	bls.n	80148b2 <_svfiprintf_r+0x16e>
 8014816:	b1b8      	cbz	r0, 8014848 <_svfiprintf_r+0x104>
 8014818:	e00f      	b.n	801483a <_svfiprintf_r+0xf6>
 801481a:	462f      	mov	r7, r5
 801481c:	e7b8      	b.n	8014790 <_svfiprintf_r+0x4c>
 801481e:	4a40      	ldr	r2, [pc, #256]	; (8014920 <_svfiprintf_r+0x1dc>)
 8014820:	463d      	mov	r5, r7
 8014822:	1a80      	subs	r0, r0, r2
 8014824:	fa0b f000 	lsl.w	r0, fp, r0
 8014828:	4318      	orrs	r0, r3
 801482a:	9004      	str	r0, [sp, #16]
 801482c:	e7d3      	b.n	80147d6 <_svfiprintf_r+0x92>
 801482e:	9a03      	ldr	r2, [sp, #12]
 8014830:	1d11      	adds	r1, r2, #4
 8014832:	6812      	ldr	r2, [r2, #0]
 8014834:	9103      	str	r1, [sp, #12]
 8014836:	2a00      	cmp	r2, #0
 8014838:	db01      	blt.n	801483e <_svfiprintf_r+0xfa>
 801483a:	9207      	str	r2, [sp, #28]
 801483c:	e004      	b.n	8014848 <_svfiprintf_r+0x104>
 801483e:	4252      	negs	r2, r2
 8014840:	f043 0302 	orr.w	r3, r3, #2
 8014844:	9207      	str	r2, [sp, #28]
 8014846:	9304      	str	r3, [sp, #16]
 8014848:	783b      	ldrb	r3, [r7, #0]
 801484a:	2b2e      	cmp	r3, #46	; 0x2e
 801484c:	d10c      	bne.n	8014868 <_svfiprintf_r+0x124>
 801484e:	787b      	ldrb	r3, [r7, #1]
 8014850:	2b2a      	cmp	r3, #42	; 0x2a
 8014852:	d133      	bne.n	80148bc <_svfiprintf_r+0x178>
 8014854:	9b03      	ldr	r3, [sp, #12]
 8014856:	3702      	adds	r7, #2
 8014858:	1d1a      	adds	r2, r3, #4
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	9203      	str	r2, [sp, #12]
 801485e:	2b00      	cmp	r3, #0
 8014860:	bfb8      	it	lt
 8014862:	f04f 33ff 	movlt.w	r3, #4294967295
 8014866:	9305      	str	r3, [sp, #20]
 8014868:	4d2e      	ldr	r5, [pc, #184]	; (8014924 <_svfiprintf_r+0x1e0>)
 801486a:	2203      	movs	r2, #3
 801486c:	7839      	ldrb	r1, [r7, #0]
 801486e:	4628      	mov	r0, r5
 8014870:	f7ff fa54 	bl	8013d1c <memchr>
 8014874:	b138      	cbz	r0, 8014886 <_svfiprintf_r+0x142>
 8014876:	2340      	movs	r3, #64	; 0x40
 8014878:	1b40      	subs	r0, r0, r5
 801487a:	fa03 f000 	lsl.w	r0, r3, r0
 801487e:	9b04      	ldr	r3, [sp, #16]
 8014880:	3701      	adds	r7, #1
 8014882:	4303      	orrs	r3, r0
 8014884:	9304      	str	r3, [sp, #16]
 8014886:	7839      	ldrb	r1, [r7, #0]
 8014888:	2206      	movs	r2, #6
 801488a:	4827      	ldr	r0, [pc, #156]	; (8014928 <_svfiprintf_r+0x1e4>)
 801488c:	1c7e      	adds	r6, r7, #1
 801488e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014892:	f7ff fa43 	bl	8013d1c <memchr>
 8014896:	2800      	cmp	r0, #0
 8014898:	d038      	beq.n	801490c <_svfiprintf_r+0x1c8>
 801489a:	4b24      	ldr	r3, [pc, #144]	; (801492c <_svfiprintf_r+0x1e8>)
 801489c:	bb13      	cbnz	r3, 80148e4 <_svfiprintf_r+0x1a0>
 801489e:	9b03      	ldr	r3, [sp, #12]
 80148a0:	3307      	adds	r3, #7
 80148a2:	f023 0307 	bic.w	r3, r3, #7
 80148a6:	3308      	adds	r3, #8
 80148a8:	9303      	str	r3, [sp, #12]
 80148aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148ac:	444b      	add	r3, r9
 80148ae:	9309      	str	r3, [sp, #36]	; 0x24
 80148b0:	e76d      	b.n	801478e <_svfiprintf_r+0x4a>
 80148b2:	fb05 3202 	mla	r2, r5, r2, r3
 80148b6:	2001      	movs	r0, #1
 80148b8:	460f      	mov	r7, r1
 80148ba:	e7a6      	b.n	801480a <_svfiprintf_r+0xc6>
 80148bc:	2300      	movs	r3, #0
 80148be:	250a      	movs	r5, #10
 80148c0:	4619      	mov	r1, r3
 80148c2:	3701      	adds	r7, #1
 80148c4:	9305      	str	r3, [sp, #20]
 80148c6:	4638      	mov	r0, r7
 80148c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148cc:	3a30      	subs	r2, #48	; 0x30
 80148ce:	2a09      	cmp	r2, #9
 80148d0:	d903      	bls.n	80148da <_svfiprintf_r+0x196>
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d0c8      	beq.n	8014868 <_svfiprintf_r+0x124>
 80148d6:	9105      	str	r1, [sp, #20]
 80148d8:	e7c6      	b.n	8014868 <_svfiprintf_r+0x124>
 80148da:	fb05 2101 	mla	r1, r5, r1, r2
 80148de:	2301      	movs	r3, #1
 80148e0:	4607      	mov	r7, r0
 80148e2:	e7f0      	b.n	80148c6 <_svfiprintf_r+0x182>
 80148e4:	ab03      	add	r3, sp, #12
 80148e6:	9300      	str	r3, [sp, #0]
 80148e8:	4622      	mov	r2, r4
 80148ea:	4b11      	ldr	r3, [pc, #68]	; (8014930 <_svfiprintf_r+0x1ec>)
 80148ec:	a904      	add	r1, sp, #16
 80148ee:	4640      	mov	r0, r8
 80148f0:	f7fc fc60 	bl	80111b4 <_printf_float>
 80148f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80148f8:	4681      	mov	r9, r0
 80148fa:	d1d6      	bne.n	80148aa <_svfiprintf_r+0x166>
 80148fc:	89a3      	ldrh	r3, [r4, #12]
 80148fe:	065b      	lsls	r3, r3, #25
 8014900:	f53f af35 	bmi.w	801476e <_svfiprintf_r+0x2a>
 8014904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014906:	b01d      	add	sp, #116	; 0x74
 8014908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801490c:	ab03      	add	r3, sp, #12
 801490e:	9300      	str	r3, [sp, #0]
 8014910:	4622      	mov	r2, r4
 8014912:	4b07      	ldr	r3, [pc, #28]	; (8014930 <_svfiprintf_r+0x1ec>)
 8014914:	a904      	add	r1, sp, #16
 8014916:	4640      	mov	r0, r8
 8014918:	f7fc fef8 	bl	801170c <_printf_i>
 801491c:	e7ea      	b.n	80148f4 <_svfiprintf_r+0x1b0>
 801491e:	bf00      	nop
 8014920:	08019dbc 	.word	0x08019dbc
 8014924:	08019dc2 	.word	0x08019dc2
 8014928:	08019dc6 	.word	0x08019dc6
 801492c:	080111b5 	.word	0x080111b5
 8014930:	08014691 	.word	0x08014691

08014934 <__sfputc_r>:
 8014934:	6893      	ldr	r3, [r2, #8]
 8014936:	b410      	push	{r4}
 8014938:	3b01      	subs	r3, #1
 801493a:	2b00      	cmp	r3, #0
 801493c:	6093      	str	r3, [r2, #8]
 801493e:	da07      	bge.n	8014950 <__sfputc_r+0x1c>
 8014940:	6994      	ldr	r4, [r2, #24]
 8014942:	42a3      	cmp	r3, r4
 8014944:	db01      	blt.n	801494a <__sfputc_r+0x16>
 8014946:	290a      	cmp	r1, #10
 8014948:	d102      	bne.n	8014950 <__sfputc_r+0x1c>
 801494a:	bc10      	pop	{r4}
 801494c:	f000 b99a 	b.w	8014c84 <__swbuf_r>
 8014950:	6813      	ldr	r3, [r2, #0]
 8014952:	1c58      	adds	r0, r3, #1
 8014954:	6010      	str	r0, [r2, #0]
 8014956:	7019      	strb	r1, [r3, #0]
 8014958:	4608      	mov	r0, r1
 801495a:	bc10      	pop	{r4}
 801495c:	4770      	bx	lr

0801495e <__sfputs_r>:
 801495e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014960:	4606      	mov	r6, r0
 8014962:	460f      	mov	r7, r1
 8014964:	4614      	mov	r4, r2
 8014966:	18d5      	adds	r5, r2, r3
 8014968:	42ac      	cmp	r4, r5
 801496a:	d101      	bne.n	8014970 <__sfputs_r+0x12>
 801496c:	2000      	movs	r0, #0
 801496e:	e007      	b.n	8014980 <__sfputs_r+0x22>
 8014970:	463a      	mov	r2, r7
 8014972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014976:	4630      	mov	r0, r6
 8014978:	f7ff ffdc 	bl	8014934 <__sfputc_r>
 801497c:	1c43      	adds	r3, r0, #1
 801497e:	d1f3      	bne.n	8014968 <__sfputs_r+0xa>
 8014980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014984 <_vfiprintf_r>:
 8014984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014988:	460c      	mov	r4, r1
 801498a:	b09d      	sub	sp, #116	; 0x74
 801498c:	4617      	mov	r7, r2
 801498e:	461d      	mov	r5, r3
 8014990:	4606      	mov	r6, r0
 8014992:	b118      	cbz	r0, 801499c <_vfiprintf_r+0x18>
 8014994:	6983      	ldr	r3, [r0, #24]
 8014996:	b90b      	cbnz	r3, 801499c <_vfiprintf_r+0x18>
 8014998:	f7fe fdf6 	bl	8013588 <__sinit>
 801499c:	4b7c      	ldr	r3, [pc, #496]	; (8014b90 <_vfiprintf_r+0x20c>)
 801499e:	429c      	cmp	r4, r3
 80149a0:	d158      	bne.n	8014a54 <_vfiprintf_r+0xd0>
 80149a2:	6874      	ldr	r4, [r6, #4]
 80149a4:	89a3      	ldrh	r3, [r4, #12]
 80149a6:	0718      	lsls	r0, r3, #28
 80149a8:	d55e      	bpl.n	8014a68 <_vfiprintf_r+0xe4>
 80149aa:	6923      	ldr	r3, [r4, #16]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d05b      	beq.n	8014a68 <_vfiprintf_r+0xe4>
 80149b0:	2300      	movs	r3, #0
 80149b2:	9309      	str	r3, [sp, #36]	; 0x24
 80149b4:	2320      	movs	r3, #32
 80149b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149ba:	2330      	movs	r3, #48	; 0x30
 80149bc:	f04f 0b01 	mov.w	fp, #1
 80149c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149c4:	9503      	str	r5, [sp, #12]
 80149c6:	46b8      	mov	r8, r7
 80149c8:	4645      	mov	r5, r8
 80149ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80149ce:	b10b      	cbz	r3, 80149d4 <_vfiprintf_r+0x50>
 80149d0:	2b25      	cmp	r3, #37	; 0x25
 80149d2:	d154      	bne.n	8014a7e <_vfiprintf_r+0xfa>
 80149d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80149d8:	d00b      	beq.n	80149f2 <_vfiprintf_r+0x6e>
 80149da:	4653      	mov	r3, sl
 80149dc:	463a      	mov	r2, r7
 80149de:	4621      	mov	r1, r4
 80149e0:	4630      	mov	r0, r6
 80149e2:	f7ff ffbc 	bl	801495e <__sfputs_r>
 80149e6:	3001      	adds	r0, #1
 80149e8:	f000 80c2 	beq.w	8014b70 <_vfiprintf_r+0x1ec>
 80149ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149ee:	4453      	add	r3, sl
 80149f0:	9309      	str	r3, [sp, #36]	; 0x24
 80149f2:	f898 3000 	ldrb.w	r3, [r8]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	f000 80ba 	beq.w	8014b70 <_vfiprintf_r+0x1ec>
 80149fc:	2300      	movs	r3, #0
 80149fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a06:	9304      	str	r3, [sp, #16]
 8014a08:	9307      	str	r3, [sp, #28]
 8014a0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a0e:	931a      	str	r3, [sp, #104]	; 0x68
 8014a10:	46a8      	mov	r8, r5
 8014a12:	2205      	movs	r2, #5
 8014a14:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014a18:	485e      	ldr	r0, [pc, #376]	; (8014b94 <_vfiprintf_r+0x210>)
 8014a1a:	f7ff f97f 	bl	8013d1c <memchr>
 8014a1e:	9b04      	ldr	r3, [sp, #16]
 8014a20:	bb78      	cbnz	r0, 8014a82 <_vfiprintf_r+0xfe>
 8014a22:	06d9      	lsls	r1, r3, #27
 8014a24:	bf44      	itt	mi
 8014a26:	2220      	movmi	r2, #32
 8014a28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014a2c:	071a      	lsls	r2, r3, #28
 8014a2e:	bf44      	itt	mi
 8014a30:	222b      	movmi	r2, #43	; 0x2b
 8014a32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014a36:	782a      	ldrb	r2, [r5, #0]
 8014a38:	2a2a      	cmp	r2, #42	; 0x2a
 8014a3a:	d02a      	beq.n	8014a92 <_vfiprintf_r+0x10e>
 8014a3c:	46a8      	mov	r8, r5
 8014a3e:	2000      	movs	r0, #0
 8014a40:	250a      	movs	r5, #10
 8014a42:	9a07      	ldr	r2, [sp, #28]
 8014a44:	4641      	mov	r1, r8
 8014a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a4a:	3b30      	subs	r3, #48	; 0x30
 8014a4c:	2b09      	cmp	r3, #9
 8014a4e:	d969      	bls.n	8014b24 <_vfiprintf_r+0x1a0>
 8014a50:	b360      	cbz	r0, 8014aac <_vfiprintf_r+0x128>
 8014a52:	e024      	b.n	8014a9e <_vfiprintf_r+0x11a>
 8014a54:	4b50      	ldr	r3, [pc, #320]	; (8014b98 <_vfiprintf_r+0x214>)
 8014a56:	429c      	cmp	r4, r3
 8014a58:	d101      	bne.n	8014a5e <_vfiprintf_r+0xda>
 8014a5a:	68b4      	ldr	r4, [r6, #8]
 8014a5c:	e7a2      	b.n	80149a4 <_vfiprintf_r+0x20>
 8014a5e:	4b4f      	ldr	r3, [pc, #316]	; (8014b9c <_vfiprintf_r+0x218>)
 8014a60:	429c      	cmp	r4, r3
 8014a62:	bf08      	it	eq
 8014a64:	68f4      	ldreq	r4, [r6, #12]
 8014a66:	e79d      	b.n	80149a4 <_vfiprintf_r+0x20>
 8014a68:	4621      	mov	r1, r4
 8014a6a:	4630      	mov	r0, r6
 8014a6c:	f000 f96e 	bl	8014d4c <__swsetup_r>
 8014a70:	2800      	cmp	r0, #0
 8014a72:	d09d      	beq.n	80149b0 <_vfiprintf_r+0x2c>
 8014a74:	f04f 30ff 	mov.w	r0, #4294967295
 8014a78:	b01d      	add	sp, #116	; 0x74
 8014a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a7e:	46a8      	mov	r8, r5
 8014a80:	e7a2      	b.n	80149c8 <_vfiprintf_r+0x44>
 8014a82:	4a44      	ldr	r2, [pc, #272]	; (8014b94 <_vfiprintf_r+0x210>)
 8014a84:	4645      	mov	r5, r8
 8014a86:	1a80      	subs	r0, r0, r2
 8014a88:	fa0b f000 	lsl.w	r0, fp, r0
 8014a8c:	4318      	orrs	r0, r3
 8014a8e:	9004      	str	r0, [sp, #16]
 8014a90:	e7be      	b.n	8014a10 <_vfiprintf_r+0x8c>
 8014a92:	9a03      	ldr	r2, [sp, #12]
 8014a94:	1d11      	adds	r1, r2, #4
 8014a96:	6812      	ldr	r2, [r2, #0]
 8014a98:	9103      	str	r1, [sp, #12]
 8014a9a:	2a00      	cmp	r2, #0
 8014a9c:	db01      	blt.n	8014aa2 <_vfiprintf_r+0x11e>
 8014a9e:	9207      	str	r2, [sp, #28]
 8014aa0:	e004      	b.n	8014aac <_vfiprintf_r+0x128>
 8014aa2:	4252      	negs	r2, r2
 8014aa4:	f043 0302 	orr.w	r3, r3, #2
 8014aa8:	9207      	str	r2, [sp, #28]
 8014aaa:	9304      	str	r3, [sp, #16]
 8014aac:	f898 3000 	ldrb.w	r3, [r8]
 8014ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8014ab2:	d10e      	bne.n	8014ad2 <_vfiprintf_r+0x14e>
 8014ab4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8014aba:	d138      	bne.n	8014b2e <_vfiprintf_r+0x1aa>
 8014abc:	9b03      	ldr	r3, [sp, #12]
 8014abe:	f108 0802 	add.w	r8, r8, #2
 8014ac2:	1d1a      	adds	r2, r3, #4
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	9203      	str	r2, [sp, #12]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	bfb8      	it	lt
 8014acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ad0:	9305      	str	r3, [sp, #20]
 8014ad2:	4d33      	ldr	r5, [pc, #204]	; (8014ba0 <_vfiprintf_r+0x21c>)
 8014ad4:	2203      	movs	r2, #3
 8014ad6:	f898 1000 	ldrb.w	r1, [r8]
 8014ada:	4628      	mov	r0, r5
 8014adc:	f7ff f91e 	bl	8013d1c <memchr>
 8014ae0:	b140      	cbz	r0, 8014af4 <_vfiprintf_r+0x170>
 8014ae2:	2340      	movs	r3, #64	; 0x40
 8014ae4:	1b40      	subs	r0, r0, r5
 8014ae6:	fa03 f000 	lsl.w	r0, r3, r0
 8014aea:	9b04      	ldr	r3, [sp, #16]
 8014aec:	f108 0801 	add.w	r8, r8, #1
 8014af0:	4303      	orrs	r3, r0
 8014af2:	9304      	str	r3, [sp, #16]
 8014af4:	f898 1000 	ldrb.w	r1, [r8]
 8014af8:	2206      	movs	r2, #6
 8014afa:	482a      	ldr	r0, [pc, #168]	; (8014ba4 <_vfiprintf_r+0x220>)
 8014afc:	f108 0701 	add.w	r7, r8, #1
 8014b00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b04:	f7ff f90a 	bl	8013d1c <memchr>
 8014b08:	2800      	cmp	r0, #0
 8014b0a:	d037      	beq.n	8014b7c <_vfiprintf_r+0x1f8>
 8014b0c:	4b26      	ldr	r3, [pc, #152]	; (8014ba8 <_vfiprintf_r+0x224>)
 8014b0e:	bb1b      	cbnz	r3, 8014b58 <_vfiprintf_r+0x1d4>
 8014b10:	9b03      	ldr	r3, [sp, #12]
 8014b12:	3307      	adds	r3, #7
 8014b14:	f023 0307 	bic.w	r3, r3, #7
 8014b18:	3308      	adds	r3, #8
 8014b1a:	9303      	str	r3, [sp, #12]
 8014b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b1e:	444b      	add	r3, r9
 8014b20:	9309      	str	r3, [sp, #36]	; 0x24
 8014b22:	e750      	b.n	80149c6 <_vfiprintf_r+0x42>
 8014b24:	fb05 3202 	mla	r2, r5, r2, r3
 8014b28:	2001      	movs	r0, #1
 8014b2a:	4688      	mov	r8, r1
 8014b2c:	e78a      	b.n	8014a44 <_vfiprintf_r+0xc0>
 8014b2e:	2300      	movs	r3, #0
 8014b30:	250a      	movs	r5, #10
 8014b32:	4619      	mov	r1, r3
 8014b34:	f108 0801 	add.w	r8, r8, #1
 8014b38:	9305      	str	r3, [sp, #20]
 8014b3a:	4640      	mov	r0, r8
 8014b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b40:	3a30      	subs	r2, #48	; 0x30
 8014b42:	2a09      	cmp	r2, #9
 8014b44:	d903      	bls.n	8014b4e <_vfiprintf_r+0x1ca>
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d0c3      	beq.n	8014ad2 <_vfiprintf_r+0x14e>
 8014b4a:	9105      	str	r1, [sp, #20]
 8014b4c:	e7c1      	b.n	8014ad2 <_vfiprintf_r+0x14e>
 8014b4e:	fb05 2101 	mla	r1, r5, r1, r2
 8014b52:	2301      	movs	r3, #1
 8014b54:	4680      	mov	r8, r0
 8014b56:	e7f0      	b.n	8014b3a <_vfiprintf_r+0x1b6>
 8014b58:	ab03      	add	r3, sp, #12
 8014b5a:	9300      	str	r3, [sp, #0]
 8014b5c:	4622      	mov	r2, r4
 8014b5e:	4b13      	ldr	r3, [pc, #76]	; (8014bac <_vfiprintf_r+0x228>)
 8014b60:	a904      	add	r1, sp, #16
 8014b62:	4630      	mov	r0, r6
 8014b64:	f7fc fb26 	bl	80111b4 <_printf_float>
 8014b68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014b6c:	4681      	mov	r9, r0
 8014b6e:	d1d5      	bne.n	8014b1c <_vfiprintf_r+0x198>
 8014b70:	89a3      	ldrh	r3, [r4, #12]
 8014b72:	065b      	lsls	r3, r3, #25
 8014b74:	f53f af7e 	bmi.w	8014a74 <_vfiprintf_r+0xf0>
 8014b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b7a:	e77d      	b.n	8014a78 <_vfiprintf_r+0xf4>
 8014b7c:	ab03      	add	r3, sp, #12
 8014b7e:	9300      	str	r3, [sp, #0]
 8014b80:	4622      	mov	r2, r4
 8014b82:	4b0a      	ldr	r3, [pc, #40]	; (8014bac <_vfiprintf_r+0x228>)
 8014b84:	a904      	add	r1, sp, #16
 8014b86:	4630      	mov	r0, r6
 8014b88:	f7fc fdc0 	bl	801170c <_printf_i>
 8014b8c:	e7ec      	b.n	8014b68 <_vfiprintf_r+0x1e4>
 8014b8e:	bf00      	nop
 8014b90:	08019c80 	.word	0x08019c80
 8014b94:	08019dbc 	.word	0x08019dbc
 8014b98:	08019ca0 	.word	0x08019ca0
 8014b9c:	08019c60 	.word	0x08019c60
 8014ba0:	08019dc2 	.word	0x08019dc2
 8014ba4:	08019dc6 	.word	0x08019dc6
 8014ba8:	080111b5 	.word	0x080111b5
 8014bac:	0801495f 	.word	0x0801495f

08014bb0 <_sbrk_r>:
 8014bb0:	b538      	push	{r3, r4, r5, lr}
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	4c05      	ldr	r4, [pc, #20]	; (8014bcc <_sbrk_r+0x1c>)
 8014bb6:	4605      	mov	r5, r0
 8014bb8:	4608      	mov	r0, r1
 8014bba:	6023      	str	r3, [r4, #0]
 8014bbc:	f7ec fe22 	bl	8001804 <_sbrk>
 8014bc0:	1c43      	adds	r3, r0, #1
 8014bc2:	d102      	bne.n	8014bca <_sbrk_r+0x1a>
 8014bc4:	6823      	ldr	r3, [r4, #0]
 8014bc6:	b103      	cbz	r3, 8014bca <_sbrk_r+0x1a>
 8014bc8:	602b      	str	r3, [r5, #0]
 8014bca:	bd38      	pop	{r3, r4, r5, pc}
 8014bcc:	2000157c 	.word	0x2000157c

08014bd0 <nanf>:
 8014bd0:	4800      	ldr	r0, [pc, #0]	; (8014bd4 <nanf+0x4>)
 8014bd2:	4770      	bx	lr
 8014bd4:	7fc00000 	.word	0x7fc00000

08014bd8 <__sread>:
 8014bd8:	b510      	push	{r4, lr}
 8014bda:	460c      	mov	r4, r1
 8014bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014be0:	f000 fa9a 	bl	8015118 <_read_r>
 8014be4:	2800      	cmp	r0, #0
 8014be6:	bfab      	itete	ge
 8014be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014bea:	89a3      	ldrhlt	r3, [r4, #12]
 8014bec:	181b      	addge	r3, r3, r0
 8014bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014bf2:	bfac      	ite	ge
 8014bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8014bf6:	81a3      	strhlt	r3, [r4, #12]
 8014bf8:	bd10      	pop	{r4, pc}

08014bfa <__swrite>:
 8014bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bfe:	461f      	mov	r7, r3
 8014c00:	898b      	ldrh	r3, [r1, #12]
 8014c02:	4605      	mov	r5, r0
 8014c04:	05db      	lsls	r3, r3, #23
 8014c06:	460c      	mov	r4, r1
 8014c08:	4616      	mov	r6, r2
 8014c0a:	d505      	bpl.n	8014c18 <__swrite+0x1e>
 8014c0c:	2302      	movs	r3, #2
 8014c0e:	2200      	movs	r2, #0
 8014c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c14:	f000 f9c8 	bl	8014fa8 <_lseek_r>
 8014c18:	89a3      	ldrh	r3, [r4, #12]
 8014c1a:	4632      	mov	r2, r6
 8014c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c20:	81a3      	strh	r3, [r4, #12]
 8014c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c26:	463b      	mov	r3, r7
 8014c28:	4628      	mov	r0, r5
 8014c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c2e:	f000 b87b 	b.w	8014d28 <_write_r>

08014c32 <__sseek>:
 8014c32:	b510      	push	{r4, lr}
 8014c34:	460c      	mov	r4, r1
 8014c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c3a:	f000 f9b5 	bl	8014fa8 <_lseek_r>
 8014c3e:	1c43      	adds	r3, r0, #1
 8014c40:	89a3      	ldrh	r3, [r4, #12]
 8014c42:	bf15      	itete	ne
 8014c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c4e:	81a3      	strheq	r3, [r4, #12]
 8014c50:	bf18      	it	ne
 8014c52:	81a3      	strhne	r3, [r4, #12]
 8014c54:	bd10      	pop	{r4, pc}

08014c56 <__sclose>:
 8014c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c5a:	f000 b8e5 	b.w	8014e28 <_close_r>

08014c5e <strncmp>:
 8014c5e:	b510      	push	{r4, lr}
 8014c60:	b16a      	cbz	r2, 8014c7e <strncmp+0x20>
 8014c62:	3901      	subs	r1, #1
 8014c64:	1884      	adds	r4, r0, r2
 8014c66:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014c6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014c6e:	4293      	cmp	r3, r2
 8014c70:	d103      	bne.n	8014c7a <strncmp+0x1c>
 8014c72:	42a0      	cmp	r0, r4
 8014c74:	d001      	beq.n	8014c7a <strncmp+0x1c>
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d1f5      	bne.n	8014c66 <strncmp+0x8>
 8014c7a:	1a98      	subs	r0, r3, r2
 8014c7c:	bd10      	pop	{r4, pc}
 8014c7e:	4610      	mov	r0, r2
 8014c80:	e7fc      	b.n	8014c7c <strncmp+0x1e>
	...

08014c84 <__swbuf_r>:
 8014c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c86:	460e      	mov	r6, r1
 8014c88:	4614      	mov	r4, r2
 8014c8a:	4605      	mov	r5, r0
 8014c8c:	b118      	cbz	r0, 8014c96 <__swbuf_r+0x12>
 8014c8e:	6983      	ldr	r3, [r0, #24]
 8014c90:	b90b      	cbnz	r3, 8014c96 <__swbuf_r+0x12>
 8014c92:	f7fe fc79 	bl	8013588 <__sinit>
 8014c96:	4b21      	ldr	r3, [pc, #132]	; (8014d1c <__swbuf_r+0x98>)
 8014c98:	429c      	cmp	r4, r3
 8014c9a:	d12a      	bne.n	8014cf2 <__swbuf_r+0x6e>
 8014c9c:	686c      	ldr	r4, [r5, #4]
 8014c9e:	69a3      	ldr	r3, [r4, #24]
 8014ca0:	60a3      	str	r3, [r4, #8]
 8014ca2:	89a3      	ldrh	r3, [r4, #12]
 8014ca4:	071a      	lsls	r2, r3, #28
 8014ca6:	d52e      	bpl.n	8014d06 <__swbuf_r+0x82>
 8014ca8:	6923      	ldr	r3, [r4, #16]
 8014caa:	b363      	cbz	r3, 8014d06 <__swbuf_r+0x82>
 8014cac:	6923      	ldr	r3, [r4, #16]
 8014cae:	6820      	ldr	r0, [r4, #0]
 8014cb0:	b2f6      	uxtb	r6, r6
 8014cb2:	1ac0      	subs	r0, r0, r3
 8014cb4:	6963      	ldr	r3, [r4, #20]
 8014cb6:	4637      	mov	r7, r6
 8014cb8:	4283      	cmp	r3, r0
 8014cba:	dc04      	bgt.n	8014cc6 <__swbuf_r+0x42>
 8014cbc:	4621      	mov	r1, r4
 8014cbe:	4628      	mov	r0, r5
 8014cc0:	f000 f948 	bl	8014f54 <_fflush_r>
 8014cc4:	bb28      	cbnz	r0, 8014d12 <__swbuf_r+0x8e>
 8014cc6:	68a3      	ldr	r3, [r4, #8]
 8014cc8:	3001      	adds	r0, #1
 8014cca:	3b01      	subs	r3, #1
 8014ccc:	60a3      	str	r3, [r4, #8]
 8014cce:	6823      	ldr	r3, [r4, #0]
 8014cd0:	1c5a      	adds	r2, r3, #1
 8014cd2:	6022      	str	r2, [r4, #0]
 8014cd4:	701e      	strb	r6, [r3, #0]
 8014cd6:	6963      	ldr	r3, [r4, #20]
 8014cd8:	4283      	cmp	r3, r0
 8014cda:	d004      	beq.n	8014ce6 <__swbuf_r+0x62>
 8014cdc:	89a3      	ldrh	r3, [r4, #12]
 8014cde:	07db      	lsls	r3, r3, #31
 8014ce0:	d519      	bpl.n	8014d16 <__swbuf_r+0x92>
 8014ce2:	2e0a      	cmp	r6, #10
 8014ce4:	d117      	bne.n	8014d16 <__swbuf_r+0x92>
 8014ce6:	4621      	mov	r1, r4
 8014ce8:	4628      	mov	r0, r5
 8014cea:	f000 f933 	bl	8014f54 <_fflush_r>
 8014cee:	b190      	cbz	r0, 8014d16 <__swbuf_r+0x92>
 8014cf0:	e00f      	b.n	8014d12 <__swbuf_r+0x8e>
 8014cf2:	4b0b      	ldr	r3, [pc, #44]	; (8014d20 <__swbuf_r+0x9c>)
 8014cf4:	429c      	cmp	r4, r3
 8014cf6:	d101      	bne.n	8014cfc <__swbuf_r+0x78>
 8014cf8:	68ac      	ldr	r4, [r5, #8]
 8014cfa:	e7d0      	b.n	8014c9e <__swbuf_r+0x1a>
 8014cfc:	4b09      	ldr	r3, [pc, #36]	; (8014d24 <__swbuf_r+0xa0>)
 8014cfe:	429c      	cmp	r4, r3
 8014d00:	bf08      	it	eq
 8014d02:	68ec      	ldreq	r4, [r5, #12]
 8014d04:	e7cb      	b.n	8014c9e <__swbuf_r+0x1a>
 8014d06:	4621      	mov	r1, r4
 8014d08:	4628      	mov	r0, r5
 8014d0a:	f000 f81f 	bl	8014d4c <__swsetup_r>
 8014d0e:	2800      	cmp	r0, #0
 8014d10:	d0cc      	beq.n	8014cac <__swbuf_r+0x28>
 8014d12:	f04f 37ff 	mov.w	r7, #4294967295
 8014d16:	4638      	mov	r0, r7
 8014d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	08019c80 	.word	0x08019c80
 8014d20:	08019ca0 	.word	0x08019ca0
 8014d24:	08019c60 	.word	0x08019c60

08014d28 <_write_r>:
 8014d28:	b538      	push	{r3, r4, r5, lr}
 8014d2a:	4605      	mov	r5, r0
 8014d2c:	4608      	mov	r0, r1
 8014d2e:	4611      	mov	r1, r2
 8014d30:	2200      	movs	r2, #0
 8014d32:	4c05      	ldr	r4, [pc, #20]	; (8014d48 <_write_r+0x20>)
 8014d34:	6022      	str	r2, [r4, #0]
 8014d36:	461a      	mov	r2, r3
 8014d38:	f7ec fd17 	bl	800176a <_write>
 8014d3c:	1c43      	adds	r3, r0, #1
 8014d3e:	d102      	bne.n	8014d46 <_write_r+0x1e>
 8014d40:	6823      	ldr	r3, [r4, #0]
 8014d42:	b103      	cbz	r3, 8014d46 <_write_r+0x1e>
 8014d44:	602b      	str	r3, [r5, #0]
 8014d46:	bd38      	pop	{r3, r4, r5, pc}
 8014d48:	2000157c 	.word	0x2000157c

08014d4c <__swsetup_r>:
 8014d4c:	4b32      	ldr	r3, [pc, #200]	; (8014e18 <__swsetup_r+0xcc>)
 8014d4e:	b570      	push	{r4, r5, r6, lr}
 8014d50:	681d      	ldr	r5, [r3, #0]
 8014d52:	4606      	mov	r6, r0
 8014d54:	460c      	mov	r4, r1
 8014d56:	b125      	cbz	r5, 8014d62 <__swsetup_r+0x16>
 8014d58:	69ab      	ldr	r3, [r5, #24]
 8014d5a:	b913      	cbnz	r3, 8014d62 <__swsetup_r+0x16>
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	f7fe fc13 	bl	8013588 <__sinit>
 8014d62:	4b2e      	ldr	r3, [pc, #184]	; (8014e1c <__swsetup_r+0xd0>)
 8014d64:	429c      	cmp	r4, r3
 8014d66:	d10f      	bne.n	8014d88 <__swsetup_r+0x3c>
 8014d68:	686c      	ldr	r4, [r5, #4]
 8014d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d6e:	b29a      	uxth	r2, r3
 8014d70:	0715      	lsls	r5, r2, #28
 8014d72:	d42c      	bmi.n	8014dce <__swsetup_r+0x82>
 8014d74:	06d0      	lsls	r0, r2, #27
 8014d76:	d411      	bmi.n	8014d9c <__swsetup_r+0x50>
 8014d78:	2209      	movs	r2, #9
 8014d7a:	6032      	str	r2, [r6, #0]
 8014d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d80:	81a3      	strh	r3, [r4, #12]
 8014d82:	f04f 30ff 	mov.w	r0, #4294967295
 8014d86:	e03e      	b.n	8014e06 <__swsetup_r+0xba>
 8014d88:	4b25      	ldr	r3, [pc, #148]	; (8014e20 <__swsetup_r+0xd4>)
 8014d8a:	429c      	cmp	r4, r3
 8014d8c:	d101      	bne.n	8014d92 <__swsetup_r+0x46>
 8014d8e:	68ac      	ldr	r4, [r5, #8]
 8014d90:	e7eb      	b.n	8014d6a <__swsetup_r+0x1e>
 8014d92:	4b24      	ldr	r3, [pc, #144]	; (8014e24 <__swsetup_r+0xd8>)
 8014d94:	429c      	cmp	r4, r3
 8014d96:	bf08      	it	eq
 8014d98:	68ec      	ldreq	r4, [r5, #12]
 8014d9a:	e7e6      	b.n	8014d6a <__swsetup_r+0x1e>
 8014d9c:	0751      	lsls	r1, r2, #29
 8014d9e:	d512      	bpl.n	8014dc6 <__swsetup_r+0x7a>
 8014da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014da2:	b141      	cbz	r1, 8014db6 <__swsetup_r+0x6a>
 8014da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014da8:	4299      	cmp	r1, r3
 8014daa:	d002      	beq.n	8014db2 <__swsetup_r+0x66>
 8014dac:	4630      	mov	r0, r6
 8014dae:	f7ff fbc9 	bl	8014544 <_free_r>
 8014db2:	2300      	movs	r3, #0
 8014db4:	6363      	str	r3, [r4, #52]	; 0x34
 8014db6:	89a3      	ldrh	r3, [r4, #12]
 8014db8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014dbc:	81a3      	strh	r3, [r4, #12]
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	6063      	str	r3, [r4, #4]
 8014dc2:	6923      	ldr	r3, [r4, #16]
 8014dc4:	6023      	str	r3, [r4, #0]
 8014dc6:	89a3      	ldrh	r3, [r4, #12]
 8014dc8:	f043 0308 	orr.w	r3, r3, #8
 8014dcc:	81a3      	strh	r3, [r4, #12]
 8014dce:	6923      	ldr	r3, [r4, #16]
 8014dd0:	b94b      	cbnz	r3, 8014de6 <__swsetup_r+0x9a>
 8014dd2:	89a3      	ldrh	r3, [r4, #12]
 8014dd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ddc:	d003      	beq.n	8014de6 <__swsetup_r+0x9a>
 8014dde:	4621      	mov	r1, r4
 8014de0:	4630      	mov	r0, r6
 8014de2:	f000 f917 	bl	8015014 <__smakebuf_r>
 8014de6:	89a2      	ldrh	r2, [r4, #12]
 8014de8:	f012 0301 	ands.w	r3, r2, #1
 8014dec:	d00c      	beq.n	8014e08 <__swsetup_r+0xbc>
 8014dee:	2300      	movs	r3, #0
 8014df0:	60a3      	str	r3, [r4, #8]
 8014df2:	6963      	ldr	r3, [r4, #20]
 8014df4:	425b      	negs	r3, r3
 8014df6:	61a3      	str	r3, [r4, #24]
 8014df8:	6923      	ldr	r3, [r4, #16]
 8014dfa:	b953      	cbnz	r3, 8014e12 <__swsetup_r+0xc6>
 8014dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014e04:	d1ba      	bne.n	8014d7c <__swsetup_r+0x30>
 8014e06:	bd70      	pop	{r4, r5, r6, pc}
 8014e08:	0792      	lsls	r2, r2, #30
 8014e0a:	bf58      	it	pl
 8014e0c:	6963      	ldrpl	r3, [r4, #20]
 8014e0e:	60a3      	str	r3, [r4, #8]
 8014e10:	e7f2      	b.n	8014df8 <__swsetup_r+0xac>
 8014e12:	2000      	movs	r0, #0
 8014e14:	e7f7      	b.n	8014e06 <__swsetup_r+0xba>
 8014e16:	bf00      	nop
 8014e18:	20000060 	.word	0x20000060
 8014e1c:	08019c80 	.word	0x08019c80
 8014e20:	08019ca0 	.word	0x08019ca0
 8014e24:	08019c60 	.word	0x08019c60

08014e28 <_close_r>:
 8014e28:	b538      	push	{r3, r4, r5, lr}
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	4c05      	ldr	r4, [pc, #20]	; (8014e44 <_close_r+0x1c>)
 8014e2e:	4605      	mov	r5, r0
 8014e30:	4608      	mov	r0, r1
 8014e32:	6023      	str	r3, [r4, #0]
 8014e34:	f7ec fcb5 	bl	80017a2 <_close>
 8014e38:	1c43      	adds	r3, r0, #1
 8014e3a:	d102      	bne.n	8014e42 <_close_r+0x1a>
 8014e3c:	6823      	ldr	r3, [r4, #0]
 8014e3e:	b103      	cbz	r3, 8014e42 <_close_r+0x1a>
 8014e40:	602b      	str	r3, [r5, #0]
 8014e42:	bd38      	pop	{r3, r4, r5, pc}
 8014e44:	2000157c 	.word	0x2000157c

08014e48 <__sflush_r>:
 8014e48:	898a      	ldrh	r2, [r1, #12]
 8014e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e4e:	4605      	mov	r5, r0
 8014e50:	0710      	lsls	r0, r2, #28
 8014e52:	460c      	mov	r4, r1
 8014e54:	d458      	bmi.n	8014f08 <__sflush_r+0xc0>
 8014e56:	684b      	ldr	r3, [r1, #4]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	dc05      	bgt.n	8014e68 <__sflush_r+0x20>
 8014e5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	dc02      	bgt.n	8014e68 <__sflush_r+0x20>
 8014e62:	2000      	movs	r0, #0
 8014e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e6a:	2e00      	cmp	r6, #0
 8014e6c:	d0f9      	beq.n	8014e62 <__sflush_r+0x1a>
 8014e6e:	2300      	movs	r3, #0
 8014e70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e74:	682f      	ldr	r7, [r5, #0]
 8014e76:	6a21      	ldr	r1, [r4, #32]
 8014e78:	602b      	str	r3, [r5, #0]
 8014e7a:	d032      	beq.n	8014ee2 <__sflush_r+0x9a>
 8014e7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e7e:	89a3      	ldrh	r3, [r4, #12]
 8014e80:	075a      	lsls	r2, r3, #29
 8014e82:	d505      	bpl.n	8014e90 <__sflush_r+0x48>
 8014e84:	6863      	ldr	r3, [r4, #4]
 8014e86:	1ac0      	subs	r0, r0, r3
 8014e88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e8a:	b10b      	cbz	r3, 8014e90 <__sflush_r+0x48>
 8014e8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e8e:	1ac0      	subs	r0, r0, r3
 8014e90:	2300      	movs	r3, #0
 8014e92:	4602      	mov	r2, r0
 8014e94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e96:	6a21      	ldr	r1, [r4, #32]
 8014e98:	4628      	mov	r0, r5
 8014e9a:	47b0      	blx	r6
 8014e9c:	1c43      	adds	r3, r0, #1
 8014e9e:	89a3      	ldrh	r3, [r4, #12]
 8014ea0:	d106      	bne.n	8014eb0 <__sflush_r+0x68>
 8014ea2:	6829      	ldr	r1, [r5, #0]
 8014ea4:	291d      	cmp	r1, #29
 8014ea6:	d848      	bhi.n	8014f3a <__sflush_r+0xf2>
 8014ea8:	4a29      	ldr	r2, [pc, #164]	; (8014f50 <__sflush_r+0x108>)
 8014eaa:	40ca      	lsrs	r2, r1
 8014eac:	07d6      	lsls	r6, r2, #31
 8014eae:	d544      	bpl.n	8014f3a <__sflush_r+0xf2>
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	6062      	str	r2, [r4, #4]
 8014eb4:	6922      	ldr	r2, [r4, #16]
 8014eb6:	04d9      	lsls	r1, r3, #19
 8014eb8:	6022      	str	r2, [r4, #0]
 8014eba:	d504      	bpl.n	8014ec6 <__sflush_r+0x7e>
 8014ebc:	1c42      	adds	r2, r0, #1
 8014ebe:	d101      	bne.n	8014ec4 <__sflush_r+0x7c>
 8014ec0:	682b      	ldr	r3, [r5, #0]
 8014ec2:	b903      	cbnz	r3, 8014ec6 <__sflush_r+0x7e>
 8014ec4:	6560      	str	r0, [r4, #84]	; 0x54
 8014ec6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ec8:	602f      	str	r7, [r5, #0]
 8014eca:	2900      	cmp	r1, #0
 8014ecc:	d0c9      	beq.n	8014e62 <__sflush_r+0x1a>
 8014ece:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ed2:	4299      	cmp	r1, r3
 8014ed4:	d002      	beq.n	8014edc <__sflush_r+0x94>
 8014ed6:	4628      	mov	r0, r5
 8014ed8:	f7ff fb34 	bl	8014544 <_free_r>
 8014edc:	2000      	movs	r0, #0
 8014ede:	6360      	str	r0, [r4, #52]	; 0x34
 8014ee0:	e7c0      	b.n	8014e64 <__sflush_r+0x1c>
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	4628      	mov	r0, r5
 8014ee6:	47b0      	blx	r6
 8014ee8:	1c41      	adds	r1, r0, #1
 8014eea:	d1c8      	bne.n	8014e7e <__sflush_r+0x36>
 8014eec:	682b      	ldr	r3, [r5, #0]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d0c5      	beq.n	8014e7e <__sflush_r+0x36>
 8014ef2:	2b1d      	cmp	r3, #29
 8014ef4:	d001      	beq.n	8014efa <__sflush_r+0xb2>
 8014ef6:	2b16      	cmp	r3, #22
 8014ef8:	d101      	bne.n	8014efe <__sflush_r+0xb6>
 8014efa:	602f      	str	r7, [r5, #0]
 8014efc:	e7b1      	b.n	8014e62 <__sflush_r+0x1a>
 8014efe:	89a3      	ldrh	r3, [r4, #12]
 8014f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f04:	81a3      	strh	r3, [r4, #12]
 8014f06:	e7ad      	b.n	8014e64 <__sflush_r+0x1c>
 8014f08:	690f      	ldr	r7, [r1, #16]
 8014f0a:	2f00      	cmp	r7, #0
 8014f0c:	d0a9      	beq.n	8014e62 <__sflush_r+0x1a>
 8014f0e:	0793      	lsls	r3, r2, #30
 8014f10:	bf18      	it	ne
 8014f12:	2300      	movne	r3, #0
 8014f14:	680e      	ldr	r6, [r1, #0]
 8014f16:	bf08      	it	eq
 8014f18:	694b      	ldreq	r3, [r1, #20]
 8014f1a:	eba6 0807 	sub.w	r8, r6, r7
 8014f1e:	600f      	str	r7, [r1, #0]
 8014f20:	608b      	str	r3, [r1, #8]
 8014f22:	f1b8 0f00 	cmp.w	r8, #0
 8014f26:	dd9c      	ble.n	8014e62 <__sflush_r+0x1a>
 8014f28:	4643      	mov	r3, r8
 8014f2a:	463a      	mov	r2, r7
 8014f2c:	6a21      	ldr	r1, [r4, #32]
 8014f2e:	4628      	mov	r0, r5
 8014f30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f32:	47b0      	blx	r6
 8014f34:	2800      	cmp	r0, #0
 8014f36:	dc06      	bgt.n	8014f46 <__sflush_r+0xfe>
 8014f38:	89a3      	ldrh	r3, [r4, #12]
 8014f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f3e:	81a3      	strh	r3, [r4, #12]
 8014f40:	f04f 30ff 	mov.w	r0, #4294967295
 8014f44:	e78e      	b.n	8014e64 <__sflush_r+0x1c>
 8014f46:	4407      	add	r7, r0
 8014f48:	eba8 0800 	sub.w	r8, r8, r0
 8014f4c:	e7e9      	b.n	8014f22 <__sflush_r+0xda>
 8014f4e:	bf00      	nop
 8014f50:	20400001 	.word	0x20400001

08014f54 <_fflush_r>:
 8014f54:	b538      	push	{r3, r4, r5, lr}
 8014f56:	690b      	ldr	r3, [r1, #16]
 8014f58:	4605      	mov	r5, r0
 8014f5a:	460c      	mov	r4, r1
 8014f5c:	b1db      	cbz	r3, 8014f96 <_fflush_r+0x42>
 8014f5e:	b118      	cbz	r0, 8014f68 <_fflush_r+0x14>
 8014f60:	6983      	ldr	r3, [r0, #24]
 8014f62:	b90b      	cbnz	r3, 8014f68 <_fflush_r+0x14>
 8014f64:	f7fe fb10 	bl	8013588 <__sinit>
 8014f68:	4b0c      	ldr	r3, [pc, #48]	; (8014f9c <_fflush_r+0x48>)
 8014f6a:	429c      	cmp	r4, r3
 8014f6c:	d109      	bne.n	8014f82 <_fflush_r+0x2e>
 8014f6e:	686c      	ldr	r4, [r5, #4]
 8014f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f74:	b17b      	cbz	r3, 8014f96 <_fflush_r+0x42>
 8014f76:	4621      	mov	r1, r4
 8014f78:	4628      	mov	r0, r5
 8014f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f7e:	f7ff bf63 	b.w	8014e48 <__sflush_r>
 8014f82:	4b07      	ldr	r3, [pc, #28]	; (8014fa0 <_fflush_r+0x4c>)
 8014f84:	429c      	cmp	r4, r3
 8014f86:	d101      	bne.n	8014f8c <_fflush_r+0x38>
 8014f88:	68ac      	ldr	r4, [r5, #8]
 8014f8a:	e7f1      	b.n	8014f70 <_fflush_r+0x1c>
 8014f8c:	4b05      	ldr	r3, [pc, #20]	; (8014fa4 <_fflush_r+0x50>)
 8014f8e:	429c      	cmp	r4, r3
 8014f90:	bf08      	it	eq
 8014f92:	68ec      	ldreq	r4, [r5, #12]
 8014f94:	e7ec      	b.n	8014f70 <_fflush_r+0x1c>
 8014f96:	2000      	movs	r0, #0
 8014f98:	bd38      	pop	{r3, r4, r5, pc}
 8014f9a:	bf00      	nop
 8014f9c:	08019c80 	.word	0x08019c80
 8014fa0:	08019ca0 	.word	0x08019ca0
 8014fa4:	08019c60 	.word	0x08019c60

08014fa8 <_lseek_r>:
 8014fa8:	b538      	push	{r3, r4, r5, lr}
 8014faa:	4605      	mov	r5, r0
 8014fac:	4608      	mov	r0, r1
 8014fae:	4611      	mov	r1, r2
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	4c05      	ldr	r4, [pc, #20]	; (8014fc8 <_lseek_r+0x20>)
 8014fb4:	6022      	str	r2, [r4, #0]
 8014fb6:	461a      	mov	r2, r3
 8014fb8:	f7ec fc17 	bl	80017ea <_lseek>
 8014fbc:	1c43      	adds	r3, r0, #1
 8014fbe:	d102      	bne.n	8014fc6 <_lseek_r+0x1e>
 8014fc0:	6823      	ldr	r3, [r4, #0]
 8014fc2:	b103      	cbz	r3, 8014fc6 <_lseek_r+0x1e>
 8014fc4:	602b      	str	r3, [r5, #0]
 8014fc6:	bd38      	pop	{r3, r4, r5, pc}
 8014fc8:	2000157c 	.word	0x2000157c

08014fcc <__swhatbuf_r>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	460e      	mov	r6, r1
 8014fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fd4:	b096      	sub	sp, #88	; 0x58
 8014fd6:	2900      	cmp	r1, #0
 8014fd8:	4614      	mov	r4, r2
 8014fda:	461d      	mov	r5, r3
 8014fdc:	da07      	bge.n	8014fee <__swhatbuf_r+0x22>
 8014fde:	2300      	movs	r3, #0
 8014fe0:	602b      	str	r3, [r5, #0]
 8014fe2:	89b3      	ldrh	r3, [r6, #12]
 8014fe4:	061a      	lsls	r2, r3, #24
 8014fe6:	d410      	bmi.n	801500a <__swhatbuf_r+0x3e>
 8014fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014fec:	e00e      	b.n	801500c <__swhatbuf_r+0x40>
 8014fee:	466a      	mov	r2, sp
 8014ff0:	f000 f8a4 	bl	801513c <_fstat_r>
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	dbf2      	blt.n	8014fde <__swhatbuf_r+0x12>
 8014ff8:	9a01      	ldr	r2, [sp, #4]
 8014ffa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014ffe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015002:	425a      	negs	r2, r3
 8015004:	415a      	adcs	r2, r3
 8015006:	602a      	str	r2, [r5, #0]
 8015008:	e7ee      	b.n	8014fe8 <__swhatbuf_r+0x1c>
 801500a:	2340      	movs	r3, #64	; 0x40
 801500c:	2000      	movs	r0, #0
 801500e:	6023      	str	r3, [r4, #0]
 8015010:	b016      	add	sp, #88	; 0x58
 8015012:	bd70      	pop	{r4, r5, r6, pc}

08015014 <__smakebuf_r>:
 8015014:	898b      	ldrh	r3, [r1, #12]
 8015016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015018:	079d      	lsls	r5, r3, #30
 801501a:	4606      	mov	r6, r0
 801501c:	460c      	mov	r4, r1
 801501e:	d507      	bpl.n	8015030 <__smakebuf_r+0x1c>
 8015020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015024:	6023      	str	r3, [r4, #0]
 8015026:	6123      	str	r3, [r4, #16]
 8015028:	2301      	movs	r3, #1
 801502a:	6163      	str	r3, [r4, #20]
 801502c:	b002      	add	sp, #8
 801502e:	bd70      	pop	{r4, r5, r6, pc}
 8015030:	ab01      	add	r3, sp, #4
 8015032:	466a      	mov	r2, sp
 8015034:	f7ff ffca 	bl	8014fcc <__swhatbuf_r>
 8015038:	9900      	ldr	r1, [sp, #0]
 801503a:	4605      	mov	r5, r0
 801503c:	4630      	mov	r0, r6
 801503e:	f7ff facd 	bl	80145dc <_malloc_r>
 8015042:	b948      	cbnz	r0, 8015058 <__smakebuf_r+0x44>
 8015044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015048:	059a      	lsls	r2, r3, #22
 801504a:	d4ef      	bmi.n	801502c <__smakebuf_r+0x18>
 801504c:	f023 0303 	bic.w	r3, r3, #3
 8015050:	f043 0302 	orr.w	r3, r3, #2
 8015054:	81a3      	strh	r3, [r4, #12]
 8015056:	e7e3      	b.n	8015020 <__smakebuf_r+0xc>
 8015058:	4b0d      	ldr	r3, [pc, #52]	; (8015090 <__smakebuf_r+0x7c>)
 801505a:	62b3      	str	r3, [r6, #40]	; 0x28
 801505c:	89a3      	ldrh	r3, [r4, #12]
 801505e:	6020      	str	r0, [r4, #0]
 8015060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015064:	81a3      	strh	r3, [r4, #12]
 8015066:	9b00      	ldr	r3, [sp, #0]
 8015068:	6120      	str	r0, [r4, #16]
 801506a:	6163      	str	r3, [r4, #20]
 801506c:	9b01      	ldr	r3, [sp, #4]
 801506e:	b15b      	cbz	r3, 8015088 <__smakebuf_r+0x74>
 8015070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015074:	4630      	mov	r0, r6
 8015076:	f000 f873 	bl	8015160 <_isatty_r>
 801507a:	b128      	cbz	r0, 8015088 <__smakebuf_r+0x74>
 801507c:	89a3      	ldrh	r3, [r4, #12]
 801507e:	f023 0303 	bic.w	r3, r3, #3
 8015082:	f043 0301 	orr.w	r3, r3, #1
 8015086:	81a3      	strh	r3, [r4, #12]
 8015088:	89a3      	ldrh	r3, [r4, #12]
 801508a:	431d      	orrs	r5, r3
 801508c:	81a5      	strh	r5, [r4, #12]
 801508e:	e7cd      	b.n	801502c <__smakebuf_r+0x18>
 8015090:	08013551 	.word	0x08013551

08015094 <memmove>:
 8015094:	4288      	cmp	r0, r1
 8015096:	b510      	push	{r4, lr}
 8015098:	eb01 0302 	add.w	r3, r1, r2
 801509c:	d807      	bhi.n	80150ae <memmove+0x1a>
 801509e:	1e42      	subs	r2, r0, #1
 80150a0:	4299      	cmp	r1, r3
 80150a2:	d00a      	beq.n	80150ba <memmove+0x26>
 80150a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80150a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80150ac:	e7f8      	b.n	80150a0 <memmove+0xc>
 80150ae:	4283      	cmp	r3, r0
 80150b0:	d9f5      	bls.n	801509e <memmove+0xa>
 80150b2:	1881      	adds	r1, r0, r2
 80150b4:	1ad2      	subs	r2, r2, r3
 80150b6:	42d3      	cmn	r3, r2
 80150b8:	d100      	bne.n	80150bc <memmove+0x28>
 80150ba:	bd10      	pop	{r4, pc}
 80150bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80150c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80150c4:	e7f7      	b.n	80150b6 <memmove+0x22>

080150c6 <__malloc_lock>:
 80150c6:	4770      	bx	lr

080150c8 <__malloc_unlock>:
 80150c8:	4770      	bx	lr

080150ca <_realloc_r>:
 80150ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150cc:	4607      	mov	r7, r0
 80150ce:	4614      	mov	r4, r2
 80150d0:	460e      	mov	r6, r1
 80150d2:	b921      	cbnz	r1, 80150de <_realloc_r+0x14>
 80150d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80150d8:	4611      	mov	r1, r2
 80150da:	f7ff ba7f 	b.w	80145dc <_malloc_r>
 80150de:	b922      	cbnz	r2, 80150ea <_realloc_r+0x20>
 80150e0:	f7ff fa30 	bl	8014544 <_free_r>
 80150e4:	4625      	mov	r5, r4
 80150e6:	4628      	mov	r0, r5
 80150e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150ea:	f000 f849 	bl	8015180 <_malloc_usable_size_r>
 80150ee:	42a0      	cmp	r0, r4
 80150f0:	d20f      	bcs.n	8015112 <_realloc_r+0x48>
 80150f2:	4621      	mov	r1, r4
 80150f4:	4638      	mov	r0, r7
 80150f6:	f7ff fa71 	bl	80145dc <_malloc_r>
 80150fa:	4605      	mov	r5, r0
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d0f2      	beq.n	80150e6 <_realloc_r+0x1c>
 8015100:	4631      	mov	r1, r6
 8015102:	4622      	mov	r2, r4
 8015104:	f7fb ffb2 	bl	801106c <memcpy>
 8015108:	4631      	mov	r1, r6
 801510a:	4638      	mov	r0, r7
 801510c:	f7ff fa1a 	bl	8014544 <_free_r>
 8015110:	e7e9      	b.n	80150e6 <_realloc_r+0x1c>
 8015112:	4635      	mov	r5, r6
 8015114:	e7e7      	b.n	80150e6 <_realloc_r+0x1c>
	...

08015118 <_read_r>:
 8015118:	b538      	push	{r3, r4, r5, lr}
 801511a:	4605      	mov	r5, r0
 801511c:	4608      	mov	r0, r1
 801511e:	4611      	mov	r1, r2
 8015120:	2200      	movs	r2, #0
 8015122:	4c05      	ldr	r4, [pc, #20]	; (8015138 <_read_r+0x20>)
 8015124:	6022      	str	r2, [r4, #0]
 8015126:	461a      	mov	r2, r3
 8015128:	f7ec fb02 	bl	8001730 <_read>
 801512c:	1c43      	adds	r3, r0, #1
 801512e:	d102      	bne.n	8015136 <_read_r+0x1e>
 8015130:	6823      	ldr	r3, [r4, #0]
 8015132:	b103      	cbz	r3, 8015136 <_read_r+0x1e>
 8015134:	602b      	str	r3, [r5, #0]
 8015136:	bd38      	pop	{r3, r4, r5, pc}
 8015138:	2000157c 	.word	0x2000157c

0801513c <_fstat_r>:
 801513c:	b538      	push	{r3, r4, r5, lr}
 801513e:	2300      	movs	r3, #0
 8015140:	4c06      	ldr	r4, [pc, #24]	; (801515c <_fstat_r+0x20>)
 8015142:	4605      	mov	r5, r0
 8015144:	4608      	mov	r0, r1
 8015146:	4611      	mov	r1, r2
 8015148:	6023      	str	r3, [r4, #0]
 801514a:	f7ec fb35 	bl	80017b8 <_fstat>
 801514e:	1c43      	adds	r3, r0, #1
 8015150:	d102      	bne.n	8015158 <_fstat_r+0x1c>
 8015152:	6823      	ldr	r3, [r4, #0]
 8015154:	b103      	cbz	r3, 8015158 <_fstat_r+0x1c>
 8015156:	602b      	str	r3, [r5, #0]
 8015158:	bd38      	pop	{r3, r4, r5, pc}
 801515a:	bf00      	nop
 801515c:	2000157c 	.word	0x2000157c

08015160 <_isatty_r>:
 8015160:	b538      	push	{r3, r4, r5, lr}
 8015162:	2300      	movs	r3, #0
 8015164:	4c05      	ldr	r4, [pc, #20]	; (801517c <_isatty_r+0x1c>)
 8015166:	4605      	mov	r5, r0
 8015168:	4608      	mov	r0, r1
 801516a:	6023      	str	r3, [r4, #0]
 801516c:	f7ec fb33 	bl	80017d6 <_isatty>
 8015170:	1c43      	adds	r3, r0, #1
 8015172:	d102      	bne.n	801517a <_isatty_r+0x1a>
 8015174:	6823      	ldr	r3, [r4, #0]
 8015176:	b103      	cbz	r3, 801517a <_isatty_r+0x1a>
 8015178:	602b      	str	r3, [r5, #0]
 801517a:	bd38      	pop	{r3, r4, r5, pc}
 801517c:	2000157c 	.word	0x2000157c

08015180 <_malloc_usable_size_r>:
 8015180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015184:	1f18      	subs	r0, r3, #4
 8015186:	2b00      	cmp	r3, #0
 8015188:	bfbc      	itt	lt
 801518a:	580b      	ldrlt	r3, [r1, r0]
 801518c:	18c0      	addlt	r0, r0, r3
 801518e:	4770      	bx	lr

08015190 <cos>:
 8015190:	b530      	push	{r4, r5, lr}
 8015192:	4a18      	ldr	r2, [pc, #96]	; (80151f4 <cos+0x64>)
 8015194:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015198:	4293      	cmp	r3, r2
 801519a:	b087      	sub	sp, #28
 801519c:	dc04      	bgt.n	80151a8 <cos+0x18>
 801519e:	2200      	movs	r2, #0
 80151a0:	2300      	movs	r3, #0
 80151a2:	f002 fd25 	bl	8017bf0 <__kernel_cos>
 80151a6:	e006      	b.n	80151b6 <cos+0x26>
 80151a8:	4a13      	ldr	r2, [pc, #76]	; (80151f8 <cos+0x68>)
 80151aa:	4293      	cmp	r3, r2
 80151ac:	dd05      	ble.n	80151ba <cos+0x2a>
 80151ae:	4602      	mov	r2, r0
 80151b0:	460b      	mov	r3, r1
 80151b2:	f7ea fff3 	bl	800019c <__aeabi_dsub>
 80151b6:	b007      	add	sp, #28
 80151b8:	bd30      	pop	{r4, r5, pc}
 80151ba:	aa02      	add	r2, sp, #8
 80151bc:	f001 fbb0 	bl	8016920 <__ieee754_rem_pio2>
 80151c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80151c4:	f000 0403 	and.w	r4, r0, #3
 80151c8:	2c01      	cmp	r4, #1
 80151ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151ce:	d008      	beq.n	80151e2 <cos+0x52>
 80151d0:	2c02      	cmp	r4, #2
 80151d2:	d00c      	beq.n	80151ee <cos+0x5e>
 80151d4:	2c00      	cmp	r4, #0
 80151d6:	d0e4      	beq.n	80151a2 <cos+0x12>
 80151d8:	2401      	movs	r4, #1
 80151da:	9400      	str	r4, [sp, #0]
 80151dc:	f003 f910 	bl	8018400 <__kernel_sin>
 80151e0:	e7e9      	b.n	80151b6 <cos+0x26>
 80151e2:	9400      	str	r4, [sp, #0]
 80151e4:	f003 f90c 	bl	8018400 <__kernel_sin>
 80151e8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80151ec:	e7e3      	b.n	80151b6 <cos+0x26>
 80151ee:	f002 fcff 	bl	8017bf0 <__kernel_cos>
 80151f2:	e7f9      	b.n	80151e8 <cos+0x58>
 80151f4:	3fe921fb 	.word	0x3fe921fb
 80151f8:	7fefffff 	.word	0x7fefffff

080151fc <sin>:
 80151fc:	b530      	push	{r4, r5, lr}
 80151fe:	4a1a      	ldr	r2, [pc, #104]	; (8015268 <sin+0x6c>)
 8015200:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015204:	4293      	cmp	r3, r2
 8015206:	b087      	sub	sp, #28
 8015208:	dc06      	bgt.n	8015218 <sin+0x1c>
 801520a:	2300      	movs	r3, #0
 801520c:	2200      	movs	r2, #0
 801520e:	9300      	str	r3, [sp, #0]
 8015210:	2300      	movs	r3, #0
 8015212:	f003 f8f5 	bl	8018400 <__kernel_sin>
 8015216:	e006      	b.n	8015226 <sin+0x2a>
 8015218:	4a14      	ldr	r2, [pc, #80]	; (801526c <sin+0x70>)
 801521a:	4293      	cmp	r3, r2
 801521c:	dd05      	ble.n	801522a <sin+0x2e>
 801521e:	4602      	mov	r2, r0
 8015220:	460b      	mov	r3, r1
 8015222:	f7ea ffbb 	bl	800019c <__aeabi_dsub>
 8015226:	b007      	add	sp, #28
 8015228:	bd30      	pop	{r4, r5, pc}
 801522a:	aa02      	add	r2, sp, #8
 801522c:	f001 fb78 	bl	8016920 <__ieee754_rem_pio2>
 8015230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015234:	f000 0403 	and.w	r4, r0, #3
 8015238:	2c01      	cmp	r4, #1
 801523a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801523e:	d005      	beq.n	801524c <sin+0x50>
 8015240:	2c02      	cmp	r4, #2
 8015242:	d006      	beq.n	8015252 <sin+0x56>
 8015244:	b964      	cbnz	r4, 8015260 <sin+0x64>
 8015246:	2401      	movs	r4, #1
 8015248:	9400      	str	r4, [sp, #0]
 801524a:	e7e2      	b.n	8015212 <sin+0x16>
 801524c:	f002 fcd0 	bl	8017bf0 <__kernel_cos>
 8015250:	e7e9      	b.n	8015226 <sin+0x2a>
 8015252:	2401      	movs	r4, #1
 8015254:	9400      	str	r4, [sp, #0]
 8015256:	f003 f8d3 	bl	8018400 <__kernel_sin>
 801525a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801525e:	e7e2      	b.n	8015226 <sin+0x2a>
 8015260:	f002 fcc6 	bl	8017bf0 <__kernel_cos>
 8015264:	e7f9      	b.n	801525a <sin+0x5e>
 8015266:	bf00      	nop
 8015268:	3fe921fb 	.word	0x3fe921fb
 801526c:	7fefffff 	.word	0x7fefffff

08015270 <cosf>:
 8015270:	b507      	push	{r0, r1, r2, lr}
 8015272:	4a18      	ldr	r2, [pc, #96]	; (80152d4 <cosf+0x64>)
 8015274:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015278:	4293      	cmp	r3, r2
 801527a:	4601      	mov	r1, r0
 801527c:	dc03      	bgt.n	8015286 <cosf+0x16>
 801527e:	2100      	movs	r1, #0
 8015280:	f003 f974 	bl	801856c <__kernel_cosf>
 8015284:	e004      	b.n	8015290 <cosf+0x20>
 8015286:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801528a:	db04      	blt.n	8015296 <cosf+0x26>
 801528c:	f7eb fc8a 	bl	8000ba4 <__aeabi_fsub>
 8015290:	b003      	add	sp, #12
 8015292:	f85d fb04 	ldr.w	pc, [sp], #4
 8015296:	4669      	mov	r1, sp
 8015298:	f002 fafc 	bl	8017894 <__ieee754_rem_pio2f>
 801529c:	f000 0203 	and.w	r2, r0, #3
 80152a0:	2a01      	cmp	r2, #1
 80152a2:	d005      	beq.n	80152b0 <cosf+0x40>
 80152a4:	2a02      	cmp	r2, #2
 80152a6:	d00a      	beq.n	80152be <cosf+0x4e>
 80152a8:	b972      	cbnz	r2, 80152c8 <cosf+0x58>
 80152aa:	9901      	ldr	r1, [sp, #4]
 80152ac:	9800      	ldr	r0, [sp, #0]
 80152ae:	e7e7      	b.n	8015280 <cosf+0x10>
 80152b0:	9901      	ldr	r1, [sp, #4]
 80152b2:	9800      	ldr	r0, [sp, #0]
 80152b4:	f003 fc78 	bl	8018ba8 <__kernel_sinf>
 80152b8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80152bc:	e7e8      	b.n	8015290 <cosf+0x20>
 80152be:	9901      	ldr	r1, [sp, #4]
 80152c0:	9800      	ldr	r0, [sp, #0]
 80152c2:	f003 f953 	bl	801856c <__kernel_cosf>
 80152c6:	e7f7      	b.n	80152b8 <cosf+0x48>
 80152c8:	2201      	movs	r2, #1
 80152ca:	9901      	ldr	r1, [sp, #4]
 80152cc:	9800      	ldr	r0, [sp, #0]
 80152ce:	f003 fc6b 	bl	8018ba8 <__kernel_sinf>
 80152d2:	e7dd      	b.n	8015290 <cosf+0x20>
 80152d4:	3f490fd8 	.word	0x3f490fd8

080152d8 <lrintf>:
 80152d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80152da:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80152de:	f1a2 057f 	sub.w	r5, r2, #127	; 0x7f
 80152e2:	2d1e      	cmp	r5, #30
 80152e4:	4601      	mov	r1, r0
 80152e6:	dc2b      	bgt.n	8015340 <lrintf+0x68>
 80152e8:	1c68      	adds	r0, r5, #1
 80152ea:	da02      	bge.n	80152f2 <lrintf+0x1a>
 80152ec:	2000      	movs	r0, #0
 80152ee:	b003      	add	sp, #12
 80152f0:	bd30      	pop	{r4, r5, pc}
 80152f2:	2d16      	cmp	r5, #22
 80152f4:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 80152f8:	dd09      	ble.n	801530e <lrintf+0x36>
 80152fa:	f3c1 0016 	ubfx	r0, r1, #0, #23
 80152fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015302:	3a96      	subs	r2, #150	; 0x96
 8015304:	4090      	lsls	r0, r2
 8015306:	2c00      	cmp	r4, #0
 8015308:	d0f1      	beq.n	80152ee <lrintf+0x16>
 801530a:	4240      	negs	r0, r0
 801530c:	e7ef      	b.n	80152ee <lrintf+0x16>
 801530e:	4b0e      	ldr	r3, [pc, #56]	; (8015348 <lrintf+0x70>)
 8015310:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8015314:	4628      	mov	r0, r5
 8015316:	f7eb fc47 	bl	8000ba8 <__addsf3>
 801531a:	9001      	str	r0, [sp, #4]
 801531c:	9801      	ldr	r0, [sp, #4]
 801531e:	4629      	mov	r1, r5
 8015320:	f7eb fc40 	bl	8000ba4 <__aeabi_fsub>
 8015324:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8015328:	d0e0      	beq.n	80152ec <lrintf+0x14>
 801532a:	f3c0 0316 	ubfx	r3, r0, #0, #23
 801532e:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 8015332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015336:	f1c0 0096 	rsb	r0, r0, #150	; 0x96
 801533a:	fa23 f000 	lsr.w	r0, r3, r0
 801533e:	e7e2      	b.n	8015306 <lrintf+0x2e>
 8015340:	f7eb ff16 	bl	8001170 <__aeabi_f2iz>
 8015344:	e7d3      	b.n	80152ee <lrintf+0x16>
 8015346:	bf00      	nop
 8015348:	08019dd0 	.word	0x08019dd0

0801534c <sinf>:
 801534c:	b507      	push	{r0, r1, r2, lr}
 801534e:	4a19      	ldr	r2, [pc, #100]	; (80153b4 <sinf+0x68>)
 8015350:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015354:	4293      	cmp	r3, r2
 8015356:	4601      	mov	r1, r0
 8015358:	dc04      	bgt.n	8015364 <sinf+0x18>
 801535a:	2200      	movs	r2, #0
 801535c:	2100      	movs	r1, #0
 801535e:	f003 fc23 	bl	8018ba8 <__kernel_sinf>
 8015362:	e004      	b.n	801536e <sinf+0x22>
 8015364:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015368:	db04      	blt.n	8015374 <sinf+0x28>
 801536a:	f7eb fc1b 	bl	8000ba4 <__aeabi_fsub>
 801536e:	b003      	add	sp, #12
 8015370:	f85d fb04 	ldr.w	pc, [sp], #4
 8015374:	4669      	mov	r1, sp
 8015376:	f002 fa8d 	bl	8017894 <__ieee754_rem_pio2f>
 801537a:	f000 0003 	and.w	r0, r0, #3
 801537e:	2801      	cmp	r0, #1
 8015380:	d006      	beq.n	8015390 <sinf+0x44>
 8015382:	2802      	cmp	r0, #2
 8015384:	d009      	beq.n	801539a <sinf+0x4e>
 8015386:	b980      	cbnz	r0, 80153aa <sinf+0x5e>
 8015388:	2201      	movs	r2, #1
 801538a:	9901      	ldr	r1, [sp, #4]
 801538c:	9800      	ldr	r0, [sp, #0]
 801538e:	e7e6      	b.n	801535e <sinf+0x12>
 8015390:	9901      	ldr	r1, [sp, #4]
 8015392:	9800      	ldr	r0, [sp, #0]
 8015394:	f003 f8ea 	bl	801856c <__kernel_cosf>
 8015398:	e7e9      	b.n	801536e <sinf+0x22>
 801539a:	2201      	movs	r2, #1
 801539c:	9901      	ldr	r1, [sp, #4]
 801539e:	9800      	ldr	r0, [sp, #0]
 80153a0:	f003 fc02 	bl	8018ba8 <__kernel_sinf>
 80153a4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80153a8:	e7e1      	b.n	801536e <sinf+0x22>
 80153aa:	9901      	ldr	r1, [sp, #4]
 80153ac:	9800      	ldr	r0, [sp, #0]
 80153ae:	f003 f8dd 	bl	801856c <__kernel_cosf>
 80153b2:	e7f7      	b.n	80153a4 <sinf+0x58>
 80153b4:	3f490fd8 	.word	0x3f490fd8

080153b8 <atan2>:
 80153b8:	f000 bbbe 	b.w	8015b38 <__ieee754_atan2>

080153bc <fmod>:
 80153bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153c0:	b08b      	sub	sp, #44	; 0x2c
 80153c2:	461f      	mov	r7, r3
 80153c4:	4604      	mov	r4, r0
 80153c6:	460d      	mov	r5, r1
 80153c8:	4616      	mov	r6, r2
 80153ca:	f000 fc93 	bl	8015cf4 <__ieee754_fmod>
 80153ce:	4b27      	ldr	r3, [pc, #156]	; (801546c <fmod+0xb0>)
 80153d0:	4680      	mov	r8, r0
 80153d2:	f993 a000 	ldrsb.w	sl, [r3]
 80153d6:	4689      	mov	r9, r1
 80153d8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80153dc:	d030      	beq.n	8015440 <fmod+0x84>
 80153de:	4632      	mov	r2, r6
 80153e0:	463b      	mov	r3, r7
 80153e2:	4630      	mov	r0, r6
 80153e4:	4639      	mov	r1, r7
 80153e6:	f7eb fb2b 	bl	8000a40 <__aeabi_dcmpun>
 80153ea:	bb48      	cbnz	r0, 8015440 <fmod+0x84>
 80153ec:	4622      	mov	r2, r4
 80153ee:	462b      	mov	r3, r5
 80153f0:	4620      	mov	r0, r4
 80153f2:	4629      	mov	r1, r5
 80153f4:	f7eb fb24 	bl	8000a40 <__aeabi_dcmpun>
 80153f8:	4683      	mov	fp, r0
 80153fa:	bb08      	cbnz	r0, 8015440 <fmod+0x84>
 80153fc:	2200      	movs	r2, #0
 80153fe:	2300      	movs	r3, #0
 8015400:	4630      	mov	r0, r6
 8015402:	4639      	mov	r1, r7
 8015404:	f7eb faea 	bl	80009dc <__aeabi_dcmpeq>
 8015408:	b1d0      	cbz	r0, 8015440 <fmod+0x84>
 801540a:	2301      	movs	r3, #1
 801540c:	9300      	str	r3, [sp, #0]
 801540e:	4b18      	ldr	r3, [pc, #96]	; (8015470 <fmod+0xb4>)
 8015410:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015414:	9301      	str	r3, [sp, #4]
 8015416:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801541a:	f8cd b020 	str.w	fp, [sp, #32]
 801541e:	f1ba 0f00 	cmp.w	sl, #0
 8015422:	d112      	bne.n	801544a <fmod+0x8e>
 8015424:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015428:	4668      	mov	r0, sp
 801542a:	f003 fe4d 	bl	80190c8 <matherr>
 801542e:	b1b8      	cbz	r0, 8015460 <fmod+0xa4>
 8015430:	9b08      	ldr	r3, [sp, #32]
 8015432:	b11b      	cbz	r3, 801543c <fmod+0x80>
 8015434:	f7fb fdcc 	bl	8010fd0 <__errno>
 8015438:	9b08      	ldr	r3, [sp, #32]
 801543a:	6003      	str	r3, [r0, #0]
 801543c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8015440:	4640      	mov	r0, r8
 8015442:	4649      	mov	r1, r9
 8015444:	b00b      	add	sp, #44	; 0x2c
 8015446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801544a:	2200      	movs	r2, #0
 801544c:	2300      	movs	r3, #0
 801544e:	4610      	mov	r0, r2
 8015450:	4619      	mov	r1, r3
 8015452:	f7eb f985 	bl	8000760 <__aeabi_ddiv>
 8015456:	f1ba 0f02 	cmp.w	sl, #2
 801545a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801545e:	d1e3      	bne.n	8015428 <fmod+0x6c>
 8015460:	f7fb fdb6 	bl	8010fd0 <__errno>
 8015464:	2321      	movs	r3, #33	; 0x21
 8015466:	6003      	str	r3, [r0, #0]
 8015468:	e7e2      	b.n	8015430 <fmod+0x74>
 801546a:	bf00      	nop
 801546c:	20000230 	.word	0x20000230
 8015470:	08019dd8 	.word	0x08019dd8

08015474 <pow>:
 8015474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015478:	b08f      	sub	sp, #60	; 0x3c
 801547a:	461d      	mov	r5, r3
 801547c:	4680      	mov	r8, r0
 801547e:	4689      	mov	r9, r1
 8015480:	4614      	mov	r4, r2
 8015482:	f000 fd41 	bl	8015f08 <__ieee754_pow>
 8015486:	4fa1      	ldr	r7, [pc, #644]	; (801570c <pow+0x298>)
 8015488:	e9cd 0100 	strd	r0, r1, [sp]
 801548c:	f997 3000 	ldrsb.w	r3, [r7]
 8015490:	463e      	mov	r6, r7
 8015492:	9302      	str	r3, [sp, #8]
 8015494:	3301      	adds	r3, #1
 8015496:	d05f      	beq.n	8015558 <pow+0xe4>
 8015498:	4622      	mov	r2, r4
 801549a:	462b      	mov	r3, r5
 801549c:	4620      	mov	r0, r4
 801549e:	4629      	mov	r1, r5
 80154a0:	f7eb face 	bl	8000a40 <__aeabi_dcmpun>
 80154a4:	4682      	mov	sl, r0
 80154a6:	2800      	cmp	r0, #0
 80154a8:	d156      	bne.n	8015558 <pow+0xe4>
 80154aa:	4642      	mov	r2, r8
 80154ac:	464b      	mov	r3, r9
 80154ae:	4640      	mov	r0, r8
 80154b0:	4649      	mov	r1, r9
 80154b2:	f7eb fac5 	bl	8000a40 <__aeabi_dcmpun>
 80154b6:	9003      	str	r0, [sp, #12]
 80154b8:	b1e8      	cbz	r0, 80154f6 <pow+0x82>
 80154ba:	2200      	movs	r2, #0
 80154bc:	2300      	movs	r3, #0
 80154be:	4620      	mov	r0, r4
 80154c0:	4629      	mov	r1, r5
 80154c2:	f7eb fa8b 	bl	80009dc <__aeabi_dcmpeq>
 80154c6:	2800      	cmp	r0, #0
 80154c8:	d046      	beq.n	8015558 <pow+0xe4>
 80154ca:	2301      	movs	r3, #1
 80154cc:	2200      	movs	r2, #0
 80154ce:	9304      	str	r3, [sp, #16]
 80154d0:	4b8f      	ldr	r3, [pc, #572]	; (8015710 <pow+0x29c>)
 80154d2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80154d6:	9305      	str	r3, [sp, #20]
 80154d8:	4b8e      	ldr	r3, [pc, #568]	; (8015714 <pow+0x2a0>)
 80154da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80154de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80154e2:	9b02      	ldr	r3, [sp, #8]
 80154e4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80154e8:	2b02      	cmp	r3, #2
 80154ea:	d031      	beq.n	8015550 <pow+0xdc>
 80154ec:	a804      	add	r0, sp, #16
 80154ee:	f003 fdeb 	bl	80190c8 <matherr>
 80154f2:	bb38      	cbnz	r0, 8015544 <pow+0xd0>
 80154f4:	e058      	b.n	80155a8 <pow+0x134>
 80154f6:	f04f 0a00 	mov.w	sl, #0
 80154fa:	f04f 0b00 	mov.w	fp, #0
 80154fe:	4652      	mov	r2, sl
 8015500:	465b      	mov	r3, fp
 8015502:	4640      	mov	r0, r8
 8015504:	4649      	mov	r1, r9
 8015506:	f7eb fa69 	bl	80009dc <__aeabi_dcmpeq>
 801550a:	2800      	cmp	r0, #0
 801550c:	d051      	beq.n	80155b2 <pow+0x13e>
 801550e:	4652      	mov	r2, sl
 8015510:	465b      	mov	r3, fp
 8015512:	4620      	mov	r0, r4
 8015514:	4629      	mov	r1, r5
 8015516:	f7eb fa61 	bl	80009dc <__aeabi_dcmpeq>
 801551a:	4606      	mov	r6, r0
 801551c:	b308      	cbz	r0, 8015562 <pow+0xee>
 801551e:	2301      	movs	r3, #1
 8015520:	9304      	str	r3, [sp, #16]
 8015522:	4b7b      	ldr	r3, [pc, #492]	; (8015710 <pow+0x29c>)
 8015524:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015528:	9305      	str	r3, [sp, #20]
 801552a:	9b03      	ldr	r3, [sp, #12]
 801552c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015530:	930c      	str	r3, [sp, #48]	; 0x30
 8015532:	9b02      	ldr	r3, [sp, #8]
 8015534:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015538:	2b00      	cmp	r3, #0
 801553a:	d0d7      	beq.n	80154ec <pow+0x78>
 801553c:	2200      	movs	r2, #0
 801553e:	4b75      	ldr	r3, [pc, #468]	; (8015714 <pow+0x2a0>)
 8015540:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015546:	b11b      	cbz	r3, 8015550 <pow+0xdc>
 8015548:	f7fb fd42 	bl	8010fd0 <__errno>
 801554c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801554e:	6003      	str	r3, [r0, #0]
 8015550:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8015554:	e9cd 3400 	strd	r3, r4, [sp]
 8015558:	e9dd 0100 	ldrd	r0, r1, [sp]
 801555c:	b00f      	add	sp, #60	; 0x3c
 801555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015562:	4620      	mov	r0, r4
 8015564:	4629      	mov	r1, r5
 8015566:	f003 fd25 	bl	8018fb4 <finite>
 801556a:	2800      	cmp	r0, #0
 801556c:	d0f4      	beq.n	8015558 <pow+0xe4>
 801556e:	4652      	mov	r2, sl
 8015570:	465b      	mov	r3, fp
 8015572:	4620      	mov	r0, r4
 8015574:	4629      	mov	r1, r5
 8015576:	f7eb fa3b 	bl	80009f0 <__aeabi_dcmplt>
 801557a:	2800      	cmp	r0, #0
 801557c:	d0ec      	beq.n	8015558 <pow+0xe4>
 801557e:	2301      	movs	r3, #1
 8015580:	9304      	str	r3, [sp, #16]
 8015582:	4b63      	ldr	r3, [pc, #396]	; (8015710 <pow+0x29c>)
 8015584:	960c      	str	r6, [sp, #48]	; 0x30
 8015586:	9305      	str	r3, [sp, #20]
 8015588:	f997 3000 	ldrsb.w	r3, [r7]
 801558c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015590:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015594:	b913      	cbnz	r3, 801559c <pow+0x128>
 8015596:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801559a:	e7a7      	b.n	80154ec <pow+0x78>
 801559c:	2000      	movs	r0, #0
 801559e:	495e      	ldr	r1, [pc, #376]	; (8015718 <pow+0x2a4>)
 80155a0:	2b02      	cmp	r3, #2
 80155a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80155a6:	d1a1      	bne.n	80154ec <pow+0x78>
 80155a8:	f7fb fd12 	bl	8010fd0 <__errno>
 80155ac:	2321      	movs	r3, #33	; 0x21
 80155ae:	6003      	str	r3, [r0, #0]
 80155b0:	e7c8      	b.n	8015544 <pow+0xd0>
 80155b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155b6:	f003 fcfd 	bl	8018fb4 <finite>
 80155ba:	9002      	str	r0, [sp, #8]
 80155bc:	2800      	cmp	r0, #0
 80155be:	d177      	bne.n	80156b0 <pow+0x23c>
 80155c0:	4640      	mov	r0, r8
 80155c2:	4649      	mov	r1, r9
 80155c4:	f003 fcf6 	bl	8018fb4 <finite>
 80155c8:	2800      	cmp	r0, #0
 80155ca:	d071      	beq.n	80156b0 <pow+0x23c>
 80155cc:	4620      	mov	r0, r4
 80155ce:	4629      	mov	r1, r5
 80155d0:	f003 fcf0 	bl	8018fb4 <finite>
 80155d4:	2800      	cmp	r0, #0
 80155d6:	d06b      	beq.n	80156b0 <pow+0x23c>
 80155d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155dc:	4619      	mov	r1, r3
 80155de:	4610      	mov	r0, r2
 80155e0:	f7eb fa2e 	bl	8000a40 <__aeabi_dcmpun>
 80155e4:	f997 7000 	ldrsb.w	r7, [r7]
 80155e8:	4b49      	ldr	r3, [pc, #292]	; (8015710 <pow+0x29c>)
 80155ea:	b1a0      	cbz	r0, 8015616 <pow+0x1a2>
 80155ec:	2201      	movs	r2, #1
 80155ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80155f2:	9b02      	ldr	r3, [sp, #8]
 80155f4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80155f8:	930c      	str	r3, [sp, #48]	; 0x30
 80155fa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80155fe:	2f00      	cmp	r7, #0
 8015600:	d0c9      	beq.n	8015596 <pow+0x122>
 8015602:	4652      	mov	r2, sl
 8015604:	465b      	mov	r3, fp
 8015606:	4650      	mov	r0, sl
 8015608:	4659      	mov	r1, fp
 801560a:	f7eb f8a9 	bl	8000760 <__aeabi_ddiv>
 801560e:	2f02      	cmp	r7, #2
 8015610:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015614:	e7c7      	b.n	80155a6 <pow+0x132>
 8015616:	2203      	movs	r2, #3
 8015618:	900c      	str	r0, [sp, #48]	; 0x30
 801561a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801561e:	4620      	mov	r0, r4
 8015620:	4629      	mov	r1, r5
 8015622:	2200      	movs	r2, #0
 8015624:	4b3d      	ldr	r3, [pc, #244]	; (801571c <pow+0x2a8>)
 8015626:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801562a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801562e:	f7ea ff6d 	bl	800050c <__aeabi_dmul>
 8015632:	4604      	mov	r4, r0
 8015634:	460d      	mov	r5, r1
 8015636:	bb17      	cbnz	r7, 801567e <pow+0x20a>
 8015638:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801563c:	4b38      	ldr	r3, [pc, #224]	; (8015720 <pow+0x2ac>)
 801563e:	4640      	mov	r0, r8
 8015640:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015644:	4649      	mov	r1, r9
 8015646:	4652      	mov	r2, sl
 8015648:	465b      	mov	r3, fp
 801564a:	f7eb f9d1 	bl	80009f0 <__aeabi_dcmplt>
 801564e:	2800      	cmp	r0, #0
 8015650:	d054      	beq.n	80156fc <pow+0x288>
 8015652:	4620      	mov	r0, r4
 8015654:	4629      	mov	r1, r5
 8015656:	f003 fd3f 	bl	80190d8 <rint>
 801565a:	4622      	mov	r2, r4
 801565c:	462b      	mov	r3, r5
 801565e:	f7eb f9bd 	bl	80009dc <__aeabi_dcmpeq>
 8015662:	b920      	cbnz	r0, 801566e <pow+0x1fa>
 8015664:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015668:	4b2e      	ldr	r3, [pc, #184]	; (8015724 <pow+0x2b0>)
 801566a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801566e:	f996 3000 	ldrsb.w	r3, [r6]
 8015672:	2b02      	cmp	r3, #2
 8015674:	d142      	bne.n	80156fc <pow+0x288>
 8015676:	f7fb fcab 	bl	8010fd0 <__errno>
 801567a:	2322      	movs	r3, #34	; 0x22
 801567c:	e797      	b.n	80155ae <pow+0x13a>
 801567e:	2200      	movs	r2, #0
 8015680:	4b29      	ldr	r3, [pc, #164]	; (8015728 <pow+0x2b4>)
 8015682:	4640      	mov	r0, r8
 8015684:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015688:	4649      	mov	r1, r9
 801568a:	4652      	mov	r2, sl
 801568c:	465b      	mov	r3, fp
 801568e:	f7eb f9af 	bl	80009f0 <__aeabi_dcmplt>
 8015692:	2800      	cmp	r0, #0
 8015694:	d0eb      	beq.n	801566e <pow+0x1fa>
 8015696:	4620      	mov	r0, r4
 8015698:	4629      	mov	r1, r5
 801569a:	f003 fd1d 	bl	80190d8 <rint>
 801569e:	4622      	mov	r2, r4
 80156a0:	462b      	mov	r3, r5
 80156a2:	f7eb f99b 	bl	80009dc <__aeabi_dcmpeq>
 80156a6:	2800      	cmp	r0, #0
 80156a8:	d1e1      	bne.n	801566e <pow+0x1fa>
 80156aa:	2200      	movs	r2, #0
 80156ac:	4b1a      	ldr	r3, [pc, #104]	; (8015718 <pow+0x2a4>)
 80156ae:	e7dc      	b.n	801566a <pow+0x1f6>
 80156b0:	2200      	movs	r2, #0
 80156b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156b6:	2300      	movs	r3, #0
 80156b8:	f7eb f990 	bl	80009dc <__aeabi_dcmpeq>
 80156bc:	2800      	cmp	r0, #0
 80156be:	f43f af4b 	beq.w	8015558 <pow+0xe4>
 80156c2:	4640      	mov	r0, r8
 80156c4:	4649      	mov	r1, r9
 80156c6:	f003 fc75 	bl	8018fb4 <finite>
 80156ca:	2800      	cmp	r0, #0
 80156cc:	f43f af44 	beq.w	8015558 <pow+0xe4>
 80156d0:	4620      	mov	r0, r4
 80156d2:	4629      	mov	r1, r5
 80156d4:	f003 fc6e 	bl	8018fb4 <finite>
 80156d8:	2800      	cmp	r0, #0
 80156da:	f43f af3d 	beq.w	8015558 <pow+0xe4>
 80156de:	2304      	movs	r3, #4
 80156e0:	9304      	str	r3, [sp, #16]
 80156e2:	4b0b      	ldr	r3, [pc, #44]	; (8015710 <pow+0x29c>)
 80156e4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80156e8:	9305      	str	r3, [sp, #20]
 80156ea:	2300      	movs	r3, #0
 80156ec:	2400      	movs	r4, #0
 80156ee:	930c      	str	r3, [sp, #48]	; 0x30
 80156f0:	2300      	movs	r3, #0
 80156f2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80156f6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80156fa:	e7b8      	b.n	801566e <pow+0x1fa>
 80156fc:	a804      	add	r0, sp, #16
 80156fe:	f003 fce3 	bl	80190c8 <matherr>
 8015702:	2800      	cmp	r0, #0
 8015704:	f47f af1e 	bne.w	8015544 <pow+0xd0>
 8015708:	e7b5      	b.n	8015676 <pow+0x202>
 801570a:	bf00      	nop
 801570c:	20000230 	.word	0x20000230
 8015710:	08019ddd 	.word	0x08019ddd
 8015714:	3ff00000 	.word	0x3ff00000
 8015718:	fff00000 	.word	0xfff00000
 801571c:	3fe00000 	.word	0x3fe00000
 8015720:	47efffff 	.word	0x47efffff
 8015724:	c7efffff 	.word	0xc7efffff
 8015728:	7ff00000 	.word	0x7ff00000

0801572c <sqrt>:
 801572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015730:	b08b      	sub	sp, #44	; 0x2c
 8015732:	4604      	mov	r4, r0
 8015734:	460d      	mov	r5, r1
 8015736:	f001 fae3 	bl	8016d00 <__ieee754_sqrt>
 801573a:	4b24      	ldr	r3, [pc, #144]	; (80157cc <sqrt+0xa0>)
 801573c:	4680      	mov	r8, r0
 801573e:	f993 a000 	ldrsb.w	sl, [r3]
 8015742:	4689      	mov	r9, r1
 8015744:	f1ba 3fff 	cmp.w	sl, #4294967295
 8015748:	d02b      	beq.n	80157a2 <sqrt+0x76>
 801574a:	4622      	mov	r2, r4
 801574c:	462b      	mov	r3, r5
 801574e:	4620      	mov	r0, r4
 8015750:	4629      	mov	r1, r5
 8015752:	f7eb f975 	bl	8000a40 <__aeabi_dcmpun>
 8015756:	4683      	mov	fp, r0
 8015758:	bb18      	cbnz	r0, 80157a2 <sqrt+0x76>
 801575a:	2600      	movs	r6, #0
 801575c:	2700      	movs	r7, #0
 801575e:	4632      	mov	r2, r6
 8015760:	463b      	mov	r3, r7
 8015762:	4620      	mov	r0, r4
 8015764:	4629      	mov	r1, r5
 8015766:	f7eb f943 	bl	80009f0 <__aeabi_dcmplt>
 801576a:	b1d0      	cbz	r0, 80157a2 <sqrt+0x76>
 801576c:	2301      	movs	r3, #1
 801576e:	9300      	str	r3, [sp, #0]
 8015770:	4b17      	ldr	r3, [pc, #92]	; (80157d0 <sqrt+0xa4>)
 8015772:	f8cd b020 	str.w	fp, [sp, #32]
 8015776:	9301      	str	r3, [sp, #4]
 8015778:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801577c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015780:	f1ba 0f00 	cmp.w	sl, #0
 8015784:	d112      	bne.n	80157ac <sqrt+0x80>
 8015786:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801578a:	4668      	mov	r0, sp
 801578c:	f003 fc9c 	bl	80190c8 <matherr>
 8015790:	b1b8      	cbz	r0, 80157c2 <sqrt+0x96>
 8015792:	9b08      	ldr	r3, [sp, #32]
 8015794:	b11b      	cbz	r3, 801579e <sqrt+0x72>
 8015796:	f7fb fc1b 	bl	8010fd0 <__errno>
 801579a:	9b08      	ldr	r3, [sp, #32]
 801579c:	6003      	str	r3, [r0, #0]
 801579e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80157a2:	4640      	mov	r0, r8
 80157a4:	4649      	mov	r1, r9
 80157a6:	b00b      	add	sp, #44	; 0x2c
 80157a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157ac:	4632      	mov	r2, r6
 80157ae:	463b      	mov	r3, r7
 80157b0:	4630      	mov	r0, r6
 80157b2:	4639      	mov	r1, r7
 80157b4:	f7ea ffd4 	bl	8000760 <__aeabi_ddiv>
 80157b8:	f1ba 0f02 	cmp.w	sl, #2
 80157bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80157c0:	d1e3      	bne.n	801578a <sqrt+0x5e>
 80157c2:	f7fb fc05 	bl	8010fd0 <__errno>
 80157c6:	2321      	movs	r3, #33	; 0x21
 80157c8:	6003      	str	r3, [r0, #0]
 80157ca:	e7e2      	b.n	8015792 <sqrt+0x66>
 80157cc:	20000230 	.word	0x20000230
 80157d0:	08019de1 	.word	0x08019de1

080157d4 <asinf>:
 80157d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157d6:	b08b      	sub	sp, #44	; 0x2c
 80157d8:	4604      	mov	r4, r0
 80157da:	f001 fb3d 	bl	8016e58 <__ieee754_asinf>
 80157de:	4e21      	ldr	r6, [pc, #132]	; (8015864 <asinf+0x90>)
 80157e0:	4605      	mov	r5, r0
 80157e2:	f996 3000 	ldrsb.w	r3, [r6]
 80157e6:	3301      	adds	r3, #1
 80157e8:	d038      	beq.n	801585c <asinf+0x88>
 80157ea:	4621      	mov	r1, r4
 80157ec:	4620      	mov	r0, r4
 80157ee:	f7eb fca9 	bl	8001144 <__aeabi_fcmpun>
 80157f2:	4607      	mov	r7, r0
 80157f4:	2800      	cmp	r0, #0
 80157f6:	d131      	bne.n	801585c <asinf+0x88>
 80157f8:	4620      	mov	r0, r4
 80157fa:	f003 fe73 	bl	80194e4 <fabsf>
 80157fe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015802:	f7eb fc95 	bl	8001130 <__aeabi_fcmpgt>
 8015806:	b348      	cbz	r0, 801585c <asinf+0x88>
 8015808:	2301      	movs	r3, #1
 801580a:	9300      	str	r3, [sp, #0]
 801580c:	4b16      	ldr	r3, [pc, #88]	; (8015868 <asinf+0x94>)
 801580e:	4620      	mov	r0, r4
 8015810:	9301      	str	r3, [sp, #4]
 8015812:	9708      	str	r7, [sp, #32]
 8015814:	f7ea fe22 	bl	800045c <__aeabi_f2d>
 8015818:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801581c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015820:	4812      	ldr	r0, [pc, #72]	; (801586c <asinf+0x98>)
 8015822:	f003 fc53 	bl	80190cc <nan>
 8015826:	f996 3000 	ldrsb.w	r3, [r6]
 801582a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801582e:	2b02      	cmp	r3, #2
 8015830:	d104      	bne.n	801583c <asinf+0x68>
 8015832:	f7fb fbcd 	bl	8010fd0 <__errno>
 8015836:	2321      	movs	r3, #33	; 0x21
 8015838:	6003      	str	r3, [r0, #0]
 801583a:	e004      	b.n	8015846 <asinf+0x72>
 801583c:	4668      	mov	r0, sp
 801583e:	f003 fc43 	bl	80190c8 <matherr>
 8015842:	2800      	cmp	r0, #0
 8015844:	d0f5      	beq.n	8015832 <asinf+0x5e>
 8015846:	9b08      	ldr	r3, [sp, #32]
 8015848:	b11b      	cbz	r3, 8015852 <asinf+0x7e>
 801584a:	f7fb fbc1 	bl	8010fd0 <__errno>
 801584e:	9b08      	ldr	r3, [sp, #32]
 8015850:	6003      	str	r3, [r0, #0]
 8015852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015856:	f7eb f951 	bl	8000afc <__aeabi_d2f>
 801585a:	4605      	mov	r5, r0
 801585c:	4628      	mov	r0, r5
 801585e:	b00b      	add	sp, #44	; 0x2c
 8015860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015862:	bf00      	nop
 8015864:	20000230 	.word	0x20000230
 8015868:	08019de6 	.word	0x08019de6
 801586c:	08019dc1 	.word	0x08019dc1

08015870 <atan2f>:
 8015870:	f001 bc34 	b.w	80170dc <__ieee754_atan2f>

08015874 <powf>:
 8015874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015878:	b08d      	sub	sp, #52	; 0x34
 801587a:	4605      	mov	r5, r0
 801587c:	460c      	mov	r4, r1
 801587e:	f001 fcbd 	bl	80171fc <__ieee754_powf>
 8015882:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8015b30 <powf+0x2bc>
 8015886:	4606      	mov	r6, r0
 8015888:	f998 9000 	ldrsb.w	r9, [r8]
 801588c:	4647      	mov	r7, r8
 801588e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8015892:	d060      	beq.n	8015956 <powf+0xe2>
 8015894:	4621      	mov	r1, r4
 8015896:	4620      	mov	r0, r4
 8015898:	f7eb fc54 	bl	8001144 <__aeabi_fcmpun>
 801589c:	4683      	mov	fp, r0
 801589e:	2800      	cmp	r0, #0
 80158a0:	d159      	bne.n	8015956 <powf+0xe2>
 80158a2:	4629      	mov	r1, r5
 80158a4:	4628      	mov	r0, r5
 80158a6:	f7eb fc4d 	bl	8001144 <__aeabi_fcmpun>
 80158aa:	2100      	movs	r1, #0
 80158ac:	4682      	mov	sl, r0
 80158ae:	b300      	cbz	r0, 80158f2 <powf+0x7e>
 80158b0:	4620      	mov	r0, r4
 80158b2:	f7eb fc15 	bl	80010e0 <__aeabi_fcmpeq>
 80158b6:	2800      	cmp	r0, #0
 80158b8:	d04d      	beq.n	8015956 <powf+0xe2>
 80158ba:	2301      	movs	r3, #1
 80158bc:	9302      	str	r3, [sp, #8]
 80158be:	4b96      	ldr	r3, [pc, #600]	; (8015b18 <powf+0x2a4>)
 80158c0:	4628      	mov	r0, r5
 80158c2:	9303      	str	r3, [sp, #12]
 80158c4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80158c8:	f7ea fdc8 	bl	800045c <__aeabi_f2d>
 80158cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80158d0:	4620      	mov	r0, r4
 80158d2:	f7ea fdc3 	bl	800045c <__aeabi_f2d>
 80158d6:	2200      	movs	r2, #0
 80158d8:	4b90      	ldr	r3, [pc, #576]	; (8015b1c <powf+0x2a8>)
 80158da:	f1b9 0f02 	cmp.w	r9, #2
 80158de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80158e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80158e6:	d031      	beq.n	801594c <powf+0xd8>
 80158e8:	a802      	add	r0, sp, #8
 80158ea:	f003 fbed 	bl	80190c8 <matherr>
 80158ee:	bb38      	cbnz	r0, 8015940 <powf+0xcc>
 80158f0:	e05d      	b.n	80159ae <powf+0x13a>
 80158f2:	4628      	mov	r0, r5
 80158f4:	f7eb fbf4 	bl	80010e0 <__aeabi_fcmpeq>
 80158f8:	2800      	cmp	r0, #0
 80158fa:	d05d      	beq.n	80159b8 <powf+0x144>
 80158fc:	2100      	movs	r1, #0
 80158fe:	4620      	mov	r0, r4
 8015900:	f7eb fbee 	bl	80010e0 <__aeabi_fcmpeq>
 8015904:	4607      	mov	r7, r0
 8015906:	2800      	cmp	r0, #0
 8015908:	d029      	beq.n	801595e <powf+0xea>
 801590a:	2301      	movs	r3, #1
 801590c:	9302      	str	r3, [sp, #8]
 801590e:	4b82      	ldr	r3, [pc, #520]	; (8015b18 <powf+0x2a4>)
 8015910:	4628      	mov	r0, r5
 8015912:	9303      	str	r3, [sp, #12]
 8015914:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8015918:	f7ea fda0 	bl	800045c <__aeabi_f2d>
 801591c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015920:	4620      	mov	r0, r4
 8015922:	f7ea fd9b 	bl	800045c <__aeabi_f2d>
 8015926:	2200      	movs	r2, #0
 8015928:	2300      	movs	r3, #0
 801592a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801592e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015932:	f1b9 0f00 	cmp.w	r9, #0
 8015936:	d0d7      	beq.n	80158e8 <powf+0x74>
 8015938:	2200      	movs	r2, #0
 801593a:	4b78      	ldr	r3, [pc, #480]	; (8015b1c <powf+0x2a8>)
 801593c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015942:	b11b      	cbz	r3, 801594c <powf+0xd8>
 8015944:	f7fb fb44 	bl	8010fd0 <__errno>
 8015948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801594a:	6003      	str	r3, [r0, #0]
 801594c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015950:	f7eb f8d4 	bl	8000afc <__aeabi_d2f>
 8015954:	4606      	mov	r6, r0
 8015956:	4630      	mov	r0, r6
 8015958:	b00d      	add	sp, #52	; 0x34
 801595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801595e:	4620      	mov	r0, r4
 8015960:	f003 fdc3 	bl	80194ea <finitef>
 8015964:	2800      	cmp	r0, #0
 8015966:	d0f6      	beq.n	8015956 <powf+0xe2>
 8015968:	2100      	movs	r1, #0
 801596a:	4620      	mov	r0, r4
 801596c:	f7eb fbc2 	bl	80010f4 <__aeabi_fcmplt>
 8015970:	2800      	cmp	r0, #0
 8015972:	d0f0      	beq.n	8015956 <powf+0xe2>
 8015974:	2301      	movs	r3, #1
 8015976:	9302      	str	r3, [sp, #8]
 8015978:	4b67      	ldr	r3, [pc, #412]	; (8015b18 <powf+0x2a4>)
 801597a:	4628      	mov	r0, r5
 801597c:	9303      	str	r3, [sp, #12]
 801597e:	970a      	str	r7, [sp, #40]	; 0x28
 8015980:	f7ea fd6c 	bl	800045c <__aeabi_f2d>
 8015984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015988:	4620      	mov	r0, r4
 801598a:	f7ea fd67 	bl	800045c <__aeabi_f2d>
 801598e:	f998 3000 	ldrsb.w	r3, [r8]
 8015992:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015996:	b923      	cbnz	r3, 80159a2 <powf+0x12e>
 8015998:	2200      	movs	r2, #0
 801599a:	2300      	movs	r3, #0
 801599c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80159a0:	e7a2      	b.n	80158e8 <powf+0x74>
 80159a2:	2000      	movs	r0, #0
 80159a4:	495e      	ldr	r1, [pc, #376]	; (8015b20 <powf+0x2ac>)
 80159a6:	2b02      	cmp	r3, #2
 80159a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80159ac:	d19c      	bne.n	80158e8 <powf+0x74>
 80159ae:	f7fb fb0f 	bl	8010fd0 <__errno>
 80159b2:	2321      	movs	r3, #33	; 0x21
 80159b4:	6003      	str	r3, [r0, #0]
 80159b6:	e7c3      	b.n	8015940 <powf+0xcc>
 80159b8:	4630      	mov	r0, r6
 80159ba:	f003 fd96 	bl	80194ea <finitef>
 80159be:	4681      	mov	r9, r0
 80159c0:	2800      	cmp	r0, #0
 80159c2:	d17b      	bne.n	8015abc <powf+0x248>
 80159c4:	4628      	mov	r0, r5
 80159c6:	f003 fd90 	bl	80194ea <finitef>
 80159ca:	2800      	cmp	r0, #0
 80159cc:	d076      	beq.n	8015abc <powf+0x248>
 80159ce:	4620      	mov	r0, r4
 80159d0:	f003 fd8b 	bl	80194ea <finitef>
 80159d4:	2800      	cmp	r0, #0
 80159d6:	d071      	beq.n	8015abc <powf+0x248>
 80159d8:	4628      	mov	r0, r5
 80159da:	f7ea fd3f 	bl	800045c <__aeabi_f2d>
 80159de:	4682      	mov	sl, r0
 80159e0:	4620      	mov	r0, r4
 80159e2:	468b      	mov	fp, r1
 80159e4:	f7ea fd3a 	bl	800045c <__aeabi_f2d>
 80159e8:	4602      	mov	r2, r0
 80159ea:	460b      	mov	r3, r1
 80159ec:	4630      	mov	r0, r6
 80159ee:	4631      	mov	r1, r6
 80159f0:	e9cd 2300 	strd	r2, r3, [sp]
 80159f4:	f7eb fba6 	bl	8001144 <__aeabi_fcmpun>
 80159f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159fc:	f998 8000 	ldrsb.w	r8, [r8]
 8015a00:	4945      	ldr	r1, [pc, #276]	; (8015b18 <powf+0x2a4>)
 8015a02:	b1b0      	cbz	r0, 8015a32 <powf+0x1be>
 8015a04:	2001      	movs	r0, #1
 8015a06:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8015a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a0e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015a12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015a16:	f1b8 0f00 	cmp.w	r8, #0
 8015a1a:	d0bd      	beq.n	8015998 <powf+0x124>
 8015a1c:	2100      	movs	r1, #0
 8015a1e:	4608      	mov	r0, r1
 8015a20:	f7eb fa7e 	bl	8000f20 <__aeabi_fdiv>
 8015a24:	f7ea fd1a 	bl	800045c <__aeabi_f2d>
 8015a28:	f1b8 0f02 	cmp.w	r8, #2
 8015a2c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015a30:	e7bc      	b.n	80159ac <powf+0x138>
 8015a32:	2603      	movs	r6, #3
 8015a34:	900a      	str	r0, [sp, #40]	; 0x28
 8015a36:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8015a3a:	4620      	mov	r0, r4
 8015a3c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015a40:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015a44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015a48:	f7eb f9b6 	bl	8000db8 <__aeabi_fmul>
 8015a4c:	4604      	mov	r4, r0
 8015a4e:	f1b8 0f00 	cmp.w	r8, #0
 8015a52:	d11e      	bne.n	8015a92 <powf+0x21e>
 8015a54:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015a58:	4b32      	ldr	r3, [pc, #200]	; (8015b24 <powf+0x2b0>)
 8015a5a:	2100      	movs	r1, #0
 8015a5c:	4628      	mov	r0, r5
 8015a5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015a62:	f7eb fb47 	bl	80010f4 <__aeabi_fcmplt>
 8015a66:	2800      	cmp	r0, #0
 8015a68:	d04e      	beq.n	8015b08 <powf+0x294>
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	f003 fd86 	bl	801957c <rintf>
 8015a70:	4621      	mov	r1, r4
 8015a72:	f7eb fb35 	bl	80010e0 <__aeabi_fcmpeq>
 8015a76:	b920      	cbnz	r0, 8015a82 <powf+0x20e>
 8015a78:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015a7c:	4b2a      	ldr	r3, [pc, #168]	; (8015b28 <powf+0x2b4>)
 8015a7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015a82:	f997 3000 	ldrsb.w	r3, [r7]
 8015a86:	2b02      	cmp	r3, #2
 8015a88:	d13e      	bne.n	8015b08 <powf+0x294>
 8015a8a:	f7fb faa1 	bl	8010fd0 <__errno>
 8015a8e:	2322      	movs	r3, #34	; 0x22
 8015a90:	e790      	b.n	80159b4 <powf+0x140>
 8015a92:	2200      	movs	r2, #0
 8015a94:	4b25      	ldr	r3, [pc, #148]	; (8015b2c <powf+0x2b8>)
 8015a96:	2100      	movs	r1, #0
 8015a98:	4628      	mov	r0, r5
 8015a9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015a9e:	f7eb fb29 	bl	80010f4 <__aeabi_fcmplt>
 8015aa2:	2800      	cmp	r0, #0
 8015aa4:	d0ed      	beq.n	8015a82 <powf+0x20e>
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	f003 fd68 	bl	801957c <rintf>
 8015aac:	4621      	mov	r1, r4
 8015aae:	f7eb fb17 	bl	80010e0 <__aeabi_fcmpeq>
 8015ab2:	2800      	cmp	r0, #0
 8015ab4:	d1e5      	bne.n	8015a82 <powf+0x20e>
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	4b19      	ldr	r3, [pc, #100]	; (8015b20 <powf+0x2ac>)
 8015aba:	e7e0      	b.n	8015a7e <powf+0x20a>
 8015abc:	2100      	movs	r1, #0
 8015abe:	4630      	mov	r0, r6
 8015ac0:	f7eb fb0e 	bl	80010e0 <__aeabi_fcmpeq>
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	f43f af46 	beq.w	8015956 <powf+0xe2>
 8015aca:	4628      	mov	r0, r5
 8015acc:	f003 fd0d 	bl	80194ea <finitef>
 8015ad0:	2800      	cmp	r0, #0
 8015ad2:	f43f af40 	beq.w	8015956 <powf+0xe2>
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	f003 fd07 	bl	80194ea <finitef>
 8015adc:	2800      	cmp	r0, #0
 8015ade:	f43f af3a 	beq.w	8015956 <powf+0xe2>
 8015ae2:	2304      	movs	r3, #4
 8015ae4:	9302      	str	r3, [sp, #8]
 8015ae6:	4b0c      	ldr	r3, [pc, #48]	; (8015b18 <powf+0x2a4>)
 8015ae8:	4628      	mov	r0, r5
 8015aea:	9303      	str	r3, [sp, #12]
 8015aec:	2300      	movs	r3, #0
 8015aee:	930a      	str	r3, [sp, #40]	; 0x28
 8015af0:	f7ea fcb4 	bl	800045c <__aeabi_f2d>
 8015af4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015af8:	4620      	mov	r0, r4
 8015afa:	f7ea fcaf 	bl	800045c <__aeabi_f2d>
 8015afe:	2200      	movs	r2, #0
 8015b00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015b04:	2300      	movs	r3, #0
 8015b06:	e7ba      	b.n	8015a7e <powf+0x20a>
 8015b08:	a802      	add	r0, sp, #8
 8015b0a:	f003 fadd 	bl	80190c8 <matherr>
 8015b0e:	2800      	cmp	r0, #0
 8015b10:	f47f af16 	bne.w	8015940 <powf+0xcc>
 8015b14:	e7b9      	b.n	8015a8a <powf+0x216>
 8015b16:	bf00      	nop
 8015b18:	08019dec 	.word	0x08019dec
 8015b1c:	3ff00000 	.word	0x3ff00000
 8015b20:	fff00000 	.word	0xfff00000
 8015b24:	47efffff 	.word	0x47efffff
 8015b28:	c7efffff 	.word	0xc7efffff
 8015b2c:	7ff00000 	.word	0x7ff00000
 8015b30:	20000230 	.word	0x20000230
 8015b34:	00000000 	.word	0x00000000

08015b38 <__ieee754_atan2>:
 8015b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b3c:	4256      	negs	r6, r2
 8015b3e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8015b42:	4316      	orrs	r6, r2
 8015b44:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8015cf0 <__ieee754_atan2+0x1b8>
 8015b48:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8015b4c:	454e      	cmp	r6, r9
 8015b4e:	4604      	mov	r4, r0
 8015b50:	460d      	mov	r5, r1
 8015b52:	469e      	mov	lr, r3
 8015b54:	d808      	bhi.n	8015b68 <__ieee754_atan2+0x30>
 8015b56:	4246      	negs	r6, r0
 8015b58:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8015b5c:	4306      	orrs	r6, r0
 8015b5e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8015b62:	454e      	cmp	r6, r9
 8015b64:	4688      	mov	r8, r1
 8015b66:	d906      	bls.n	8015b76 <__ieee754_atan2+0x3e>
 8015b68:	4620      	mov	r0, r4
 8015b6a:	4629      	mov	r1, r5
 8015b6c:	f7ea fb18 	bl	80001a0 <__adddf3>
 8015b70:	4604      	mov	r4, r0
 8015b72:	460d      	mov	r5, r1
 8015b74:	e030      	b.n	8015bd8 <__ieee754_atan2+0xa0>
 8015b76:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8015b7a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8015b7e:	4316      	orrs	r6, r2
 8015b80:	d103      	bne.n	8015b8a <__ieee754_atan2+0x52>
 8015b82:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b86:	f003 b887 	b.w	8018c98 <atan>
 8015b8a:	179e      	asrs	r6, r3, #30
 8015b8c:	f006 0602 	and.w	r6, r6, #2
 8015b90:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8015b94:	ea57 0100 	orrs.w	r1, r7, r0
 8015b98:	d107      	bne.n	8015baa <__ieee754_atan2+0x72>
 8015b9a:	2e02      	cmp	r6, #2
 8015b9c:	d079      	beq.n	8015c92 <__ieee754_atan2+0x15a>
 8015b9e:	2e03      	cmp	r6, #3
 8015ba0:	d11a      	bne.n	8015bd8 <__ieee754_atan2+0xa0>
 8015ba2:	a541      	add	r5, pc, #260	; (adr r5, 8015ca8 <__ieee754_atan2+0x170>)
 8015ba4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015ba8:	e016      	b.n	8015bd8 <__ieee754_atan2+0xa0>
 8015baa:	ea5c 0102 	orrs.w	r1, ip, r2
 8015bae:	d106      	bne.n	8015bbe <__ieee754_atan2+0x86>
 8015bb0:	f1b8 0f00 	cmp.w	r8, #0
 8015bb4:	da71      	bge.n	8015c9a <__ieee754_atan2+0x162>
 8015bb6:	a53e      	add	r5, pc, #248	; (adr r5, 8015cb0 <__ieee754_atan2+0x178>)
 8015bb8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015bbc:	e00c      	b.n	8015bd8 <__ieee754_atan2+0xa0>
 8015bbe:	45cc      	cmp	ip, r9
 8015bc0:	d123      	bne.n	8015c0a <__ieee754_atan2+0xd2>
 8015bc2:	4567      	cmp	r7, ip
 8015bc4:	d114      	bne.n	8015bf0 <__ieee754_atan2+0xb8>
 8015bc6:	2e02      	cmp	r6, #2
 8015bc8:	d00a      	beq.n	8015be0 <__ieee754_atan2+0xa8>
 8015bca:	2e03      	cmp	r6, #3
 8015bcc:	d00c      	beq.n	8015be8 <__ieee754_atan2+0xb0>
 8015bce:	2e01      	cmp	r6, #1
 8015bd0:	d15b      	bne.n	8015c8a <__ieee754_atan2+0x152>
 8015bd2:	a539      	add	r5, pc, #228	; (adr r5, 8015cb8 <__ieee754_atan2+0x180>)
 8015bd4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015bd8:	4620      	mov	r0, r4
 8015bda:	4629      	mov	r1, r5
 8015bdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be0:	a537      	add	r5, pc, #220	; (adr r5, 8015cc0 <__ieee754_atan2+0x188>)
 8015be2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015be6:	e7f7      	b.n	8015bd8 <__ieee754_atan2+0xa0>
 8015be8:	a537      	add	r5, pc, #220	; (adr r5, 8015cc8 <__ieee754_atan2+0x190>)
 8015bea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015bee:	e7f3      	b.n	8015bd8 <__ieee754_atan2+0xa0>
 8015bf0:	2e02      	cmp	r6, #2
 8015bf2:	d04e      	beq.n	8015c92 <__ieee754_atan2+0x15a>
 8015bf4:	2e03      	cmp	r6, #3
 8015bf6:	d0d4      	beq.n	8015ba2 <__ieee754_atan2+0x6a>
 8015bf8:	2e01      	cmp	r6, #1
 8015bfa:	f04f 0400 	mov.w	r4, #0
 8015bfe:	d102      	bne.n	8015c06 <__ieee754_atan2+0xce>
 8015c00:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8015c04:	e7e8      	b.n	8015bd8 <__ieee754_atan2+0xa0>
 8015c06:	2500      	movs	r5, #0
 8015c08:	e7e6      	b.n	8015bd8 <__ieee754_atan2+0xa0>
 8015c0a:	454f      	cmp	r7, r9
 8015c0c:	d0d0      	beq.n	8015bb0 <__ieee754_atan2+0x78>
 8015c0e:	eba7 070c 	sub.w	r7, r7, ip
 8015c12:	153f      	asrs	r7, r7, #20
 8015c14:	2f3c      	cmp	r7, #60	; 0x3c
 8015c16:	dc1e      	bgt.n	8015c56 <__ieee754_atan2+0x11e>
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	da01      	bge.n	8015c20 <__ieee754_atan2+0xe8>
 8015c1c:	373c      	adds	r7, #60	; 0x3c
 8015c1e:	db1e      	blt.n	8015c5e <__ieee754_atan2+0x126>
 8015c20:	4620      	mov	r0, r4
 8015c22:	4629      	mov	r1, r5
 8015c24:	f7ea fd9c 	bl	8000760 <__aeabi_ddiv>
 8015c28:	f003 f9c0 	bl	8018fac <fabs>
 8015c2c:	f003 f834 	bl	8018c98 <atan>
 8015c30:	4604      	mov	r4, r0
 8015c32:	460d      	mov	r5, r1
 8015c34:	2e01      	cmp	r6, #1
 8015c36:	d015      	beq.n	8015c64 <__ieee754_atan2+0x12c>
 8015c38:	2e02      	cmp	r6, #2
 8015c3a:	d017      	beq.n	8015c6c <__ieee754_atan2+0x134>
 8015c3c:	2e00      	cmp	r6, #0
 8015c3e:	d0cb      	beq.n	8015bd8 <__ieee754_atan2+0xa0>
 8015c40:	a323      	add	r3, pc, #140	; (adr r3, 8015cd0 <__ieee754_atan2+0x198>)
 8015c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c46:	4620      	mov	r0, r4
 8015c48:	4629      	mov	r1, r5
 8015c4a:	f7ea faa7 	bl	800019c <__aeabi_dsub>
 8015c4e:	a322      	add	r3, pc, #136	; (adr r3, 8015cd8 <__ieee754_atan2+0x1a0>)
 8015c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c54:	e016      	b.n	8015c84 <__ieee754_atan2+0x14c>
 8015c56:	a522      	add	r5, pc, #136	; (adr r5, 8015ce0 <__ieee754_atan2+0x1a8>)
 8015c58:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015c5c:	e7ea      	b.n	8015c34 <__ieee754_atan2+0xfc>
 8015c5e:	2400      	movs	r4, #0
 8015c60:	2500      	movs	r5, #0
 8015c62:	e7e7      	b.n	8015c34 <__ieee754_atan2+0xfc>
 8015c64:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8015c68:	461d      	mov	r5, r3
 8015c6a:	e7b5      	b.n	8015bd8 <__ieee754_atan2+0xa0>
 8015c6c:	a318      	add	r3, pc, #96	; (adr r3, 8015cd0 <__ieee754_atan2+0x198>)
 8015c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c72:	4620      	mov	r0, r4
 8015c74:	4629      	mov	r1, r5
 8015c76:	f7ea fa91 	bl	800019c <__aeabi_dsub>
 8015c7a:	4602      	mov	r2, r0
 8015c7c:	460b      	mov	r3, r1
 8015c7e:	a116      	add	r1, pc, #88	; (adr r1, 8015cd8 <__ieee754_atan2+0x1a0>)
 8015c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c84:	f7ea fa8a 	bl	800019c <__aeabi_dsub>
 8015c88:	e772      	b.n	8015b70 <__ieee754_atan2+0x38>
 8015c8a:	a517      	add	r5, pc, #92	; (adr r5, 8015ce8 <__ieee754_atan2+0x1b0>)
 8015c8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015c90:	e7a2      	b.n	8015bd8 <__ieee754_atan2+0xa0>
 8015c92:	a511      	add	r5, pc, #68	; (adr r5, 8015cd8 <__ieee754_atan2+0x1a0>)
 8015c94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015c98:	e79e      	b.n	8015bd8 <__ieee754_atan2+0xa0>
 8015c9a:	a511      	add	r5, pc, #68	; (adr r5, 8015ce0 <__ieee754_atan2+0x1a8>)
 8015c9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015ca0:	e79a      	b.n	8015bd8 <__ieee754_atan2+0xa0>
 8015ca2:	bf00      	nop
 8015ca4:	f3af 8000 	nop.w
 8015ca8:	54442d18 	.word	0x54442d18
 8015cac:	c00921fb 	.word	0xc00921fb
 8015cb0:	54442d18 	.word	0x54442d18
 8015cb4:	bff921fb 	.word	0xbff921fb
 8015cb8:	54442d18 	.word	0x54442d18
 8015cbc:	bfe921fb 	.word	0xbfe921fb
 8015cc0:	7f3321d2 	.word	0x7f3321d2
 8015cc4:	4002d97c 	.word	0x4002d97c
 8015cc8:	7f3321d2 	.word	0x7f3321d2
 8015ccc:	c002d97c 	.word	0xc002d97c
 8015cd0:	33145c07 	.word	0x33145c07
 8015cd4:	3ca1a626 	.word	0x3ca1a626
 8015cd8:	54442d18 	.word	0x54442d18
 8015cdc:	400921fb 	.word	0x400921fb
 8015ce0:	54442d18 	.word	0x54442d18
 8015ce4:	3ff921fb 	.word	0x3ff921fb
 8015ce8:	54442d18 	.word	0x54442d18
 8015cec:	3fe921fb 	.word	0x3fe921fb
 8015cf0:	7ff00000 	.word	0x7ff00000

08015cf4 <__ieee754_fmod>:
 8015cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cf8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8015cfc:	4682      	mov	sl, r0
 8015cfe:	ea54 0002 	orrs.w	r0, r4, r2
 8015d02:	461e      	mov	r6, r3
 8015d04:	4694      	mov	ip, r2
 8015d06:	4696      	mov	lr, r2
 8015d08:	d00c      	beq.n	8015d24 <__ieee754_fmod+0x30>
 8015d0a:	4d78      	ldr	r5, [pc, #480]	; (8015eec <__ieee754_fmod+0x1f8>)
 8015d0c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8015d10:	45a8      	cmp	r8, r5
 8015d12:	4689      	mov	r9, r1
 8015d14:	dc06      	bgt.n	8015d24 <__ieee754_fmod+0x30>
 8015d16:	4255      	negs	r5, r2
 8015d18:	4315      	orrs	r5, r2
 8015d1a:	4f75      	ldr	r7, [pc, #468]	; (8015ef0 <__ieee754_fmod+0x1fc>)
 8015d1c:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 8015d20:	42bd      	cmp	r5, r7
 8015d22:	d908      	bls.n	8015d36 <__ieee754_fmod+0x42>
 8015d24:	4650      	mov	r0, sl
 8015d26:	f7ea fbf1 	bl	800050c <__aeabi_dmul>
 8015d2a:	4602      	mov	r2, r0
 8015d2c:	460b      	mov	r3, r1
 8015d2e:	f7ea fd17 	bl	8000760 <__aeabi_ddiv>
 8015d32:	4682      	mov	sl, r0
 8015d34:	e00f      	b.n	8015d56 <__ieee754_fmod+0x62>
 8015d36:	45a0      	cmp	r8, r4
 8015d38:	4652      	mov	r2, sl
 8015d3a:	4657      	mov	r7, sl
 8015d3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8015d40:	dc0c      	bgt.n	8015d5c <__ieee754_fmod+0x68>
 8015d42:	db08      	blt.n	8015d56 <__ieee754_fmod+0x62>
 8015d44:	45e2      	cmp	sl, ip
 8015d46:	d306      	bcc.n	8015d56 <__ieee754_fmod+0x62>
 8015d48:	d108      	bne.n	8015d5c <__ieee754_fmod+0x68>
 8015d4a:	496a      	ldr	r1, [pc, #424]	; (8015ef4 <__ieee754_fmod+0x200>)
 8015d4c:	0fed      	lsrs	r5, r5, #31
 8015d4e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015d52:	e9d5 a100 	ldrd	sl, r1, [r5]
 8015d56:	4650      	mov	r0, sl
 8015d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d5c:	4b66      	ldr	r3, [pc, #408]	; (8015ef8 <__ieee754_fmod+0x204>)
 8015d5e:	4598      	cmp	r8, r3
 8015d60:	dc48      	bgt.n	8015df4 <__ieee754_fmod+0x100>
 8015d62:	f1b8 0f00 	cmp.w	r8, #0
 8015d66:	d13c      	bne.n	8015de2 <__ieee754_fmod+0xee>
 8015d68:	4611      	mov	r1, r2
 8015d6a:	4864      	ldr	r0, [pc, #400]	; (8015efc <__ieee754_fmod+0x208>)
 8015d6c:	2900      	cmp	r1, #0
 8015d6e:	dc35      	bgt.n	8015ddc <__ieee754_fmod+0xe8>
 8015d70:	429c      	cmp	r4, r3
 8015d72:	dc4f      	bgt.n	8015e14 <__ieee754_fmod+0x120>
 8015d74:	2c00      	cmp	r4, #0
 8015d76:	d145      	bne.n	8015e04 <__ieee754_fmod+0x110>
 8015d78:	4661      	mov	r1, ip
 8015d7a:	4b60      	ldr	r3, [pc, #384]	; (8015efc <__ieee754_fmod+0x208>)
 8015d7c:	2900      	cmp	r1, #0
 8015d7e:	dc3e      	bgt.n	8015dfe <__ieee754_fmod+0x10a>
 8015d80:	495f      	ldr	r1, [pc, #380]	; (8015f00 <__ieee754_fmod+0x20c>)
 8015d82:	4288      	cmp	r0, r1
 8015d84:	db4a      	blt.n	8015e1c <__ieee754_fmod+0x128>
 8015d86:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8015d8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8015d8e:	4a5c      	ldr	r2, [pc, #368]	; (8015f00 <__ieee754_fmod+0x20c>)
 8015d90:	4293      	cmp	r3, r2
 8015d92:	db57      	blt.n	8015e44 <__ieee754_fmod+0x150>
 8015d94:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8015d98:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8015d9c:	1ac0      	subs	r0, r0, r3
 8015d9e:	1b8a      	subs	r2, r1, r6
 8015da0:	eba7 040e 	sub.w	r4, r7, lr
 8015da4:	2800      	cmp	r0, #0
 8015da6:	d163      	bne.n	8015e70 <__ieee754_fmod+0x17c>
 8015da8:	4577      	cmp	r7, lr
 8015daa:	bf38      	it	cc
 8015dac:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8015db0:	2a00      	cmp	r2, #0
 8015db2:	bfbc      	itt	lt
 8015db4:	463c      	movlt	r4, r7
 8015db6:	460a      	movlt	r2, r1
 8015db8:	ea52 0104 	orrs.w	r1, r2, r4
 8015dbc:	d0c5      	beq.n	8015d4a <__ieee754_fmod+0x56>
 8015dbe:	494e      	ldr	r1, [pc, #312]	; (8015ef8 <__ieee754_fmod+0x204>)
 8015dc0:	428a      	cmp	r2, r1
 8015dc2:	dd6a      	ble.n	8015e9a <__ieee754_fmod+0x1a6>
 8015dc4:	494e      	ldr	r1, [pc, #312]	; (8015f00 <__ieee754_fmod+0x20c>)
 8015dc6:	428b      	cmp	r3, r1
 8015dc8:	db6d      	blt.n	8015ea6 <__ieee754_fmod+0x1b2>
 8015dca:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8015dce:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8015dd2:	4315      	orrs	r5, r2
 8015dd4:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8015dd8:	4620      	mov	r0, r4
 8015dda:	e7aa      	b.n	8015d32 <__ieee754_fmod+0x3e>
 8015ddc:	3801      	subs	r0, #1
 8015dde:	0049      	lsls	r1, r1, #1
 8015de0:	e7c4      	b.n	8015d6c <__ieee754_fmod+0x78>
 8015de2:	4847      	ldr	r0, [pc, #284]	; (8015f00 <__ieee754_fmod+0x20c>)
 8015de4:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8015de8:	0049      	lsls	r1, r1, #1
 8015dea:	2900      	cmp	r1, #0
 8015dec:	f100 30ff 	add.w	r0, r0, #4294967295
 8015df0:	dcfa      	bgt.n	8015de8 <__ieee754_fmod+0xf4>
 8015df2:	e7bd      	b.n	8015d70 <__ieee754_fmod+0x7c>
 8015df4:	ea4f 5028 	mov.w	r0, r8, asr #20
 8015df8:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8015dfc:	e7b8      	b.n	8015d70 <__ieee754_fmod+0x7c>
 8015dfe:	3b01      	subs	r3, #1
 8015e00:	0049      	lsls	r1, r1, #1
 8015e02:	e7bb      	b.n	8015d7c <__ieee754_fmod+0x88>
 8015e04:	4b3e      	ldr	r3, [pc, #248]	; (8015f00 <__ieee754_fmod+0x20c>)
 8015e06:	02e1      	lsls	r1, r4, #11
 8015e08:	0049      	lsls	r1, r1, #1
 8015e0a:	2900      	cmp	r1, #0
 8015e0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8015e10:	dcfa      	bgt.n	8015e08 <__ieee754_fmod+0x114>
 8015e12:	e7b5      	b.n	8015d80 <__ieee754_fmod+0x8c>
 8015e14:	1523      	asrs	r3, r4, #20
 8015e16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015e1a:	e7b1      	b.n	8015d80 <__ieee754_fmod+0x8c>
 8015e1c:	1a0f      	subs	r7, r1, r0
 8015e1e:	2f1f      	cmp	r7, #31
 8015e20:	dc0a      	bgt.n	8015e38 <__ieee754_fmod+0x144>
 8015e22:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8015e26:	fa08 f807 	lsl.w	r8, r8, r7
 8015e2a:	fa22 f101 	lsr.w	r1, r2, r1
 8015e2e:	ea41 0108 	orr.w	r1, r1, r8
 8015e32:	fa02 f707 	lsl.w	r7, r2, r7
 8015e36:	e7aa      	b.n	8015d8e <__ieee754_fmod+0x9a>
 8015e38:	4932      	ldr	r1, [pc, #200]	; (8015f04 <__ieee754_fmod+0x210>)
 8015e3a:	2700      	movs	r7, #0
 8015e3c:	1a09      	subs	r1, r1, r0
 8015e3e:	fa02 f101 	lsl.w	r1, r2, r1
 8015e42:	e7a4      	b.n	8015d8e <__ieee754_fmod+0x9a>
 8015e44:	eba2 0e03 	sub.w	lr, r2, r3
 8015e48:	f1be 0f1f 	cmp.w	lr, #31
 8015e4c:	dc09      	bgt.n	8015e62 <__ieee754_fmod+0x16e>
 8015e4e:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8015e52:	fa04 f40e 	lsl.w	r4, r4, lr
 8015e56:	fa2c f606 	lsr.w	r6, ip, r6
 8015e5a:	4326      	orrs	r6, r4
 8015e5c:	fa0c fe0e 	lsl.w	lr, ip, lr
 8015e60:	e79c      	b.n	8015d9c <__ieee754_fmod+0xa8>
 8015e62:	4e28      	ldr	r6, [pc, #160]	; (8015f04 <__ieee754_fmod+0x210>)
 8015e64:	f04f 0e00 	mov.w	lr, #0
 8015e68:	1af6      	subs	r6, r6, r3
 8015e6a:	fa0c f606 	lsl.w	r6, ip, r6
 8015e6e:	e795      	b.n	8015d9c <__ieee754_fmod+0xa8>
 8015e70:	4577      	cmp	r7, lr
 8015e72:	bf38      	it	cc
 8015e74:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8015e78:	2a00      	cmp	r2, #0
 8015e7a:	da05      	bge.n	8015e88 <__ieee754_fmod+0x194>
 8015e7c:	0ffa      	lsrs	r2, r7, #31
 8015e7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8015e82:	007f      	lsls	r7, r7, #1
 8015e84:	3801      	subs	r0, #1
 8015e86:	e78a      	b.n	8015d9e <__ieee754_fmod+0xaa>
 8015e88:	ea52 0104 	orrs.w	r1, r2, r4
 8015e8c:	f43f af5d 	beq.w	8015d4a <__ieee754_fmod+0x56>
 8015e90:	0fe1      	lsrs	r1, r4, #31
 8015e92:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8015e96:	0067      	lsls	r7, r4, #1
 8015e98:	e7f4      	b.n	8015e84 <__ieee754_fmod+0x190>
 8015e9a:	0fe0      	lsrs	r0, r4, #31
 8015e9c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8015ea0:	0064      	lsls	r4, r4, #1
 8015ea2:	3b01      	subs	r3, #1
 8015ea4:	e78c      	b.n	8015dc0 <__ieee754_fmod+0xcc>
 8015ea6:	1ac9      	subs	r1, r1, r3
 8015ea8:	2914      	cmp	r1, #20
 8015eaa:	dc0a      	bgt.n	8015ec2 <__ieee754_fmod+0x1ce>
 8015eac:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8015eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8015eb4:	40cc      	lsrs	r4, r1
 8015eb6:	4323      	orrs	r3, r4
 8015eb8:	410a      	asrs	r2, r1
 8015eba:	ea42 0105 	orr.w	r1, r2, r5
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	e737      	b.n	8015d32 <__ieee754_fmod+0x3e>
 8015ec2:	291f      	cmp	r1, #31
 8015ec4:	dc07      	bgt.n	8015ed6 <__ieee754_fmod+0x1e2>
 8015ec6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8015eca:	40cc      	lsrs	r4, r1
 8015ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8015ed0:	4323      	orrs	r3, r4
 8015ed2:	462a      	mov	r2, r5
 8015ed4:	e7f1      	b.n	8015eba <__ieee754_fmod+0x1c6>
 8015ed6:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8015eda:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8015ede:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8015ee2:	33e2      	adds	r3, #226	; 0xe2
 8015ee4:	fa42 f303 	asr.w	r3, r2, r3
 8015ee8:	e7f3      	b.n	8015ed2 <__ieee754_fmod+0x1de>
 8015eea:	bf00      	nop
 8015eec:	7fefffff 	.word	0x7fefffff
 8015ef0:	7ff00000 	.word	0x7ff00000
 8015ef4:	08019df8 	.word	0x08019df8
 8015ef8:	000fffff 	.word	0x000fffff
 8015efc:	fffffbed 	.word	0xfffffbed
 8015f00:	fffffc02 	.word	0xfffffc02
 8015f04:	fffffbe2 	.word	0xfffffbe2

08015f08 <__ieee754_pow>:
 8015f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f0c:	b091      	sub	sp, #68	; 0x44
 8015f0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015f12:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8015f16:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8015f1a:	ea55 0302 	orrs.w	r3, r5, r2
 8015f1e:	4607      	mov	r7, r0
 8015f20:	4688      	mov	r8, r1
 8015f22:	f000 84b7 	beq.w	8016894 <__ieee754_pow+0x98c>
 8015f26:	4b80      	ldr	r3, [pc, #512]	; (8016128 <__ieee754_pow+0x220>)
 8015f28:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8015f2c:	429c      	cmp	r4, r3
 8015f2e:	4689      	mov	r9, r1
 8015f30:	4682      	mov	sl, r0
 8015f32:	dc09      	bgt.n	8015f48 <__ieee754_pow+0x40>
 8015f34:	d103      	bne.n	8015f3e <__ieee754_pow+0x36>
 8015f36:	b938      	cbnz	r0, 8015f48 <__ieee754_pow+0x40>
 8015f38:	42a5      	cmp	r5, r4
 8015f3a:	dc0d      	bgt.n	8015f58 <__ieee754_pow+0x50>
 8015f3c:	e001      	b.n	8015f42 <__ieee754_pow+0x3a>
 8015f3e:	429d      	cmp	r5, r3
 8015f40:	dc02      	bgt.n	8015f48 <__ieee754_pow+0x40>
 8015f42:	429d      	cmp	r5, r3
 8015f44:	d10e      	bne.n	8015f64 <__ieee754_pow+0x5c>
 8015f46:	b16a      	cbz	r2, 8015f64 <__ieee754_pow+0x5c>
 8015f48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015f4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015f50:	ea54 030a 	orrs.w	r3, r4, sl
 8015f54:	f000 849e 	beq.w	8016894 <__ieee754_pow+0x98c>
 8015f58:	4874      	ldr	r0, [pc, #464]	; (801612c <__ieee754_pow+0x224>)
 8015f5a:	b011      	add	sp, #68	; 0x44
 8015f5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f60:	f003 b8b4 	b.w	80190cc <nan>
 8015f64:	f1b9 0f00 	cmp.w	r9, #0
 8015f68:	da53      	bge.n	8016012 <__ieee754_pow+0x10a>
 8015f6a:	4b71      	ldr	r3, [pc, #452]	; (8016130 <__ieee754_pow+0x228>)
 8015f6c:	429d      	cmp	r5, r3
 8015f6e:	dc4e      	bgt.n	801600e <__ieee754_pow+0x106>
 8015f70:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015f74:	429d      	cmp	r5, r3
 8015f76:	dd4c      	ble.n	8016012 <__ieee754_pow+0x10a>
 8015f78:	152b      	asrs	r3, r5, #20
 8015f7a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015f7e:	2b14      	cmp	r3, #20
 8015f80:	dd28      	ble.n	8015fd4 <__ieee754_pow+0xcc>
 8015f82:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015f86:	fa22 f103 	lsr.w	r1, r2, r3
 8015f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8015f8e:	4293      	cmp	r3, r2
 8015f90:	d13f      	bne.n	8016012 <__ieee754_pow+0x10a>
 8015f92:	f001 0101 	and.w	r1, r1, #1
 8015f96:	f1c1 0302 	rsb	r3, r1, #2
 8015f9a:	9300      	str	r3, [sp, #0]
 8015f9c:	2a00      	cmp	r2, #0
 8015f9e:	d15c      	bne.n	801605a <__ieee754_pow+0x152>
 8015fa0:	4b61      	ldr	r3, [pc, #388]	; (8016128 <__ieee754_pow+0x220>)
 8015fa2:	429d      	cmp	r5, r3
 8015fa4:	d126      	bne.n	8015ff4 <__ieee754_pow+0xec>
 8015fa6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015faa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015fae:	ea53 030a 	orrs.w	r3, r3, sl
 8015fb2:	f000 846f 	beq.w	8016894 <__ieee754_pow+0x98c>
 8015fb6:	4b5f      	ldr	r3, [pc, #380]	; (8016134 <__ieee754_pow+0x22c>)
 8015fb8:	429c      	cmp	r4, r3
 8015fba:	dd2c      	ble.n	8016016 <__ieee754_pow+0x10e>
 8015fbc:	2e00      	cmp	r6, #0
 8015fbe:	f280 846f 	bge.w	80168a0 <__ieee754_pow+0x998>
 8015fc2:	f04f 0b00 	mov.w	fp, #0
 8015fc6:	f04f 0c00 	mov.w	ip, #0
 8015fca:	4658      	mov	r0, fp
 8015fcc:	4661      	mov	r1, ip
 8015fce:	b011      	add	sp, #68	; 0x44
 8015fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fd4:	2a00      	cmp	r2, #0
 8015fd6:	d13e      	bne.n	8016056 <__ieee754_pow+0x14e>
 8015fd8:	f1c3 0314 	rsb	r3, r3, #20
 8015fdc:	fa45 f103 	asr.w	r1, r5, r3
 8015fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8015fe4:	42ab      	cmp	r3, r5
 8015fe6:	f040 8463 	bne.w	80168b0 <__ieee754_pow+0x9a8>
 8015fea:	f001 0101 	and.w	r1, r1, #1
 8015fee:	f1c1 0302 	rsb	r3, r1, #2
 8015ff2:	9300      	str	r3, [sp, #0]
 8015ff4:	4b50      	ldr	r3, [pc, #320]	; (8016138 <__ieee754_pow+0x230>)
 8015ff6:	429d      	cmp	r5, r3
 8015ff8:	d114      	bne.n	8016024 <__ieee754_pow+0x11c>
 8015ffa:	2e00      	cmp	r6, #0
 8015ffc:	f280 8454 	bge.w	80168a8 <__ieee754_pow+0x9a0>
 8016000:	463a      	mov	r2, r7
 8016002:	4643      	mov	r3, r8
 8016004:	2000      	movs	r0, #0
 8016006:	494c      	ldr	r1, [pc, #304]	; (8016138 <__ieee754_pow+0x230>)
 8016008:	f7ea fbaa 	bl	8000760 <__aeabi_ddiv>
 801600c:	e013      	b.n	8016036 <__ieee754_pow+0x12e>
 801600e:	2302      	movs	r3, #2
 8016010:	e7c3      	b.n	8015f9a <__ieee754_pow+0x92>
 8016012:	2300      	movs	r3, #0
 8016014:	e7c1      	b.n	8015f9a <__ieee754_pow+0x92>
 8016016:	2e00      	cmp	r6, #0
 8016018:	dad3      	bge.n	8015fc2 <__ieee754_pow+0xba>
 801601a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801601e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8016022:	e7d2      	b.n	8015fca <__ieee754_pow+0xc2>
 8016024:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8016028:	d108      	bne.n	801603c <__ieee754_pow+0x134>
 801602a:	463a      	mov	r2, r7
 801602c:	4643      	mov	r3, r8
 801602e:	4638      	mov	r0, r7
 8016030:	4641      	mov	r1, r8
 8016032:	f7ea fa6b 	bl	800050c <__aeabi_dmul>
 8016036:	4683      	mov	fp, r0
 8016038:	468c      	mov	ip, r1
 801603a:	e7c6      	b.n	8015fca <__ieee754_pow+0xc2>
 801603c:	4b3f      	ldr	r3, [pc, #252]	; (801613c <__ieee754_pow+0x234>)
 801603e:	429e      	cmp	r6, r3
 8016040:	d10b      	bne.n	801605a <__ieee754_pow+0x152>
 8016042:	f1b9 0f00 	cmp.w	r9, #0
 8016046:	db08      	blt.n	801605a <__ieee754_pow+0x152>
 8016048:	4638      	mov	r0, r7
 801604a:	4641      	mov	r1, r8
 801604c:	b011      	add	sp, #68	; 0x44
 801604e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016052:	f000 be55 	b.w	8016d00 <__ieee754_sqrt>
 8016056:	2300      	movs	r3, #0
 8016058:	9300      	str	r3, [sp, #0]
 801605a:	4638      	mov	r0, r7
 801605c:	4641      	mov	r1, r8
 801605e:	f002 ffa5 	bl	8018fac <fabs>
 8016062:	4683      	mov	fp, r0
 8016064:	468c      	mov	ip, r1
 8016066:	f1ba 0f00 	cmp.w	sl, #0
 801606a:	d12b      	bne.n	80160c4 <__ieee754_pow+0x1bc>
 801606c:	b124      	cbz	r4, 8016078 <__ieee754_pow+0x170>
 801606e:	4b32      	ldr	r3, [pc, #200]	; (8016138 <__ieee754_pow+0x230>)
 8016070:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8016074:	429a      	cmp	r2, r3
 8016076:	d125      	bne.n	80160c4 <__ieee754_pow+0x1bc>
 8016078:	2e00      	cmp	r6, #0
 801607a:	da07      	bge.n	801608c <__ieee754_pow+0x184>
 801607c:	465a      	mov	r2, fp
 801607e:	4663      	mov	r3, ip
 8016080:	2000      	movs	r0, #0
 8016082:	492d      	ldr	r1, [pc, #180]	; (8016138 <__ieee754_pow+0x230>)
 8016084:	f7ea fb6c 	bl	8000760 <__aeabi_ddiv>
 8016088:	4683      	mov	fp, r0
 801608a:	468c      	mov	ip, r1
 801608c:	f1b9 0f00 	cmp.w	r9, #0
 8016090:	da9b      	bge.n	8015fca <__ieee754_pow+0xc2>
 8016092:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016096:	9b00      	ldr	r3, [sp, #0]
 8016098:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801609c:	4323      	orrs	r3, r4
 801609e:	d108      	bne.n	80160b2 <__ieee754_pow+0x1aa>
 80160a0:	465a      	mov	r2, fp
 80160a2:	4663      	mov	r3, ip
 80160a4:	4658      	mov	r0, fp
 80160a6:	4661      	mov	r1, ip
 80160a8:	f7ea f878 	bl	800019c <__aeabi_dsub>
 80160ac:	4602      	mov	r2, r0
 80160ae:	460b      	mov	r3, r1
 80160b0:	e7aa      	b.n	8016008 <__ieee754_pow+0x100>
 80160b2:	9b00      	ldr	r3, [sp, #0]
 80160b4:	2b01      	cmp	r3, #1
 80160b6:	d188      	bne.n	8015fca <__ieee754_pow+0xc2>
 80160b8:	4658      	mov	r0, fp
 80160ba:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80160be:	4683      	mov	fp, r0
 80160c0:	469c      	mov	ip, r3
 80160c2:	e782      	b.n	8015fca <__ieee754_pow+0xc2>
 80160c4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80160c8:	f109 33ff 	add.w	r3, r9, #4294967295
 80160cc:	930d      	str	r3, [sp, #52]	; 0x34
 80160ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80160d0:	9b00      	ldr	r3, [sp, #0]
 80160d2:	4313      	orrs	r3, r2
 80160d4:	d104      	bne.n	80160e0 <__ieee754_pow+0x1d8>
 80160d6:	463a      	mov	r2, r7
 80160d8:	4643      	mov	r3, r8
 80160da:	4638      	mov	r0, r7
 80160dc:	4641      	mov	r1, r8
 80160de:	e7e3      	b.n	80160a8 <__ieee754_pow+0x1a0>
 80160e0:	4b17      	ldr	r3, [pc, #92]	; (8016140 <__ieee754_pow+0x238>)
 80160e2:	429d      	cmp	r5, r3
 80160e4:	f340 80fe 	ble.w	80162e4 <__ieee754_pow+0x3dc>
 80160e8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80160ec:	429d      	cmp	r5, r3
 80160ee:	dd0b      	ble.n	8016108 <__ieee754_pow+0x200>
 80160f0:	4b10      	ldr	r3, [pc, #64]	; (8016134 <__ieee754_pow+0x22c>)
 80160f2:	429c      	cmp	r4, r3
 80160f4:	dc0e      	bgt.n	8016114 <__ieee754_pow+0x20c>
 80160f6:	2e00      	cmp	r6, #0
 80160f8:	f6bf af63 	bge.w	8015fc2 <__ieee754_pow+0xba>
 80160fc:	a308      	add	r3, pc, #32	; (adr r3, 8016120 <__ieee754_pow+0x218>)
 80160fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016102:	4610      	mov	r0, r2
 8016104:	4619      	mov	r1, r3
 8016106:	e794      	b.n	8016032 <__ieee754_pow+0x12a>
 8016108:	4b0e      	ldr	r3, [pc, #56]	; (8016144 <__ieee754_pow+0x23c>)
 801610a:	429c      	cmp	r4, r3
 801610c:	ddf3      	ble.n	80160f6 <__ieee754_pow+0x1ee>
 801610e:	4b0a      	ldr	r3, [pc, #40]	; (8016138 <__ieee754_pow+0x230>)
 8016110:	429c      	cmp	r4, r3
 8016112:	dd19      	ble.n	8016148 <__ieee754_pow+0x240>
 8016114:	2e00      	cmp	r6, #0
 8016116:	dcf1      	bgt.n	80160fc <__ieee754_pow+0x1f4>
 8016118:	e753      	b.n	8015fc2 <__ieee754_pow+0xba>
 801611a:	bf00      	nop
 801611c:	f3af 8000 	nop.w
 8016120:	8800759c 	.word	0x8800759c
 8016124:	7e37e43c 	.word	0x7e37e43c
 8016128:	7ff00000 	.word	0x7ff00000
 801612c:	08019dc1 	.word	0x08019dc1
 8016130:	433fffff 	.word	0x433fffff
 8016134:	3fefffff 	.word	0x3fefffff
 8016138:	3ff00000 	.word	0x3ff00000
 801613c:	3fe00000 	.word	0x3fe00000
 8016140:	41e00000 	.word	0x41e00000
 8016144:	3feffffe 	.word	0x3feffffe
 8016148:	4661      	mov	r1, ip
 801614a:	2200      	movs	r2, #0
 801614c:	4b60      	ldr	r3, [pc, #384]	; (80162d0 <__ieee754_pow+0x3c8>)
 801614e:	4658      	mov	r0, fp
 8016150:	f7ea f824 	bl	800019c <__aeabi_dsub>
 8016154:	a354      	add	r3, pc, #336	; (adr r3, 80162a8 <__ieee754_pow+0x3a0>)
 8016156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801615a:	4604      	mov	r4, r0
 801615c:	460d      	mov	r5, r1
 801615e:	f7ea f9d5 	bl	800050c <__aeabi_dmul>
 8016162:	a353      	add	r3, pc, #332	; (adr r3, 80162b0 <__ieee754_pow+0x3a8>)
 8016164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016168:	4606      	mov	r6, r0
 801616a:	460f      	mov	r7, r1
 801616c:	4620      	mov	r0, r4
 801616e:	4629      	mov	r1, r5
 8016170:	f7ea f9cc 	bl	800050c <__aeabi_dmul>
 8016174:	2200      	movs	r2, #0
 8016176:	4682      	mov	sl, r0
 8016178:	468b      	mov	fp, r1
 801617a:	4b56      	ldr	r3, [pc, #344]	; (80162d4 <__ieee754_pow+0x3cc>)
 801617c:	4620      	mov	r0, r4
 801617e:	4629      	mov	r1, r5
 8016180:	f7ea f9c4 	bl	800050c <__aeabi_dmul>
 8016184:	4602      	mov	r2, r0
 8016186:	460b      	mov	r3, r1
 8016188:	a14b      	add	r1, pc, #300	; (adr r1, 80162b8 <__ieee754_pow+0x3b0>)
 801618a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801618e:	f7ea f805 	bl	800019c <__aeabi_dsub>
 8016192:	4622      	mov	r2, r4
 8016194:	462b      	mov	r3, r5
 8016196:	f7ea f9b9 	bl	800050c <__aeabi_dmul>
 801619a:	4602      	mov	r2, r0
 801619c:	460b      	mov	r3, r1
 801619e:	2000      	movs	r0, #0
 80161a0:	494d      	ldr	r1, [pc, #308]	; (80162d8 <__ieee754_pow+0x3d0>)
 80161a2:	f7e9 fffb 	bl	800019c <__aeabi_dsub>
 80161a6:	4622      	mov	r2, r4
 80161a8:	462b      	mov	r3, r5
 80161aa:	4680      	mov	r8, r0
 80161ac:	4689      	mov	r9, r1
 80161ae:	4620      	mov	r0, r4
 80161b0:	4629      	mov	r1, r5
 80161b2:	f7ea f9ab 	bl	800050c <__aeabi_dmul>
 80161b6:	4602      	mov	r2, r0
 80161b8:	460b      	mov	r3, r1
 80161ba:	4640      	mov	r0, r8
 80161bc:	4649      	mov	r1, r9
 80161be:	f7ea f9a5 	bl	800050c <__aeabi_dmul>
 80161c2:	a33f      	add	r3, pc, #252	; (adr r3, 80162c0 <__ieee754_pow+0x3b8>)
 80161c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c8:	f7ea f9a0 	bl	800050c <__aeabi_dmul>
 80161cc:	4602      	mov	r2, r0
 80161ce:	460b      	mov	r3, r1
 80161d0:	4650      	mov	r0, sl
 80161d2:	4659      	mov	r1, fp
 80161d4:	f7e9 ffe2 	bl	800019c <__aeabi_dsub>
 80161d8:	4602      	mov	r2, r0
 80161da:	460b      	mov	r3, r1
 80161dc:	4604      	mov	r4, r0
 80161de:	460d      	mov	r5, r1
 80161e0:	4630      	mov	r0, r6
 80161e2:	4639      	mov	r1, r7
 80161e4:	f7e9 ffdc 	bl	80001a0 <__adddf3>
 80161e8:	2000      	movs	r0, #0
 80161ea:	468b      	mov	fp, r1
 80161ec:	4682      	mov	sl, r0
 80161ee:	4632      	mov	r2, r6
 80161f0:	463b      	mov	r3, r7
 80161f2:	f7e9 ffd3 	bl	800019c <__aeabi_dsub>
 80161f6:	4602      	mov	r2, r0
 80161f8:	460b      	mov	r3, r1
 80161fa:	4620      	mov	r0, r4
 80161fc:	4629      	mov	r1, r5
 80161fe:	f7e9 ffcd 	bl	800019c <__aeabi_dsub>
 8016202:	9b00      	ldr	r3, [sp, #0]
 8016204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016206:	3b01      	subs	r3, #1
 8016208:	4313      	orrs	r3, r2
 801620a:	f04f 0300 	mov.w	r3, #0
 801620e:	bf0c      	ite	eq
 8016210:	4c32      	ldreq	r4, [pc, #200]	; (80162dc <__ieee754_pow+0x3d4>)
 8016212:	4c2f      	ldrne	r4, [pc, #188]	; (80162d0 <__ieee754_pow+0x3c8>)
 8016214:	4606      	mov	r6, r0
 8016216:	e9cd 3400 	strd	r3, r4, [sp]
 801621a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801621e:	2400      	movs	r4, #0
 8016220:	460f      	mov	r7, r1
 8016222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016226:	4622      	mov	r2, r4
 8016228:	462b      	mov	r3, r5
 801622a:	f7e9 ffb7 	bl	800019c <__aeabi_dsub>
 801622e:	4652      	mov	r2, sl
 8016230:	465b      	mov	r3, fp
 8016232:	f7ea f96b 	bl	800050c <__aeabi_dmul>
 8016236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801623a:	4680      	mov	r8, r0
 801623c:	4689      	mov	r9, r1
 801623e:	4630      	mov	r0, r6
 8016240:	4639      	mov	r1, r7
 8016242:	f7ea f963 	bl	800050c <__aeabi_dmul>
 8016246:	4602      	mov	r2, r0
 8016248:	460b      	mov	r3, r1
 801624a:	4640      	mov	r0, r8
 801624c:	4649      	mov	r1, r9
 801624e:	f7e9 ffa7 	bl	80001a0 <__adddf3>
 8016252:	4622      	mov	r2, r4
 8016254:	462b      	mov	r3, r5
 8016256:	4680      	mov	r8, r0
 8016258:	4689      	mov	r9, r1
 801625a:	4650      	mov	r0, sl
 801625c:	4659      	mov	r1, fp
 801625e:	f7ea f955 	bl	800050c <__aeabi_dmul>
 8016262:	4604      	mov	r4, r0
 8016264:	460d      	mov	r5, r1
 8016266:	460b      	mov	r3, r1
 8016268:	4602      	mov	r2, r0
 801626a:	4649      	mov	r1, r9
 801626c:	4640      	mov	r0, r8
 801626e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8016272:	f7e9 ff95 	bl	80001a0 <__adddf3>
 8016276:	4b1a      	ldr	r3, [pc, #104]	; (80162e0 <__ieee754_pow+0x3d8>)
 8016278:	4682      	mov	sl, r0
 801627a:	4299      	cmp	r1, r3
 801627c:	460f      	mov	r7, r1
 801627e:	460e      	mov	r6, r1
 8016280:	f340 82e1 	ble.w	8016846 <__ieee754_pow+0x93e>
 8016284:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016288:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801628c:	4303      	orrs	r3, r0
 801628e:	f000 81db 	beq.w	8016648 <__ieee754_pow+0x740>
 8016292:	a30d      	add	r3, pc, #52	; (adr r3, 80162c8 <__ieee754_pow+0x3c0>)
 8016294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016298:	e9dd 0100 	ldrd	r0, r1, [sp]
 801629c:	f7ea f936 	bl	800050c <__aeabi_dmul>
 80162a0:	a309      	add	r3, pc, #36	; (adr r3, 80162c8 <__ieee754_pow+0x3c0>)
 80162a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162a6:	e6c4      	b.n	8016032 <__ieee754_pow+0x12a>
 80162a8:	60000000 	.word	0x60000000
 80162ac:	3ff71547 	.word	0x3ff71547
 80162b0:	f85ddf44 	.word	0xf85ddf44
 80162b4:	3e54ae0b 	.word	0x3e54ae0b
 80162b8:	55555555 	.word	0x55555555
 80162bc:	3fd55555 	.word	0x3fd55555
 80162c0:	652b82fe 	.word	0x652b82fe
 80162c4:	3ff71547 	.word	0x3ff71547
 80162c8:	8800759c 	.word	0x8800759c
 80162cc:	7e37e43c 	.word	0x7e37e43c
 80162d0:	3ff00000 	.word	0x3ff00000
 80162d4:	3fd00000 	.word	0x3fd00000
 80162d8:	3fe00000 	.word	0x3fe00000
 80162dc:	bff00000 	.word	0xbff00000
 80162e0:	408fffff 	.word	0x408fffff
 80162e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80162e8:	f04f 0200 	mov.w	r2, #0
 80162ec:	da08      	bge.n	8016300 <__ieee754_pow+0x3f8>
 80162ee:	4658      	mov	r0, fp
 80162f0:	4bcd      	ldr	r3, [pc, #820]	; (8016628 <__ieee754_pow+0x720>)
 80162f2:	4661      	mov	r1, ip
 80162f4:	f7ea f90a 	bl	800050c <__aeabi_dmul>
 80162f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80162fc:	4683      	mov	fp, r0
 80162fe:	460c      	mov	r4, r1
 8016300:	1523      	asrs	r3, r4, #20
 8016302:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016306:	4413      	add	r3, r2
 8016308:	930c      	str	r3, [sp, #48]	; 0x30
 801630a:	4bc8      	ldr	r3, [pc, #800]	; (801662c <__ieee754_pow+0x724>)
 801630c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016310:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016314:	429c      	cmp	r4, r3
 8016316:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801631a:	dd08      	ble.n	801632e <__ieee754_pow+0x426>
 801631c:	4bc4      	ldr	r3, [pc, #784]	; (8016630 <__ieee754_pow+0x728>)
 801631e:	429c      	cmp	r4, r3
 8016320:	f340 815b 	ble.w	80165da <__ieee754_pow+0x6d2>
 8016324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016326:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801632a:	3301      	adds	r3, #1
 801632c:	930c      	str	r3, [sp, #48]	; 0x30
 801632e:	f04f 0800 	mov.w	r8, #0
 8016332:	4658      	mov	r0, fp
 8016334:	4629      	mov	r1, r5
 8016336:	4bbf      	ldr	r3, [pc, #764]	; (8016634 <__ieee754_pow+0x72c>)
 8016338:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 801633c:	444b      	add	r3, r9
 801633e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8016342:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8016346:	461a      	mov	r2, r3
 8016348:	4623      	mov	r3, r4
 801634a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801634e:	f7e9 ff25 	bl	800019c <__aeabi_dsub>
 8016352:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016356:	4606      	mov	r6, r0
 8016358:	460f      	mov	r7, r1
 801635a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801635e:	f7e9 ff1f 	bl	80001a0 <__adddf3>
 8016362:	4602      	mov	r2, r0
 8016364:	460b      	mov	r3, r1
 8016366:	2000      	movs	r0, #0
 8016368:	49b3      	ldr	r1, [pc, #716]	; (8016638 <__ieee754_pow+0x730>)
 801636a:	f7ea f9f9 	bl	8000760 <__aeabi_ddiv>
 801636e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016372:	4602      	mov	r2, r0
 8016374:	460b      	mov	r3, r1
 8016376:	4630      	mov	r0, r6
 8016378:	4639      	mov	r1, r7
 801637a:	f7ea f8c7 	bl	800050c <__aeabi_dmul>
 801637e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016382:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8016386:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801638a:	2300      	movs	r3, #0
 801638c:	2200      	movs	r2, #0
 801638e:	106d      	asrs	r5, r5, #1
 8016390:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016394:	9304      	str	r3, [sp, #16]
 8016396:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801639a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801639e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80163a2:	4650      	mov	r0, sl
 80163a4:	4659      	mov	r1, fp
 80163a6:	4614      	mov	r4, r2
 80163a8:	461d      	mov	r5, r3
 80163aa:	f7ea f8af 	bl	800050c <__aeabi_dmul>
 80163ae:	4602      	mov	r2, r0
 80163b0:	460b      	mov	r3, r1
 80163b2:	4630      	mov	r0, r6
 80163b4:	4639      	mov	r1, r7
 80163b6:	f7e9 fef1 	bl	800019c <__aeabi_dsub>
 80163ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80163be:	4606      	mov	r6, r0
 80163c0:	460f      	mov	r7, r1
 80163c2:	4620      	mov	r0, r4
 80163c4:	4629      	mov	r1, r5
 80163c6:	f7e9 fee9 	bl	800019c <__aeabi_dsub>
 80163ca:	4602      	mov	r2, r0
 80163cc:	460b      	mov	r3, r1
 80163ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80163d2:	f7e9 fee3 	bl	800019c <__aeabi_dsub>
 80163d6:	4652      	mov	r2, sl
 80163d8:	465b      	mov	r3, fp
 80163da:	f7ea f897 	bl	800050c <__aeabi_dmul>
 80163de:	4602      	mov	r2, r0
 80163e0:	460b      	mov	r3, r1
 80163e2:	4630      	mov	r0, r6
 80163e4:	4639      	mov	r1, r7
 80163e6:	f7e9 fed9 	bl	800019c <__aeabi_dsub>
 80163ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80163ee:	f7ea f88d 	bl	800050c <__aeabi_dmul>
 80163f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80163f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80163fa:	4610      	mov	r0, r2
 80163fc:	4619      	mov	r1, r3
 80163fe:	f7ea f885 	bl	800050c <__aeabi_dmul>
 8016402:	a377      	add	r3, pc, #476	; (adr r3, 80165e0 <__ieee754_pow+0x6d8>)
 8016404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016408:	4604      	mov	r4, r0
 801640a:	460d      	mov	r5, r1
 801640c:	f7ea f87e 	bl	800050c <__aeabi_dmul>
 8016410:	a375      	add	r3, pc, #468	; (adr r3, 80165e8 <__ieee754_pow+0x6e0>)
 8016412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016416:	f7e9 fec3 	bl	80001a0 <__adddf3>
 801641a:	4622      	mov	r2, r4
 801641c:	462b      	mov	r3, r5
 801641e:	f7ea f875 	bl	800050c <__aeabi_dmul>
 8016422:	a373      	add	r3, pc, #460	; (adr r3, 80165f0 <__ieee754_pow+0x6e8>)
 8016424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016428:	f7e9 feba 	bl	80001a0 <__adddf3>
 801642c:	4622      	mov	r2, r4
 801642e:	462b      	mov	r3, r5
 8016430:	f7ea f86c 	bl	800050c <__aeabi_dmul>
 8016434:	a370      	add	r3, pc, #448	; (adr r3, 80165f8 <__ieee754_pow+0x6f0>)
 8016436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643a:	f7e9 feb1 	bl	80001a0 <__adddf3>
 801643e:	4622      	mov	r2, r4
 8016440:	462b      	mov	r3, r5
 8016442:	f7ea f863 	bl	800050c <__aeabi_dmul>
 8016446:	a36e      	add	r3, pc, #440	; (adr r3, 8016600 <__ieee754_pow+0x6f8>)
 8016448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801644c:	f7e9 fea8 	bl	80001a0 <__adddf3>
 8016450:	4622      	mov	r2, r4
 8016452:	462b      	mov	r3, r5
 8016454:	f7ea f85a 	bl	800050c <__aeabi_dmul>
 8016458:	a36b      	add	r3, pc, #428	; (adr r3, 8016608 <__ieee754_pow+0x700>)
 801645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801645e:	f7e9 fe9f 	bl	80001a0 <__adddf3>
 8016462:	4622      	mov	r2, r4
 8016464:	4606      	mov	r6, r0
 8016466:	460f      	mov	r7, r1
 8016468:	462b      	mov	r3, r5
 801646a:	4620      	mov	r0, r4
 801646c:	4629      	mov	r1, r5
 801646e:	f7ea f84d 	bl	800050c <__aeabi_dmul>
 8016472:	4602      	mov	r2, r0
 8016474:	460b      	mov	r3, r1
 8016476:	4630      	mov	r0, r6
 8016478:	4639      	mov	r1, r7
 801647a:	f7ea f847 	bl	800050c <__aeabi_dmul>
 801647e:	4604      	mov	r4, r0
 8016480:	460d      	mov	r5, r1
 8016482:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016486:	4652      	mov	r2, sl
 8016488:	465b      	mov	r3, fp
 801648a:	f7e9 fe89 	bl	80001a0 <__adddf3>
 801648e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016492:	f7ea f83b 	bl	800050c <__aeabi_dmul>
 8016496:	4622      	mov	r2, r4
 8016498:	462b      	mov	r3, r5
 801649a:	f7e9 fe81 	bl	80001a0 <__adddf3>
 801649e:	4652      	mov	r2, sl
 80164a0:	4606      	mov	r6, r0
 80164a2:	460f      	mov	r7, r1
 80164a4:	465b      	mov	r3, fp
 80164a6:	4650      	mov	r0, sl
 80164a8:	4659      	mov	r1, fp
 80164aa:	f7ea f82f 	bl	800050c <__aeabi_dmul>
 80164ae:	2200      	movs	r2, #0
 80164b0:	4b62      	ldr	r3, [pc, #392]	; (801663c <__ieee754_pow+0x734>)
 80164b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80164b6:	f7e9 fe73 	bl	80001a0 <__adddf3>
 80164ba:	4632      	mov	r2, r6
 80164bc:	463b      	mov	r3, r7
 80164be:	f7e9 fe6f 	bl	80001a0 <__adddf3>
 80164c2:	9804      	ldr	r0, [sp, #16]
 80164c4:	460d      	mov	r5, r1
 80164c6:	4604      	mov	r4, r0
 80164c8:	4602      	mov	r2, r0
 80164ca:	460b      	mov	r3, r1
 80164cc:	4650      	mov	r0, sl
 80164ce:	4659      	mov	r1, fp
 80164d0:	f7ea f81c 	bl	800050c <__aeabi_dmul>
 80164d4:	2200      	movs	r2, #0
 80164d6:	4682      	mov	sl, r0
 80164d8:	468b      	mov	fp, r1
 80164da:	4b58      	ldr	r3, [pc, #352]	; (801663c <__ieee754_pow+0x734>)
 80164dc:	4620      	mov	r0, r4
 80164de:	4629      	mov	r1, r5
 80164e0:	f7e9 fe5c 	bl	800019c <__aeabi_dsub>
 80164e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80164e8:	f7e9 fe58 	bl	800019c <__aeabi_dsub>
 80164ec:	4602      	mov	r2, r0
 80164ee:	460b      	mov	r3, r1
 80164f0:	4630      	mov	r0, r6
 80164f2:	4639      	mov	r1, r7
 80164f4:	f7e9 fe52 	bl	800019c <__aeabi_dsub>
 80164f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80164fc:	f7ea f806 	bl	800050c <__aeabi_dmul>
 8016500:	4622      	mov	r2, r4
 8016502:	4606      	mov	r6, r0
 8016504:	460f      	mov	r7, r1
 8016506:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801650a:	462b      	mov	r3, r5
 801650c:	f7e9 fffe 	bl	800050c <__aeabi_dmul>
 8016510:	4602      	mov	r2, r0
 8016512:	460b      	mov	r3, r1
 8016514:	4630      	mov	r0, r6
 8016516:	4639      	mov	r1, r7
 8016518:	f7e9 fe42 	bl	80001a0 <__adddf3>
 801651c:	4606      	mov	r6, r0
 801651e:	460f      	mov	r7, r1
 8016520:	4602      	mov	r2, r0
 8016522:	460b      	mov	r3, r1
 8016524:	4650      	mov	r0, sl
 8016526:	4659      	mov	r1, fp
 8016528:	f7e9 fe3a 	bl	80001a0 <__adddf3>
 801652c:	a338      	add	r3, pc, #224	; (adr r3, 8016610 <__ieee754_pow+0x708>)
 801652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016532:	9804      	ldr	r0, [sp, #16]
 8016534:	460d      	mov	r5, r1
 8016536:	4604      	mov	r4, r0
 8016538:	f7e9 ffe8 	bl	800050c <__aeabi_dmul>
 801653c:	4652      	mov	r2, sl
 801653e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016542:	465b      	mov	r3, fp
 8016544:	4620      	mov	r0, r4
 8016546:	4629      	mov	r1, r5
 8016548:	f7e9 fe28 	bl	800019c <__aeabi_dsub>
 801654c:	4602      	mov	r2, r0
 801654e:	460b      	mov	r3, r1
 8016550:	4630      	mov	r0, r6
 8016552:	4639      	mov	r1, r7
 8016554:	f7e9 fe22 	bl	800019c <__aeabi_dsub>
 8016558:	a32f      	add	r3, pc, #188	; (adr r3, 8016618 <__ieee754_pow+0x710>)
 801655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801655e:	f7e9 ffd5 	bl	800050c <__aeabi_dmul>
 8016562:	a32f      	add	r3, pc, #188	; (adr r3, 8016620 <__ieee754_pow+0x718>)
 8016564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016568:	4606      	mov	r6, r0
 801656a:	460f      	mov	r7, r1
 801656c:	4620      	mov	r0, r4
 801656e:	4629      	mov	r1, r5
 8016570:	f7e9 ffcc 	bl	800050c <__aeabi_dmul>
 8016574:	4602      	mov	r2, r0
 8016576:	460b      	mov	r3, r1
 8016578:	4630      	mov	r0, r6
 801657a:	4639      	mov	r1, r7
 801657c:	f7e9 fe10 	bl	80001a0 <__adddf3>
 8016580:	4b2f      	ldr	r3, [pc, #188]	; (8016640 <__ieee754_pow+0x738>)
 8016582:	444b      	add	r3, r9
 8016584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016588:	f7e9 fe0a 	bl	80001a0 <__adddf3>
 801658c:	4604      	mov	r4, r0
 801658e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016590:	460d      	mov	r5, r1
 8016592:	f7e9 ff51 	bl	8000438 <__aeabi_i2d>
 8016596:	4606      	mov	r6, r0
 8016598:	460f      	mov	r7, r1
 801659a:	4b2a      	ldr	r3, [pc, #168]	; (8016644 <__ieee754_pow+0x73c>)
 801659c:	4622      	mov	r2, r4
 801659e:	444b      	add	r3, r9
 80165a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80165a4:	462b      	mov	r3, r5
 80165a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80165aa:	f7e9 fdf9 	bl	80001a0 <__adddf3>
 80165ae:	4642      	mov	r2, r8
 80165b0:	464b      	mov	r3, r9
 80165b2:	f7e9 fdf5 	bl	80001a0 <__adddf3>
 80165b6:	4632      	mov	r2, r6
 80165b8:	463b      	mov	r3, r7
 80165ba:	f7e9 fdf1 	bl	80001a0 <__adddf3>
 80165be:	9804      	ldr	r0, [sp, #16]
 80165c0:	4632      	mov	r2, r6
 80165c2:	463b      	mov	r3, r7
 80165c4:	4682      	mov	sl, r0
 80165c6:	468b      	mov	fp, r1
 80165c8:	f7e9 fde8 	bl	800019c <__aeabi_dsub>
 80165cc:	4642      	mov	r2, r8
 80165ce:	464b      	mov	r3, r9
 80165d0:	f7e9 fde4 	bl	800019c <__aeabi_dsub>
 80165d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80165d8:	e60b      	b.n	80161f2 <__ieee754_pow+0x2ea>
 80165da:	f04f 0801 	mov.w	r8, #1
 80165de:	e6a8      	b.n	8016332 <__ieee754_pow+0x42a>
 80165e0:	4a454eef 	.word	0x4a454eef
 80165e4:	3fca7e28 	.word	0x3fca7e28
 80165e8:	93c9db65 	.word	0x93c9db65
 80165ec:	3fcd864a 	.word	0x3fcd864a
 80165f0:	a91d4101 	.word	0xa91d4101
 80165f4:	3fd17460 	.word	0x3fd17460
 80165f8:	518f264d 	.word	0x518f264d
 80165fc:	3fd55555 	.word	0x3fd55555
 8016600:	db6fabff 	.word	0xdb6fabff
 8016604:	3fdb6db6 	.word	0x3fdb6db6
 8016608:	33333303 	.word	0x33333303
 801660c:	3fe33333 	.word	0x3fe33333
 8016610:	e0000000 	.word	0xe0000000
 8016614:	3feec709 	.word	0x3feec709
 8016618:	dc3a03fd 	.word	0xdc3a03fd
 801661c:	3feec709 	.word	0x3feec709
 8016620:	145b01f5 	.word	0x145b01f5
 8016624:	be3e2fe0 	.word	0xbe3e2fe0
 8016628:	43400000 	.word	0x43400000
 801662c:	0003988e 	.word	0x0003988e
 8016630:	000bb679 	.word	0x000bb679
 8016634:	08019e08 	.word	0x08019e08
 8016638:	3ff00000 	.word	0x3ff00000
 801663c:	40080000 	.word	0x40080000
 8016640:	08019e28 	.word	0x08019e28
 8016644:	08019e18 	.word	0x08019e18
 8016648:	a39b      	add	r3, pc, #620	; (adr r3, 80168b8 <__ieee754_pow+0x9b0>)
 801664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801664e:	4640      	mov	r0, r8
 8016650:	4649      	mov	r1, r9
 8016652:	f7e9 fda5 	bl	80001a0 <__adddf3>
 8016656:	4622      	mov	r2, r4
 8016658:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801665c:	462b      	mov	r3, r5
 801665e:	4650      	mov	r0, sl
 8016660:	4639      	mov	r1, r7
 8016662:	f7e9 fd9b 	bl	800019c <__aeabi_dsub>
 8016666:	4602      	mov	r2, r0
 8016668:	460b      	mov	r3, r1
 801666a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801666e:	f7ea f9dd 	bl	8000a2c <__aeabi_dcmpgt>
 8016672:	2800      	cmp	r0, #0
 8016674:	f47f ae0d 	bne.w	8016292 <__ieee754_pow+0x38a>
 8016678:	4aa3      	ldr	r2, [pc, #652]	; (8016908 <__ieee754_pow+0xa00>)
 801667a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 801667e:	4293      	cmp	r3, r2
 8016680:	f340 8103 	ble.w	801688a <__ieee754_pow+0x982>
 8016684:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016688:	2000      	movs	r0, #0
 801668a:	151b      	asrs	r3, r3, #20
 801668c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016690:	fa4a f303 	asr.w	r3, sl, r3
 8016694:	4433      	add	r3, r6
 8016696:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801669a:	4f9c      	ldr	r7, [pc, #624]	; (801690c <__ieee754_pow+0xa04>)
 801669c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80166a0:	4117      	asrs	r7, r2
 80166a2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80166a6:	ea23 0107 	bic.w	r1, r3, r7
 80166aa:	f1c2 0214 	rsb	r2, r2, #20
 80166ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80166b2:	fa4a fa02 	asr.w	sl, sl, r2
 80166b6:	2e00      	cmp	r6, #0
 80166b8:	4602      	mov	r2, r0
 80166ba:	460b      	mov	r3, r1
 80166bc:	4620      	mov	r0, r4
 80166be:	4629      	mov	r1, r5
 80166c0:	bfb8      	it	lt
 80166c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80166c6:	f7e9 fd69 	bl	800019c <__aeabi_dsub>
 80166ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80166ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80166d2:	4642      	mov	r2, r8
 80166d4:	464b      	mov	r3, r9
 80166d6:	f7e9 fd63 	bl	80001a0 <__adddf3>
 80166da:	a379      	add	r3, pc, #484	; (adr r3, 80168c0 <__ieee754_pow+0x9b8>)
 80166dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e0:	2000      	movs	r0, #0
 80166e2:	460d      	mov	r5, r1
 80166e4:	4604      	mov	r4, r0
 80166e6:	f7e9 ff11 	bl	800050c <__aeabi_dmul>
 80166ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80166ee:	4606      	mov	r6, r0
 80166f0:	460f      	mov	r7, r1
 80166f2:	4620      	mov	r0, r4
 80166f4:	4629      	mov	r1, r5
 80166f6:	f7e9 fd51 	bl	800019c <__aeabi_dsub>
 80166fa:	4602      	mov	r2, r0
 80166fc:	460b      	mov	r3, r1
 80166fe:	4640      	mov	r0, r8
 8016700:	4649      	mov	r1, r9
 8016702:	f7e9 fd4b 	bl	800019c <__aeabi_dsub>
 8016706:	a370      	add	r3, pc, #448	; (adr r3, 80168c8 <__ieee754_pow+0x9c0>)
 8016708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801670c:	f7e9 fefe 	bl	800050c <__aeabi_dmul>
 8016710:	a36f      	add	r3, pc, #444	; (adr r3, 80168d0 <__ieee754_pow+0x9c8>)
 8016712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016716:	4680      	mov	r8, r0
 8016718:	4689      	mov	r9, r1
 801671a:	4620      	mov	r0, r4
 801671c:	4629      	mov	r1, r5
 801671e:	f7e9 fef5 	bl	800050c <__aeabi_dmul>
 8016722:	4602      	mov	r2, r0
 8016724:	460b      	mov	r3, r1
 8016726:	4640      	mov	r0, r8
 8016728:	4649      	mov	r1, r9
 801672a:	f7e9 fd39 	bl	80001a0 <__adddf3>
 801672e:	4604      	mov	r4, r0
 8016730:	460d      	mov	r5, r1
 8016732:	4602      	mov	r2, r0
 8016734:	460b      	mov	r3, r1
 8016736:	4630      	mov	r0, r6
 8016738:	4639      	mov	r1, r7
 801673a:	f7e9 fd31 	bl	80001a0 <__adddf3>
 801673e:	4632      	mov	r2, r6
 8016740:	463b      	mov	r3, r7
 8016742:	4680      	mov	r8, r0
 8016744:	4689      	mov	r9, r1
 8016746:	f7e9 fd29 	bl	800019c <__aeabi_dsub>
 801674a:	4602      	mov	r2, r0
 801674c:	460b      	mov	r3, r1
 801674e:	4620      	mov	r0, r4
 8016750:	4629      	mov	r1, r5
 8016752:	f7e9 fd23 	bl	800019c <__aeabi_dsub>
 8016756:	4642      	mov	r2, r8
 8016758:	4606      	mov	r6, r0
 801675a:	460f      	mov	r7, r1
 801675c:	464b      	mov	r3, r9
 801675e:	4640      	mov	r0, r8
 8016760:	4649      	mov	r1, r9
 8016762:	f7e9 fed3 	bl	800050c <__aeabi_dmul>
 8016766:	a35c      	add	r3, pc, #368	; (adr r3, 80168d8 <__ieee754_pow+0x9d0>)
 8016768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801676c:	4604      	mov	r4, r0
 801676e:	460d      	mov	r5, r1
 8016770:	f7e9 fecc 	bl	800050c <__aeabi_dmul>
 8016774:	a35a      	add	r3, pc, #360	; (adr r3, 80168e0 <__ieee754_pow+0x9d8>)
 8016776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801677a:	f7e9 fd0f 	bl	800019c <__aeabi_dsub>
 801677e:	4622      	mov	r2, r4
 8016780:	462b      	mov	r3, r5
 8016782:	f7e9 fec3 	bl	800050c <__aeabi_dmul>
 8016786:	a358      	add	r3, pc, #352	; (adr r3, 80168e8 <__ieee754_pow+0x9e0>)
 8016788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801678c:	f7e9 fd08 	bl	80001a0 <__adddf3>
 8016790:	4622      	mov	r2, r4
 8016792:	462b      	mov	r3, r5
 8016794:	f7e9 feba 	bl	800050c <__aeabi_dmul>
 8016798:	a355      	add	r3, pc, #340	; (adr r3, 80168f0 <__ieee754_pow+0x9e8>)
 801679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679e:	f7e9 fcfd 	bl	800019c <__aeabi_dsub>
 80167a2:	4622      	mov	r2, r4
 80167a4:	462b      	mov	r3, r5
 80167a6:	f7e9 feb1 	bl	800050c <__aeabi_dmul>
 80167aa:	a353      	add	r3, pc, #332	; (adr r3, 80168f8 <__ieee754_pow+0x9f0>)
 80167ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167b0:	f7e9 fcf6 	bl	80001a0 <__adddf3>
 80167b4:	4622      	mov	r2, r4
 80167b6:	462b      	mov	r3, r5
 80167b8:	f7e9 fea8 	bl	800050c <__aeabi_dmul>
 80167bc:	4602      	mov	r2, r0
 80167be:	460b      	mov	r3, r1
 80167c0:	4640      	mov	r0, r8
 80167c2:	4649      	mov	r1, r9
 80167c4:	f7e9 fcea 	bl	800019c <__aeabi_dsub>
 80167c8:	4604      	mov	r4, r0
 80167ca:	460d      	mov	r5, r1
 80167cc:	4602      	mov	r2, r0
 80167ce:	460b      	mov	r3, r1
 80167d0:	4640      	mov	r0, r8
 80167d2:	4649      	mov	r1, r9
 80167d4:	f7e9 fe9a 	bl	800050c <__aeabi_dmul>
 80167d8:	2200      	movs	r2, #0
 80167da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80167de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80167e2:	4620      	mov	r0, r4
 80167e4:	4629      	mov	r1, r5
 80167e6:	f7e9 fcd9 	bl	800019c <__aeabi_dsub>
 80167ea:	4602      	mov	r2, r0
 80167ec:	460b      	mov	r3, r1
 80167ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80167f2:	f7e9 ffb5 	bl	8000760 <__aeabi_ddiv>
 80167f6:	4632      	mov	r2, r6
 80167f8:	4604      	mov	r4, r0
 80167fa:	460d      	mov	r5, r1
 80167fc:	463b      	mov	r3, r7
 80167fe:	4640      	mov	r0, r8
 8016800:	4649      	mov	r1, r9
 8016802:	f7e9 fe83 	bl	800050c <__aeabi_dmul>
 8016806:	4632      	mov	r2, r6
 8016808:	463b      	mov	r3, r7
 801680a:	f7e9 fcc9 	bl	80001a0 <__adddf3>
 801680e:	4602      	mov	r2, r0
 8016810:	460b      	mov	r3, r1
 8016812:	4620      	mov	r0, r4
 8016814:	4629      	mov	r1, r5
 8016816:	f7e9 fcc1 	bl	800019c <__aeabi_dsub>
 801681a:	4642      	mov	r2, r8
 801681c:	464b      	mov	r3, r9
 801681e:	f7e9 fcbd 	bl	800019c <__aeabi_dsub>
 8016822:	4602      	mov	r2, r0
 8016824:	460b      	mov	r3, r1
 8016826:	2000      	movs	r0, #0
 8016828:	4939      	ldr	r1, [pc, #228]	; (8016910 <__ieee754_pow+0xa08>)
 801682a:	f7e9 fcb7 	bl	800019c <__aeabi_dsub>
 801682e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016832:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016836:	da2b      	bge.n	8016890 <__ieee754_pow+0x988>
 8016838:	4652      	mov	r2, sl
 801683a:	f002 fcd9 	bl	80191f0 <scalbn>
 801683e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016842:	f7ff bbf6 	b.w	8016032 <__ieee754_pow+0x12a>
 8016846:	4b33      	ldr	r3, [pc, #204]	; (8016914 <__ieee754_pow+0xa0c>)
 8016848:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801684c:	429f      	cmp	r7, r3
 801684e:	f77f af13 	ble.w	8016678 <__ieee754_pow+0x770>
 8016852:	4b31      	ldr	r3, [pc, #196]	; (8016918 <__ieee754_pow+0xa10>)
 8016854:	440b      	add	r3, r1
 8016856:	4303      	orrs	r3, r0
 8016858:	d00b      	beq.n	8016872 <__ieee754_pow+0x96a>
 801685a:	a329      	add	r3, pc, #164	; (adr r3, 8016900 <__ieee754_pow+0x9f8>)
 801685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016864:	f7e9 fe52 	bl	800050c <__aeabi_dmul>
 8016868:	a325      	add	r3, pc, #148	; (adr r3, 8016900 <__ieee754_pow+0x9f8>)
 801686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801686e:	f7ff bbe0 	b.w	8016032 <__ieee754_pow+0x12a>
 8016872:	4622      	mov	r2, r4
 8016874:	462b      	mov	r3, r5
 8016876:	f7e9 fc91 	bl	800019c <__aeabi_dsub>
 801687a:	4642      	mov	r2, r8
 801687c:	464b      	mov	r3, r9
 801687e:	f7ea f8cb 	bl	8000a18 <__aeabi_dcmpge>
 8016882:	2800      	cmp	r0, #0
 8016884:	f43f aef8 	beq.w	8016678 <__ieee754_pow+0x770>
 8016888:	e7e7      	b.n	801685a <__ieee754_pow+0x952>
 801688a:	f04f 0a00 	mov.w	sl, #0
 801688e:	e71e      	b.n	80166ce <__ieee754_pow+0x7c6>
 8016890:	4621      	mov	r1, r4
 8016892:	e7d4      	b.n	801683e <__ieee754_pow+0x936>
 8016894:	f04f 0b00 	mov.w	fp, #0
 8016898:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016910 <__ieee754_pow+0xa08>
 801689c:	f7ff bb95 	b.w	8015fca <__ieee754_pow+0xc2>
 80168a0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80168a4:	f7ff bb91 	b.w	8015fca <__ieee754_pow+0xc2>
 80168a8:	4638      	mov	r0, r7
 80168aa:	4641      	mov	r1, r8
 80168ac:	f7ff bbc3 	b.w	8016036 <__ieee754_pow+0x12e>
 80168b0:	9200      	str	r2, [sp, #0]
 80168b2:	f7ff bb9f 	b.w	8015ff4 <__ieee754_pow+0xec>
 80168b6:	bf00      	nop
 80168b8:	652b82fe 	.word	0x652b82fe
 80168bc:	3c971547 	.word	0x3c971547
 80168c0:	00000000 	.word	0x00000000
 80168c4:	3fe62e43 	.word	0x3fe62e43
 80168c8:	fefa39ef 	.word	0xfefa39ef
 80168cc:	3fe62e42 	.word	0x3fe62e42
 80168d0:	0ca86c39 	.word	0x0ca86c39
 80168d4:	be205c61 	.word	0xbe205c61
 80168d8:	72bea4d0 	.word	0x72bea4d0
 80168dc:	3e663769 	.word	0x3e663769
 80168e0:	c5d26bf1 	.word	0xc5d26bf1
 80168e4:	3ebbbd41 	.word	0x3ebbbd41
 80168e8:	af25de2c 	.word	0xaf25de2c
 80168ec:	3f11566a 	.word	0x3f11566a
 80168f0:	16bebd93 	.word	0x16bebd93
 80168f4:	3f66c16c 	.word	0x3f66c16c
 80168f8:	5555553e 	.word	0x5555553e
 80168fc:	3fc55555 	.word	0x3fc55555
 8016900:	c2f8f359 	.word	0xc2f8f359
 8016904:	01a56e1f 	.word	0x01a56e1f
 8016908:	3fe00000 	.word	0x3fe00000
 801690c:	000fffff 	.word	0x000fffff
 8016910:	3ff00000 	.word	0x3ff00000
 8016914:	4090cbff 	.word	0x4090cbff
 8016918:	3f6f3400 	.word	0x3f6f3400
 801691c:	00000000 	.word	0x00000000

08016920 <__ieee754_rem_pio2>:
 8016920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016924:	4614      	mov	r4, r2
 8016926:	4ac2      	ldr	r2, [pc, #776]	; (8016c30 <__ieee754_rem_pio2+0x310>)
 8016928:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 801692c:	4592      	cmp	sl, r2
 801692e:	b08d      	sub	sp, #52	; 0x34
 8016930:	468b      	mov	fp, r1
 8016932:	dc07      	bgt.n	8016944 <__ieee754_rem_pio2+0x24>
 8016934:	2200      	movs	r2, #0
 8016936:	2300      	movs	r3, #0
 8016938:	e9c4 0100 	strd	r0, r1, [r4]
 801693c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8016940:	2500      	movs	r5, #0
 8016942:	e023      	b.n	801698c <__ieee754_rem_pio2+0x6c>
 8016944:	4abb      	ldr	r2, [pc, #748]	; (8016c34 <__ieee754_rem_pio2+0x314>)
 8016946:	4592      	cmp	sl, r2
 8016948:	dc71      	bgt.n	8016a2e <__ieee754_rem_pio2+0x10e>
 801694a:	a3ab      	add	r3, pc, #684	; (adr r3, 8016bf8 <__ieee754_rem_pio2+0x2d8>)
 801694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016950:	2900      	cmp	r1, #0
 8016952:	4db9      	ldr	r5, [pc, #740]	; (8016c38 <__ieee754_rem_pio2+0x318>)
 8016954:	dd36      	ble.n	80169c4 <__ieee754_rem_pio2+0xa4>
 8016956:	f7e9 fc21 	bl	800019c <__aeabi_dsub>
 801695a:	45aa      	cmp	sl, r5
 801695c:	4606      	mov	r6, r0
 801695e:	460f      	mov	r7, r1
 8016960:	d018      	beq.n	8016994 <__ieee754_rem_pio2+0x74>
 8016962:	a3a7      	add	r3, pc, #668	; (adr r3, 8016c00 <__ieee754_rem_pio2+0x2e0>)
 8016964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016968:	f7e9 fc18 	bl	800019c <__aeabi_dsub>
 801696c:	4602      	mov	r2, r0
 801696e:	460b      	mov	r3, r1
 8016970:	4630      	mov	r0, r6
 8016972:	e9c4 2300 	strd	r2, r3, [r4]
 8016976:	4639      	mov	r1, r7
 8016978:	f7e9 fc10 	bl	800019c <__aeabi_dsub>
 801697c:	a3a0      	add	r3, pc, #640	; (adr r3, 8016c00 <__ieee754_rem_pio2+0x2e0>)
 801697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016982:	f7e9 fc0b 	bl	800019c <__aeabi_dsub>
 8016986:	2501      	movs	r5, #1
 8016988:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801698c:	4628      	mov	r0, r5
 801698e:	b00d      	add	sp, #52	; 0x34
 8016990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016994:	a39c      	add	r3, pc, #624	; (adr r3, 8016c08 <__ieee754_rem_pio2+0x2e8>)
 8016996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801699a:	f7e9 fbff 	bl	800019c <__aeabi_dsub>
 801699e:	a39c      	add	r3, pc, #624	; (adr r3, 8016c10 <__ieee754_rem_pio2+0x2f0>)
 80169a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a4:	4606      	mov	r6, r0
 80169a6:	460f      	mov	r7, r1
 80169a8:	f7e9 fbf8 	bl	800019c <__aeabi_dsub>
 80169ac:	4602      	mov	r2, r0
 80169ae:	460b      	mov	r3, r1
 80169b0:	4630      	mov	r0, r6
 80169b2:	e9c4 2300 	strd	r2, r3, [r4]
 80169b6:	4639      	mov	r1, r7
 80169b8:	f7e9 fbf0 	bl	800019c <__aeabi_dsub>
 80169bc:	a394      	add	r3, pc, #592	; (adr r3, 8016c10 <__ieee754_rem_pio2+0x2f0>)
 80169be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c2:	e7de      	b.n	8016982 <__ieee754_rem_pio2+0x62>
 80169c4:	f7e9 fbec 	bl	80001a0 <__adddf3>
 80169c8:	45aa      	cmp	sl, r5
 80169ca:	4606      	mov	r6, r0
 80169cc:	460f      	mov	r7, r1
 80169ce:	d016      	beq.n	80169fe <__ieee754_rem_pio2+0xde>
 80169d0:	a38b      	add	r3, pc, #556	; (adr r3, 8016c00 <__ieee754_rem_pio2+0x2e0>)
 80169d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d6:	f7e9 fbe3 	bl	80001a0 <__adddf3>
 80169da:	4602      	mov	r2, r0
 80169dc:	460b      	mov	r3, r1
 80169de:	4630      	mov	r0, r6
 80169e0:	e9c4 2300 	strd	r2, r3, [r4]
 80169e4:	4639      	mov	r1, r7
 80169e6:	f7e9 fbd9 	bl	800019c <__aeabi_dsub>
 80169ea:	a385      	add	r3, pc, #532	; (adr r3, 8016c00 <__ieee754_rem_pio2+0x2e0>)
 80169ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169f0:	f7e9 fbd6 	bl	80001a0 <__adddf3>
 80169f4:	f04f 35ff 	mov.w	r5, #4294967295
 80169f8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80169fc:	e7c6      	b.n	801698c <__ieee754_rem_pio2+0x6c>
 80169fe:	a382      	add	r3, pc, #520	; (adr r3, 8016c08 <__ieee754_rem_pio2+0x2e8>)
 8016a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a04:	f7e9 fbcc 	bl	80001a0 <__adddf3>
 8016a08:	a381      	add	r3, pc, #516	; (adr r3, 8016c10 <__ieee754_rem_pio2+0x2f0>)
 8016a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a0e:	4606      	mov	r6, r0
 8016a10:	460f      	mov	r7, r1
 8016a12:	f7e9 fbc5 	bl	80001a0 <__adddf3>
 8016a16:	4602      	mov	r2, r0
 8016a18:	460b      	mov	r3, r1
 8016a1a:	4630      	mov	r0, r6
 8016a1c:	e9c4 2300 	strd	r2, r3, [r4]
 8016a20:	4639      	mov	r1, r7
 8016a22:	f7e9 fbbb 	bl	800019c <__aeabi_dsub>
 8016a26:	a37a      	add	r3, pc, #488	; (adr r3, 8016c10 <__ieee754_rem_pio2+0x2f0>)
 8016a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a2c:	e7e0      	b.n	80169f0 <__ieee754_rem_pio2+0xd0>
 8016a2e:	4a83      	ldr	r2, [pc, #524]	; (8016c3c <__ieee754_rem_pio2+0x31c>)
 8016a30:	4592      	cmp	sl, r2
 8016a32:	f300 80d2 	bgt.w	8016bda <__ieee754_rem_pio2+0x2ba>
 8016a36:	f002 fab9 	bl	8018fac <fabs>
 8016a3a:	a377      	add	r3, pc, #476	; (adr r3, 8016c18 <__ieee754_rem_pio2+0x2f8>)
 8016a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a40:	4606      	mov	r6, r0
 8016a42:	460f      	mov	r7, r1
 8016a44:	f7e9 fd62 	bl	800050c <__aeabi_dmul>
 8016a48:	2200      	movs	r2, #0
 8016a4a:	4b7d      	ldr	r3, [pc, #500]	; (8016c40 <__ieee754_rem_pio2+0x320>)
 8016a4c:	f7e9 fba8 	bl	80001a0 <__adddf3>
 8016a50:	f7ea f80c 	bl	8000a6c <__aeabi_d2iz>
 8016a54:	4605      	mov	r5, r0
 8016a56:	f7e9 fcef 	bl	8000438 <__aeabi_i2d>
 8016a5a:	a367      	add	r3, pc, #412	; (adr r3, 8016bf8 <__ieee754_rem_pio2+0x2d8>)
 8016a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a64:	f7e9 fd52 	bl	800050c <__aeabi_dmul>
 8016a68:	4602      	mov	r2, r0
 8016a6a:	460b      	mov	r3, r1
 8016a6c:	4630      	mov	r0, r6
 8016a6e:	4639      	mov	r1, r7
 8016a70:	f7e9 fb94 	bl	800019c <__aeabi_dsub>
 8016a74:	a362      	add	r3, pc, #392	; (adr r3, 8016c00 <__ieee754_rem_pio2+0x2e0>)
 8016a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a7a:	4606      	mov	r6, r0
 8016a7c:	460f      	mov	r7, r1
 8016a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016a82:	f7e9 fd43 	bl	800050c <__aeabi_dmul>
 8016a86:	2d1f      	cmp	r5, #31
 8016a88:	4680      	mov	r8, r0
 8016a8a:	4689      	mov	r9, r1
 8016a8c:	dc0e      	bgt.n	8016aac <__ieee754_rem_pio2+0x18c>
 8016a8e:	4b6d      	ldr	r3, [pc, #436]	; (8016c44 <__ieee754_rem_pio2+0x324>)
 8016a90:	1e6a      	subs	r2, r5, #1
 8016a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a96:	4553      	cmp	r3, sl
 8016a98:	d008      	beq.n	8016aac <__ieee754_rem_pio2+0x18c>
 8016a9a:	4642      	mov	r2, r8
 8016a9c:	464b      	mov	r3, r9
 8016a9e:	4630      	mov	r0, r6
 8016aa0:	4639      	mov	r1, r7
 8016aa2:	f7e9 fb7b 	bl	800019c <__aeabi_dsub>
 8016aa6:	e9c4 0100 	strd	r0, r1, [r4]
 8016aaa:	e011      	b.n	8016ad0 <__ieee754_rem_pio2+0x1b0>
 8016aac:	464b      	mov	r3, r9
 8016aae:	4642      	mov	r2, r8
 8016ab0:	4630      	mov	r0, r6
 8016ab2:	4639      	mov	r1, r7
 8016ab4:	f7e9 fb72 	bl	800019c <__aeabi_dsub>
 8016ab8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8016abc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016ac0:	ebaa 0303 	sub.w	r3, sl, r3
 8016ac4:	2b10      	cmp	r3, #16
 8016ac6:	dc1f      	bgt.n	8016b08 <__ieee754_rem_pio2+0x1e8>
 8016ac8:	4602      	mov	r2, r0
 8016aca:	460b      	mov	r3, r1
 8016acc:	e9c4 2300 	strd	r2, r3, [r4]
 8016ad0:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8016ad4:	4630      	mov	r0, r6
 8016ad6:	4653      	mov	r3, sl
 8016ad8:	4639      	mov	r1, r7
 8016ada:	f7e9 fb5f 	bl	800019c <__aeabi_dsub>
 8016ade:	4642      	mov	r2, r8
 8016ae0:	464b      	mov	r3, r9
 8016ae2:	f7e9 fb5b 	bl	800019c <__aeabi_dsub>
 8016ae6:	4602      	mov	r2, r0
 8016ae8:	460b      	mov	r3, r1
 8016aea:	f1bb 0f00 	cmp.w	fp, #0
 8016aee:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8016af2:	f6bf af4b 	bge.w	801698c <__ieee754_rem_pio2+0x6c>
 8016af6:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8016afa:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8016afe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8016b02:	60e1      	str	r1, [r4, #12]
 8016b04:	426d      	negs	r5, r5
 8016b06:	e741      	b.n	801698c <__ieee754_rem_pio2+0x6c>
 8016b08:	a33f      	add	r3, pc, #252	; (adr r3, 8016c08 <__ieee754_rem_pio2+0x2e8>)
 8016b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b12:	f7e9 fcfb 	bl	800050c <__aeabi_dmul>
 8016b16:	4680      	mov	r8, r0
 8016b18:	4689      	mov	r9, r1
 8016b1a:	4602      	mov	r2, r0
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	4630      	mov	r0, r6
 8016b20:	4639      	mov	r1, r7
 8016b22:	f7e9 fb3b 	bl	800019c <__aeabi_dsub>
 8016b26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016b2a:	4602      	mov	r2, r0
 8016b2c:	460b      	mov	r3, r1
 8016b2e:	4630      	mov	r0, r6
 8016b30:	4639      	mov	r1, r7
 8016b32:	f7e9 fb33 	bl	800019c <__aeabi_dsub>
 8016b36:	4642      	mov	r2, r8
 8016b38:	464b      	mov	r3, r9
 8016b3a:	f7e9 fb2f 	bl	800019c <__aeabi_dsub>
 8016b3e:	a334      	add	r3, pc, #208	; (adr r3, 8016c10 <__ieee754_rem_pio2+0x2f0>)
 8016b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b44:	4606      	mov	r6, r0
 8016b46:	460f      	mov	r7, r1
 8016b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b4c:	f7e9 fcde 	bl	800050c <__aeabi_dmul>
 8016b50:	4632      	mov	r2, r6
 8016b52:	463b      	mov	r3, r7
 8016b54:	f7e9 fb22 	bl	800019c <__aeabi_dsub>
 8016b58:	460b      	mov	r3, r1
 8016b5a:	4602      	mov	r2, r0
 8016b5c:	4680      	mov	r8, r0
 8016b5e:	4689      	mov	r9, r1
 8016b60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016b64:	f7e9 fb1a 	bl	800019c <__aeabi_dsub>
 8016b68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016b6c:	ebaa 0a03 	sub.w	sl, sl, r3
 8016b70:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8016b74:	dc06      	bgt.n	8016b84 <__ieee754_rem_pio2+0x264>
 8016b76:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8016b7a:	4602      	mov	r2, r0
 8016b7c:	460b      	mov	r3, r1
 8016b7e:	e9c4 2300 	strd	r2, r3, [r4]
 8016b82:	e7a5      	b.n	8016ad0 <__ieee754_rem_pio2+0x1b0>
 8016b84:	a326      	add	r3, pc, #152	; (adr r3, 8016c20 <__ieee754_rem_pio2+0x300>)
 8016b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b8e:	f7e9 fcbd 	bl	800050c <__aeabi_dmul>
 8016b92:	4680      	mov	r8, r0
 8016b94:	4689      	mov	r9, r1
 8016b96:	4602      	mov	r2, r0
 8016b98:	460b      	mov	r3, r1
 8016b9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016b9e:	f7e9 fafd 	bl	800019c <__aeabi_dsub>
 8016ba2:	4602      	mov	r2, r0
 8016ba4:	460b      	mov	r3, r1
 8016ba6:	4606      	mov	r6, r0
 8016ba8:	460f      	mov	r7, r1
 8016baa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016bae:	f7e9 faf5 	bl	800019c <__aeabi_dsub>
 8016bb2:	4642      	mov	r2, r8
 8016bb4:	464b      	mov	r3, r9
 8016bb6:	f7e9 faf1 	bl	800019c <__aeabi_dsub>
 8016bba:	a31b      	add	r3, pc, #108	; (adr r3, 8016c28 <__ieee754_rem_pio2+0x308>)
 8016bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bc0:	4680      	mov	r8, r0
 8016bc2:	4689      	mov	r9, r1
 8016bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016bc8:	f7e9 fca0 	bl	800050c <__aeabi_dmul>
 8016bcc:	4642      	mov	r2, r8
 8016bce:	464b      	mov	r3, r9
 8016bd0:	f7e9 fae4 	bl	800019c <__aeabi_dsub>
 8016bd4:	4680      	mov	r8, r0
 8016bd6:	4689      	mov	r9, r1
 8016bd8:	e75f      	b.n	8016a9a <__ieee754_rem_pio2+0x17a>
 8016bda:	4a1b      	ldr	r2, [pc, #108]	; (8016c48 <__ieee754_rem_pio2+0x328>)
 8016bdc:	4592      	cmp	sl, r2
 8016bde:	dd35      	ble.n	8016c4c <__ieee754_rem_pio2+0x32c>
 8016be0:	4602      	mov	r2, r0
 8016be2:	460b      	mov	r3, r1
 8016be4:	f7e9 fada 	bl	800019c <__aeabi_dsub>
 8016be8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016bec:	e9c4 0100 	strd	r0, r1, [r4]
 8016bf0:	e6a6      	b.n	8016940 <__ieee754_rem_pio2+0x20>
 8016bf2:	bf00      	nop
 8016bf4:	f3af 8000 	nop.w
 8016bf8:	54400000 	.word	0x54400000
 8016bfc:	3ff921fb 	.word	0x3ff921fb
 8016c00:	1a626331 	.word	0x1a626331
 8016c04:	3dd0b461 	.word	0x3dd0b461
 8016c08:	1a600000 	.word	0x1a600000
 8016c0c:	3dd0b461 	.word	0x3dd0b461
 8016c10:	2e037073 	.word	0x2e037073
 8016c14:	3ba3198a 	.word	0x3ba3198a
 8016c18:	6dc9c883 	.word	0x6dc9c883
 8016c1c:	3fe45f30 	.word	0x3fe45f30
 8016c20:	2e000000 	.word	0x2e000000
 8016c24:	3ba3198a 	.word	0x3ba3198a
 8016c28:	252049c1 	.word	0x252049c1
 8016c2c:	397b839a 	.word	0x397b839a
 8016c30:	3fe921fb 	.word	0x3fe921fb
 8016c34:	4002d97b 	.word	0x4002d97b
 8016c38:	3ff921fb 	.word	0x3ff921fb
 8016c3c:	413921fb 	.word	0x413921fb
 8016c40:	3fe00000 	.word	0x3fe00000
 8016c44:	08019e38 	.word	0x08019e38
 8016c48:	7fefffff 	.word	0x7fefffff
 8016c4c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8016c50:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8016c54:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8016c58:	460f      	mov	r7, r1
 8016c5a:	4606      	mov	r6, r0
 8016c5c:	f7e9 ff06 	bl	8000a6c <__aeabi_d2iz>
 8016c60:	f7e9 fbea 	bl	8000438 <__aeabi_i2d>
 8016c64:	4602      	mov	r2, r0
 8016c66:	460b      	mov	r3, r1
 8016c68:	4630      	mov	r0, r6
 8016c6a:	4639      	mov	r1, r7
 8016c6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016c70:	f7e9 fa94 	bl	800019c <__aeabi_dsub>
 8016c74:	2200      	movs	r2, #0
 8016c76:	4b20      	ldr	r3, [pc, #128]	; (8016cf8 <__ieee754_rem_pio2+0x3d8>)
 8016c78:	f7e9 fc48 	bl	800050c <__aeabi_dmul>
 8016c7c:	460f      	mov	r7, r1
 8016c7e:	4606      	mov	r6, r0
 8016c80:	f7e9 fef4 	bl	8000a6c <__aeabi_d2iz>
 8016c84:	f7e9 fbd8 	bl	8000438 <__aeabi_i2d>
 8016c88:	4602      	mov	r2, r0
 8016c8a:	460b      	mov	r3, r1
 8016c8c:	4630      	mov	r0, r6
 8016c8e:	4639      	mov	r1, r7
 8016c90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016c94:	f7e9 fa82 	bl	800019c <__aeabi_dsub>
 8016c98:	2200      	movs	r2, #0
 8016c9a:	4b17      	ldr	r3, [pc, #92]	; (8016cf8 <__ieee754_rem_pio2+0x3d8>)
 8016c9c:	f7e9 fc36 	bl	800050c <__aeabi_dmul>
 8016ca0:	f04f 0803 	mov.w	r8, #3
 8016ca4:	2600      	movs	r6, #0
 8016ca6:	2700      	movs	r7, #0
 8016ca8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016cac:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8016cb0:	4632      	mov	r2, r6
 8016cb2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8016cb6:	463b      	mov	r3, r7
 8016cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8016cbc:	f7e9 fe8e 	bl	80009dc <__aeabi_dcmpeq>
 8016cc0:	b9b8      	cbnz	r0, 8016cf2 <__ieee754_rem_pio2+0x3d2>
 8016cc2:	4b0e      	ldr	r3, [pc, #56]	; (8016cfc <__ieee754_rem_pio2+0x3dc>)
 8016cc4:	462a      	mov	r2, r5
 8016cc6:	9301      	str	r3, [sp, #4]
 8016cc8:	2302      	movs	r3, #2
 8016cca:	4621      	mov	r1, r4
 8016ccc:	9300      	str	r3, [sp, #0]
 8016cce:	a806      	add	r0, sp, #24
 8016cd0:	4643      	mov	r3, r8
 8016cd2:	f001 f84b 	bl	8017d6c <__kernel_rem_pio2>
 8016cd6:	f1bb 0f00 	cmp.w	fp, #0
 8016cda:	4605      	mov	r5, r0
 8016cdc:	f6bf ae56 	bge.w	801698c <__ieee754_rem_pio2+0x6c>
 8016ce0:	6863      	ldr	r3, [r4, #4]
 8016ce2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016ce6:	6063      	str	r3, [r4, #4]
 8016ce8:	68e3      	ldr	r3, [r4, #12]
 8016cea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016cee:	60e3      	str	r3, [r4, #12]
 8016cf0:	e708      	b.n	8016b04 <__ieee754_rem_pio2+0x1e4>
 8016cf2:	46d0      	mov	r8, sl
 8016cf4:	e7dc      	b.n	8016cb0 <__ieee754_rem_pio2+0x390>
 8016cf6:	bf00      	nop
 8016cf8:	41700000 	.word	0x41700000
 8016cfc:	08019eb8 	.word	0x08019eb8

08016d00 <__ieee754_sqrt>:
 8016d00:	4b54      	ldr	r3, [pc, #336]	; (8016e54 <__ieee754_sqrt+0x154>)
 8016d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d06:	438b      	bics	r3, r1
 8016d08:	4606      	mov	r6, r0
 8016d0a:	460d      	mov	r5, r1
 8016d0c:	460a      	mov	r2, r1
 8016d0e:	460c      	mov	r4, r1
 8016d10:	d10f      	bne.n	8016d32 <__ieee754_sqrt+0x32>
 8016d12:	4602      	mov	r2, r0
 8016d14:	460b      	mov	r3, r1
 8016d16:	f7e9 fbf9 	bl	800050c <__aeabi_dmul>
 8016d1a:	4602      	mov	r2, r0
 8016d1c:	460b      	mov	r3, r1
 8016d1e:	4630      	mov	r0, r6
 8016d20:	4629      	mov	r1, r5
 8016d22:	f7e9 fa3d 	bl	80001a0 <__adddf3>
 8016d26:	4606      	mov	r6, r0
 8016d28:	460d      	mov	r5, r1
 8016d2a:	4630      	mov	r0, r6
 8016d2c:	4629      	mov	r1, r5
 8016d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d32:	2900      	cmp	r1, #0
 8016d34:	4607      	mov	r7, r0
 8016d36:	4603      	mov	r3, r0
 8016d38:	dc0e      	bgt.n	8016d58 <__ieee754_sqrt+0x58>
 8016d3a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8016d3e:	ea5c 0707 	orrs.w	r7, ip, r7
 8016d42:	d0f2      	beq.n	8016d2a <__ieee754_sqrt+0x2a>
 8016d44:	b141      	cbz	r1, 8016d58 <__ieee754_sqrt+0x58>
 8016d46:	4602      	mov	r2, r0
 8016d48:	460b      	mov	r3, r1
 8016d4a:	f7e9 fa27 	bl	800019c <__aeabi_dsub>
 8016d4e:	4602      	mov	r2, r0
 8016d50:	460b      	mov	r3, r1
 8016d52:	f7e9 fd05 	bl	8000760 <__aeabi_ddiv>
 8016d56:	e7e6      	b.n	8016d26 <__ieee754_sqrt+0x26>
 8016d58:	1512      	asrs	r2, r2, #20
 8016d5a:	d074      	beq.n	8016e46 <__ieee754_sqrt+0x146>
 8016d5c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016d60:	07d5      	lsls	r5, r2, #31
 8016d62:	f04f 0500 	mov.w	r5, #0
 8016d66:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016d6a:	bf48      	it	mi
 8016d6c:	0fd9      	lsrmi	r1, r3, #31
 8016d6e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8016d72:	bf44      	itt	mi
 8016d74:	005b      	lslmi	r3, r3, #1
 8016d76:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8016d7a:	1051      	asrs	r1, r2, #1
 8016d7c:	0fda      	lsrs	r2, r3, #31
 8016d7e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016d82:	4628      	mov	r0, r5
 8016d84:	2216      	movs	r2, #22
 8016d86:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016d8a:	005b      	lsls	r3, r3, #1
 8016d8c:	1987      	adds	r7, r0, r6
 8016d8e:	42a7      	cmp	r7, r4
 8016d90:	bfde      	ittt	le
 8016d92:	19b8      	addle	r0, r7, r6
 8016d94:	1be4      	suble	r4, r4, r7
 8016d96:	19ad      	addle	r5, r5, r6
 8016d98:	0fdf      	lsrs	r7, r3, #31
 8016d9a:	3a01      	subs	r2, #1
 8016d9c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8016da0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016da4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016da8:	d1f0      	bne.n	8016d8c <__ieee754_sqrt+0x8c>
 8016daa:	f04f 0c20 	mov.w	ip, #32
 8016dae:	4696      	mov	lr, r2
 8016db0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016db4:	4284      	cmp	r4, r0
 8016db6:	eb06 070e 	add.w	r7, r6, lr
 8016dba:	dc02      	bgt.n	8016dc2 <__ieee754_sqrt+0xc2>
 8016dbc:	d112      	bne.n	8016de4 <__ieee754_sqrt+0xe4>
 8016dbe:	429f      	cmp	r7, r3
 8016dc0:	d810      	bhi.n	8016de4 <__ieee754_sqrt+0xe4>
 8016dc2:	2f00      	cmp	r7, #0
 8016dc4:	eb07 0e06 	add.w	lr, r7, r6
 8016dc8:	da42      	bge.n	8016e50 <__ieee754_sqrt+0x150>
 8016dca:	f1be 0f00 	cmp.w	lr, #0
 8016dce:	db3f      	blt.n	8016e50 <__ieee754_sqrt+0x150>
 8016dd0:	f100 0801 	add.w	r8, r0, #1
 8016dd4:	1a24      	subs	r4, r4, r0
 8016dd6:	4640      	mov	r0, r8
 8016dd8:	429f      	cmp	r7, r3
 8016dda:	bf88      	it	hi
 8016ddc:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8016de0:	1bdb      	subs	r3, r3, r7
 8016de2:	4432      	add	r2, r6
 8016de4:	0064      	lsls	r4, r4, #1
 8016de6:	f1bc 0c01 	subs.w	ip, ip, #1
 8016dea:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8016dee:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016df2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016df6:	d1dd      	bne.n	8016db4 <__ieee754_sqrt+0xb4>
 8016df8:	4323      	orrs	r3, r4
 8016dfa:	d006      	beq.n	8016e0a <__ieee754_sqrt+0x10a>
 8016dfc:	1c54      	adds	r4, r2, #1
 8016dfe:	bf0b      	itete	eq
 8016e00:	4662      	moveq	r2, ip
 8016e02:	3201      	addne	r2, #1
 8016e04:	3501      	addeq	r5, #1
 8016e06:	f022 0201 	bicne.w	r2, r2, #1
 8016e0a:	106b      	asrs	r3, r5, #1
 8016e0c:	0852      	lsrs	r2, r2, #1
 8016e0e:	07e8      	lsls	r0, r5, #31
 8016e10:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016e14:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016e18:	bf48      	it	mi
 8016e1a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8016e1e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8016e22:	4616      	mov	r6, r2
 8016e24:	e781      	b.n	8016d2a <__ieee754_sqrt+0x2a>
 8016e26:	0adc      	lsrs	r4, r3, #11
 8016e28:	3915      	subs	r1, #21
 8016e2a:	055b      	lsls	r3, r3, #21
 8016e2c:	2c00      	cmp	r4, #0
 8016e2e:	d0fa      	beq.n	8016e26 <__ieee754_sqrt+0x126>
 8016e30:	02e6      	lsls	r6, r4, #11
 8016e32:	d50a      	bpl.n	8016e4a <__ieee754_sqrt+0x14a>
 8016e34:	f1c2 0020 	rsb	r0, r2, #32
 8016e38:	fa23 f000 	lsr.w	r0, r3, r0
 8016e3c:	1e55      	subs	r5, r2, #1
 8016e3e:	4093      	lsls	r3, r2
 8016e40:	4304      	orrs	r4, r0
 8016e42:	1b4a      	subs	r2, r1, r5
 8016e44:	e78a      	b.n	8016d5c <__ieee754_sqrt+0x5c>
 8016e46:	4611      	mov	r1, r2
 8016e48:	e7f0      	b.n	8016e2c <__ieee754_sqrt+0x12c>
 8016e4a:	0064      	lsls	r4, r4, #1
 8016e4c:	3201      	adds	r2, #1
 8016e4e:	e7ef      	b.n	8016e30 <__ieee754_sqrt+0x130>
 8016e50:	4680      	mov	r8, r0
 8016e52:	e7bf      	b.n	8016dd4 <__ieee754_sqrt+0xd4>
 8016e54:	7ff00000 	.word	0x7ff00000

08016e58 <__ieee754_asinf>:
 8016e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e5c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8016e60:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8016e64:	4604      	mov	r4, r0
 8016e66:	4607      	mov	r7, r0
 8016e68:	d10c      	bne.n	8016e84 <__ieee754_asinf+0x2c>
 8016e6a:	498c      	ldr	r1, [pc, #560]	; (801709c <__ieee754_asinf+0x244>)
 8016e6c:	f7e9 ffa4 	bl	8000db8 <__aeabi_fmul>
 8016e70:	498b      	ldr	r1, [pc, #556]	; (80170a0 <__ieee754_asinf+0x248>)
 8016e72:	4605      	mov	r5, r0
 8016e74:	4620      	mov	r0, r4
 8016e76:	f7e9 ff9f 	bl	8000db8 <__aeabi_fmul>
 8016e7a:	4601      	mov	r1, r0
 8016e7c:	4628      	mov	r0, r5
 8016e7e:	f7e9 fe93 	bl	8000ba8 <__addsf3>
 8016e82:	e006      	b.n	8016e92 <__ieee754_asinf+0x3a>
 8016e84:	dd09      	ble.n	8016e9a <__ieee754_asinf+0x42>
 8016e86:	4601      	mov	r1, r0
 8016e88:	f7e9 fe8c 	bl	8000ba4 <__aeabi_fsub>
 8016e8c:	4601      	mov	r1, r0
 8016e8e:	f7ea f847 	bl	8000f20 <__aeabi_fdiv>
 8016e92:	4604      	mov	r4, r0
 8016e94:	4620      	mov	r0, r4
 8016e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e9a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8016e9e:	da0b      	bge.n	8016eb8 <__ieee754_asinf+0x60>
 8016ea0:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 8016ea4:	da73      	bge.n	8016f8e <__ieee754_asinf+0x136>
 8016ea6:	497f      	ldr	r1, [pc, #508]	; (80170a4 <__ieee754_asinf+0x24c>)
 8016ea8:	f7e9 fe7e 	bl	8000ba8 <__addsf3>
 8016eac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8016eb0:	f7ea f93e 	bl	8001130 <__aeabi_fcmpgt>
 8016eb4:	2800      	cmp	r0, #0
 8016eb6:	d1ed      	bne.n	8016e94 <__ieee754_asinf+0x3c>
 8016eb8:	4620      	mov	r0, r4
 8016eba:	f002 fb13 	bl	80194e4 <fabsf>
 8016ebe:	4601      	mov	r1, r0
 8016ec0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8016ec4:	f7e9 fe6e 	bl	8000ba4 <__aeabi_fsub>
 8016ec8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8016ecc:	f7e9 ff74 	bl	8000db8 <__aeabi_fmul>
 8016ed0:	4604      	mov	r4, r0
 8016ed2:	4975      	ldr	r1, [pc, #468]	; (80170a8 <__ieee754_asinf+0x250>)
 8016ed4:	f7e9 ff70 	bl	8000db8 <__aeabi_fmul>
 8016ed8:	4974      	ldr	r1, [pc, #464]	; (80170ac <__ieee754_asinf+0x254>)
 8016eda:	f7e9 fe65 	bl	8000ba8 <__addsf3>
 8016ede:	4621      	mov	r1, r4
 8016ee0:	f7e9 ff6a 	bl	8000db8 <__aeabi_fmul>
 8016ee4:	4972      	ldr	r1, [pc, #456]	; (80170b0 <__ieee754_asinf+0x258>)
 8016ee6:	f7e9 fe5d 	bl	8000ba4 <__aeabi_fsub>
 8016eea:	4621      	mov	r1, r4
 8016eec:	f7e9 ff64 	bl	8000db8 <__aeabi_fmul>
 8016ef0:	4970      	ldr	r1, [pc, #448]	; (80170b4 <__ieee754_asinf+0x25c>)
 8016ef2:	f7e9 fe59 	bl	8000ba8 <__addsf3>
 8016ef6:	4621      	mov	r1, r4
 8016ef8:	f7e9 ff5e 	bl	8000db8 <__aeabi_fmul>
 8016efc:	496e      	ldr	r1, [pc, #440]	; (80170b8 <__ieee754_asinf+0x260>)
 8016efe:	f7e9 fe51 	bl	8000ba4 <__aeabi_fsub>
 8016f02:	4621      	mov	r1, r4
 8016f04:	f7e9 ff58 	bl	8000db8 <__aeabi_fmul>
 8016f08:	496c      	ldr	r1, [pc, #432]	; (80170bc <__ieee754_asinf+0x264>)
 8016f0a:	f7e9 fe4d 	bl	8000ba8 <__addsf3>
 8016f0e:	4621      	mov	r1, r4
 8016f10:	f7e9 ff52 	bl	8000db8 <__aeabi_fmul>
 8016f14:	496a      	ldr	r1, [pc, #424]	; (80170c0 <__ieee754_asinf+0x268>)
 8016f16:	4680      	mov	r8, r0
 8016f18:	4620      	mov	r0, r4
 8016f1a:	f7e9 ff4d 	bl	8000db8 <__aeabi_fmul>
 8016f1e:	4969      	ldr	r1, [pc, #420]	; (80170c4 <__ieee754_asinf+0x26c>)
 8016f20:	f7e9 fe40 	bl	8000ba4 <__aeabi_fsub>
 8016f24:	4621      	mov	r1, r4
 8016f26:	f7e9 ff47 	bl	8000db8 <__aeabi_fmul>
 8016f2a:	4967      	ldr	r1, [pc, #412]	; (80170c8 <__ieee754_asinf+0x270>)
 8016f2c:	f7e9 fe3c 	bl	8000ba8 <__addsf3>
 8016f30:	4621      	mov	r1, r4
 8016f32:	f7e9 ff41 	bl	8000db8 <__aeabi_fmul>
 8016f36:	4965      	ldr	r1, [pc, #404]	; (80170cc <__ieee754_asinf+0x274>)
 8016f38:	f7e9 fe34 	bl	8000ba4 <__aeabi_fsub>
 8016f3c:	4621      	mov	r1, r4
 8016f3e:	f7e9 ff3b 	bl	8000db8 <__aeabi_fmul>
 8016f42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8016f46:	f7e9 fe2f 	bl	8000ba8 <__addsf3>
 8016f4a:	4681      	mov	r9, r0
 8016f4c:	4620      	mov	r0, r4
 8016f4e:	f000 fdf9 	bl	8017b44 <__ieee754_sqrtf>
 8016f52:	4b5f      	ldr	r3, [pc, #380]	; (80170d0 <__ieee754_asinf+0x278>)
 8016f54:	4606      	mov	r6, r0
 8016f56:	429d      	cmp	r5, r3
 8016f58:	dd63      	ble.n	8017022 <__ieee754_asinf+0x1ca>
 8016f5a:	4649      	mov	r1, r9
 8016f5c:	4640      	mov	r0, r8
 8016f5e:	f7e9 ffdf 	bl	8000f20 <__aeabi_fdiv>
 8016f62:	4631      	mov	r1, r6
 8016f64:	f7e9 ff28 	bl	8000db8 <__aeabi_fmul>
 8016f68:	4631      	mov	r1, r6
 8016f6a:	f7e9 fe1d 	bl	8000ba8 <__addsf3>
 8016f6e:	4601      	mov	r1, r0
 8016f70:	f7e9 fe1a 	bl	8000ba8 <__addsf3>
 8016f74:	4957      	ldr	r1, [pc, #348]	; (80170d4 <__ieee754_asinf+0x27c>)
 8016f76:	f7e9 fe17 	bl	8000ba8 <__addsf3>
 8016f7a:	4601      	mov	r1, r0
 8016f7c:	4847      	ldr	r0, [pc, #284]	; (801709c <__ieee754_asinf+0x244>)
 8016f7e:	f7e9 fe11 	bl	8000ba4 <__aeabi_fsub>
 8016f82:	2f00      	cmp	r7, #0
 8016f84:	4604      	mov	r4, r0
 8016f86:	bfd8      	it	le
 8016f88:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 8016f8c:	e782      	b.n	8016e94 <__ieee754_asinf+0x3c>
 8016f8e:	4601      	mov	r1, r0
 8016f90:	f7e9 ff12 	bl	8000db8 <__aeabi_fmul>
 8016f94:	4605      	mov	r5, r0
 8016f96:	4944      	ldr	r1, [pc, #272]	; (80170a8 <__ieee754_asinf+0x250>)
 8016f98:	f7e9 ff0e 	bl	8000db8 <__aeabi_fmul>
 8016f9c:	4943      	ldr	r1, [pc, #268]	; (80170ac <__ieee754_asinf+0x254>)
 8016f9e:	f7e9 fe03 	bl	8000ba8 <__addsf3>
 8016fa2:	4629      	mov	r1, r5
 8016fa4:	f7e9 ff08 	bl	8000db8 <__aeabi_fmul>
 8016fa8:	4941      	ldr	r1, [pc, #260]	; (80170b0 <__ieee754_asinf+0x258>)
 8016faa:	f7e9 fdfb 	bl	8000ba4 <__aeabi_fsub>
 8016fae:	4629      	mov	r1, r5
 8016fb0:	f7e9 ff02 	bl	8000db8 <__aeabi_fmul>
 8016fb4:	493f      	ldr	r1, [pc, #252]	; (80170b4 <__ieee754_asinf+0x25c>)
 8016fb6:	f7e9 fdf7 	bl	8000ba8 <__addsf3>
 8016fba:	4629      	mov	r1, r5
 8016fbc:	f7e9 fefc 	bl	8000db8 <__aeabi_fmul>
 8016fc0:	493d      	ldr	r1, [pc, #244]	; (80170b8 <__ieee754_asinf+0x260>)
 8016fc2:	f7e9 fdef 	bl	8000ba4 <__aeabi_fsub>
 8016fc6:	4629      	mov	r1, r5
 8016fc8:	f7e9 fef6 	bl	8000db8 <__aeabi_fmul>
 8016fcc:	493b      	ldr	r1, [pc, #236]	; (80170bc <__ieee754_asinf+0x264>)
 8016fce:	f7e9 fdeb 	bl	8000ba8 <__addsf3>
 8016fd2:	4629      	mov	r1, r5
 8016fd4:	f7e9 fef0 	bl	8000db8 <__aeabi_fmul>
 8016fd8:	4939      	ldr	r1, [pc, #228]	; (80170c0 <__ieee754_asinf+0x268>)
 8016fda:	4606      	mov	r6, r0
 8016fdc:	4628      	mov	r0, r5
 8016fde:	f7e9 feeb 	bl	8000db8 <__aeabi_fmul>
 8016fe2:	4938      	ldr	r1, [pc, #224]	; (80170c4 <__ieee754_asinf+0x26c>)
 8016fe4:	f7e9 fdde 	bl	8000ba4 <__aeabi_fsub>
 8016fe8:	4629      	mov	r1, r5
 8016fea:	f7e9 fee5 	bl	8000db8 <__aeabi_fmul>
 8016fee:	4936      	ldr	r1, [pc, #216]	; (80170c8 <__ieee754_asinf+0x270>)
 8016ff0:	f7e9 fdda 	bl	8000ba8 <__addsf3>
 8016ff4:	4629      	mov	r1, r5
 8016ff6:	f7e9 fedf 	bl	8000db8 <__aeabi_fmul>
 8016ffa:	4934      	ldr	r1, [pc, #208]	; (80170cc <__ieee754_asinf+0x274>)
 8016ffc:	f7e9 fdd2 	bl	8000ba4 <__aeabi_fsub>
 8017000:	4629      	mov	r1, r5
 8017002:	f7e9 fed9 	bl	8000db8 <__aeabi_fmul>
 8017006:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801700a:	f7e9 fdcd 	bl	8000ba8 <__addsf3>
 801700e:	4601      	mov	r1, r0
 8017010:	4630      	mov	r0, r6
 8017012:	f7e9 ff85 	bl	8000f20 <__aeabi_fdiv>
 8017016:	4621      	mov	r1, r4
 8017018:	f7e9 fece 	bl	8000db8 <__aeabi_fmul>
 801701c:	4601      	mov	r1, r0
 801701e:	4620      	mov	r0, r4
 8017020:	e72d      	b.n	8016e7e <__ieee754_asinf+0x26>
 8017022:	4601      	mov	r1, r0
 8017024:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8017028:	f7e9 fdbe 	bl	8000ba8 <__addsf3>
 801702c:	4649      	mov	r1, r9
 801702e:	4682      	mov	sl, r0
 8017030:	4640      	mov	r0, r8
 8017032:	f7e9 ff75 	bl	8000f20 <__aeabi_fdiv>
 8017036:	4601      	mov	r1, r0
 8017038:	4650      	mov	r0, sl
 801703a:	f7e9 febd 	bl	8000db8 <__aeabi_fmul>
 801703e:	f025 050f 	bic.w	r5, r5, #15
 8017042:	4680      	mov	r8, r0
 8017044:	4629      	mov	r1, r5
 8017046:	4628      	mov	r0, r5
 8017048:	f7e9 feb6 	bl	8000db8 <__aeabi_fmul>
 801704c:	4601      	mov	r1, r0
 801704e:	4620      	mov	r0, r4
 8017050:	f7e9 fda8 	bl	8000ba4 <__aeabi_fsub>
 8017054:	4631      	mov	r1, r6
 8017056:	4604      	mov	r4, r0
 8017058:	4628      	mov	r0, r5
 801705a:	f7e9 fda5 	bl	8000ba8 <__addsf3>
 801705e:	4601      	mov	r1, r0
 8017060:	4620      	mov	r0, r4
 8017062:	f7e9 ff5d 	bl	8000f20 <__aeabi_fdiv>
 8017066:	4601      	mov	r1, r0
 8017068:	f7e9 fd9e 	bl	8000ba8 <__addsf3>
 801706c:	4601      	mov	r1, r0
 801706e:	480c      	ldr	r0, [pc, #48]	; (80170a0 <__ieee754_asinf+0x248>)
 8017070:	f7e9 fd98 	bl	8000ba4 <__aeabi_fsub>
 8017074:	4601      	mov	r1, r0
 8017076:	4640      	mov	r0, r8
 8017078:	f7e9 fd94 	bl	8000ba4 <__aeabi_fsub>
 801707c:	4629      	mov	r1, r5
 801707e:	4604      	mov	r4, r0
 8017080:	4628      	mov	r0, r5
 8017082:	f7e9 fd91 	bl	8000ba8 <__addsf3>
 8017086:	4601      	mov	r1, r0
 8017088:	4813      	ldr	r0, [pc, #76]	; (80170d8 <__ieee754_asinf+0x280>)
 801708a:	f7e9 fd8b 	bl	8000ba4 <__aeabi_fsub>
 801708e:	4601      	mov	r1, r0
 8017090:	4620      	mov	r0, r4
 8017092:	f7e9 fd87 	bl	8000ba4 <__aeabi_fsub>
 8017096:	4601      	mov	r1, r0
 8017098:	480f      	ldr	r0, [pc, #60]	; (80170d8 <__ieee754_asinf+0x280>)
 801709a:	e770      	b.n	8016f7e <__ieee754_asinf+0x126>
 801709c:	3fc90fdb 	.word	0x3fc90fdb
 80170a0:	b33bbd2e 	.word	0xb33bbd2e
 80170a4:	7149f2ca 	.word	0x7149f2ca
 80170a8:	3811ef08 	.word	0x3811ef08
 80170ac:	3a4f7f04 	.word	0x3a4f7f04
 80170b0:	3d241146 	.word	0x3d241146
 80170b4:	3e4e0aa8 	.word	0x3e4e0aa8
 80170b8:	3ea6b090 	.word	0x3ea6b090
 80170bc:	3e2aaaab 	.word	0x3e2aaaab
 80170c0:	3d9dc62e 	.word	0x3d9dc62e
 80170c4:	3f303361 	.word	0x3f303361
 80170c8:	4001572d 	.word	0x4001572d
 80170cc:	4019d139 	.word	0x4019d139
 80170d0:	3f799999 	.word	0x3f799999
 80170d4:	333bbd2e 	.word	0x333bbd2e
 80170d8:	3f490fdb 	.word	0x3f490fdb

080170dc <__ieee754_atan2f>:
 80170dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80170e2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80170e6:	4603      	mov	r3, r0
 80170e8:	dc05      	bgt.n	80170f6 <__ieee754_atan2f+0x1a>
 80170ea:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80170ee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80170f2:	4607      	mov	r7, r0
 80170f4:	dd04      	ble.n	8017100 <__ieee754_atan2f+0x24>
 80170f6:	4618      	mov	r0, r3
 80170f8:	f7e9 fd56 	bl	8000ba8 <__addsf3>
 80170fc:	4603      	mov	r3, r0
 80170fe:	e024      	b.n	801714a <__ieee754_atan2f+0x6e>
 8017100:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8017104:	d103      	bne.n	801710e <__ieee754_atan2f+0x32>
 8017106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801710a:	f002 b8df 	b.w	80192cc <atanf>
 801710e:	178c      	asrs	r4, r1, #30
 8017110:	f004 0402 	and.w	r4, r4, #2
 8017114:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8017118:	b92a      	cbnz	r2, 8017126 <__ieee754_atan2f+0x4a>
 801711a:	2c02      	cmp	r4, #2
 801711c:	d057      	beq.n	80171ce <__ieee754_atan2f+0xf2>
 801711e:	2c03      	cmp	r4, #3
 8017120:	d113      	bne.n	801714a <__ieee754_atan2f+0x6e>
 8017122:	4b2d      	ldr	r3, [pc, #180]	; (80171d8 <__ieee754_atan2f+0xfc>)
 8017124:	e011      	b.n	801714a <__ieee754_atan2f+0x6e>
 8017126:	b91e      	cbnz	r6, 8017130 <__ieee754_atan2f+0x54>
 8017128:	2f00      	cmp	r7, #0
 801712a:	da52      	bge.n	80171d2 <__ieee754_atan2f+0xf6>
 801712c:	4b2b      	ldr	r3, [pc, #172]	; (80171dc <__ieee754_atan2f+0x100>)
 801712e:	e00c      	b.n	801714a <__ieee754_atan2f+0x6e>
 8017130:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8017134:	d11a      	bne.n	801716c <__ieee754_atan2f+0x90>
 8017136:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801713a:	d10c      	bne.n	8017156 <__ieee754_atan2f+0x7a>
 801713c:	2c02      	cmp	r4, #2
 801713e:	d006      	beq.n	801714e <__ieee754_atan2f+0x72>
 8017140:	2c03      	cmp	r4, #3
 8017142:	d006      	beq.n	8017152 <__ieee754_atan2f+0x76>
 8017144:	2c01      	cmp	r4, #1
 8017146:	d140      	bne.n	80171ca <__ieee754_atan2f+0xee>
 8017148:	4b25      	ldr	r3, [pc, #148]	; (80171e0 <__ieee754_atan2f+0x104>)
 801714a:	4618      	mov	r0, r3
 801714c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801714e:	4b25      	ldr	r3, [pc, #148]	; (80171e4 <__ieee754_atan2f+0x108>)
 8017150:	e7fb      	b.n	801714a <__ieee754_atan2f+0x6e>
 8017152:	4b25      	ldr	r3, [pc, #148]	; (80171e8 <__ieee754_atan2f+0x10c>)
 8017154:	e7f9      	b.n	801714a <__ieee754_atan2f+0x6e>
 8017156:	2c02      	cmp	r4, #2
 8017158:	d039      	beq.n	80171ce <__ieee754_atan2f+0xf2>
 801715a:	2c03      	cmp	r4, #3
 801715c:	d0e1      	beq.n	8017122 <__ieee754_atan2f+0x46>
 801715e:	2c01      	cmp	r4, #1
 8017160:	d102      	bne.n	8017168 <__ieee754_atan2f+0x8c>
 8017162:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8017166:	e7f0      	b.n	801714a <__ieee754_atan2f+0x6e>
 8017168:	2300      	movs	r3, #0
 801716a:	e7ee      	b.n	801714a <__ieee754_atan2f+0x6e>
 801716c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017170:	d0da      	beq.n	8017128 <__ieee754_atan2f+0x4c>
 8017172:	1b92      	subs	r2, r2, r6
 8017174:	15d2      	asrs	r2, r2, #23
 8017176:	2a3c      	cmp	r2, #60	; 0x3c
 8017178:	dc17      	bgt.n	80171aa <__ieee754_atan2f+0xce>
 801717a:	2900      	cmp	r1, #0
 801717c:	da01      	bge.n	8017182 <__ieee754_atan2f+0xa6>
 801717e:	323c      	adds	r2, #60	; 0x3c
 8017180:	db15      	blt.n	80171ae <__ieee754_atan2f+0xd2>
 8017182:	4618      	mov	r0, r3
 8017184:	f7e9 fecc 	bl	8000f20 <__aeabi_fdiv>
 8017188:	f002 f9ac 	bl	80194e4 <fabsf>
 801718c:	f002 f89e 	bl	80192cc <atanf>
 8017190:	4603      	mov	r3, r0
 8017192:	2c01      	cmp	r4, #1
 8017194:	d00d      	beq.n	80171b2 <__ieee754_atan2f+0xd6>
 8017196:	2c02      	cmp	r4, #2
 8017198:	d00e      	beq.n	80171b8 <__ieee754_atan2f+0xdc>
 801719a:	2c00      	cmp	r4, #0
 801719c:	d0d5      	beq.n	801714a <__ieee754_atan2f+0x6e>
 801719e:	4913      	ldr	r1, [pc, #76]	; (80171ec <__ieee754_atan2f+0x110>)
 80171a0:	4618      	mov	r0, r3
 80171a2:	f7e9 fd01 	bl	8000ba8 <__addsf3>
 80171a6:	4912      	ldr	r1, [pc, #72]	; (80171f0 <__ieee754_atan2f+0x114>)
 80171a8:	e00c      	b.n	80171c4 <__ieee754_atan2f+0xe8>
 80171aa:	4b12      	ldr	r3, [pc, #72]	; (80171f4 <__ieee754_atan2f+0x118>)
 80171ac:	e7f1      	b.n	8017192 <__ieee754_atan2f+0xb6>
 80171ae:	2300      	movs	r3, #0
 80171b0:	e7ef      	b.n	8017192 <__ieee754_atan2f+0xb6>
 80171b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80171b6:	e7c8      	b.n	801714a <__ieee754_atan2f+0x6e>
 80171b8:	490c      	ldr	r1, [pc, #48]	; (80171ec <__ieee754_atan2f+0x110>)
 80171ba:	4618      	mov	r0, r3
 80171bc:	f7e9 fcf4 	bl	8000ba8 <__addsf3>
 80171c0:	4601      	mov	r1, r0
 80171c2:	480b      	ldr	r0, [pc, #44]	; (80171f0 <__ieee754_atan2f+0x114>)
 80171c4:	f7e9 fcee 	bl	8000ba4 <__aeabi_fsub>
 80171c8:	e798      	b.n	80170fc <__ieee754_atan2f+0x20>
 80171ca:	4b0b      	ldr	r3, [pc, #44]	; (80171f8 <__ieee754_atan2f+0x11c>)
 80171cc:	e7bd      	b.n	801714a <__ieee754_atan2f+0x6e>
 80171ce:	4b08      	ldr	r3, [pc, #32]	; (80171f0 <__ieee754_atan2f+0x114>)
 80171d0:	e7bb      	b.n	801714a <__ieee754_atan2f+0x6e>
 80171d2:	4b08      	ldr	r3, [pc, #32]	; (80171f4 <__ieee754_atan2f+0x118>)
 80171d4:	e7b9      	b.n	801714a <__ieee754_atan2f+0x6e>
 80171d6:	bf00      	nop
 80171d8:	c0490fdb 	.word	0xc0490fdb
 80171dc:	bfc90fdb 	.word	0xbfc90fdb
 80171e0:	bf490fdb 	.word	0xbf490fdb
 80171e4:	4016cbe4 	.word	0x4016cbe4
 80171e8:	c016cbe4 	.word	0xc016cbe4
 80171ec:	33bbbd2e 	.word	0x33bbbd2e
 80171f0:	40490fdb 	.word	0x40490fdb
 80171f4:	3fc90fdb 	.word	0x3fc90fdb
 80171f8:	3f490fdb 	.word	0x3f490fdb

080171fc <__ieee754_powf>:
 80171fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017200:	b087      	sub	sp, #28
 8017202:	9101      	str	r1, [sp, #4]
 8017204:	9c01      	ldr	r4, [sp, #4]
 8017206:	4681      	mov	r9, r0
 8017208:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 801720c:	f000 8324 	beq.w	8017858 <__ieee754_powf+0x65c>
 8017210:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8017214:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8017218:	4680      	mov	r8, r0
 801721a:	dc06      	bgt.n	801722a <__ieee754_powf+0x2e>
 801721c:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8017220:	dd09      	ble.n	8017236 <__ieee754_powf+0x3a>
 8017222:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8017226:	f000 8317 	beq.w	8017858 <__ieee754_powf+0x65c>
 801722a:	4885      	ldr	r0, [pc, #532]	; (8017440 <__ieee754_powf+0x244>)
 801722c:	b007      	add	sp, #28
 801722e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017232:	f7fd bccd 	b.w	8014bd0 <nanf>
 8017236:	2800      	cmp	r0, #0
 8017238:	da1d      	bge.n	8017276 <__ieee754_powf+0x7a>
 801723a:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801723e:	da2b      	bge.n	8017298 <__ieee754_powf+0x9c>
 8017240:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8017244:	db30      	blt.n	80172a8 <__ieee754_powf+0xac>
 8017246:	15fb      	asrs	r3, r7, #23
 8017248:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801724c:	fa47 f503 	asr.w	r5, r7, r3
 8017250:	fa05 f303 	lsl.w	r3, r5, r3
 8017254:	42bb      	cmp	r3, r7
 8017256:	d127      	bne.n	80172a8 <__ieee754_powf+0xac>
 8017258:	f005 0501 	and.w	r5, r5, #1
 801725c:	f1c5 0502 	rsb	r5, r5, #2
 8017260:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8017264:	d122      	bne.n	80172ac <__ieee754_powf+0xb0>
 8017266:	2c00      	cmp	r4, #0
 8017268:	4649      	mov	r1, r9
 801726a:	da11      	bge.n	8017290 <__ieee754_powf+0x94>
 801726c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017270:	f7e9 fe56 	bl	8000f20 <__aeabi_fdiv>
 8017274:	e021      	b.n	80172ba <__ieee754_powf+0xbe>
 8017276:	2500      	movs	r5, #0
 8017278:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801727c:	d1f0      	bne.n	8017260 <__ieee754_powf+0x64>
 801727e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8017282:	f000 82e9 	beq.w	8017858 <__ieee754_powf+0x65c>
 8017286:	dd09      	ble.n	801729c <__ieee754_powf+0xa0>
 8017288:	2c00      	cmp	r4, #0
 801728a:	f280 82e8 	bge.w	801785e <__ieee754_powf+0x662>
 801728e:	2100      	movs	r1, #0
 8017290:	4608      	mov	r0, r1
 8017292:	b007      	add	sp, #28
 8017294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017298:	2502      	movs	r5, #2
 801729a:	e7ed      	b.n	8017278 <__ieee754_powf+0x7c>
 801729c:	2c00      	cmp	r4, #0
 801729e:	daf6      	bge.n	801728e <__ieee754_powf+0x92>
 80172a0:	9b01      	ldr	r3, [sp, #4]
 80172a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80172a6:	e7f3      	b.n	8017290 <__ieee754_powf+0x94>
 80172a8:	2500      	movs	r5, #0
 80172aa:	e7d9      	b.n	8017260 <__ieee754_powf+0x64>
 80172ac:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80172b0:	d105      	bne.n	80172be <__ieee754_powf+0xc2>
 80172b2:	4649      	mov	r1, r9
 80172b4:	4608      	mov	r0, r1
 80172b6:	f7e9 fd7f 	bl	8000db8 <__aeabi_fmul>
 80172ba:	4601      	mov	r1, r0
 80172bc:	e7e8      	b.n	8017290 <__ieee754_powf+0x94>
 80172be:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80172c2:	4648      	mov	r0, r9
 80172c4:	d107      	bne.n	80172d6 <__ieee754_powf+0xda>
 80172c6:	f1b8 0f00 	cmp.w	r8, #0
 80172ca:	db04      	blt.n	80172d6 <__ieee754_powf+0xda>
 80172cc:	b007      	add	sp, #28
 80172ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172d2:	f000 bc37 	b.w	8017b44 <__ieee754_sqrtf>
 80172d6:	f002 f905 	bl	80194e4 <fabsf>
 80172da:	4601      	mov	r1, r0
 80172dc:	b126      	cbz	r6, 80172e8 <__ieee754_powf+0xec>
 80172de:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80172e2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80172e6:	d118      	bne.n	801731a <__ieee754_powf+0x11e>
 80172e8:	2c00      	cmp	r4, #0
 80172ea:	da04      	bge.n	80172f6 <__ieee754_powf+0xfa>
 80172ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80172f0:	f7e9 fe16 	bl	8000f20 <__aeabi_fdiv>
 80172f4:	4601      	mov	r1, r0
 80172f6:	f1b8 0f00 	cmp.w	r8, #0
 80172fa:	dac9      	bge.n	8017290 <__ieee754_powf+0x94>
 80172fc:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 8017300:	ea50 0305 	orrs.w	r3, r0, r5
 8017304:	d104      	bne.n	8017310 <__ieee754_powf+0x114>
 8017306:	4608      	mov	r0, r1
 8017308:	f7e9 fc4c 	bl	8000ba4 <__aeabi_fsub>
 801730c:	4601      	mov	r1, r0
 801730e:	e7af      	b.n	8017270 <__ieee754_powf+0x74>
 8017310:	2d01      	cmp	r5, #1
 8017312:	d1bd      	bne.n	8017290 <__ieee754_powf+0x94>
 8017314:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8017318:	e7ba      	b.n	8017290 <__ieee754_powf+0x94>
 801731a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 801731e:	f108 33ff 	add.w	r3, r8, #4294967295
 8017322:	9303      	str	r3, [sp, #12]
 8017324:	432b      	orrs	r3, r5
 8017326:	d101      	bne.n	801732c <__ieee754_powf+0x130>
 8017328:	4649      	mov	r1, r9
 801732a:	e7ec      	b.n	8017306 <__ieee754_powf+0x10a>
 801732c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8017330:	f340 8098 	ble.w	8017464 <__ieee754_powf+0x268>
 8017334:	4b43      	ldr	r3, [pc, #268]	; (8017444 <__ieee754_powf+0x248>)
 8017336:	429e      	cmp	r6, r3
 8017338:	dc03      	bgt.n	8017342 <__ieee754_powf+0x146>
 801733a:	2c00      	cmp	r4, #0
 801733c:	daa7      	bge.n	801728e <__ieee754_powf+0x92>
 801733e:	4942      	ldr	r1, [pc, #264]	; (8017448 <__ieee754_powf+0x24c>)
 8017340:	e7b8      	b.n	80172b4 <__ieee754_powf+0xb8>
 8017342:	4b42      	ldr	r3, [pc, #264]	; (801744c <__ieee754_powf+0x250>)
 8017344:	429e      	cmp	r6, r3
 8017346:	dd02      	ble.n	801734e <__ieee754_powf+0x152>
 8017348:	2c00      	cmp	r4, #0
 801734a:	dcf8      	bgt.n	801733e <__ieee754_powf+0x142>
 801734c:	e79f      	b.n	801728e <__ieee754_powf+0x92>
 801734e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8017352:	f7e9 fc27 	bl	8000ba4 <__aeabi_fsub>
 8017356:	493e      	ldr	r1, [pc, #248]	; (8017450 <__ieee754_powf+0x254>)
 8017358:	4606      	mov	r6, r0
 801735a:	f7e9 fd2d 	bl	8000db8 <__aeabi_fmul>
 801735e:	493d      	ldr	r1, [pc, #244]	; (8017454 <__ieee754_powf+0x258>)
 8017360:	4607      	mov	r7, r0
 8017362:	4630      	mov	r0, r6
 8017364:	f7e9 fd28 	bl	8000db8 <__aeabi_fmul>
 8017368:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 801736c:	4680      	mov	r8, r0
 801736e:	4630      	mov	r0, r6
 8017370:	f7e9 fd22 	bl	8000db8 <__aeabi_fmul>
 8017374:	4601      	mov	r1, r0
 8017376:	4838      	ldr	r0, [pc, #224]	; (8017458 <__ieee754_powf+0x25c>)
 8017378:	f7e9 fc14 	bl	8000ba4 <__aeabi_fsub>
 801737c:	4631      	mov	r1, r6
 801737e:	f7e9 fd1b 	bl	8000db8 <__aeabi_fmul>
 8017382:	4601      	mov	r1, r0
 8017384:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8017388:	f7e9 fc0c 	bl	8000ba4 <__aeabi_fsub>
 801738c:	4631      	mov	r1, r6
 801738e:	4681      	mov	r9, r0
 8017390:	4630      	mov	r0, r6
 8017392:	f7e9 fd11 	bl	8000db8 <__aeabi_fmul>
 8017396:	4601      	mov	r1, r0
 8017398:	4648      	mov	r0, r9
 801739a:	f7e9 fd0d 	bl	8000db8 <__aeabi_fmul>
 801739e:	492f      	ldr	r1, [pc, #188]	; (801745c <__ieee754_powf+0x260>)
 80173a0:	f7e9 fd0a 	bl	8000db8 <__aeabi_fmul>
 80173a4:	4601      	mov	r1, r0
 80173a6:	4640      	mov	r0, r8
 80173a8:	f7e9 fbfc 	bl	8000ba4 <__aeabi_fsub>
 80173ac:	4601      	mov	r1, r0
 80173ae:	4606      	mov	r6, r0
 80173b0:	4638      	mov	r0, r7
 80173b2:	f7e9 fbf9 	bl	8000ba8 <__addsf3>
 80173b6:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 80173ba:	f02a 0a0f 	bic.w	sl, sl, #15
 80173be:	4639      	mov	r1, r7
 80173c0:	4650      	mov	r0, sl
 80173c2:	f7e9 fbef 	bl	8000ba4 <__aeabi_fsub>
 80173c6:	4601      	mov	r1, r0
 80173c8:	4630      	mov	r0, r6
 80173ca:	f7e9 fbeb 	bl	8000ba4 <__aeabi_fsub>
 80173ce:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80173d2:	9b03      	ldr	r3, [sp, #12]
 80173d4:	3d01      	subs	r5, #1
 80173d6:	f024 040f 	bic.w	r4, r4, #15
 80173da:	432b      	orrs	r3, r5
 80173dc:	4606      	mov	r6, r0
 80173de:	4621      	mov	r1, r4
 80173e0:	9801      	ldr	r0, [sp, #4]
 80173e2:	bf0c      	ite	eq
 80173e4:	4d1e      	ldreq	r5, [pc, #120]	; (8017460 <__ieee754_powf+0x264>)
 80173e6:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 80173ea:	f7e9 fbdb 	bl	8000ba4 <__aeabi_fsub>
 80173ee:	4651      	mov	r1, sl
 80173f0:	f7e9 fce2 	bl	8000db8 <__aeabi_fmul>
 80173f4:	9901      	ldr	r1, [sp, #4]
 80173f6:	4607      	mov	r7, r0
 80173f8:	4630      	mov	r0, r6
 80173fa:	f7e9 fcdd 	bl	8000db8 <__aeabi_fmul>
 80173fe:	4601      	mov	r1, r0
 8017400:	4638      	mov	r0, r7
 8017402:	f7e9 fbd1 	bl	8000ba8 <__addsf3>
 8017406:	4621      	mov	r1, r4
 8017408:	4606      	mov	r6, r0
 801740a:	4650      	mov	r0, sl
 801740c:	f7e9 fcd4 	bl	8000db8 <__aeabi_fmul>
 8017410:	4601      	mov	r1, r0
 8017412:	4607      	mov	r7, r0
 8017414:	4681      	mov	r9, r0
 8017416:	4630      	mov	r0, r6
 8017418:	f7e9 fbc6 	bl	8000ba8 <__addsf3>
 801741c:	2800      	cmp	r0, #0
 801741e:	4682      	mov	sl, r0
 8017420:	4680      	mov	r8, r0
 8017422:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8017426:	f340 81fb 	ble.w	8017820 <__ieee754_powf+0x624>
 801742a:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 801742e:	f340 8149 	ble.w	80176c4 <__ieee754_powf+0x4c8>
 8017432:	4905      	ldr	r1, [pc, #20]	; (8017448 <__ieee754_powf+0x24c>)
 8017434:	4628      	mov	r0, r5
 8017436:	f7e9 fcbf 	bl	8000db8 <__aeabi_fmul>
 801743a:	4903      	ldr	r1, [pc, #12]	; (8017448 <__ieee754_powf+0x24c>)
 801743c:	e73b      	b.n	80172b6 <__ieee754_powf+0xba>
 801743e:	bf00      	nop
 8017440:	08019dc1 	.word	0x08019dc1
 8017444:	3f7ffff7 	.word	0x3f7ffff7
 8017448:	7149f2ca 	.word	0x7149f2ca
 801744c:	3f800007 	.word	0x3f800007
 8017450:	3fb8aa00 	.word	0x3fb8aa00
 8017454:	36eca570 	.word	0x36eca570
 8017458:	3eaaaaab 	.word	0x3eaaaaab
 801745c:	3fb8aa3b 	.word	0x3fb8aa3b
 8017460:	bf800000 	.word	0xbf800000
 8017464:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8017468:	f280 810a 	bge.w	8017680 <__ieee754_powf+0x484>
 801746c:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8017470:	f7e9 fca2 	bl	8000db8 <__aeabi_fmul>
 8017474:	f06f 0217 	mvn.w	r2, #23
 8017478:	4606      	mov	r6, r0
 801747a:	15f3      	asrs	r3, r6, #23
 801747c:	3b7f      	subs	r3, #127	; 0x7f
 801747e:	441a      	add	r2, r3
 8017480:	4b81      	ldr	r3, [pc, #516]	; (8017688 <__ieee754_powf+0x48c>)
 8017482:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8017486:	4298      	cmp	r0, r3
 8017488:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 801748c:	dd06      	ble.n	801749c <__ieee754_powf+0x2a0>
 801748e:	4b7f      	ldr	r3, [pc, #508]	; (801768c <__ieee754_powf+0x490>)
 8017490:	4298      	cmp	r0, r3
 8017492:	f340 80f7 	ble.w	8017684 <__ieee754_powf+0x488>
 8017496:	3201      	adds	r2, #1
 8017498:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 801749c:	2700      	movs	r7, #0
 801749e:	4b7c      	ldr	r3, [pc, #496]	; (8017690 <__ieee754_powf+0x494>)
 80174a0:	4630      	mov	r0, r6
 80174a2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 80174a6:	9205      	str	r2, [sp, #20]
 80174a8:	4619      	mov	r1, r3
 80174aa:	9302      	str	r3, [sp, #8]
 80174ac:	f7e9 fb7a 	bl	8000ba4 <__aeabi_fsub>
 80174b0:	4631      	mov	r1, r6
 80174b2:	4683      	mov	fp, r0
 80174b4:	9802      	ldr	r0, [sp, #8]
 80174b6:	f7e9 fb77 	bl	8000ba8 <__addsf3>
 80174ba:	4601      	mov	r1, r0
 80174bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80174c0:	f7e9 fd2e 	bl	8000f20 <__aeabi_fdiv>
 80174c4:	4601      	mov	r1, r0
 80174c6:	9004      	str	r0, [sp, #16]
 80174c8:	4658      	mov	r0, fp
 80174ca:	f7e9 fc75 	bl	8000db8 <__aeabi_fmul>
 80174ce:	46b2      	mov	sl, r6
 80174d0:	1076      	asrs	r6, r6, #1
 80174d2:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80174d6:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 80174da:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 80174de:	f028 080f 	bic.w	r8, r8, #15
 80174e2:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 80174e6:	4681      	mov	r9, r0
 80174e8:	4631      	mov	r1, r6
 80174ea:	4640      	mov	r0, r8
 80174ec:	f7e9 fc64 	bl	8000db8 <__aeabi_fmul>
 80174f0:	4601      	mov	r1, r0
 80174f2:	4658      	mov	r0, fp
 80174f4:	f7e9 fb56 	bl	8000ba4 <__aeabi_fsub>
 80174f8:	9902      	ldr	r1, [sp, #8]
 80174fa:	4683      	mov	fp, r0
 80174fc:	4630      	mov	r0, r6
 80174fe:	f7e9 fb51 	bl	8000ba4 <__aeabi_fsub>
 8017502:	4601      	mov	r1, r0
 8017504:	4650      	mov	r0, sl
 8017506:	f7e9 fb4d 	bl	8000ba4 <__aeabi_fsub>
 801750a:	4641      	mov	r1, r8
 801750c:	f7e9 fc54 	bl	8000db8 <__aeabi_fmul>
 8017510:	4601      	mov	r1, r0
 8017512:	4658      	mov	r0, fp
 8017514:	f7e9 fb46 	bl	8000ba4 <__aeabi_fsub>
 8017518:	9b04      	ldr	r3, [sp, #16]
 801751a:	4619      	mov	r1, r3
 801751c:	f7e9 fc4c 	bl	8000db8 <__aeabi_fmul>
 8017520:	4649      	mov	r1, r9
 8017522:	4683      	mov	fp, r0
 8017524:	4648      	mov	r0, r9
 8017526:	f7e9 fc47 	bl	8000db8 <__aeabi_fmul>
 801752a:	4606      	mov	r6, r0
 801752c:	4959      	ldr	r1, [pc, #356]	; (8017694 <__ieee754_powf+0x498>)
 801752e:	f7e9 fc43 	bl	8000db8 <__aeabi_fmul>
 8017532:	4959      	ldr	r1, [pc, #356]	; (8017698 <__ieee754_powf+0x49c>)
 8017534:	f7e9 fb38 	bl	8000ba8 <__addsf3>
 8017538:	4631      	mov	r1, r6
 801753a:	f7e9 fc3d 	bl	8000db8 <__aeabi_fmul>
 801753e:	4957      	ldr	r1, [pc, #348]	; (801769c <__ieee754_powf+0x4a0>)
 8017540:	f7e9 fb32 	bl	8000ba8 <__addsf3>
 8017544:	4631      	mov	r1, r6
 8017546:	f7e9 fc37 	bl	8000db8 <__aeabi_fmul>
 801754a:	4955      	ldr	r1, [pc, #340]	; (80176a0 <__ieee754_powf+0x4a4>)
 801754c:	f7e9 fb2c 	bl	8000ba8 <__addsf3>
 8017550:	4631      	mov	r1, r6
 8017552:	f7e9 fc31 	bl	8000db8 <__aeabi_fmul>
 8017556:	4953      	ldr	r1, [pc, #332]	; (80176a4 <__ieee754_powf+0x4a8>)
 8017558:	f7e9 fb26 	bl	8000ba8 <__addsf3>
 801755c:	4631      	mov	r1, r6
 801755e:	f7e9 fc2b 	bl	8000db8 <__aeabi_fmul>
 8017562:	4951      	ldr	r1, [pc, #324]	; (80176a8 <__ieee754_powf+0x4ac>)
 8017564:	f7e9 fb20 	bl	8000ba8 <__addsf3>
 8017568:	4631      	mov	r1, r6
 801756a:	4682      	mov	sl, r0
 801756c:	4630      	mov	r0, r6
 801756e:	f7e9 fc23 	bl	8000db8 <__aeabi_fmul>
 8017572:	4601      	mov	r1, r0
 8017574:	4650      	mov	r0, sl
 8017576:	f7e9 fc1f 	bl	8000db8 <__aeabi_fmul>
 801757a:	4606      	mov	r6, r0
 801757c:	4649      	mov	r1, r9
 801757e:	4640      	mov	r0, r8
 8017580:	f7e9 fb12 	bl	8000ba8 <__addsf3>
 8017584:	4659      	mov	r1, fp
 8017586:	f7e9 fc17 	bl	8000db8 <__aeabi_fmul>
 801758a:	4631      	mov	r1, r6
 801758c:	f7e9 fb0c 	bl	8000ba8 <__addsf3>
 8017590:	4641      	mov	r1, r8
 8017592:	4682      	mov	sl, r0
 8017594:	4640      	mov	r0, r8
 8017596:	f7e9 fc0f 	bl	8000db8 <__aeabi_fmul>
 801759a:	4944      	ldr	r1, [pc, #272]	; (80176ac <__ieee754_powf+0x4b0>)
 801759c:	9002      	str	r0, [sp, #8]
 801759e:	f7e9 fb03 	bl	8000ba8 <__addsf3>
 80175a2:	4651      	mov	r1, sl
 80175a4:	f7e9 fb00 	bl	8000ba8 <__addsf3>
 80175a8:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80175ac:	f026 060f 	bic.w	r6, r6, #15
 80175b0:	4631      	mov	r1, r6
 80175b2:	4640      	mov	r0, r8
 80175b4:	f7e9 fc00 	bl	8000db8 <__aeabi_fmul>
 80175b8:	493c      	ldr	r1, [pc, #240]	; (80176ac <__ieee754_powf+0x4b0>)
 80175ba:	4680      	mov	r8, r0
 80175bc:	4630      	mov	r0, r6
 80175be:	f7e9 faf1 	bl	8000ba4 <__aeabi_fsub>
 80175c2:	9b02      	ldr	r3, [sp, #8]
 80175c4:	4619      	mov	r1, r3
 80175c6:	f7e9 faed 	bl	8000ba4 <__aeabi_fsub>
 80175ca:	4601      	mov	r1, r0
 80175cc:	4650      	mov	r0, sl
 80175ce:	f7e9 fae9 	bl	8000ba4 <__aeabi_fsub>
 80175d2:	4649      	mov	r1, r9
 80175d4:	f7e9 fbf0 	bl	8000db8 <__aeabi_fmul>
 80175d8:	4659      	mov	r1, fp
 80175da:	4681      	mov	r9, r0
 80175dc:	4630      	mov	r0, r6
 80175de:	f7e9 fbeb 	bl	8000db8 <__aeabi_fmul>
 80175e2:	4601      	mov	r1, r0
 80175e4:	4648      	mov	r0, r9
 80175e6:	f7e9 fadf 	bl	8000ba8 <__addsf3>
 80175ea:	4682      	mov	sl, r0
 80175ec:	4601      	mov	r1, r0
 80175ee:	4640      	mov	r0, r8
 80175f0:	f7e9 fada 	bl	8000ba8 <__addsf3>
 80175f4:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80175f8:	f029 090f 	bic.w	r9, r9, #15
 80175fc:	492c      	ldr	r1, [pc, #176]	; (80176b0 <__ieee754_powf+0x4b4>)
 80175fe:	4648      	mov	r0, r9
 8017600:	f7e9 fbda 	bl	8000db8 <__aeabi_fmul>
 8017604:	4641      	mov	r1, r8
 8017606:	4606      	mov	r6, r0
 8017608:	4648      	mov	r0, r9
 801760a:	f7e9 facb 	bl	8000ba4 <__aeabi_fsub>
 801760e:	4601      	mov	r1, r0
 8017610:	4650      	mov	r0, sl
 8017612:	f7e9 fac7 	bl	8000ba4 <__aeabi_fsub>
 8017616:	4927      	ldr	r1, [pc, #156]	; (80176b4 <__ieee754_powf+0x4b8>)
 8017618:	f7e9 fbce 	bl	8000db8 <__aeabi_fmul>
 801761c:	4926      	ldr	r1, [pc, #152]	; (80176b8 <__ieee754_powf+0x4bc>)
 801761e:	4680      	mov	r8, r0
 8017620:	4648      	mov	r0, r9
 8017622:	f7e9 fbc9 	bl	8000db8 <__aeabi_fmul>
 8017626:	4601      	mov	r1, r0
 8017628:	4640      	mov	r0, r8
 801762a:	f7e9 fabd 	bl	8000ba8 <__addsf3>
 801762e:	4b23      	ldr	r3, [pc, #140]	; (80176bc <__ieee754_powf+0x4c0>)
 8017630:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8017634:	f7e9 fab8 	bl	8000ba8 <__addsf3>
 8017638:	9a05      	ldr	r2, [sp, #20]
 801763a:	4680      	mov	r8, r0
 801763c:	4610      	mov	r0, r2
 801763e:	f7e9 fb67 	bl	8000d10 <__aeabi_i2f>
 8017642:	4681      	mov	r9, r0
 8017644:	4b1e      	ldr	r3, [pc, #120]	; (80176c0 <__ieee754_powf+0x4c4>)
 8017646:	4641      	mov	r1, r8
 8017648:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801764c:	4630      	mov	r0, r6
 801764e:	f7e9 faab 	bl	8000ba8 <__addsf3>
 8017652:	4639      	mov	r1, r7
 8017654:	f7e9 faa8 	bl	8000ba8 <__addsf3>
 8017658:	4649      	mov	r1, r9
 801765a:	f7e9 faa5 	bl	8000ba8 <__addsf3>
 801765e:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8017662:	f02a 0a0f 	bic.w	sl, sl, #15
 8017666:	4649      	mov	r1, r9
 8017668:	4650      	mov	r0, sl
 801766a:	f7e9 fa9b 	bl	8000ba4 <__aeabi_fsub>
 801766e:	4639      	mov	r1, r7
 8017670:	f7e9 fa98 	bl	8000ba4 <__aeabi_fsub>
 8017674:	4631      	mov	r1, r6
 8017676:	f7e9 fa95 	bl	8000ba4 <__aeabi_fsub>
 801767a:	4601      	mov	r1, r0
 801767c:	4640      	mov	r0, r8
 801767e:	e6a4      	b.n	80173ca <__ieee754_powf+0x1ce>
 8017680:	2200      	movs	r2, #0
 8017682:	e6fa      	b.n	801747a <__ieee754_powf+0x27e>
 8017684:	2701      	movs	r7, #1
 8017686:	e70a      	b.n	801749e <__ieee754_powf+0x2a2>
 8017688:	001cc471 	.word	0x001cc471
 801768c:	005db3d6 	.word	0x005db3d6
 8017690:	08019fc0 	.word	0x08019fc0
 8017694:	3e53f142 	.word	0x3e53f142
 8017698:	3e6c3255 	.word	0x3e6c3255
 801769c:	3e8ba305 	.word	0x3e8ba305
 80176a0:	3eaaaaab 	.word	0x3eaaaaab
 80176a4:	3edb6db7 	.word	0x3edb6db7
 80176a8:	3f19999a 	.word	0x3f19999a
 80176ac:	40400000 	.word	0x40400000
 80176b0:	3f763800 	.word	0x3f763800
 80176b4:	3f76384f 	.word	0x3f76384f
 80176b8:	369dc3a0 	.word	0x369dc3a0
 80176bc:	08019fd0 	.word	0x08019fd0
 80176c0:	08019fc8 	.word	0x08019fc8
 80176c4:	f040 80c0 	bne.w	8017848 <__ieee754_powf+0x64c>
 80176c8:	4966      	ldr	r1, [pc, #408]	; (8017864 <__ieee754_powf+0x668>)
 80176ca:	4630      	mov	r0, r6
 80176cc:	f7e9 fa6c 	bl	8000ba8 <__addsf3>
 80176d0:	4639      	mov	r1, r7
 80176d2:	4681      	mov	r9, r0
 80176d4:	4650      	mov	r0, sl
 80176d6:	f7e9 fa65 	bl	8000ba4 <__aeabi_fsub>
 80176da:	4601      	mov	r1, r0
 80176dc:	4648      	mov	r0, r9
 80176de:	f7e9 fd27 	bl	8001130 <__aeabi_fcmpgt>
 80176e2:	2800      	cmp	r0, #0
 80176e4:	f47f aea5 	bne.w	8017432 <__ieee754_powf+0x236>
 80176e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80176ec:	15e4      	asrs	r4, r4, #23
 80176ee:	3c7e      	subs	r4, #126	; 0x7e
 80176f0:	4123      	asrs	r3, r4
 80176f2:	4443      	add	r3, r8
 80176f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80176f8:	495b      	ldr	r1, [pc, #364]	; (8017868 <__ieee754_powf+0x66c>)
 80176fa:	3a7f      	subs	r2, #127	; 0x7f
 80176fc:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8017700:	4111      	asrs	r1, r2
 8017702:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8017706:	f1c2 0217 	rsb	r2, r2, #23
 801770a:	4114      	asrs	r4, r2
 801770c:	f1b8 0f00 	cmp.w	r8, #0
 8017710:	ea23 0101 	bic.w	r1, r3, r1
 8017714:	4638      	mov	r0, r7
 8017716:	bfb8      	it	lt
 8017718:	4264      	neglt	r4, r4
 801771a:	f7e9 fa43 	bl	8000ba4 <__aeabi_fsub>
 801771e:	4681      	mov	r9, r0
 8017720:	4631      	mov	r1, r6
 8017722:	4648      	mov	r0, r9
 8017724:	f7e9 fa40 	bl	8000ba8 <__addsf3>
 8017728:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 801772c:	f027 070f 	bic.w	r7, r7, #15
 8017730:	494e      	ldr	r1, [pc, #312]	; (801786c <__ieee754_powf+0x670>)
 8017732:	4638      	mov	r0, r7
 8017734:	f7e9 fb40 	bl	8000db8 <__aeabi_fmul>
 8017738:	4649      	mov	r1, r9
 801773a:	4680      	mov	r8, r0
 801773c:	4638      	mov	r0, r7
 801773e:	f7e9 fa31 	bl	8000ba4 <__aeabi_fsub>
 8017742:	4601      	mov	r1, r0
 8017744:	4630      	mov	r0, r6
 8017746:	f7e9 fa2d 	bl	8000ba4 <__aeabi_fsub>
 801774a:	4949      	ldr	r1, [pc, #292]	; (8017870 <__ieee754_powf+0x674>)
 801774c:	f7e9 fb34 	bl	8000db8 <__aeabi_fmul>
 8017750:	4948      	ldr	r1, [pc, #288]	; (8017874 <__ieee754_powf+0x678>)
 8017752:	4606      	mov	r6, r0
 8017754:	4638      	mov	r0, r7
 8017756:	f7e9 fb2f 	bl	8000db8 <__aeabi_fmul>
 801775a:	4601      	mov	r1, r0
 801775c:	4630      	mov	r0, r6
 801775e:	f7e9 fa23 	bl	8000ba8 <__addsf3>
 8017762:	4607      	mov	r7, r0
 8017764:	4601      	mov	r1, r0
 8017766:	4640      	mov	r0, r8
 8017768:	f7e9 fa1e 	bl	8000ba8 <__addsf3>
 801776c:	4641      	mov	r1, r8
 801776e:	4606      	mov	r6, r0
 8017770:	f7e9 fa18 	bl	8000ba4 <__aeabi_fsub>
 8017774:	4601      	mov	r1, r0
 8017776:	4638      	mov	r0, r7
 8017778:	f7e9 fa14 	bl	8000ba4 <__aeabi_fsub>
 801777c:	4631      	mov	r1, r6
 801777e:	4680      	mov	r8, r0
 8017780:	4630      	mov	r0, r6
 8017782:	f7e9 fb19 	bl	8000db8 <__aeabi_fmul>
 8017786:	4607      	mov	r7, r0
 8017788:	493b      	ldr	r1, [pc, #236]	; (8017878 <__ieee754_powf+0x67c>)
 801778a:	f7e9 fb15 	bl	8000db8 <__aeabi_fmul>
 801778e:	493b      	ldr	r1, [pc, #236]	; (801787c <__ieee754_powf+0x680>)
 8017790:	f7e9 fa08 	bl	8000ba4 <__aeabi_fsub>
 8017794:	4639      	mov	r1, r7
 8017796:	f7e9 fb0f 	bl	8000db8 <__aeabi_fmul>
 801779a:	4939      	ldr	r1, [pc, #228]	; (8017880 <__ieee754_powf+0x684>)
 801779c:	f7e9 fa04 	bl	8000ba8 <__addsf3>
 80177a0:	4639      	mov	r1, r7
 80177a2:	f7e9 fb09 	bl	8000db8 <__aeabi_fmul>
 80177a6:	4937      	ldr	r1, [pc, #220]	; (8017884 <__ieee754_powf+0x688>)
 80177a8:	f7e9 f9fc 	bl	8000ba4 <__aeabi_fsub>
 80177ac:	4639      	mov	r1, r7
 80177ae:	f7e9 fb03 	bl	8000db8 <__aeabi_fmul>
 80177b2:	4935      	ldr	r1, [pc, #212]	; (8017888 <__ieee754_powf+0x68c>)
 80177b4:	f7e9 f9f8 	bl	8000ba8 <__addsf3>
 80177b8:	4639      	mov	r1, r7
 80177ba:	f7e9 fafd 	bl	8000db8 <__aeabi_fmul>
 80177be:	4601      	mov	r1, r0
 80177c0:	4630      	mov	r0, r6
 80177c2:	f7e9 f9ef 	bl	8000ba4 <__aeabi_fsub>
 80177c6:	4607      	mov	r7, r0
 80177c8:	4601      	mov	r1, r0
 80177ca:	4630      	mov	r0, r6
 80177cc:	f7e9 faf4 	bl	8000db8 <__aeabi_fmul>
 80177d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80177d4:	4681      	mov	r9, r0
 80177d6:	4638      	mov	r0, r7
 80177d8:	f7e9 f9e4 	bl	8000ba4 <__aeabi_fsub>
 80177dc:	4601      	mov	r1, r0
 80177de:	4648      	mov	r0, r9
 80177e0:	f7e9 fb9e 	bl	8000f20 <__aeabi_fdiv>
 80177e4:	4641      	mov	r1, r8
 80177e6:	4607      	mov	r7, r0
 80177e8:	4630      	mov	r0, r6
 80177ea:	f7e9 fae5 	bl	8000db8 <__aeabi_fmul>
 80177ee:	4641      	mov	r1, r8
 80177f0:	f7e9 f9da 	bl	8000ba8 <__addsf3>
 80177f4:	4601      	mov	r1, r0
 80177f6:	4638      	mov	r0, r7
 80177f8:	f7e9 f9d4 	bl	8000ba4 <__aeabi_fsub>
 80177fc:	4631      	mov	r1, r6
 80177fe:	f7e9 f9d1 	bl	8000ba4 <__aeabi_fsub>
 8017802:	4601      	mov	r1, r0
 8017804:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017808:	f7e9 f9cc 	bl	8000ba4 <__aeabi_fsub>
 801780c:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8017810:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017814:	da1e      	bge.n	8017854 <__ieee754_powf+0x658>
 8017816:	4621      	mov	r1, r4
 8017818:	f001 ff00 	bl	801961c <scalbnf>
 801781c:	4629      	mov	r1, r5
 801781e:	e54a      	b.n	80172b6 <__ieee754_powf+0xba>
 8017820:	4b1a      	ldr	r3, [pc, #104]	; (801788c <__ieee754_powf+0x690>)
 8017822:	429c      	cmp	r4, r3
 8017824:	dd05      	ble.n	8017832 <__ieee754_powf+0x636>
 8017826:	491a      	ldr	r1, [pc, #104]	; (8017890 <__ieee754_powf+0x694>)
 8017828:	4628      	mov	r0, r5
 801782a:	f7e9 fac5 	bl	8000db8 <__aeabi_fmul>
 801782e:	4918      	ldr	r1, [pc, #96]	; (8017890 <__ieee754_powf+0x694>)
 8017830:	e541      	b.n	80172b6 <__ieee754_powf+0xba>
 8017832:	d109      	bne.n	8017848 <__ieee754_powf+0x64c>
 8017834:	4639      	mov	r1, r7
 8017836:	f7e9 f9b5 	bl	8000ba4 <__aeabi_fsub>
 801783a:	4631      	mov	r1, r6
 801783c:	f7e9 fc6e 	bl	800111c <__aeabi_fcmpge>
 8017840:	2800      	cmp	r0, #0
 8017842:	f43f af51 	beq.w	80176e8 <__ieee754_powf+0x4ec>
 8017846:	e7ee      	b.n	8017826 <__ieee754_powf+0x62a>
 8017848:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801784c:	f73f af4c 	bgt.w	80176e8 <__ieee754_powf+0x4ec>
 8017850:	2400      	movs	r4, #0
 8017852:	e765      	b.n	8017720 <__ieee754_powf+0x524>
 8017854:	4618      	mov	r0, r3
 8017856:	e7e1      	b.n	801781c <__ieee754_powf+0x620>
 8017858:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801785c:	e518      	b.n	8017290 <__ieee754_powf+0x94>
 801785e:	9901      	ldr	r1, [sp, #4]
 8017860:	e516      	b.n	8017290 <__ieee754_powf+0x94>
 8017862:	bf00      	nop
 8017864:	3338aa3c 	.word	0x3338aa3c
 8017868:	007fffff 	.word	0x007fffff
 801786c:	3f317200 	.word	0x3f317200
 8017870:	3f317218 	.word	0x3f317218
 8017874:	35bfbe8c 	.word	0x35bfbe8c
 8017878:	3331bb4c 	.word	0x3331bb4c
 801787c:	35ddea0e 	.word	0x35ddea0e
 8017880:	388ab355 	.word	0x388ab355
 8017884:	3b360b61 	.word	0x3b360b61
 8017888:	3e2aaaab 	.word	0x3e2aaaab
 801788c:	43160000 	.word	0x43160000
 8017890:	0da24260 	.word	0x0da24260

08017894 <__ieee754_rem_pio2f>:
 8017894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017898:	4a9d      	ldr	r2, [pc, #628]	; (8017b10 <__ieee754_rem_pio2f+0x27c>)
 801789a:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 801789e:	4295      	cmp	r5, r2
 80178a0:	b087      	sub	sp, #28
 80178a2:	460c      	mov	r4, r1
 80178a4:	4607      	mov	r7, r0
 80178a6:	dc04      	bgt.n	80178b2 <__ieee754_rem_pio2f+0x1e>
 80178a8:	2300      	movs	r3, #0
 80178aa:	6020      	str	r0, [r4, #0]
 80178ac:	604b      	str	r3, [r1, #4]
 80178ae:	2600      	movs	r6, #0
 80178b0:	e01a      	b.n	80178e8 <__ieee754_rem_pio2f+0x54>
 80178b2:	4a98      	ldr	r2, [pc, #608]	; (8017b14 <__ieee754_rem_pio2f+0x280>)
 80178b4:	4295      	cmp	r5, r2
 80178b6:	dc4b      	bgt.n	8017950 <__ieee754_rem_pio2f+0xbc>
 80178b8:	2800      	cmp	r0, #0
 80178ba:	f025 050f 	bic.w	r5, r5, #15
 80178be:	4996      	ldr	r1, [pc, #600]	; (8017b18 <__ieee754_rem_pio2f+0x284>)
 80178c0:	4e96      	ldr	r6, [pc, #600]	; (8017b1c <__ieee754_rem_pio2f+0x288>)
 80178c2:	dd23      	ble.n	801790c <__ieee754_rem_pio2f+0x78>
 80178c4:	f7e9 f96e 	bl	8000ba4 <__aeabi_fsub>
 80178c8:	42b5      	cmp	r5, r6
 80178ca:	4607      	mov	r7, r0
 80178cc:	d010      	beq.n	80178f0 <__ieee754_rem_pio2f+0x5c>
 80178ce:	4994      	ldr	r1, [pc, #592]	; (8017b20 <__ieee754_rem_pio2f+0x28c>)
 80178d0:	f7e9 f968 	bl	8000ba4 <__aeabi_fsub>
 80178d4:	4601      	mov	r1, r0
 80178d6:	6020      	str	r0, [r4, #0]
 80178d8:	4638      	mov	r0, r7
 80178da:	f7e9 f963 	bl	8000ba4 <__aeabi_fsub>
 80178de:	4990      	ldr	r1, [pc, #576]	; (8017b20 <__ieee754_rem_pio2f+0x28c>)
 80178e0:	f7e9 f960 	bl	8000ba4 <__aeabi_fsub>
 80178e4:	2601      	movs	r6, #1
 80178e6:	6060      	str	r0, [r4, #4]
 80178e8:	4630      	mov	r0, r6
 80178ea:	b007      	add	sp, #28
 80178ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178f0:	498c      	ldr	r1, [pc, #560]	; (8017b24 <__ieee754_rem_pio2f+0x290>)
 80178f2:	f7e9 f957 	bl	8000ba4 <__aeabi_fsub>
 80178f6:	498c      	ldr	r1, [pc, #560]	; (8017b28 <__ieee754_rem_pio2f+0x294>)
 80178f8:	4605      	mov	r5, r0
 80178fa:	f7e9 f953 	bl	8000ba4 <__aeabi_fsub>
 80178fe:	4601      	mov	r1, r0
 8017900:	6020      	str	r0, [r4, #0]
 8017902:	4628      	mov	r0, r5
 8017904:	f7e9 f94e 	bl	8000ba4 <__aeabi_fsub>
 8017908:	4987      	ldr	r1, [pc, #540]	; (8017b28 <__ieee754_rem_pio2f+0x294>)
 801790a:	e7e9      	b.n	80178e0 <__ieee754_rem_pio2f+0x4c>
 801790c:	f7e9 f94c 	bl	8000ba8 <__addsf3>
 8017910:	42b5      	cmp	r5, r6
 8017912:	4607      	mov	r7, r0
 8017914:	d00e      	beq.n	8017934 <__ieee754_rem_pio2f+0xa0>
 8017916:	4982      	ldr	r1, [pc, #520]	; (8017b20 <__ieee754_rem_pio2f+0x28c>)
 8017918:	f7e9 f946 	bl	8000ba8 <__addsf3>
 801791c:	4601      	mov	r1, r0
 801791e:	6020      	str	r0, [r4, #0]
 8017920:	4638      	mov	r0, r7
 8017922:	f7e9 f93f 	bl	8000ba4 <__aeabi_fsub>
 8017926:	497e      	ldr	r1, [pc, #504]	; (8017b20 <__ieee754_rem_pio2f+0x28c>)
 8017928:	f7e9 f93e 	bl	8000ba8 <__addsf3>
 801792c:	f04f 36ff 	mov.w	r6, #4294967295
 8017930:	6060      	str	r0, [r4, #4]
 8017932:	e7d9      	b.n	80178e8 <__ieee754_rem_pio2f+0x54>
 8017934:	497b      	ldr	r1, [pc, #492]	; (8017b24 <__ieee754_rem_pio2f+0x290>)
 8017936:	f7e9 f937 	bl	8000ba8 <__addsf3>
 801793a:	497b      	ldr	r1, [pc, #492]	; (8017b28 <__ieee754_rem_pio2f+0x294>)
 801793c:	4605      	mov	r5, r0
 801793e:	f7e9 f933 	bl	8000ba8 <__addsf3>
 8017942:	4601      	mov	r1, r0
 8017944:	6020      	str	r0, [r4, #0]
 8017946:	4628      	mov	r0, r5
 8017948:	f7e9 f92c 	bl	8000ba4 <__aeabi_fsub>
 801794c:	4976      	ldr	r1, [pc, #472]	; (8017b28 <__ieee754_rem_pio2f+0x294>)
 801794e:	e7eb      	b.n	8017928 <__ieee754_rem_pio2f+0x94>
 8017950:	4a76      	ldr	r2, [pc, #472]	; (8017b2c <__ieee754_rem_pio2f+0x298>)
 8017952:	4295      	cmp	r5, r2
 8017954:	f300 808c 	bgt.w	8017a70 <__ieee754_rem_pio2f+0x1dc>
 8017958:	f001 fdc4 	bl	80194e4 <fabsf>
 801795c:	4974      	ldr	r1, [pc, #464]	; (8017b30 <__ieee754_rem_pio2f+0x29c>)
 801795e:	4680      	mov	r8, r0
 8017960:	f7e9 fa2a 	bl	8000db8 <__aeabi_fmul>
 8017964:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017968:	f7e9 f91e 	bl	8000ba8 <__addsf3>
 801796c:	f7e9 fc00 	bl	8001170 <__aeabi_f2iz>
 8017970:	4606      	mov	r6, r0
 8017972:	f7e9 f9cd 	bl	8000d10 <__aeabi_i2f>
 8017976:	4968      	ldr	r1, [pc, #416]	; (8017b18 <__ieee754_rem_pio2f+0x284>)
 8017978:	4682      	mov	sl, r0
 801797a:	f7e9 fa1d 	bl	8000db8 <__aeabi_fmul>
 801797e:	4601      	mov	r1, r0
 8017980:	4640      	mov	r0, r8
 8017982:	f7e9 f90f 	bl	8000ba4 <__aeabi_fsub>
 8017986:	4966      	ldr	r1, [pc, #408]	; (8017b20 <__ieee754_rem_pio2f+0x28c>)
 8017988:	4680      	mov	r8, r0
 801798a:	4650      	mov	r0, sl
 801798c:	f7e9 fa14 	bl	8000db8 <__aeabi_fmul>
 8017990:	2e1f      	cmp	r6, #31
 8017992:	4681      	mov	r9, r0
 8017994:	dc0c      	bgt.n	80179b0 <__ieee754_rem_pio2f+0x11c>
 8017996:	4a67      	ldr	r2, [pc, #412]	; (8017b34 <__ieee754_rem_pio2f+0x2a0>)
 8017998:	1e71      	subs	r1, r6, #1
 801799a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801799e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80179a2:	4293      	cmp	r3, r2
 80179a4:	d004      	beq.n	80179b0 <__ieee754_rem_pio2f+0x11c>
 80179a6:	4649      	mov	r1, r9
 80179a8:	4640      	mov	r0, r8
 80179aa:	f7e9 f8fb 	bl	8000ba4 <__aeabi_fsub>
 80179ae:	e009      	b.n	80179c4 <__ieee754_rem_pio2f+0x130>
 80179b0:	4649      	mov	r1, r9
 80179b2:	4640      	mov	r0, r8
 80179b4:	f7e9 f8f6 	bl	8000ba4 <__aeabi_fsub>
 80179b8:	15ed      	asrs	r5, r5, #23
 80179ba:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80179be:	1aeb      	subs	r3, r5, r3
 80179c0:	2b08      	cmp	r3, #8
 80179c2:	dc01      	bgt.n	80179c8 <__ieee754_rem_pio2f+0x134>
 80179c4:	6020      	str	r0, [r4, #0]
 80179c6:	e024      	b.n	8017a12 <__ieee754_rem_pio2f+0x17e>
 80179c8:	4956      	ldr	r1, [pc, #344]	; (8017b24 <__ieee754_rem_pio2f+0x290>)
 80179ca:	4650      	mov	r0, sl
 80179cc:	f7e9 f9f4 	bl	8000db8 <__aeabi_fmul>
 80179d0:	4681      	mov	r9, r0
 80179d2:	4601      	mov	r1, r0
 80179d4:	4640      	mov	r0, r8
 80179d6:	f7e9 f8e5 	bl	8000ba4 <__aeabi_fsub>
 80179da:	4601      	mov	r1, r0
 80179dc:	4683      	mov	fp, r0
 80179de:	4640      	mov	r0, r8
 80179e0:	f7e9 f8e0 	bl	8000ba4 <__aeabi_fsub>
 80179e4:	4649      	mov	r1, r9
 80179e6:	f7e9 f8dd 	bl	8000ba4 <__aeabi_fsub>
 80179ea:	4680      	mov	r8, r0
 80179ec:	494e      	ldr	r1, [pc, #312]	; (8017b28 <__ieee754_rem_pio2f+0x294>)
 80179ee:	4650      	mov	r0, sl
 80179f0:	f7e9 f9e2 	bl	8000db8 <__aeabi_fmul>
 80179f4:	4641      	mov	r1, r8
 80179f6:	f7e9 f8d5 	bl	8000ba4 <__aeabi_fsub>
 80179fa:	4601      	mov	r1, r0
 80179fc:	4681      	mov	r9, r0
 80179fe:	4658      	mov	r0, fp
 8017a00:	f7e9 f8d0 	bl	8000ba4 <__aeabi_fsub>
 8017a04:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017a08:	1aed      	subs	r5, r5, r3
 8017a0a:	2d19      	cmp	r5, #25
 8017a0c:	dc15      	bgt.n	8017a3a <__ieee754_rem_pio2f+0x1a6>
 8017a0e:	46d8      	mov	r8, fp
 8017a10:	6020      	str	r0, [r4, #0]
 8017a12:	6825      	ldr	r5, [r4, #0]
 8017a14:	4640      	mov	r0, r8
 8017a16:	4629      	mov	r1, r5
 8017a18:	f7e9 f8c4 	bl	8000ba4 <__aeabi_fsub>
 8017a1c:	4649      	mov	r1, r9
 8017a1e:	f7e9 f8c1 	bl	8000ba4 <__aeabi_fsub>
 8017a22:	2f00      	cmp	r7, #0
 8017a24:	6060      	str	r0, [r4, #4]
 8017a26:	f6bf af5f 	bge.w	80178e8 <__ieee754_rem_pio2f+0x54>
 8017a2a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8017a2e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8017a32:	6025      	str	r5, [r4, #0]
 8017a34:	6060      	str	r0, [r4, #4]
 8017a36:	4276      	negs	r6, r6
 8017a38:	e756      	b.n	80178e8 <__ieee754_rem_pio2f+0x54>
 8017a3a:	493f      	ldr	r1, [pc, #252]	; (8017b38 <__ieee754_rem_pio2f+0x2a4>)
 8017a3c:	4650      	mov	r0, sl
 8017a3e:	f7e9 f9bb 	bl	8000db8 <__aeabi_fmul>
 8017a42:	4605      	mov	r5, r0
 8017a44:	4601      	mov	r1, r0
 8017a46:	4658      	mov	r0, fp
 8017a48:	f7e9 f8ac 	bl	8000ba4 <__aeabi_fsub>
 8017a4c:	4601      	mov	r1, r0
 8017a4e:	4680      	mov	r8, r0
 8017a50:	4658      	mov	r0, fp
 8017a52:	f7e9 f8a7 	bl	8000ba4 <__aeabi_fsub>
 8017a56:	4629      	mov	r1, r5
 8017a58:	f7e9 f8a4 	bl	8000ba4 <__aeabi_fsub>
 8017a5c:	4605      	mov	r5, r0
 8017a5e:	4937      	ldr	r1, [pc, #220]	; (8017b3c <__ieee754_rem_pio2f+0x2a8>)
 8017a60:	4650      	mov	r0, sl
 8017a62:	f7e9 f9a9 	bl	8000db8 <__aeabi_fmul>
 8017a66:	4629      	mov	r1, r5
 8017a68:	f7e9 f89c 	bl	8000ba4 <__aeabi_fsub>
 8017a6c:	4681      	mov	r9, r0
 8017a6e:	e79a      	b.n	80179a6 <__ieee754_rem_pio2f+0x112>
 8017a70:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8017a74:	db05      	blt.n	8017a82 <__ieee754_rem_pio2f+0x1ee>
 8017a76:	4601      	mov	r1, r0
 8017a78:	f7e9 f894 	bl	8000ba4 <__aeabi_fsub>
 8017a7c:	6060      	str	r0, [r4, #4]
 8017a7e:	6020      	str	r0, [r4, #0]
 8017a80:	e715      	b.n	80178ae <__ieee754_rem_pio2f+0x1a>
 8017a82:	15ee      	asrs	r6, r5, #23
 8017a84:	3e86      	subs	r6, #134	; 0x86
 8017a86:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8017a8a:	4628      	mov	r0, r5
 8017a8c:	f7e9 fb70 	bl	8001170 <__aeabi_f2iz>
 8017a90:	f7e9 f93e 	bl	8000d10 <__aeabi_i2f>
 8017a94:	4601      	mov	r1, r0
 8017a96:	9003      	str	r0, [sp, #12]
 8017a98:	4628      	mov	r0, r5
 8017a9a:	f7e9 f883 	bl	8000ba4 <__aeabi_fsub>
 8017a9e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8017aa2:	f7e9 f989 	bl	8000db8 <__aeabi_fmul>
 8017aa6:	4680      	mov	r8, r0
 8017aa8:	f7e9 fb62 	bl	8001170 <__aeabi_f2iz>
 8017aac:	f7e9 f930 	bl	8000d10 <__aeabi_i2f>
 8017ab0:	4601      	mov	r1, r0
 8017ab2:	9004      	str	r0, [sp, #16]
 8017ab4:	4605      	mov	r5, r0
 8017ab6:	4640      	mov	r0, r8
 8017ab8:	f7e9 f874 	bl	8000ba4 <__aeabi_fsub>
 8017abc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8017ac0:	f7e9 f97a 	bl	8000db8 <__aeabi_fmul>
 8017ac4:	2100      	movs	r1, #0
 8017ac6:	9005      	str	r0, [sp, #20]
 8017ac8:	f7e9 fb0a 	bl	80010e0 <__aeabi_fcmpeq>
 8017acc:	b1e8      	cbz	r0, 8017b0a <__ieee754_rem_pio2f+0x276>
 8017ace:	2100      	movs	r1, #0
 8017ad0:	4628      	mov	r0, r5
 8017ad2:	f7e9 fb05 	bl	80010e0 <__aeabi_fcmpeq>
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	bf14      	ite	ne
 8017ada:	2301      	movne	r3, #1
 8017adc:	2302      	moveq	r3, #2
 8017ade:	4a18      	ldr	r2, [pc, #96]	; (8017b40 <__ieee754_rem_pio2f+0x2ac>)
 8017ae0:	4621      	mov	r1, r4
 8017ae2:	9201      	str	r2, [sp, #4]
 8017ae4:	2202      	movs	r2, #2
 8017ae6:	a803      	add	r0, sp, #12
 8017ae8:	9200      	str	r2, [sp, #0]
 8017aea:	4632      	mov	r2, r6
 8017aec:	f000 fdbe 	bl	801866c <__kernel_rem_pio2f>
 8017af0:	2f00      	cmp	r7, #0
 8017af2:	4606      	mov	r6, r0
 8017af4:	f6bf aef8 	bge.w	80178e8 <__ieee754_rem_pio2f+0x54>
 8017af8:	6823      	ldr	r3, [r4, #0]
 8017afa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017afe:	6023      	str	r3, [r4, #0]
 8017b00:	6863      	ldr	r3, [r4, #4]
 8017b02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017b06:	6063      	str	r3, [r4, #4]
 8017b08:	e795      	b.n	8017a36 <__ieee754_rem_pio2f+0x1a2>
 8017b0a:	2303      	movs	r3, #3
 8017b0c:	e7e7      	b.n	8017ade <__ieee754_rem_pio2f+0x24a>
 8017b0e:	bf00      	nop
 8017b10:	3f490fd8 	.word	0x3f490fd8
 8017b14:	4016cbe3 	.word	0x4016cbe3
 8017b18:	3fc90f80 	.word	0x3fc90f80
 8017b1c:	3fc90fd0 	.word	0x3fc90fd0
 8017b20:	37354443 	.word	0x37354443
 8017b24:	37354400 	.word	0x37354400
 8017b28:	2e85a308 	.word	0x2e85a308
 8017b2c:	43490f80 	.word	0x43490f80
 8017b30:	3f22f984 	.word	0x3f22f984
 8017b34:	08019fd8 	.word	0x08019fd8
 8017b38:	2e85a300 	.word	0x2e85a300
 8017b3c:	248d3132 	.word	0x248d3132
 8017b40:	0801a058 	.word	0x0801a058

08017b44 <__ieee754_sqrtf>:
 8017b44:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8017b48:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017b4c:	b570      	push	{r4, r5, r6, lr}
 8017b4e:	4603      	mov	r3, r0
 8017b50:	4604      	mov	r4, r0
 8017b52:	d309      	bcc.n	8017b68 <__ieee754_sqrtf+0x24>
 8017b54:	4601      	mov	r1, r0
 8017b56:	f7e9 f92f 	bl	8000db8 <__aeabi_fmul>
 8017b5a:	4601      	mov	r1, r0
 8017b5c:	4620      	mov	r0, r4
 8017b5e:	f7e9 f823 	bl	8000ba8 <__addsf3>
 8017b62:	4604      	mov	r4, r0
 8017b64:	4620      	mov	r0, r4
 8017b66:	bd70      	pop	{r4, r5, r6, pc}
 8017b68:	2a00      	cmp	r2, #0
 8017b6a:	d0fb      	beq.n	8017b64 <__ieee754_sqrtf+0x20>
 8017b6c:	2800      	cmp	r0, #0
 8017b6e:	da06      	bge.n	8017b7e <__ieee754_sqrtf+0x3a>
 8017b70:	4601      	mov	r1, r0
 8017b72:	f7e9 f817 	bl	8000ba4 <__aeabi_fsub>
 8017b76:	4601      	mov	r1, r0
 8017b78:	f7e9 f9d2 	bl	8000f20 <__aeabi_fdiv>
 8017b7c:	e7f1      	b.n	8017b62 <__ieee754_sqrtf+0x1e>
 8017b7e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8017b82:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8017b86:	d32e      	bcc.n	8017be6 <__ieee754_sqrtf+0xa2>
 8017b88:	3c7f      	subs	r4, #127	; 0x7f
 8017b8a:	07e2      	lsls	r2, r4, #31
 8017b8c:	f04f 0200 	mov.w	r2, #0
 8017b90:	ea4f 0164 	mov.w	r1, r4, asr #1
 8017b94:	4616      	mov	r6, r2
 8017b96:	f04f 0419 	mov.w	r4, #25
 8017b9a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8017b9e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017ba2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017ba6:	bf48      	it	mi
 8017ba8:	005b      	lslmi	r3, r3, #1
 8017baa:	005b      	lsls	r3, r3, #1
 8017bac:	1835      	adds	r5, r6, r0
 8017bae:	429d      	cmp	r5, r3
 8017bb0:	bfde      	ittt	le
 8017bb2:	182e      	addle	r6, r5, r0
 8017bb4:	1b5b      	suble	r3, r3, r5
 8017bb6:	1812      	addle	r2, r2, r0
 8017bb8:	3c01      	subs	r4, #1
 8017bba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017bbe:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8017bc2:	d1f3      	bne.n	8017bac <__ieee754_sqrtf+0x68>
 8017bc4:	b113      	cbz	r3, 8017bcc <__ieee754_sqrtf+0x88>
 8017bc6:	3201      	adds	r2, #1
 8017bc8:	f022 0201 	bic.w	r2, r2, #1
 8017bcc:	1054      	asrs	r4, r2, #1
 8017bce:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8017bd2:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8017bd6:	e7c5      	b.n	8017b64 <__ieee754_sqrtf+0x20>
 8017bd8:	005b      	lsls	r3, r3, #1
 8017bda:	3201      	adds	r2, #1
 8017bdc:	0219      	lsls	r1, r3, #8
 8017bde:	d5fb      	bpl.n	8017bd8 <__ieee754_sqrtf+0x94>
 8017be0:	3a01      	subs	r2, #1
 8017be2:	1aa4      	subs	r4, r4, r2
 8017be4:	e7d0      	b.n	8017b88 <__ieee754_sqrtf+0x44>
 8017be6:	2200      	movs	r2, #0
 8017be8:	e7f8      	b.n	8017bdc <__ieee754_sqrtf+0x98>
 8017bea:	0000      	movs	r0, r0
 8017bec:	0000      	movs	r0, r0
	...

08017bf0 <__kernel_cos>:
 8017bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bf4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8017bf8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8017bfc:	4680      	mov	r8, r0
 8017bfe:	460f      	mov	r7, r1
 8017c00:	e9cd 2300 	strd	r2, r3, [sp]
 8017c04:	da04      	bge.n	8017c10 <__kernel_cos+0x20>
 8017c06:	f7e8 ff31 	bl	8000a6c <__aeabi_d2iz>
 8017c0a:	2800      	cmp	r0, #0
 8017c0c:	f000 8086 	beq.w	8017d1c <__kernel_cos+0x12c>
 8017c10:	4642      	mov	r2, r8
 8017c12:	463b      	mov	r3, r7
 8017c14:	4640      	mov	r0, r8
 8017c16:	4639      	mov	r1, r7
 8017c18:	f7e8 fc78 	bl	800050c <__aeabi_dmul>
 8017c1c:	2200      	movs	r2, #0
 8017c1e:	4b4e      	ldr	r3, [pc, #312]	; (8017d58 <__kernel_cos+0x168>)
 8017c20:	4604      	mov	r4, r0
 8017c22:	460d      	mov	r5, r1
 8017c24:	f7e8 fc72 	bl	800050c <__aeabi_dmul>
 8017c28:	a33f      	add	r3, pc, #252	; (adr r3, 8017d28 <__kernel_cos+0x138>)
 8017c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c2e:	4682      	mov	sl, r0
 8017c30:	468b      	mov	fp, r1
 8017c32:	4620      	mov	r0, r4
 8017c34:	4629      	mov	r1, r5
 8017c36:	f7e8 fc69 	bl	800050c <__aeabi_dmul>
 8017c3a:	a33d      	add	r3, pc, #244	; (adr r3, 8017d30 <__kernel_cos+0x140>)
 8017c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c40:	f7e8 faae 	bl	80001a0 <__adddf3>
 8017c44:	4622      	mov	r2, r4
 8017c46:	462b      	mov	r3, r5
 8017c48:	f7e8 fc60 	bl	800050c <__aeabi_dmul>
 8017c4c:	a33a      	add	r3, pc, #232	; (adr r3, 8017d38 <__kernel_cos+0x148>)
 8017c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c52:	f7e8 faa3 	bl	800019c <__aeabi_dsub>
 8017c56:	4622      	mov	r2, r4
 8017c58:	462b      	mov	r3, r5
 8017c5a:	f7e8 fc57 	bl	800050c <__aeabi_dmul>
 8017c5e:	a338      	add	r3, pc, #224	; (adr r3, 8017d40 <__kernel_cos+0x150>)
 8017c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c64:	f7e8 fa9c 	bl	80001a0 <__adddf3>
 8017c68:	4622      	mov	r2, r4
 8017c6a:	462b      	mov	r3, r5
 8017c6c:	f7e8 fc4e 	bl	800050c <__aeabi_dmul>
 8017c70:	a335      	add	r3, pc, #212	; (adr r3, 8017d48 <__kernel_cos+0x158>)
 8017c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c76:	f7e8 fa91 	bl	800019c <__aeabi_dsub>
 8017c7a:	4622      	mov	r2, r4
 8017c7c:	462b      	mov	r3, r5
 8017c7e:	f7e8 fc45 	bl	800050c <__aeabi_dmul>
 8017c82:	a333      	add	r3, pc, #204	; (adr r3, 8017d50 <__kernel_cos+0x160>)
 8017c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c88:	f7e8 fa8a 	bl	80001a0 <__adddf3>
 8017c8c:	4622      	mov	r2, r4
 8017c8e:	462b      	mov	r3, r5
 8017c90:	f7e8 fc3c 	bl	800050c <__aeabi_dmul>
 8017c94:	4622      	mov	r2, r4
 8017c96:	462b      	mov	r3, r5
 8017c98:	f7e8 fc38 	bl	800050c <__aeabi_dmul>
 8017c9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ca0:	4604      	mov	r4, r0
 8017ca2:	460d      	mov	r5, r1
 8017ca4:	4640      	mov	r0, r8
 8017ca6:	4639      	mov	r1, r7
 8017ca8:	f7e8 fc30 	bl	800050c <__aeabi_dmul>
 8017cac:	460b      	mov	r3, r1
 8017cae:	4602      	mov	r2, r0
 8017cb0:	4629      	mov	r1, r5
 8017cb2:	4620      	mov	r0, r4
 8017cb4:	f7e8 fa72 	bl	800019c <__aeabi_dsub>
 8017cb8:	4b28      	ldr	r3, [pc, #160]	; (8017d5c <__kernel_cos+0x16c>)
 8017cba:	4680      	mov	r8, r0
 8017cbc:	429e      	cmp	r6, r3
 8017cbe:	4689      	mov	r9, r1
 8017cc0:	dc0e      	bgt.n	8017ce0 <__kernel_cos+0xf0>
 8017cc2:	4602      	mov	r2, r0
 8017cc4:	460b      	mov	r3, r1
 8017cc6:	4650      	mov	r0, sl
 8017cc8:	4659      	mov	r1, fp
 8017cca:	f7e8 fa67 	bl	800019c <__aeabi_dsub>
 8017cce:	4602      	mov	r2, r0
 8017cd0:	2000      	movs	r0, #0
 8017cd2:	460b      	mov	r3, r1
 8017cd4:	4922      	ldr	r1, [pc, #136]	; (8017d60 <__kernel_cos+0x170>)
 8017cd6:	f7e8 fa61 	bl	800019c <__aeabi_dsub>
 8017cda:	b003      	add	sp, #12
 8017cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ce0:	2400      	movs	r4, #0
 8017ce2:	4b20      	ldr	r3, [pc, #128]	; (8017d64 <__kernel_cos+0x174>)
 8017ce4:	4622      	mov	r2, r4
 8017ce6:	429e      	cmp	r6, r3
 8017ce8:	bfcc      	ite	gt
 8017cea:	4d1f      	ldrgt	r5, [pc, #124]	; (8017d68 <__kernel_cos+0x178>)
 8017cec:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8017cf0:	462b      	mov	r3, r5
 8017cf2:	2000      	movs	r0, #0
 8017cf4:	491a      	ldr	r1, [pc, #104]	; (8017d60 <__kernel_cos+0x170>)
 8017cf6:	f7e8 fa51 	bl	800019c <__aeabi_dsub>
 8017cfa:	4622      	mov	r2, r4
 8017cfc:	4606      	mov	r6, r0
 8017cfe:	460f      	mov	r7, r1
 8017d00:	462b      	mov	r3, r5
 8017d02:	4650      	mov	r0, sl
 8017d04:	4659      	mov	r1, fp
 8017d06:	f7e8 fa49 	bl	800019c <__aeabi_dsub>
 8017d0a:	4642      	mov	r2, r8
 8017d0c:	464b      	mov	r3, r9
 8017d0e:	f7e8 fa45 	bl	800019c <__aeabi_dsub>
 8017d12:	4602      	mov	r2, r0
 8017d14:	460b      	mov	r3, r1
 8017d16:	4630      	mov	r0, r6
 8017d18:	4639      	mov	r1, r7
 8017d1a:	e7dc      	b.n	8017cd6 <__kernel_cos+0xe6>
 8017d1c:	2000      	movs	r0, #0
 8017d1e:	4910      	ldr	r1, [pc, #64]	; (8017d60 <__kernel_cos+0x170>)
 8017d20:	e7db      	b.n	8017cda <__kernel_cos+0xea>
 8017d22:	bf00      	nop
 8017d24:	f3af 8000 	nop.w
 8017d28:	be8838d4 	.word	0xbe8838d4
 8017d2c:	bda8fae9 	.word	0xbda8fae9
 8017d30:	bdb4b1c4 	.word	0xbdb4b1c4
 8017d34:	3e21ee9e 	.word	0x3e21ee9e
 8017d38:	809c52ad 	.word	0x809c52ad
 8017d3c:	3e927e4f 	.word	0x3e927e4f
 8017d40:	19cb1590 	.word	0x19cb1590
 8017d44:	3efa01a0 	.word	0x3efa01a0
 8017d48:	16c15177 	.word	0x16c15177
 8017d4c:	3f56c16c 	.word	0x3f56c16c
 8017d50:	5555554c 	.word	0x5555554c
 8017d54:	3fa55555 	.word	0x3fa55555
 8017d58:	3fe00000 	.word	0x3fe00000
 8017d5c:	3fd33332 	.word	0x3fd33332
 8017d60:	3ff00000 	.word	0x3ff00000
 8017d64:	3fe90000 	.word	0x3fe90000
 8017d68:	3fd20000 	.word	0x3fd20000

08017d6c <__kernel_rem_pio2>:
 8017d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d70:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8017d74:	9307      	str	r3, [sp, #28]
 8017d76:	9104      	str	r1, [sp, #16]
 8017d78:	4bbf      	ldr	r3, [pc, #764]	; (8018078 <__kernel_rem_pio2+0x30c>)
 8017d7a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8017d7c:	1ed4      	subs	r4, r2, #3
 8017d7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017d82:	2500      	movs	r5, #0
 8017d84:	9302      	str	r3, [sp, #8]
 8017d86:	9b07      	ldr	r3, [sp, #28]
 8017d88:	9008      	str	r0, [sp, #32]
 8017d8a:	3b01      	subs	r3, #1
 8017d8c:	9306      	str	r3, [sp, #24]
 8017d8e:	2318      	movs	r3, #24
 8017d90:	fb94 f4f3 	sdiv	r4, r4, r3
 8017d94:	f06f 0317 	mvn.w	r3, #23
 8017d98:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8017d9c:	fb04 3303 	mla	r3, r4, r3, r3
 8017da0:	eb03 0a02 	add.w	sl, r3, r2
 8017da4:	9a06      	ldr	r2, [sp, #24]
 8017da6:	9b02      	ldr	r3, [sp, #8]
 8017da8:	1aa7      	subs	r7, r4, r2
 8017daa:	eb03 0802 	add.w	r8, r3, r2
 8017dae:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8017db0:	2200      	movs	r2, #0
 8017db2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8017db6:	2300      	movs	r3, #0
 8017db8:	ae1e      	add	r6, sp, #120	; 0x78
 8017dba:	4545      	cmp	r5, r8
 8017dbc:	dd14      	ble.n	8017de8 <__kernel_rem_pio2+0x7c>
 8017dbe:	2600      	movs	r6, #0
 8017dc0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8017dc4:	9b02      	ldr	r3, [sp, #8]
 8017dc6:	429e      	cmp	r6, r3
 8017dc8:	dc39      	bgt.n	8017e3e <__kernel_rem_pio2+0xd2>
 8017dca:	9b08      	ldr	r3, [sp, #32]
 8017dcc:	f04f 0800 	mov.w	r8, #0
 8017dd0:	3b08      	subs	r3, #8
 8017dd2:	9300      	str	r3, [sp, #0]
 8017dd4:	9b07      	ldr	r3, [sp, #28]
 8017dd6:	f04f 0900 	mov.w	r9, #0
 8017dda:	199d      	adds	r5, r3, r6
 8017ddc:	ab20      	add	r3, sp, #128	; 0x80
 8017dde:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017de2:	9305      	str	r3, [sp, #20]
 8017de4:	2700      	movs	r7, #0
 8017de6:	e023      	b.n	8017e30 <__kernel_rem_pio2+0xc4>
 8017de8:	42ef      	cmn	r7, r5
 8017dea:	d40b      	bmi.n	8017e04 <__kernel_rem_pio2+0x98>
 8017dec:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8017df0:	e9cd 2300 	strd	r2, r3, [sp]
 8017df4:	f7e8 fb20 	bl	8000438 <__aeabi_i2d>
 8017df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017dfc:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8017e00:	3501      	adds	r5, #1
 8017e02:	e7da      	b.n	8017dba <__kernel_rem_pio2+0x4e>
 8017e04:	4610      	mov	r0, r2
 8017e06:	4619      	mov	r1, r3
 8017e08:	e7f8      	b.n	8017dfc <__kernel_rem_pio2+0x90>
 8017e0a:	9905      	ldr	r1, [sp, #20]
 8017e0c:	9d00      	ldr	r5, [sp, #0]
 8017e0e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8017e12:	9105      	str	r1, [sp, #20]
 8017e14:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8017e18:	9500      	str	r5, [sp, #0]
 8017e1a:	f7e8 fb77 	bl	800050c <__aeabi_dmul>
 8017e1e:	4602      	mov	r2, r0
 8017e20:	460b      	mov	r3, r1
 8017e22:	4640      	mov	r0, r8
 8017e24:	4649      	mov	r1, r9
 8017e26:	f7e8 f9bb 	bl	80001a0 <__adddf3>
 8017e2a:	4680      	mov	r8, r0
 8017e2c:	4689      	mov	r9, r1
 8017e2e:	3701      	adds	r7, #1
 8017e30:	9b06      	ldr	r3, [sp, #24]
 8017e32:	429f      	cmp	r7, r3
 8017e34:	dde9      	ble.n	8017e0a <__kernel_rem_pio2+0x9e>
 8017e36:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8017e3a:	3601      	adds	r6, #1
 8017e3c:	e7c2      	b.n	8017dc4 <__kernel_rem_pio2+0x58>
 8017e3e:	9b02      	ldr	r3, [sp, #8]
 8017e40:	aa0c      	add	r2, sp, #48	; 0x30
 8017e42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e48:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8017e4a:	9f02      	ldr	r7, [sp, #8]
 8017e4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8017e50:	930a      	str	r3, [sp, #40]	; 0x28
 8017e52:	2600      	movs	r6, #0
 8017e54:	ab98      	add	r3, sp, #608	; 0x260
 8017e56:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8017e5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017e5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017e62:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8017e66:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8017e6a:	ab98      	add	r3, sp, #608	; 0x260
 8017e6c:	445b      	add	r3, fp
 8017e6e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8017e72:	1bbb      	subs	r3, r7, r6
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	dc71      	bgt.n	8017f5c <__kernel_rem_pio2+0x1f0>
 8017e78:	4652      	mov	r2, sl
 8017e7a:	4640      	mov	r0, r8
 8017e7c:	4649      	mov	r1, r9
 8017e7e:	f001 f9b7 	bl	80191f0 <scalbn>
 8017e82:	2200      	movs	r2, #0
 8017e84:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8017e88:	4604      	mov	r4, r0
 8017e8a:	460d      	mov	r5, r1
 8017e8c:	f7e8 fb3e 	bl	800050c <__aeabi_dmul>
 8017e90:	f001 f896 	bl	8018fc0 <floor>
 8017e94:	2200      	movs	r2, #0
 8017e96:	4b79      	ldr	r3, [pc, #484]	; (801807c <__kernel_rem_pio2+0x310>)
 8017e98:	f7e8 fb38 	bl	800050c <__aeabi_dmul>
 8017e9c:	4602      	mov	r2, r0
 8017e9e:	460b      	mov	r3, r1
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	4629      	mov	r1, r5
 8017ea4:	f7e8 f97a 	bl	800019c <__aeabi_dsub>
 8017ea8:	460d      	mov	r5, r1
 8017eaa:	4604      	mov	r4, r0
 8017eac:	f7e8 fdde 	bl	8000a6c <__aeabi_d2iz>
 8017eb0:	9005      	str	r0, [sp, #20]
 8017eb2:	f7e8 fac1 	bl	8000438 <__aeabi_i2d>
 8017eb6:	4602      	mov	r2, r0
 8017eb8:	460b      	mov	r3, r1
 8017eba:	4620      	mov	r0, r4
 8017ebc:	4629      	mov	r1, r5
 8017ebe:	f7e8 f96d 	bl	800019c <__aeabi_dsub>
 8017ec2:	f1ba 0f00 	cmp.w	sl, #0
 8017ec6:	4680      	mov	r8, r0
 8017ec8:	4689      	mov	r9, r1
 8017eca:	dd6c      	ble.n	8017fa6 <__kernel_rem_pio2+0x23a>
 8017ecc:	1e7a      	subs	r2, r7, #1
 8017ece:	ab0c      	add	r3, sp, #48	; 0x30
 8017ed0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017ed4:	f1ca 0118 	rsb	r1, sl, #24
 8017ed8:	9c05      	ldr	r4, [sp, #20]
 8017eda:	fa40 f301 	asr.w	r3, r0, r1
 8017ede:	441c      	add	r4, r3
 8017ee0:	408b      	lsls	r3, r1
 8017ee2:	1ac0      	subs	r0, r0, r3
 8017ee4:	ab0c      	add	r3, sp, #48	; 0x30
 8017ee6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8017eea:	f1ca 0317 	rsb	r3, sl, #23
 8017eee:	9405      	str	r4, [sp, #20]
 8017ef0:	fa40 f303 	asr.w	r3, r0, r3
 8017ef4:	9300      	str	r3, [sp, #0]
 8017ef6:	9b00      	ldr	r3, [sp, #0]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	dd62      	ble.n	8017fc2 <__kernel_rem_pio2+0x256>
 8017efc:	2200      	movs	r2, #0
 8017efe:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8017f02:	4614      	mov	r4, r2
 8017f04:	9b05      	ldr	r3, [sp, #20]
 8017f06:	3301      	adds	r3, #1
 8017f08:	9305      	str	r3, [sp, #20]
 8017f0a:	4297      	cmp	r7, r2
 8017f0c:	f300 809f 	bgt.w	801804e <__kernel_rem_pio2+0x2e2>
 8017f10:	f1ba 0f00 	cmp.w	sl, #0
 8017f14:	dd07      	ble.n	8017f26 <__kernel_rem_pio2+0x1ba>
 8017f16:	f1ba 0f01 	cmp.w	sl, #1
 8017f1a:	f000 80bb 	beq.w	8018094 <__kernel_rem_pio2+0x328>
 8017f1e:	f1ba 0f02 	cmp.w	sl, #2
 8017f22:	f000 80c1 	beq.w	80180a8 <__kernel_rem_pio2+0x33c>
 8017f26:	9b00      	ldr	r3, [sp, #0]
 8017f28:	2b02      	cmp	r3, #2
 8017f2a:	d14a      	bne.n	8017fc2 <__kernel_rem_pio2+0x256>
 8017f2c:	4642      	mov	r2, r8
 8017f2e:	464b      	mov	r3, r9
 8017f30:	2000      	movs	r0, #0
 8017f32:	4953      	ldr	r1, [pc, #332]	; (8018080 <__kernel_rem_pio2+0x314>)
 8017f34:	f7e8 f932 	bl	800019c <__aeabi_dsub>
 8017f38:	4680      	mov	r8, r0
 8017f3a:	4689      	mov	r9, r1
 8017f3c:	2c00      	cmp	r4, #0
 8017f3e:	d040      	beq.n	8017fc2 <__kernel_rem_pio2+0x256>
 8017f40:	4652      	mov	r2, sl
 8017f42:	2000      	movs	r0, #0
 8017f44:	494e      	ldr	r1, [pc, #312]	; (8018080 <__kernel_rem_pio2+0x314>)
 8017f46:	f001 f953 	bl	80191f0 <scalbn>
 8017f4a:	4602      	mov	r2, r0
 8017f4c:	460b      	mov	r3, r1
 8017f4e:	4640      	mov	r0, r8
 8017f50:	4649      	mov	r1, r9
 8017f52:	f7e8 f923 	bl	800019c <__aeabi_dsub>
 8017f56:	4680      	mov	r8, r0
 8017f58:	4689      	mov	r9, r1
 8017f5a:	e032      	b.n	8017fc2 <__kernel_rem_pio2+0x256>
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	4b49      	ldr	r3, [pc, #292]	; (8018084 <__kernel_rem_pio2+0x318>)
 8017f60:	4640      	mov	r0, r8
 8017f62:	4649      	mov	r1, r9
 8017f64:	f7e8 fad2 	bl	800050c <__aeabi_dmul>
 8017f68:	f7e8 fd80 	bl	8000a6c <__aeabi_d2iz>
 8017f6c:	f7e8 fa64 	bl	8000438 <__aeabi_i2d>
 8017f70:	2200      	movs	r2, #0
 8017f72:	4b45      	ldr	r3, [pc, #276]	; (8018088 <__kernel_rem_pio2+0x31c>)
 8017f74:	e9cd 0100 	strd	r0, r1, [sp]
 8017f78:	f7e8 fac8 	bl	800050c <__aeabi_dmul>
 8017f7c:	4602      	mov	r2, r0
 8017f7e:	460b      	mov	r3, r1
 8017f80:	4640      	mov	r0, r8
 8017f82:	4649      	mov	r1, r9
 8017f84:	f7e8 f90a 	bl	800019c <__aeabi_dsub>
 8017f88:	f7e8 fd70 	bl	8000a6c <__aeabi_d2iz>
 8017f8c:	ab0c      	add	r3, sp, #48	; 0x30
 8017f8e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8017f92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017f96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f9a:	f7e8 f901 	bl	80001a0 <__adddf3>
 8017f9e:	3601      	adds	r6, #1
 8017fa0:	4680      	mov	r8, r0
 8017fa2:	4689      	mov	r9, r1
 8017fa4:	e765      	b.n	8017e72 <__kernel_rem_pio2+0x106>
 8017fa6:	d105      	bne.n	8017fb4 <__kernel_rem_pio2+0x248>
 8017fa8:	1e7b      	subs	r3, r7, #1
 8017faa:	aa0c      	add	r2, sp, #48	; 0x30
 8017fac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017fb0:	15c3      	asrs	r3, r0, #23
 8017fb2:	e79f      	b.n	8017ef4 <__kernel_rem_pio2+0x188>
 8017fb4:	2200      	movs	r2, #0
 8017fb6:	4b35      	ldr	r3, [pc, #212]	; (801808c <__kernel_rem_pio2+0x320>)
 8017fb8:	f7e8 fd2e 	bl	8000a18 <__aeabi_dcmpge>
 8017fbc:	2800      	cmp	r0, #0
 8017fbe:	d143      	bne.n	8018048 <__kernel_rem_pio2+0x2dc>
 8017fc0:	9000      	str	r0, [sp, #0]
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	4640      	mov	r0, r8
 8017fc8:	4649      	mov	r1, r9
 8017fca:	f7e8 fd07 	bl	80009dc <__aeabi_dcmpeq>
 8017fce:	2800      	cmp	r0, #0
 8017fd0:	f000 80c3 	beq.w	801815a <__kernel_rem_pio2+0x3ee>
 8017fd4:	1e7c      	subs	r4, r7, #1
 8017fd6:	4623      	mov	r3, r4
 8017fd8:	2200      	movs	r2, #0
 8017fda:	9902      	ldr	r1, [sp, #8]
 8017fdc:	428b      	cmp	r3, r1
 8017fde:	da6a      	bge.n	80180b6 <__kernel_rem_pio2+0x34a>
 8017fe0:	2a00      	cmp	r2, #0
 8017fe2:	f000 8084 	beq.w	80180ee <__kernel_rem_pio2+0x382>
 8017fe6:	ab0c      	add	r3, sp, #48	; 0x30
 8017fe8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017fec:	f1aa 0a18 	sub.w	sl, sl, #24
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	f000 80b0 	beq.w	8018156 <__kernel_rem_pio2+0x3ea>
 8017ff6:	4652      	mov	r2, sl
 8017ff8:	2000      	movs	r0, #0
 8017ffa:	4921      	ldr	r1, [pc, #132]	; (8018080 <__kernel_rem_pio2+0x314>)
 8017ffc:	f001 f8f8 	bl	80191f0 <scalbn>
 8018000:	4625      	mov	r5, r4
 8018002:	4606      	mov	r6, r0
 8018004:	460f      	mov	r7, r1
 8018006:	f04f 0a00 	mov.w	sl, #0
 801800a:	00e3      	lsls	r3, r4, #3
 801800c:	aa98      	add	r2, sp, #608	; 0x260
 801800e:	eb02 0803 	add.w	r8, r2, r3
 8018012:	f8df b070 	ldr.w	fp, [pc, #112]	; 8018084 <__kernel_rem_pio2+0x318>
 8018016:	9306      	str	r3, [sp, #24]
 8018018:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 801801c:	2d00      	cmp	r5, #0
 801801e:	f280 80d2 	bge.w	80181c6 <__kernel_rem_pio2+0x45a>
 8018022:	2500      	movs	r5, #0
 8018024:	9a06      	ldr	r2, [sp, #24]
 8018026:	ab98      	add	r3, sp, #608	; 0x260
 8018028:	189e      	adds	r6, r3, r2
 801802a:	3ea8      	subs	r6, #168	; 0xa8
 801802c:	1b63      	subs	r3, r4, r5
 801802e:	2b00      	cmp	r3, #0
 8018030:	f2c0 80f9 	blt.w	8018226 <__kernel_rem_pio2+0x4ba>
 8018034:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8018090 <__kernel_rem_pio2+0x324>
 8018038:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 801803c:	f04f 0a00 	mov.w	sl, #0
 8018040:	f04f 0b00 	mov.w	fp, #0
 8018044:	2700      	movs	r7, #0
 8018046:	e0e2      	b.n	801820e <__kernel_rem_pio2+0x4a2>
 8018048:	2302      	movs	r3, #2
 801804a:	9300      	str	r3, [sp, #0]
 801804c:	e756      	b.n	8017efc <__kernel_rem_pio2+0x190>
 801804e:	ab0c      	add	r3, sp, #48	; 0x30
 8018050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018054:	b94c      	cbnz	r4, 801806a <__kernel_rem_pio2+0x2fe>
 8018056:	b12b      	cbz	r3, 8018064 <__kernel_rem_pio2+0x2f8>
 8018058:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801805c:	a80c      	add	r0, sp, #48	; 0x30
 801805e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8018062:	2301      	movs	r3, #1
 8018064:	3201      	adds	r2, #1
 8018066:	461c      	mov	r4, r3
 8018068:	e74f      	b.n	8017f0a <__kernel_rem_pio2+0x19e>
 801806a:	1acb      	subs	r3, r1, r3
 801806c:	a80c      	add	r0, sp, #48	; 0x30
 801806e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8018072:	4623      	mov	r3, r4
 8018074:	e7f6      	b.n	8018064 <__kernel_rem_pio2+0x2f8>
 8018076:	bf00      	nop
 8018078:	0801a3b0 	.word	0x0801a3b0
 801807c:	40200000 	.word	0x40200000
 8018080:	3ff00000 	.word	0x3ff00000
 8018084:	3e700000 	.word	0x3e700000
 8018088:	41700000 	.word	0x41700000
 801808c:	3fe00000 	.word	0x3fe00000
 8018090:	0801a368 	.word	0x0801a368
 8018094:	1e7a      	subs	r2, r7, #1
 8018096:	ab0c      	add	r3, sp, #48	; 0x30
 8018098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801809c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80180a0:	a90c      	add	r1, sp, #48	; 0x30
 80180a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80180a6:	e73e      	b.n	8017f26 <__kernel_rem_pio2+0x1ba>
 80180a8:	1e7a      	subs	r2, r7, #1
 80180aa:	ab0c      	add	r3, sp, #48	; 0x30
 80180ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80180b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80180b4:	e7f4      	b.n	80180a0 <__kernel_rem_pio2+0x334>
 80180b6:	a90c      	add	r1, sp, #48	; 0x30
 80180b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80180bc:	3b01      	subs	r3, #1
 80180be:	430a      	orrs	r2, r1
 80180c0:	e78b      	b.n	8017fda <__kernel_rem_pio2+0x26e>
 80180c2:	3401      	adds	r4, #1
 80180c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80180c8:	2a00      	cmp	r2, #0
 80180ca:	d0fa      	beq.n	80180c2 <__kernel_rem_pio2+0x356>
 80180cc:	ab98      	add	r3, sp, #608	; 0x260
 80180ce:	449b      	add	fp, r3
 80180d0:	9b07      	ldr	r3, [sp, #28]
 80180d2:	1c7e      	adds	r6, r7, #1
 80180d4:	19dd      	adds	r5, r3, r7
 80180d6:	ab98      	add	r3, sp, #608	; 0x260
 80180d8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80180dc:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 80180e0:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 80180e4:	443c      	add	r4, r7
 80180e6:	42b4      	cmp	r4, r6
 80180e8:	da04      	bge.n	80180f4 <__kernel_rem_pio2+0x388>
 80180ea:	4627      	mov	r7, r4
 80180ec:	e6b1      	b.n	8017e52 <__kernel_rem_pio2+0xe6>
 80180ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180f0:	2401      	movs	r4, #1
 80180f2:	e7e7      	b.n	80180c4 <__kernel_rem_pio2+0x358>
 80180f4:	f105 0308 	add.w	r3, r5, #8
 80180f8:	9309      	str	r3, [sp, #36]	; 0x24
 80180fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180fc:	2700      	movs	r7, #0
 80180fe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018102:	f7e8 f999 	bl	8000438 <__aeabi_i2d>
 8018106:	f04f 0800 	mov.w	r8, #0
 801810a:	f04f 0900 	mov.w	r9, #0
 801810e:	9b08      	ldr	r3, [sp, #32]
 8018110:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8018114:	3b08      	subs	r3, #8
 8018116:	9300      	str	r3, [sp, #0]
 8018118:	f105 0310 	add.w	r3, r5, #16
 801811c:	9305      	str	r3, [sp, #20]
 801811e:	9b06      	ldr	r3, [sp, #24]
 8018120:	429f      	cmp	r7, r3
 8018122:	dd04      	ble.n	801812e <__kernel_rem_pio2+0x3c2>
 8018124:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8018128:	3601      	adds	r6, #1
 801812a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801812c:	e7db      	b.n	80180e6 <__kernel_rem_pio2+0x37a>
 801812e:	9905      	ldr	r1, [sp, #20]
 8018130:	9d00      	ldr	r5, [sp, #0]
 8018132:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8018136:	9105      	str	r1, [sp, #20]
 8018138:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 801813c:	9500      	str	r5, [sp, #0]
 801813e:	f7e8 f9e5 	bl	800050c <__aeabi_dmul>
 8018142:	4602      	mov	r2, r0
 8018144:	460b      	mov	r3, r1
 8018146:	4640      	mov	r0, r8
 8018148:	4649      	mov	r1, r9
 801814a:	f7e8 f829 	bl	80001a0 <__adddf3>
 801814e:	3701      	adds	r7, #1
 8018150:	4680      	mov	r8, r0
 8018152:	4689      	mov	r9, r1
 8018154:	e7e3      	b.n	801811e <__kernel_rem_pio2+0x3b2>
 8018156:	3c01      	subs	r4, #1
 8018158:	e745      	b.n	8017fe6 <__kernel_rem_pio2+0x27a>
 801815a:	f1ca 0200 	rsb	r2, sl, #0
 801815e:	4640      	mov	r0, r8
 8018160:	4649      	mov	r1, r9
 8018162:	f001 f845 	bl	80191f0 <scalbn>
 8018166:	2200      	movs	r2, #0
 8018168:	4ba3      	ldr	r3, [pc, #652]	; (80183f8 <__kernel_rem_pio2+0x68c>)
 801816a:	4604      	mov	r4, r0
 801816c:	460d      	mov	r5, r1
 801816e:	f7e8 fc53 	bl	8000a18 <__aeabi_dcmpge>
 8018172:	b1f8      	cbz	r0, 80181b4 <__kernel_rem_pio2+0x448>
 8018174:	2200      	movs	r2, #0
 8018176:	4ba1      	ldr	r3, [pc, #644]	; (80183fc <__kernel_rem_pio2+0x690>)
 8018178:	4620      	mov	r0, r4
 801817a:	4629      	mov	r1, r5
 801817c:	f7e8 f9c6 	bl	800050c <__aeabi_dmul>
 8018180:	f7e8 fc74 	bl	8000a6c <__aeabi_d2iz>
 8018184:	4606      	mov	r6, r0
 8018186:	f7e8 f957 	bl	8000438 <__aeabi_i2d>
 801818a:	2200      	movs	r2, #0
 801818c:	4b9a      	ldr	r3, [pc, #616]	; (80183f8 <__kernel_rem_pio2+0x68c>)
 801818e:	f7e8 f9bd 	bl	800050c <__aeabi_dmul>
 8018192:	460b      	mov	r3, r1
 8018194:	4602      	mov	r2, r0
 8018196:	4629      	mov	r1, r5
 8018198:	4620      	mov	r0, r4
 801819a:	f7e7 ffff 	bl	800019c <__aeabi_dsub>
 801819e:	f7e8 fc65 	bl	8000a6c <__aeabi_d2iz>
 80181a2:	1c7c      	adds	r4, r7, #1
 80181a4:	ab0c      	add	r3, sp, #48	; 0x30
 80181a6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80181aa:	f10a 0a18 	add.w	sl, sl, #24
 80181ae:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80181b2:	e720      	b.n	8017ff6 <__kernel_rem_pio2+0x28a>
 80181b4:	4620      	mov	r0, r4
 80181b6:	4629      	mov	r1, r5
 80181b8:	f7e8 fc58 	bl	8000a6c <__aeabi_d2iz>
 80181bc:	ab0c      	add	r3, sp, #48	; 0x30
 80181be:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80181c2:	463c      	mov	r4, r7
 80181c4:	e717      	b.n	8017ff6 <__kernel_rem_pio2+0x28a>
 80181c6:	ab0c      	add	r3, sp, #48	; 0x30
 80181c8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80181cc:	f7e8 f934 	bl	8000438 <__aeabi_i2d>
 80181d0:	4632      	mov	r2, r6
 80181d2:	463b      	mov	r3, r7
 80181d4:	f7e8 f99a 	bl	800050c <__aeabi_dmul>
 80181d8:	4652      	mov	r2, sl
 80181da:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80181de:	465b      	mov	r3, fp
 80181e0:	4630      	mov	r0, r6
 80181e2:	4639      	mov	r1, r7
 80181e4:	f7e8 f992 	bl	800050c <__aeabi_dmul>
 80181e8:	3d01      	subs	r5, #1
 80181ea:	4606      	mov	r6, r0
 80181ec:	460f      	mov	r7, r1
 80181ee:	e715      	b.n	801801c <__kernel_rem_pio2+0x2b0>
 80181f0:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80181f4:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80181f8:	f7e8 f988 	bl	800050c <__aeabi_dmul>
 80181fc:	4602      	mov	r2, r0
 80181fe:	460b      	mov	r3, r1
 8018200:	4650      	mov	r0, sl
 8018202:	4659      	mov	r1, fp
 8018204:	f7e7 ffcc 	bl	80001a0 <__adddf3>
 8018208:	4682      	mov	sl, r0
 801820a:	468b      	mov	fp, r1
 801820c:	3701      	adds	r7, #1
 801820e:	9b02      	ldr	r3, [sp, #8]
 8018210:	429f      	cmp	r7, r3
 8018212:	dc01      	bgt.n	8018218 <__kernel_rem_pio2+0x4ac>
 8018214:	42bd      	cmp	r5, r7
 8018216:	daeb      	bge.n	80181f0 <__kernel_rem_pio2+0x484>
 8018218:	ab48      	add	r3, sp, #288	; 0x120
 801821a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801821e:	e9c3 ab00 	strd	sl, fp, [r3]
 8018222:	3501      	adds	r5, #1
 8018224:	e702      	b.n	801802c <__kernel_rem_pio2+0x2c0>
 8018226:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8018228:	2b03      	cmp	r3, #3
 801822a:	d86c      	bhi.n	8018306 <__kernel_rem_pio2+0x59a>
 801822c:	e8df f003 	tbb	[pc, r3]
 8018230:	022f2f59 	.word	0x022f2f59
 8018234:	9a06      	ldr	r2, [sp, #24]
 8018236:	ab48      	add	r3, sp, #288	; 0x120
 8018238:	189d      	adds	r5, r3, r2
 801823a:	46aa      	mov	sl, r5
 801823c:	46a3      	mov	fp, r4
 801823e:	f1bb 0f00 	cmp.w	fp, #0
 8018242:	f300 8087 	bgt.w	8018354 <__kernel_rem_pio2+0x5e8>
 8018246:	46a2      	mov	sl, r4
 8018248:	f1ba 0f01 	cmp.w	sl, #1
 801824c:	f300 809f 	bgt.w	801838e <__kernel_rem_pio2+0x622>
 8018250:	2700      	movs	r7, #0
 8018252:	463e      	mov	r6, r7
 8018254:	9d06      	ldr	r5, [sp, #24]
 8018256:	ab48      	add	r3, sp, #288	; 0x120
 8018258:	3508      	adds	r5, #8
 801825a:	441d      	add	r5, r3
 801825c:	2c01      	cmp	r4, #1
 801825e:	f300 80b3 	bgt.w	80183c8 <__kernel_rem_pio2+0x65c>
 8018262:	9b00      	ldr	r3, [sp, #0]
 8018264:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8018266:	9849      	ldr	r0, [sp, #292]	; 0x124
 8018268:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 801826a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 801826c:	2b00      	cmp	r3, #0
 801826e:	f040 80b5 	bne.w	80183dc <__kernel_rem_pio2+0x670>
 8018272:	4603      	mov	r3, r0
 8018274:	462a      	mov	r2, r5
 8018276:	9804      	ldr	r0, [sp, #16]
 8018278:	e9c0 2300 	strd	r2, r3, [r0]
 801827c:	4622      	mov	r2, r4
 801827e:	460b      	mov	r3, r1
 8018280:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018284:	463a      	mov	r2, r7
 8018286:	4633      	mov	r3, r6
 8018288:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801828c:	e03b      	b.n	8018306 <__kernel_rem_pio2+0x59a>
 801828e:	f04f 0c00 	mov.w	ip, #0
 8018292:	4626      	mov	r6, r4
 8018294:	4667      	mov	r7, ip
 8018296:	9d06      	ldr	r5, [sp, #24]
 8018298:	ab48      	add	r3, sp, #288	; 0x120
 801829a:	3508      	adds	r5, #8
 801829c:	441d      	add	r5, r3
 801829e:	2e00      	cmp	r6, #0
 80182a0:	da42      	bge.n	8018328 <__kernel_rem_pio2+0x5bc>
 80182a2:	9b00      	ldr	r3, [sp, #0]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d049      	beq.n	801833c <__kernel_rem_pio2+0x5d0>
 80182a8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80182ac:	4662      	mov	r2, ip
 80182ae:	460b      	mov	r3, r1
 80182b0:	9904      	ldr	r1, [sp, #16]
 80182b2:	2601      	movs	r6, #1
 80182b4:	e9c1 2300 	strd	r2, r3, [r1]
 80182b8:	a948      	add	r1, sp, #288	; 0x120
 80182ba:	463b      	mov	r3, r7
 80182bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182c0:	f7e7 ff6c 	bl	800019c <__aeabi_dsub>
 80182c4:	4684      	mov	ip, r0
 80182c6:	460f      	mov	r7, r1
 80182c8:	ad48      	add	r5, sp, #288	; 0x120
 80182ca:	42b4      	cmp	r4, r6
 80182cc:	da38      	bge.n	8018340 <__kernel_rem_pio2+0x5d4>
 80182ce:	9b00      	ldr	r3, [sp, #0]
 80182d0:	b10b      	cbz	r3, 80182d6 <__kernel_rem_pio2+0x56a>
 80182d2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80182d6:	4662      	mov	r2, ip
 80182d8:	463b      	mov	r3, r7
 80182da:	9904      	ldr	r1, [sp, #16]
 80182dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80182e0:	e011      	b.n	8018306 <__kernel_rem_pio2+0x59a>
 80182e2:	2700      	movs	r7, #0
 80182e4:	463d      	mov	r5, r7
 80182e6:	9b06      	ldr	r3, [sp, #24]
 80182e8:	aa98      	add	r2, sp, #608	; 0x260
 80182ea:	4413      	add	r3, r2
 80182ec:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 80182f0:	2c00      	cmp	r4, #0
 80182f2:	da0f      	bge.n	8018314 <__kernel_rem_pio2+0x5a8>
 80182f4:	9b00      	ldr	r3, [sp, #0]
 80182f6:	b10b      	cbz	r3, 80182fc <__kernel_rem_pio2+0x590>
 80182f8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80182fc:	463a      	mov	r2, r7
 80182fe:	462b      	mov	r3, r5
 8018300:	9904      	ldr	r1, [sp, #16]
 8018302:	e9c1 2300 	strd	r2, r3, [r1]
 8018306:	9b05      	ldr	r3, [sp, #20]
 8018308:	f003 0007 	and.w	r0, r3, #7
 801830c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8018310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018314:	4638      	mov	r0, r7
 8018316:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801831a:	4629      	mov	r1, r5
 801831c:	f7e7 ff40 	bl	80001a0 <__adddf3>
 8018320:	3c01      	subs	r4, #1
 8018322:	4607      	mov	r7, r0
 8018324:	460d      	mov	r5, r1
 8018326:	e7e3      	b.n	80182f0 <__kernel_rem_pio2+0x584>
 8018328:	4660      	mov	r0, ip
 801832a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801832e:	4639      	mov	r1, r7
 8018330:	f7e7 ff36 	bl	80001a0 <__adddf3>
 8018334:	3e01      	subs	r6, #1
 8018336:	4684      	mov	ip, r0
 8018338:	460f      	mov	r7, r1
 801833a:	e7b0      	b.n	801829e <__kernel_rem_pio2+0x532>
 801833c:	4639      	mov	r1, r7
 801833e:	e7b5      	b.n	80182ac <__kernel_rem_pio2+0x540>
 8018340:	4660      	mov	r0, ip
 8018342:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8018346:	4639      	mov	r1, r7
 8018348:	f7e7 ff2a 	bl	80001a0 <__adddf3>
 801834c:	3601      	adds	r6, #1
 801834e:	4684      	mov	ip, r0
 8018350:	460f      	mov	r7, r1
 8018352:	e7ba      	b.n	80182ca <__kernel_rem_pio2+0x55e>
 8018354:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8018358:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 801835c:	4640      	mov	r0, r8
 801835e:	4649      	mov	r1, r9
 8018360:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018364:	f7e7 ff1c 	bl	80001a0 <__adddf3>
 8018368:	4602      	mov	r2, r0
 801836a:	460b      	mov	r3, r1
 801836c:	4606      	mov	r6, r0
 801836e:	460f      	mov	r7, r1
 8018370:	4640      	mov	r0, r8
 8018372:	4649      	mov	r1, r9
 8018374:	f7e7 ff12 	bl	800019c <__aeabi_dsub>
 8018378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801837c:	f7e7 ff10 	bl	80001a0 <__adddf3>
 8018380:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018384:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018388:	e9ca 6700 	strd	r6, r7, [sl]
 801838c:	e757      	b.n	801823e <__kernel_rem_pio2+0x4d2>
 801838e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 8018392:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8018396:	4630      	mov	r0, r6
 8018398:	4639      	mov	r1, r7
 801839a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801839e:	f7e7 feff 	bl	80001a0 <__adddf3>
 80183a2:	4602      	mov	r2, r0
 80183a4:	460b      	mov	r3, r1
 80183a6:	4680      	mov	r8, r0
 80183a8:	4689      	mov	r9, r1
 80183aa:	4630      	mov	r0, r6
 80183ac:	4639      	mov	r1, r7
 80183ae:	f7e7 fef5 	bl	800019c <__aeabi_dsub>
 80183b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80183b6:	f7e7 fef3 	bl	80001a0 <__adddf3>
 80183ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80183be:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80183c2:	e9c5 8900 	strd	r8, r9, [r5]
 80183c6:	e73f      	b.n	8018248 <__kernel_rem_pio2+0x4dc>
 80183c8:	4638      	mov	r0, r7
 80183ca:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80183ce:	4631      	mov	r1, r6
 80183d0:	f7e7 fee6 	bl	80001a0 <__adddf3>
 80183d4:	3c01      	subs	r4, #1
 80183d6:	4607      	mov	r7, r0
 80183d8:	460e      	mov	r6, r1
 80183da:	e73f      	b.n	801825c <__kernel_rem_pio2+0x4f0>
 80183dc:	9b04      	ldr	r3, [sp, #16]
 80183de:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80183e2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80183e6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80183ea:	601d      	str	r5, [r3, #0]
 80183ec:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80183f0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80183f4:	615e      	str	r6, [r3, #20]
 80183f6:	e786      	b.n	8018306 <__kernel_rem_pio2+0x59a>
 80183f8:	41700000 	.word	0x41700000
 80183fc:	3e700000 	.word	0x3e700000

08018400 <__kernel_sin>:
 8018400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018404:	b086      	sub	sp, #24
 8018406:	e9cd 2300 	strd	r2, r3, [sp]
 801840a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801840e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8018412:	4682      	mov	sl, r0
 8018414:	460c      	mov	r4, r1
 8018416:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018418:	da03      	bge.n	8018422 <__kernel_sin+0x22>
 801841a:	f7e8 fb27 	bl	8000a6c <__aeabi_d2iz>
 801841e:	2800      	cmp	r0, #0
 8018420:	d050      	beq.n	80184c4 <__kernel_sin+0xc4>
 8018422:	4652      	mov	r2, sl
 8018424:	4623      	mov	r3, r4
 8018426:	4650      	mov	r0, sl
 8018428:	4621      	mov	r1, r4
 801842a:	f7e8 f86f 	bl	800050c <__aeabi_dmul>
 801842e:	4606      	mov	r6, r0
 8018430:	460f      	mov	r7, r1
 8018432:	4602      	mov	r2, r0
 8018434:	460b      	mov	r3, r1
 8018436:	4650      	mov	r0, sl
 8018438:	4621      	mov	r1, r4
 801843a:	f7e8 f867 	bl	800050c <__aeabi_dmul>
 801843e:	a33e      	add	r3, pc, #248	; (adr r3, 8018538 <__kernel_sin+0x138>)
 8018440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018444:	4680      	mov	r8, r0
 8018446:	4689      	mov	r9, r1
 8018448:	4630      	mov	r0, r6
 801844a:	4639      	mov	r1, r7
 801844c:	f7e8 f85e 	bl	800050c <__aeabi_dmul>
 8018450:	a33b      	add	r3, pc, #236	; (adr r3, 8018540 <__kernel_sin+0x140>)
 8018452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018456:	f7e7 fea1 	bl	800019c <__aeabi_dsub>
 801845a:	4632      	mov	r2, r6
 801845c:	463b      	mov	r3, r7
 801845e:	f7e8 f855 	bl	800050c <__aeabi_dmul>
 8018462:	a339      	add	r3, pc, #228	; (adr r3, 8018548 <__kernel_sin+0x148>)
 8018464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018468:	f7e7 fe9a 	bl	80001a0 <__adddf3>
 801846c:	4632      	mov	r2, r6
 801846e:	463b      	mov	r3, r7
 8018470:	f7e8 f84c 	bl	800050c <__aeabi_dmul>
 8018474:	a336      	add	r3, pc, #216	; (adr r3, 8018550 <__kernel_sin+0x150>)
 8018476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801847a:	f7e7 fe8f 	bl	800019c <__aeabi_dsub>
 801847e:	4632      	mov	r2, r6
 8018480:	463b      	mov	r3, r7
 8018482:	f7e8 f843 	bl	800050c <__aeabi_dmul>
 8018486:	a334      	add	r3, pc, #208	; (adr r3, 8018558 <__kernel_sin+0x158>)
 8018488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801848c:	f7e7 fe88 	bl	80001a0 <__adddf3>
 8018490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018494:	b9dd      	cbnz	r5, 80184ce <__kernel_sin+0xce>
 8018496:	4602      	mov	r2, r0
 8018498:	460b      	mov	r3, r1
 801849a:	4630      	mov	r0, r6
 801849c:	4639      	mov	r1, r7
 801849e:	f7e8 f835 	bl	800050c <__aeabi_dmul>
 80184a2:	a32f      	add	r3, pc, #188	; (adr r3, 8018560 <__kernel_sin+0x160>)
 80184a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184a8:	f7e7 fe78 	bl	800019c <__aeabi_dsub>
 80184ac:	4642      	mov	r2, r8
 80184ae:	464b      	mov	r3, r9
 80184b0:	f7e8 f82c 	bl	800050c <__aeabi_dmul>
 80184b4:	4602      	mov	r2, r0
 80184b6:	460b      	mov	r3, r1
 80184b8:	4650      	mov	r0, sl
 80184ba:	4621      	mov	r1, r4
 80184bc:	f7e7 fe70 	bl	80001a0 <__adddf3>
 80184c0:	4682      	mov	sl, r0
 80184c2:	460c      	mov	r4, r1
 80184c4:	4650      	mov	r0, sl
 80184c6:	4621      	mov	r1, r4
 80184c8:	b006      	add	sp, #24
 80184ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184ce:	2200      	movs	r2, #0
 80184d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184d4:	4b24      	ldr	r3, [pc, #144]	; (8018568 <__kernel_sin+0x168>)
 80184d6:	f7e8 f819 	bl	800050c <__aeabi_dmul>
 80184da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80184de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80184e2:	4640      	mov	r0, r8
 80184e4:	4649      	mov	r1, r9
 80184e6:	f7e8 f811 	bl	800050c <__aeabi_dmul>
 80184ea:	4602      	mov	r2, r0
 80184ec:	460b      	mov	r3, r1
 80184ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80184f2:	f7e7 fe53 	bl	800019c <__aeabi_dsub>
 80184f6:	4632      	mov	r2, r6
 80184f8:	463b      	mov	r3, r7
 80184fa:	f7e8 f807 	bl	800050c <__aeabi_dmul>
 80184fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018502:	f7e7 fe4b 	bl	800019c <__aeabi_dsub>
 8018506:	a316      	add	r3, pc, #88	; (adr r3, 8018560 <__kernel_sin+0x160>)
 8018508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801850c:	4606      	mov	r6, r0
 801850e:	460f      	mov	r7, r1
 8018510:	4640      	mov	r0, r8
 8018512:	4649      	mov	r1, r9
 8018514:	f7e7 fffa 	bl	800050c <__aeabi_dmul>
 8018518:	4602      	mov	r2, r0
 801851a:	460b      	mov	r3, r1
 801851c:	4630      	mov	r0, r6
 801851e:	4639      	mov	r1, r7
 8018520:	f7e7 fe3e 	bl	80001a0 <__adddf3>
 8018524:	4602      	mov	r2, r0
 8018526:	460b      	mov	r3, r1
 8018528:	4650      	mov	r0, sl
 801852a:	4621      	mov	r1, r4
 801852c:	f7e7 fe36 	bl	800019c <__aeabi_dsub>
 8018530:	e7c6      	b.n	80184c0 <__kernel_sin+0xc0>
 8018532:	bf00      	nop
 8018534:	f3af 8000 	nop.w
 8018538:	5acfd57c 	.word	0x5acfd57c
 801853c:	3de5d93a 	.word	0x3de5d93a
 8018540:	8a2b9ceb 	.word	0x8a2b9ceb
 8018544:	3e5ae5e6 	.word	0x3e5ae5e6
 8018548:	57b1fe7d 	.word	0x57b1fe7d
 801854c:	3ec71de3 	.word	0x3ec71de3
 8018550:	19c161d5 	.word	0x19c161d5
 8018554:	3f2a01a0 	.word	0x3f2a01a0
 8018558:	1110f8a6 	.word	0x1110f8a6
 801855c:	3f811111 	.word	0x3f811111
 8018560:	55555549 	.word	0x55555549
 8018564:	3fc55555 	.word	0x3fc55555
 8018568:	3fe00000 	.word	0x3fe00000

0801856c <__kernel_cosf>:
 801856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018570:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8018574:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8018578:	4606      	mov	r6, r0
 801857a:	4688      	mov	r8, r1
 801857c:	da03      	bge.n	8018586 <__kernel_cosf+0x1a>
 801857e:	f7e8 fdf7 	bl	8001170 <__aeabi_f2iz>
 8018582:	2800      	cmp	r0, #0
 8018584:	d05c      	beq.n	8018640 <__kernel_cosf+0xd4>
 8018586:	4631      	mov	r1, r6
 8018588:	4630      	mov	r0, r6
 801858a:	f7e8 fc15 	bl	8000db8 <__aeabi_fmul>
 801858e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8018592:	4605      	mov	r5, r0
 8018594:	f7e8 fc10 	bl	8000db8 <__aeabi_fmul>
 8018598:	492b      	ldr	r1, [pc, #172]	; (8018648 <__kernel_cosf+0xdc>)
 801859a:	4607      	mov	r7, r0
 801859c:	4628      	mov	r0, r5
 801859e:	f7e8 fc0b 	bl	8000db8 <__aeabi_fmul>
 80185a2:	492a      	ldr	r1, [pc, #168]	; (801864c <__kernel_cosf+0xe0>)
 80185a4:	f7e8 fb00 	bl	8000ba8 <__addsf3>
 80185a8:	4629      	mov	r1, r5
 80185aa:	f7e8 fc05 	bl	8000db8 <__aeabi_fmul>
 80185ae:	4928      	ldr	r1, [pc, #160]	; (8018650 <__kernel_cosf+0xe4>)
 80185b0:	f7e8 faf8 	bl	8000ba4 <__aeabi_fsub>
 80185b4:	4629      	mov	r1, r5
 80185b6:	f7e8 fbff 	bl	8000db8 <__aeabi_fmul>
 80185ba:	4926      	ldr	r1, [pc, #152]	; (8018654 <__kernel_cosf+0xe8>)
 80185bc:	f7e8 faf4 	bl	8000ba8 <__addsf3>
 80185c0:	4629      	mov	r1, r5
 80185c2:	f7e8 fbf9 	bl	8000db8 <__aeabi_fmul>
 80185c6:	4924      	ldr	r1, [pc, #144]	; (8018658 <__kernel_cosf+0xec>)
 80185c8:	f7e8 faec 	bl	8000ba4 <__aeabi_fsub>
 80185cc:	4629      	mov	r1, r5
 80185ce:	f7e8 fbf3 	bl	8000db8 <__aeabi_fmul>
 80185d2:	4922      	ldr	r1, [pc, #136]	; (801865c <__kernel_cosf+0xf0>)
 80185d4:	f7e8 fae8 	bl	8000ba8 <__addsf3>
 80185d8:	4629      	mov	r1, r5
 80185da:	f7e8 fbed 	bl	8000db8 <__aeabi_fmul>
 80185de:	4629      	mov	r1, r5
 80185e0:	f7e8 fbea 	bl	8000db8 <__aeabi_fmul>
 80185e4:	4641      	mov	r1, r8
 80185e6:	4605      	mov	r5, r0
 80185e8:	4630      	mov	r0, r6
 80185ea:	f7e8 fbe5 	bl	8000db8 <__aeabi_fmul>
 80185ee:	4601      	mov	r1, r0
 80185f0:	4628      	mov	r0, r5
 80185f2:	f7e8 fad7 	bl	8000ba4 <__aeabi_fsub>
 80185f6:	4b1a      	ldr	r3, [pc, #104]	; (8018660 <__kernel_cosf+0xf4>)
 80185f8:	4605      	mov	r5, r0
 80185fa:	429c      	cmp	r4, r3
 80185fc:	dc0a      	bgt.n	8018614 <__kernel_cosf+0xa8>
 80185fe:	4601      	mov	r1, r0
 8018600:	4638      	mov	r0, r7
 8018602:	f7e8 facf 	bl	8000ba4 <__aeabi_fsub>
 8018606:	4601      	mov	r1, r0
 8018608:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801860c:	f7e8 faca 	bl	8000ba4 <__aeabi_fsub>
 8018610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018614:	4b13      	ldr	r3, [pc, #76]	; (8018664 <__kernel_cosf+0xf8>)
 8018616:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801861a:	429c      	cmp	r4, r3
 801861c:	bfcc      	ite	gt
 801861e:	4c12      	ldrgt	r4, [pc, #72]	; (8018668 <__kernel_cosf+0xfc>)
 8018620:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8018624:	4621      	mov	r1, r4
 8018626:	f7e8 fabd 	bl	8000ba4 <__aeabi_fsub>
 801862a:	4621      	mov	r1, r4
 801862c:	4606      	mov	r6, r0
 801862e:	4638      	mov	r0, r7
 8018630:	f7e8 fab8 	bl	8000ba4 <__aeabi_fsub>
 8018634:	4629      	mov	r1, r5
 8018636:	f7e8 fab5 	bl	8000ba4 <__aeabi_fsub>
 801863a:	4601      	mov	r1, r0
 801863c:	4630      	mov	r0, r6
 801863e:	e7e5      	b.n	801860c <__kernel_cosf+0xa0>
 8018640:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018644:	e7e4      	b.n	8018610 <__kernel_cosf+0xa4>
 8018646:	bf00      	nop
 8018648:	ad47d74e 	.word	0xad47d74e
 801864c:	310f74f6 	.word	0x310f74f6
 8018650:	3493f27c 	.word	0x3493f27c
 8018654:	37d00d01 	.word	0x37d00d01
 8018658:	3ab60b61 	.word	0x3ab60b61
 801865c:	3d2aaaab 	.word	0x3d2aaaab
 8018660:	3e999999 	.word	0x3e999999
 8018664:	3f480000 	.word	0x3f480000
 8018668:	3e900000 	.word	0x3e900000

0801866c <__kernel_rem_pio2f>:
 801866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018670:	b0d9      	sub	sp, #356	; 0x164
 8018672:	9304      	str	r3, [sp, #16]
 8018674:	9101      	str	r1, [sp, #4]
 8018676:	4bc3      	ldr	r3, [pc, #780]	; (8018984 <__kernel_rem_pio2f+0x318>)
 8018678:	9962      	ldr	r1, [sp, #392]	; 0x188
 801867a:	1ed4      	subs	r4, r2, #3
 801867c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018680:	2500      	movs	r5, #0
 8018682:	9302      	str	r3, [sp, #8]
 8018684:	9b04      	ldr	r3, [sp, #16]
 8018686:	f04f 0a00 	mov.w	sl, #0
 801868a:	3b01      	subs	r3, #1
 801868c:	9303      	str	r3, [sp, #12]
 801868e:	2308      	movs	r3, #8
 8018690:	fb94 f4f3 	sdiv	r4, r4, r3
 8018694:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8018698:	1c66      	adds	r6, r4, #1
 801869a:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 801869e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80186a2:	eb03 0802 	add.w	r8, r3, r2
 80186a6:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80186a8:	1aa7      	subs	r7, r4, r2
 80186aa:	9005      	str	r0, [sp, #20]
 80186ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80186b0:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 80186b4:	4545      	cmp	r5, r8
 80186b6:	dd7f      	ble.n	80187b8 <__kernel_rem_pio2f+0x14c>
 80186b8:	f04f 0800 	mov.w	r8, #0
 80186bc:	f04f 0a00 	mov.w	sl, #0
 80186c0:	f06f 0b03 	mvn.w	fp, #3
 80186c4:	9b04      	ldr	r3, [sp, #16]
 80186c6:	aa1c      	add	r2, sp, #112	; 0x70
 80186c8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80186cc:	ab44      	add	r3, sp, #272	; 0x110
 80186ce:	9a02      	ldr	r2, [sp, #8]
 80186d0:	4590      	cmp	r8, r2
 80186d2:	f340 8097 	ble.w	8018804 <__kernel_rem_pio2f+0x198>
 80186d6:	4613      	mov	r3, r2
 80186d8:	aa08      	add	r2, sp, #32
 80186da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80186de:	9307      	str	r3, [sp, #28]
 80186e0:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80186e2:	9f02      	ldr	r7, [sp, #8]
 80186e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80186e8:	9306      	str	r3, [sp, #24]
 80186ea:	46ba      	mov	sl, r7
 80186ec:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 80186f0:	ab58      	add	r3, sp, #352	; 0x160
 80186f2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80186f6:	f853 4c50 	ldr.w	r4, [r3, #-80]
 80186fa:	ad07      	add	r5, sp, #28
 80186fc:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8018700:	f1ba 0f00 	cmp.w	sl, #0
 8018704:	f300 8081 	bgt.w	801880a <__kernel_rem_pio2f+0x19e>
 8018708:	4631      	mov	r1, r6
 801870a:	4620      	mov	r0, r4
 801870c:	f000 ff86 	bl	801961c <scalbnf>
 8018710:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8018714:	4604      	mov	r4, r0
 8018716:	f7e8 fb4f 	bl	8000db8 <__aeabi_fmul>
 801871a:	f000 feef 	bl	80194fc <floorf>
 801871e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8018722:	f7e8 fb49 	bl	8000db8 <__aeabi_fmul>
 8018726:	4601      	mov	r1, r0
 8018728:	4620      	mov	r0, r4
 801872a:	f7e8 fa3b 	bl	8000ba4 <__aeabi_fsub>
 801872e:	4604      	mov	r4, r0
 8018730:	f7e8 fd1e 	bl	8001170 <__aeabi_f2iz>
 8018734:	4681      	mov	r9, r0
 8018736:	f7e8 faeb 	bl	8000d10 <__aeabi_i2f>
 801873a:	4601      	mov	r1, r0
 801873c:	4620      	mov	r0, r4
 801873e:	f7e8 fa31 	bl	8000ba4 <__aeabi_fsub>
 8018742:	2e00      	cmp	r6, #0
 8018744:	4604      	mov	r4, r0
 8018746:	dd7e      	ble.n	8018846 <__kernel_rem_pio2f+0x1da>
 8018748:	1e7b      	subs	r3, r7, #1
 801874a:	aa08      	add	r2, sp, #32
 801874c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8018750:	f1c6 0208 	rsb	r2, r6, #8
 8018754:	fa45 f002 	asr.w	r0, r5, r2
 8018758:	4481      	add	r9, r0
 801875a:	4090      	lsls	r0, r2
 801875c:	1a2d      	subs	r5, r5, r0
 801875e:	aa08      	add	r2, sp, #32
 8018760:	f1c6 0007 	rsb	r0, r6, #7
 8018764:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8018768:	4105      	asrs	r5, r0
 801876a:	2d00      	cmp	r5, #0
 801876c:	dd79      	ble.n	8018862 <__kernel_rem_pio2f+0x1f6>
 801876e:	2200      	movs	r2, #0
 8018770:	4690      	mov	r8, r2
 8018772:	f109 0901 	add.w	r9, r9, #1
 8018776:	4297      	cmp	r7, r2
 8018778:	f300 80ae 	bgt.w	80188d8 <__kernel_rem_pio2f+0x26c>
 801877c:	2e00      	cmp	r6, #0
 801877e:	dd05      	ble.n	801878c <__kernel_rem_pio2f+0x120>
 8018780:	2e01      	cmp	r6, #1
 8018782:	f000 80c0 	beq.w	8018906 <__kernel_rem_pio2f+0x29a>
 8018786:	2e02      	cmp	r6, #2
 8018788:	f000 80c7 	beq.w	801891a <__kernel_rem_pio2f+0x2ae>
 801878c:	2d02      	cmp	r5, #2
 801878e:	d168      	bne.n	8018862 <__kernel_rem_pio2f+0x1f6>
 8018790:	4621      	mov	r1, r4
 8018792:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018796:	f7e8 fa05 	bl	8000ba4 <__aeabi_fsub>
 801879a:	4604      	mov	r4, r0
 801879c:	f1b8 0f00 	cmp.w	r8, #0
 80187a0:	d05f      	beq.n	8018862 <__kernel_rem_pio2f+0x1f6>
 80187a2:	4631      	mov	r1, r6
 80187a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80187a8:	f000 ff38 	bl	801961c <scalbnf>
 80187ac:	4601      	mov	r1, r0
 80187ae:	4620      	mov	r0, r4
 80187b0:	f7e8 f9f8 	bl	8000ba4 <__aeabi_fsub>
 80187b4:	4604      	mov	r4, r0
 80187b6:	e054      	b.n	8018862 <__kernel_rem_pio2f+0x1f6>
 80187b8:	42ef      	cmn	r7, r5
 80187ba:	d407      	bmi.n	80187cc <__kernel_rem_pio2f+0x160>
 80187bc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80187c0:	f7e8 faa6 	bl	8000d10 <__aeabi_i2f>
 80187c4:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 80187c8:	3501      	adds	r5, #1
 80187ca:	e773      	b.n	80186b4 <__kernel_rem_pio2f+0x48>
 80187cc:	4650      	mov	r0, sl
 80187ce:	e7f9      	b.n	80187c4 <__kernel_rem_pio2f+0x158>
 80187d0:	fb0b 5207 	mla	r2, fp, r7, r5
 80187d4:	9306      	str	r3, [sp, #24]
 80187d6:	9b05      	ldr	r3, [sp, #20]
 80187d8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80187dc:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80187e0:	f7e8 faea 	bl	8000db8 <__aeabi_fmul>
 80187e4:	4601      	mov	r1, r0
 80187e6:	4648      	mov	r0, r9
 80187e8:	f7e8 f9de 	bl	8000ba8 <__addsf3>
 80187ec:	4681      	mov	r9, r0
 80187ee:	9b06      	ldr	r3, [sp, #24]
 80187f0:	3701      	adds	r7, #1
 80187f2:	9a03      	ldr	r2, [sp, #12]
 80187f4:	4297      	cmp	r7, r2
 80187f6:	ddeb      	ble.n	80187d0 <__kernel_rem_pio2f+0x164>
 80187f8:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 80187fc:	3504      	adds	r5, #4
 80187fe:	f108 0801 	add.w	r8, r8, #1
 8018802:	e764      	b.n	80186ce <__kernel_rem_pio2f+0x62>
 8018804:	46d1      	mov	r9, sl
 8018806:	2700      	movs	r7, #0
 8018808:	e7f3      	b.n	80187f2 <__kernel_rem_pio2f+0x186>
 801880a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 801880e:	4620      	mov	r0, r4
 8018810:	f7e8 fad2 	bl	8000db8 <__aeabi_fmul>
 8018814:	f7e8 fcac 	bl	8001170 <__aeabi_f2iz>
 8018818:	f7e8 fa7a 	bl	8000d10 <__aeabi_i2f>
 801881c:	4641      	mov	r1, r8
 801881e:	4683      	mov	fp, r0
 8018820:	f7e8 faca 	bl	8000db8 <__aeabi_fmul>
 8018824:	4601      	mov	r1, r0
 8018826:	4620      	mov	r0, r4
 8018828:	f7e8 f9bc 	bl	8000ba4 <__aeabi_fsub>
 801882c:	f7e8 fca0 	bl	8001170 <__aeabi_f2iz>
 8018830:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018834:	f845 0f04 	str.w	r0, [r5, #4]!
 8018838:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 801883c:	4658      	mov	r0, fp
 801883e:	f7e8 f9b3 	bl	8000ba8 <__addsf3>
 8018842:	4604      	mov	r4, r0
 8018844:	e75c      	b.n	8018700 <__kernel_rem_pio2f+0x94>
 8018846:	d105      	bne.n	8018854 <__kernel_rem_pio2f+0x1e8>
 8018848:	1e7b      	subs	r3, r7, #1
 801884a:	aa08      	add	r2, sp, #32
 801884c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8018850:	122d      	asrs	r5, r5, #8
 8018852:	e78a      	b.n	801876a <__kernel_rem_pio2f+0xfe>
 8018854:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8018858:	f7e8 fc60 	bl	800111c <__aeabi_fcmpge>
 801885c:	2800      	cmp	r0, #0
 801885e:	d139      	bne.n	80188d4 <__kernel_rem_pio2f+0x268>
 8018860:	4605      	mov	r5, r0
 8018862:	2100      	movs	r1, #0
 8018864:	4620      	mov	r0, r4
 8018866:	f7e8 fc3b 	bl	80010e0 <__aeabi_fcmpeq>
 801886a:	2800      	cmp	r0, #0
 801886c:	f000 80a0 	beq.w	80189b0 <__kernel_rem_pio2f+0x344>
 8018870:	1e7c      	subs	r4, r7, #1
 8018872:	4623      	mov	r3, r4
 8018874:	2200      	movs	r2, #0
 8018876:	9902      	ldr	r1, [sp, #8]
 8018878:	428b      	cmp	r3, r1
 801887a:	da55      	bge.n	8018928 <__kernel_rem_pio2f+0x2bc>
 801887c:	2a00      	cmp	r2, #0
 801887e:	d07e      	beq.n	801897e <__kernel_rem_pio2f+0x312>
 8018880:	ab08      	add	r3, sp, #32
 8018882:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018886:	3e08      	subs	r6, #8
 8018888:	2b00      	cmp	r3, #0
 801888a:	f000 808f 	beq.w	80189ac <__kernel_rem_pio2f+0x340>
 801888e:	4631      	mov	r1, r6
 8018890:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018894:	f000 fec2 	bl	801961c <scalbnf>
 8018898:	46a0      	mov	r8, r4
 801889a:	4682      	mov	sl, r0
 801889c:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 80188a0:	af44      	add	r7, sp, #272	; 0x110
 80188a2:	f1b8 0f00 	cmp.w	r8, #0
 80188a6:	f280 80b5 	bge.w	8018a14 <__kernel_rem_pio2f+0x3a8>
 80188aa:	f04f 0a00 	mov.w	sl, #0
 80188ae:	2300      	movs	r3, #0
 80188b0:	00a6      	lsls	r6, r4, #2
 80188b2:	4a35      	ldr	r2, [pc, #212]	; (8018988 <__kernel_rem_pio2f+0x31c>)
 80188b4:	4437      	add	r7, r6
 80188b6:	eba4 010a 	sub.w	r1, r4, sl
 80188ba:	2900      	cmp	r1, #0
 80188bc:	f280 80db 	bge.w	8018a76 <__kernel_rem_pio2f+0x40a>
 80188c0:	9b62      	ldr	r3, [sp, #392]	; 0x188
 80188c2:	2b03      	cmp	r3, #3
 80188c4:	f200 80ff 	bhi.w	8018ac6 <__kernel_rem_pio2f+0x45a>
 80188c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80188cc:	01200102 	.word	0x01200102
 80188d0:	00d90120 	.word	0x00d90120
 80188d4:	2502      	movs	r5, #2
 80188d6:	e74a      	b.n	801876e <__kernel_rem_pio2f+0x102>
 80188d8:	ab08      	add	r3, sp, #32
 80188da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188de:	f1b8 0f00 	cmp.w	r8, #0
 80188e2:	d109      	bne.n	80188f8 <__kernel_rem_pio2f+0x28c>
 80188e4:	b12b      	cbz	r3, 80188f2 <__kernel_rem_pio2f+0x286>
 80188e6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80188ea:	a908      	add	r1, sp, #32
 80188ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80188f0:	2301      	movs	r3, #1
 80188f2:	3201      	adds	r2, #1
 80188f4:	4698      	mov	r8, r3
 80188f6:	e73e      	b.n	8018776 <__kernel_rem_pio2f+0x10a>
 80188f8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80188fc:	a908      	add	r1, sp, #32
 80188fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018902:	4643      	mov	r3, r8
 8018904:	e7f5      	b.n	80188f2 <__kernel_rem_pio2f+0x286>
 8018906:	1e7a      	subs	r2, r7, #1
 8018908:	ab08      	add	r3, sp, #32
 801890a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801890e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018912:	a908      	add	r1, sp, #32
 8018914:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018918:	e738      	b.n	801878c <__kernel_rem_pio2f+0x120>
 801891a:	1e7a      	subs	r2, r7, #1
 801891c:	ab08      	add	r3, sp, #32
 801891e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018926:	e7f4      	b.n	8018912 <__kernel_rem_pio2f+0x2a6>
 8018928:	a908      	add	r1, sp, #32
 801892a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801892e:	3b01      	subs	r3, #1
 8018930:	430a      	orrs	r2, r1
 8018932:	e7a0      	b.n	8018876 <__kernel_rem_pio2f+0x20a>
 8018934:	3301      	adds	r3, #1
 8018936:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801893a:	2900      	cmp	r1, #0
 801893c:	d0fa      	beq.n	8018934 <__kernel_rem_pio2f+0x2c8>
 801893e:	f06f 0803 	mvn.w	r8, #3
 8018942:	9a04      	ldr	r2, [sp, #16]
 8018944:	1c7d      	adds	r5, r7, #1
 8018946:	18bc      	adds	r4, r7, r2
 8018948:	aa1c      	add	r2, sp, #112	; 0x70
 801894a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801894e:	441f      	add	r7, r3
 8018950:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8018954:	42af      	cmp	r7, r5
 8018956:	f6ff aec8 	blt.w	80186ea <__kernel_rem_pio2f+0x7e>
 801895a:	9b06      	ldr	r3, [sp, #24]
 801895c:	f04f 0a00 	mov.w	sl, #0
 8018960:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018964:	f7e8 f9d4 	bl	8000d10 <__aeabi_i2f>
 8018968:	f04f 0b00 	mov.w	fp, #0
 801896c:	6020      	str	r0, [r4, #0]
 801896e:	9b03      	ldr	r3, [sp, #12]
 8018970:	459a      	cmp	sl, r3
 8018972:	dd0b      	ble.n	801898c <__kernel_rem_pio2f+0x320>
 8018974:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8018978:	3404      	adds	r4, #4
 801897a:	3501      	adds	r5, #1
 801897c:	e7ea      	b.n	8018954 <__kernel_rem_pio2f+0x2e8>
 801897e:	9a07      	ldr	r2, [sp, #28]
 8018980:	2301      	movs	r3, #1
 8018982:	e7d8      	b.n	8018936 <__kernel_rem_pio2f+0x2ca>
 8018984:	0801a3ec 	.word	0x0801a3ec
 8018988:	0801a3c0 	.word	0x0801a3c0
 801898c:	fb08 f30a 	mul.w	r3, r8, sl
 8018990:	9a05      	ldr	r2, [sp, #20]
 8018992:	58e0      	ldr	r0, [r4, r3]
 8018994:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8018998:	f7e8 fa0e 	bl	8000db8 <__aeabi_fmul>
 801899c:	4601      	mov	r1, r0
 801899e:	4658      	mov	r0, fp
 80189a0:	f7e8 f902 	bl	8000ba8 <__addsf3>
 80189a4:	f10a 0a01 	add.w	sl, sl, #1
 80189a8:	4683      	mov	fp, r0
 80189aa:	e7e0      	b.n	801896e <__kernel_rem_pio2f+0x302>
 80189ac:	3c01      	subs	r4, #1
 80189ae:	e767      	b.n	8018880 <__kernel_rem_pio2f+0x214>
 80189b0:	4271      	negs	r1, r6
 80189b2:	4620      	mov	r0, r4
 80189b4:	f000 fe32 	bl	801961c <scalbnf>
 80189b8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80189bc:	4604      	mov	r4, r0
 80189be:	f7e8 fbad 	bl	800111c <__aeabi_fcmpge>
 80189c2:	b1f8      	cbz	r0, 8018a04 <__kernel_rem_pio2f+0x398>
 80189c4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80189c8:	4620      	mov	r0, r4
 80189ca:	f7e8 f9f5 	bl	8000db8 <__aeabi_fmul>
 80189ce:	f7e8 fbcf 	bl	8001170 <__aeabi_f2iz>
 80189d2:	f7e8 f99d 	bl	8000d10 <__aeabi_i2f>
 80189d6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80189da:	4680      	mov	r8, r0
 80189dc:	f7e8 f9ec 	bl	8000db8 <__aeabi_fmul>
 80189e0:	4601      	mov	r1, r0
 80189e2:	4620      	mov	r0, r4
 80189e4:	f7e8 f8de 	bl	8000ba4 <__aeabi_fsub>
 80189e8:	f7e8 fbc2 	bl	8001170 <__aeabi_f2iz>
 80189ec:	ab08      	add	r3, sp, #32
 80189ee:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80189f2:	4640      	mov	r0, r8
 80189f4:	f7e8 fbbc 	bl	8001170 <__aeabi_f2iz>
 80189f8:	1c7c      	adds	r4, r7, #1
 80189fa:	ab08      	add	r3, sp, #32
 80189fc:	3608      	adds	r6, #8
 80189fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018a02:	e744      	b.n	801888e <__kernel_rem_pio2f+0x222>
 8018a04:	4620      	mov	r0, r4
 8018a06:	f7e8 fbb3 	bl	8001170 <__aeabi_f2iz>
 8018a0a:	ab08      	add	r3, sp, #32
 8018a0c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8018a10:	463c      	mov	r4, r7
 8018a12:	e73c      	b.n	801888e <__kernel_rem_pio2f+0x222>
 8018a14:	ab08      	add	r3, sp, #32
 8018a16:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018a1a:	f7e8 f979 	bl	8000d10 <__aeabi_i2f>
 8018a1e:	4651      	mov	r1, sl
 8018a20:	f7e8 f9ca 	bl	8000db8 <__aeabi_fmul>
 8018a24:	4631      	mov	r1, r6
 8018a26:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8018a2a:	4650      	mov	r0, sl
 8018a2c:	f7e8 f9c4 	bl	8000db8 <__aeabi_fmul>
 8018a30:	f108 38ff 	add.w	r8, r8, #4294967295
 8018a34:	4682      	mov	sl, r0
 8018a36:	e734      	b.n	80188a2 <__kernel_rem_pio2f+0x236>
 8018a38:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8018a3c:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8018a40:	9304      	str	r3, [sp, #16]
 8018a42:	9203      	str	r2, [sp, #12]
 8018a44:	f7e8 f9b8 	bl	8000db8 <__aeabi_fmul>
 8018a48:	4601      	mov	r1, r0
 8018a4a:	4658      	mov	r0, fp
 8018a4c:	f7e8 f8ac 	bl	8000ba8 <__addsf3>
 8018a50:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8018a54:	4683      	mov	fp, r0
 8018a56:	f108 0801 	add.w	r8, r8, #1
 8018a5a:	9902      	ldr	r1, [sp, #8]
 8018a5c:	4588      	cmp	r8, r1
 8018a5e:	dc01      	bgt.n	8018a64 <__kernel_rem_pio2f+0x3f8>
 8018a60:	45c2      	cmp	sl, r8
 8018a62:	dae9      	bge.n	8018a38 <__kernel_rem_pio2f+0x3cc>
 8018a64:	a958      	add	r1, sp, #352	; 0x160
 8018a66:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018a6a:	f841 bca0 	str.w	fp, [r1, #-160]
 8018a6e:	f10a 0a01 	add.w	sl, sl, #1
 8018a72:	3f04      	subs	r7, #4
 8018a74:	e71f      	b.n	80188b6 <__kernel_rem_pio2f+0x24a>
 8018a76:	469b      	mov	fp, r3
 8018a78:	f04f 0800 	mov.w	r8, #0
 8018a7c:	e7ed      	b.n	8018a5a <__kernel_rem_pio2f+0x3ee>
 8018a7e:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 8018a82:	4456      	add	r6, sl
 8018a84:	4637      	mov	r7, r6
 8018a86:	46a0      	mov	r8, r4
 8018a88:	f1b8 0f00 	cmp.w	r8, #0
 8018a8c:	dc4a      	bgt.n	8018b24 <__kernel_rem_pio2f+0x4b8>
 8018a8e:	4627      	mov	r7, r4
 8018a90:	2f01      	cmp	r7, #1
 8018a92:	dc60      	bgt.n	8018b56 <__kernel_rem_pio2f+0x4ea>
 8018a94:	2000      	movs	r0, #0
 8018a96:	2c01      	cmp	r4, #1
 8018a98:	dc74      	bgt.n	8018b84 <__kernel_rem_pio2f+0x518>
 8018a9a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8018a9c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018a9e:	2d00      	cmp	r5, #0
 8018aa0:	d176      	bne.n	8018b90 <__kernel_rem_pio2f+0x524>
 8018aa2:	9901      	ldr	r1, [sp, #4]
 8018aa4:	600a      	str	r2, [r1, #0]
 8018aa6:	460a      	mov	r2, r1
 8018aa8:	604b      	str	r3, [r1, #4]
 8018aaa:	6090      	str	r0, [r2, #8]
 8018aac:	e00b      	b.n	8018ac6 <__kernel_rem_pio2f+0x45a>
 8018aae:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8018ab2:	f7e8 f879 	bl	8000ba8 <__addsf3>
 8018ab6:	3c01      	subs	r4, #1
 8018ab8:	2c00      	cmp	r4, #0
 8018aba:	daf8      	bge.n	8018aae <__kernel_rem_pio2f+0x442>
 8018abc:	b10d      	cbz	r5, 8018ac2 <__kernel_rem_pio2f+0x456>
 8018abe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8018ac2:	9b01      	ldr	r3, [sp, #4]
 8018ac4:	6018      	str	r0, [r3, #0]
 8018ac6:	f009 0007 	and.w	r0, r9, #7
 8018aca:	b059      	add	sp, #356	; 0x164
 8018acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ad0:	2000      	movs	r0, #0
 8018ad2:	ae30      	add	r6, sp, #192	; 0xc0
 8018ad4:	e7f0      	b.n	8018ab8 <__kernel_rem_pio2f+0x44c>
 8018ad6:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8018ada:	f7e8 f865 	bl	8000ba8 <__addsf3>
 8018ade:	3e01      	subs	r6, #1
 8018ae0:	2e00      	cmp	r6, #0
 8018ae2:	daf8      	bge.n	8018ad6 <__kernel_rem_pio2f+0x46a>
 8018ae4:	b1b5      	cbz	r5, 8018b14 <__kernel_rem_pio2f+0x4a8>
 8018ae6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8018aea:	9a01      	ldr	r2, [sp, #4]
 8018aec:	af58      	add	r7, sp, #352	; 0x160
 8018aee:	4601      	mov	r1, r0
 8018af0:	6013      	str	r3, [r2, #0]
 8018af2:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8018af6:	f7e8 f855 	bl	8000ba4 <__aeabi_fsub>
 8018afa:	2601      	movs	r6, #1
 8018afc:	42b4      	cmp	r4, r6
 8018afe:	da0b      	bge.n	8018b18 <__kernel_rem_pio2f+0x4ac>
 8018b00:	b10d      	cbz	r5, 8018b06 <__kernel_rem_pio2f+0x49a>
 8018b02:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8018b06:	9b01      	ldr	r3, [sp, #4]
 8018b08:	6058      	str	r0, [r3, #4]
 8018b0a:	e7dc      	b.n	8018ac6 <__kernel_rem_pio2f+0x45a>
 8018b0c:	4626      	mov	r6, r4
 8018b0e:	2000      	movs	r0, #0
 8018b10:	af30      	add	r7, sp, #192	; 0xc0
 8018b12:	e7e5      	b.n	8018ae0 <__kernel_rem_pio2f+0x474>
 8018b14:	4603      	mov	r3, r0
 8018b16:	e7e8      	b.n	8018aea <__kernel_rem_pio2f+0x47e>
 8018b18:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8018b1c:	f7e8 f844 	bl	8000ba8 <__addsf3>
 8018b20:	3601      	adds	r6, #1
 8018b22:	e7eb      	b.n	8018afc <__kernel_rem_pio2f+0x490>
 8018b24:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8018b28:	f108 38ff 	add.w	r8, r8, #4294967295
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	4610      	mov	r0, r2
 8018b30:	4619      	mov	r1, r3
 8018b32:	9303      	str	r3, [sp, #12]
 8018b34:	9202      	str	r2, [sp, #8]
 8018b36:	f7e8 f837 	bl	8000ba8 <__addsf3>
 8018b3a:	9a02      	ldr	r2, [sp, #8]
 8018b3c:	4601      	mov	r1, r0
 8018b3e:	4683      	mov	fp, r0
 8018b40:	4610      	mov	r0, r2
 8018b42:	f7e8 f82f 	bl	8000ba4 <__aeabi_fsub>
 8018b46:	9b03      	ldr	r3, [sp, #12]
 8018b48:	4619      	mov	r1, r3
 8018b4a:	f7e8 f82d 	bl	8000ba8 <__addsf3>
 8018b4e:	f8c7 b000 	str.w	fp, [r7]
 8018b52:	6078      	str	r0, [r7, #4]
 8018b54:	e798      	b.n	8018a88 <__kernel_rem_pio2f+0x41c>
 8018b56:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8018b5a:	3f01      	subs	r7, #1
 8018b5c:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8018b60:	4618      	mov	r0, r3
 8018b62:	4659      	mov	r1, fp
 8018b64:	9302      	str	r3, [sp, #8]
 8018b66:	f7e8 f81f 	bl	8000ba8 <__addsf3>
 8018b6a:	9b02      	ldr	r3, [sp, #8]
 8018b6c:	4601      	mov	r1, r0
 8018b6e:	4680      	mov	r8, r0
 8018b70:	4618      	mov	r0, r3
 8018b72:	f7e8 f817 	bl	8000ba4 <__aeabi_fsub>
 8018b76:	4659      	mov	r1, fp
 8018b78:	f7e8 f816 	bl	8000ba8 <__addsf3>
 8018b7c:	f8c6 8000 	str.w	r8, [r6]
 8018b80:	6070      	str	r0, [r6, #4]
 8018b82:	e785      	b.n	8018a90 <__kernel_rem_pio2f+0x424>
 8018b84:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8018b88:	f7e8 f80e 	bl	8000ba8 <__addsf3>
 8018b8c:	3c01      	subs	r4, #1
 8018b8e:	e782      	b.n	8018a96 <__kernel_rem_pio2f+0x42a>
 8018b90:	9901      	ldr	r1, [sp, #4]
 8018b92:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8018b96:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018b9a:	600a      	str	r2, [r1, #0]
 8018b9c:	604b      	str	r3, [r1, #4]
 8018b9e:	460a      	mov	r2, r1
 8018ba0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8018ba4:	e781      	b.n	8018aaa <__kernel_rem_pio2f+0x43e>
 8018ba6:	bf00      	nop

08018ba8 <__kernel_sinf>:
 8018ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8018bb0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8018bb4:	4604      	mov	r4, r0
 8018bb6:	460f      	mov	r7, r1
 8018bb8:	4691      	mov	r9, r2
 8018bba:	da03      	bge.n	8018bc4 <__kernel_sinf+0x1c>
 8018bbc:	f7e8 fad8 	bl	8001170 <__aeabi_f2iz>
 8018bc0:	2800      	cmp	r0, #0
 8018bc2:	d035      	beq.n	8018c30 <__kernel_sinf+0x88>
 8018bc4:	4621      	mov	r1, r4
 8018bc6:	4620      	mov	r0, r4
 8018bc8:	f7e8 f8f6 	bl	8000db8 <__aeabi_fmul>
 8018bcc:	4605      	mov	r5, r0
 8018bce:	4601      	mov	r1, r0
 8018bd0:	4620      	mov	r0, r4
 8018bd2:	f7e8 f8f1 	bl	8000db8 <__aeabi_fmul>
 8018bd6:	4929      	ldr	r1, [pc, #164]	; (8018c7c <__kernel_sinf+0xd4>)
 8018bd8:	4606      	mov	r6, r0
 8018bda:	4628      	mov	r0, r5
 8018bdc:	f7e8 f8ec 	bl	8000db8 <__aeabi_fmul>
 8018be0:	4927      	ldr	r1, [pc, #156]	; (8018c80 <__kernel_sinf+0xd8>)
 8018be2:	f7e7 ffdf 	bl	8000ba4 <__aeabi_fsub>
 8018be6:	4629      	mov	r1, r5
 8018be8:	f7e8 f8e6 	bl	8000db8 <__aeabi_fmul>
 8018bec:	4925      	ldr	r1, [pc, #148]	; (8018c84 <__kernel_sinf+0xdc>)
 8018bee:	f7e7 ffdb 	bl	8000ba8 <__addsf3>
 8018bf2:	4629      	mov	r1, r5
 8018bf4:	f7e8 f8e0 	bl	8000db8 <__aeabi_fmul>
 8018bf8:	4923      	ldr	r1, [pc, #140]	; (8018c88 <__kernel_sinf+0xe0>)
 8018bfa:	f7e7 ffd3 	bl	8000ba4 <__aeabi_fsub>
 8018bfe:	4629      	mov	r1, r5
 8018c00:	f7e8 f8da 	bl	8000db8 <__aeabi_fmul>
 8018c04:	4921      	ldr	r1, [pc, #132]	; (8018c8c <__kernel_sinf+0xe4>)
 8018c06:	f7e7 ffcf 	bl	8000ba8 <__addsf3>
 8018c0a:	4680      	mov	r8, r0
 8018c0c:	f1b9 0f00 	cmp.w	r9, #0
 8018c10:	d111      	bne.n	8018c36 <__kernel_sinf+0x8e>
 8018c12:	4601      	mov	r1, r0
 8018c14:	4628      	mov	r0, r5
 8018c16:	f7e8 f8cf 	bl	8000db8 <__aeabi_fmul>
 8018c1a:	491d      	ldr	r1, [pc, #116]	; (8018c90 <__kernel_sinf+0xe8>)
 8018c1c:	f7e7 ffc2 	bl	8000ba4 <__aeabi_fsub>
 8018c20:	4631      	mov	r1, r6
 8018c22:	f7e8 f8c9 	bl	8000db8 <__aeabi_fmul>
 8018c26:	4601      	mov	r1, r0
 8018c28:	4620      	mov	r0, r4
 8018c2a:	f7e7 ffbd 	bl	8000ba8 <__addsf3>
 8018c2e:	4604      	mov	r4, r0
 8018c30:	4620      	mov	r0, r4
 8018c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c36:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8018c3a:	4638      	mov	r0, r7
 8018c3c:	f7e8 f8bc 	bl	8000db8 <__aeabi_fmul>
 8018c40:	4641      	mov	r1, r8
 8018c42:	4681      	mov	r9, r0
 8018c44:	4630      	mov	r0, r6
 8018c46:	f7e8 f8b7 	bl	8000db8 <__aeabi_fmul>
 8018c4a:	4601      	mov	r1, r0
 8018c4c:	4648      	mov	r0, r9
 8018c4e:	f7e7 ffa9 	bl	8000ba4 <__aeabi_fsub>
 8018c52:	4629      	mov	r1, r5
 8018c54:	f7e8 f8b0 	bl	8000db8 <__aeabi_fmul>
 8018c58:	4639      	mov	r1, r7
 8018c5a:	f7e7 ffa3 	bl	8000ba4 <__aeabi_fsub>
 8018c5e:	490c      	ldr	r1, [pc, #48]	; (8018c90 <__kernel_sinf+0xe8>)
 8018c60:	4605      	mov	r5, r0
 8018c62:	4630      	mov	r0, r6
 8018c64:	f7e8 f8a8 	bl	8000db8 <__aeabi_fmul>
 8018c68:	4601      	mov	r1, r0
 8018c6a:	4628      	mov	r0, r5
 8018c6c:	f7e7 ff9c 	bl	8000ba8 <__addsf3>
 8018c70:	4601      	mov	r1, r0
 8018c72:	4620      	mov	r0, r4
 8018c74:	f7e7 ff96 	bl	8000ba4 <__aeabi_fsub>
 8018c78:	e7d9      	b.n	8018c2e <__kernel_sinf+0x86>
 8018c7a:	bf00      	nop
 8018c7c:	2f2ec9d3 	.word	0x2f2ec9d3
 8018c80:	32d72f34 	.word	0x32d72f34
 8018c84:	3638ef1b 	.word	0x3638ef1b
 8018c88:	39500d01 	.word	0x39500d01
 8018c8c:	3c088889 	.word	0x3c088889
 8018c90:	3e2aaaab 	.word	0x3e2aaaab
 8018c94:	00000000 	.word	0x00000000

08018c98 <atan>:
 8018c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c9c:	4bb6      	ldr	r3, [pc, #728]	; (8018f78 <atan+0x2e0>)
 8018c9e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018ca2:	429e      	cmp	r6, r3
 8018ca4:	4604      	mov	r4, r0
 8018ca6:	460d      	mov	r5, r1
 8018ca8:	468b      	mov	fp, r1
 8018caa:	dd17      	ble.n	8018cdc <atan+0x44>
 8018cac:	4bb3      	ldr	r3, [pc, #716]	; (8018f7c <atan+0x2e4>)
 8018cae:	429e      	cmp	r6, r3
 8018cb0:	dc01      	bgt.n	8018cb6 <atan+0x1e>
 8018cb2:	d109      	bne.n	8018cc8 <atan+0x30>
 8018cb4:	b140      	cbz	r0, 8018cc8 <atan+0x30>
 8018cb6:	4622      	mov	r2, r4
 8018cb8:	462b      	mov	r3, r5
 8018cba:	4620      	mov	r0, r4
 8018cbc:	4629      	mov	r1, r5
 8018cbe:	f7e7 fa6f 	bl	80001a0 <__adddf3>
 8018cc2:	4604      	mov	r4, r0
 8018cc4:	460d      	mov	r5, r1
 8018cc6:	e005      	b.n	8018cd4 <atan+0x3c>
 8018cc8:	f1bb 0f00 	cmp.w	fp, #0
 8018ccc:	4cac      	ldr	r4, [pc, #688]	; (8018f80 <atan+0x2e8>)
 8018cce:	f340 8121 	ble.w	8018f14 <atan+0x27c>
 8018cd2:	4dac      	ldr	r5, [pc, #688]	; (8018f84 <atan+0x2ec>)
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	4629      	mov	r1, r5
 8018cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cdc:	4baa      	ldr	r3, [pc, #680]	; (8018f88 <atan+0x2f0>)
 8018cde:	429e      	cmp	r6, r3
 8018ce0:	dc11      	bgt.n	8018d06 <atan+0x6e>
 8018ce2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8018ce6:	429e      	cmp	r6, r3
 8018ce8:	dc0a      	bgt.n	8018d00 <atan+0x68>
 8018cea:	a38b      	add	r3, pc, #556	; (adr r3, 8018f18 <atan+0x280>)
 8018cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cf0:	f7e7 fa56 	bl	80001a0 <__adddf3>
 8018cf4:	2200      	movs	r2, #0
 8018cf6:	4ba5      	ldr	r3, [pc, #660]	; (8018f8c <atan+0x2f4>)
 8018cf8:	f7e7 fe98 	bl	8000a2c <__aeabi_dcmpgt>
 8018cfc:	2800      	cmp	r0, #0
 8018cfe:	d1e9      	bne.n	8018cd4 <atan+0x3c>
 8018d00:	f04f 3aff 	mov.w	sl, #4294967295
 8018d04:	e027      	b.n	8018d56 <atan+0xbe>
 8018d06:	f000 f951 	bl	8018fac <fabs>
 8018d0a:	4ba1      	ldr	r3, [pc, #644]	; (8018f90 <atan+0x2f8>)
 8018d0c:	4604      	mov	r4, r0
 8018d0e:	429e      	cmp	r6, r3
 8018d10:	460d      	mov	r5, r1
 8018d12:	f300 80b8 	bgt.w	8018e86 <atan+0x1ee>
 8018d16:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8018d1a:	429e      	cmp	r6, r3
 8018d1c:	f300 809c 	bgt.w	8018e58 <atan+0x1c0>
 8018d20:	4602      	mov	r2, r0
 8018d22:	460b      	mov	r3, r1
 8018d24:	f7e7 fa3c 	bl	80001a0 <__adddf3>
 8018d28:	2200      	movs	r2, #0
 8018d2a:	4b98      	ldr	r3, [pc, #608]	; (8018f8c <atan+0x2f4>)
 8018d2c:	f7e7 fa36 	bl	800019c <__aeabi_dsub>
 8018d30:	2200      	movs	r2, #0
 8018d32:	4606      	mov	r6, r0
 8018d34:	460f      	mov	r7, r1
 8018d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018d3a:	4620      	mov	r0, r4
 8018d3c:	4629      	mov	r1, r5
 8018d3e:	f7e7 fa2f 	bl	80001a0 <__adddf3>
 8018d42:	4602      	mov	r2, r0
 8018d44:	460b      	mov	r3, r1
 8018d46:	4630      	mov	r0, r6
 8018d48:	4639      	mov	r1, r7
 8018d4a:	f7e7 fd09 	bl	8000760 <__aeabi_ddiv>
 8018d4e:	f04f 0a00 	mov.w	sl, #0
 8018d52:	4604      	mov	r4, r0
 8018d54:	460d      	mov	r5, r1
 8018d56:	4622      	mov	r2, r4
 8018d58:	462b      	mov	r3, r5
 8018d5a:	4620      	mov	r0, r4
 8018d5c:	4629      	mov	r1, r5
 8018d5e:	f7e7 fbd5 	bl	800050c <__aeabi_dmul>
 8018d62:	4602      	mov	r2, r0
 8018d64:	460b      	mov	r3, r1
 8018d66:	4680      	mov	r8, r0
 8018d68:	4689      	mov	r9, r1
 8018d6a:	f7e7 fbcf 	bl	800050c <__aeabi_dmul>
 8018d6e:	a36c      	add	r3, pc, #432	; (adr r3, 8018f20 <atan+0x288>)
 8018d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d74:	4606      	mov	r6, r0
 8018d76:	460f      	mov	r7, r1
 8018d78:	f7e7 fbc8 	bl	800050c <__aeabi_dmul>
 8018d7c:	a36a      	add	r3, pc, #424	; (adr r3, 8018f28 <atan+0x290>)
 8018d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d82:	f7e7 fa0d 	bl	80001a0 <__adddf3>
 8018d86:	4632      	mov	r2, r6
 8018d88:	463b      	mov	r3, r7
 8018d8a:	f7e7 fbbf 	bl	800050c <__aeabi_dmul>
 8018d8e:	a368      	add	r3, pc, #416	; (adr r3, 8018f30 <atan+0x298>)
 8018d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d94:	f7e7 fa04 	bl	80001a0 <__adddf3>
 8018d98:	4632      	mov	r2, r6
 8018d9a:	463b      	mov	r3, r7
 8018d9c:	f7e7 fbb6 	bl	800050c <__aeabi_dmul>
 8018da0:	a365      	add	r3, pc, #404	; (adr r3, 8018f38 <atan+0x2a0>)
 8018da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da6:	f7e7 f9fb 	bl	80001a0 <__adddf3>
 8018daa:	4632      	mov	r2, r6
 8018dac:	463b      	mov	r3, r7
 8018dae:	f7e7 fbad 	bl	800050c <__aeabi_dmul>
 8018db2:	a363      	add	r3, pc, #396	; (adr r3, 8018f40 <atan+0x2a8>)
 8018db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018db8:	f7e7 f9f2 	bl	80001a0 <__adddf3>
 8018dbc:	4632      	mov	r2, r6
 8018dbe:	463b      	mov	r3, r7
 8018dc0:	f7e7 fba4 	bl	800050c <__aeabi_dmul>
 8018dc4:	a360      	add	r3, pc, #384	; (adr r3, 8018f48 <atan+0x2b0>)
 8018dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dca:	f7e7 f9e9 	bl	80001a0 <__adddf3>
 8018dce:	4642      	mov	r2, r8
 8018dd0:	464b      	mov	r3, r9
 8018dd2:	f7e7 fb9b 	bl	800050c <__aeabi_dmul>
 8018dd6:	a35e      	add	r3, pc, #376	; (adr r3, 8018f50 <atan+0x2b8>)
 8018dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ddc:	4680      	mov	r8, r0
 8018dde:	4689      	mov	r9, r1
 8018de0:	4630      	mov	r0, r6
 8018de2:	4639      	mov	r1, r7
 8018de4:	f7e7 fb92 	bl	800050c <__aeabi_dmul>
 8018de8:	a35b      	add	r3, pc, #364	; (adr r3, 8018f58 <atan+0x2c0>)
 8018dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dee:	f7e7 f9d5 	bl	800019c <__aeabi_dsub>
 8018df2:	4632      	mov	r2, r6
 8018df4:	463b      	mov	r3, r7
 8018df6:	f7e7 fb89 	bl	800050c <__aeabi_dmul>
 8018dfa:	a359      	add	r3, pc, #356	; (adr r3, 8018f60 <atan+0x2c8>)
 8018dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e00:	f7e7 f9cc 	bl	800019c <__aeabi_dsub>
 8018e04:	4632      	mov	r2, r6
 8018e06:	463b      	mov	r3, r7
 8018e08:	f7e7 fb80 	bl	800050c <__aeabi_dmul>
 8018e0c:	a356      	add	r3, pc, #344	; (adr r3, 8018f68 <atan+0x2d0>)
 8018e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e12:	f7e7 f9c3 	bl	800019c <__aeabi_dsub>
 8018e16:	4632      	mov	r2, r6
 8018e18:	463b      	mov	r3, r7
 8018e1a:	f7e7 fb77 	bl	800050c <__aeabi_dmul>
 8018e1e:	a354      	add	r3, pc, #336	; (adr r3, 8018f70 <atan+0x2d8>)
 8018e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e24:	f7e7 f9ba 	bl	800019c <__aeabi_dsub>
 8018e28:	4632      	mov	r2, r6
 8018e2a:	463b      	mov	r3, r7
 8018e2c:	f7e7 fb6e 	bl	800050c <__aeabi_dmul>
 8018e30:	4602      	mov	r2, r0
 8018e32:	460b      	mov	r3, r1
 8018e34:	4640      	mov	r0, r8
 8018e36:	4649      	mov	r1, r9
 8018e38:	f7e7 f9b2 	bl	80001a0 <__adddf3>
 8018e3c:	4622      	mov	r2, r4
 8018e3e:	462b      	mov	r3, r5
 8018e40:	f7e7 fb64 	bl	800050c <__aeabi_dmul>
 8018e44:	f1ba 3fff 	cmp.w	sl, #4294967295
 8018e48:	4602      	mov	r2, r0
 8018e4a:	460b      	mov	r3, r1
 8018e4c:	d144      	bne.n	8018ed8 <atan+0x240>
 8018e4e:	4620      	mov	r0, r4
 8018e50:	4629      	mov	r1, r5
 8018e52:	f7e7 f9a3 	bl	800019c <__aeabi_dsub>
 8018e56:	e734      	b.n	8018cc2 <atan+0x2a>
 8018e58:	2200      	movs	r2, #0
 8018e5a:	4b4c      	ldr	r3, [pc, #304]	; (8018f8c <atan+0x2f4>)
 8018e5c:	f7e7 f99e 	bl	800019c <__aeabi_dsub>
 8018e60:	2200      	movs	r2, #0
 8018e62:	4606      	mov	r6, r0
 8018e64:	460f      	mov	r7, r1
 8018e66:	4b49      	ldr	r3, [pc, #292]	; (8018f8c <atan+0x2f4>)
 8018e68:	4620      	mov	r0, r4
 8018e6a:	4629      	mov	r1, r5
 8018e6c:	f7e7 f998 	bl	80001a0 <__adddf3>
 8018e70:	4602      	mov	r2, r0
 8018e72:	460b      	mov	r3, r1
 8018e74:	4630      	mov	r0, r6
 8018e76:	4639      	mov	r1, r7
 8018e78:	f7e7 fc72 	bl	8000760 <__aeabi_ddiv>
 8018e7c:	f04f 0a01 	mov.w	sl, #1
 8018e80:	4604      	mov	r4, r0
 8018e82:	460d      	mov	r5, r1
 8018e84:	e767      	b.n	8018d56 <atan+0xbe>
 8018e86:	4b43      	ldr	r3, [pc, #268]	; (8018f94 <atan+0x2fc>)
 8018e88:	429e      	cmp	r6, r3
 8018e8a:	dc1a      	bgt.n	8018ec2 <atan+0x22a>
 8018e8c:	2200      	movs	r2, #0
 8018e8e:	4b42      	ldr	r3, [pc, #264]	; (8018f98 <atan+0x300>)
 8018e90:	f7e7 f984 	bl	800019c <__aeabi_dsub>
 8018e94:	2200      	movs	r2, #0
 8018e96:	4606      	mov	r6, r0
 8018e98:	460f      	mov	r7, r1
 8018e9a:	4b3f      	ldr	r3, [pc, #252]	; (8018f98 <atan+0x300>)
 8018e9c:	4620      	mov	r0, r4
 8018e9e:	4629      	mov	r1, r5
 8018ea0:	f7e7 fb34 	bl	800050c <__aeabi_dmul>
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	4b39      	ldr	r3, [pc, #228]	; (8018f8c <atan+0x2f4>)
 8018ea8:	f7e7 f97a 	bl	80001a0 <__adddf3>
 8018eac:	4602      	mov	r2, r0
 8018eae:	460b      	mov	r3, r1
 8018eb0:	4630      	mov	r0, r6
 8018eb2:	4639      	mov	r1, r7
 8018eb4:	f7e7 fc54 	bl	8000760 <__aeabi_ddiv>
 8018eb8:	f04f 0a02 	mov.w	sl, #2
 8018ebc:	4604      	mov	r4, r0
 8018ebe:	460d      	mov	r5, r1
 8018ec0:	e749      	b.n	8018d56 <atan+0xbe>
 8018ec2:	4602      	mov	r2, r0
 8018ec4:	460b      	mov	r3, r1
 8018ec6:	2000      	movs	r0, #0
 8018ec8:	4934      	ldr	r1, [pc, #208]	; (8018f9c <atan+0x304>)
 8018eca:	f7e7 fc49 	bl	8000760 <__aeabi_ddiv>
 8018ece:	f04f 0a03 	mov.w	sl, #3
 8018ed2:	4604      	mov	r4, r0
 8018ed4:	460d      	mov	r5, r1
 8018ed6:	e73e      	b.n	8018d56 <atan+0xbe>
 8018ed8:	4b31      	ldr	r3, [pc, #196]	; (8018fa0 <atan+0x308>)
 8018eda:	4e32      	ldr	r6, [pc, #200]	; (8018fa4 <atan+0x30c>)
 8018edc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8018ee0:	4456      	add	r6, sl
 8018ee2:	449a      	add	sl, r3
 8018ee4:	e9da 2300 	ldrd	r2, r3, [sl]
 8018ee8:	f7e7 f958 	bl	800019c <__aeabi_dsub>
 8018eec:	4622      	mov	r2, r4
 8018eee:	462b      	mov	r3, r5
 8018ef0:	f7e7 f954 	bl	800019c <__aeabi_dsub>
 8018ef4:	4602      	mov	r2, r0
 8018ef6:	460b      	mov	r3, r1
 8018ef8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8018efc:	f7e7 f94e 	bl	800019c <__aeabi_dsub>
 8018f00:	f1bb 0f00 	cmp.w	fp, #0
 8018f04:	4604      	mov	r4, r0
 8018f06:	460d      	mov	r5, r1
 8018f08:	f6bf aee4 	bge.w	8018cd4 <atan+0x3c>
 8018f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018f10:	461d      	mov	r5, r3
 8018f12:	e6df      	b.n	8018cd4 <atan+0x3c>
 8018f14:	4d24      	ldr	r5, [pc, #144]	; (8018fa8 <atan+0x310>)
 8018f16:	e6dd      	b.n	8018cd4 <atan+0x3c>
 8018f18:	8800759c 	.word	0x8800759c
 8018f1c:	7e37e43c 	.word	0x7e37e43c
 8018f20:	e322da11 	.word	0xe322da11
 8018f24:	3f90ad3a 	.word	0x3f90ad3a
 8018f28:	24760deb 	.word	0x24760deb
 8018f2c:	3fa97b4b 	.word	0x3fa97b4b
 8018f30:	a0d03d51 	.word	0xa0d03d51
 8018f34:	3fb10d66 	.word	0x3fb10d66
 8018f38:	c54c206e 	.word	0xc54c206e
 8018f3c:	3fb745cd 	.word	0x3fb745cd
 8018f40:	920083ff 	.word	0x920083ff
 8018f44:	3fc24924 	.word	0x3fc24924
 8018f48:	5555550d 	.word	0x5555550d
 8018f4c:	3fd55555 	.word	0x3fd55555
 8018f50:	2c6a6c2f 	.word	0x2c6a6c2f
 8018f54:	bfa2b444 	.word	0xbfa2b444
 8018f58:	52defd9a 	.word	0x52defd9a
 8018f5c:	3fadde2d 	.word	0x3fadde2d
 8018f60:	af749a6d 	.word	0xaf749a6d
 8018f64:	3fb3b0f2 	.word	0x3fb3b0f2
 8018f68:	fe231671 	.word	0xfe231671
 8018f6c:	3fbc71c6 	.word	0x3fbc71c6
 8018f70:	9998ebc4 	.word	0x9998ebc4
 8018f74:	3fc99999 	.word	0x3fc99999
 8018f78:	440fffff 	.word	0x440fffff
 8018f7c:	7ff00000 	.word	0x7ff00000
 8018f80:	54442d18 	.word	0x54442d18
 8018f84:	3ff921fb 	.word	0x3ff921fb
 8018f88:	3fdbffff 	.word	0x3fdbffff
 8018f8c:	3ff00000 	.word	0x3ff00000
 8018f90:	3ff2ffff 	.word	0x3ff2ffff
 8018f94:	40037fff 	.word	0x40037fff
 8018f98:	3ff80000 	.word	0x3ff80000
 8018f9c:	bff00000 	.word	0xbff00000
 8018fa0:	0801a418 	.word	0x0801a418
 8018fa4:	0801a3f8 	.word	0x0801a3f8
 8018fa8:	bff921fb 	.word	0xbff921fb

08018fac <fabs>:
 8018fac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	4770      	bx	lr

08018fb4 <finite>:
 8018fb4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8018fb8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8018fbc:	0fc0      	lsrs	r0, r0, #31
 8018fbe:	4770      	bx	lr

08018fc0 <floor>:
 8018fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fc4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8018fc8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8018fcc:	2e13      	cmp	r6, #19
 8018fce:	4607      	mov	r7, r0
 8018fd0:	460b      	mov	r3, r1
 8018fd2:	460c      	mov	r4, r1
 8018fd4:	4605      	mov	r5, r0
 8018fd6:	dc35      	bgt.n	8019044 <floor+0x84>
 8018fd8:	2e00      	cmp	r6, #0
 8018fda:	da16      	bge.n	801900a <floor+0x4a>
 8018fdc:	a336      	add	r3, pc, #216	; (adr r3, 80190b8 <floor+0xf8>)
 8018fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fe2:	f7e7 f8dd 	bl	80001a0 <__adddf3>
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	2300      	movs	r3, #0
 8018fea:	f7e7 fd1f 	bl	8000a2c <__aeabi_dcmpgt>
 8018fee:	b148      	cbz	r0, 8019004 <floor+0x44>
 8018ff0:	2c00      	cmp	r4, #0
 8018ff2:	da5b      	bge.n	80190ac <floor+0xec>
 8018ff4:	2500      	movs	r5, #0
 8018ff6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018ffa:	4a31      	ldr	r2, [pc, #196]	; (80190c0 <floor+0x100>)
 8018ffc:	433b      	orrs	r3, r7
 8018ffe:	42ab      	cmp	r3, r5
 8019000:	bf18      	it	ne
 8019002:	4614      	movne	r4, r2
 8019004:	4623      	mov	r3, r4
 8019006:	462f      	mov	r7, r5
 8019008:	e026      	b.n	8019058 <floor+0x98>
 801900a:	4a2e      	ldr	r2, [pc, #184]	; (80190c4 <floor+0x104>)
 801900c:	fa42 f806 	asr.w	r8, r2, r6
 8019010:	ea01 0208 	and.w	r2, r1, r8
 8019014:	4302      	orrs	r2, r0
 8019016:	d01f      	beq.n	8019058 <floor+0x98>
 8019018:	a327      	add	r3, pc, #156	; (adr r3, 80190b8 <floor+0xf8>)
 801901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801901e:	f7e7 f8bf 	bl	80001a0 <__adddf3>
 8019022:	2200      	movs	r2, #0
 8019024:	2300      	movs	r3, #0
 8019026:	f7e7 fd01 	bl	8000a2c <__aeabi_dcmpgt>
 801902a:	2800      	cmp	r0, #0
 801902c:	d0ea      	beq.n	8019004 <floor+0x44>
 801902e:	2c00      	cmp	r4, #0
 8019030:	bfbe      	ittt	lt
 8019032:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019036:	fa43 f606 	asrlt.w	r6, r3, r6
 801903a:	19a4      	addlt	r4, r4, r6
 801903c:	ea24 0408 	bic.w	r4, r4, r8
 8019040:	2500      	movs	r5, #0
 8019042:	e7df      	b.n	8019004 <floor+0x44>
 8019044:	2e33      	cmp	r6, #51	; 0x33
 8019046:	dd0b      	ble.n	8019060 <floor+0xa0>
 8019048:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801904c:	d104      	bne.n	8019058 <floor+0x98>
 801904e:	4602      	mov	r2, r0
 8019050:	f7e7 f8a6 	bl	80001a0 <__adddf3>
 8019054:	4607      	mov	r7, r0
 8019056:	460b      	mov	r3, r1
 8019058:	4638      	mov	r0, r7
 801905a:	4619      	mov	r1, r3
 801905c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019060:	f04f 32ff 	mov.w	r2, #4294967295
 8019064:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8019068:	fa22 f808 	lsr.w	r8, r2, r8
 801906c:	ea18 0f00 	tst.w	r8, r0
 8019070:	d0f2      	beq.n	8019058 <floor+0x98>
 8019072:	a311      	add	r3, pc, #68	; (adr r3, 80190b8 <floor+0xf8>)
 8019074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019078:	f7e7 f892 	bl	80001a0 <__adddf3>
 801907c:	2200      	movs	r2, #0
 801907e:	2300      	movs	r3, #0
 8019080:	f7e7 fcd4 	bl	8000a2c <__aeabi_dcmpgt>
 8019084:	2800      	cmp	r0, #0
 8019086:	d0bd      	beq.n	8019004 <floor+0x44>
 8019088:	2c00      	cmp	r4, #0
 801908a:	da02      	bge.n	8019092 <floor+0xd2>
 801908c:	2e14      	cmp	r6, #20
 801908e:	d103      	bne.n	8019098 <floor+0xd8>
 8019090:	3401      	adds	r4, #1
 8019092:	ea25 0508 	bic.w	r5, r5, r8
 8019096:	e7b5      	b.n	8019004 <floor+0x44>
 8019098:	2301      	movs	r3, #1
 801909a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801909e:	fa03 f606 	lsl.w	r6, r3, r6
 80190a2:	4435      	add	r5, r6
 80190a4:	42bd      	cmp	r5, r7
 80190a6:	bf38      	it	cc
 80190a8:	18e4      	addcc	r4, r4, r3
 80190aa:	e7f2      	b.n	8019092 <floor+0xd2>
 80190ac:	2500      	movs	r5, #0
 80190ae:	462c      	mov	r4, r5
 80190b0:	e7a8      	b.n	8019004 <floor+0x44>
 80190b2:	bf00      	nop
 80190b4:	f3af 8000 	nop.w
 80190b8:	8800759c 	.word	0x8800759c
 80190bc:	7e37e43c 	.word	0x7e37e43c
 80190c0:	bff00000 	.word	0xbff00000
 80190c4:	000fffff 	.word	0x000fffff

080190c8 <matherr>:
 80190c8:	2000      	movs	r0, #0
 80190ca:	4770      	bx	lr

080190cc <nan>:
 80190cc:	2000      	movs	r0, #0
 80190ce:	4901      	ldr	r1, [pc, #4]	; (80190d4 <nan+0x8>)
 80190d0:	4770      	bx	lr
 80190d2:	bf00      	nop
 80190d4:	7ff80000 	.word	0x7ff80000

080190d8 <rint>:
 80190d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80190de:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 80190e2:	f1bc 0f13 	cmp.w	ip, #19
 80190e6:	4604      	mov	r4, r0
 80190e8:	460d      	mov	r5, r1
 80190ea:	460b      	mov	r3, r1
 80190ec:	4606      	mov	r6, r0
 80190ee:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 80190f2:	dc5a      	bgt.n	80191aa <rint+0xd2>
 80190f4:	f1bc 0f00 	cmp.w	ip, #0
 80190f8:	da2b      	bge.n	8019152 <rint+0x7a>
 80190fa:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80190fe:	4302      	orrs	r2, r0
 8019100:	d023      	beq.n	801914a <rint+0x72>
 8019102:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8019106:	4302      	orrs	r2, r0
 8019108:	4256      	negs	r6, r2
 801910a:	4316      	orrs	r6, r2
 801910c:	0c4b      	lsrs	r3, r1, #17
 801910e:	0b36      	lsrs	r6, r6, #12
 8019110:	4934      	ldr	r1, [pc, #208]	; (80191e4 <rint+0x10c>)
 8019112:	045b      	lsls	r3, r3, #17
 8019114:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8019118:	ea46 0503 	orr.w	r5, r6, r3
 801911c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8019120:	4602      	mov	r2, r0
 8019122:	462b      	mov	r3, r5
 8019124:	e9d1 4500 	ldrd	r4, r5, [r1]
 8019128:	4620      	mov	r0, r4
 801912a:	4629      	mov	r1, r5
 801912c:	f7e7 f838 	bl	80001a0 <__adddf3>
 8019130:	e9cd 0100 	strd	r0, r1, [sp]
 8019134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019138:	462b      	mov	r3, r5
 801913a:	4622      	mov	r2, r4
 801913c:	f7e7 f82e 	bl	800019c <__aeabi_dsub>
 8019140:	4604      	mov	r4, r0
 8019142:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019146:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 801914a:	4620      	mov	r0, r4
 801914c:	4629      	mov	r1, r5
 801914e:	b003      	add	sp, #12
 8019150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019152:	4a25      	ldr	r2, [pc, #148]	; (80191e8 <rint+0x110>)
 8019154:	fa42 f20c 	asr.w	r2, r2, ip
 8019158:	4011      	ands	r1, r2
 801915a:	4301      	orrs	r1, r0
 801915c:	d0f5      	beq.n	801914a <rint+0x72>
 801915e:	0852      	lsrs	r2, r2, #1
 8019160:	ea05 0102 	and.w	r1, r5, r2
 8019164:	ea50 0601 	orrs.w	r6, r0, r1
 8019168:	d00c      	beq.n	8019184 <rint+0xac>
 801916a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801916e:	f1bc 0f13 	cmp.w	ip, #19
 8019172:	bf0c      	ite	eq
 8019174:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8019178:	2600      	movne	r6, #0
 801917a:	ea25 0202 	bic.w	r2, r5, r2
 801917e:	fa43 f30c 	asr.w	r3, r3, ip
 8019182:	4313      	orrs	r3, r2
 8019184:	4917      	ldr	r1, [pc, #92]	; (80191e4 <rint+0x10c>)
 8019186:	4632      	mov	r2, r6
 8019188:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 801918c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8019190:	4620      	mov	r0, r4
 8019192:	4629      	mov	r1, r5
 8019194:	f7e7 f804 	bl	80001a0 <__adddf3>
 8019198:	e9cd 0100 	strd	r0, r1, [sp]
 801919c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80191a0:	4622      	mov	r2, r4
 80191a2:	462b      	mov	r3, r5
 80191a4:	f7e6 fffa 	bl	800019c <__aeabi_dsub>
 80191a8:	e008      	b.n	80191bc <rint+0xe4>
 80191aa:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80191ae:	dd08      	ble.n	80191c2 <rint+0xea>
 80191b0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80191b4:	d1c9      	bne.n	801914a <rint+0x72>
 80191b6:	4602      	mov	r2, r0
 80191b8:	f7e6 fff2 	bl	80001a0 <__adddf3>
 80191bc:	4604      	mov	r4, r0
 80191be:	460d      	mov	r5, r1
 80191c0:	e7c3      	b.n	801914a <rint+0x72>
 80191c2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 80191c6:	f04f 32ff 	mov.w	r2, #4294967295
 80191ca:	40ca      	lsrs	r2, r1
 80191cc:	4210      	tst	r0, r2
 80191ce:	d0bc      	beq.n	801914a <rint+0x72>
 80191d0:	0852      	lsrs	r2, r2, #1
 80191d2:	4210      	tst	r0, r2
 80191d4:	bf1f      	itttt	ne
 80191d6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80191da:	ea20 0202 	bicne.w	r2, r0, r2
 80191de:	410e      	asrne	r6, r1
 80191e0:	4316      	orrne	r6, r2
 80191e2:	e7cf      	b.n	8019184 <rint+0xac>
 80191e4:	0801a438 	.word	0x0801a438
 80191e8:	000fffff 	.word	0x000fffff
 80191ec:	00000000 	.word	0x00000000

080191f0 <scalbn>:
 80191f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191f2:	4616      	mov	r6, r2
 80191f4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80191f8:	4604      	mov	r4, r0
 80191fa:	460d      	mov	r5, r1
 80191fc:	460b      	mov	r3, r1
 80191fe:	b982      	cbnz	r2, 8019222 <scalbn+0x32>
 8019200:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019204:	4303      	orrs	r3, r0
 8019206:	d034      	beq.n	8019272 <scalbn+0x82>
 8019208:	4b2d      	ldr	r3, [pc, #180]	; (80192c0 <scalbn+0xd0>)
 801920a:	2200      	movs	r2, #0
 801920c:	f7e7 f97e 	bl	800050c <__aeabi_dmul>
 8019210:	4b2c      	ldr	r3, [pc, #176]	; (80192c4 <scalbn+0xd4>)
 8019212:	4604      	mov	r4, r0
 8019214:	429e      	cmp	r6, r3
 8019216:	460d      	mov	r5, r1
 8019218:	da0d      	bge.n	8019236 <scalbn+0x46>
 801921a:	a325      	add	r3, pc, #148	; (adr r3, 80192b0 <scalbn+0xc0>)
 801921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019220:	e01c      	b.n	801925c <scalbn+0x6c>
 8019222:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8019226:	42ba      	cmp	r2, r7
 8019228:	d109      	bne.n	801923e <scalbn+0x4e>
 801922a:	4602      	mov	r2, r0
 801922c:	f7e6 ffb8 	bl	80001a0 <__adddf3>
 8019230:	4604      	mov	r4, r0
 8019232:	460d      	mov	r5, r1
 8019234:	e01d      	b.n	8019272 <scalbn+0x82>
 8019236:	460b      	mov	r3, r1
 8019238:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801923c:	3a36      	subs	r2, #54	; 0x36
 801923e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019242:	4432      	add	r2, r6
 8019244:	428a      	cmp	r2, r1
 8019246:	dd0c      	ble.n	8019262 <scalbn+0x72>
 8019248:	4622      	mov	r2, r4
 801924a:	462b      	mov	r3, r5
 801924c:	a11a      	add	r1, pc, #104	; (adr r1, 80192b8 <scalbn+0xc8>)
 801924e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019252:	f000 fa2f 	bl	80196b4 <copysign>
 8019256:	a318      	add	r3, pc, #96	; (adr r3, 80192b8 <scalbn+0xc8>)
 8019258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801925c:	f7e7 f956 	bl	800050c <__aeabi_dmul>
 8019260:	e7e6      	b.n	8019230 <scalbn+0x40>
 8019262:	2a00      	cmp	r2, #0
 8019264:	dd08      	ble.n	8019278 <scalbn+0x88>
 8019266:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801926a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801926e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019272:	4620      	mov	r0, r4
 8019274:	4629      	mov	r1, r5
 8019276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019278:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801927c:	da0b      	bge.n	8019296 <scalbn+0xa6>
 801927e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019282:	429e      	cmp	r6, r3
 8019284:	4622      	mov	r2, r4
 8019286:	462b      	mov	r3, r5
 8019288:	dce0      	bgt.n	801924c <scalbn+0x5c>
 801928a:	a109      	add	r1, pc, #36	; (adr r1, 80192b0 <scalbn+0xc0>)
 801928c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019290:	f000 fa10 	bl	80196b4 <copysign>
 8019294:	e7c1      	b.n	801921a <scalbn+0x2a>
 8019296:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801929a:	3236      	adds	r2, #54	; 0x36
 801929c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80192a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80192a4:	4620      	mov	r0, r4
 80192a6:	4629      	mov	r1, r5
 80192a8:	2200      	movs	r2, #0
 80192aa:	4b07      	ldr	r3, [pc, #28]	; (80192c8 <scalbn+0xd8>)
 80192ac:	e7d6      	b.n	801925c <scalbn+0x6c>
 80192ae:	bf00      	nop
 80192b0:	c2f8f359 	.word	0xc2f8f359
 80192b4:	01a56e1f 	.word	0x01a56e1f
 80192b8:	8800759c 	.word	0x8800759c
 80192bc:	7e37e43c 	.word	0x7e37e43c
 80192c0:	43500000 	.word	0x43500000
 80192c4:	ffff3cb0 	.word	0xffff3cb0
 80192c8:	3c900000 	.word	0x3c900000

080192cc <atanf>:
 80192cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192d0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80192d4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80192d8:	4604      	mov	r4, r0
 80192da:	4607      	mov	r7, r0
 80192dc:	db0e      	blt.n	80192fc <atanf+0x30>
 80192de:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80192e2:	dd04      	ble.n	80192ee <atanf+0x22>
 80192e4:	4601      	mov	r1, r0
 80192e6:	f7e7 fc5f 	bl	8000ba8 <__addsf3>
 80192ea:	4604      	mov	r4, r0
 80192ec:	e003      	b.n	80192f6 <atanf+0x2a>
 80192ee:	2800      	cmp	r0, #0
 80192f0:	f340 80cd 	ble.w	801948e <atanf+0x1c2>
 80192f4:	4c67      	ldr	r4, [pc, #412]	; (8019494 <atanf+0x1c8>)
 80192f6:	4620      	mov	r0, r4
 80192f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192fc:	4b66      	ldr	r3, [pc, #408]	; (8019498 <atanf+0x1cc>)
 80192fe:	429d      	cmp	r5, r3
 8019300:	dc0e      	bgt.n	8019320 <atanf+0x54>
 8019302:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8019306:	da08      	bge.n	801931a <atanf+0x4e>
 8019308:	4964      	ldr	r1, [pc, #400]	; (801949c <atanf+0x1d0>)
 801930a:	f7e7 fc4d 	bl	8000ba8 <__addsf3>
 801930e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8019312:	f7e7 ff0d 	bl	8001130 <__aeabi_fcmpgt>
 8019316:	2800      	cmp	r0, #0
 8019318:	d1ed      	bne.n	80192f6 <atanf+0x2a>
 801931a:	f04f 36ff 	mov.w	r6, #4294967295
 801931e:	e01c      	b.n	801935a <atanf+0x8e>
 8019320:	f000 f8e0 	bl	80194e4 <fabsf>
 8019324:	4b5e      	ldr	r3, [pc, #376]	; (80194a0 <atanf+0x1d4>)
 8019326:	4604      	mov	r4, r0
 8019328:	429d      	cmp	r5, r3
 801932a:	dc7c      	bgt.n	8019426 <atanf+0x15a>
 801932c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8019330:	429d      	cmp	r5, r3
 8019332:	dc67      	bgt.n	8019404 <atanf+0x138>
 8019334:	4601      	mov	r1, r0
 8019336:	f7e7 fc37 	bl	8000ba8 <__addsf3>
 801933a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801933e:	f7e7 fc31 	bl	8000ba4 <__aeabi_fsub>
 8019342:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8019346:	4605      	mov	r5, r0
 8019348:	4620      	mov	r0, r4
 801934a:	f7e7 fc2d 	bl	8000ba8 <__addsf3>
 801934e:	4601      	mov	r1, r0
 8019350:	4628      	mov	r0, r5
 8019352:	f7e7 fde5 	bl	8000f20 <__aeabi_fdiv>
 8019356:	2600      	movs	r6, #0
 8019358:	4604      	mov	r4, r0
 801935a:	4621      	mov	r1, r4
 801935c:	4620      	mov	r0, r4
 801935e:	f7e7 fd2b 	bl	8000db8 <__aeabi_fmul>
 8019362:	4601      	mov	r1, r0
 8019364:	4680      	mov	r8, r0
 8019366:	f7e7 fd27 	bl	8000db8 <__aeabi_fmul>
 801936a:	4605      	mov	r5, r0
 801936c:	494d      	ldr	r1, [pc, #308]	; (80194a4 <atanf+0x1d8>)
 801936e:	f7e7 fd23 	bl	8000db8 <__aeabi_fmul>
 8019372:	494d      	ldr	r1, [pc, #308]	; (80194a8 <atanf+0x1dc>)
 8019374:	f7e7 fc18 	bl	8000ba8 <__addsf3>
 8019378:	4629      	mov	r1, r5
 801937a:	f7e7 fd1d 	bl	8000db8 <__aeabi_fmul>
 801937e:	494b      	ldr	r1, [pc, #300]	; (80194ac <atanf+0x1e0>)
 8019380:	f7e7 fc12 	bl	8000ba8 <__addsf3>
 8019384:	4629      	mov	r1, r5
 8019386:	f7e7 fd17 	bl	8000db8 <__aeabi_fmul>
 801938a:	4949      	ldr	r1, [pc, #292]	; (80194b0 <atanf+0x1e4>)
 801938c:	f7e7 fc0c 	bl	8000ba8 <__addsf3>
 8019390:	4629      	mov	r1, r5
 8019392:	f7e7 fd11 	bl	8000db8 <__aeabi_fmul>
 8019396:	4947      	ldr	r1, [pc, #284]	; (80194b4 <atanf+0x1e8>)
 8019398:	f7e7 fc06 	bl	8000ba8 <__addsf3>
 801939c:	4629      	mov	r1, r5
 801939e:	f7e7 fd0b 	bl	8000db8 <__aeabi_fmul>
 80193a2:	4945      	ldr	r1, [pc, #276]	; (80194b8 <atanf+0x1ec>)
 80193a4:	f7e7 fc00 	bl	8000ba8 <__addsf3>
 80193a8:	4641      	mov	r1, r8
 80193aa:	f7e7 fd05 	bl	8000db8 <__aeabi_fmul>
 80193ae:	4943      	ldr	r1, [pc, #268]	; (80194bc <atanf+0x1f0>)
 80193b0:	4680      	mov	r8, r0
 80193b2:	4628      	mov	r0, r5
 80193b4:	f7e7 fd00 	bl	8000db8 <__aeabi_fmul>
 80193b8:	4941      	ldr	r1, [pc, #260]	; (80194c0 <atanf+0x1f4>)
 80193ba:	f7e7 fbf3 	bl	8000ba4 <__aeabi_fsub>
 80193be:	4629      	mov	r1, r5
 80193c0:	f7e7 fcfa 	bl	8000db8 <__aeabi_fmul>
 80193c4:	493f      	ldr	r1, [pc, #252]	; (80194c4 <atanf+0x1f8>)
 80193c6:	f7e7 fbed 	bl	8000ba4 <__aeabi_fsub>
 80193ca:	4629      	mov	r1, r5
 80193cc:	f7e7 fcf4 	bl	8000db8 <__aeabi_fmul>
 80193d0:	493d      	ldr	r1, [pc, #244]	; (80194c8 <atanf+0x1fc>)
 80193d2:	f7e7 fbe7 	bl	8000ba4 <__aeabi_fsub>
 80193d6:	4629      	mov	r1, r5
 80193d8:	f7e7 fcee 	bl	8000db8 <__aeabi_fmul>
 80193dc:	493b      	ldr	r1, [pc, #236]	; (80194cc <atanf+0x200>)
 80193de:	f7e7 fbe1 	bl	8000ba4 <__aeabi_fsub>
 80193e2:	4629      	mov	r1, r5
 80193e4:	f7e7 fce8 	bl	8000db8 <__aeabi_fmul>
 80193e8:	4601      	mov	r1, r0
 80193ea:	4640      	mov	r0, r8
 80193ec:	f7e7 fbdc 	bl	8000ba8 <__addsf3>
 80193f0:	4621      	mov	r1, r4
 80193f2:	f7e7 fce1 	bl	8000db8 <__aeabi_fmul>
 80193f6:	1c73      	adds	r3, r6, #1
 80193f8:	4601      	mov	r1, r0
 80193fa:	d133      	bne.n	8019464 <atanf+0x198>
 80193fc:	4620      	mov	r0, r4
 80193fe:	f7e7 fbd1 	bl	8000ba4 <__aeabi_fsub>
 8019402:	e772      	b.n	80192ea <atanf+0x1e>
 8019404:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8019408:	f7e7 fbcc 	bl	8000ba4 <__aeabi_fsub>
 801940c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8019410:	4605      	mov	r5, r0
 8019412:	4620      	mov	r0, r4
 8019414:	f7e7 fbc8 	bl	8000ba8 <__addsf3>
 8019418:	4601      	mov	r1, r0
 801941a:	4628      	mov	r0, r5
 801941c:	f7e7 fd80 	bl	8000f20 <__aeabi_fdiv>
 8019420:	2601      	movs	r6, #1
 8019422:	4604      	mov	r4, r0
 8019424:	e799      	b.n	801935a <atanf+0x8e>
 8019426:	4b2a      	ldr	r3, [pc, #168]	; (80194d0 <atanf+0x204>)
 8019428:	429d      	cmp	r5, r3
 801942a:	dc14      	bgt.n	8019456 <atanf+0x18a>
 801942c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8019430:	f7e7 fbb8 	bl	8000ba4 <__aeabi_fsub>
 8019434:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8019438:	4605      	mov	r5, r0
 801943a:	4620      	mov	r0, r4
 801943c:	f7e7 fcbc 	bl	8000db8 <__aeabi_fmul>
 8019440:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8019444:	f7e7 fbb0 	bl	8000ba8 <__addsf3>
 8019448:	4601      	mov	r1, r0
 801944a:	4628      	mov	r0, r5
 801944c:	f7e7 fd68 	bl	8000f20 <__aeabi_fdiv>
 8019450:	2602      	movs	r6, #2
 8019452:	4604      	mov	r4, r0
 8019454:	e781      	b.n	801935a <atanf+0x8e>
 8019456:	4601      	mov	r1, r0
 8019458:	481e      	ldr	r0, [pc, #120]	; (80194d4 <atanf+0x208>)
 801945a:	f7e7 fd61 	bl	8000f20 <__aeabi_fdiv>
 801945e:	2603      	movs	r6, #3
 8019460:	4604      	mov	r4, r0
 8019462:	e77a      	b.n	801935a <atanf+0x8e>
 8019464:	4b1c      	ldr	r3, [pc, #112]	; (80194d8 <atanf+0x20c>)
 8019466:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 801946a:	f7e7 fb9b 	bl	8000ba4 <__aeabi_fsub>
 801946e:	4621      	mov	r1, r4
 8019470:	f7e7 fb98 	bl	8000ba4 <__aeabi_fsub>
 8019474:	4b19      	ldr	r3, [pc, #100]	; (80194dc <atanf+0x210>)
 8019476:	4601      	mov	r1, r0
 8019478:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801947c:	f7e7 fb92 	bl	8000ba4 <__aeabi_fsub>
 8019480:	2f00      	cmp	r7, #0
 8019482:	4604      	mov	r4, r0
 8019484:	f6bf af37 	bge.w	80192f6 <atanf+0x2a>
 8019488:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 801948c:	e733      	b.n	80192f6 <atanf+0x2a>
 801948e:	4c14      	ldr	r4, [pc, #80]	; (80194e0 <atanf+0x214>)
 8019490:	e731      	b.n	80192f6 <atanf+0x2a>
 8019492:	bf00      	nop
 8019494:	3fc90fdb 	.word	0x3fc90fdb
 8019498:	3edfffff 	.word	0x3edfffff
 801949c:	7149f2ca 	.word	0x7149f2ca
 80194a0:	3f97ffff 	.word	0x3f97ffff
 80194a4:	3c8569d7 	.word	0x3c8569d7
 80194a8:	3d4bda59 	.word	0x3d4bda59
 80194ac:	3d886b35 	.word	0x3d886b35
 80194b0:	3dba2e6e 	.word	0x3dba2e6e
 80194b4:	3e124925 	.word	0x3e124925
 80194b8:	3eaaaaab 	.word	0x3eaaaaab
 80194bc:	bd15a221 	.word	0xbd15a221
 80194c0:	3d6ef16b 	.word	0x3d6ef16b
 80194c4:	3d9d8795 	.word	0x3d9d8795
 80194c8:	3de38e38 	.word	0x3de38e38
 80194cc:	3e4ccccd 	.word	0x3e4ccccd
 80194d0:	401bffff 	.word	0x401bffff
 80194d4:	bf800000 	.word	0xbf800000
 80194d8:	0801a458 	.word	0x0801a458
 80194dc:	0801a448 	.word	0x0801a448
 80194e0:	bfc90fdb 	.word	0xbfc90fdb

080194e4 <fabsf>:
 80194e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80194e8:	4770      	bx	lr

080194ea <finitef>:
 80194ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80194ee:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80194f2:	bfac      	ite	ge
 80194f4:	2000      	movge	r0, #0
 80194f6:	2001      	movlt	r0, #1
 80194f8:	4770      	bx	lr
	...

080194fc <floorf>:
 80194fc:	b570      	push	{r4, r5, r6, lr}
 80194fe:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8019502:	0df5      	lsrs	r5, r6, #23
 8019504:	3d7f      	subs	r5, #127	; 0x7f
 8019506:	2d16      	cmp	r5, #22
 8019508:	4601      	mov	r1, r0
 801950a:	4604      	mov	r4, r0
 801950c:	dc26      	bgt.n	801955c <floorf+0x60>
 801950e:	2d00      	cmp	r5, #0
 8019510:	da0e      	bge.n	8019530 <floorf+0x34>
 8019512:	4917      	ldr	r1, [pc, #92]	; (8019570 <floorf+0x74>)
 8019514:	f7e7 fb48 	bl	8000ba8 <__addsf3>
 8019518:	2100      	movs	r1, #0
 801951a:	f7e7 fe09 	bl	8001130 <__aeabi_fcmpgt>
 801951e:	b128      	cbz	r0, 801952c <floorf+0x30>
 8019520:	2c00      	cmp	r4, #0
 8019522:	da23      	bge.n	801956c <floorf+0x70>
 8019524:	4b13      	ldr	r3, [pc, #76]	; (8019574 <floorf+0x78>)
 8019526:	2e00      	cmp	r6, #0
 8019528:	bf18      	it	ne
 801952a:	461c      	movne	r4, r3
 801952c:	4621      	mov	r1, r4
 801952e:	e01b      	b.n	8019568 <floorf+0x6c>
 8019530:	4e11      	ldr	r6, [pc, #68]	; (8019578 <floorf+0x7c>)
 8019532:	412e      	asrs	r6, r5
 8019534:	4230      	tst	r0, r6
 8019536:	d017      	beq.n	8019568 <floorf+0x6c>
 8019538:	490d      	ldr	r1, [pc, #52]	; (8019570 <floorf+0x74>)
 801953a:	f7e7 fb35 	bl	8000ba8 <__addsf3>
 801953e:	2100      	movs	r1, #0
 8019540:	f7e7 fdf6 	bl	8001130 <__aeabi_fcmpgt>
 8019544:	2800      	cmp	r0, #0
 8019546:	d0f1      	beq.n	801952c <floorf+0x30>
 8019548:	2c00      	cmp	r4, #0
 801954a:	bfbe      	ittt	lt
 801954c:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8019550:	fa43 f505 	asrlt.w	r5, r3, r5
 8019554:	1964      	addlt	r4, r4, r5
 8019556:	ea24 0406 	bic.w	r4, r4, r6
 801955a:	e7e7      	b.n	801952c <floorf+0x30>
 801955c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8019560:	d302      	bcc.n	8019568 <floorf+0x6c>
 8019562:	f7e7 fb21 	bl	8000ba8 <__addsf3>
 8019566:	4601      	mov	r1, r0
 8019568:	4608      	mov	r0, r1
 801956a:	bd70      	pop	{r4, r5, r6, pc}
 801956c:	2400      	movs	r4, #0
 801956e:	e7dd      	b.n	801952c <floorf+0x30>
 8019570:	7149f2ca 	.word	0x7149f2ca
 8019574:	bf800000 	.word	0xbf800000
 8019578:	007fffff 	.word	0x007fffff

0801957c <rintf>:
 801957c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801957e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8019582:	0dd5      	lsrs	r5, r2, #23
 8019584:	3d7f      	subs	r5, #127	; 0x7f
 8019586:	2d16      	cmp	r5, #22
 8019588:	4601      	mov	r1, r0
 801958a:	dc3b      	bgt.n	8019604 <rintf+0x88>
 801958c:	b1e2      	cbz	r2, 80195c8 <rintf+0x4c>
 801958e:	2d00      	cmp	r5, #0
 8019590:	4602      	mov	r2, r0
 8019592:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 8019596:	da1a      	bge.n	80195ce <rintf+0x52>
 8019598:	4a1e      	ldr	r2, [pc, #120]	; (8019614 <rintf+0x98>)
 801959a:	f3c0 0116 	ubfx	r1, r0, #0, #23
 801959e:	4249      	negs	r1, r1
 80195a0:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 80195a4:	0d03      	lsrs	r3, r0, #20
 80195a6:	0a49      	lsrs	r1, r1, #9
 80195a8:	051b      	lsls	r3, r3, #20
 80195aa:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80195ae:	4319      	orrs	r1, r3
 80195b0:	4628      	mov	r0, r5
 80195b2:	f7e7 faf9 	bl	8000ba8 <__addsf3>
 80195b6:	9001      	str	r0, [sp, #4]
 80195b8:	4629      	mov	r1, r5
 80195ba:	9801      	ldr	r0, [sp, #4]
 80195bc:	f7e7 faf2 	bl	8000ba4 <__aeabi_fsub>
 80195c0:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80195c4:	ea41 71c4 	orr.w	r1, r1, r4, lsl #31
 80195c8:	4608      	mov	r0, r1
 80195ca:	b003      	add	sp, #12
 80195cc:	bd30      	pop	{r4, r5, pc}
 80195ce:	4b12      	ldr	r3, [pc, #72]	; (8019618 <rintf+0x9c>)
 80195d0:	412b      	asrs	r3, r5
 80195d2:	4218      	tst	r0, r3
 80195d4:	d0f8      	beq.n	80195c8 <rintf+0x4c>
 80195d6:	0859      	lsrs	r1, r3, #1
 80195d8:	4208      	tst	r0, r1
 80195da:	d006      	beq.n	80195ea <rintf+0x6e>
 80195dc:	ea20 0201 	bic.w	r2, r0, r1
 80195e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80195e4:	fa41 f505 	asr.w	r5, r1, r5
 80195e8:	432a      	orrs	r2, r5
 80195ea:	4b0a      	ldr	r3, [pc, #40]	; (8019614 <rintf+0x98>)
 80195ec:	4611      	mov	r1, r2
 80195ee:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80195f2:	4620      	mov	r0, r4
 80195f4:	f7e7 fad8 	bl	8000ba8 <__addsf3>
 80195f8:	9001      	str	r0, [sp, #4]
 80195fa:	9801      	ldr	r0, [sp, #4]
 80195fc:	4621      	mov	r1, r4
 80195fe:	f7e7 fad1 	bl	8000ba4 <__aeabi_fsub>
 8019602:	e004      	b.n	801960e <rintf+0x92>
 8019604:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019608:	d3de      	bcc.n	80195c8 <rintf+0x4c>
 801960a:	f7e7 facd 	bl	8000ba8 <__addsf3>
 801960e:	4601      	mov	r1, r0
 8019610:	e7da      	b.n	80195c8 <rintf+0x4c>
 8019612:	bf00      	nop
 8019614:	0801a468 	.word	0x0801a468
 8019618:	007fffff 	.word	0x007fffff

0801961c <scalbnf>:
 801961c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8019620:	b510      	push	{r4, lr}
 8019622:	4602      	mov	r2, r0
 8019624:	460c      	mov	r4, r1
 8019626:	4601      	mov	r1, r0
 8019628:	d027      	beq.n	801967a <scalbnf+0x5e>
 801962a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801962e:	d303      	bcc.n	8019638 <scalbnf+0x1c>
 8019630:	f7e7 faba 	bl	8000ba8 <__addsf3>
 8019634:	4602      	mov	r2, r0
 8019636:	e020      	b.n	801967a <scalbnf+0x5e>
 8019638:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801963c:	d215      	bcs.n	801966a <scalbnf+0x4e>
 801963e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8019642:	f7e7 fbb9 	bl	8000db8 <__aeabi_fmul>
 8019646:	4b18      	ldr	r3, [pc, #96]	; (80196a8 <scalbnf+0x8c>)
 8019648:	4602      	mov	r2, r0
 801964a:	429c      	cmp	r4, r3
 801964c:	db22      	blt.n	8019694 <scalbnf+0x78>
 801964e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8019652:	3b19      	subs	r3, #25
 8019654:	4423      	add	r3, r4
 8019656:	2bfe      	cmp	r3, #254	; 0xfe
 8019658:	dd09      	ble.n	801966e <scalbnf+0x52>
 801965a:	4611      	mov	r1, r2
 801965c:	4813      	ldr	r0, [pc, #76]	; (80196ac <scalbnf+0x90>)
 801965e:	f000 f832 	bl	80196c6 <copysignf>
 8019662:	4912      	ldr	r1, [pc, #72]	; (80196ac <scalbnf+0x90>)
 8019664:	f7e7 fba8 	bl	8000db8 <__aeabi_fmul>
 8019668:	e7e4      	b.n	8019634 <scalbnf+0x18>
 801966a:	0ddb      	lsrs	r3, r3, #23
 801966c:	e7f2      	b.n	8019654 <scalbnf+0x38>
 801966e:	2b00      	cmp	r3, #0
 8019670:	dd05      	ble.n	801967e <scalbnf+0x62>
 8019672:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8019676:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 801967a:	4610      	mov	r0, r2
 801967c:	bd10      	pop	{r4, pc}
 801967e:	f113 0f16 	cmn.w	r3, #22
 8019682:	da09      	bge.n	8019698 <scalbnf+0x7c>
 8019684:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019688:	429c      	cmp	r4, r3
 801968a:	4611      	mov	r1, r2
 801968c:	dce6      	bgt.n	801965c <scalbnf+0x40>
 801968e:	4808      	ldr	r0, [pc, #32]	; (80196b0 <scalbnf+0x94>)
 8019690:	f000 f819 	bl	80196c6 <copysignf>
 8019694:	4906      	ldr	r1, [pc, #24]	; (80196b0 <scalbnf+0x94>)
 8019696:	e7e5      	b.n	8019664 <scalbnf+0x48>
 8019698:	3319      	adds	r3, #25
 801969a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 801969e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80196a2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80196a6:	e7dd      	b.n	8019664 <scalbnf+0x48>
 80196a8:	ffff3cb0 	.word	0xffff3cb0
 80196ac:	7149f2ca 	.word	0x7149f2ca
 80196b0:	0da24260 	.word	0x0da24260

080196b4 <copysign>:
 80196b4:	b530      	push	{r4, r5, lr}
 80196b6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80196ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80196be:	ea42 0503 	orr.w	r5, r2, r3
 80196c2:	4629      	mov	r1, r5
 80196c4:	bd30      	pop	{r4, r5, pc}

080196c6 <copysignf>:
 80196c6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80196ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80196ce:	4308      	orrs	r0, r1
 80196d0:	4770      	bx	lr
	...

080196d4 <_init>:
 80196d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196d6:	bf00      	nop
 80196d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196da:	bc08      	pop	{r3}
 80196dc:	469e      	mov	lr, r3
 80196de:	4770      	bx	lr

080196e0 <_fini>:
 80196e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196e2:	bf00      	nop
 80196e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196e6:	bc08      	pop	{r3}
 80196e8:	469e      	mov	lr, r3
 80196ea:	4770      	bx	lr
