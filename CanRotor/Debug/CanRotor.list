
CanRotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a2c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e48  08019b60  08019b60  00029b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a9a8  0801a9a8  00030234  2**0
                  CONTENTS
  4 .ARM          00000000  0801a9a8  0801a9a8  00030234  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a9a8  0801a9a8  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a9a8  0801a9a8  0002a9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a9ac  0801a9ac  0002a9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0801a9b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001348  20000238  0801abe4  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001580  0801abe4  00031580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024772  00000000  00000000  0003025d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005223  00000000  00000000  000549cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016e0  00000000  00000000  00059bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e0  00000000  00000000  0005b2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ffee  00000000  00000000  0005c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001aec9  00000000  00000000  0007c7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094ba9  00000000  00000000  0009766f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c218  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007acc  00000000  00000000  0012c294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000238 	.word	0x20000238
 800014c:	00000000 	.word	0x00000000
 8000150:	08019b44 	.word	0x08019b44

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000023c 	.word	0x2000023c
 800016c:	08019b44 	.word	0x08019b44

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_frsub>:
 8000b9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba0:	e002      	b.n	8000ba8 <__addsf3>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_fsub>:
 8000ba4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba8 <__addsf3>:
 8000ba8:	0042      	lsls	r2, r0, #1
 8000baa:	bf1f      	itttt	ne
 8000bac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb0:	ea92 0f03 	teqne	r2, r3
 8000bb4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbc:	d06a      	beq.n	8000c94 <__addsf3+0xec>
 8000bbe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc6:	bfc1      	itttt	gt
 8000bc8:	18d2      	addgt	r2, r2, r3
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	4048      	eorgt	r0, r1
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	bfb8      	it	lt
 8000bd2:	425b      	neglt	r3, r3
 8000bd4:	2b19      	cmp	r3, #25
 8000bd6:	bf88      	it	hi
 8000bd8:	4770      	bxhi	lr
 8000bda:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4249      	negne	r1, r1
 8000bfa:	ea92 0f03 	teq	r2, r3
 8000bfe:	d03f      	beq.n	8000c80 <__addsf3+0xd8>
 8000c00:	f1a2 0201 	sub.w	r2, r2, #1
 8000c04:	fa41 fc03 	asr.w	ip, r1, r3
 8000c08:	eb10 000c 	adds.w	r0, r0, ip
 8000c0c:	f1c3 0320 	rsb	r3, r3, #32
 8000c10:	fa01 f103 	lsl.w	r1, r1, r3
 8000c14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__addsf3+0x78>
 8000c1a:	4249      	negs	r1, r1
 8000c1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c24:	d313      	bcc.n	8000c4e <__addsf3+0xa6>
 8000c26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2a:	d306      	bcc.n	8000c3a <__addsf3+0x92>
 8000c2c:	0840      	lsrs	r0, r0, #1
 8000c2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c32:	f102 0201 	add.w	r2, r2, #1
 8000c36:	2afe      	cmp	r2, #254	; 0xfe
 8000c38:	d251      	bcs.n	8000cde <__addsf3+0x136>
 8000c3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c42:	bf08      	it	eq
 8000c44:	f020 0001 	biceq.w	r0, r0, #1
 8000c48:	ea40 0003 	orr.w	r0, r0, r3
 8000c4c:	4770      	bx	lr
 8000c4e:	0049      	lsls	r1, r1, #1
 8000c50:	eb40 0000 	adc.w	r0, r0, r0
 8000c54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	d1ed      	bne.n	8000c3a <__addsf3+0x92>
 8000c5e:	fab0 fc80 	clz	ip, r0
 8000c62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c66:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6e:	bfaa      	itet	ge
 8000c70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c74:	4252      	neglt	r2, r2
 8000c76:	4318      	orrge	r0, r3
 8000c78:	bfbc      	itt	lt
 8000c7a:	40d0      	lsrlt	r0, r2
 8000c7c:	4318      	orrlt	r0, r3
 8000c7e:	4770      	bx	lr
 8000c80:	f092 0f00 	teq	r2, #0
 8000c84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c88:	bf06      	itte	eq
 8000c8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8e:	3201      	addeq	r2, #1
 8000c90:	3b01      	subne	r3, #1
 8000c92:	e7b5      	b.n	8000c00 <__addsf3+0x58>
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d021      	beq.n	8000ce8 <__addsf3+0x140>
 8000ca4:	ea92 0f03 	teq	r2, r3
 8000ca8:	d004      	beq.n	8000cb4 <__addsf3+0x10c>
 8000caa:	f092 0f00 	teq	r2, #0
 8000cae:	bf08      	it	eq
 8000cb0:	4608      	moveq	r0, r1
 8000cb2:	4770      	bx	lr
 8000cb4:	ea90 0f01 	teq	r0, r1
 8000cb8:	bf1c      	itt	ne
 8000cba:	2000      	movne	r0, #0
 8000cbc:	4770      	bxne	lr
 8000cbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc2:	d104      	bne.n	8000cce <__addsf3+0x126>
 8000cc4:	0040      	lsls	r0, r0, #1
 8000cc6:	bf28      	it	cs
 8000cc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	4770      	bx	lr
 8000cce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd2:	bf3c      	itt	cc
 8000cd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd8:	4770      	bxcc	lr
 8000cda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce6:	4770      	bx	lr
 8000ce8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cec:	bf16      	itet	ne
 8000cee:	4608      	movne	r0, r1
 8000cf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf4:	4601      	movne	r1, r0
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	bf06      	itte	eq
 8000cfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfe:	ea90 0f01 	teqeq	r0, r1
 8000d02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_ui2f>:
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	e004      	b.n	8000d18 <__aeabi_i2f+0x8>
 8000d0e:	bf00      	nop

08000d10 <__aeabi_i2f>:
 8000d10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	bf48      	it	mi
 8000d16:	4240      	negmi	r0, r0
 8000d18:	ea5f 0c00 	movs.w	ip, r0
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d24:	4601      	mov	r1, r0
 8000d26:	f04f 0000 	mov.w	r0, #0
 8000d2a:	e01c      	b.n	8000d66 <__aeabi_l2f+0x2a>

08000d2c <__aeabi_ul2f>:
 8000d2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d30:	bf08      	it	eq
 8000d32:	4770      	bxeq	lr
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e00a      	b.n	8000d50 <__aeabi_l2f+0x14>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_l2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d48:	d502      	bpl.n	8000d50 <__aeabi_l2f+0x14>
 8000d4a:	4240      	negs	r0, r0
 8000d4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d50:	ea5f 0c01 	movs.w	ip, r1
 8000d54:	bf02      	ittt	eq
 8000d56:	4684      	moveq	ip, r0
 8000d58:	4601      	moveq	r1, r0
 8000d5a:	2000      	moveq	r0, #0
 8000d5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d60:	bf08      	it	eq
 8000d62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6a:	fabc f28c 	clz	r2, ip
 8000d6e:	3a08      	subs	r2, #8
 8000d70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d74:	db10      	blt.n	8000d98 <__aeabi_l2f+0x5c>
 8000d76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d88:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	f020 0001 	biceq.w	r0, r0, #1
 8000d96:	4770      	bx	lr
 8000d98:	f102 0220 	add.w	r2, r2, #32
 8000d9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da0:	f1c2 0220 	rsb	r2, r2, #32
 8000da4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dac:	eb43 0002 	adc.w	r0, r3, r2
 8000db0:	bf08      	it	eq
 8000db2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_fmul>:
 8000db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc0:	bf1e      	ittt	ne
 8000dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc6:	ea92 0f0c 	teqne	r2, ip
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d06f      	beq.n	8000eb0 <__aeabi_fmul+0xf8>
 8000dd0:	441a      	add	r2, r3
 8000dd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd6:	0240      	lsls	r0, r0, #9
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dde:	d01e      	beq.n	8000e1e <__aeabi_fmul+0x66>
 8000de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dec:	fba0 3101 	umull	r3, r1, r0, r1
 8000df0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df8:	bf3e      	ittt	cc
 8000dfa:	0049      	lslcc	r1, r1, #1
 8000dfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e00:	005b      	lslcc	r3, r3, #1
 8000e02:	ea40 0001 	orr.w	r0, r0, r1
 8000e06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0a:	2afd      	cmp	r2, #253	; 0xfd
 8000e0c:	d81d      	bhi.n	8000e4a <__aeabi_fmul+0x92>
 8000e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e16:	bf08      	it	eq
 8000e18:	f020 0001 	biceq.w	r0, r0, #1
 8000e1c:	4770      	bx	lr
 8000e1e:	f090 0f00 	teq	r0, #0
 8000e22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e26:	bf08      	it	eq
 8000e28:	0249      	lsleq	r1, r1, #9
 8000e2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e32:	3a7f      	subs	r2, #127	; 0x7f
 8000e34:	bfc2      	ittt	gt
 8000e36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3e:	4770      	bxgt	lr
 8000e40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	3a01      	subs	r2, #1
 8000e4a:	dc5d      	bgt.n	8000f08 <__aeabi_fmul+0x150>
 8000e4c:	f112 0f19 	cmn.w	r2, #25
 8000e50:	bfdc      	itt	le
 8000e52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e56:	4770      	bxle	lr
 8000e58:	f1c2 0200 	rsb	r2, r2, #0
 8000e5c:	0041      	lsls	r1, r0, #1
 8000e5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e62:	f1c2 0220 	rsb	r2, r2, #32
 8000e66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6e:	f140 0000 	adc.w	r0, r0, #0
 8000e72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e76:	bf08      	it	eq
 8000e78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e7c:	4770      	bx	lr
 8000e7e:	f092 0f00 	teq	r2, #0
 8000e82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0040      	lsleq	r0, r0, #1
 8000e8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8e:	3a01      	subeq	r2, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fmul+0xce>
 8000e92:	ea40 000c 	orr.w	r0, r0, ip
 8000e96:	f093 0f00 	teq	r3, #0
 8000e9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9e:	bf02      	ittt	eq
 8000ea0:	0049      	lsleq	r1, r1, #1
 8000ea2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea6:	3b01      	subeq	r3, #1
 8000ea8:	d0f9      	beq.n	8000e9e <__aeabi_fmul+0xe6>
 8000eaa:	ea41 010c 	orr.w	r1, r1, ip
 8000eae:	e78f      	b.n	8000dd0 <__aeabi_fmul+0x18>
 8000eb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	bf18      	it	ne
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d00a      	beq.n	8000ed6 <__aeabi_fmul+0x11e>
 8000ec0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec4:	bf18      	it	ne
 8000ec6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	d1d8      	bne.n	8000e7e <__aeabi_fmul+0xc6>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	4770      	bx	lr
 8000ed6:	f090 0f00 	teq	r0, #0
 8000eda:	bf17      	itett	ne
 8000edc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee0:	4608      	moveq	r0, r1
 8000ee2:	f091 0f00 	teqne	r1, #0
 8000ee6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eea:	d014      	beq.n	8000f16 <__aeabi_fmul+0x15e>
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d101      	bne.n	8000ef6 <__aeabi_fmul+0x13e>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	d10f      	bne.n	8000f16 <__aeabi_fmul+0x15e>
 8000ef6:	ea93 0f0c 	teq	r3, ip
 8000efa:	d103      	bne.n	8000f04 <__aeabi_fmul+0x14c>
 8000efc:	024b      	lsls	r3, r1, #9
 8000efe:	bf18      	it	ne
 8000f00:	4608      	movne	r0, r1
 8000f02:	d108      	bne.n	8000f16 <__aeabi_fmul+0x15e>
 8000f04:	ea80 0001 	eor.w	r0, r0, r1
 8000f08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f14:	4770      	bx	lr
 8000f16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1e:	4770      	bx	lr

08000f20 <__aeabi_fdiv>:
 8000f20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f28:	bf1e      	ittt	ne
 8000f2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2e:	ea92 0f0c 	teqne	r2, ip
 8000f32:	ea93 0f0c 	teqne	r3, ip
 8000f36:	d069      	beq.n	800100c <__aeabi_fdiv+0xec>
 8000f38:	eba2 0203 	sub.w	r2, r2, r3
 8000f3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f40:	0249      	lsls	r1, r1, #9
 8000f42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f46:	d037      	beq.n	8000fb8 <__aeabi_fdiv+0x98>
 8000f48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	bf38      	it	cc
 8000f5c:	005b      	lslcc	r3, r3, #1
 8000f5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f66:	428b      	cmp	r3, r1
 8000f68:	bf24      	itt	cs
 8000f6a:	1a5b      	subcs	r3, r3, r1
 8000f6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f74:	bf24      	itt	cs
 8000f76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f82:	bf24      	itt	cs
 8000f84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f90:	bf24      	itt	cs
 8000f92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	bf18      	it	ne
 8000f9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa2:	d1e0      	bne.n	8000f66 <__aeabi_fdiv+0x46>
 8000fa4:	2afd      	cmp	r2, #253	; 0xfd
 8000fa6:	f63f af50 	bhi.w	8000e4a <__aeabi_fmul+0x92>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb0:	bf08      	it	eq
 8000fb2:	f020 0001 	biceq.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc0:	327f      	adds	r2, #127	; 0x7f
 8000fc2:	bfc2      	ittt	gt
 8000fc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fcc:	4770      	bxgt	lr
 8000fce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	3a01      	subs	r2, #1
 8000fd8:	e737      	b.n	8000e4a <__aeabi_fmul+0x92>
 8000fda:	f092 0f00 	teq	r2, #0
 8000fde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe2:	bf02      	ittt	eq
 8000fe4:	0040      	lsleq	r0, r0, #1
 8000fe6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fea:	3a01      	subeq	r2, #1
 8000fec:	d0f9      	beq.n	8000fe2 <__aeabi_fdiv+0xc2>
 8000fee:	ea40 000c 	orr.w	r0, r0, ip
 8000ff2:	f093 0f00 	teq	r3, #0
 8000ff6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffa:	bf02      	ittt	eq
 8000ffc:	0049      	lsleq	r1, r1, #1
 8000ffe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001002:	3b01      	subeq	r3, #1
 8001004:	d0f9      	beq.n	8000ffa <__aeabi_fdiv+0xda>
 8001006:	ea41 010c 	orr.w	r1, r1, ip
 800100a:	e795      	b.n	8000f38 <__aeabi_fdiv+0x18>
 800100c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001010:	ea92 0f0c 	teq	r2, ip
 8001014:	d108      	bne.n	8001028 <__aeabi_fdiv+0x108>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	f47f af7d 	bne.w	8000f16 <__aeabi_fmul+0x15e>
 800101c:	ea93 0f0c 	teq	r3, ip
 8001020:	f47f af70 	bne.w	8000f04 <__aeabi_fmul+0x14c>
 8001024:	4608      	mov	r0, r1
 8001026:	e776      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	d104      	bne.n	8001038 <__aeabi_fdiv+0x118>
 800102e:	024b      	lsls	r3, r1, #9
 8001030:	f43f af4c 	beq.w	8000ecc <__aeabi_fmul+0x114>
 8001034:	4608      	mov	r0, r1
 8001036:	e76e      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001038:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800103c:	bf18      	it	ne
 800103e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001042:	d1ca      	bne.n	8000fda <__aeabi_fdiv+0xba>
 8001044:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001048:	f47f af5c 	bne.w	8000f04 <__aeabi_fmul+0x14c>
 800104c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001050:	f47f af3c 	bne.w	8000ecc <__aeabi_fmul+0x114>
 8001054:	e75f      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001056:	bf00      	nop

08001058 <__gesf2>:
 8001058:	f04f 3cff 	mov.w	ip, #4294967295
 800105c:	e006      	b.n	800106c <__cmpsf2+0x4>
 800105e:	bf00      	nop

08001060 <__lesf2>:
 8001060:	f04f 0c01 	mov.w	ip, #1
 8001064:	e002      	b.n	800106c <__cmpsf2+0x4>
 8001066:	bf00      	nop

08001068 <__cmpsf2>:
 8001068:	f04f 0c01 	mov.w	ip, #1
 800106c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	bf18      	it	ne
 800107e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001082:	d011      	beq.n	80010a8 <__cmpsf2+0x40>
 8001084:	b001      	add	sp, #4
 8001086:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108a:	bf18      	it	ne
 800108c:	ea90 0f01 	teqne	r0, r1
 8001090:	bf58      	it	pl
 8001092:	ebb2 0003 	subspl.w	r0, r2, r3
 8001096:	bf88      	it	hi
 8001098:	17c8      	asrhi	r0, r1, #31
 800109a:	bf38      	it	cc
 800109c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a0:	bf18      	it	ne
 80010a2:	f040 0001 	orrne.w	r0, r0, #1
 80010a6:	4770      	bx	lr
 80010a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010ac:	d102      	bne.n	80010b4 <__cmpsf2+0x4c>
 80010ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b2:	d105      	bne.n	80010c0 <__cmpsf2+0x58>
 80010b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b8:	d1e4      	bne.n	8001084 <__cmpsf2+0x1c>
 80010ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010be:	d0e1      	beq.n	8001084 <__cmpsf2+0x1c>
 80010c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <__aeabi_cfrcmple>:
 80010c8:	4684      	mov	ip, r0
 80010ca:	4608      	mov	r0, r1
 80010cc:	4661      	mov	r1, ip
 80010ce:	e7ff      	b.n	80010d0 <__aeabi_cfcmpeq>

080010d0 <__aeabi_cfcmpeq>:
 80010d0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d2:	f7ff ffc9 	bl	8001068 <__cmpsf2>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	bf48      	it	mi
 80010da:	f110 0f00 	cmnmi.w	r0, #0
 80010de:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e0 <__aeabi_fcmpeq>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff fff4 	bl	80010d0 <__aeabi_cfcmpeq>
 80010e8:	bf0c      	ite	eq
 80010ea:	2001      	moveq	r0, #1
 80010ec:	2000      	movne	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmplt>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffea 	bl	80010d0 <__aeabi_cfcmpeq>
 80010fc:	bf34      	ite	cc
 80010fe:	2001      	movcc	r0, #1
 8001100:	2000      	movcs	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmple>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffe0 	bl	80010d0 <__aeabi_cfcmpeq>
 8001110:	bf94      	ite	ls
 8001112:	2001      	movls	r0, #1
 8001114:	2000      	movhi	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpge>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffd2 	bl	80010c8 <__aeabi_cfrcmple>
 8001124:	bf94      	ite	ls
 8001126:	2001      	movls	r0, #1
 8001128:	2000      	movhi	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmpgt>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffc8 	bl	80010c8 <__aeabi_cfrcmple>
 8001138:	bf34      	ite	cc
 800113a:	2001      	movcc	r0, #1
 800113c:	2000      	movcs	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpun>:
 8001144:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001148:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__aeabi_fcmpun+0x14>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d108      	bne.n	800116a <__aeabi_fcmpun+0x26>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d102      	bne.n	8001164 <__aeabi_fcmpun+0x20>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d102      	bne.n	800116a <__aeabi_fcmpun+0x26>
 8001164:	f04f 0000 	mov.w	r0, #0
 8001168:	4770      	bx	lr
 800116a:	f04f 0001 	mov.w	r0, #1
 800116e:	4770      	bx	lr

08001170 <__aeabi_f2iz>:
 8001170:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001178:	d30f      	bcc.n	800119a <__aeabi_f2iz+0x2a>
 800117a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001182:	d90d      	bls.n	80011a0 <__aeabi_f2iz+0x30>
 8001184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001190:	fa23 f002 	lsr.w	r0, r3, r2
 8001194:	bf18      	it	ne
 8001196:	4240      	negne	r0, r0
 8001198:	4770      	bx	lr
 800119a:	f04f 0000 	mov.w	r0, #0
 800119e:	4770      	bx	lr
 80011a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a4:	d101      	bne.n	80011aa <__aeabi_f2iz+0x3a>
 80011a6:	0242      	lsls	r2, r0, #9
 80011a8:	d105      	bne.n	80011b6 <__aeabi_f2iz+0x46>
 80011aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011ae:	bf08      	it	eq
 80011b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b4:	4770      	bx	lr
 80011b6:	f04f 0000 	mov.w	r0, #0
 80011ba:	4770      	bx	lr

080011bc <__aeabi_f2uiz>:
 80011bc:	0042      	lsls	r2, r0, #1
 80011be:	d20e      	bcs.n	80011de <__aeabi_f2uiz+0x22>
 80011c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c4:	d30b      	bcc.n	80011de <__aeabi_f2uiz+0x22>
 80011c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ce:	d409      	bmi.n	80011e4 <__aeabi_f2uiz+0x28>
 80011d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d8:	fa23 f002 	lsr.w	r0, r3, r2
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2uiz+0x32>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d102      	bne.n	80011f4 <__aeabi_f2uiz+0x38>
 80011ee:	f04f 30ff 	mov.w	r0, #4294967295
 80011f2:	4770      	bx	lr
 80011f4:	f04f 0000 	mov.w	r0, #0
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <apInit>:
uint16_t timeInterleave = 0;

eeror_t Error;

void apInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART2, 57600);  // Telemetry
 8001200:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001204:	2001      	movs	r0, #1
 8001206:	f00a fdf7 	bl	800bdf8 <uartOpen>

  cliOpen(_DEF_UART1, 57600);
 800120a:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800120e:	2000      	movs	r0, #0
 8001210:	f009 f83a 	bl	800a288 <cliOpen>
  //cliOpenLog(_DEF_UART2, 57600);

  MPU9250_Init();
 8001214:	f005 f82e 	bl	8006274 <MPU9250_Init>
  MS5611_Init(MS5611_ULTRA_HIGH_RES);
 8001218:	2008      	movs	r0, #8
 800121a:	f006 fdb1 	bl	8007d80 <MS5611_Init>
  gps_Init();
 800121e:	f000 fe23 	bl	8001e68 <gps_Init>
	#ifdef IMU_AHRS
  /* Init structure with 100hZ sample rate, 0.1 beta and 3.5 inclination (3.5 degrees is inclination in Ljubljana, Slovenia) on July, 2016 */
  TM_AHRSIMU_Init(250, 1.2f, 0.0f);
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <apInit+0x4c>)
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <apInit+0x50>)
 800122a:	f002 f8ff 	bl	800342c <TM_AHRSIMU_Init>
  #endif
  Calibrate_gyro();
 800122e:	f005 f921 	bl	8006474 <Calibrate_gyro>
  //RC_Init();
  mixerInit();
 8001232:	f002 fe5d 	bl	8003ef0 <mixerInit>
  PIDControlInit(&pid);
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <apInit+0x54>)
 8001238:	f002 ff94 	bl	8004164 <PIDControlInit>
  GPS_set_pids();
 800123c:	f001 fdba 	bl	8002db4 <GPS_set_pids>
  EEPROM_Init();
 8001240:	f000 fb46 	bl	80018d0 <EEPROM_Init>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	3f99999a 	.word	0x3f99999a
 800124c:	437a0000 	.word	0x437a0000
 8001250:	200009b0 	.word	0x200009b0

08001254 <apMain>:

void apMain(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
	previousTime = micros();
 800125a:	f000 f937 	bl	80014cc <micros>
 800125e:	4602      	mov	r2, r0
 8001260:	4b6e      	ldr	r3, [pc, #440]	; (800141c <apMain+0x1c8>)
 8001262:	601a      	str	r2, [r3, #0]
	while(1)
	{
		computeRC(); //2us~10us
 8001264:	f004 fc5a 	bl	8005b1c <computeRC>
		computeIMU();
 8001268:	f002 fcc8 	bl	8003bfc <computeIMU>
#ifdef GPS_Recive
		GPS_mode_check();
 800126c:	f000 fe66 	bl	8001f3c <GPS_mode_check>
#endif
		static uint8_t taskOrder = 0;
		switch (taskOrder)
 8001270:	4b6b      	ldr	r3, [pc, #428]	; (8001420 <apMain+0x1cc>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b04      	cmp	r3, #4
 8001276:	d843      	bhi.n	8001300 <apMain+0xac>
 8001278:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <apMain+0x2c>)
 800127a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127e:	bf00      	nop
 8001280:	08001295 	.word	0x08001295
 8001284:	080012b1 	.word	0x080012b1
 8001288:	080012c7 	.word	0x080012c7
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012f3 	.word	0x080012f3
		{ //4~206us
			case 0: //200us
				taskOrder++;
 8001294:	4b62      	ldr	r3, [pc, #392]	; (8001420 <apMain+0x1cc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b60      	ldr	r3, [pc, #384]	; (8001420 <apMain+0x1cc>)
 800129e:	701a      	strb	r2, [r3, #0]
				if(Baro_update(currentTime)) break;
 80012a0:	4b60      	ldr	r3, [pc, #384]	; (8001424 <apMain+0x1d0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f006 fe37 	bl	8007f18 <Baro_update>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d124      	bne.n	80012fa <apMain+0xa6>
			case 1:  //80us
				taskOrder++;
 80012b0:	4b5b      	ldr	r3, [pc, #364]	; (8001420 <apMain+0x1cc>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b59      	ldr	r3, [pc, #356]	; (8001420 <apMain+0x1cc>)
 80012ba:	701a      	strb	r2, [r3, #0]
				if(getEstimatedAltitude() !=0) break;
 80012bc:	f006 fe8a 	bl	8007fd4 <getEstimatedAltitude>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d11b      	bne.n	80012fe <apMain+0xaa>
			case 2:
				taskOrder++;
 80012c6:	4b56      	ldr	r3, [pc, #344]	; (8001420 <apMain+0x1cc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b54      	ldr	r3, [pc, #336]	; (8001420 <apMain+0x1cc>)
 80012d0:	701a      	strb	r2, [r3, #0]
#ifdef GPS_Recive
				if (GPS_Compute() != 0) break;
 80012d2:	f000 fec5 	bl	8002060 <GPS_Compute>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
				break;
 80012da:	e011      	b.n	8001300 <apMain+0xac>
#endif
			case 3:
				taskOrder++;
 80012dc:	4b50      	ldr	r3, [pc, #320]	; (8001420 <apMain+0x1cc>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <apMain+0x1cc>)
 80012e6:	701a      	strb	r2, [r3, #0]
				Mag_getADC(); //100~380us
 80012e8:	f005 faf2 	bl	80068d0 <Mag_getADC>
				CAL_Heading(); //125us
 80012ec:	f005 fd08 	bl	8006d00 <CAL_Heading>
				break;
 80012f0:	e006      	b.n	8001300 <apMain+0xac>
			case 4:  //40~50us
//				time = micros();
				taskOrder = 0;
 80012f2:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <apMain+0x1cc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
//				vsum += BAT.VBAT;
//				vsum -= vvec[ind];
//				vvec[ind++] = BAT.VBAT;
//				ind %= VBAT_SMOOTH;
//				BAT.VBAT = vsum/VBAT_SMOOTH;
				break;
 80012f8:	e002      	b.n	8001300 <apMain+0xac>
				if(Baro_update(currentTime)) break;
 80012fa:	bf00      	nop
 80012fc:	e000      	b.n	8001300 <apMain+0xac>
				if(getEstimatedAltitude() !=0) break;
 80012fe:	bf00      	nop
		}

		Control(&pid); //50us
 8001300:	4849      	ldr	r0, [pc, #292]	; (8001428 <apMain+0x1d4>)
 8001302:	f003 f879 	bl	80043f8 <Control>
		mixTable();
 8001306:	f002 fe15 	bl	8003f34 <mixTable>

		flight_mode_signal();
 800130a:	f002 fd63 	bl	8003dd4 <flight_mode_signal>

#ifdef Telemetry
		uint8_t t=0;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
		timeInterleave = micros();
 8001312:	f000 f8db 	bl	80014cc <micros>
 8001316:	4603      	mov	r3, r0
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b44      	ldr	r3, [pc, #272]	; (800142c <apMain+0x1d8>)
 800131c:	801a      	strh	r2, [r3, #0]
		SerialCom(); //4us
 800131e:	f007 faef 	bl	8008900 <SerialCom>
		while((int16_t)(micros()-timeInterleave)<650) t=1; //650
 8001322:	e001      	b.n	8001328 <apMain+0xd4>
 8001324:	2301      	movs	r3, #1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	f000 f8d0 	bl	80014cc <micros>
 800132c:	4603      	mov	r3, r0
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b3e      	ldr	r3, [pc, #248]	; (800142c <apMain+0x1d8>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21b      	sxth	r3, r3
 800133a:	f240 2289 	movw	r2, #649	; 0x289
 800133e:	4293      	cmp	r3, r2
 8001340:	ddf0      	ble.n	8001324 <apMain+0xd0>
		if(!t) overrun_count++;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d108      	bne.n	800135a <apMain+0x106>
 8001348:	4b39      	ldr	r3, [pc, #228]	; (8001430 <apMain+0x1dc>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	b29b      	uxth	r3, r3
 8001350:	3301      	adds	r3, #1
 8001352:	b29b      	uxth	r3, r3
 8001354:	b21a      	sxth	r2, r3
 8001356:	4b36      	ldr	r3, [pc, #216]	; (8001430 <apMain+0x1dc>)
 8001358:	801a      	strh	r2, [r3, #0]
#endif
		cliMain();
 800135a:	f009 f84d 	bl	800a3f8 <cliMain>

		loopTime = micros() - previousTime;
 800135e:	f000 f8b5 	bl	80014cc <micros>
 8001362:	4602      	mov	r2, r0
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <apMain+0x1c8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	4a32      	ldr	r2, [pc, #200]	; (8001434 <apMain+0x1e0>)
 800136c:	6013      	str	r3, [r2, #0]
		while(1)
		{
			currentTime = micros();
 800136e:	f000 f8ad 	bl	80014cc <micros>
 8001372:	4602      	mov	r2, r0
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <apMain+0x1d0>)
 8001376:	601a      	str	r2, [r3, #0]
			cycleTime = currentTime - previousTime;
 8001378:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <apMain+0x1d0>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <apMain+0x1c8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <apMain+0x1e4>)
 8001384:	6013      	str	r3, [r2, #0]
#if defined(LOOP_TIME)
			if (cycleTime >= LOOP_TIME)
 8001386:	4b2c      	ldr	r3, [pc, #176]	; (8001438 <apMain+0x1e4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800138e:	d3ee      	bcc.n	800136e <apMain+0x11a>
			{
				if(cycleTime > (LOOP_TIME+50))
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <apMain+0x1e4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f640 72d2 	movw	r2, #4050	; 0xfd2
 8001398:	4293      	cmp	r3, r2
 800139a:	d905      	bls.n	80013a8 <apMain+0x154>
				{
					ledToggle(RGB_RED);
 800139c:	2002      	movs	r0, #2
 800139e:	f00a fa2b 	bl	800b7f8 <ledToggle>
					Error.error = 4;
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <apMain+0x1e8>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	701a      	strb	r2, [r3, #0]
				}
				break;
 80013a8:	bf00      	nop
			}
#else
			break;
#endif
		}
		previousTime = currentTime;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <apMain+0x1d0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a1b      	ldr	r2, [pc, #108]	; (800141c <apMain+0x1c8>)
 80013b0:	6013      	str	r3, [r2, #0]

		if(f.ARMED)
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <apMain+0x1ec>)
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <apMain+0x174>
		{
			armedTime += (uint32_t)cycleTime;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <apMain+0x1e4>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <apMain+0x1f0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <apMain+0x1f0>)
 80013c6:	6013      	str	r3, [r2, #0]
		}

		if(loopTime > cycleTimeMax) cycleTimeMax = loopTime;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <apMain+0x1f4>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <apMain+0x1e0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d204      	bcs.n	80013e0 <apMain+0x18c>
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <apMain+0x1e0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <apMain+0x1f4>)
 80013de:	801a      	strh	r2, [r3, #0]
		if(loopTime < cycleTimeMin) cycleTimeMin = loopTime;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <apMain+0x1f8>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <apMain+0x1e0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d904      	bls.n	80013f8 <apMain+0x1a4>
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <apMain+0x1e0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <apMain+0x1f8>)
 80013f6:	801a      	strh	r2, [r3, #0]
		static uint16_t z = 0;
		z++;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <apMain+0x1fc>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <apMain+0x1fc>)
 8001402:	801a      	strh	r2, [r3, #0]
		if(z >= 250)
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <apMain+0x1fc>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	2bf9      	cmp	r3, #249	; 0xf9
 800140a:	f67f af2b 	bls.w	8001264 <apMain+0x10>
		{
			z = 0;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <apMain+0x1fc>)
 8001410:	2200      	movs	r2, #0
 8001412:	801a      	strh	r2, [r3, #0]
			ledToggle(ST1);
 8001414:	2000      	movs	r0, #0
 8001416:	f00a f9ef 	bl	800b7f8 <ledToggle>
	{
 800141a:	e723      	b.n	8001264 <apMain+0x10>
 800141c:	2000025c 	.word	0x2000025c
 8001420:	20000270 	.word	0x20000270
 8001424:	20000254 	.word	0x20000254
 8001428:	200009b0 	.word	0x200009b0
 800142c:	2000026e 	.word	0x2000026e
 8001430:	2000026c 	.word	0x2000026c
 8001434:	20000260 	.word	0x20000260
 8001438:	20000258 	.word	0x20000258
 800143c:	20000acc 	.word	0x20000acc
 8001440:	20000ed4 	.word	0x20000ed4
 8001444:	20000268 	.word	0x20000268
 8001448:	20000264 	.word	0x20000264
 800144c:	20000000 	.word	0x20000000
 8001450:	20000272 	.word	0x20000272

08001454 <HAL_SYSTICK_Callback>:
void SystemClock_Config(void);

static volatile uint32_t msTicks = 0;

void HAL_SYSTICK_Callback(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	msTicks++;
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <HAL_SYSTICK_Callback+0x18>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	4a03      	ldr	r2, [pc, #12]	; (800146c <HAL_SYSTICK_Callback+0x18>)
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000274 	.word	0x20000274

08001470 <bspInit>:

void bspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  HAL_Init();
 8001476:	f00b f91f 	bl	800c6b8 <HAL_Init>
  SystemClock_Config();
 800147a:	f000 f858 	bl	800152e <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <bspInit+0x48>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <bspInit+0x48>)
 8001484:	f043 0320 	orr.w	r3, r3, #32
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <bspInit+0x48>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <bspInit+0x48>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <bspInit+0x48>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6193      	str	r3, [r2, #24]
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <bspInit+0x48>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80014c0:	f00b f952 	bl	800c768 <HAL_GetTick>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <micros>:

uint32_t micros(void)
{
 80014cc:	b4b0      	push	{r4, r5, r7}
 80014ce:	af00      	add	r7, sp, #0
	 register uint32_t ms, cycle_cnt;
	    do {
	        ms = msTicks;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <micros+0x38>)
 80014d2:	681c      	ldr	r4, [r3, #0]
	        cycle_cnt = SysTick->VAL;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <micros+0x3c>)
 80014d6:	689d      	ldr	r5, [r3, #8]
	    } while (ms != msTicks);
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <micros+0x38>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	429c      	cmp	r4, r3
 80014de:	d1f7      	bne.n	80014d0 <micros+0x4>
	    return (ms * 1000) + (72 * 1000 - cycle_cnt) / 72; //168
 80014e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e4:	fb03 f204 	mul.w	r2, r3, r4
 80014e8:	f5c5 338c 	rsb	r3, r5, #71680	; 0x11800
 80014ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80014f0:	4906      	ldr	r1, [pc, #24]	; (800150c <micros+0x40>)
 80014f2:	fba1 1303 	umull	r1, r3, r1, r3
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	4413      	add	r3, r2
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bcb0      	pop	{r4, r5, r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000274 	.word	0x20000274
 8001508:	e000e010 	.word	0xe000e010
 800150c:	38e38e39 	.word	0x38e38e39

08001510 <__io_putchar>:

int __io_putchar(int ch)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	2000      	movs	r0, #0
 8001520:	f00a fdf4 	bl	800c10c <uartWrite>
  return 1;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <SystemClock_Config>:

void SystemClock_Config(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b090      	sub	sp, #64	; 0x40
 8001532:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	2228      	movs	r2, #40	; 0x28
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f00f ffd8 	bl	80114f2 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001558:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155e:	2301      	movs	r3, #1
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001562:	2302      	movs	r3, #2
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156a:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800156c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001570:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	4618      	mov	r0, r3
 8001578:	f00d fbf8 	bl	800ed6c <HAL_RCC_OscConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x58>
	  {
	    Error_Handler();
 8001582:	f000 f819 	bl	80015b8 <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001586:	230f      	movs	r3, #15
 8001588:	607b      	str	r3, [r7, #4]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158a:	2302      	movs	r3, #2
 800158c:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001596:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2102      	movs	r1, #2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00d fe63 	bl	800f26c <HAL_RCC_ClockConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0x82>
	  {
	    Error_Handler();
 80015ac:	f000 f804 	bl	80015b8 <Error_Handler>
	  }
}
 80015b0:	bf00      	nop
 80015b2:	3740      	adds	r7, #64	; 0x40
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_MspInit+0x5c>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_MspInit+0x5c>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6193      	str	r3, [r2, #24]
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_MspInit+0x5c>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_MspInit+0x5c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_MspInit+0x5c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_MspInit+0x5c>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_MspInit+0x60>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_MspInit+0x60>)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166e:	f00b f869 	bl	800c744 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001672:	f00b f9b2 	bl	800c9da <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <DMA1_Channel4_IRQHandler+0x10>)
 8001682:	f00b fae1 	bl	800cc48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000142c 	.word	0x2000142c

08001690 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <DMA1_Channel5_IRQHandler+0x10>)
 8001696:	f00b fad7 	bl	800cc48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20001470 	.word	0x20001470

080016a4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA1_Channel6_IRQHandler+0x10>)
 80016aa:	f00b facd 	bl	800cc48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200013e8 	.word	0x200013e8

080016b8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DMA1_Channel7_IRQHandler+0x10>)
 80016be:	f00b fac3 	bl	800cc48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200014b4 	.word	0x200014b4

080016cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <TIM2_IRQHandler+0x10>)
 80016d2:	f00e fa07 	bl	800fae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200013a0 	.word	0x200013a0

080016e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM3_IRQHandler+0x10>)
 80016e6:	f00e f9fd 	bl	800fae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20001358 	.word	0x20001358

080016f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM4_IRQHandler+0x10>)
 80016fa:	f00e f9f3 	bl	800fae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20001310 	.word	0x20001310

08001708 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <USART1_IRQHandler+0x10>)
 800170e:	f00f fae5 	bl	8010cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200014f8 	.word	0x200014f8

0800171c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <USART2_IRQHandler+0x10>)
 8001722:	f00f fadb 	bl	8010cdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20001538 	.word	0x20001538

08001730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e00a      	b.n	8001758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001742:	f3af 8000 	nop.w
 8001746:	4601      	mov	r1, r0
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf0      	blt.n	8001742 <_read+0x12>
	}

return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e009      	b.n	8001790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fec3 	bl	8001510 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf1      	blt.n	800177c <_write+0x12>
	}
	return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_close>:

int _close(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c8:	605a      	str	r2, [r3, #4]
	return 0;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <_isatty>:

int _isatty(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return 1;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
	return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f00f fe04 	bl	8011440 <__errno>
 8001838:	4602      	mov	r2, r0
 800183a:	230c      	movs	r3, #12
 800183c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20005000 	.word	0x20005000
 8001864:	00000400 	.word	0x00000400
 8001868:	20000278 	.word	0x20000278
 800186c:	20001580 	.word	0x20001580

08001870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800187e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001880:	f7ff fff6 	bl	8001870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001886:	490d      	ldr	r1, [pc, #52]	; (80018bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <LoopForever+0xe>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800189c:	4c0a      	ldr	r4, [pc, #40]	; (80018c8 <LoopForever+0x16>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018aa:	f00f fdcf 	bl	801144c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ae:	f00f fdb9 	bl	8011424 <main>

080018b2 <LoopForever>:

LoopForever:
    b LoopForever
 80018b2:	e7fe      	b.n	80018b2 <LoopForever>
  ldr   r0, =_estack
 80018b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80018c0:	0801a9b0 	.word	0x0801a9b0
  ldr r2, =_sbss
 80018c4:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80018c8:	20001580 	.word	0x20001580

080018cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC1_2_IRQHandler>
	...

080018d0 <EEPROM_Init>:
     uartPrintf(_DEF_UART1, "[ %d ] = %d\r\n", 1000+i, z[i]);
   }
}

void EEPROM_Init()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

  posholdPID_PARAM.kP = readFloat(0); //GPS PID
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 f8f0 	bl	8001abc <readFloat>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b69      	ldr	r3, [pc, #420]	; (8001a84 <EEPROM_Init+0x1b4>)
 80018e0:	601a      	str	r2, [r3, #0]
  posholdPID_PARAM.kI = readFloat(4);
 80018e2:	2004      	movs	r0, #4
 80018e4:	f000 f8ea 	bl	8001abc <readFloat>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b66      	ldr	r3, [pc, #408]	; (8001a84 <EEPROM_Init+0x1b4>)
 80018ec:	605a      	str	r2, [r3, #4]

  poshold_ratePID_PARAM.kP = readFloat(8);
 80018ee:	2008      	movs	r0, #8
 80018f0:	f000 f8e4 	bl	8001abc <readFloat>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <EEPROM_Init+0x1b8>)
 80018f8:	601a      	str	r2, [r3, #0]
  poshold_ratePID_PARAM.kI = readFloat(12);
 80018fa:	200c      	movs	r0, #12
 80018fc:	f000 f8de 	bl	8001abc <readFloat>
 8001900:	4602      	mov	r2, r0
 8001902:	4b61      	ldr	r3, [pc, #388]	; (8001a88 <EEPROM_Init+0x1b8>)
 8001904:	605a      	str	r2, [r3, #4]
  poshold_ratePID_PARAM.kD = readFloat(16);
 8001906:	2010      	movs	r0, #16
 8001908:	f000 f8d8 	bl	8001abc <readFloat>
 800190c:	4602      	mov	r2, r0
 800190e:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <EEPROM_Init+0x1b8>)
 8001910:	609a      	str	r2, [r3, #8]

  navPID_PARAM.kP = readFloat(20);
 8001912:	2014      	movs	r0, #20
 8001914:	f000 f8d2 	bl	8001abc <readFloat>
 8001918:	4602      	mov	r2, r0
 800191a:	4b5c      	ldr	r3, [pc, #368]	; (8001a8c <EEPROM_Init+0x1bc>)
 800191c:	601a      	str	r2, [r3, #0]
  navPID_PARAM.kI = readFloat(24);
 800191e:	2018      	movs	r0, #24
 8001920:	f000 f8cc 	bl	8001abc <readFloat>
 8001924:	4602      	mov	r2, r0
 8001926:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <EEPROM_Init+0x1bc>)
 8001928:	605a      	str	r2, [r3, #4]
  navPID_PARAM.kD = readFloat(28);
 800192a:	201c      	movs	r0, #28
 800192c:	f000 f8c6 	bl	8001abc <readFloat>
 8001930:	4602      	mov	r2, r0
 8001932:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <EEPROM_Init+0x1bc>)
 8001934:	609a      	str	r2, [r3, #8]
  posholdPID_PARAM.Imax = readFloat(32);
 8001936:	2020      	movs	r0, #32
 8001938:	f000 f8c0 	bl	8001abc <readFloat>
 800193c:	4602      	mov	r2, r0
 800193e:	4b51      	ldr	r3, [pc, #324]	; (8001a84 <EEPROM_Init+0x1b4>)
 8001940:	60da      	str	r2, [r3, #12]
  poshold_ratePID_PARAM.Imax = readFloat(32);
 8001942:	2020      	movs	r0, #32
 8001944:	f000 f8ba 	bl	8001abc <readFloat>
 8001948:	4602      	mov	r2, r0
 800194a:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <EEPROM_Init+0x1b8>)
 800194c:	60da      	str	r2, [r3, #12]
  navPID_PARAM.Imax = readFloat(32);
 800194e:	2020      	movs	r0, #32
 8001950:	f000 f8b4 	bl	8001abc <readFloat>
 8001954:	4602      	mov	r2, r0
 8001956:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <EEPROM_Init+0x1bc>)
 8001958:	60da      	str	r2, [r3, #12]

   for(int i = 0; i < 3; i++){
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	e065      	b.n	8001a2c <EEPROM_Init+0x15c>
     pid.kp1[i] = readFloat(36 + (4*i));  //Dual_PID
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3309      	adds	r3, #9
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f8a8 	bl	8001abc <readFloat>
 800196c:	4601      	mov	r1, r0
 800196e:	4a48      	ldr	r2, [pc, #288]	; (8001a90 <EEPROM_Init+0x1c0>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.ki1[i] = readFloat(48 + (4*i));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	330c      	adds	r3, #12
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f89c 	bl	8001abc <readFloat>
 8001984:	4601      	mov	r1, r0
 8001986:	4a42      	ldr	r2, [pc, #264]	; (8001a90 <EEPROM_Init+0x1c0>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3310      	adds	r3, #16
 800198c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.kp2[i] = readFloat(60 + (4*i));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	330f      	adds	r3, #15
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f890 	bl	8001abc <readFloat>
 800199c:	4601      	mov	r1, r0
 800199e:	4a3c      	ldr	r2, [pc, #240]	; (8001a90 <EEPROM_Init+0x1c0>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3306      	adds	r3, #6
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	6059      	str	r1, [r3, #4]
     pid.ki2[i] = readFloat(72 + (4*i));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3312      	adds	r3, #18
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f883 	bl	8001abc <readFloat>
 80019b6:	4601      	mov	r1, r0
 80019b8:	4a35      	ldr	r2, [pc, #212]	; (8001a90 <EEPROM_Init+0x1c0>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3312      	adds	r3, #18
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	6059      	str	r1, [r3, #4]
     pid.kd2[i] = readFloat(84 + (4*i));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3315      	adds	r3, #21
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f876 	bl	8001abc <readFloat>
 80019d0:	4601      	mov	r1, r0
 80019d2:	4a2f      	ldr	r2, [pc, #188]	; (8001a90 <EEPROM_Init+0x1c0>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	331c      	adds	r3, #28
 80019d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

     pid.kp_rate[i] = readFloat(96 + (4*i)); // Rate_PID
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3318      	adds	r3, #24
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f86a 	bl	8001abc <readFloat>
 80019e8:	4601      	mov	r1, r0
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <EEPROM_Init+0x1c0>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	330a      	adds	r3, #10
 80019f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.ki_rate[i] = readFloat(108 + (4*i));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	331b      	adds	r3, #27
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f85e 	bl	8001abc <readFloat>
 8001a00:	4601      	mov	r1, r0
 8001a02:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <EEPROM_Init+0x1c0>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3316      	adds	r3, #22
 8001a08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.kd_rate[i] = readFloat(120 + (4*i));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	331e      	adds	r3, #30
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f852 	bl	8001abc <readFloat>
 8001a18:	4601      	mov	r1, r0
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <EEPROM_Init+0x1c0>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	331e      	adds	r3, #30
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	6059      	str	r1, [r3, #4]
   for(int i = 0; i < 3; i++){
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	dd96      	ble.n	8001960 <EEPROM_Init+0x90>

   }
   magBias[0] = readFloat(132);
 8001a32:	2084      	movs	r0, #132	; 0x84
 8001a34:	f000 f842 	bl	8001abc <readFloat>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <EEPROM_Init+0x1c4>)
 8001a3c:	601a      	str	r2, [r3, #0]
   magBias[1] = readFloat(136);
 8001a3e:	2088      	movs	r0, #136	; 0x88
 8001a40:	f000 f83c 	bl	8001abc <readFloat>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <EEPROM_Init+0x1c4>)
 8001a48:	605a      	str	r2, [r3, #4]
   magBias[2] = readFloat(140);
 8001a4a:	208c      	movs	r0, #140	; 0x8c
 8001a4c:	f000 f836 	bl	8001abc <readFloat>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <EEPROM_Init+0x1c4>)
 8001a54:	609a      	str	r2, [r3, #8]
   magScale[0] = readFloat(144);
 8001a56:	2090      	movs	r0, #144	; 0x90
 8001a58:	f000 f830 	bl	8001abc <readFloat>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <EEPROM_Init+0x1c8>)
 8001a60:	601a      	str	r2, [r3, #0]
   magScale[1] = readFloat(148);
 8001a62:	2094      	movs	r0, #148	; 0x94
 8001a64:	f000 f82a 	bl	8001abc <readFloat>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <EEPROM_Init+0x1c8>)
 8001a6c:	605a      	str	r2, [r3, #4]
   magScale[2] = readFloat(152);
 8001a6e:	2098      	movs	r0, #152	; 0x98
 8001a70:	f000 f824 	bl	8001abc <readFloat>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <EEPROM_Init+0x1c8>)
 8001a78:	609a      	str	r2, [r3, #8]
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000c64 	.word	0x20000c64
 8001a88:	20000b68 	.word	0x20000b68
 8001a8c:	20000b20 	.word	0x20000b20
 8001a90:	200009b0 	.word	0x200009b0
 8001a94:	20000344 	.word	0x20000344
 8001a98:	20000f00 	.word	0x20000f00

08001a9c <writeFloat>:
}

/**
 * Write float
 */
void writeFloat(unsigned int address, float data) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  write_1(address, (uint8_t*)&data, 4);
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f817 	bl	8001ae0 <write_1>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <readFloat>:
}

/**
 * Read float
 */
float readFloat(unsigned int address) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  read_1(address, _b, 4);
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	4905      	ldr	r1, [pc, #20]	; (8001adc <readFloat+0x20>)
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f85a 	bl	8001b82 <read_1>
  return *(float*)&_b[0];
 8001ace:	4b03      	ldr	r3, [pc, #12]	; (8001adc <readFloat+0x20>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000ae4 	.word	0x20000ae4

08001ae0 <write_1>:
}

/**
 * Write sequence of n bytes
 */
void write_1(unsigned int address, uint8_t *data, int n) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  // status quo
  int c = n;            // bytes left to write
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	61fb      	str	r3, [r7, #28]
  int offD = 0;         // current offset in data pointer
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  int offP;           // current offset in page
  int nc = 0;           // next n bytes to write
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  // write alle bytes in multiple steps
  while (c > 0) {
 8001af8:	e020      	b.n	8001b3c <write_1+0x5c>
    // calc offset in page
    offP = address % PAGE_SIZE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b00:	613b      	str	r3, [r7, #16]
    // maximal 30 bytes to write
    nc = min(min(c, 30), PAGE_SIZE - offP);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	2b1e      	cmp	r3, #30
 8001b0c:	bfa8      	it	ge
 8001b0e:	231e      	movge	r3, #30
 8001b10:	4293      	cmp	r3, r2
 8001b12:	bfa8      	it	ge
 8001b14:	4613      	movge	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
    write_2(address, data, offD, nc);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f813 	bl	8001b4a <write_2>
    c-=nc;
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	61fb      	str	r3, [r7, #28]
    offD+=nc;
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	4413      	add	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
    address+=nc;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
  while (c > 0) {
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	dcdb      	bgt.n	8001afa <write_1+0x1a>
  }
}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <write_2>:

/**
 * Write sequence of n bytes from offset
 */
void write_2(unsigned int address, uint8_t *data, int offset, int n) {
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b088      	sub	sp, #32
 8001b4e:	af02      	add	r7, sp, #8
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	603b      	str	r3, [r7, #0]
    uint8_t *adr = data+offset;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
    I2C_ByteWrite_HAL(EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	b299      	uxth	r1, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	20a0      	movs	r0, #160	; 0xa0
 8001b70:	f009 fba2 	bl	800b2b8 <I2C_ByteWrite_HAL>
    HAL_Delay(10);
 8001b74:	200a      	movs	r0, #10
 8001b76:	f00a fe01 	bl	800c77c <HAL_Delay>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <read_1>:

/**
 * Read sequence of n bytes
 */
void read_1(unsigned int address, uint8_t *data, int n) {
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b088      	sub	sp, #32
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  int c = n;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	61fb      	str	r3, [r7, #28]
  int offD = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  // read until are n bytes read
  while (c > 0) {
 8001b96:	e018      	b.n	8001bca <read_1+0x48>
    // read maximal 32 bytes
    int nc = c;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	617b      	str	r3, [r7, #20]
    if (nc > 32)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	dd01      	ble.n	8001ba6 <read_1+0x24>
      nc = 32;
 8001ba2:	2320      	movs	r3, #32
 8001ba4:	617b      	str	r3, [r7, #20]
    read_2(address, data, offD, nc);
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f813 	bl	8001bd8 <read_2>
    address+=nc;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
    offD+=nc;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
    c-=nc;
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	61fb      	str	r3, [r7, #28]
  while (c > 0) {
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	dce3      	bgt.n	8001b98 <read_1+0x16>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <read_2>:


/**
 * Read sequence of n bytes to offset
 */
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b09c      	sub	sp, #112	; 0x70
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  int r = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	667b      	str	r3, [r7, #100]	; 0x64
  uint8_t pData[80];
  memset(&pData[0], n, sizeof(pData));
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	2250      	movs	r2, #80	; 0x50
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f00f fc7d 	bl	80114f2 <memset>
  I2C_ByteRead(EEPROM_ADDRESS, address, ADDRESS_SIZE, pData, n);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	b299      	uxth	r1, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f107 0214 	add.w	r2, r7, #20
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	2202      	movs	r2, #2
 8001c0a:	20a0      	movs	r0, #160	; 0xa0
 8001c0c:	f009 fb16 	bl	800b23c <I2C_ByteRead>
  while (r<n) {
 8001c10:	e00e      	b.n	8001c30 <read_2+0x58>
    data[offset+r] = pData[r];
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c16:	4413      	add	r3, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f107 0114 	add.w	r1, r7, #20
 8001c22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c24:	440a      	add	r2, r1
 8001c26:	7812      	ldrb	r2, [r2, #0]
 8001c28:	701a      	strb	r2, [r3, #0]
    r++;
 8001c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	667b      	str	r3, [r7, #100]	; 0x64
  while (r<n) {
 8001c30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dbec      	blt.n	8001c12 <read_2+0x3a>
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3768      	adds	r7, #104	; 0x68
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <quickMedianFilter3>:
#define QMF_COPY(p,v,n) { int32_t i; for (i=0; i<n; i++) p[i]=v[i]; }
#define QMF_SORTF(a,b) { if ((a)>(b)) QMF_SWAPF((a),(b)); }
#define QMF_SWAPF(a,b) { float temp=(a);(a)=(b);(b)=temp; }

int32_t quickMedianFilter3(int32_t * v)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b08b      	sub	sp, #44	; 0x2c
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    int32_t p[3];
    QMF_COPY(p, v, 3);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4c:	e00e      	b.n	8001c6c <quickMedianFilter3+0x2c>
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c60:	440b      	add	r3, r1
 8001c62:	f843 2c1c 	str.w	r2, [r3, #-28]
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	dded      	ble.n	8001c4e <quickMedianFilter3+0xe>

    QMF_SORT(p[0], p[1]); QMF_SORT(p[1], p[2]); QMF_SORT(p[0], p[1]) ;
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dd05      	ble.n	8001c86 <quickMedianFilter3+0x46>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	623b      	str	r3, [r7, #32]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dd05      	ble.n	8001c9a <quickMedianFilter3+0x5a>
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dd05      	ble.n	8001cae <quickMedianFilter3+0x6e>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	613b      	str	r3, [r7, #16]
    return p[1];
 8001cae:	693b      	ldr	r3, [r7, #16]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	372c      	adds	r7, #44	; 0x2c
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <get_P>:
} PID;
PID posholdPID[2];
PID poshold_ratePID[2];
PID navPID[2];

int32_t get_P(int32_t error, struct PID_PARAM_* pid) {
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
	return (float)error * pid->kP;
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff f823 	bl	8000d10 <__aeabi_i2f>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7ff f870 	bl	8000db8 <__aeabi_fmul>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fa48 	bl	8001170 <__aeabi_f2iz>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <get_I>:

int32_t get_I(int32_t error, float* dt, struct PID_* pid, struct PID_PARAM_* pid_param) {
 8001cea:	b5b0      	push	{r4, r5, r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
	pid->integrator += ((float)error * pid_param->kI) * *dt;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681c      	ldr	r4, [r3, #0]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7ff f807 	bl	8000d10 <__aeabi_i2f>
 8001d02:	4602      	mov	r2, r0
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7ff f854 	bl	8000db8 <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f7ff f84c 	bl	8000db8 <__aeabi_fmul>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4619      	mov	r1, r3
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7fe ff3f 	bl	8000ba8 <__addsf3>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	601a      	str	r2, [r3, #0]
	pid->integrator = constrain(pid->integrator,-pid_param->Imax,pid_param->Imax);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fa1a 	bl	8001170 <__aeabi_f2iz>
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fa12 	bl	8001170 <__aeabi_f2iz>
 8001d4c:	4605      	mov	r5, r0
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fa0c 	bl	8001170 <__aeabi_f2iz>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f003 fd46 	bl	80057f0 <constrain>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ffd2 	bl	8000d10 <__aeabi_i2f>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
	return pid->integrator;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f9fa 	bl	8001170 <__aeabi_f2iz>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d88 <get_D>:

int32_t get_D(int32_t input, float* dt, struct PID_* pid, struct PID_PARAM_* pid_param) { // dt in milliseconds
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
	pid->derivative = (input - pid->last_input) / *dt;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe ffb6 	bl	8000d10 <__aeabi_i2f>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f7ff f8b7 	bl	8000f20 <__aeabi_fdiv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	461a      	mov	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]

	/// Low pass filter cut frequency for derivative calculation.
	float filter = 7.9577e-3; // Set to  "1 / ( 2 * PI * f_cut )";
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <get_D+0xb4>)
 8001dbc:	617b      	str	r3, [r7, #20]
	// f_cut = 25 Hz -> _filter =  6.3662e-3
	// f_cut = 30 Hz -> _filter =  5.3052e-3

	// discrete low pass filter, cuts out the
	// high frequency noise that can drive the controller crazy
	pid->derivative = pid->lastderivative + (*dt / ( filter + *dt)) * (pid->derivative - pid->lastderivative);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689c      	ldr	r4, [r3, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	681d      	ldr	r5, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6979      	ldr	r1, [r7, #20]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe feeb 	bl	8000ba8 <__addsf3>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	f7ff f8a2 	bl	8000f20 <__aeabi_fdiv>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461d      	mov	r5, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f7fe feda 	bl	8000ba4 <__aeabi_fsub>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4619      	mov	r1, r3
 8001df4:	4628      	mov	r0, r5
 8001df6:	f7fe ffdf 	bl	8000db8 <__aeabi_fmul>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7fe fed2 	bl	8000ba8 <__addsf3>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	611a      	str	r2, [r3, #16]
	// update state
	pid->last_input = input;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]
	pid->lastderivative    = pid->derivative;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	609a      	str	r2, [r3, #8]
	// add in derivative component
	return pid_param->kD * pid->derivative;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	4619      	mov	r1, r3
 8001e24:	4610      	mov	r0, r2
 8001e26:	f7fe ffc7 	bl	8000db8 <__aeabi_fmul>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f99f 	bl	8001170 <__aeabi_f2iz>
 8001e32:	4603      	mov	r3, r0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3c:	3c026103 	.word	0x3c026103

08001e40 <reset_PID>:

void reset_PID(struct PID_* pid) {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	pid->integrator = 0;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
	pid->last_input = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	605a      	str	r2, [r3, #4]
	pid->lastderivative = 0;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <gps_Init>:
#ifdef _USE_HW_CLI
static void cliGps(cli_args_t *args);
#endif

void gps_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
	uint32_t baud;

	baud = uartGetBaud(_DEF_UART1);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f00a f9ee 	bl	800c250 <uartGetBaud>
 8001e74:	6078      	str	r0, [r7, #4]

	if (baud != 9600)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8001e7c:	d004      	beq.n	8001e88 <gps_Init+0x20>
	{
		uartSetBaud(_DEF_UART1, 9600);
 8001e7e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001e82:	2000      	movs	r0, #0
 8001e84:	f00a fa04 	bl	800c290 <uartSetBaud>
	}
	uartWriteIT(_DEF_UART1, (uint8_t *)Disable_GPGSV, 11);
 8001e88:	220b      	movs	r2, #11
 8001e8a:	4917      	ldr	r1, [pc, #92]	; (8001ee8 <gps_Init+0x80>)
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f00a f977 	bl	800c180 <uartWriteIT>
	HAL_Delay(350);
 8001e92:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001e96:	f00a fc71 	bl	800c77c <HAL_Delay>
	uartWriteIT(_DEF_UART1, (uint8_t *)Set_to_5Hz, 14);
 8001e9a:	220e      	movs	r2, #14
 8001e9c:	4913      	ldr	r1, [pc, #76]	; (8001eec <gps_Init+0x84>)
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f00a f96e 	bl	800c180 <uartWriteIT>
	HAL_Delay(350);
 8001ea4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001ea8:	f00a fc68 	bl	800c77c <HAL_Delay>
	uartWriteIT(_DEF_UART1, (uint8_t *)Set_to_57kbps, 28);
 8001eac:	221c      	movs	r2, #28
 8001eae:	4910      	ldr	r1, [pc, #64]	; (8001ef0 <gps_Init+0x88>)
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f00a f965 	bl	800c180 <uartWriteIT>
	HAL_Delay(350);
 8001eb6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001eba:	f00a fc5f 	bl	800c77c <HAL_Delay>

	baud = uartGetBaud(_DEF_UART1);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f00a f9c6 	bl	800c250 <uartGetBaud>
 8001ec4:	6078      	str	r0, [r7, #4]

	if (baud != 57600)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8001ecc:	d004      	beq.n	8001ed8 <gps_Init+0x70>
	{
		uartSetBaud(_DEF_UART1, 57600);
 8001ece:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f00a f9dc 	bl	800c290 <uartSetBaud>
	}

#ifdef _USE_HW_CLI
	cliAdd("gps", cliGps);
 8001ed8:	4906      	ldr	r1, [pc, #24]	; (8001ef4 <gps_Init+0x8c>)
 8001eda:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <gps_Init+0x90>)
 8001edc:	f008 ffc6 	bl	800ae6c <cliAdd>
#endif
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	08019f7c 	.word	0x08019f7c
 8001eec:	08019f88 	.word	0x08019f88
 8001ef0:	08019f98 	.word	0x08019f98
 8001ef4:	08002e2d 	.word	0x08002e2d
 8001ef8:	08019b60 	.word	0x08019b60

08001efc <constrain_int16>:
//Author : EOSBandi
//Based on code and ideas from the Arducopter team: Jason Short,Randy Mackay, Pat Hickey, Jose Julio, Jani Hirvinen
//Andrew Tridgell, Justin Beech, Adam Rivera, Jean-Louis Naudin, Roberto Navoni

//original constraint does not work with variables
int16_t constrain_int16(int16_t amt, int16_t low, int16_t high) {
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
 8001f06:	460b      	mov	r3, r1
 8001f08:	80bb      	strh	r3, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	807b      	strh	r3, [r7, #2]
	return ((amt)<(low)?(low):((amt)>(high)?(high):(amt)));
 8001f0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	db08      	blt.n	8001f2c <constrain_int16+0x30>
 8001f1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	bfa8      	it	ge
 8001f26:	4613      	movge	r3, r2
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	e001      	b.n	8001f30 <constrain_int16+0x34>
 8001f2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
	...

08001f3c <GPS_mode_check>:

void GPS_mode_check(void){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
	uint8_t gps_modes_check = (rcOptions[BOXLAND]<< 3) + (rcOptions[BOXGPSHOME]<< 2) + (rcOptions[BOXGPSHOLD]<<1) + (rcOptions[BOXGPSNAV]);
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <GPS_mode_check+0x100>)
 8001f44:	7a9b      	ldrb	r3, [r3, #10]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b3c      	ldr	r3, [pc, #240]	; (800203c <GPS_mode_check+0x100>)
 8001f4c:	79db      	ldrb	r3, [r3, #7]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b39      	ldr	r3, [pc, #228]	; (800203c <GPS_mode_check+0x100>)
 8001f58:	7a1b      	ldrb	r3, [r3, #8]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b36      	ldr	r3, [pc, #216]	; (800203c <GPS_mode_check+0x100>)
 8001f64:	7a5b      	ldrb	r3, [r3, #9]
 8001f66:	4413      	add	r3, r2
 8001f68:	71fb      	strb	r3, [r7, #7]
	if(f.ARMED){
 8001f6a:	4b35      	ldr	r3, [pc, #212]	; (8002040 <GPS_mode_check+0x104>)
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d056      	beq.n	8002020 <GPS_mode_check+0xe4>
		if(GPS.fixquality){
 8001f72:	4b34      	ldr	r3, [pc, #208]	; (8002044 <GPS_mode_check+0x108>)
 8001f74:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d044      	beq.n	8002006 <GPS_mode_check+0xca>
			if(GPS.satellites > 5){
 8001f7c:	4b31      	ldr	r3, [pc, #196]	; (8002044 <GPS_mode_check+0x108>)
 8001f7e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d924      	bls.n	8001fd0 <GPS_mode_check+0x94>
				if(prv_gps_modes !=gps_modes_check){
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <GPS_mode_check+0x10c>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	79fa      	ldrb	r2, [r7, #7]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d050      	beq.n	8002032 <GPS_mode_check+0xf6>
					NAV_error = NAV_ERROR_NONE;
 8001f90:	4b2e      	ldr	r3, [pc, #184]	; (800204c <GPS_mode_check+0x110>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
					if(rcOptions[BOXGPSHOLD]){
 8001f96:	4b29      	ldr	r3, [pc, #164]	; (800203c <GPS_mode_check+0x100>)
 8001f98:	7a1b      	ldrb	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <GPS_mode_check+0x7c>
						f.GPS_MODE = GPS_MODE_HOLD;
 8001f9e:	4b28      	ldr	r3, [pc, #160]	; (8002040 <GPS_mode_check+0x104>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	72da      	strb	r2, [r3, #11]
						GPS_set_next_wp(&GPS_coord[LAT], &GPS_coord[LON], &GPS_coord[LAT], &GPS_coord[LON]); //hold at the current position
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <GPS_mode_check+0x114>)
 8001fa6:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <GPS_mode_check+0x118>)
 8001fa8:	4929      	ldr	r1, [pc, #164]	; (8002050 <GPS_mode_check+0x114>)
 8001faa:	482a      	ldr	r0, [pc, #168]	; (8002054 <GPS_mode_check+0x118>)
 8001fac:	f000 fb50 	bl	8002650 <GPS_set_next_wp>
						//set_new_altitude(alt.EstAlt);                                //and current altitude
						NAV_state = NAV_STATE_HOLD_INFINIT;
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <GPS_mode_check+0x11c>)
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e007      	b.n	8001fc8 <GPS_mode_check+0x8c>
					}else
					{
            f.GPS_MODE = GPS_MODE_NONE;
 8001fb8:	4b21      	ldr	r3, [pc, #132]	; (8002040 <GPS_mode_check+0x104>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	72da      	strb	r2, [r3, #11]
//            f.GPS_BARO_MODE = false;
//            f.THROTTLE_IGNORED = false;
//            f.LAND_IN_PROGRESS = 0;
//            f.THROTTLE_IGNORED = 0;
            NAV_state = NAV_STATE_NONE;
 8001fbe:	4b26      	ldr	r3, [pc, #152]	; (8002058 <GPS_mode_check+0x11c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
            GPS_reset_nav();
 8001fc4:	f000 fbc2 	bl	800274c <GPS_reset_nav>
					}
					prv_gps_modes = gps_modes_check;
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <GPS_mode_check+0x10c>)
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	7013      	strb	r3, [r2, #0]
		NAV_state = NAV_STATE_NONE;
		//NAV_paused_at = 0;
		NAV_error = NAV_ERROR_DISARMED;
		//GPS_reset_nav();
	}
}
 8001fce:	e030      	b.n	8002032 <GPS_mode_check+0xf6>
				if (f.GPS_MODE == GPS_MODE_HOLD || f.GPS_MODE == GPS_MODE_RTH) {
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <GPS_mode_check+0x104>)
 8001fd2:	7adb      	ldrb	r3, [r3, #11]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d003      	beq.n	8001fe0 <GPS_mode_check+0xa4>
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <GPS_mode_check+0x104>)
 8001fda:	7adb      	ldrb	r3, [r3, #11]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d10b      	bne.n	8001ff8 <GPS_mode_check+0xbc>
					f.GPS_MODE = GPS_MODE_NONE;
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <GPS_mode_check+0x104>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	72da      	strb	r2, [r3, #11]
					NAV_state = NAV_STATE_NONE;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <GPS_mode_check+0x11c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
					NAV_error = NAV_ERROR_SPOILED_GPS;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <GPS_mode_check+0x110>)
 8001fee:	2202      	movs	r2, #2
 8001ff0:	701a      	strb	r2, [r3, #0]
					prv_gps_modes = 0xff;                                          //invalidates mode check, to allow re evaluate rcOptions when numsats raised again
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <GPS_mode_check+0x10c>)
 8001ff4:	22ff      	movs	r2, #255	; 0xff
 8001ff6:	701a      	strb	r2, [r3, #0]
				nav[0] = 0; nav[1] = 0;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <GPS_mode_check+0x120>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <GPS_mode_check+0x120>)
 8002000:	2200      	movs	r2, #0
 8002002:	805a      	strh	r2, [r3, #2]
}
 8002004:	e015      	b.n	8002032 <GPS_mode_check+0xf6>
			f.GPS_MODE = GPS_MODE_NONE;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <GPS_mode_check+0x104>)
 8002008:	2200      	movs	r2, #0
 800200a:	72da      	strb	r2, [r3, #11]
			NAV_state = NAV_STATE_NONE;
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <GPS_mode_check+0x11c>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
			NAV_error = NAV_ERROR_GPS_FIX_LOST;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <GPS_mode_check+0x110>)
 8002014:	2209      	movs	r2, #9
 8002016:	701a      	strb	r2, [r3, #0]
			prv_gps_modes = 0xff;                                              //Gives a chance to restart mission when regain fix
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <GPS_mode_check+0x10c>)
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	701a      	strb	r2, [r3, #0]
}
 800201e:	e008      	b.n	8002032 <GPS_mode_check+0xf6>
		f.GPS_MODE = GPS_MODE_NONE;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <GPS_mode_check+0x104>)
 8002022:	2200      	movs	r2, #0
 8002024:	72da      	strb	r2, [r3, #11]
		NAV_state = NAV_STATE_NONE;
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <GPS_mode_check+0x11c>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
		NAV_error = NAV_ERROR_DISARMED;
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <GPS_mode_check+0x110>)
 800202e:	220a      	movs	r2, #10
 8002030:	701a      	strb	r2, [r3, #0]
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000d34 	.word	0x20000d34
 8002040:	20000ed4 	.word	0x20000ed4
 8002044:	20000b78 	.word	0x20000b78
 8002048:	20000282 	.word	0x20000282
 800204c:	20000281 	.word	0x20000281
 8002050:	20000c60 	.word	0x20000c60
 8002054:	20000c5c 	.word	0x20000c5c
 8002058:	20000280 	.word	0x20000280
 800205c:	20000b30 	.word	0x20000b30

08002060 <GPS_Compute>:

uint8_t GPS_Compute(void) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af02      	add	r7, sp, #8
	uint32_t dist;        //temp variable to store dist to copter
	int32_t  dir;         //temp variable to store dir to copter
	static uint32_t nav_loopTimer;

	//check that we have a valid frame, if not then return immediatly
	if (GPS.GPS_Frame == 0||!GPS_virtual) return 0; else GPS.GPS_Frame = 0;
 8002066:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <GPS_Compute+0x164>)
 8002068:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <GPS_Compute+0x18>
 8002070:	4b55      	ldr	r3, [pc, #340]	; (80021c8 <GPS_Compute+0x168>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <GPS_Compute+0x1c>
 8002078:	2300      	movs	r3, #0
 800207a:	e09f      	b.n	80021bc <GPS_Compute+0x15c>
 800207c:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <GPS_Compute+0x164>)
 800207e:	2200      	movs	r2, #0
 8002080:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

	//check home position and set it if it was not set
	if (GPS.fixquality && GPS.satellites >= 5)
 8002084:	4b4f      	ldr	r3, [pc, #316]	; (80021c4 <GPS_Compute+0x164>)
 8002086:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8092 	beq.w	80021b4 <GPS_Compute+0x154>
 8002090:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <GPS_Compute+0x164>)
 8002092:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002096:	2b04      	cmp	r3, #4
 8002098:	f240 808c 	bls.w	80021b4 <GPS_Compute+0x154>
	{
		if (!f.ARMED) f.GPS_FIX_HOME = 0;
 800209c:	4b4b      	ldr	r3, [pc, #300]	; (80021cc <GPS_Compute+0x16c>)
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <GPS_Compute+0x4a>
 80020a4:	4b49      	ldr	r3, [pc, #292]	; (80021cc <GPS_Compute+0x16c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	745a      	strb	r2, [r3, #17]
		if (!f.GPS_FIX_HOME && f.ARMED)
 80020aa:	4b48      	ldr	r3, [pc, #288]	; (80021cc <GPS_Compute+0x16c>)
 80020ac:	7c5b      	ldrb	r3, [r3, #17]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <GPS_Compute+0x5e>
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <GPS_Compute+0x16c>)
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <GPS_Compute+0x5e>
		{
			GPS_reset_home_position();
 80020ba:	f000 fb17 	bl	80026ec <GPS_reset_home_position>
			}
		}

		//dTnav calculation
		//Time for calculating x,y speed and navigation pids
		dTnav = (float)(millis() - nav_loopTimer)/ 1000.0;
 80020be:	f7ff f9fd 	bl	80014bc <millis>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <GPS_Compute+0x170>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fe1c 	bl	8000d08 <__aeabi_ui2f>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4940      	ldr	r1, [pc, #256]	; (80021d4 <GPS_Compute+0x174>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe ff23 	bl	8000f20 <__aeabi_fdiv>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	4b3e      	ldr	r3, [pc, #248]	; (80021d8 <GPS_Compute+0x178>)
 80020e0:	601a      	str	r2, [r3, #0]
		nav_loopTimer = millis();
 80020e2:	f7ff f9eb 	bl	80014bc <millis>
 80020e6:	4602      	mov	r2, r0
 80020e8:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <GPS_Compute+0x170>)
 80020ea:	601a      	str	r2, [r3, #0]

		// prevent runup from bad GPS
		dTnav = min(dTnav, 1.0);
 80020ec:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <GPS_Compute+0x178>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fffd 	bl	80010f4 <__aeabi_fcmplt>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <GPS_Compute+0xa6>
 8002100:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <GPS_Compute+0x178>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	e001      	b.n	800210a <GPS_Compute+0xaa>
 8002106:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800210a:	4a33      	ldr	r2, [pc, #204]	; (80021d8 <GPS_Compute+0x178>)
 800210c:	6013      	str	r3, [r2, #0]

		//calculate distance and bearings for gui and other stuff continously - From home to copter
		GPS_bearing(&GPS_coord[LAT],&GPS_coord[LON],&GPS_home[LAT],&GPS_home[LON],&dir);
 800210e:	463b      	mov	r3, r7
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4b32      	ldr	r3, [pc, #200]	; (80021dc <GPS_Compute+0x17c>)
 8002114:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <GPS_Compute+0x180>)
 8002116:	4933      	ldr	r1, [pc, #204]	; (80021e4 <GPS_Compute+0x184>)
 8002118:	4833      	ldr	r0, [pc, #204]	; (80021e8 <GPS_Compute+0x188>)
 800211a:	f000 f879 	bl	8002210 <GPS_bearing>
		GPS_distance_cm(&GPS_coord[LAT],&GPS_coord[LON],&GPS_home[LAT],&GPS_home[LON],&dist);
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <GPS_Compute+0x17c>)
 8002124:	4a2e      	ldr	r2, [pc, #184]	; (80021e0 <GPS_Compute+0x180>)
 8002126:	492f      	ldr	r1, [pc, #188]	; (80021e4 <GPS_Compute+0x184>)
 8002128:	482f      	ldr	r0, [pc, #188]	; (80021e8 <GPS_Compute+0x188>)
 800212a:	f000 f8d5 	bl	80022d8 <GPS_distance_cm>
		GPS_distanceToHome = dist/100;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2e      	ldr	r2, [pc, #184]	; (80021ec <GPS_Compute+0x18c>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <GPS_Compute+0x190>)
 800213c:	801a      	strh	r2, [r3, #0]
		GPS_directionToHome = dir/100;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	4a2a      	ldr	r2, [pc, #168]	; (80021ec <GPS_Compute+0x18c>)
 8002142:	fb82 1203 	smull	r1, r2, r2, r3
 8002146:	1152      	asrs	r2, r2, #5
 8002148:	17db      	asrs	r3, r3, #31
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	b21a      	sxth	r2, r3
 800214e:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <GPS_Compute+0x194>)
 8002150:	801a      	strh	r2, [r3, #0]

		if (!GPS.fixquality)
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <GPS_Compute+0x164>)
 8002154:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <GPS_Compute+0x108>
		{     //If we don't have home set, do not display anything
			GPS_distanceToHome = 0;
 800215c:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <GPS_Compute+0x190>)
 800215e:	2200      	movs	r2, #0
 8002160:	801a      	strh	r2, [r3, #0]
			GPS_directionToHome = 0;
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <GPS_Compute+0x194>)
 8002164:	2200      	movs	r2, #0
 8002166:	801a      	strh	r2, [r3, #0]
		}

		//calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
		GPS_calc_velocity();
 8002168:	f000 f90c 	bl	8002384 <GPS_calc_velocity>

		if(f.GPS_MODE != GPS_MODE_NONE)
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <GPS_Compute+0x16c>)
 800216e:	7adb      	ldrb	r3, [r3, #11]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01f      	beq.n	80021b4 <GPS_Compute+0x154>
		{
			//do gps nav calculations here, these are common for nav and poshold
			GPS_bearing(&GPS_coord[LAT],&GPS_coord[LON],&GPS_WP[LAT],&GPS_WP[LON],&target_bearing);
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <GPS_Compute+0x198>)
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	4b20      	ldr	r3, [pc, #128]	; (80021fc <GPS_Compute+0x19c>)
 800217a:	4a21      	ldr	r2, [pc, #132]	; (8002200 <GPS_Compute+0x1a0>)
 800217c:	4919      	ldr	r1, [pc, #100]	; (80021e4 <GPS_Compute+0x184>)
 800217e:	481a      	ldr	r0, [pc, #104]	; (80021e8 <GPS_Compute+0x188>)
 8002180:	f000 f846 	bl	8002210 <GPS_bearing>
			GPS_distance_cm(&GPS_coord[LAT],&GPS_coord[LON],&GPS_WP[LAT],&GPS_WP[LON],&wp_distance);
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <GPS_Compute+0x1a4>)
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <GPS_Compute+0x19c>)
 800218a:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <GPS_Compute+0x1a0>)
 800218c:	4915      	ldr	r1, [pc, #84]	; (80021e4 <GPS_Compute+0x184>)
 800218e:	4816      	ldr	r0, [pc, #88]	; (80021e8 <GPS_Compute+0x188>)
 8002190:	f000 f8a2 	bl	80022d8 <GPS_distance_cm>
			GPS_calc_location_error(&GPS_WP[LAT],&GPS_WP[LON],&GPS_coord[LAT],&GPS_coord[LON]);
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <GPS_Compute+0x184>)
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <GPS_Compute+0x188>)
 8002198:	4918      	ldr	r1, [pc, #96]	; (80021fc <GPS_Compute+0x19c>)
 800219a:	4819      	ldr	r0, [pc, #100]	; (8002200 <GPS_Compute+0x1a0>)
 800219c:	f000 f94e 	bl	800243c <GPS_calc_location_error>

			switch(NAV_state)
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <GPS_Compute+0x1a8>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <GPS_Compute+0x158>
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d000      	beq.n	80021ae <GPS_Compute+0x14e>
				case NAV_STATE_HOLD_INFINIT:
					GPS_calc_poshold();
					break;

				default:
					break;
 80021ac:	e005      	b.n	80021ba <GPS_Compute+0x15a>
					GPS_calc_poshold();
 80021ae:	f000 f971 	bl	8002494 <GPS_calc_poshold>
					break;
 80021b2:	e002      	b.n	80021ba <GPS_Compute+0x15a>
			}
		}
 80021b4:	bf00      	nop
 80021b6:	e000      	b.n	80021ba <GPS_Compute+0x15a>
          break;
 80021b8:	bf00      	nop
	}
	return 1;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000b78 	.word	0x20000b78
 80021c8:	20000678 	.word	0x20000678
 80021cc:	20000ed4 	.word	0x20000ed4
 80021d0:	200002b4 	.word	0x200002b4
 80021d4:	447a0000 	.word	0x447a0000
 80021d8:	20000284 	.word	0x20000284
 80021dc:	20000c54 	.word	0x20000c54
 80021e0:	20000c50 	.word	0x20000c50
 80021e4:	20000c60 	.word	0x20000c60
 80021e8:	20000c5c 	.word	0x20000c5c
 80021ec:	51eb851f 	.word	0x51eb851f
 80021f0:	20000c4c 	.word	0x20000c4c
 80021f4:	20000c58 	.word	0x20000c58
 80021f8:	20000c40 	.word	0x20000c40
 80021fc:	200002a0 	.word	0x200002a0
 8002200:	2000029c 	.word	0x2000029c
 8002204:	20000c14 	.word	0x20000c14
 8002208:	20000280 	.word	0x20000280
 800220c:	00000000 	.word	0x00000000

08002210 <GPS_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision

void GPS_bearing(int32_t* lat1, int32_t* lon1, int32_t* lat2, int32_t* lon2, int32_t* bearing) {
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
	int32_t off_x = *lon2 - *lon1;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
	int32_t off_y = (*lat2 - *lat1) / GPS_scaleLonDown;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe fd6b 	bl	8000d10 <__aeabi_i2f>
 800223a:	4602      	mov	r2, r0
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <GPS_bearing+0xc0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f7fe fe6c 	bl	8000f20 <__aeabi_fdiv>
 8002248:	4603      	mov	r3, r0
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe ff90 	bl	8001170 <__aeabi_f2iz>
 8002250:	4603      	mov	r3, r0
 8002252:	613b      	str	r3, [r7, #16]
	*bearing = 9000 + atan2(-off_y, off_x) * 5729.57795f;      //Convert the output redians to 100xdeg
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	425b      	negs	r3, r3
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f8ed 	bl	8000438 <__aeabi_i2d>
 800225e:	4604      	mov	r4, r0
 8002260:	460d      	mov	r5, r1
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7fe f8e8 	bl	8000438 <__aeabi_i2d>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f013 fada 	bl	8015828 <atan2>
 8002274:	a312      	add	r3, pc, #72	; (adr r3, 80022c0 <GPS_bearing+0xb0>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f947 	bl	800050c <__aeabi_dmul>
 800227e:	4603      	mov	r3, r0
 8002280:	460c      	mov	r4, r1
 8002282:	4618      	mov	r0, r3
 8002284:	4621      	mov	r1, r4
 8002286:	a310      	add	r3, pc, #64	; (adr r3, 80022c8 <GPS_bearing+0xb8>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fd ff88 	bl	80001a0 <__adddf3>
 8002290:	4603      	mov	r3, r0
 8002292:	460c      	mov	r4, r1
 8002294:	4618      	mov	r0, r3
 8002296:	4621      	mov	r1, r4
 8002298:	f7fe fbe8 	bl	8000a6c <__aeabi_d2iz>
 800229c:	4602      	mov	r2, r0
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	601a      	str	r2, [r3, #0]
	if (*bearing < 0) *bearing += 36000;
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da06      	bge.n	80022b8 <GPS_bearing+0xa8>
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80022b2:	33a0      	adds	r3, #160	; 0xa0
 80022b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bdb0      	pop	{r4, r5, r7, pc}
 80022c0:	00000000 	.word	0x00000000
 80022c4:	40b66194 	.word	0x40b66194
 80022c8:	00000000 	.word	0x00000000
 80022cc:	40c19400 	.word	0x40c19400
 80022d0:	2000028c 	.word	0x2000028c
 80022d4:	00000000 	.word	0x00000000

080022d8 <GPS_distance_cm>:

void GPS_distance_cm(int32_t* lat1, int32_t* lon1, int32_t* lat2, int32_t* lon2,uint32_t* dist) {
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
	float dLat = (float)(*lat2 - *lat1);                                    // difference of latitude in 1/10 000 000 degrees
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fd0d 	bl	8000d10 <__aeabi_i2f>
 80022f6:	4603      	mov	r3, r0
 80022f8:	617b      	str	r3, [r7, #20]
	float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown; //x
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fd03 	bl	8000d10 <__aeabi_i2f>
 800230a:	4602      	mov	r2, r0
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <GPS_distance_cm+0xa8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f7fe fd50 	bl	8000db8 <__aeabi_fmul>
 8002318:	4603      	mov	r3, r0
 800231a:	613b      	str	r3, [r7, #16]
	*dist = sqrt(sq(dLat) + sq(dLon)) * 1.11318845f;
 800231c:	6979      	ldr	r1, [r7, #20]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7fe fd4a 	bl	8000db8 <__aeabi_fmul>
 8002324:	4603      	mov	r3, r0
 8002326:	461c      	mov	r4, r3
 8002328:	6939      	ldr	r1, [r7, #16]
 800232a:	6938      	ldr	r0, [r7, #16]
 800232c:	f7fe fd44 	bl	8000db8 <__aeabi_fmul>
 8002330:	4603      	mov	r3, r0
 8002332:	4619      	mov	r1, r3
 8002334:	4620      	mov	r0, r4
 8002336:	f7fe fc37 	bl	8000ba8 <__addsf3>
 800233a:	4603      	mov	r3, r0
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f88d 	bl	800045c <__aeabi_f2d>
 8002342:	4603      	mov	r3, r0
 8002344:	460c      	mov	r4, r1
 8002346:	4618      	mov	r0, r3
 8002348:	4621      	mov	r1, r4
 800234a:	f013 fc27 	bl	8015b9c <sqrt>
 800234e:	a30a      	add	r3, pc, #40	; (adr r3, 8002378 <GPS_distance_cm+0xa0>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe f8da 	bl	800050c <__aeabi_dmul>
 8002358:	4603      	mov	r3, r0
 800235a:	460c      	mov	r4, r1
 800235c:	4618      	mov	r0, r3
 800235e:	4621      	mov	r1, r4
 8002360:	f7fe fbac 	bl	8000abc <__aeabi_d2uiz>
 8002364:	4602      	mov	r2, r0
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	601a      	str	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
 8002372:	bf00      	nop
 8002374:	f3af 8000 	nop.w
 8002378:	c0000000 	.word	0xc0000000
 800237c:	3ff1cf9e 	.word	0x3ff1cf9e
 8002380:	2000028c 	.word	0x2000028c

08002384 <GPS_calc_velocity>:
// Note: we use gps locations directly to calculate velocity instead of asking gps for velocity because
//       this is more accurate below 1.5m/s
// Note: even though the positions are projected using a lead filter, the velocities are calculated
//       from the unaltered gps locations.  We do not want noise from our lead filter affecting velocity
//*******************************************************************************************************
static void GPS_calc_velocity(void){
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
	static int16_t speed_old[2] = {0,0};
	static int32_t last[2] = {0,0};
	static uint8_t init = 0;

	if (init) {
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <GPS_calc_velocity+0xa0>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d039      	beq.n	8002406 <GPS_calc_velocity+0x82>
		float tmp = 1.0/dTnav;
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <GPS_calc_velocity+0xa4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4619      	mov	r1, r3
 8002398:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800239c:	f7fe fdc0 	bl	8000f20 <__aeabi_fdiv>
 80023a0:	4603      	mov	r3, r0
 80023a2:	607b      	str	r3, [r7, #4]
		actual_speed[__X] = (float)(GPS_coord[LON] - last[LON]) *  GPS_scaleLonDown * tmp;
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <GPS_calc_velocity+0xa8>)
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <GPS_calc_velocity+0xac>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fcae 	bl	8000d10 <__aeabi_i2f>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <GPS_calc_velocity+0xb0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f7fe fcfb 	bl	8000db8 <__aeabi_fmul>
 80023c2:	4603      	mov	r3, r0
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fcf6 	bl	8000db8 <__aeabi_fmul>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fece 	bl	8001170 <__aeabi_f2iz>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <GPS_calc_velocity+0xb4>)
 80023da:	805a      	strh	r2, [r3, #2]
		actual_speed[__Y] = (float)(GPS_coord[LAT]  - last[LAT])  * tmp;
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <GPS_calc_velocity+0xa8>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <GPS_calc_velocity+0xac>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fc92 	bl	8000d10 <__aeabi_i2f>
 80023ec:	4603      	mov	r3, r0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe fce1 	bl	8000db8 <__aeabi_fmul>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe feb9 	bl	8001170 <__aeabi_f2iz>
 80023fe:	4603      	mov	r3, r0
 8002400:	b21a      	sxth	r2, r3
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <GPS_calc_velocity+0xb4>)
 8002404:	801a      	strh	r2, [r3, #0]
		//
		//      speed_old[_X] = actual_speed[_X];
		//      speed_old[_Y] = actual_speed[_Y];
		//    }
	}
	init=1;
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <GPS_calc_velocity+0xa0>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]

	last[LON] = GPS_coord[LON];
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <GPS_calc_velocity+0xa8>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a07      	ldr	r2, [pc, #28]	; (8002430 <GPS_calc_velocity+0xac>)
 8002412:	6053      	str	r3, [r2, #4]
	last[LAT] = GPS_coord[LAT];
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <GPS_calc_velocity+0xa8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a05      	ldr	r2, [pc, #20]	; (8002430 <GPS_calc_velocity+0xac>)
 800241a:	6013      	str	r3, [r2, #0]

	//  if (GPS_conf.lead_filter) {
	//    GPS_coord_lead[LON] = xLeadFilter.get_position(GPS_coord[LON], actual_speed[_X], GPS_LAG);
	//    GPS_coord_lead[LAT] = yLeadFilter.get_position(GPS_coord[LAT], actual_speed[_Y], GPS_LAG);
	//  }
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200002b8 	.word	0x200002b8
 8002428:	20000284 	.word	0x20000284
 800242c:	20000c5c 	.word	0x20000c5c
 8002430:	200002bc 	.word	0x200002bc
 8002434:	2000028c 	.word	0x2000028c
 8002438:	20000288 	.word	0x20000288

0800243c <GPS_calc_location_error>:
//  1000  = 11m    = 36 feet
//  1800  = 19.80m = 60 feet
//  3000  = 33m
// 10000  = 111m
//
static void GPS_calc_location_error( int32_t* target_lat, int32_t* target_lng, int32_t* gps_lat, int32_t* gps_lng ) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
	error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;  // X Error
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fc5b 	bl	8000d10 <__aeabi_i2f>
 800245a:	4602      	mov	r2, r0
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <GPS_calc_location_error+0x50>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f7fe fca8 	bl	8000db8 <__aeabi_fmul>
 8002468:	4603      	mov	r3, r0
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fe80 	bl	8001170 <__aeabi_f2iz>
 8002470:	4602      	mov	r2, r0
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <GPS_calc_location_error+0x54>)
 8002474:	605a      	str	r2, [r3, #4]
	error[LAT] = *target_lat - *gps_lat; // Y Error
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	4a03      	ldr	r2, [pc, #12]	; (8002490 <GPS_calc_location_error+0x54>)
 8002482:	6013      	str	r3, [r2, #0]
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000028c 	.word	0x2000028c
 8002490:	20000294 	.word	0x20000294

08002494 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
// TODO: check that the poshold target speed constraint can be increased for snappier poshold lock
static void GPS_calc_poshold(void) {
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
	int32_t d;
	int32_t target_speed;
	uint8_t axis;

	for (axis=0;axis<2;axis++) {
 800249a:	2300      	movs	r3, #0
 800249c:	72fb      	strb	r3, [r7, #11]
 800249e:	e08c      	b.n	80025ba <GPS_calc_poshold+0x126>
		target_speed = get_P(error[axis], &posholdPID_PARAM); // calculate desired speed from lat/lon error
 80024a0:	7afb      	ldrb	r3, [r7, #11]
 80024a2:	4a4a      	ldr	r2, [pc, #296]	; (80025cc <GPS_calc_poshold+0x138>)
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	4949      	ldr	r1, [pc, #292]	; (80025d0 <GPS_calc_poshold+0x13c>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fc05 	bl	8001cba <get_P>
 80024b0:	6078      	str	r0, [r7, #4]
		target_speed = constrain(target_speed,-100,100);      // Constrain the target speed in poshold mode to 1m/s it helps avoid runaways..
 80024b2:	2264      	movs	r2, #100	; 0x64
 80024b4:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f003 f999 	bl	80057f0 <constrain>
 80024be:	6078      	str	r0, [r7, #4]
		rate_error[axis] = target_speed - actual_speed[axis]; // calc the speed error
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	7afb      	ldrb	r3, [r7, #11]
 80024c6:	4943      	ldr	r1, [pc, #268]	; (80025d4 <GPS_calc_poshold+0x140>)
 80024c8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	b211      	sxth	r1, r2
 80024d6:	4a40      	ldr	r2, [pc, #256]	; (80025d8 <GPS_calc_poshold+0x144>)
 80024d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		nav[axis]      =
				get_P(rate_error[axis],                                               &poshold_ratePID_PARAM)
 80024dc:	7afb      	ldrb	r3, [r7, #11]
 80024de:	4a3e      	ldr	r2, [pc, #248]	; (80025d8 <GPS_calc_poshold+0x144>)
 80024e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024e4:	493d      	ldr	r1, [pc, #244]	; (80025dc <GPS_calc_poshold+0x148>)
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fbe7 	bl	8001cba <get_P>
 80024ec:	4603      	mov	r3, r0
				+get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80024ee:	b29c      	uxth	r4, r3
 80024f0:	7afb      	ldrb	r3, [r7, #11]
 80024f2:	4a39      	ldr	r2, [pc, #228]	; (80025d8 <GPS_calc_poshold+0x144>)
 80024f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024f8:	4619      	mov	r1, r3
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	4a33      	ldr	r2, [pc, #204]	; (80025cc <GPS_calc_poshold+0x138>)
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	18c8      	adds	r0, r1, r3
 8002504:	7afa      	ldrb	r2, [r7, #11]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4a34      	ldr	r2, [pc, #208]	; (80025e0 <GPS_calc_poshold+0x14c>)
 8002510:	441a      	add	r2, r3
 8002512:	4b32      	ldr	r3, [pc, #200]	; (80025dc <GPS_calc_poshold+0x148>)
 8002514:	4933      	ldr	r1, [pc, #204]	; (80025e4 <GPS_calc_poshold+0x150>)
 8002516:	f7ff fbe8 	bl	8001cea <get_I>
 800251a:	4603      	mov	r3, r0
 800251c:	b29b      	uxth	r3, r3
 800251e:	4423      	add	r3, r4
 8002520:	b29a      	uxth	r2, r3
		nav[axis]      =
 8002522:	7afb      	ldrb	r3, [r7, #11]
				+get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 8002524:	b211      	sxth	r1, r2
		nav[axis]      =
 8002526:	4a30      	ldr	r2, [pc, #192]	; (80025e8 <GPS_calc_poshold+0x154>)
 8002528:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		d = get_D(error[axis],                    &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 800252c:	7afb      	ldrb	r3, [r7, #11]
 800252e:	4a27      	ldr	r2, [pc, #156]	; (80025cc <GPS_calc_poshold+0x138>)
 8002530:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002534:	7afa      	ldrb	r2, [r7, #11]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <GPS_calc_poshold+0x14c>)
 8002540:	441a      	add	r2, r3
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <GPS_calc_poshold+0x148>)
 8002544:	4927      	ldr	r1, [pc, #156]	; (80025e4 <GPS_calc_poshold+0x150>)
 8002546:	f7ff fc1f 	bl	8001d88 <get_D>
 800254a:	60f8      	str	r0, [r7, #12]

		d = constrain(d, -2000, 2000);
 800254c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002550:	4926      	ldr	r1, [pc, #152]	; (80025ec <GPS_calc_poshold+0x158>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f003 f94c 	bl	80057f0 <constrain>
 8002558:	60f8      	str	r0, [r7, #12]

		// get rid of noise
		if(abs(actual_speed[axis]) < 50) d = 0;
 800255a:	7afb      	ldrb	r3, [r7, #11]
 800255c:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <GPS_calc_poshold+0x140>)
 800255e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002562:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8002566:	db07      	blt.n	8002578 <GPS_calc_poshold+0xe4>
 8002568:	7afb      	ldrb	r3, [r7, #11]
 800256a:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <GPS_calc_poshold+0x140>)
 800256c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002570:	2b31      	cmp	r3, #49	; 0x31
 8002572:	dc01      	bgt.n	8002578 <GPS_calc_poshold+0xe4>
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]

		nav[axis] +=d;
 8002578:	7afb      	ldrb	r3, [r7, #11]
 800257a:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <GPS_calc_poshold+0x154>)
 800257c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	b29b      	uxth	r3, r3
 8002586:	4413      	add	r3, r2
 8002588:	b29a      	uxth	r2, r3
 800258a:	7afb      	ldrb	r3, [r7, #11]
 800258c:	b211      	sxth	r1, r2
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <GPS_calc_poshold+0x154>)
 8002590:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		nav[axis]  = constrain_int16(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <GPS_calc_poshold+0x154>)
 8002598:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800259c:	7afc      	ldrb	r4, [r7, #11]
 800259e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025a2:	4913      	ldr	r1, [pc, #76]	; (80025f0 <GPS_calc_poshold+0x15c>)
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fca9 	bl	8001efc <constrain_int16>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <GPS_calc_poshold+0x154>)
 80025b0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (axis=0;axis<2;axis++) {
 80025b4:	7afb      	ldrb	r3, [r7, #11]
 80025b6:	3301      	adds	r3, #1
 80025b8:	72fb      	strb	r3, [r7, #11]
 80025ba:	7afb      	ldrb	r3, [r7, #11]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	f67f af6f 	bls.w	80024a0 <GPS_calc_poshold+0xc>
		//navPID[axis].integrator = poshold_ratePID[axis].integrator;
	}
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000294 	.word	0x20000294
 80025d0:	20000c64 	.word	0x20000c64
 80025d4:	20000288 	.word	0x20000288
 80025d8:	20000290 	.word	0x20000290
 80025dc:	20000b68 	.word	0x20000b68
 80025e0:	20000b40 	.word	0x20000b40
 80025e4:	20000284 	.word	0x20000284
 80025e8:	20000b30 	.word	0x20000b30
 80025ec:	fffff830 	.word	0xfffff830
 80025f0:	fffff448 	.word	0xfffff448

080025f4 <GPS_calc_longitude_scaling>:

////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
void GPS_calc_longitude_scaling(int32_t lat) {
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	GPS_scaleLonDown = cos(lat * 1.0e-7f * 0.01745329251f);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7fe fb87 	bl	8000d10 <__aeabi_i2f>
 8002602:	4603      	mov	r3, r0
 8002604:	490f      	ldr	r1, [pc, #60]	; (8002644 <GPS_calc_longitude_scaling+0x50>)
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fbd6 	bl	8000db8 <__aeabi_fmul>
 800260c:	4603      	mov	r3, r0
 800260e:	490e      	ldr	r1, [pc, #56]	; (8002648 <GPS_calc_longitude_scaling+0x54>)
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fbd1 	bl	8000db8 <__aeabi_fmul>
 8002616:	4603      	mov	r3, r0
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ff1f 	bl	800045c <__aeabi_f2d>
 800261e:	4603      	mov	r3, r0
 8002620:	460c      	mov	r4, r1
 8002622:	4618      	mov	r0, r3
 8002624:	4621      	mov	r1, r4
 8002626:	f012 ffeb 	bl	8015600 <cos>
 800262a:	4603      	mov	r3, r0
 800262c:	460c      	mov	r4, r1
 800262e:	4618      	mov	r0, r3
 8002630:	4621      	mov	r1, r4
 8002632:	f7fe fa63 	bl	8000afc <__aeabi_d2f>
 8002636:	4602      	mov	r2, r0
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <GPS_calc_longitude_scaling+0x58>)
 800263a:	601a      	str	r2, [r3, #0]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	33d6bf95 	.word	0x33d6bf95
 8002648:	3c8efa35 	.word	0x3c8efa35
 800264c:	2000028c 	.word	0x2000028c

08002650 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t* lat_to, int32_t* lon_to, int32_t* lat_from, int32_t* lon_from) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
	GPS_WP[LAT] = *lat_to;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <GPS_set_next_wp+0x7c>)
 8002664:	6013      	str	r3, [r2, #0]
	GPS_WP[LON] = *lon_to;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <GPS_set_next_wp+0x7c>)
 800266c:	6053      	str	r3, [r2, #4]

	GPS_FROM[LAT] = *lat_from;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <GPS_set_next_wp+0x80>)
 8002674:	6013      	str	r3, [r2, #0]
	GPS_FROM[LON] = *lon_from;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <GPS_set_next_wp+0x80>)
 800267c:	6053      	str	r3, [r2, #4]

	GPS_calc_longitude_scaling(*lat_to);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ffb6 	bl	80025f4 <GPS_calc_longitude_scaling>

	GPS_bearing(&GPS_FROM[LAT],&GPS_FROM[LON],&GPS_WP[LAT],&GPS_WP[LON],&target_bearing);
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <GPS_set_next_wp+0x84>)
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <GPS_set_next_wp+0x88>)
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <GPS_set_next_wp+0x7c>)
 8002690:	4912      	ldr	r1, [pc, #72]	; (80026dc <GPS_set_next_wp+0x8c>)
 8002692:	480f      	ldr	r0, [pc, #60]	; (80026d0 <GPS_set_next_wp+0x80>)
 8002694:	f7ff fdbc 	bl	8002210 <GPS_bearing>
	GPS_distance_cm(&GPS_FROM[LAT],&GPS_FROM[LON],&GPS_WP[LAT],&GPS_WP[LON],&wp_distance);
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <GPS_set_next_wp+0x90>)
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <GPS_set_next_wp+0x88>)
 800269e:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <GPS_set_next_wp+0x7c>)
 80026a0:	490e      	ldr	r1, [pc, #56]	; (80026dc <GPS_set_next_wp+0x8c>)
 80026a2:	480b      	ldr	r0, [pc, #44]	; (80026d0 <GPS_set_next_wp+0x80>)
 80026a4:	f7ff fe18 	bl	80022d8 <GPS_distance_cm>
	GPS_calc_location_error(&GPS_WP[LAT],&GPS_WP[LON],&GPS_FROM[LAT],&GPS_FROM[LON]);
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <GPS_set_next_wp+0x8c>)
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <GPS_set_next_wp+0x80>)
 80026ac:	490a      	ldr	r1, [pc, #40]	; (80026d8 <GPS_set_next_wp+0x88>)
 80026ae:	4807      	ldr	r0, [pc, #28]	; (80026cc <GPS_set_next_wp+0x7c>)
 80026b0:	f7ff fec4 	bl	800243c <GPS_calc_location_error>
	waypoint_speed_gov = 100;
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <GPS_set_next_wp+0x94>)
 80026b6:	2264      	movs	r2, #100	; 0x64
 80026b8:	801a      	strh	r2, [r3, #0]
	original_target_bearing = target_bearing;
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <GPS_set_next_wp+0x84>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <GPS_set_next_wp+0x98>)
 80026c0:	6013      	str	r3, [r2, #0]
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000029c 	.word	0x2000029c
 80026d0:	200002a4 	.word	0x200002a4
 80026d4:	20000c40 	.word	0x20000c40
 80026d8:	200002a0 	.word	0x200002a0
 80026dc:	200002a8 	.word	0x200002a8
 80026e0:	20000c14 	.word	0x20000c14
 80026e4:	200002b0 	.word	0x200002b0
 80026e8:	200002ac 	.word	0x200002ac

080026ec <GPS_reset_home_position>:

void GPS_reset_home_position(void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	if (GPS.fixquality && GPS.satellites >= 5) {
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <GPS_reset_home_position+0x48>)
 80026f2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01a      	beq.n	8002730 <GPS_reset_home_position+0x44>
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <GPS_reset_home_position+0x48>)
 80026fc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002700:	2b04      	cmp	r3, #4
 8002702:	d915      	bls.n	8002730 <GPS_reset_home_position+0x44>
		GPS_home[LAT] = GPS_coord[LAT];
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <GPS_reset_home_position+0x4c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <GPS_reset_home_position+0x50>)
 800270a:	6013      	str	r3, [r2, #0]
		GPS_home[LON] = GPS_coord[LON];
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <GPS_reset_home_position+0x4c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <GPS_reset_home_position+0x50>)
 8002712:	6053      	str	r3, [r2, #4]
		GPS_calc_longitude_scaling(GPS_coord[LAT]);    //need an initial value for distance and bearing calc
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <GPS_reset_home_position+0x4c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff6b 	bl	80025f4 <GPS_calc_longitude_scaling>
		nav_takeoff_bearing = imu.actual_compass_heading;             //save takeoff heading
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <GPS_reset_home_position+0x54>)
 8002720:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002724:	b21a      	sxth	r2, r3
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <GPS_reset_home_position+0x58>)
 8002728:	801a      	strh	r2, [r3, #0]
		//TODO: Set ground altitude
		f.GPS_FIX_HOME = 1;
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <GPS_reset_home_position+0x5c>)
 800272c:	2201      	movs	r2, #1
 800272e:	745a      	strb	r2, [r3, #17]
	}
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000b78 	.word	0x20000b78
 8002738:	20000c5c 	.word	0x20000c5c
 800273c:	20000c50 	.word	0x20000c50
 8002740:	20000e20 	.word	0x20000e20
 8002744:	200002b2 	.word	0x200002b2
 8002748:	20000ed4 	.word	0x20000ed4

0800274c <GPS_reset_nav>:


//reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
  uint8_t i;

  for(i=0;i<2;i++) {
 8002752:	2300      	movs	r3, #0
 8002754:	71fb      	strb	r3, [r7, #7]
 8002756:	e02e      	b.n	80027b6 <GPS_reset_nav+0x6a>
    nav[i] = 0;
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <GPS_reset_nav+0x78>)
 800275c:	2100      	movs	r1, #0
 800275e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    reset_PID(&posholdPID[i]);
 8002762:	79fa      	ldrb	r2, [r7, #7]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <GPS_reset_nav+0x7c>)
 800276e:	4413      	add	r3, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fb65 	bl	8001e40 <reset_PID>
    reset_PID(&poshold_ratePID[i]);
 8002776:	79fa      	ldrb	r2, [r7, #7]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4a12      	ldr	r2, [pc, #72]	; (80027cc <GPS_reset_nav+0x80>)
 8002782:	4413      	add	r3, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fb5b 	bl	8001e40 <reset_PID>
    reset_PID(&navPID[i]);
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <GPS_reset_nav+0x84>)
 8002796:	4413      	add	r3, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fb51 	bl	8001e40 <reset_PID>
    NAV_state = NAV_STATE_NONE;
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <GPS_reset_nav+0x88>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
    //invalidate JUMP counter
//    jump_times = -10;
    //reset next step counter
//    next_step = 1;
    //Clear poi
    GPS_poi[LAT] = 0; GPS_poi[LON] = 0;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <GPS_reset_nav+0x8c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <GPS_reset_nav+0x8c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
  for(i=0;i<2;i++) {
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	3301      	adds	r3, #1
 80027b4:	71fb      	strb	r3, [r7, #7]
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d9cd      	bls.n	8002758 <GPS_reset_nav+0xc>
//    f.GPS_head_set = 0;
  }
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000b30 	.word	0x20000b30
 80027c8:	20000c18 	.word	0x20000c18
 80027cc:	20000b40 	.word	0x20000b40
 80027d0:	20000af0 	.word	0x20000af0
 80027d4:	20000280 	.word	0x20000280
 80027d8:	20000c78 	.word	0x20000c78

080027dc <GPS_newFrame>:

#define FRAME_GGA  1
#define FRAME_RMC  2

bool GPS_newFrame(uint8_t c)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
	uint32_t time = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
	float timef = 0;
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
	uint8_t frameOK = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	75fb      	strb	r3, [r7, #23]
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[15];
	static uint8_t checksum_param, frame = 0;

	if (c == '$')
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	2b24      	cmp	r3, #36	; 0x24
 80027f8:	d109      	bne.n	800280e <GPS_newFrame+0x32>
	{
		param = 0; offset = 0; parity = 0;
 80027fa:	4ba3      	ldr	r3, [pc, #652]	; (8002a88 <GPS_newFrame+0x2ac>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	4ba2      	ldr	r3, [pc, #648]	; (8002a8c <GPS_newFrame+0x2b0>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	4ba2      	ldr	r3, [pc, #648]	; (8002a90 <GPS_newFrame+0x2b4>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e1bb      	b.n	8002b86 <GPS_newFrame+0x3aa>
	} else if (c == ',' || c == '*')
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	2b2c      	cmp	r3, #44	; 0x2c
 8002812:	d003      	beq.n	800281c <GPS_newFrame+0x40>
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	2b2a      	cmp	r3, #42	; 0x2a
 8002818:	f040 8173 	bne.w	8002b02 <GPS_newFrame+0x326>
	{
		string[offset] = 0;
 800281c:	4b9b      	ldr	r3, [pc, #620]	; (8002a8c <GPS_newFrame+0x2b0>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b9c      	ldr	r3, [pc, #624]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002824:	2100      	movs	r1, #0
 8002826:	5499      	strb	r1, [r3, r2]
		if (param == 0)
 8002828:	4b97      	ldr	r3, [pc, #604]	; (8002a88 <GPS_newFrame+0x2ac>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d136      	bne.n	800289e <GPS_newFrame+0xc2>
		{ //frame identification
			frame = 0;
 8002830:	4b99      	ldr	r3, [pc, #612]	; (8002a98 <GPS_newFrame+0x2bc>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
			if (string[0] == 'G' && string[1] == 'N' && string[2] == 'G' && string[3] == 'G' && string[4] == 'A') frame = FRAME_GGA;
 8002836:	4b97      	ldr	r3, [pc, #604]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b47      	cmp	r3, #71	; 0x47
 800283c:	d112      	bne.n	8002864 <GPS_newFrame+0x88>
 800283e:	4b95      	ldr	r3, [pc, #596]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	2b4e      	cmp	r3, #78	; 0x4e
 8002844:	d10e      	bne.n	8002864 <GPS_newFrame+0x88>
 8002846:	4b93      	ldr	r3, [pc, #588]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002848:	789b      	ldrb	r3, [r3, #2]
 800284a:	2b47      	cmp	r3, #71	; 0x47
 800284c:	d10a      	bne.n	8002864 <GPS_newFrame+0x88>
 800284e:	4b91      	ldr	r3, [pc, #580]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002850:	78db      	ldrb	r3, [r3, #3]
 8002852:	2b47      	cmp	r3, #71	; 0x47
 8002854:	d106      	bne.n	8002864 <GPS_newFrame+0x88>
 8002856:	4b8f      	ldr	r3, [pc, #572]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002858:	791b      	ldrb	r3, [r3, #4]
 800285a:	2b41      	cmp	r3, #65	; 0x41
 800285c:	d102      	bne.n	8002864 <GPS_newFrame+0x88>
 800285e:	4b8e      	ldr	r3, [pc, #568]	; (8002a98 <GPS_newFrame+0x2bc>)
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
			if (string[0] == 'G' && string[1] == 'N' && string[2] == 'R' && string[3] == 'M' && string[4] == 'C') frame = FRAME_RMC;
 8002864:	4b8b      	ldr	r3, [pc, #556]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b47      	cmp	r3, #71	; 0x47
 800286a:	f040 8132 	bne.w	8002ad2 <GPS_newFrame+0x2f6>
 800286e:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002870:	785b      	ldrb	r3, [r3, #1]
 8002872:	2b4e      	cmp	r3, #78	; 0x4e
 8002874:	f040 812d 	bne.w	8002ad2 <GPS_newFrame+0x2f6>
 8002878:	4b86      	ldr	r3, [pc, #536]	; (8002a94 <GPS_newFrame+0x2b8>)
 800287a:	789b      	ldrb	r3, [r3, #2]
 800287c:	2b52      	cmp	r3, #82	; 0x52
 800287e:	f040 8128 	bne.w	8002ad2 <GPS_newFrame+0x2f6>
 8002882:	4b84      	ldr	r3, [pc, #528]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002884:	78db      	ldrb	r3, [r3, #3]
 8002886:	2b4d      	cmp	r3, #77	; 0x4d
 8002888:	f040 8123 	bne.w	8002ad2 <GPS_newFrame+0x2f6>
 800288c:	4b81      	ldr	r3, [pc, #516]	; (8002a94 <GPS_newFrame+0x2b8>)
 800288e:	791b      	ldrb	r3, [r3, #4]
 8002890:	2b43      	cmp	r3, #67	; 0x43
 8002892:	f040 811e 	bne.w	8002ad2 <GPS_newFrame+0x2f6>
 8002896:	4b80      	ldr	r3, [pc, #512]	; (8002a98 <GPS_newFrame+0x2bc>)
 8002898:	2202      	movs	r2, #2
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e119      	b.n	8002ad2 <GPS_newFrame+0x2f6>
		} else if (frame == FRAME_GGA)
 800289e:	4b7e      	ldr	r3, [pc, #504]	; (8002a98 <GPS_newFrame+0x2bc>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 80d4 	bne.w	8002a50 <GPS_newFrame+0x274>
		{
			ledToggle(RGB_BLUE);
 80028a8:	2004      	movs	r0, #4
 80028aa:	f008 ffa5 	bl	800b7f8 <ledToggle>
			if (param == 1){
 80028ae:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <GPS_newFrame+0x2ac>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d152      	bne.n	800295c <GPS_newFrame+0x180>
				timef = atof(string);
 80028b6:	4877      	ldr	r0, [pc, #476]	; (8002a94 <GPS_newFrame+0x2b8>)
 80028b8:	f00e fdbf 	bl	801143a <atof>
 80028bc:	4603      	mov	r3, r0
 80028be:	460c      	mov	r4, r1
 80028c0:	4618      	mov	r0, r3
 80028c2:	4621      	mov	r1, r4
 80028c4:	f7fe f91a 	bl	8000afc <__aeabi_d2f>
 80028c8:	4603      	mov	r3, r0
 80028ca:	60fb      	str	r3, [r7, #12]
				time = (uint32_t) timef;
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7fe fc75 	bl	80011bc <__aeabi_f2uiz>
 80028d2:	4603      	mov	r3, r0
 80028d4:	613b      	str	r3, [r7, #16]
				GPS.hour = (time / 10000)+TD;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4a70      	ldr	r2, [pc, #448]	; (8002a9c <GPS_newFrame+0x2c0>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	0b5b      	lsrs	r3, r3, #13
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	3309      	adds	r3, #9
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4b6e      	ldr	r3, [pc, #440]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80028e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
				GPS.minute = (time % 10000) / 100;
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4b6b      	ldr	r3, [pc, #428]	; (8002a9c <GPS_newFrame+0x2c0>)
 80028f0:	fba3 1302 	umull	r1, r3, r3, r2
 80028f4:	0b5b      	lsrs	r3, r3, #13
 80028f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	4a68      	ldr	r2, [pc, #416]	; (8002aa4 <GPS_newFrame+0x2c8>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <GPS_newFrame+0x2c4>)
 800290c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				GPS.seconds = (time % 100);
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4b64      	ldr	r3, [pc, #400]	; (8002aa4 <GPS_newFrame+0x2c8>)
 8002914:	fba3 1302 	umull	r1, r3, r3, r2
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	2164      	movs	r1, #100	; 0x64
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002926:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
				GPS.milliseconds = fmod(timef, 1.0) * 1000;
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7fd fd96 	bl	800045c <__aeabi_f2d>
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	4b5c      	ldr	r3, [pc, #368]	; (8002aa8 <GPS_newFrame+0x2cc>)
 8002936:	f012 ff79 	bl	801582c <fmod>
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	4b5b      	ldr	r3, [pc, #364]	; (8002aac <GPS_newFrame+0x2d0>)
 8002940:	f7fd fde4 	bl	800050c <__aeabi_dmul>
 8002944:	4603      	mov	r3, r0
 8002946:	460c      	mov	r4, r1
 8002948:	4618      	mov	r0, r3
 800294a:	4621      	mov	r1, r4
 800294c:	f7fe f8b6 	bl	8000abc <__aeabi_d2uiz>
 8002950:	4603      	mov	r3, r0
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002956:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800295a:	e0ba      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			}
			else if (param == 2)                     {GPS.GPS_coord[LAT] = GPS_coord_to_degrees(string);GPS_coord[LAT]=GPS.GPS_coord[LAT];}
 800295c:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <GPS_newFrame+0x2ac>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d10d      	bne.n	8002980 <GPS_newFrame+0x1a4>
 8002964:	484b      	ldr	r0, [pc, #300]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002966:	f000 f92d 	bl	8002bc4 <GPS_coord_to_degrees>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002974:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800297a:	4a4d      	ldr	r2, [pc, #308]	; (8002ab0 <GPS_newFrame+0x2d4>)
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e0a8      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 3 && string[0] == 'S') {GPS.GPS_coord[LAT] = -GPS.GPS_coord[LAT]; GPS_coord[LAT]=GPS.GPS_coord[LAT];}
 8002980:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <GPS_newFrame+0x2ac>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d110      	bne.n	80029aa <GPS_newFrame+0x1ce>
 8002988:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <GPS_newFrame+0x2b8>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b53      	cmp	r3, #83	; 0x53
 800298e:	d10c      	bne.n	80029aa <GPS_newFrame+0x1ce>
 8002990:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002996:	425b      	negs	r3, r3
 8002998:	4a41      	ldr	r2, [pc, #260]	; (8002aa0 <GPS_newFrame+0x2c4>)
 800299a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800299e:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029a4:	4a42      	ldr	r2, [pc, #264]	; (8002ab0 <GPS_newFrame+0x2d4>)
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e093      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 4)                     {GPS.GPS_coord[LON] = GPS_coord_to_degrees(string); GPS_coord[LON]=GPS.GPS_coord[LON];}
 80029aa:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <GPS_newFrame+0x2ac>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d10d      	bne.n	80029ce <GPS_newFrame+0x1f2>
 80029b2:	4838      	ldr	r0, [pc, #224]	; (8002a94 <GPS_newFrame+0x2b8>)
 80029b4:	f000 f906 	bl	8002bc4 <GPS_coord_to_degrees>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c8:	4a39      	ldr	r2, [pc, #228]	; (8002ab0 <GPS_newFrame+0x2d4>)
 80029ca:	6053      	str	r3, [r2, #4]
 80029cc:	e081      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 5 && string[0] == 'W') {GPS.GPS_coord[LON] = -GPS.GPS_coord[LON]; GPS_coord[LON]=GPS.GPS_coord[LON];}
 80029ce:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <GPS_newFrame+0x2ac>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d110      	bne.n	80029f8 <GPS_newFrame+0x21c>
 80029d6:	4b2f      	ldr	r3, [pc, #188]	; (8002a94 <GPS_newFrame+0x2b8>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b57      	cmp	r3, #87	; 0x57
 80029dc:	d10c      	bne.n	80029f8 <GPS_newFrame+0x21c>
 80029de:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e4:	425b      	negs	r3, r3
 80029e6:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <GPS_newFrame+0x2c4>)
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f2:	4a2f      	ldr	r2, [pc, #188]	; (8002ab0 <GPS_newFrame+0x2d4>)
 80029f4:	6053      	str	r3, [r2, #4]
 80029f6:	e06c      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 6)                     {GPS.fixquality = (string[0]  > '0');}
 80029f8:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <GPS_newFrame+0x2ac>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b06      	cmp	r3, #6
 80029fe:	d10b      	bne.n	8002a18 <GPS_newFrame+0x23c>
 8002a00:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b30      	cmp	r3, #48	; 0x30
 8002a06:	bf8c      	ite	hi
 8002a08:	2301      	movhi	r3, #1
 8002a0a:	2300      	movls	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002a12:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8002a16:	e05c      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 7)                     {GPS.satellites = grab_fields(string,0);}
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <GPS_newFrame+0x2ac>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b07      	cmp	r3, #7
 8002a1e:	d109      	bne.n	8002a34 <GPS_newFrame+0x258>
 8002a20:	2100      	movs	r1, #0
 8002a22:	481c      	ldr	r0, [pc, #112]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002a24:	f000 f962 	bl	8002cec <grab_fields>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002a2e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8002a32:	e04e      	b.n	8002ad2 <GPS_newFrame+0x2f6>
			else if (param == 9)                     {GPS.altitude = grab_fields(string,0);}  // altitude in meters added by Mis
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <GPS_newFrame+0x2ac>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b09      	cmp	r3, #9
 8002a3a:	d14a      	bne.n	8002ad2 <GPS_newFrame+0x2f6>
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4815      	ldr	r0, [pc, #84]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002a40:	f000 f954 	bl	8002cec <grab_fields>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002a4a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8002a4e:	e040      	b.n	8002ad2 <GPS_newFrame+0x2f6>
		} else if (frame == FRAME_RMC)
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <GPS_newFrame+0x2bc>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d13c      	bne.n	8002ad2 <GPS_newFrame+0x2f6>
		{
			if      (param == 7)                     {GPS.speed = ((uint32_t)grab_fields(string,1)*5144L)/1000L;}  //gps speed in cm/s will be used for navigation
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <GPS_newFrame+0x2ac>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b07      	cmp	r3, #7
 8002a5e:	d12b      	bne.n	8002ab8 <GPS_newFrame+0x2dc>
 8002a60:	2101      	movs	r1, #1
 8002a62:	480c      	ldr	r0, [pc, #48]	; (8002a94 <GPS_newFrame+0x2b8>)
 8002a64:	f000 f942 	bl	8002cec <grab_fields>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f241 4318 	movw	r3, #5144	; 0x1418
 8002a70:	fb03 f302 	mul.w	r3, r3, r2
 8002a74:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <GPS_newFrame+0x2d8>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <GPS_newFrame+0x2c4>)
 8002a80:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8002a84:	e025      	b.n	8002ad2 <GPS_newFrame+0x2f6>
 8002a86:	bf00      	nop
 8002a88:	200002c4 	.word	0x200002c4
 8002a8c:	200002c5 	.word	0x200002c5
 8002a90:	200002c6 	.word	0x200002c6
 8002a94:	200002c8 	.word	0x200002c8
 8002a98:	200002d7 	.word	0x200002d7
 8002a9c:	d1b71759 	.word	0xd1b71759
 8002aa0:	20000b78 	.word	0x20000b78
 8002aa4:	51eb851f 	.word	0x51eb851f
 8002aa8:	3ff00000 	.word	0x3ff00000
 8002aac:	408f4000 	.word	0x408f4000
 8002ab0:	20000c5c 	.word	0x20000c5c
 8002ab4:	10624dd3 	.word	0x10624dd3
			else if (param == 8)                     {GPS.GPS_ground_course = grab_fields(string,1); }             //ground course deg*10
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <GPS_newFrame+0x3cc>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d108      	bne.n	8002ad2 <GPS_newFrame+0x2f6>
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	483a      	ldr	r0, [pc, #232]	; (8002bac <GPS_newFrame+0x3d0>)
 8002ac4:	f000 f912 	bl	8002cec <grab_fields>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <GPS_newFrame+0x3d4>)
 8002ace:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		}
		param++; offset = 0;
 8002ad2:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <GPS_newFrame+0x3cc>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b33      	ldr	r3, [pc, #204]	; (8002ba8 <GPS_newFrame+0x3cc>)
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <GPS_newFrame+0x3d8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param=1;
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae8:	d103      	bne.n	8002af2 <GPS_newFrame+0x316>
 8002aea:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <GPS_newFrame+0x3dc>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e049      	b.n	8002b86 <GPS_newFrame+0x3aa>
		else parity ^= c;
 8002af2:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <GPS_newFrame+0x3e0>)
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	4053      	eors	r3, r2
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <GPS_newFrame+0x3e0>)
 8002afe:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param=1;
 8002b00:	e041      	b.n	8002b86 <GPS_newFrame+0x3aa>
	} else if (c == '\r' || c == '\n')
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	2b0d      	cmp	r3, #13
 8002b06:	d002      	beq.n	8002b0e <GPS_newFrame+0x332>
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b0a      	cmp	r3, #10
 8002b0c:	d122      	bne.n	8002b54 <GPS_newFrame+0x378>
	{
		if (checksum_param) { //parity checksum
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <GPS_newFrame+0x3dc>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01a      	beq.n	8002b4c <GPS_newFrame+0x370>
			uint8_t checksum = hex_c(string[0]);
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <GPS_newFrame+0x3d0>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f932 	bl	8002d84 <hex_c>
 8002b20:	4603      	mov	r3, r0
 8002b22:	72fb      	strb	r3, [r7, #11]
			checksum <<= 4;
 8002b24:	7afb      	ldrb	r3, [r7, #11]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	72fb      	strb	r3, [r7, #11]
			checksum += hex_c(string[1]);
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <GPS_newFrame+0x3d0>)
 8002b2c:	785b      	ldrb	r3, [r3, #1]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f928 	bl	8002d84 <hex_c>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	72fb      	strb	r3, [r7, #11]
			if (checksum == parity) frameOK = 1;
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <GPS_newFrame+0x3e0>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	7afa      	ldrb	r2, [r7, #11]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d101      	bne.n	8002b4c <GPS_newFrame+0x370>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	75fb      	strb	r3, [r7, #23]
		}
		checksum_param=0;
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <GPS_newFrame+0x3dc>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	e018      	b.n	8002b86 <GPS_newFrame+0x3aa>
	} else
	{
		if (offset < 15) string[offset++] = c;
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <GPS_newFrame+0x3d8>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b0e      	cmp	r3, #14
 8002b5a:	d809      	bhi.n	8002b70 <GPS_newFrame+0x394>
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <GPS_newFrame+0x3d8>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	b2d1      	uxtb	r1, r2
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <GPS_newFrame+0x3d8>)
 8002b66:	7011      	strb	r1, [r2, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4a10      	ldr	r2, [pc, #64]	; (8002bac <GPS_newFrame+0x3d0>)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <GPS_newFrame+0x3dc>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d106      	bne.n	8002b86 <GPS_newFrame+0x3aa>
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <GPS_newFrame+0x3e0>)
 8002b7a:	781a      	ldrb	r2, [r3, #0]
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	4053      	eors	r3, r2
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <GPS_newFrame+0x3e0>)
 8002b84:	701a      	strb	r2, [r3, #0]
	}
	return frameOK && (frame==FRAME_GGA);
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <GPS_newFrame+0x3bc>
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <GPS_newFrame+0x3e4>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <GPS_newFrame+0x3bc>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <GPS_newFrame+0x3be>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd90      	pop	{r4, r7, pc}
 8002ba8:	200002c4 	.word	0x200002c4
 8002bac:	200002c8 	.word	0x200002c8
 8002bb0:	20000b78 	.word	0x20000b78
 8002bb4:	200002c5 	.word	0x200002c5
 8002bb8:	200002d8 	.word	0x200002d8
 8002bbc:	200002c6 	.word	0x200002c6
 8002bc0:	200002d7 	.word	0x200002d7

08002bc4 <GPS_coord_to_degrees>:
	return 0;
}

#define DIGIT_TO_VAL(_x)        (_x - '0')
uint32_t GPS_coord_to_degrees(char* s)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	char *p, *q;
	uint8_t deg = 0, min = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	75fb      	strb	r3, [r7, #23]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit(*p); p++) ;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	e002      	b.n	8002be4 <GPS_coord_to_degrees+0x20>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	f00e fc5a 	bl	801149c <__locale_ctype_ptr>
 8002be8:	4602      	mov	r2, r0
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <GPS_coord_to_degrees+0x1a>
	q = s;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2)
 8002c00:	e011      	b.n	8002c26 <GPS_coord_to_degrees+0x62>
	{
		if (deg)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <GPS_coord_to_degrees+0x50>
			deg *= 10;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	0092      	lsls	r2, r2, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	61ba      	str	r2, [r7, #24]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	3b30      	subs	r3, #48	; 0x30
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	4413      	add	r3, r2
 8002c24:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2)
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	dce8      	bgt.n	8002c02 <GPS_coord_to_degrees+0x3e>
	}
	// convert minutes
	while (p > q)
 8002c30:	e011      	b.n	8002c56 <GPS_coord_to_degrees+0x92>
	{
		if (min)
 8002c32:	7dbb      	ldrb	r3, [r7, #22]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <GPS_coord_to_degrees+0x80>
			min *= 10;
 8002c38:	7dbb      	ldrb	r3, [r7, #22]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	0092      	lsls	r2, r2, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	61ba      	str	r2, [r7, #24]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	3b30      	subs	r3, #48	; 0x30
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	7dbb      	ldrb	r3, [r7, #22]
 8002c52:	4413      	add	r3, r2
 8002c54:	75bb      	strb	r3, [r7, #22]
	while (p > q)
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d8e9      	bhi.n	8002c32 <GPS_coord_to_degrees+0x6e>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.')
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b2e      	cmp	r3, #46	; 0x2e
 8002c64:	d126      	bne.n	8002cb4 <GPS_coord_to_degrees+0xf0>
	{
		q = p + 1;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	e01d      	b.n	8002cae <GPS_coord_to_degrees+0xea>
		{
			frac_min *= 10;
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	613b      	str	r3, [r7, #16]
			if (isdigit(*q))
 8002c7e:	f00e fc0d 	bl	801149c <__locale_ctype_ptr>
 8002c82:	4602      	mov	r2, r0
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <GPS_coord_to_degrees+0xe4>
				frac_min += *q++ - '0';
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	61ba      	str	r2, [r7, #24]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	3b30      	subs	r3, #48	; 0x30
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++)
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	3301      	adds	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d9de      	bls.n	8002c72 <GPS_coord_to_degrees+0xae>
		}
	}
	return deg * 10000000UL + (min * 1000000UL + frac_min*100UL) / 6;
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <GPS_coord_to_degrees+0x11c>)
 8002cb8:	fb02 f203 	mul.w	r2, r2, r3
 8002cbc:	7dbb      	ldrb	r3, [r7, #22]
 8002cbe:	4909      	ldr	r1, [pc, #36]	; (8002ce4 <GPS_coord_to_degrees+0x120>)
 8002cc0:	fb01 f103 	mul.w	r1, r1, r3
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	2064      	movs	r0, #100	; 0x64
 8002cc8:	fb00 f303 	mul.w	r3, r0, r3
 8002ccc:	440b      	add	r3, r1
 8002cce:	4906      	ldr	r1, [pc, #24]	; (8002ce8 <GPS_coord_to_degrees+0x124>)
 8002cd0:	fba1 1303 	umull	r1, r3, r1, r3
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	00989680 	.word	0x00989680
 8002ce4:	000f4240 	.word	0x000f4240
 8002ce8:	aaaaaaab 	.word	0xaaaaaaab

08002cec <grab_fields>:

// helper functions
uint16_t grab_fields(char* src, uint8_t mult)// convert string to uint16
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint16_t tmp = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	81bb      	strh	r3, [r7, #12]

	for(i=0; src[i]!=0; i++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e032      	b.n	8002d68 <grab_fields+0x7c>
	{
		if(src[i] == '.')
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d0c:	d10d      	bne.n	8002d2a <grab_fields+0x3e>
		{
			i++;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	3301      	adds	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
			if(mult==0)
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d02d      	beq.n	8002d76 <grab_fields+0x8a>
			{
				break;
			}else
			{
				src[i+mult] = 0;
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	4413      	add	r3, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
			}
		}
		tmp *= 10;
 8002d2a:	89bb      	ldrh	r3, [r7, #12]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	81bb      	strh	r3, [r7, #12]
		if(src[i] >='0' && src[i] <='9') tmp += src[i]-'0';
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b2f      	cmp	r3, #47	; 0x2f
 8002d40:	d90f      	bls.n	8002d62 <grab_fields+0x76>
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b39      	cmp	r3, #57	; 0x39
 8002d4c:	d809      	bhi.n	8002d62 <grab_fields+0x76>
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	89bb      	ldrh	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b30      	subs	r3, #48	; 0x30
 8002d60:	81bb      	strh	r3, [r7, #12]
	for(i=0; src[i]!=0; i++)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	3301      	adds	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1c6      	bne.n	8002d02 <grab_fields+0x16>
 8002d74:	e000      	b.n	8002d78 <grab_fields+0x8c>
				break;
 8002d76:	bf00      	nop
	}
	return tmp;
 8002d78:	89bb      	ldrh	r3, [r7, #12]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <hex_c>:

uint8_t hex_c(uint8_t n) // convert '0'..'9','A'..'F' to 0..15
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	3b30      	subs	r3, #48	; 0x30
 8002d92:	71fb      	strb	r3, [r7, #7]
	if(n>9)  n -= 7;
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	2b09      	cmp	r3, #9
 8002d98:	d902      	bls.n	8002da0 <hex_c+0x1c>
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	3b07      	subs	r3, #7
 8002d9e:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	71fb      	strb	r3, [r7, #7]
	return n;
 8002da8:	79fb      	ldrb	r3, [r7, #7]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <GPS_set_pids>:

//Get the relevant P I D values and set the PID controllers
void GPS_set_pids(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
	posholdPID_PARAM.kP   = 0.15f;
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <GPS_set_pids+0x50>)
 8002dba:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <GPS_set_pids+0x54>)
 8002dbc:	601a      	str	r2, [r3, #0]
	posholdPID_PARAM.kI   = 0;
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <GPS_set_pids+0x50>)
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	605a      	str	r2, [r3, #4]
	posholdPID_PARAM.Imax = 2000;
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <GPS_set_pids+0x50>)
 8002dc8:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <GPS_set_pids+0x58>)
 8002dca:	60da      	str	r2, [r3, #12]

	poshold_ratePID_PARAM.kP   = 3.4f;
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <GPS_set_pids+0x5c>)
 8002dce:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <GPS_set_pids+0x60>)
 8002dd0:	601a      	str	r2, [r3, #0]
	poshold_ratePID_PARAM.kI   = 0.14f;
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <GPS_set_pids+0x5c>)
 8002dd4:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <GPS_set_pids+0x64>)
 8002dd6:	605a      	str	r2, [r3, #4]
	poshold_ratePID_PARAM.kD   = 0.053f;
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <GPS_set_pids+0x5c>)
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <GPS_set_pids+0x68>)
 8002ddc:	609a      	str	r2, [r3, #8]
	poshold_ratePID_PARAM.Imax = 2000;
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <GPS_set_pids+0x5c>)
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <GPS_set_pids+0x58>)
 8002de2:	60da      	str	r2, [r3, #12]

	navPID_PARAM.kP   = 2.5f;
 8002de4:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <GPS_set_pids+0x6c>)
 8002de6:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <GPS_set_pids+0x70>)
 8002de8:	601a      	str	r2, [r3, #0]
	navPID_PARAM.kI   = 0.33f;
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <GPS_set_pids+0x6c>)
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <GPS_set_pids+0x74>)
 8002dee:	605a      	str	r2, [r3, #4]
	navPID_PARAM.kD   = 0.053f;
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <GPS_set_pids+0x6c>)
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <GPS_set_pids+0x68>)
 8002df4:	609a      	str	r2, [r3, #8]
	navPID_PARAM.Imax = 2000;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <GPS_set_pids+0x6c>)
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <GPS_set_pids+0x58>)
 8002dfa:	60da      	str	r2, [r3, #12]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	20000c64 	.word	0x20000c64
 8002e08:	3e19999a 	.word	0x3e19999a
 8002e0c:	44fa0000 	.word	0x44fa0000
 8002e10:	20000b68 	.word	0x20000b68
 8002e14:	4059999a 	.word	0x4059999a
 8002e18:	3e0f5c29 	.word	0x3e0f5c29
 8002e1c:	3d591687 	.word	0x3d591687
 8002e20:	20000b20 	.word	0x20000b20
 8002e24:	40200000 	.word	0x40200000
 8002e28:	3ea8f5c3 	.word	0x3ea8f5c3

08002e2c <cliGps>:

#ifdef _USE_HW_CLI
void cliGps(cli_args_t *args)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
	uint8_t point = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73bb      	strb	r3, [r7, #14]

	if (args->argc == 2 && args->isStr(0, "virtual") == true)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d15f      	bne.n	8002f04 <cliGps+0xd8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	4935      	ldr	r1, [pc, #212]	; (8002f20 <cliGps+0xf4>)
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	4798      	blx	r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d057      	beq.n	8002f04 <cliGps+0xd8>
	{
		f.GPS_FIX = 1;
 8002e54:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <cliGps+0xf8>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	741a      	strb	r2, [r3, #16]
		GPS.fixquality = 1;
 8002e5a:	4b33      	ldr	r3, [pc, #204]	; (8002f28 <cliGps+0xfc>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		GPS.satellites = 10;
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <cliGps+0xfc>)
 8002e64:	220a      	movs	r2, #10
 8002e66:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		GPS_virtual = 1;
 8002e6a:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <cliGps+0x100>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
		point      = args->getData(1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2001      	movs	r0, #1
 8002e76:	4798      	blx	r3
 8002e78:	4603      	mov	r3, r0
 8002e7a:	73bb      	strb	r3, [r7, #14]
		switch(point)
 8002e7c:	7bbb      	ldrb	r3, [r7, #14]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d012      	beq.n	8002ea8 <cliGps+0x7c>
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d01f      	beq.n	8002ec6 <cliGps+0x9a>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d13a      	bne.n	8002f00 <cliGps+0xd4>
		{
			case 0:
				GPS_coord[LAT] = 351859490;
 8002e8a:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <cliGps+0x104>)
 8002e8c:	4a29      	ldr	r2, [pc, #164]	; (8002f34 <cliGps+0x108>)
 8002e8e:	601a      	str	r2, [r3, #0]
				GPS_coord[LON] = 1268243560;
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <cliGps+0x104>)
 8002e92:	4a29      	ldr	r2, [pc, #164]	; (8002f38 <cliGps+0x10c>)
 8002e94:	605a      	str	r2, [r3, #4]
				cliPrintf("GPS_coord[LAT] : %d, GPS_coord[LON] : %d\r\n", GPS_coord[LAT], GPS_coord[LON]);
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <cliGps+0x104>)
 8002e98:	6819      	ldr	r1, [r3, #0]
 8002e9a:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <cliGps+0x104>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4826      	ldr	r0, [pc, #152]	; (8002f3c <cliGps+0x110>)
 8002ea2:	f007 fed9 	bl	800ac58 <cliPrintf>
				break;
 8002ea6:	e02b      	b.n	8002f00 <cliGps+0xd4>

			case 1:
				GPS_coord[LAT] = 351857900;
 8002ea8:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <cliGps+0x104>)
 8002eaa:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <cliGps+0x114>)
 8002eac:	601a      	str	r2, [r3, #0]
				GPS_coord[LON] = 1268246880;
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <cliGps+0x104>)
 8002eb0:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <cliGps+0x118>)
 8002eb2:	605a      	str	r2, [r3, #4]
				cliPrintf("GPS_coord[LAT] : %d, GPS_coord[LON] : %d\r\n", GPS_coord[LAT], GPS_coord[LON]);
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <cliGps+0x104>)
 8002eb6:	6819      	ldr	r1, [r3, #0]
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <cliGps+0x104>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	481f      	ldr	r0, [pc, #124]	; (8002f3c <cliGps+0x110>)
 8002ec0:	f007 feca 	bl	800ac58 <cliPrintf>
				break;
 8002ec4:	e01c      	b.n	8002f00 <cliGps+0xd4>

			case 2:
				GPS_coord[LAT] = 0;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <cliGps+0x104>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
				GPS_coord[LON] = 0;
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <cliGps+0x104>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	605a      	str	r2, [r3, #4]
				f.GPS_FIX = 0;
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <cliGps+0xf8>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	741a      	strb	r2, [r3, #16]
				GPS.fixquality = 0;
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <cliGps+0xfc>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				GPS.satellites = 0;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <cliGps+0xfc>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
				GPS_virtual = 0;
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <cliGps+0x100>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
				cliPrintf("GPS_coord[LAT] : %d, GPS_coord[LON] : %d\r\n", GPS_coord[LAT], GPS_coord[LON]);
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <cliGps+0x104>)
 8002ef0:	6819      	ldr	r1, [r3, #0]
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <cliGps+0x104>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4810      	ldr	r0, [pc, #64]	; (8002f3c <cliGps+0x110>)
 8002efa:	f007 fead 	bl	800ac58 <cliPrintf>
				break;
 8002efe:	bf00      	nop
		}
		ret = true;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
	}
	if (ret != true)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	f083 0301 	eor.w	r3, r3, #1
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <cliGps+0xea>
	{
		cliPrintf("gps virtual point[0:normal, 1:next point, 2:reset]\n");
 8002f10:	480d      	ldr	r0, [pc, #52]	; (8002f48 <cliGps+0x11c>)
 8002f12:	f007 fea1 	bl	800ac58 <cliPrintf>
	}
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	08019b64 	.word	0x08019b64
 8002f24:	20000ed4 	.word	0x20000ed4
 8002f28:	20000b78 	.word	0x20000b78
 8002f2c:	20000678 	.word	0x20000678
 8002f30:	20000c5c 	.word	0x20000c5c
 8002f34:	14f8f322 	.word	0x14f8f322
 8002f38:	4b97dc68 	.word	0x4b97dc68
 8002f3c:	08019b6c 	.word	0x08019b6c
 8002f40:	14f8ecec 	.word	0x14f8ecec
 8002f44:	4b97e960 	.word	0x4b97e960
 8002f48:	08019b98 	.word	0x08019b98

08002f4c <invSqrt>:

float Pre_IMU[3] = {0, 0, 0};
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};
/////////////////////////////////////////////////////////////////

float invSqrt(float x) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8002f54:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7fd ff2d 	bl	8000db8 <__aeabi_fmul>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	617b      	str	r3, [r7, #20]
	float y = x;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	105a      	asrs	r2, r3, #1
 8002f72:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <invSqrt+0xac>)
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	6979      	ldr	r1, [r7, #20]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd ff17 	bl	8000db8 <__aeabi_fmul>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f7fd ff10 	bl	8000db8 <__aeabi_fmul>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002fa0:	f7fd fe00 	bl	8000ba4 <__aeabi_fsub>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4619      	mov	r1, r3
 8002fac:	4610      	mov	r0, r2
 8002fae:	f7fd ff03 	bl	8000db8 <__aeabi_fmul>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	6979      	ldr	r1, [r7, #20]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fefc 	bl	8000db8 <__aeabi_fmul>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f7fd fef5 	bl	8000db8 <__aeabi_fmul>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002fd6:	f7fd fde5 	bl	8000ba4 <__aeabi_fsub>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f7fd fee8 	bl	8000db8 <__aeabi_fmul>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	613b      	str	r3, [r7, #16]
	return y;
 8002fec:	693b      	ldr	r3, [r7, #16]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	5f3759df 	.word	0x5f3759df
 8002ffc:	00000000 	.word	0x00000000

08003000 <calculateAngles>:

void calculateAngles(TM_AHRSIMU_t* AHRS)
{
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	AHRS->Roll = (float) atan2f(AHRS->_q0 * AHRS->_q1 + AHRS->_q2 * AHRS->_q3, 0.5f - AHRS->_q1 * AHRS->_q1 - AHRS->_q2 * AHRS->_q2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f7fd fed0 	bl	8000db8 <__aeabi_fmul>
 8003018:	4603      	mov	r3, r0
 800301a:	461c      	mov	r4, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f7fd fec6 	bl	8000db8 <__aeabi_fmul>
 800302c:	4603      	mov	r3, r0
 800302e:	4619      	mov	r1, r3
 8003030:	4620      	mov	r0, r4
 8003032:	f7fd fdb9 	bl	8000ba8 <__addsf3>
 8003036:	4603      	mov	r3, r0
 8003038:	461c      	mov	r4, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f7fd feb7 	bl	8000db8 <__aeabi_fmul>
 800304a:	4603      	mov	r3, r0
 800304c:	4619      	mov	r1, r3
 800304e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8003052:	f7fd fda7 	bl	8000ba4 <__aeabi_fsub>
 8003056:	4603      	mov	r3, r0
 8003058:	461d      	mov	r5, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4619      	mov	r1, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f7fd fea7 	bl	8000db8 <__aeabi_fmul>
 800306a:	4603      	mov	r3, r0
 800306c:	4619      	mov	r1, r3
 800306e:	4628      	mov	r0, r5
 8003070:	f7fd fd98 	bl	8000ba4 <__aeabi_fsub>
 8003074:	4603      	mov	r3, r0
 8003076:	4619      	mov	r1, r3
 8003078:	4620      	mov	r0, r4
 800307a:	f012 fe31 	bl	8015ce0 <atan2f>
 800307e:	4602      	mov	r2, r0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	601a      	str	r2, [r3, #0]
	AHRS->Pitch = (float) asinf(-2.0f * (AHRS->_q1 * AHRS->_q3 - AHRS->_q0 * AHRS->_q2));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7fd fe92 	bl	8000db8 <__aeabi_fmul>
 8003094:	4603      	mov	r3, r0
 8003096:	461c      	mov	r4, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f7fd fe88 	bl	8000db8 <__aeabi_fmul>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4619      	mov	r1, r3
 80030ac:	4620      	mov	r0, r4
 80030ae:	f7fd fd79 	bl	8000ba4 <__aeabi_fsub>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd fe7d 	bl	8000db8 <__aeabi_fmul>
 80030be:	4603      	mov	r3, r0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f012 fdbf 	bl	8015c44 <asinf>
 80030c6:	4602      	mov	r2, r0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	605a      	str	r2, [r3, #4]
	AHRS->Yaw = (float) atan2f(AHRS->_q1 * AHRS->_q2 + AHRS->_q0 * AHRS->_q3, 0.5f - AHRS->_q2 * AHRS->_q2 - AHRS->_q3 * AHRS->_q3);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699a      	ldr	r2, [r3, #24]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f7fd fe6e 	bl	8000db8 <__aeabi_fmul>
 80030dc:	4603      	mov	r3, r0
 80030de:	461c      	mov	r4, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7fd fe64 	bl	8000db8 <__aeabi_fmul>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4619      	mov	r1, r3
 80030f4:	4620      	mov	r0, r4
 80030f6:	f7fd fd57 	bl	8000ba8 <__addsf3>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461c      	mov	r4, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4619      	mov	r1, r3
 8003108:	4610      	mov	r0, r2
 800310a:	f7fd fe55 	bl	8000db8 <__aeabi_fmul>
 800310e:	4603      	mov	r3, r0
 8003110:	4619      	mov	r1, r3
 8003112:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8003116:	f7fd fd45 	bl	8000ba4 <__aeabi_fsub>
 800311a:	4603      	mov	r3, r0
 800311c:	461d      	mov	r5, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f7fd fe45 	bl	8000db8 <__aeabi_fmul>
 800312e:	4603      	mov	r3, r0
 8003130:	4619      	mov	r1, r3
 8003132:	4628      	mov	r0, r5
 8003134:	f7fd fd36 	bl	8000ba4 <__aeabi_fsub>
 8003138:	4603      	mov	r3, r0
 800313a:	4619      	mov	r1, r3
 800313c:	4620      	mov	r0, r4
 800313e:	f012 fdcf 	bl	8015ce0 <atan2f>
 8003142:	4602      	mov	r2, r0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	609a      	str	r2, [r3, #8]

	/* Calculate degrees and remove inclination */
	AHRS->Roll *= R2D;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	49b0      	ldr	r1, [pc, #704]	; (8003410 <calculateAngles+0x410>)
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd fe32 	bl	8000db8 <__aeabi_fmul>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	601a      	str	r2, [r3, #0]
	AHRS->Pitch *= R2D;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	49ab      	ldr	r1, [pc, #684]	; (8003410 <calculateAngles+0x410>)
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fe28 	bl	8000db8 <__aeabi_fmul>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	605a      	str	r2, [r3, #4]
	AHRS->Yaw *= R2D;// - AHRS->Inclination;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	49a6      	ldr	r1, [pc, #664]	; (8003410 <calculateAngles+0x410>)
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd fe1e 	bl	8000db8 <__aeabi_fmul>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	609a      	str	r2, [r3, #8]

	if (AHRS->Yaw >= 180) {
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	49a2      	ldr	r1, [pc, #648]	; (8003414 <calculateAngles+0x414>)
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd ffc6 	bl	800111c <__aeabi_fcmpge>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <calculateAngles+0x1ac>
		AHRS->Yaw -= 360.0f;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	499f      	ldr	r1, [pc, #636]	; (8003418 <calculateAngles+0x418>)
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd fd01 	bl	8000ba4 <__aeabi_fsub>
 80031a2:	4603      	mov	r3, r0
 80031a4:	461a      	mov	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	e012      	b.n	80031d2 <calculateAngles+0x1d2>
	} else if (AHRS->Yaw < -180) {
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	499a      	ldr	r1, [pc, #616]	; (800341c <calculateAngles+0x41c>)
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd ff9e 	bl	80010f4 <__aeabi_fcmplt>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <calculateAngles+0x1d2>
		AHRS->Yaw += 360.0f;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4995      	ldr	r1, [pc, #596]	; (8003418 <calculateAngles+0x418>)
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd fcef 	bl	8000ba8 <__addsf3>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461a      	mov	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	609a      	str	r2, [r3, #8]
	}

	AHRS->Roll  = (0.95 * (Pre_IMU[ROLL]  + (imu.gyroRaw[ROLL] * 0.004)))  + (0.05 * AHRS->Roll);
 80031d2:	4b93      	ldr	r3, [pc, #588]	; (8003420 <calculateAngles+0x420>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd f940 	bl	800045c <__aeabi_f2d>
 80031dc:	4604      	mov	r4, r0
 80031de:	460d      	mov	r5, r1
 80031e0:	4b90      	ldr	r3, [pc, #576]	; (8003424 <calculateAngles+0x424>)
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd f939 	bl	800045c <__aeabi_f2d>
 80031ea:	a383      	add	r3, pc, #524	; (adr r3, 80033f8 <calculateAngles+0x3f8>)
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	f7fd f98c 	bl	800050c <__aeabi_dmul>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4620      	mov	r0, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fc ffd0 	bl	80001a0 <__adddf3>
 8003200:	4603      	mov	r3, r0
 8003202:	460c      	mov	r4, r1
 8003204:	4618      	mov	r0, r3
 8003206:	4621      	mov	r1, r4
 8003208:	a37d      	add	r3, pc, #500	; (adr r3, 8003400 <calculateAngles+0x400>)
 800320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320e:	f7fd f97d 	bl	800050c <__aeabi_dmul>
 8003212:	4603      	mov	r3, r0
 8003214:	460c      	mov	r4, r1
 8003216:	4625      	mov	r5, r4
 8003218:	461c      	mov	r4, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd f91c 	bl	800045c <__aeabi_f2d>
 8003224:	a378      	add	r3, pc, #480	; (adr r3, 8003408 <calculateAngles+0x408>)
 8003226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322a:	f7fd f96f 	bl	800050c <__aeabi_dmul>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4620      	mov	r0, r4
 8003234:	4629      	mov	r1, r5
 8003236:	f7fc ffb3 	bl	80001a0 <__adddf3>
 800323a:	4603      	mov	r3, r0
 800323c:	460c      	mov	r4, r1
 800323e:	4618      	mov	r0, r3
 8003240:	4621      	mov	r1, r4
 8003242:	f7fd fc5b 	bl	8000afc <__aeabi_d2f>
 8003246:	4602      	mov	r2, r0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	601a      	str	r2, [r3, #0]
	AHRS->Pitch = (0.95 * (Pre_IMU[PITCH] + (imu.gyroRaw[PITCH] * 0.004))) + (0.05 * AHRS->Pitch);
 800324c:	4b74      	ldr	r3, [pc, #464]	; (8003420 <calculateAngles+0x420>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd f903 	bl	800045c <__aeabi_f2d>
 8003256:	4604      	mov	r4, r0
 8003258:	460d      	mov	r5, r1
 800325a:	4b72      	ldr	r3, [pc, #456]	; (8003424 <calculateAngles+0x424>)
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd f8fc 	bl	800045c <__aeabi_f2d>
 8003264:	a364      	add	r3, pc, #400	; (adr r3, 80033f8 <calculateAngles+0x3f8>)
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	f7fd f94f 	bl	800050c <__aeabi_dmul>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4620      	mov	r0, r4
 8003274:	4629      	mov	r1, r5
 8003276:	f7fc ff93 	bl	80001a0 <__adddf3>
 800327a:	4603      	mov	r3, r0
 800327c:	460c      	mov	r4, r1
 800327e:	4618      	mov	r0, r3
 8003280:	4621      	mov	r1, r4
 8003282:	a35f      	add	r3, pc, #380	; (adr r3, 8003400 <calculateAngles+0x400>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f7fd f940 	bl	800050c <__aeabi_dmul>
 800328c:	4603      	mov	r3, r0
 800328e:	460c      	mov	r4, r1
 8003290:	4625      	mov	r5, r4
 8003292:	461c      	mov	r4, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd f8df 	bl	800045c <__aeabi_f2d>
 800329e:	a35a      	add	r3, pc, #360	; (adr r3, 8003408 <calculateAngles+0x408>)
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f7fd f932 	bl	800050c <__aeabi_dmul>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4620      	mov	r0, r4
 80032ae:	4629      	mov	r1, r5
 80032b0:	f7fc ff76 	bl	80001a0 <__adddf3>
 80032b4:	4603      	mov	r3, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	4618      	mov	r0, r3
 80032ba:	4621      	mov	r1, r4
 80032bc:	f7fd fc1e 	bl	8000afc <__aeabi_d2f>
 80032c0:	4602      	mov	r2, r0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	605a      	str	r2, [r3, #4]
	AHRS->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRS->Yaw);
 80032c6:	4b56      	ldr	r3, [pc, #344]	; (8003420 <calculateAngles+0x420>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd f8c6 	bl	800045c <__aeabi_f2d>
 80032d0:	4604      	mov	r4, r0
 80032d2:	460d      	mov	r5, r1
 80032d4:	4b53      	ldr	r3, [pc, #332]	; (8003424 <calculateAngles+0x424>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd f8bf 	bl	800045c <__aeabi_f2d>
 80032de:	a346      	add	r3, pc, #280	; (adr r3, 80033f8 <calculateAngles+0x3f8>)
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	f7fd f912 	bl	800050c <__aeabi_dmul>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4620      	mov	r0, r4
 80032ee:	4629      	mov	r1, r5
 80032f0:	f7fc ff56 	bl	80001a0 <__adddf3>
 80032f4:	4603      	mov	r3, r0
 80032f6:	460c      	mov	r4, r1
 80032f8:	4618      	mov	r0, r3
 80032fa:	4621      	mov	r1, r4
 80032fc:	a340      	add	r3, pc, #256	; (adr r3, 8003400 <calculateAngles+0x400>)
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f7fd f903 	bl	800050c <__aeabi_dmul>
 8003306:	4603      	mov	r3, r0
 8003308:	460c      	mov	r4, r1
 800330a:	4625      	mov	r5, r4
 800330c:	461c      	mov	r4, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd f8a2 	bl	800045c <__aeabi_f2d>
 8003318:	a33b      	add	r3, pc, #236	; (adr r3, 8003408 <calculateAngles+0x408>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f7fd f8f5 	bl	800050c <__aeabi_dmul>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4620      	mov	r0, r4
 8003328:	4629      	mov	r1, r5
 800332a:	f7fc ff39 	bl	80001a0 <__adddf3>
 800332e:	4603      	mov	r3, r0
 8003330:	460c      	mov	r4, r1
 8003332:	4618      	mov	r0, r3
 8003334:	4621      	mov	r1, r4
 8003336:	f7fd fbe1 	bl	8000afc <__aeabi_d2f>
 800333a:	4602      	mov	r2, r0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	609a      	str	r2, [r3, #8]

	imu.AHRS[ROLL] = AHRS->Roll + 0.0f;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f04f 0100 	mov.w	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fc2d 	bl	8000ba8 <__addsf3>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	4b34      	ldr	r3, [pc, #208]	; (8003424 <calculateAngles+0x424>)
 8003354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	imu.AHRS[PITCH] = AHRS->Pitch + 0.0f;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fc21 	bl	8000ba8 <__addsf3>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <calculateAngles+0x424>)
 800336c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	imu.AHRS[YAW] = AHRS->Yaw;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4a2b      	ldr	r2, [pc, #172]	; (8003424 <calculateAngles+0x424>)
 8003376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	att.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 800337a:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <calculateAngles+0x424>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd fef5 	bl	8001170 <__aeabi_f2iz>
 8003386:	4603      	mov	r3, r0
 8003388:	b21b      	sxth	r3, r3
 800338a:	b29b      	uxth	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	4413      	add	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	b29b      	uxth	r3, r3
 8003396:	b21a      	sxth	r2, r3
 8003398:	4b23      	ldr	r3, [pc, #140]	; (8003428 <calculateAngles+0x428>)
 800339a:	801a      	strh	r2, [r3, #0]
	att.angle[PITCH] = (int16_t) imu.AHRS[PITCH] * 10;
 800339c:	4b21      	ldr	r3, [pc, #132]	; (8003424 <calculateAngles+0x424>)
 800339e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd fee4 	bl	8001170 <__aeabi_f2iz>
 80033a8:	4603      	mov	r3, r0
 80033aa:	b21b      	sxth	r3, r3
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	0092      	lsls	r2, r2, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	b21a      	sxth	r2, r3
 80033ba:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <calculateAngles+0x428>)
 80033bc:	805a      	strh	r2, [r3, #2]
	att.heading = (int16_t) imu.AHRS[YAW];
 80033be:	4b19      	ldr	r3, [pc, #100]	; (8003424 <calculateAngles+0x424>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd fed3 	bl	8001170 <__aeabi_f2iz>
 80033ca:	4603      	mov	r3, r0
 80033cc:	b21a      	sxth	r2, r3
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <calculateAngles+0x428>)
 80033d0:	809a      	strh	r2, [r3, #4]

	Pre_IMU[ROLL]  = AHRS->Roll;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a12      	ldr	r2, [pc, #72]	; (8003420 <calculateAngles+0x420>)
 80033d8:	6013      	str	r3, [r2, #0]
	Pre_IMU[PITCH] = AHRS->Pitch;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4a10      	ldr	r2, [pc, #64]	; (8003420 <calculateAngles+0x420>)
 80033e0:	6053      	str	r3, [r2, #4]
	Pre_IMU[YAW]   = AHRS->Yaw;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4a0e      	ldr	r2, [pc, #56]	; (8003420 <calculateAngles+0x420>)
 80033e8:	6093      	str	r3, [r2, #8]
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bdb0      	pop	{r4, r5, r7, pc}
 80033f2:	bf00      	nop
 80033f4:	f3af 8000 	nop.w
 80033f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80033fc:	3f70624d 	.word	0x3f70624d
 8003400:	66666666 	.word	0x66666666
 8003404:	3fee6666 	.word	0x3fee6666
 8003408:	9999999a 	.word	0x9999999a
 800340c:	3fa99999 	.word	0x3fa99999
 8003410:	42652ee0 	.word	0x42652ee0
 8003414:	43340000 	.word	0x43340000
 8003418:	43b40000 	.word	0x43b40000
 800341c:	c3340000 	.word	0xc3340000
 8003420:	200002dc 	.word	0x200002dc
 8003424:	20000e20 	.word	0x20000e20
 8003428:	20000ef8 	.word	0x20000ef8

0800342c <TM_AHRSIMU_Init>:

static void cliImu(cli_args_t *args);

void TM_AHRSIMU_Init(float sampleRate, float beta, float inclination)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  AHRS._beta = beta;
 8003438:	4a13      	ldr	r2, [pc, #76]	; (8003488 <TM_AHRSIMU_Init+0x5c>)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	6113      	str	r3, [r2, #16]
  AHRS._sampleRate = 1 / sampleRate;
 800343e:	68f9      	ldr	r1, [r7, #12]
 8003440:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003444:	f7fd fd6c 	bl	8000f20 <__aeabi_fdiv>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <TM_AHRSIMU_Init+0x5c>)
 800344e:	625a      	str	r2, [r3, #36]	; 0x24
  AHRS.Inclination= inclination;
 8003450:	4a0d      	ldr	r2, [pc, #52]	; (8003488 <TM_AHRSIMU_Init+0x5c>)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	60d3      	str	r3, [r2, #12]

  AHRS._q0 = 1.0f;
 8003456:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <TM_AHRSIMU_Init+0x5c>)
 8003458:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800345c:	615a      	str	r2, [r3, #20]
  AHRS._q1 = 0.0f;
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <TM_AHRSIMU_Init+0x5c>)
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	619a      	str	r2, [r3, #24]
  AHRS._q2 = 0.0f;
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <TM_AHRSIMU_Init+0x5c>)
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	61da      	str	r2, [r3, #28]
  AHRS._q3 = 0.0f;
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <TM_AHRSIMU_Init+0x5c>)
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	621a      	str	r2, [r3, #32]
  cliAdd("imu", cliImu);
 8003476:	4905      	ldr	r1, [pc, #20]	; (800348c <TM_AHRSIMU_Init+0x60>)
 8003478:	4805      	ldr	r0, [pc, #20]	; (8003490 <TM_AHRSIMU_Init+0x64>)
 800347a:	f007 fcf7 	bl	800ae6c <cliAdd>
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000c80 	.word	0x20000c80
 800348c:	08003c49 	.word	0x08003c49
 8003490:	08019bcc 	.word	0x08019bcc

08003494 <TM_AHRSIMU_UpdateIMU>:
	/* Calculate new angles */
	calculateAngles(AHRS);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRS, float gx, float gy, float gz, float ax, float ay, float az)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b09b      	sub	sp, #108	; 0x6c
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  float s0, s1, s2, s3;
  float qDot1, qDot2, qDot3, qDot4;
  float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

// Convert gyroscope degrees/sec to radians/sec
	gx = AHRSIMU_DEG2RAD(gx);
 80034a2:	4967      	ldr	r1, [pc, #412]	; (8003640 <TM_AHRSIMU_UpdateIMU+0x1ac>)
 80034a4:	68b8      	ldr	r0, [r7, #8]
 80034a6:	f7fd fc87 	bl	8000db8 <__aeabi_fmul>
 80034aa:	4603      	mov	r3, r0
 80034ac:	60bb      	str	r3, [r7, #8]
	gy = AHRSIMU_DEG2RAD(gy);
 80034ae:	4964      	ldr	r1, [pc, #400]	; (8003640 <TM_AHRSIMU_UpdateIMU+0x1ac>)
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7fd fc81 	bl	8000db8 <__aeabi_fmul>
 80034b6:	4603      	mov	r3, r0
 80034b8:	607b      	str	r3, [r7, #4]
	gz = AHRSIMU_DEG2RAD(gz);
 80034ba:	4961      	ldr	r1, [pc, #388]	; (8003640 <TM_AHRSIMU_UpdateIMU+0x1ac>)
 80034bc:	6838      	ldr	r0, [r7, #0]
 80034be:	f7fd fc7b 	bl	8000db8 <__aeabi_fmul>
 80034c2:	4603      	mov	r3, r0
 80034c4:	603b      	str	r3, [r7, #0]

  /* Rate of change of quaternion from gyroscope */
  qDot1 = 0.5f * (-AHRS->_q1 * gx - AHRS->_q2 * gy - AHRS->_q3 * gz);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd fc71 	bl	8000db8 <__aeabi_fmul>
 80034d6:	4603      	mov	r3, r0
 80034d8:	461c      	mov	r4, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd fc69 	bl	8000db8 <__aeabi_fmul>
 80034e6:	4603      	mov	r3, r0
 80034e8:	4619      	mov	r1, r3
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7fd fb5a 	bl	8000ba4 <__aeabi_fsub>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461c      	mov	r4, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	6839      	ldr	r1, [r7, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd fc5c 	bl	8000db8 <__aeabi_fmul>
 8003500:	4603      	mov	r3, r0
 8003502:	4619      	mov	r1, r3
 8003504:	4620      	mov	r0, r4
 8003506:	f7fd fb4d 	bl	8000ba4 <__aeabi_fsub>
 800350a:	4603      	mov	r3, r0
 800350c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd fc51 	bl	8000db8 <__aeabi_fmul>
 8003516:	4603      	mov	r3, r0
 8003518:	667b      	str	r3, [r7, #100]	; 0x64
  qDot2 = 0.5f * (AHRS->_q0 * gx + AHRS->_q2 * gz - AHRS->_q3 * gy);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd fc49 	bl	8000db8 <__aeabi_fmul>
 8003526:	4603      	mov	r3, r0
 8003528:	461c      	mov	r4, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd fc41 	bl	8000db8 <__aeabi_fmul>
 8003536:	4603      	mov	r3, r0
 8003538:	4619      	mov	r1, r3
 800353a:	4620      	mov	r0, r4
 800353c:	f7fd fb34 	bl	8000ba8 <__addsf3>
 8003540:	4603      	mov	r3, r0
 8003542:	461c      	mov	r4, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fc34 	bl	8000db8 <__aeabi_fmul>
 8003550:	4603      	mov	r3, r0
 8003552:	4619      	mov	r1, r3
 8003554:	4620      	mov	r0, r4
 8003556:	f7fd fb25 	bl	8000ba4 <__aeabi_fsub>
 800355a:	4603      	mov	r3, r0
 800355c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003560:	4618      	mov	r0, r3
 8003562:	f7fd fc29 	bl	8000db8 <__aeabi_fmul>
 8003566:	4603      	mov	r3, r0
 8003568:	663b      	str	r3, [r7, #96]	; 0x60
  qDot3 = 0.5f * (AHRS->_q0 * gy - AHRS->_q1 * gz + AHRS->_q3 * gx);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fc21 	bl	8000db8 <__aeabi_fmul>
 8003576:	4603      	mov	r3, r0
 8003578:	461c      	mov	r4, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	6839      	ldr	r1, [r7, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7fd fc19 	bl	8000db8 <__aeabi_fmul>
 8003586:	4603      	mov	r3, r0
 8003588:	4619      	mov	r1, r3
 800358a:	4620      	mov	r0, r4
 800358c:	f7fd fb0a 	bl	8000ba4 <__aeabi_fsub>
 8003590:	4603      	mov	r3, r0
 8003592:	461c      	mov	r4, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fc0c 	bl	8000db8 <__aeabi_fmul>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4619      	mov	r1, r3
 80035a4:	4620      	mov	r0, r4
 80035a6:	f7fd faff 	bl	8000ba8 <__addsf3>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fd fc01 	bl	8000db8 <__aeabi_fmul>
 80035b6:	4603      	mov	r3, r0
 80035b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  qDot4 = 0.5f * (AHRS->_q0 * gz + AHRS->_q1 * gy - AHRS->_q2 * gx);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	6839      	ldr	r1, [r7, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd fbf9 	bl	8000db8 <__aeabi_fmul>
 80035c6:	4603      	mov	r3, r0
 80035c8:	461c      	mov	r4, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd fbf1 	bl	8000db8 <__aeabi_fmul>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4619      	mov	r1, r3
 80035da:	4620      	mov	r0, r4
 80035dc:	f7fd fae4 	bl	8000ba8 <__addsf3>
 80035e0:	4603      	mov	r3, r0
 80035e2:	461c      	mov	r4, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fd fbe4 	bl	8000db8 <__aeabi_fmul>
 80035f0:	4603      	mov	r3, r0
 80035f2:	4619      	mov	r1, r3
 80035f4:	4620      	mov	r0, r4
 80035f6:	f7fd fad5 	bl	8000ba4 <__aeabi_fsub>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003600:	4618      	mov	r0, r3
 8003602:	f7fd fbd9 	bl	8000db8 <__aeabi_fmul>
 8003606:	4603      	mov	r3, r0
 8003608:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
  if (!(ax == 0.0f && ay == 0.0f && az == 0.0f))
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003610:	f7fd fd66 	bl	80010e0 <__aeabi_fcmpeq>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d014      	beq.n	8003644 <TM_AHRSIMU_UpdateIMU+0x1b0>
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003620:	f7fd fd5e 	bl	80010e0 <__aeabi_fcmpeq>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00c      	beq.n	8003644 <TM_AHRSIMU_UpdateIMU+0x1b0>
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003632:	f7fd fd55 	bl	80010e0 <__aeabi_fcmpeq>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	f040 8231 	bne.w	8003aa0 <TM_AHRSIMU_UpdateIMU+0x60c>
 800363e:	e001      	b.n	8003644 <TM_AHRSIMU_UpdateIMU+0x1b0>
 8003640:	3c8efa35 	.word	0x3c8efa35
  {

   /* Normalise accelerometer measurement */
     recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003644:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003646:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003648:	f7fd fbb6 	bl	8000db8 <__aeabi_fmul>
 800364c:	4603      	mov	r3, r0
 800364e:	461c      	mov	r4, r3
 8003650:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003652:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003654:	f7fd fbb0 	bl	8000db8 <__aeabi_fmul>
 8003658:	4603      	mov	r3, r0
 800365a:	4619      	mov	r1, r3
 800365c:	4620      	mov	r0, r4
 800365e:	f7fd faa3 	bl	8000ba8 <__addsf3>
 8003662:	4603      	mov	r3, r0
 8003664:	461c      	mov	r4, r3
 8003666:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800366a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800366e:	f7fd fba3 	bl	8000db8 <__aeabi_fmul>
 8003672:	4603      	mov	r3, r0
 8003674:	4619      	mov	r1, r3
 8003676:	4620      	mov	r0, r4
 8003678:	f7fd fa96 	bl	8000ba8 <__addsf3>
 800367c:	4603      	mov	r3, r0
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fc64 	bl	8002f4c <invSqrt>
 8003684:	6578      	str	r0, [r7, #84]	; 0x54
     ax *= recipNorm;
 8003686:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003688:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800368a:	f7fd fb95 	bl	8000db8 <__aeabi_fmul>
 800368e:	4603      	mov	r3, r0
 8003690:	67bb      	str	r3, [r7, #120]	; 0x78
     ay *= recipNorm;
 8003692:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003694:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003696:	f7fd fb8f 	bl	8000db8 <__aeabi_fmul>
 800369a:	4603      	mov	r3, r0
 800369c:	67fb      	str	r3, [r7, #124]	; 0x7c
     az *= recipNorm;
 800369e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036a0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80036a4:	f7fd fb88 	bl	8000db8 <__aeabi_fmul>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

   /* Auxiliary variables to avoid repeated arithmetic */
     _2q0 = 2.0f * AHRS->_q0;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	4619      	mov	r1, r3
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fd fa77 	bl	8000ba8 <__addsf3>
 80036ba:	4603      	mov	r3, r0
 80036bc:	653b      	str	r3, [r7, #80]	; 0x50
     _2q1 = 2.0f * AHRS->_q1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	4619      	mov	r1, r3
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fd fa6f 	bl	8000ba8 <__addsf3>
 80036ca:	4603      	mov	r3, r0
 80036cc:	64fb      	str	r3, [r7, #76]	; 0x4c
     _2q2 = 2.0f * AHRS->_q2;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	4619      	mov	r1, r3
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd fa67 	bl	8000ba8 <__addsf3>
 80036da:	4603      	mov	r3, r0
 80036dc:	64bb      	str	r3, [r7, #72]	; 0x48
     _2q3 = 2.0f * AHRS->_q3;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fd fa5f 	bl	8000ba8 <__addsf3>
 80036ea:	4603      	mov	r3, r0
 80036ec:	647b      	str	r3, [r7, #68]	; 0x44
     _4q0 = 4.0f * AHRS->_q0;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fb5e 	bl	8000db8 <__aeabi_fmul>
 80036fc:	4603      	mov	r3, r0
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40
     _4q1 = 4.0f * AHRS->_q1;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fb55 	bl	8000db8 <__aeabi_fmul>
 800370e:	4603      	mov	r3, r0
 8003710:	63fb      	str	r3, [r7, #60]	; 0x3c
     _4q2 = 4.0f * AHRS->_q2;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd fb4c 	bl	8000db8 <__aeabi_fmul>
 8003720:	4603      	mov	r3, r0
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
     _8q1 = 8.0f * AHRS->_q1;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fb43 	bl	8000db8 <__aeabi_fmul>
 8003732:	4603      	mov	r3, r0
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
     _8q2 = 8.0f * AHRS->_q2;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd fb3a 	bl	8000db8 <__aeabi_fmul>
 8003744:	4603      	mov	r3, r0
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
     q0q0 = AHRS->_q0 * AHRS->_q0;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	4619      	mov	r1, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f7fd fb30 	bl	8000db8 <__aeabi_fmul>
 8003758:	4603      	mov	r3, r0
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
     q1q1 = AHRS->_q1 * AHRS->_q1;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f7fd fb26 	bl	8000db8 <__aeabi_fmul>
 800376c:	4603      	mov	r3, r0
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
     q2q2 = AHRS->_q2 * AHRS->_q2;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f7fd fb1c 	bl	8000db8 <__aeabi_fmul>
 8003780:	4603      	mov	r3, r0
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
     q3q3 = AHRS->_q3 * AHRS->_q3;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f7fd fb12 	bl	8000db8 <__aeabi_fmul>
 8003794:	4603      	mov	r3, r0
 8003796:	623b      	str	r3, [r7, #32]

     /* Gradient decent algorithm corrective step */
     s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800379a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800379c:	f7fd fb0c 	bl	8000db8 <__aeabi_fmul>
 80037a0:	4603      	mov	r3, r0
 80037a2:	461c      	mov	r4, r3
 80037a4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80037a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80037a8:	f7fd fb06 	bl	8000db8 <__aeabi_fmul>
 80037ac:	4603      	mov	r3, r0
 80037ae:	4619      	mov	r1, r3
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7fd f9f9 	bl	8000ba8 <__addsf3>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461c      	mov	r4, r3
 80037ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80037be:	f7fd fafb 	bl	8000db8 <__aeabi_fmul>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4619      	mov	r1, r3
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7fd f9ee 	bl	8000ba8 <__addsf3>
 80037cc:	4603      	mov	r3, r0
 80037ce:	461c      	mov	r4, r3
 80037d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80037d4:	f7fd faf0 	bl	8000db8 <__aeabi_fmul>
 80037d8:	4603      	mov	r3, r0
 80037da:	4619      	mov	r1, r3
 80037dc:	4620      	mov	r0, r4
 80037de:	f7fd f9e1 	bl	8000ba4 <__aeabi_fsub>
 80037e2:	4603      	mov	r3, r0
 80037e4:	61fb      	str	r3, [r7, #28]
     s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRS->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80037e6:	6a39      	ldr	r1, [r7, #32]
 80037e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037ea:	f7fd fae5 	bl	8000db8 <__aeabi_fmul>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461c      	mov	r4, r3
 80037f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80037f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80037f6:	f7fd fadf 	bl	8000db8 <__aeabi_fmul>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4619      	mov	r1, r3
 80037fe:	4620      	mov	r0, r4
 8003800:	f7fd f9d0 	bl	8000ba4 <__aeabi_fsub>
 8003804:	4603      	mov	r3, r0
 8003806:	461c      	mov	r4, r3
 8003808:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800380c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800380e:	f7fd fad3 	bl	8000db8 <__aeabi_fmul>
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f7fd facb 	bl	8000db8 <__aeabi_fmul>
 8003822:	4603      	mov	r3, r0
 8003824:	4619      	mov	r1, r3
 8003826:	4620      	mov	r0, r4
 8003828:	f7fd f9be 	bl	8000ba8 <__addsf3>
 800382c:	4603      	mov	r3, r0
 800382e:	461c      	mov	r4, r3
 8003830:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003832:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003834:	f7fd fac0 	bl	8000db8 <__aeabi_fmul>
 8003838:	4603      	mov	r3, r0
 800383a:	4619      	mov	r1, r3
 800383c:	4620      	mov	r0, r4
 800383e:	f7fd f9b1 	bl	8000ba4 <__aeabi_fsub>
 8003842:	4603      	mov	r3, r0
 8003844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd f9ac 	bl	8000ba4 <__aeabi_fsub>
 800384c:	4603      	mov	r3, r0
 800384e:	461c      	mov	r4, r3
 8003850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003852:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003854:	f7fd fab0 	bl	8000db8 <__aeabi_fmul>
 8003858:	4603      	mov	r3, r0
 800385a:	4619      	mov	r1, r3
 800385c:	4620      	mov	r0, r4
 800385e:	f7fd f9a3 	bl	8000ba8 <__addsf3>
 8003862:	4603      	mov	r3, r0
 8003864:	461c      	mov	r4, r3
 8003866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003868:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800386a:	f7fd faa5 	bl	8000db8 <__aeabi_fmul>
 800386e:	4603      	mov	r3, r0
 8003870:	4619      	mov	r1, r3
 8003872:	4620      	mov	r0, r4
 8003874:	f7fd f998 	bl	8000ba8 <__addsf3>
 8003878:	4603      	mov	r3, r0
 800387a:	461c      	mov	r4, r3
 800387c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003880:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003882:	f7fd fa99 	bl	8000db8 <__aeabi_fmul>
 8003886:	4603      	mov	r3, r0
 8003888:	4619      	mov	r1, r3
 800388a:	4620      	mov	r0, r4
 800388c:	f7fd f98c 	bl	8000ba8 <__addsf3>
 8003890:	4603      	mov	r3, r0
 8003892:	61bb      	str	r3, [r7, #24]
     s2 = 4.0f * q0q0 * AHRS->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003894:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800389a:	f7fd fa8d 	bl	8000db8 <__aeabi_fmul>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f7fd fa85 	bl	8000db8 <__aeabi_fmul>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461c      	mov	r4, r3
 80038b2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80038b4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80038b6:	f7fd fa7f 	bl	8000db8 <__aeabi_fmul>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4619      	mov	r1, r3
 80038be:	4620      	mov	r0, r4
 80038c0:	f7fd f972 	bl	8000ba8 <__addsf3>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461c      	mov	r4, r3
 80038c8:	6a39      	ldr	r1, [r7, #32]
 80038ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038cc:	f7fd fa74 	bl	8000db8 <__aeabi_fmul>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4619      	mov	r1, r3
 80038d4:	4620      	mov	r0, r4
 80038d6:	f7fd f967 	bl	8000ba8 <__addsf3>
 80038da:	4603      	mov	r3, r0
 80038dc:	461c      	mov	r4, r3
 80038de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80038e2:	f7fd fa69 	bl	8000db8 <__aeabi_fmul>
 80038e6:	4603      	mov	r3, r0
 80038e8:	4619      	mov	r1, r3
 80038ea:	4620      	mov	r0, r4
 80038ec:	f7fd f95a 	bl	8000ba4 <__aeabi_fsub>
 80038f0:	4603      	mov	r3, r0
 80038f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd f955 	bl	8000ba4 <__aeabi_fsub>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461c      	mov	r4, r3
 80038fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003902:	f7fd fa59 	bl	8000db8 <__aeabi_fmul>
 8003906:	4603      	mov	r3, r0
 8003908:	4619      	mov	r1, r3
 800390a:	4620      	mov	r0, r4
 800390c:	f7fd f94c 	bl	8000ba8 <__addsf3>
 8003910:	4603      	mov	r3, r0
 8003912:	461c      	mov	r4, r3
 8003914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003918:	f7fd fa4e 	bl	8000db8 <__aeabi_fmul>
 800391c:	4603      	mov	r3, r0
 800391e:	4619      	mov	r1, r3
 8003920:	4620      	mov	r0, r4
 8003922:	f7fd f941 	bl	8000ba8 <__addsf3>
 8003926:	4603      	mov	r3, r0
 8003928:	461c      	mov	r4, r3
 800392a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800392e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003930:	f7fd fa42 	bl	8000db8 <__aeabi_fmul>
 8003934:	4603      	mov	r3, r0
 8003936:	4619      	mov	r1, r3
 8003938:	4620      	mov	r0, r4
 800393a:	f7fd f935 	bl	8000ba8 <__addsf3>
 800393e:	4603      	mov	r3, r0
 8003940:	617b      	str	r3, [r7, #20]
     s3 = 4.0f * q1q1 * AHRS->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRS->_q3 - _2q2 * ay;
 8003942:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003948:	f7fd fa36 	bl	8000db8 <__aeabi_fmul>
 800394c:	4603      	mov	r3, r0
 800394e:	461a      	mov	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f7fd fa2e 	bl	8000db8 <__aeabi_fmul>
 800395c:	4603      	mov	r3, r0
 800395e:	461c      	mov	r4, r3
 8003960:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003962:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003964:	f7fd fa28 	bl	8000db8 <__aeabi_fmul>
 8003968:	4603      	mov	r3, r0
 800396a:	4619      	mov	r1, r3
 800396c:	4620      	mov	r0, r4
 800396e:	f7fd f919 	bl	8000ba4 <__aeabi_fsub>
 8003972:	4603      	mov	r3, r0
 8003974:	461c      	mov	r4, r3
 8003976:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800397a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800397c:	f7fd fa1c 	bl	8000db8 <__aeabi_fmul>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7fd fa14 	bl	8000db8 <__aeabi_fmul>
 8003990:	4603      	mov	r3, r0
 8003992:	4619      	mov	r1, r3
 8003994:	4620      	mov	r0, r4
 8003996:	f7fd f907 	bl	8000ba8 <__addsf3>
 800399a:	4603      	mov	r3, r0
 800399c:	461c      	mov	r4, r3
 800399e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80039a2:	f7fd fa09 	bl	8000db8 <__aeabi_fmul>
 80039a6:	4603      	mov	r3, r0
 80039a8:	4619      	mov	r1, r3
 80039aa:	4620      	mov	r0, r4
 80039ac:	f7fd f8fa 	bl	8000ba4 <__aeabi_fsub>
 80039b0:	4603      	mov	r3, r0
 80039b2:	613b      	str	r3, [r7, #16]

     /* Normalise step magnitude */
     recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 80039b4:	69f9      	ldr	r1, [r7, #28]
 80039b6:	69f8      	ldr	r0, [r7, #28]
 80039b8:	f7fd f9fe 	bl	8000db8 <__aeabi_fmul>
 80039bc:	4603      	mov	r3, r0
 80039be:	461c      	mov	r4, r3
 80039c0:	69b9      	ldr	r1, [r7, #24]
 80039c2:	69b8      	ldr	r0, [r7, #24]
 80039c4:	f7fd f9f8 	bl	8000db8 <__aeabi_fmul>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4619      	mov	r1, r3
 80039cc:	4620      	mov	r0, r4
 80039ce:	f7fd f8eb 	bl	8000ba8 <__addsf3>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461c      	mov	r4, r3
 80039d6:	6979      	ldr	r1, [r7, #20]
 80039d8:	6978      	ldr	r0, [r7, #20]
 80039da:	f7fd f9ed 	bl	8000db8 <__aeabi_fmul>
 80039de:	4603      	mov	r3, r0
 80039e0:	4619      	mov	r1, r3
 80039e2:	4620      	mov	r0, r4
 80039e4:	f7fd f8e0 	bl	8000ba8 <__addsf3>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461c      	mov	r4, r3
 80039ec:	6939      	ldr	r1, [r7, #16]
 80039ee:	6938      	ldr	r0, [r7, #16]
 80039f0:	f7fd f9e2 	bl	8000db8 <__aeabi_fmul>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4619      	mov	r1, r3
 80039f8:	4620      	mov	r0, r4
 80039fa:	f7fd f8d5 	bl	8000ba8 <__addsf3>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff faa3 	bl	8002f4c <invSqrt>
 8003a06:	6578      	str	r0, [r7, #84]	; 0x54
     s0 *= recipNorm;
 8003a08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a0a:	69f8      	ldr	r0, [r7, #28]
 8003a0c:	f7fd f9d4 	bl	8000db8 <__aeabi_fmul>
 8003a10:	4603      	mov	r3, r0
 8003a12:	61fb      	str	r3, [r7, #28]
     s1 *= recipNorm;
 8003a14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a16:	69b8      	ldr	r0, [r7, #24]
 8003a18:	f7fd f9ce 	bl	8000db8 <__aeabi_fmul>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	61bb      	str	r3, [r7, #24]
     s2 *= recipNorm;
 8003a20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f7fd f9c8 	bl	8000db8 <__aeabi_fmul>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	617b      	str	r3, [r7, #20]
     s3 *= recipNorm;
 8003a2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a2e:	6938      	ldr	r0, [r7, #16]
 8003a30:	f7fd f9c2 	bl	8000db8 <__aeabi_fmul>
 8003a34:	4603      	mov	r3, r0
 8003a36:	613b      	str	r3, [r7, #16]

     /* Apply feedback step */
     qDot1 -= AHRS->_beta * s0;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	69f9      	ldr	r1, [r7, #28]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd f9ba 	bl	8000db8 <__aeabi_fmul>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4619      	mov	r1, r3
 8003a48:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003a4a:	f7fd f8ab 	bl	8000ba4 <__aeabi_fsub>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	667b      	str	r3, [r7, #100]	; 0x64
     qDot2 -= AHRS->_beta * s1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	69b9      	ldr	r1, [r7, #24]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fd f9ad 	bl	8000db8 <__aeabi_fmul>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4619      	mov	r1, r3
 8003a62:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003a64:	f7fd f89e 	bl	8000ba4 <__aeabi_fsub>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	663b      	str	r3, [r7, #96]	; 0x60
     qDot3 -= AHRS->_beta * s2;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	6979      	ldr	r1, [r7, #20]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd f9a0 	bl	8000db8 <__aeabi_fmul>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003a7e:	f7fd f891 	bl	8000ba4 <__aeabi_fsub>
 8003a82:	4603      	mov	r3, r0
 8003a84:	65fb      	str	r3, [r7, #92]	; 0x5c
     qDot4 -= AHRS->_beta * s3;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	6939      	ldr	r1, [r7, #16]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fd f993 	bl	8000db8 <__aeabi_fmul>
 8003a92:	4603      	mov	r3, r0
 8003a94:	4619      	mov	r1, r3
 8003a96:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003a98:	f7fd f884 	bl	8000ba4 <__aeabi_fsub>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	65bb      	str	r3, [r7, #88]	; 0x58
  }

  /* Integrate rate of change of quaternion to yield quaternion */
  AHRS->_q0 += qDot1 * AHRS->_sampleRate;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	695c      	ldr	r4, [r3, #20]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd f984 	bl	8000db8 <__aeabi_fmul>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7fd f877 	bl	8000ba8 <__addsf3>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	615a      	str	r2, [r3, #20]
  AHRS->_q1 += qDot2 * AHRS->_sampleRate;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	699c      	ldr	r4, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd f973 	bl	8000db8 <__aeabi_fmul>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f7fd f866 	bl	8000ba8 <__addsf3>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	619a      	str	r2, [r3, #24]
  AHRS->_q2 += qDot3 * AHRS->_sampleRate;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	69dc      	ldr	r4, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd f962 	bl	8000db8 <__aeabi_fmul>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4619      	mov	r1, r3
 8003af8:	4620      	mov	r0, r4
 8003afa:	f7fd f855 	bl	8000ba8 <__addsf3>
 8003afe:	4603      	mov	r3, r0
 8003b00:	461a      	mov	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	61da      	str	r2, [r3, #28]
  AHRS->_q3 += qDot4 * AHRS->_sampleRate;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a1c      	ldr	r4, [r3, #32]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd f951 	bl	8000db8 <__aeabi_fmul>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f7fd f844 	bl	8000ba8 <__addsf3>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	621a      	str	r2, [r3, #32]

  /* Normalise quaternion */
  recipNorm = invSqrt(AHRS->_q0 * AHRS->_q0 + AHRS->_q1 * AHRS->_q1 + AHRS->_q2 * AHRS->_q2 + AHRS->_q3 * AHRS->_q3);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f7fd f940 	bl	8000db8 <__aeabi_fmul>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461c      	mov	r4, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f7fd f936 	bl	8000db8 <__aeabi_fmul>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4620      	mov	r0, r4
 8003b52:	f7fd f829 	bl	8000ba8 <__addsf3>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461c      	mov	r4, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f7fd f927 	bl	8000db8 <__aeabi_fmul>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7fd f81a 	bl	8000ba8 <__addsf3>
 8003b74:	4603      	mov	r3, r0
 8003b76:	461c      	mov	r4, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1a      	ldr	r2, [r3, #32]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7fd f918 	bl	8000db8 <__aeabi_fmul>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7fd f80b 	bl	8000ba8 <__addsf3>
 8003b92:	4603      	mov	r3, r0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff f9d9 	bl	8002f4c <invSqrt>
 8003b9a:	6578      	str	r0, [r7, #84]	; 0x54
  AHRS->_q0 *= recipNorm;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd f908 	bl	8000db8 <__aeabi_fmul>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461a      	mov	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	615a      	str	r2, [r3, #20]
  AHRS->_q1 *= recipNorm;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd f8fe 	bl	8000db8 <__aeabi_fmul>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	619a      	str	r2, [r3, #24]
  AHRS->_q2 *= recipNorm;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd f8f4 	bl	8000db8 <__aeabi_fmul>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	61da      	str	r2, [r3, #28]
  AHRS->_q3 *= recipNorm;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd f8ea 	bl	8000db8 <__aeabi_fmul>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	621a      	str	r2, [r3, #32]

  /* Calculate new angles */
  calculateAngles(AHRS);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff fa07 	bl	8003000 <calculateAngles>
}
 8003bf2:	bf00      	nop
 8003bf4:	376c      	adds	r7, #108	; 0x6c
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd90      	pop	{r4, r7, pc}
 8003bfa:	bf00      	nop

08003bfc <computeIMU>:
  imu.AHRS[ROLL]  *= 180.0f / AHRSIMU_PI;

}

void computeIMU(void)
{
 8003bfc:	b5b0      	push	{r4, r5, r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af04      	add	r7, sp, #16
	Gyro_getADC();  //240us
 8003c02:	f002 fcab 	bl	800655c <Gyro_getADC>
  ACC_getADC(); //240us
 8003c06:	f002 fd5f 	bl	80066c8 <ACC_getADC>
	Temp_getADC(); //140us
 8003c0a:	f003 f92d 	bl	8006e68 <Temp_getADC>
	  imu.Yaw = imu.gyroz;
		#endif

#ifdef IMU_AHRS

	TM_AHRSIMU_UpdateIMU(&AHRS, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accSmooth[ROLL], imu.accSmooth[PITCH], imu.accSmooth[YAW]);
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <computeIMU+0x44>)
 8003c10:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <computeIMU+0x44>)
 8003c14:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <computeIMU+0x44>)
 8003c18:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <computeIMU+0x44>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <computeIMU+0x44>)
 8003c20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c22:	4907      	ldr	r1, [pc, #28]	; (8003c40 <computeIMU+0x44>)
 8003c24:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003c26:	9102      	str	r1, [sp, #8]
 8003c28:	9201      	str	r2, [sp, #4]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	462b      	mov	r3, r5
 8003c2e:	4622      	mov	r2, r4
 8003c30:	4601      	mov	r1, r0
 8003c32:	4804      	ldr	r0, [pc, #16]	; (8003c44 <computeIMU+0x48>)
 8003c34:	f7ff fc2e 	bl	8003494 <TM_AHRSIMU_UpdateIMU>

	//TM_AHRSIMU_UpdateAHRS(&AHRS, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.magSmooth[ROLL], imu.magSmooth[PITCH], imu.magSmooth[YAW]);
#endif
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000e20 	.word	0x20000e20
 8003c44:	20000c80 	.word	0x20000c80

08003c48 <cliImu>:

void cliImu(cli_args_t *args)
{
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003c50:	2300      	movs	r3, #0
 8003c52:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 2 && args->isStr(0, "show")==true)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d156      	bne.n	8003d0a <cliImu+0xc2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	4930      	ldr	r1, [pc, #192]	; (8003d24 <cliImu+0xdc>)
 8003c62:	2000      	movs	r0, #0
 8003c64:	4798      	blx	r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d04e      	beq.n	8003d0a <cliImu+0xc2>
	{
		uint8_t angle;
		uint32_t pre_time;

		angle = args->getData(1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2001      	movs	r0, #1
 8003c72:	4798      	blx	r3
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]

		pre_time = micros();
 8003c78:	f7fd fc28 	bl	80014cc <micros>
 8003c7c:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 8003c7e:	e03f      	b.n	8003d00 <cliImu+0xb8>
		{
			if(micros()-pre_time >= 10000)
 8003c80:	f7fd fc24 	bl	80014cc <micros>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d934      	bls.n	8003cfc <cliImu+0xb4>
			{
				pre_time = micros();
 8003c92:	f7fd fc1b 	bl	80014cc <micros>
 8003c96:	6138      	str	r0, [r7, #16]
				computeIMU();
 8003c98:	f7ff ffb0 	bl	8003bfc <computeIMU>
				if(angle == ROLL)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10c      	bne.n	8003cbc <cliImu+0x74>
					cliPrintf("ROLL ANGLE : %f\r\n", imu.AHRS[ROLL]);
 8003ca2:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <cliImu+0xe0>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fbd7 	bl	800045c <__aeabi_f2d>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4623      	mov	r3, r4
 8003cb6:	481d      	ldr	r0, [pc, #116]	; (8003d2c <cliImu+0xe4>)
 8003cb8:	f006 ffce 	bl	800ac58 <cliPrintf>
				if(angle == PITCH)
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d10c      	bne.n	8003cdc <cliImu+0x94>
					cliPrintf("PITCH ANGLE : %f\r\n", imu.AHRS[PITCH]);
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <cliImu+0xe0>)
 8003cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc fbc7 	bl	800045c <__aeabi_f2d>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4623      	mov	r3, r4
 8003cd6:	4816      	ldr	r0, [pc, #88]	; (8003d30 <cliImu+0xe8>)
 8003cd8:	f006 ffbe 	bl	800ac58 <cliPrintf>
				if(angle == YAW)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d10c      	bne.n	8003cfc <cliImu+0xb4>
					cliPrintf("YAW ANGLE : %f\r\n", imu.AHRS[YAW]);
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <cliImu+0xe0>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fc fbb7 	bl	800045c <__aeabi_f2d>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4623      	mov	r3, r4
 8003cf6:	480f      	ldr	r0, [pc, #60]	; (8003d34 <cliImu+0xec>)
 8003cf8:	f006 ffae 	bl	800ac58 <cliPrintf>
			}
			ret = true;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]
		while(cliKeepLoop())
 8003d00:	f007 f89e 	bl	800ae40 <cliKeepLoop>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ba      	bne.n	8003c80 <cliImu+0x38>
		}
	}
	if(ret !=true)
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
 8003d0c:	f083 0301 	eor.w	r3, r3, #1
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <cliImu+0xd4>
	{
		cliPrintf("imu show angle[ROL=0, PITCH=1, YAW=2]");
 8003d16:	4808      	ldr	r0, [pc, #32]	; (8003d38 <cliImu+0xf0>)
 8003d18:	f006 ff9e 	bl	800ac58 <cliPrintf>
	}
}
 8003d1c:	bf00      	nop
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd90      	pop	{r4, r7, pc}
 8003d24:	08019bd0 	.word	0x08019bd0
 8003d28:	20000e20 	.word	0x20000e20
 8003d2c:	08019bd8 	.word	0x08019bd8
 8003d30:	08019bec 	.word	0x08019bec
 8003d34:	08019c00 	.word	0x08019c00
 8003d38:	08019c14 	.word	0x08019c14

08003d3c <error_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the error LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void error_signal(void)
{
 8003d3c:	b598      	push	{r3, r4, r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
	if (Error.error >= 100) {ledOn(RGB_RED);}                                                         //When the error is 100 the LED is always on.
 8003d40:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <error_signal+0x94>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b63      	cmp	r3, #99	; 0x63
 8003d46:	d903      	bls.n	8003d50 <error_signal+0x14>
 8003d48:	2002      	movs	r0, #2
 8003d4a:	f007 fd15 	bl	800b778 <ledOn>
			ledOff(RGB_RED);																																//Turn the LED off.
			Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
			Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
		}
	}
}
 8003d4e:	e03c      	b.n	8003dca <error_signal+0x8e>
	else if (Error.error_timer < millis())
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <error_signal+0x94>)
 8003d52:	685c      	ldr	r4, [r3, #4]
 8003d54:	f7fd fbb2 	bl	80014bc <millis>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	429c      	cmp	r4, r3
 8003d5c:	d235      	bcs.n	8003dca <error_signal+0x8e>
		Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 8003d5e:	f7fd fbad 	bl	80014bc <millis>
 8003d62:	4603      	mov	r3, r0
 8003d64:	33fa      	adds	r3, #250	; 0xfa
 8003d66:	4a1a      	ldr	r2, [pc, #104]	; (8003dd0 <error_signal+0x94>)
 8003d68:	6053      	str	r3, [r2, #4]
		if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 8003d6a:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <error_signal+0x94>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <error_signal+0x4c>
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <error_signal+0x94>)
 8003d74:	785b      	ldrb	r3, [r3, #1]
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <error_signal+0x94>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	3303      	adds	r3, #3
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	dd02      	ble.n	8003d88 <error_signal+0x4c>
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <error_signal+0x94>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	705a      	strb	r2, [r3, #1]
		if (Error.error_counter < Error.error && Error.error_led == 0 && Error.error > 0)//If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <error_signal+0x94>)
 8003d8a:	785a      	ldrb	r2, [r3, #1]
 8003d8c:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <error_signal+0x94>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d20e      	bcs.n	8003db2 <error_signal+0x76>
 8003d94:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <error_signal+0x94>)
 8003d96:	789b      	ldrb	r3, [r3, #2]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <error_signal+0x76>
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <error_signal+0x94>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d006      	beq.n	8003db2 <error_signal+0x76>
			ledOn(RGB_RED);																																							//Turn the LED on.
 8003da4:	2002      	movs	r0, #2
 8003da6:	f007 fce7 	bl	800b778 <ledOn>
			Error.error_led = 1;                                                                       //Set the LED flag to indicate that the LED is on.
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <error_signal+0x94>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	709a      	strb	r2, [r3, #2]
}
 8003db0:	e00b      	b.n	8003dca <error_signal+0x8e>
			ledOff(RGB_RED);																																//Turn the LED off.
 8003db2:	2002      	movs	r0, #2
 8003db4:	f007 fd00 	bl	800b7b8 <ledOff>
			Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <error_signal+0x94>)
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <error_signal+0x94>)
 8003dc2:	705a      	strb	r2, [r3, #1]
			Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 8003dc4:	4b02      	ldr	r3, [pc, #8]	; (8003dd0 <error_signal+0x94>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	709a      	strb	r2, [r3, #2]
}
 8003dca:	bf00      	nop
 8003dcc:	bd98      	pop	{r3, r4, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000acc 	.word	0x20000acc

08003dd4 <flight_mode_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the flight mode LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void flight_mode_signal(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
	if (flight_mode_timer < millis())
 8003dd8:	f7fd fb70 	bl	80014bc <millis>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b3c      	ldr	r3, [pc, #240]	; (8003ed0 <flight_mode_signal+0xfc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d935      	bls.n	8003e52 <flight_mode_signal+0x7e>
	{                                                      //If the error_timer value is smaller that the millis() function.
		flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8003de6:	f7fd fb69 	bl	80014bc <millis>
 8003dea:	4603      	mov	r3, r0
 8003dec:	33fa      	adds	r3, #250	; 0xfa
 8003dee:	4a38      	ldr	r2, [pc, #224]	; (8003ed0 <flight_mode_signal+0xfc>)
 8003df0:	6013      	str	r3, [r2, #0]
		if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8003df2:	4b38      	ldr	r3, [pc, #224]	; (8003ed4 <flight_mode_signal+0x100>)
 8003df4:	785b      	ldrb	r3, [r3, #1]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <flight_mode_signal+0x3c>
 8003dfa:	4b37      	ldr	r3, [pc, #220]	; (8003ed8 <flight_mode_signal+0x104>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4b36      	ldr	r3, [pc, #216]	; (8003edc <flight_mode_signal+0x108>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	3303      	adds	r3, #3
 8003e06:	429a      	cmp	r2, r3
 8003e08:	dd02      	ble.n	8003e10 <flight_mode_signal+0x3c>
 8003e0a:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <flight_mode_signal+0x104>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
		if (flight_mode_counter < f.ARMED && flight_mode_led == 0 && f.ARMED > 0)					//If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8003e10:	4b30      	ldr	r3, [pc, #192]	; (8003ed4 <flight_mode_signal+0x100>)
 8003e12:	785a      	ldrb	r2, [r3, #1]
 8003e14:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <flight_mode_signal+0x104>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d90e      	bls.n	8003e3a <flight_mode_signal+0x66>
 8003e1c:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <flight_mode_signal+0x10c>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <flight_mode_signal+0x66>
 8003e24:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <flight_mode_signal+0x100>)
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d006      	beq.n	8003e3a <flight_mode_signal+0x66>
		{
			ledOn(RGB_GREEN);    																														//Turn the LED on.
 8003e2c:	2003      	movs	r0, #3
 8003e2e:	f007 fca3 	bl	800b778 <ledOn>
			flight_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8003e32:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <flight_mode_signal+0x10c>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	e00b      	b.n	8003e52 <flight_mode_signal+0x7e>
		}
		else
		{                                                                                 //If the error flash sequence isn't finisched (error_counter < error) and the LED is on.
			ledOff(RGB_GREEN);																																//Turn the LED off.
 8003e3a:	2003      	movs	r0, #3
 8003e3c:	f007 fcbc 	bl	800b7b8 <ledOff>
			flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8003e40:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <flight_mode_signal+0x104>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <flight_mode_signal+0x104>)
 8003e4a:	701a      	strb	r2, [r3, #0]
			flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <flight_mode_signal+0x10c>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
		}
	}

	if (headfree_mode_timer < millis())
 8003e52:	f7fd fb33 	bl	80014bc <millis>
 8003e56:	4602      	mov	r2, r0
 8003e58:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <flight_mode_signal+0x110>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d935      	bls.n	8003ecc <flight_mode_signal+0xf8>
	{                                                      //If the error_timer value is smaller that the millis() function.
		headfree_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8003e60:	f7fd fb2c 	bl	80014bc <millis>
 8003e64:	4603      	mov	r3, r0
 8003e66:	33fa      	adds	r3, #250	; 0xfa
 8003e68:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <flight_mode_signal+0x110>)
 8003e6a:	6013      	str	r3, [r2, #0]
		if (f.HEADFREE_MODE > 0 && headfree_mode_counter > flight_mode + 3) headfree_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <flight_mode_signal+0x100>)
 8003e6e:	7b9b      	ldrb	r3, [r3, #14]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <flight_mode_signal+0xb6>
 8003e74:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <flight_mode_signal+0x114>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <flight_mode_signal+0x108>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	3303      	adds	r3, #3
 8003e80:	429a      	cmp	r2, r3
 8003e82:	dd02      	ble.n	8003e8a <flight_mode_signal+0xb6>
 8003e84:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <flight_mode_signal+0x114>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
		if (headfree_mode_counter < f.HEADFREE_MODE && headfree_mode_led == 0 && f.HEADFREE_MODE > 0)	//If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8003e8a:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <flight_mode_signal+0x100>)
 8003e8c:	7b9a      	ldrb	r2, [r3, #14]
 8003e8e:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <flight_mode_signal+0x114>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d90e      	bls.n	8003eb4 <flight_mode_signal+0xe0>
 8003e96:	4b15      	ldr	r3, [pc, #84]	; (8003eec <flight_mode_signal+0x118>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <flight_mode_signal+0xe0>
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <flight_mode_signal+0x100>)
 8003ea0:	7b9b      	ldrb	r3, [r3, #14]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d006      	beq.n	8003eb4 <flight_mode_signal+0xe0>
		{

			ledOn(RGB_BLUE);																																		//Turn the LED on.
 8003ea6:	2004      	movs	r0, #4
 8003ea8:	f007 fc66 	bl	800b778 <ledOn>
			headfree_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <flight_mode_signal+0x118>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
			ledOff(RGB_BLUE);																																		//Turn the LED off.
			headfree_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
			headfree_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
		}
	}
}
 8003eb2:	e00b      	b.n	8003ecc <flight_mode_signal+0xf8>
			ledOff(RGB_BLUE);																																		//Turn the LED off.
 8003eb4:	2004      	movs	r0, #4
 8003eb6:	f007 fc7f 	bl	800b7b8 <ledOff>
			headfree_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <flight_mode_signal+0x114>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <flight_mode_signal+0x114>)
 8003ec4:	701a      	strb	r2, [r3, #0]
			headfree_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <flight_mode_signal+0x118>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000cac 	.word	0x20000cac
 8003ed4:	20000ed4 	.word	0x20000ed4
 8003ed8:	20000ca9 	.word	0x20000ca9
 8003edc:	20000cb4 	.word	0x20000cb4
 8003ee0:	20000ca8 	.word	0x20000ca8
 8003ee4:	20000cb0 	.word	0x20000cb0
 8003ee8:	20000cb6 	.word	0x20000cb6
 8003eec:	20000cb5 	.word	0x20000cb5

08003ef0 <mixerInit>:
    { 4, 0, mixerQuadP },          // MULTITYPE_QUADP
    { 4, 0, mixerQuadX },          // MULTITYPE_QUADX
};

void mixerInit(void)
{
 8003ef0:	b490      	push	{r4, r7}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
	int i;
    for (i = 0; i < 4; i++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	e00f      	b.n	8003f1c <mixerInit+0x2c>
	  {
			#ifdef QUAD_X
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 8003efc:	4a0b      	ldr	r2, [pc, #44]	; (8003f2c <mixerInit+0x3c>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	18d1      	adds	r1, r2, r3
 8003f04:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <mixerInit+0x40>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	4413      	add	r3, r2
 8003f0c:	461c      	mov	r4, r3
 8003f0e:	460b      	mov	r3, r1
 8003f10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (i = 0; i < 4; i++)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	ddec      	ble.n	8003efc <mixerInit+0xc>
			#endif
			#ifdef QUAD_P
      currentMixer[i] = mixers[QuadP].motor[i];   //0 = QuadP, 1 = QuadX
			#endif
		}
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc90      	pop	{r4, r7}
 8003f2a:	4770      	bx	lr
 8003f2c:	08019fb4 	.word	0x08019fb4
 8003f30:	200002ec 	.word	0x200002ec

08003f34 <mixTable>:

test_t test;

void mixTable(void)
{
 8003f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	71fb      	strb	r3, [r7, #7]
			if (RC.rcCommand[THROTTLE] > 4000) RC.rcCommand[THROTTLE] = 4000;                                   //We need some room to keep full control at full throttle.
 8003f3e:	4b7f      	ldr	r3, [pc, #508]	; (800413c <mixTable+0x208>)
 8003f40:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8003f44:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003f48:	dd04      	ble.n	8003f54 <mixTable+0x20>
 8003f4a:	4b7c      	ldr	r3, [pc, #496]	; (800413c <mixTable+0x208>)
 8003f4c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003f50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			for (i = 0; i < 4; i++){
 8003f54:	2300      	movs	r3, #0
 8003f56:	71fb      	strb	r3, [r7, #7]
 8003f58:	e0e7      	b.n	800412a <mixTable+0x1f6>
				motor[i] = (RC.rcCommand[THROTTLE] * (int16_t)currentMixer[i].THROTTLE) + ((int16_t)pid.output2[ROLL] * (int16_t)currentMixer[i].ROLL) + ((int16_t)pid.output2[PITCH] * (int16_t)currentMixer[i].PITCH) + ((1 * (int16_t)pid.output2[YAW]) * (int16_t)currentMixer[i].YAW);
 8003f5a:	4b78      	ldr	r3, [pc, #480]	; (800413c <mixTable+0x208>)
 8003f5c:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8003f60:	b29c      	uxth	r4, r3
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	4a76      	ldr	r2, [pc, #472]	; (8004140 <mixTable+0x20c>)
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	4413      	add	r3, r2
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd f8ff 	bl	8001170 <__aeabi_f2iz>
 8003f72:	4603      	mov	r3, r0
 8003f74:	b21b      	sxth	r3, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	fb03 f304 	mul.w	r3, r3, r4
 8003f7c:	b29c      	uxth	r4, r3
 8003f7e:	4b71      	ldr	r3, [pc, #452]	; (8004144 <mixTable+0x210>)
 8003f80:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fd f8f3 	bl	8001170 <__aeabi_f2iz>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	b21b      	sxth	r3, r3
 8003f8e:	b29d      	uxth	r5, r3
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	4a6b      	ldr	r2, [pc, #428]	; (8004140 <mixTable+0x20c>)
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	4413      	add	r3, r2
 8003f98:	3304      	adds	r3, #4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fd f8e7 	bl	8001170 <__aeabi_f2iz>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	b21b      	sxth	r3, r3
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	fb03 f305 	mul.w	r3, r3, r5
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	4423      	add	r3, r4
 8003fb0:	b29c      	uxth	r4, r3
 8003fb2:	4b64      	ldr	r3, [pc, #400]	; (8004144 <mixTable+0x210>)
 8003fb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fd f8d9 	bl	8001170 <__aeabi_f2iz>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	b21b      	sxth	r3, r3
 8003fc2:	b29d      	uxth	r5, r3
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	4a5e      	ldr	r2, [pc, #376]	; (8004140 <mixTable+0x20c>)
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	4413      	add	r3, r2
 8003fcc:	330c      	adds	r3, #12
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fd f8cd 	bl	8001170 <__aeabi_f2iz>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	b21b      	sxth	r3, r3
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	fb03 f305 	mul.w	r3, r3, r5
 8003fe0:	b29d      	uxth	r5, r3
 8003fe2:	4b58      	ldr	r3, [pc, #352]	; (8004144 <mixTable+0x210>)
 8003fe4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fd f8c1 	bl	8001170 <__aeabi_f2iz>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	b21b      	sxth	r3, r3
 8003ff2:	b29e      	uxth	r6, r3
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	4a52      	ldr	r2, [pc, #328]	; (8004140 <mixTable+0x20c>)
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7fd f8b5 	bl	8001170 <__aeabi_f2iz>
 8004006:	4603      	mov	r3, r0
 8004008:	b21b      	sxth	r3, r3
 800400a:	b29b      	uxth	r3, r3
 800400c:	fb03 f306 	mul.w	r3, r3, r6
 8004010:	b29b      	uxth	r3, r3
 8004012:	442b      	add	r3, r5
 8004014:	b29b      	uxth	r3, r3
 8004016:	4423      	add	r3, r4
 8004018:	b29a      	uxth	r2, r3
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	b211      	sxth	r1, r2
 800401e:	4a4a      	ldr	r2, [pc, #296]	; (8004148 <mixTable+0x214>)
 8004020:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#ifdef MOTOR_DC
	  if(motor[i] <    0) motor[i] = 0;
	  if(motor[i] > 2000) motor[i] = 2000;
#endif
#ifdef MOTOR_ESC
	  motor[i] = constrain(motor[i], 2250, 4500);
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	4a48      	ldr	r2, [pc, #288]	; (8004148 <mixTable+0x214>)
 8004028:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800402c:	f241 1294 	movw	r2, #4500	; 0x1194
 8004030:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8004034:	4618      	mov	r0, r3
 8004036:	f001 fbdb 	bl	80057f0 <constrain>
 800403a:	4602      	mov	r2, r0
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	b211      	sxth	r1, r2
 8004040:	4a41      	ldr	r2, [pc, #260]	; (8004148 <mixTable+0x214>)
 8004042:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#ifdef MOTOR_DC
  if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0){
    motor[i] = 0;
#endif
#ifdef MOTOR_ESC
  if(RC.rcCommand[THROTTLE] < 2350 || f.ARMED == 0){
 8004046:	4b3d      	ldr	r3, [pc, #244]	; (800413c <mixTable+0x208>)
 8004048:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800404c:	f640 122d 	movw	r2, #2349	; 0x92d
 8004050:	4293      	cmp	r3, r2
 8004052:	dd03      	ble.n	800405c <mixTable+0x128>
 8004054:	4b3d      	ldr	r3, [pc, #244]	; (800414c <mixTable+0x218>)
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d12a      	bne.n	80040b2 <mixTable+0x17e>
    motor[i] = 2250;
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	4a3a      	ldr	r2, [pc, #232]	; (8004148 <mixTable+0x214>)
 8004060:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8004064:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif
		pid.output1[i] = 0;
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	4a36      	ldr	r2, [pc, #216]	; (8004144 <mixTable+0x210>)
 800406c:	3340      	adds	r3, #64	; 0x40
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pid.output2[i] = 0;
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	4a32      	ldr	r2, [pc, #200]	; (8004144 <mixTable+0x210>)
 800407a:	3342      	adds	r3, #66	; 0x42
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	605a      	str	r2, [r3, #4]
		pid.Iterm[i] = 0;
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	4a2e      	ldr	r2, [pc, #184]	; (8004144 <mixTable+0x210>)
 800408a:	3328      	adds	r3, #40	; 0x28
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pid.Iterm1[i] = 0;
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	4a2b      	ldr	r2, [pc, #172]	; (8004144 <mixTable+0x210>)
 8004098:	332a      	adds	r3, #42	; 0x2a
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	605a      	str	r2, [r3, #4]
		pid.Iterm2[i] = 0;
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	4a27      	ldr	r2, [pc, #156]	; (8004144 <mixTable+0x210>)
 80040a8:	332e      	adds	r3, #46	; 0x2e
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
  if(micros() - time_manual_motor >= 500000){
 80040b2:	f7fd fa0b 	bl	80014cc <micros>
 80040b6:	4602      	mov	r2, r0
 80040b8:	4b25      	ldr	r3, [pc, #148]	; (8004150 <mixTable+0x21c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	4a25      	ldr	r2, [pc, #148]	; (8004154 <mixTable+0x220>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d902      	bls.n	80040ca <mixTable+0x196>
    Manual_Motor_flag = false;
 80040c4:	4b24      	ldr	r3, [pc, #144]	; (8004158 <mixTable+0x224>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
  }
  if(Manual_Motor_flag == true){
 80040ca:	4b23      	ldr	r3, [pc, #140]	; (8004158 <mixTable+0x224>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d114      	bne.n	80040fc <mixTable+0x1c8>
    TIM4->CCR1 = M_motor[0];  // Actual : REAR_L
 80040d2:	4b22      	ldr	r3, [pc, #136]	; (800415c <mixTable+0x228>)
 80040d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80040d8:	4b21      	ldr	r3, [pc, #132]	; (8004160 <mixTable+0x22c>)
 80040da:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR2 = M_motor[1];  // Actual : FRONT_R
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <mixTable+0x228>)
 80040de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80040e2:	4b1f      	ldr	r3, [pc, #124]	; (8004160 <mixTable+0x22c>)
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
    TIM4->CCR3 = M_motor[2];  // Actual : FRONT_L
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <mixTable+0x228>)
 80040e8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80040ec:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <mixTable+0x22c>)
 80040ee:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM4->CCR4 = M_motor[3];  // Actual : REAR_R
 80040f0:	4b1a      	ldr	r3, [pc, #104]	; (800415c <mixTable+0x228>)
 80040f2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80040f6:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <mixTable+0x22c>)
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
 80040fa:	e013      	b.n	8004124 <mixTable+0x1f0>
  }else{
    TIM4->CCR1 = motor[0];  // Actual : REAR_L
 80040fc:	4b12      	ldr	r3, [pc, #72]	; (8004148 <mixTable+0x214>)
 80040fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004102:	4b17      	ldr	r3, [pc, #92]	; (8004160 <mixTable+0x22c>)
 8004104:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR2 = motor[1];  // Actual : FRONT_R
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <mixTable+0x214>)
 8004108:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800410c:	4b14      	ldr	r3, [pc, #80]	; (8004160 <mixTable+0x22c>)
 800410e:	639a      	str	r2, [r3, #56]	; 0x38
    TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <mixTable+0x214>)
 8004112:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <mixTable+0x22c>)
 8004118:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM4->CCR4 = motor[3];  // Actual : REAR_R
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <mixTable+0x214>)
 800411c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <mixTable+0x22c>)
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
			for (i = 0; i < 4; i++){
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	3301      	adds	r3, #1
 8004128:	71fb      	strb	r3, [r7, #7]
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	2b03      	cmp	r3, #3
 800412e:	f67f af14 	bls.w	8003f5a <mixTable+0x26>
  }

  }
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800413a:	bf00      	nop
 800413c:	20000d40 	.word	0x20000d40
 8004140:	200002ec 	.word	0x200002ec
 8004144:	200009b0 	.word	0x200009b0
 8004148:	20000cc8 	.word	0x20000cc8
 800414c:	20000ed4 	.word	0x20000ed4
 8004150:	20000cc4 	.word	0x20000cc4
 8004154:	0007a11f 	.word	0x0007a11f
 8004158:	200002e8 	.word	0x200002e8
 800415c:	20000cb8 	.word	0x20000cb8
 8004160:	40000800 	.word	0x40000800

08004164 <PIDControlInit>:
static bool AcroPID(pidc_t *pid);
static bool AnglePID(pidc_t *pid);
static bool GpsPID(pidc_t *pid);

void PIDControlInit(pidc_t *pid)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	pid->ts = 0.004f;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a97      	ldr	r2, [pc, #604]	; (80043cc <PIDControlInit+0x268>)
 8004170:	601a      	str	r2, [r3, #0]
	pid->kp[ROLL]  = 15.0f;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a96      	ldr	r2, [pc, #600]	; (80043d0 <PIDControlInit+0x26c>)
 8004176:	605a      	str	r2, [r3, #4]
	pid->kp[PITCH] = pid->kp[ROLL];
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	609a      	str	r2, [r3, #8]
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a94      	ldr	r2, [pc, #592]	; (80043d4 <PIDControlInit+0x270>)
 8004184:	60da      	str	r2, [r3, #12]

	pid->ki[ROLL]  = 5.0f;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a93      	ldr	r2, [pc, #588]	; (80043d8 <PIDControlInit+0x274>)
 800418a:	635a      	str	r2, [r3, #52]	; 0x34
	pid->ki[PITCH] = pid->ki[ROLL];
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a90      	ldr	r2, [pc, #576]	; (80043d8 <PIDControlInit+0x274>)
 8004198:	63da      	str	r2, [r3, #60]	; 0x3c

	pid->kd[ROLL]  = 4.0f;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80041a0:	665a      	str	r2, [r3, #100]	; 0x64
	pid->kd[PITCH] = pid->kd[ROLL];
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	669a      	str	r2, [r3, #104]	; 0x68
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a8b      	ldr	r2, [pc, #556]	; (80043dc <PIDControlInit+0x278>)
 80041ae:	66da      	str	r2, [r3, #108]	; 0x6c

	///////////////////////////////////////
	pid->kp_rate[ROLL]  = 2.5f;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a8b      	ldr	r2, [pc, #556]	; (80043e0 <PIDControlInit+0x27c>)
 80041b4:	629a      	str	r2, [r3, #40]	; 0x28
	pid->kp_rate[PITCH] = pid->kp_rate[ROLL];
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->kp_rate[YAW]   = 2.0f;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30

	pid->ki_rate[ROLL]  = 0.5f;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80041cc:	659a      	str	r2, [r3, #88]	; 0x58
	pid->ki_rate[PITCH] = pid->ki_rate[ROLL];
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	65da      	str	r2, [r3, #92]	; 0x5c
	pid->ki_rate[YAW]   = 0.2f;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a82      	ldr	r2, [pc, #520]	; (80043e4 <PIDControlInit+0x280>)
 80041da:	661a      	str	r2, [r3, #96]	; 0x60

	pid->kd_rate[ROLL]  = 0.1f;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a82      	ldr	r2, [pc, #520]	; (80043e8 <PIDControlInit+0x284>)
 80041e0:	67da      	str	r2, [r3, #124]	; 0x7c
	pid->kd_rate[PITCH] = pid->kd_rate[ROLL];
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pid->kd_rate[YAW]   = 0.0f;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	///////////////////////////////////
	pid->kp1[ROLL] = 4.0f;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80041fc:	611a      	str	r2, [r3, #16]
	pid->kp1[PITCH] = 4.0f;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004204:	615a      	str	r2, [r3, #20]
	pid->kp1[YAW] = 5.0f;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a73      	ldr	r2, [pc, #460]	; (80043d8 <PIDControlInit+0x274>)
 800420a:	619a      	str	r2, [r3, #24]

	pid->ki1[ROLL] = 0.1f;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a76      	ldr	r2, [pc, #472]	; (80043e8 <PIDControlInit+0x284>)
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
	pid->ki1[PITCH] = 0.1f;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a74      	ldr	r2, [pc, #464]	; (80043e8 <PIDControlInit+0x284>)
 8004216:	645a      	str	r2, [r3, #68]	; 0x44
	pid->ki1[YAW] = 0.0f;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	649a      	str	r2, [r3, #72]	; 0x48
	/////////////////////////////////
	pid->kp2[ROLL] = 2.5f;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a6f      	ldr	r2, [pc, #444]	; (80043e0 <PIDControlInit+0x27c>)
 8004224:	61da      	str	r2, [r3, #28]
	pid->kp2[PITCH] = 2.5f;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a6d      	ldr	r2, [pc, #436]	; (80043e0 <PIDControlInit+0x27c>)
 800422a:	621a      	str	r2, [r3, #32]
	pid->kp2[YAW] = 2.0f;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

	pid->ki2[ROLL] = 0.5f;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800423a:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->ki2[PITCH] = 0.5f;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004242:	651a      	str	r2, [r3, #80]	; 0x50
	pid->ki2[YAW] = 0.5f;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800424a:	655a      	str	r2, [r3, #84]	; 0x54

	pid->kd2[ROLL] = 0.2f;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a65      	ldr	r2, [pc, #404]	; (80043e4 <PIDControlInit+0x280>)
 8004250:	671a      	str	r2, [r3, #112]	; 0x70
	pid->kd2[PITCH] = 0.2f;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a63      	ldr	r2, [pc, #396]	; (80043e4 <PIDControlInit+0x280>)
 8004256:	675a      	str	r2, [r3, #116]	; 0x74
	pid->kd2[YAW] = 0.0f;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	679a      	str	r2, [r3, #120]	; 0x78
	////////////////////////////////////////

	pid->i1_limit[ROLL] = 5.0f;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a5d      	ldr	r2, [pc, #372]	; (80043d8 <PIDControlInit+0x274>)
 8004264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pid->i1_limit[PITCH] = 5.0f;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a5b      	ldr	r2, [pc, #364]	; (80043d8 <PIDControlInit+0x274>)
 800426c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pid->i1_limit[YAW] = 10.0f;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a58      	ldr	r2, [pc, #352]	; (80043d4 <PIDControlInit+0x270>)
 8004274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	pid->i2_limit[ROLL] = 500.0f;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a5c      	ldr	r2, [pc, #368]	; (80043ec <PIDControlInit+0x288>)
 800427c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pid->i2_limit[PITCH] = 500.0f;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a5a      	ldr	r2, [pc, #360]	; (80043ec <PIDControlInit+0x288>)
 8004284:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	pid->i2_limit[YAW] = 500.0f;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a58      	ldr	r2, [pc, #352]	; (80043ec <PIDControlInit+0x288>)
 800428c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	pid->Iterm[ROLL] = 0.0f ;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pid->Iterm[PITCH] = 0.0f;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pid->Iterm[YAW] = 0.0f;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	pid->Iterm1[ROLL] = 0.0f ;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	pid->Iterm1[PITCH] = 0.0f;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	pid->Iterm1[YAW] = 0.0f;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	pid->Iterm2[ROLL] = 0.0f ;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	pid->Iterm2[PITCH] = 0.0f;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pid->Iterm2[YAW] = 0.0f;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	pid->dInput[ROLL] = 0.0f ;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pid->dInput[PITCH] = 0.0f;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	pid->dInput[YAW] = 0.0f;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	pid->error[ROLL] = 0.0f ;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	pid->error[PITCH] = 0.0f;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pid->error[YAW] = 0.0f;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	pid->pre_error[ROLL] = 0.0f ;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	pid->pre_error[PITCH] = 0.0f;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	pid->pre_error[YAW] = 0.0f;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	pid->pre_deriv[ROLL] = 0.0f ;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	pid->pre_deriv[PITCH] = 0.0f;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	pid->pre_deriv[YAW] = 0.0f;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	pid->lastInput[ROLL] = 0.0f ;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	pid->lastInput[PITCH] = 0.0f;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	pid->lastInput[YAW] = 0.0f;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	pid->output1[ROLL] = 0.0f ;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	pid->output1[PITCH] = 0.0f;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	pid->output1[YAW] = 0.0f;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	pid->output2[ROLL] = 0.0f ;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	pid->output2[PITCH] = 0.0f;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	pid->output2[YAW] = 0.0f;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	pidCal = AcroPID;
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <PIDControlInit+0x28c>)
 80043be:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <PIDControlInit+0x290>)
 80043c0:	601a      	str	r2, [r3, #0]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	3b83126f 	.word	0x3b83126f
 80043d0:	41700000 	.word	0x41700000
 80043d4:	41200000 	.word	0x41200000
 80043d8:	40a00000 	.word	0x40a00000
 80043dc:	40400000 	.word	0x40400000
 80043e0:	40200000 	.word	0x40200000
 80043e4:	3e4ccccd 	.word	0x3e4ccccd
 80043e8:	3dcccccd 	.word	0x3dcccccd
 80043ec:	43fa0000 	.word	0x43fa0000
 80043f0:	20000330 	.word	0x20000330
 80043f4:	080046cd 	.word	0x080046cd

080043f8 <Control>:

int16_t  magHold, headFreeModeHold; //[-180;+180]

void Control(pidc_t *pid)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b08b      	sub	sp, #44	; 0x2c
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	pidc_t *pid_handle = pid;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	627b      	str	r3, [r7, #36]	; 0x24

	dt_recip = 1/pid->ts;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4619      	mov	r1, r3
 800440a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800440e:	f7fc fd87 	bl	8000f20 <__aeabi_fdiv>
 8004412:	4603      	mov	r3, r0
 8004414:	461a      	mov	r2, r3
 8004416:	4b9e      	ldr	r3, [pc, #632]	; (8004690 <Control+0x298>)
 8004418:	601a      	str	r2, [r3, #0]

	if(!f.ARMED){
 800441a:	4b9e      	ldr	r3, [pc, #632]	; (8004694 <Control+0x29c>)
 800441c:	785b      	ldrb	r3, [r3, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <Control+0x44>
		headFreeModeHold = imu.actual_compass_heading;
 8004422:	4b9d      	ldr	r3, [pc, #628]	; (8004698 <Control+0x2a0>)
 8004424:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004428:	b21a      	sxth	r2, r3
 800442a:	4b9c      	ldr	r3, [pc, #624]	; (800469c <Control+0x2a4>)
 800442c:	801a      	strh	r2, [r3, #0]
		imu.yawheadinghold = imu.actual_compass_heading;
 800442e:	4b9a      	ldr	r3, [pc, #616]	; (8004698 <Control+0x2a0>)
 8004430:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004434:	b21a      	sxth	r2, r3
 8004436:	4b98      	ldr	r3, [pc, #608]	; (8004698 <Control+0x2a0>)
 8004438:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	}

	//TODO: split cos_yaw calculations into two phases (X and Y)
	if (( f.GPS_MODE != GPS_MODE_NONE ) && GPS.fixquality )
 800443c:	4b95      	ldr	r3, [pc, #596]	; (8004694 <Control+0x29c>)
 800443e:	7adb      	ldrb	r3, [r3, #11]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8095 	beq.w	8004570 <Control+0x178>
 8004446:	4b96      	ldr	r3, [pc, #600]	; (80046a0 <Control+0x2a8>)
 8004448:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 808f 	beq.w	8004570 <Control+0x178>
	{
		float sin_yaw_y = sin(imu.actual_compass_heading*0.0174532925f);
 8004452:	4b91      	ldr	r3, [pc, #580]	; (8004698 <Control+0x2a0>)
 8004454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc fc59 	bl	8000d10 <__aeabi_i2f>
 800445e:	4603      	mov	r3, r0
 8004460:	4990      	ldr	r1, [pc, #576]	; (80046a4 <Control+0x2ac>)
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc fca8 	bl	8000db8 <__aeabi_fmul>
 8004468:	4603      	mov	r3, r0
 800446a:	4618      	mov	r0, r3
 800446c:	f7fb fff6 	bl	800045c <__aeabi_f2d>
 8004470:	4603      	mov	r3, r0
 8004472:	460c      	mov	r4, r1
 8004474:	4618      	mov	r0, r3
 8004476:	4621      	mov	r1, r4
 8004478:	f011 f8f8 	bl	801566c <sin>
 800447c:	4603      	mov	r3, r0
 800447e:	460c      	mov	r4, r1
 8004480:	4618      	mov	r0, r3
 8004482:	4621      	mov	r1, r4
 8004484:	f7fc fb3a 	bl	8000afc <__aeabi_d2f>
 8004488:	4603      	mov	r3, r0
 800448a:	623b      	str	r3, [r7, #32]
		float cos_yaw_x = cos(imu.actual_compass_heading*0.0174532925f);
 800448c:	4b82      	ldr	r3, [pc, #520]	; (8004698 <Control+0x2a0>)
 800448e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc fc3c 	bl	8000d10 <__aeabi_i2f>
 8004498:	4603      	mov	r3, r0
 800449a:	4982      	ldr	r1, [pc, #520]	; (80046a4 <Control+0x2ac>)
 800449c:	4618      	mov	r0, r3
 800449e:	f7fc fc8b 	bl	8000db8 <__aeabi_fmul>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fb ffd9 	bl	800045c <__aeabi_f2d>
 80044aa:	4603      	mov	r3, r0
 80044ac:	460c      	mov	r4, r1
 80044ae:	4618      	mov	r0, r3
 80044b0:	4621      	mov	r1, r4
 80044b2:	f011 f8a5 	bl	8015600 <cos>
 80044b6:	4603      	mov	r3, r0
 80044b8:	460c      	mov	r4, r1
 80044ba:	4618      	mov	r0, r3
 80044bc:	4621      	mov	r1, r4
 80044be:	f7fc fb1d 	bl	8000afc <__aeabi_d2f>
 80044c2:	4603      	mov	r3, r0
 80044c4:	61fb      	str	r3, [r7, #28]
		GPS_angle[ROLL]   = (nav[LON]*cos_yaw_x - nav[LAT]*sin_yaw_y)/10;
 80044c6:	4b78      	ldr	r3, [pc, #480]	; (80046a8 <Control+0x2b0>)
 80044c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fc fc1f 	bl	8000d10 <__aeabi_i2f>
 80044d2:	4603      	mov	r3, r0
 80044d4:	69f9      	ldr	r1, [r7, #28]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc fc6e 	bl	8000db8 <__aeabi_fmul>
 80044dc:	4603      	mov	r3, r0
 80044de:	461c      	mov	r4, r3
 80044e0:	4b71      	ldr	r3, [pc, #452]	; (80046a8 <Control+0x2b0>)
 80044e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc fc12 	bl	8000d10 <__aeabi_i2f>
 80044ec:	4603      	mov	r3, r0
 80044ee:	6a39      	ldr	r1, [r7, #32]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fc fc61 	bl	8000db8 <__aeabi_fmul>
 80044f6:	4603      	mov	r3, r0
 80044f8:	4619      	mov	r1, r3
 80044fa:	4620      	mov	r0, r4
 80044fc:	f7fc fb52 	bl	8000ba4 <__aeabi_fsub>
 8004500:	4603      	mov	r3, r0
 8004502:	496a      	ldr	r1, [pc, #424]	; (80046ac <Control+0x2b4>)
 8004504:	4618      	mov	r0, r3
 8004506:	f7fc fd0b 	bl	8000f20 <__aeabi_fdiv>
 800450a:	4603      	mov	r3, r0
 800450c:	4618      	mov	r0, r3
 800450e:	f7fc fe2f 	bl	8001170 <__aeabi_f2iz>
 8004512:	4603      	mov	r3, r0
 8004514:	b21a      	sxth	r2, r3
 8004516:	4b66      	ldr	r3, [pc, #408]	; (80046b0 <Control+0x2b8>)
 8004518:	801a      	strh	r2, [r3, #0]
		GPS_angle[PITCH]  = (nav[LON]*sin_yaw_y + nav[LAT]*cos_yaw_x)/10;
 800451a:	4b63      	ldr	r3, [pc, #396]	; (80046a8 <Control+0x2b0>)
 800451c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004520:	4618      	mov	r0, r3
 8004522:	f7fc fbf5 	bl	8000d10 <__aeabi_i2f>
 8004526:	4603      	mov	r3, r0
 8004528:	6a39      	ldr	r1, [r7, #32]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc fc44 	bl	8000db8 <__aeabi_fmul>
 8004530:	4603      	mov	r3, r0
 8004532:	461c      	mov	r4, r3
 8004534:	4b5c      	ldr	r3, [pc, #368]	; (80046a8 <Control+0x2b0>)
 8004536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc fbe8 	bl	8000d10 <__aeabi_i2f>
 8004540:	4603      	mov	r3, r0
 8004542:	69f9      	ldr	r1, [r7, #28]
 8004544:	4618      	mov	r0, r3
 8004546:	f7fc fc37 	bl	8000db8 <__aeabi_fmul>
 800454a:	4603      	mov	r3, r0
 800454c:	4619      	mov	r1, r3
 800454e:	4620      	mov	r0, r4
 8004550:	f7fc fb2a 	bl	8000ba8 <__addsf3>
 8004554:	4603      	mov	r3, r0
 8004556:	4955      	ldr	r1, [pc, #340]	; (80046ac <Control+0x2b4>)
 8004558:	4618      	mov	r0, r3
 800455a:	f7fc fce1 	bl	8000f20 <__aeabi_fdiv>
 800455e:	4603      	mov	r3, r0
 8004560:	4618      	mov	r0, r3
 8004562:	f7fc fe05 	bl	8001170 <__aeabi_f2iz>
 8004566:	4603      	mov	r3, r0
 8004568:	b21a      	sxth	r2, r3
 800456a:	4b51      	ldr	r3, [pc, #324]	; (80046b0 <Control+0x2b8>)
 800456c:	805a      	strh	r2, [r3, #2]
	{
 800456e:	e005      	b.n	800457c <Control+0x184>
	} else
	{
		GPS_angle[ROLL]  = 0;
 8004570:	4b4f      	ldr	r3, [pc, #316]	; (80046b0 <Control+0x2b8>)
 8004572:	2200      	movs	r2, #0
 8004574:	801a      	strh	r2, [r3, #0]
		GPS_angle[PITCH] = 0;
 8004576:	4b4e      	ldr	r3, [pc, #312]	; (80046b0 <Control+0x2b8>)
 8004578:	2200      	movs	r2, #0
 800457a:	805a      	strh	r2, [r3, #2]
	}

#if defined(HEADFREE)
	if(f.HEADFREE_MODE) { //to optimize
 800457c:	4b45      	ldr	r3, [pc, #276]	; (8004694 <Control+0x29c>)
 800457e:	7b9b      	ldrb	r3, [r3, #14]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d065      	beq.n	8004650 <Control+0x258>
		float radDiff = (imu.actual_compass_heading - headFreeModeHold) * 0.0174533f; // where PI/180 ~= 0.0174533
 8004584:	4b44      	ldr	r3, [pc, #272]	; (8004698 <Control+0x2a0>)
 8004586:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800458a:	4a44      	ldr	r2, [pc, #272]	; (800469c <Control+0x2a4>)
 800458c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f7fc fbbc 	bl	8000d10 <__aeabi_i2f>
 8004598:	4603      	mov	r3, r0
 800459a:	4946      	ldr	r1, [pc, #280]	; (80046b4 <Control+0x2bc>)
 800459c:	4618      	mov	r0, r3
 800459e:	f7fc fc0b 	bl	8000db8 <__aeabi_fmul>
 80045a2:	4603      	mov	r3, r0
 80045a4:	61bb      	str	r3, [r7, #24]
		float cosDiff = cosf(radDiff);
 80045a6:	69b8      	ldr	r0, [r7, #24]
 80045a8:	f011 f89a 	bl	80156e0 <cosf>
 80045ac:	6178      	str	r0, [r7, #20]
		float sinDiff = sinf(radDiff);
 80045ae:	69b8      	ldr	r0, [r7, #24]
 80045b0:	f011 f904 	bl	80157bc <sinf>
 80045b4:	6138      	str	r0, [r7, #16]
		int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 80045b6:	4b40      	ldr	r3, [pc, #256]	; (80046b8 <Control+0x2c0>)
 80045b8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fc fba7 	bl	8000d10 <__aeabi_i2f>
 80045c2:	4603      	mov	r3, r0
 80045c4:	6979      	ldr	r1, [r7, #20]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fc fbf6 	bl	8000db8 <__aeabi_fmul>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461c      	mov	r4, r3
 80045d0:	4b39      	ldr	r3, [pc, #228]	; (80046b8 <Control+0x2c0>)
 80045d2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fc fb9a 	bl	8000d10 <__aeabi_i2f>
 80045dc:	4603      	mov	r3, r0
 80045de:	6939      	ldr	r1, [r7, #16]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fc fbe9 	bl	8000db8 <__aeabi_fmul>
 80045e6:	4603      	mov	r3, r0
 80045e8:	4619      	mov	r1, r3
 80045ea:	4620      	mov	r0, r4
 80045ec:	f7fc fadc 	bl	8000ba8 <__addsf3>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fc fdbc 	bl	8001170 <__aeabi_f2iz>
 80045f8:	4603      	mov	r3, r0
 80045fa:	81fb      	strh	r3, [r7, #14]
		RC.rcCommand[ROLL] =  RC.rcCommand[ROLL]*cosDiff - RC.rcCommand[PITCH]*sinDiff;
 80045fc:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <Control+0x2c0>)
 80045fe:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8004602:	4618      	mov	r0, r3
 8004604:	f7fc fb84 	bl	8000d10 <__aeabi_i2f>
 8004608:	4603      	mov	r3, r0
 800460a:	6979      	ldr	r1, [r7, #20]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fc fbd3 	bl	8000db8 <__aeabi_fmul>
 8004612:	4603      	mov	r3, r0
 8004614:	461c      	mov	r4, r3
 8004616:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <Control+0x2c0>)
 8004618:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800461c:	4618      	mov	r0, r3
 800461e:	f7fc fb77 	bl	8000d10 <__aeabi_i2f>
 8004622:	4603      	mov	r3, r0
 8004624:	6939      	ldr	r1, [r7, #16]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fc fbc6 	bl	8000db8 <__aeabi_fmul>
 800462c:	4603      	mov	r3, r0
 800462e:	4619      	mov	r1, r3
 8004630:	4620      	mov	r0, r4
 8004632:	f7fc fab7 	bl	8000ba4 <__aeabi_fsub>
 8004636:	4603      	mov	r3, r0
 8004638:	4618      	mov	r0, r3
 800463a:	f7fc fd99 	bl	8001170 <__aeabi_f2iz>
 800463e:	4603      	mov	r3, r0
 8004640:	b21a      	sxth	r2, r3
 8004642:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <Control+0x2c0>)
 8004644:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		RC.rcCommand[PITCH] = rcCommand_PITCH;
 8004648:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <Control+0x2c0>)
 800464a:	89fb      	ldrh	r3, [r7, #14]
 800464c:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
	}
#endif
	if(f.ACRO_MODE){
 8004650:	4b10      	ldr	r3, [pc, #64]	; (8004694 <Control+0x29c>)
 8004652:	79db      	ldrb	r3, [r3, #7]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <Control+0x268>
		pidCal = AcroPID;
 8004658:	4b18      	ldr	r3, [pc, #96]	; (80046bc <Control+0x2c4>)
 800465a:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <Control+0x2c8>)
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e00e      	b.n	800467e <Control+0x286>
	}else if(f.ANGLE_MODE){
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <Control+0x29c>)
 8004662:	795b      	ldrb	r3, [r3, #5]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <Control+0x278>
		pidCal = AnglePID;
 8004668:	4b14      	ldr	r3, [pc, #80]	; (80046bc <Control+0x2c4>)
 800466a:	4a16      	ldr	r2, [pc, #88]	; (80046c4 <Control+0x2cc>)
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e006      	b.n	800467e <Control+0x286>
	}else if(f.GPS_HOLD_MODE){
 8004670:	4b08      	ldr	r3, [pc, #32]	; (8004694 <Control+0x29c>)
 8004672:	7b5b      	ldrb	r3, [r3, #13]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <Control+0x286>
		pidCal = GpsPID;
 8004678:	4b10      	ldr	r3, [pc, #64]	; (80046bc <Control+0x2c4>)
 800467a:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <Control+0x2d0>)
 800467c:	601a      	str	r2, [r3, #0]
	}

	pidCal(pid_handle);
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <Control+0x2c4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004684:	4798      	blx	r3
}
 8004686:	bf00      	nop
 8004688:	372c      	adds	r7, #44	; 0x2c
 800468a:	46bd      	mov	sp, r7
 800468c:	bd90      	pop	{r4, r7, pc}
 800468e:	bf00      	nop
 8004690:	2000032c 	.word	0x2000032c
 8004694:	20000ed4 	.word	0x20000ed4
 8004698:	20000e20 	.word	0x20000e20
 800469c:	20000cd2 	.word	0x20000cd2
 80046a0:	20000b78 	.word	0x20000b78
 80046a4:	3c8efa35 	.word	0x3c8efa35
 80046a8:	20000b30 	.word	0x20000b30
 80046ac:	41200000 	.word	0x41200000
 80046b0:	2000027c 	.word	0x2000027c
 80046b4:	3c8efa39 	.word	0x3c8efa39
 80046b8:	20000d40 	.word	0x20000d40
 80046bc:	20000330 	.word	0x20000330
 80046c0:	080046cd 	.word	0x080046cd
 80046c4:	08004b29 	.word	0x08004b29
 80046c8:	08005185 	.word	0x08005185

080046cc <AcroPID>:

bool AcroPID(pidc_t *pid)
{
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	bool ret = true;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]

	pid->error[ROLL] = RC.rcCommand[ROLL] - imu.gyroRaw[ROLL];
 80046d8:	4ba3      	ldr	r3, [pc, #652]	; (8004968 <AcroPID+0x29c>)
 80046da:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc fb16 	bl	8000d10 <__aeabi_i2f>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4ba1      	ldr	r3, [pc, #644]	; (800496c <AcroPID+0x2a0>)
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f7fc fa59 	bl	8000ba4 <__aeabi_fsub>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	pid->Iterm[ROLL] += pid->error[ROLL] * pid->ts;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f7fc fb52 	bl	8000db8 <__aeabi_fmul>
 8004714:	4603      	mov	r3, r0
 8004716:	4619      	mov	r1, r3
 8004718:	4620      	mov	r0, r4
 800471a:	f7fc fa45 	bl	8000ba8 <__addsf3>
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if(pid->Iterm[ROLL] > I_MAX) pid->Iterm[ROLL] = I_MAX;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800472e:	4990      	ldr	r1, [pc, #576]	; (8004970 <AcroPID+0x2a4>)
 8004730:	4618      	mov	r0, r3
 8004732:	f7fc fcfd 	bl	8001130 <__aeabi_fcmpgt>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d004      	beq.n	8004746 <AcroPID+0x7a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a8c      	ldr	r2, [pc, #560]	; (8004970 <AcroPID+0x2a4>)
 8004740:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004744:	e00d      	b.n	8004762 <AcroPID+0x96>
	else if(pid->Iterm[ROLL] < -I_MAX) pid->Iterm[ROLL] = -I_MAX;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800474c:	4989      	ldr	r1, [pc, #548]	; (8004974 <AcroPID+0x2a8>)
 800474e:	4618      	mov	r0, r3
 8004750:	f7fc fcd0 	bl	80010f4 <__aeabi_fcmplt>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <AcroPID+0x96>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a85      	ldr	r2, [pc, #532]	; (8004974 <AcroPID+0x2a8>)
 800475e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pid->dInput[ROLL] = (pid->error[ROLL] - pid->pre_error[ROLL])  / pid->ts;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7fc fa17 	bl	8000ba4 <__aeabi_fsub>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f7fc fbcd 	bl	8000f20 <__aeabi_fdiv>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	/*Compute PID Output*/
	pid->output2[ROLL] = (pid->kp_rate[ROLL] * pid->error[ROLL]) + (pid->ki_rate[ROLL] * pid->Iterm[ROLL]) + (pid->kd_rate[ROLL] * pid->dInput[ROLL]);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f7fc fb0b 	bl	8000db8 <__aeabi_fmul>
 80047a2:	4603      	mov	r3, r0
 80047a4:	461c      	mov	r4, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f7fc fb00 	bl	8000db8 <__aeabi_fmul>
 80047b8:	4603      	mov	r3, r0
 80047ba:	4619      	mov	r1, r3
 80047bc:	4620      	mov	r0, r4
 80047be:	f7fc f9f3 	bl	8000ba8 <__addsf3>
 80047c2:	4603      	mov	r3, r0
 80047c4:	461c      	mov	r4, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f7fc faf0 	bl	8000db8 <__aeabi_fmul>
 80047d8:	4603      	mov	r3, r0
 80047da:	4619      	mov	r1, r3
 80047dc:	4620      	mov	r0, r4
 80047de:	f7fc f9e3 	bl	8000ba8 <__addsf3>
 80047e2:	4603      	mov	r3, r0
 80047e4:	461a      	mov	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	if(pid->output2[ROLL] > OUT_MAX) pid->output2[ROLL] = OUT_MAX;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80047f2:	4961      	ldr	r1, [pc, #388]	; (8004978 <AcroPID+0x2ac>)
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fc fc9b 	bl	8001130 <__aeabi_fcmpgt>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d004      	beq.n	800480a <AcroPID+0x13e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a5d      	ldr	r2, [pc, #372]	; (8004978 <AcroPID+0x2ac>)
 8004804:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8004808:	e00d      	b.n	8004826 <AcroPID+0x15a>
	else if(pid->output2[ROLL] < -OUT_MAX) pid->output2[ROLL] = -OUT_MAX;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004810:	495a      	ldr	r1, [pc, #360]	; (800497c <AcroPID+0x2b0>)
 8004812:	4618      	mov	r0, r3
 8004814:	f7fc fc6e 	bl	80010f4 <__aeabi_fcmplt>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <AcroPID+0x15a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a56      	ldr	r2, [pc, #344]	; (800497c <AcroPID+0x2b0>)
 8004822:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	/*Remember some variables for next time*/
	pid->pre_error[ROLL] = pid->error[ROLL];
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	/////////////////////////////////////////////////////////////////////////////////////////////////

	/*Compute all the working error variables*/
	pid->error[PITCH] = RC.rcCommand[PITCH] - imu.gyroRaw[PITCH];
 8004832:	4b4d      	ldr	r3, [pc, #308]	; (8004968 <AcroPID+0x29c>)
 8004834:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8004838:	4618      	mov	r0, r3
 800483a:	f7fc fa69 	bl	8000d10 <__aeabi_i2f>
 800483e:	4602      	mov	r2, r0
 8004840:	4b4a      	ldr	r3, [pc, #296]	; (800496c <AcroPID+0x2a0>)
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f7fc f9ac 	bl	8000ba4 <__aeabi_fsub>
 800484c:	4603      	mov	r3, r0
 800484e:	461a      	mov	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pid->Iterm[PITCH] += pid->error[PITCH] * pid->ts;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f7fc faa5 	bl	8000db8 <__aeabi_fmul>
 800486e:	4603      	mov	r3, r0
 8004870:	4619      	mov	r1, r3
 8004872:	4620      	mov	r0, r4
 8004874:	f7fc f998 	bl	8000ba8 <__addsf3>
 8004878:	4603      	mov	r3, r0
 800487a:	461a      	mov	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	if(pid->Iterm[PITCH] > I_MAX) pid->Iterm[PITCH] = I_MAX;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004888:	4939      	ldr	r1, [pc, #228]	; (8004970 <AcroPID+0x2a4>)
 800488a:	4618      	mov	r0, r3
 800488c:	f7fc fc50 	bl	8001130 <__aeabi_fcmpgt>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <AcroPID+0x1d4>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a35      	ldr	r2, [pc, #212]	; (8004970 <AcroPID+0x2a4>)
 800489a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800489e:	e00d      	b.n	80048bc <AcroPID+0x1f0>
	else if(pid->Iterm[PITCH] < -I_MAX) pid->Iterm[PITCH] = -I_MAX;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048a6:	4933      	ldr	r1, [pc, #204]	; (8004974 <AcroPID+0x2a8>)
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fc fc23 	bl	80010f4 <__aeabi_fcmplt>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <AcroPID+0x1f0>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a2f      	ldr	r2, [pc, #188]	; (8004974 <AcroPID+0x2a8>)
 80048b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pid->dInput[PITCH] = (pid->error[PITCH] - pid->pre_error[PITCH]) / pid->ts;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f7fc f96a 	bl	8000ba4 <__aeabi_fsub>
 80048d0:	4603      	mov	r3, r0
 80048d2:	461a      	mov	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f7fc fb20 	bl	8000f20 <__aeabi_fdiv>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	/*Compute PID Output*/
	pid->output2[PITCH] = (pid->kp_rate[PITCH] * pid->error[PITCH]) + (pid->ki_rate[PITCH] *  pid->Iterm[PITCH]) + (pid->kd_rate[PITCH] * pid->dInput[PITCH]);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7fc fa5e 	bl	8000db8 <__aeabi_fmul>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461c      	mov	r4, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f7fc fa53 	bl	8000db8 <__aeabi_fmul>
 8004912:	4603      	mov	r3, r0
 8004914:	4619      	mov	r1, r3
 8004916:	4620      	mov	r0, r4
 8004918:	f7fc f946 	bl	8000ba8 <__addsf3>
 800491c:	4603      	mov	r3, r0
 800491e:	461c      	mov	r4, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f7fc fa42 	bl	8000db8 <__aeabi_fmul>
 8004934:	4603      	mov	r3, r0
 8004936:	4619      	mov	r1, r3
 8004938:	4620      	mov	r0, r4
 800493a:	f7fc f935 	bl	8000ba8 <__addsf3>
 800493e:	4603      	mov	r3, r0
 8004940:	461a      	mov	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	if(pid->output2[PITCH] > OUT_MAX) pid->output2[PITCH] = OUT_MAX;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800494e:	490a      	ldr	r1, [pc, #40]	; (8004978 <AcroPID+0x2ac>)
 8004950:	4618      	mov	r0, r3
 8004952:	f7fc fbed 	bl	8001130 <__aeabi_fcmpgt>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d011      	beq.n	8004980 <AcroPID+0x2b4>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a06      	ldr	r2, [pc, #24]	; (8004978 <AcroPID+0x2ac>)
 8004960:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8004964:	e01a      	b.n	800499c <AcroPID+0x2d0>
 8004966:	bf00      	nop
 8004968:	20000d40 	.word	0x20000d40
 800496c:	20000e20 	.word	0x20000e20
 8004970:	43fa0000 	.word	0x43fa0000
 8004974:	c3fa0000 	.word	0xc3fa0000
 8004978:	447a0000 	.word	0x447a0000
 800497c:	c47a0000 	.word	0xc47a0000
	else if(pid->output2[PITCH] < -OUT_MAX) pid->output2[PITCH] = -OUT_MAX;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004986:	4962      	ldr	r1, [pc, #392]	; (8004b10 <AcroPID+0x444>)
 8004988:	4618      	mov	r0, r3
 800498a:	f7fc fbb3 	bl	80010f4 <__aeabi_fcmplt>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <AcroPID+0x2d0>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a5e      	ldr	r2, [pc, #376]	; (8004b10 <AcroPID+0x444>)
 8004998:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/*Remember some variables for next time*/
	pid->pre_error[PITCH] = pid->error[PITCH];
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	//////////////////////////////////////////////////////////////////////////////////////////////////

	/*Compute all the working error variables*/
	pid->error[YAW] = RC.rcCommand[YAW] - imu.gyroRaw[YAW];
 80049a8:	4b5a      	ldr	r3, [pc, #360]	; (8004b14 <AcroPID+0x448>)
 80049aa:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fc f9ae 	bl	8000d10 <__aeabi_i2f>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b58      	ldr	r3, [pc, #352]	; (8004b18 <AcroPID+0x44c>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7fc f8f1 	bl	8000ba4 <__aeabi_fsub>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	pid->Iterm[YAW] += pid->error[YAW] * pid->ts;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f7fc f9ea 	bl	8000db8 <__aeabi_fmul>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4619      	mov	r1, r3
 80049e8:	4620      	mov	r0, r4
 80049ea:	f7fc f8dd 	bl	8000ba8 <__addsf3>
 80049ee:	4603      	mov	r3, r0
 80049f0:	461a      	mov	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	if(pid->Iterm[YAW] > I_MAX) pid->Iterm[YAW] = I_MAX;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049fe:	4947      	ldr	r1, [pc, #284]	; (8004b1c <AcroPID+0x450>)
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fc fb95 	bl	8001130 <__aeabi_fcmpgt>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <AcroPID+0x34a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a43      	ldr	r2, [pc, #268]	; (8004b1c <AcroPID+0x450>)
 8004a10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004a14:	e00d      	b.n	8004a32 <AcroPID+0x366>
	else if(pid->Iterm[YAW] < -I_MAX) pid->Iterm[YAW] = -I_MAX;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a1c:	4940      	ldr	r1, [pc, #256]	; (8004b20 <AcroPID+0x454>)
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fc fb68 	bl	80010f4 <__aeabi_fcmplt>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <AcroPID+0x366>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a3c      	ldr	r2, [pc, #240]	; (8004b20 <AcroPID+0x454>)
 8004a2e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pid->dInput[YAW] = (pid->error[YAW] - pid->pre_error[YAW]) / pid->ts;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4610      	mov	r0, r2
 8004a42:	f7fc f8af 	bl	8000ba4 <__aeabi_fsub>
 8004a46:	4603      	mov	r3, r0
 8004a48:	461a      	mov	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7fc fa65 	bl	8000f20 <__aeabi_fdiv>
 8004a56:	4603      	mov	r3, r0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	/*Compute PID Output*/
	pid->output2[YAW] = (pid->kp_rate[YAW] * pid->error[YAW]) + (pid->ki_rate[YAW] * pid->Iterm[YAW]) + (pid->kd_rate[YAW] * pid->dInput[YAW]);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	f7fc f9a3 	bl	8000db8 <__aeabi_fmul>
 8004a72:	4603      	mov	r3, r0
 8004a74:	461c      	mov	r4, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f7fc f998 	bl	8000db8 <__aeabi_fmul>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f7fc f88b 	bl	8000ba8 <__addsf3>
 8004a92:	4603      	mov	r3, r0
 8004a94:	461c      	mov	r4, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	f7fc f987 	bl	8000db8 <__aeabi_fmul>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4619      	mov	r1, r3
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f7fc f87a 	bl	8000ba8 <__addsf3>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004ac4:	4917      	ldr	r1, [pc, #92]	; (8004b24 <AcroPID+0x458>)
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fc fb32 	bl	8001130 <__aeabi_fcmpgt>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <AcroPID+0x410>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <AcroPID+0x458>)
 8004ad6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004ada:	e00d      	b.n	8004af8 <AcroPID+0x42c>
	else if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004ae2:	490b      	ldr	r1, [pc, #44]	; (8004b10 <AcroPID+0x444>)
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fc fb05 	bl	80010f4 <__aeabi_fcmplt>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <AcroPID+0x42c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a07      	ldr	r2, [pc, #28]	; (8004b10 <AcroPID+0x444>)
 8004af4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	/*Remember some variables for next time*/
	pid->pre_error[YAW] = pid->error[YAW];//imu.Yaw
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	return ret;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd90      	pop	{r4, r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	c47a0000 	.word	0xc47a0000
 8004b14:	20000d40 	.word	0x20000d40
 8004b18:	20000e20 	.word	0x20000e20
 8004b1c:	43fa0000 	.word	0x43fa0000
 8004b20:	c3fa0000 	.word	0xc3fa0000
 8004b24:	447a0000 	.word	0x447a0000

08004b28 <AnglePID>:

bool AnglePID(pidc_t *pid)
{
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	uint8_t ret = true;
 8004b30:	2301      	movs	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
	int axis;
	float error, deriv;
	//axis pid
	for(axis = 0; axis < 2; axis++){
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	e171      	b.n	8004e1e <AnglePID+0x2f6>
		error = RC.rcCommand[axis] - imu.AHRS[axis];
 8004b3a:	4a68      	ldr	r2, [pc, #416]	; (8004cdc <AnglePID+0x1b4>)
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	3328      	adds	r3, #40	; 0x28
 8004b40:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fc f8e3 	bl	8000d10 <__aeabi_i2f>
 8004b4a:	4a65      	ldr	r2, [pc, #404]	; (8004ce0 <AnglePID+0x1b8>)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	3322      	adds	r3, #34	; 0x22
 8004b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b54:	4619      	mov	r1, r3
 8004b56:	f7fc f825 	bl	8000ba4 <__aeabi_fsub>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	613b      	str	r3, [r7, #16]
		pid->Iterm1[axis] += error * pid->ts;
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	332a      	adds	r3, #42	; 0x2a
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	685c      	ldr	r4, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6939      	ldr	r1, [r7, #16]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fc f921 	bl	8000db8 <__aeabi_fmul>
 8004b76:	4603      	mov	r3, r0
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f7fc f814 	bl	8000ba8 <__addsf3>
 8004b80:	4603      	mov	r3, r0
 8004b82:	4619      	mov	r1, r3
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	332a      	adds	r3, #42	; 0x2a
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	6059      	str	r1, [r3, #4]
		if(pid->Iterm1[axis] > pid->i1_limit[axis]) pid->Iterm1[axis] = pid->i1_limit[axis];
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	332a      	adds	r3, #42	; 0x2a
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	6858      	ldr	r0, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	3222      	adds	r2, #34	; 0x22
 8004ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	f7fc fac2 	bl	8001130 <__aeabi_fcmpgt>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <AnglePID+0xa2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	3222      	adds	r2, #34	; 0x22
 8004bb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	332a      	adds	r3, #42	; 0x2a
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	e01f      	b.n	8004c0a <AnglePID+0xe2>
		else if(pid->Iterm1[axis] < -pid->i1_limit[axis]) pid->Iterm1[axis] = -pid->i1_limit[axis];
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	332a      	adds	r3, #42	; 0x2a
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	6858      	ldr	r0, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	3222      	adds	r2, #34	; 0x22
 8004bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004be4:	4619      	mov	r1, r3
 8004be6:	f7fc fa85 	bl	80010f4 <__aeabi_fcmplt>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00c      	beq.n	8004c0a <AnglePID+0xe2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	3222      	adds	r2, #34	; 0x22
 8004bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bfa:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	332a      	adds	r3, #42	; 0x2a
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	605a      	str	r2, [r3, #4]
		pid->output1[axis] = pid->kp1[axis]*error + pid->ki1[axis]*pid->Iterm1[axis];
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	3204      	adds	r2, #4
 8004c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c14:	6939      	ldr	r1, [r7, #16]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fc f8ce 	bl	8000db8 <__aeabi_fmul>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461c      	mov	r4, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	3210      	adds	r2, #16
 8004c26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	332a      	adds	r3, #42	; 0x2a
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4619      	mov	r1, r3
 8004c38:	f7fc f8be 	bl	8000db8 <__aeabi_fmul>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7fb ffb1 	bl	8000ba8 <__addsf3>
 8004c46:	4603      	mov	r3, r0
 8004c48:	4619      	mov	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	3240      	adds	r2, #64	; 0x40
 8004c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		error = pid->output1[axis] - imu.gyroRaw[axis];
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	3240      	adds	r2, #64	; 0x40
 8004c5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004c5e:	4a20      	ldr	r2, [pc, #128]	; (8004ce0 <AnglePID+0x1b8>)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	330e      	adds	r3, #14
 8004c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f7fb ff9b 	bl	8000ba4 <__aeabi_fsub>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	613b      	str	r3, [r7, #16]
		pid->Iterm2[axis] += error * pid->ts;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	322e      	adds	r2, #46	; 0x2e
 8004c78:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6939      	ldr	r1, [r7, #16]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fc f898 	bl	8000db8 <__aeabi_fmul>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f7fb ff8b 	bl	8000ba8 <__addsf3>
 8004c92:	4603      	mov	r3, r0
 8004c94:	4619      	mov	r1, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	322e      	adds	r2, #46	; 0x2e
 8004c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(pid->Iterm2[axis] > pid->i2_limit[axis]) pid->Iterm2[axis] = pid->i2_limit[axis];
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	322e      	adds	r2, #46	; 0x2e
 8004ca6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	3324      	adds	r3, #36	; 0x24
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f7fc fa3a 	bl	8001130 <__aeabi_fcmpgt>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d010      	beq.n	8004ce4 <AnglePID+0x1bc>
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	3324      	adds	r3, #36	; 0x24
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	6859      	ldr	r1, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	322e      	adds	r2, #46	; 0x2e
 8004cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004cd8:	e024      	b.n	8004d24 <AnglePID+0x1fc>
 8004cda:	bf00      	nop
 8004cdc:	20000d40 	.word	0x20000d40
 8004ce0:	20000e20 	.word	0x20000e20
		else if(pid->Iterm2[axis] < -pid->i2_limit[axis]) pid->Iterm2[axis] = -pid->i2_limit[axis];
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	322e      	adds	r2, #46	; 0x2e
 8004cea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	3324      	adds	r3, #36	; 0x24
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f7fc f9f8 	bl	80010f4 <__aeabi_fcmplt>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <AnglePID+0x1fc>
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3324      	adds	r3, #36	; 0x24
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	322e      	adds	r2, #46	; 0x2e
 8004d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		deriv = (error - pid->pre_error[axis])*dt_recip;
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	3336      	adds	r3, #54	; 0x36
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4619      	mov	r1, r3
 8004d32:	6938      	ldr	r0, [r7, #16]
 8004d34:	f7fb ff36 	bl	8000ba4 <__aeabi_fsub>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4ba8      	ldr	r3, [pc, #672]	; (8004fe0 <AnglePID+0x4b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f7fc f838 	bl	8000db8 <__aeabi_fmul>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	60bb      	str	r3, [r7, #8]
		pid->pre_error[axis] = error;
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	3336      	adds	r3, #54	; 0x36
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	605a      	str	r2, [r3, #4]
		pid->output2[axis] = pid->kp2[axis]*error + pid->ki2[axis]*pid->Iterm2[axis] + pid->kd2[axis]*deriv;
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	3306      	adds	r3, #6
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	6939      	ldr	r1, [r7, #16]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fc f825 	bl	8000db8 <__aeabi_fmul>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	461c      	mov	r4, r3
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3312      	adds	r3, #18
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	6858      	ldr	r0, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	322e      	adds	r2, #46	; 0x2e
 8004d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f7fc f815 	bl	8000db8 <__aeabi_fmul>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4619      	mov	r1, r3
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7fb ff08 	bl	8000ba8 <__addsf3>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461c      	mov	r4, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	321c      	adds	r2, #28
 8004da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fc f805 	bl	8000db8 <__aeabi_fmul>
 8004dae:	4603      	mov	r3, r0
 8004db0:	4619      	mov	r1, r3
 8004db2:	4620      	mov	r0, r4
 8004db4:	f7fb fef8 	bl	8000ba8 <__addsf3>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4619      	mov	r1, r3
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3342      	adds	r3, #66	; 0x42
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	6059      	str	r1, [r3, #4]

		if(pid->output2[axis] > OUT_MAX) pid->output2[axis] = OUT_MAX;
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	3342      	adds	r3, #66	; 0x42
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4983      	ldr	r1, [pc, #524]	; (8004fe4 <AnglePID+0x4bc>)
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fc f9aa 	bl	8001130 <__aeabi_fcmpgt>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d006      	beq.n	8004df0 <AnglePID+0x2c8>
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	3342      	adds	r3, #66	; 0x42
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	4a7d      	ldr	r2, [pc, #500]	; (8004fe4 <AnglePID+0x4bc>)
 8004dee:	605a      	str	r2, [r3, #4]
		if(pid->output2[axis] < -OUT_MAX) pid->output2[axis] = -OUT_MAX;
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	3342      	adds	r3, #66	; 0x42
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	497a      	ldr	r1, [pc, #488]	; (8004fe8 <AnglePID+0x4c0>)
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fc f978 	bl	80010f4 <__aeabi_fcmplt>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <AnglePID+0x2f0>
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	3342      	adds	r3, #66	; 0x42
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	4a74      	ldr	r2, [pc, #464]	; (8004fe8 <AnglePID+0x4c0>)
 8004e16:	605a      	str	r2, [r3, #4]
	for(axis = 0; axis < 2; axis++){
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	f77f ae8a 	ble.w	8004b3a <AnglePID+0x12>
	}

	if(RC.rcCommand[YAW]>-5 && RC.rcCommand[YAW]<5){
 8004e26:	4b71      	ldr	r3, [pc, #452]	; (8004fec <AnglePID+0x4c4>)
 8004e28:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8004e2c:	f113 0f04 	cmn.w	r3, #4
 8004e30:	f2c0 80e6 	blt.w	8005000 <AnglePID+0x4d8>
 8004e34:	4b6d      	ldr	r3, [pc, #436]	; (8004fec <AnglePID+0x4c4>)
 8004e36:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	f300 80e0 	bgt.w	8005000 <AnglePID+0x4d8>
		error = imu.yawheadinghold - imu.actual_compass_heading;
 8004e40:	4b6b      	ldr	r3, [pc, #428]	; (8004ff0 <AnglePID+0x4c8>)
 8004e42:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8004e46:	461a      	mov	r2, r3
 8004e48:	4b69      	ldr	r3, [pc, #420]	; (8004ff0 <AnglePID+0x4c8>)
 8004e4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fb ff5d 	bl	8000d10 <__aeabi_i2f>
 8004e56:	4603      	mov	r3, r0
 8004e58:	613b      	str	r3, [r7, #16]
		imu.debug1 = error;
 8004e5a:	6938      	ldr	r0, [r7, #16]
 8004e5c:	f7fc f988 	bl	8001170 <__aeabi_f2iz>
 8004e60:	4603      	mov	r3, r0
 8004e62:	b21a      	sxth	r2, r3
 8004e64:	4b62      	ldr	r3, [pc, #392]	; (8004ff0 <AnglePID+0x4c8>)
 8004e66:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		if(error > 180) error -= 360;
 8004e6a:	4962      	ldr	r1, [pc, #392]	; (8004ff4 <AnglePID+0x4cc>)
 8004e6c:	6938      	ldr	r0, [r7, #16]
 8004e6e:	f7fc f95f 	bl	8001130 <__aeabi_fcmpgt>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <AnglePID+0x35c>
 8004e78:	495f      	ldr	r1, [pc, #380]	; (8004ff8 <AnglePID+0x4d0>)
 8004e7a:	6938      	ldr	r0, [r7, #16]
 8004e7c:	f7fb fe92 	bl	8000ba4 <__aeabi_fsub>
 8004e80:	4603      	mov	r3, r0
 8004e82:	613b      	str	r3, [r7, #16]
		if(error < -180) error += 360;
 8004e84:	495d      	ldr	r1, [pc, #372]	; (8004ffc <AnglePID+0x4d4>)
 8004e86:	6938      	ldr	r0, [r7, #16]
 8004e88:	f7fc f934 	bl	80010f4 <__aeabi_fcmplt>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <AnglePID+0x376>
 8004e92:	4959      	ldr	r1, [pc, #356]	; (8004ff8 <AnglePID+0x4d0>)
 8004e94:	6938      	ldr	r0, [r7, #16]
 8004e96:	f7fb fe87 	bl	8000ba8 <__addsf3>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	613b      	str	r3, [r7, #16]
		imu.debug2 = error;
 8004e9e:	6938      	ldr	r0, [r7, #16]
 8004ea0:	f7fc f966 	bl	8001170 <__aeabi_f2iz>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	b21a      	sxth	r2, r3
 8004ea8:	4b51      	ldr	r3, [pc, #324]	; (8004ff0 <AnglePID+0x4c8>)
 8004eaa:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		pid->Iterm2[YAW] += error * pid->ts;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6939      	ldr	r1, [r7, #16]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb ff7c 	bl	8000db8 <__aeabi_fmul>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f7fb fe6f 	bl	8000ba8 <__addsf3>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	461a      	mov	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	f7fc f924 	bl	8001130 <__aeabi_fcmpgt>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <AnglePID+0x3d4>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8004efa:	e016      	b.n	8004f2a <AnglePID+0x402>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f7fc f8f0 	bl	80010f4 <__aeabi_fcmplt>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d007      	beq.n	8004f2a <AnglePID+0x402>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f20:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f30:	4619      	mov	r1, r3
 8004f32:	6938      	ldr	r0, [r7, #16]
 8004f34:	f7fb fe36 	bl	8000ba4 <__aeabi_fsub>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	4b28      	ldr	r3, [pc, #160]	; (8004fe0 <AnglePID+0x4b8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f7fb ff38 	bl	8000db8 <__aeabi_fmul>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	6939      	ldr	r1, [r7, #16]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fb ff2c 	bl	8000db8 <__aeabi_fmul>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461c      	mov	r4, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4610      	mov	r0, r2
 8004f72:	f7fb ff21 	bl	8000db8 <__aeabi_fmul>
 8004f76:	4603      	mov	r3, r0
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f7fb fe14 	bl	8000ba8 <__addsf3>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461c      	mov	r4, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fb ff14 	bl	8000db8 <__aeabi_fmul>
 8004f90:	4603      	mov	r3, r0
 8004f92:	4619      	mov	r1, r3
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7fb fe07 	bl	8000ba8 <__addsf3>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004faa:	490e      	ldr	r1, [pc, #56]	; (8004fe4 <AnglePID+0x4bc>)
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fc f8bf 	bl	8001130 <__aeabi_fcmpgt>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <AnglePID+0x498>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a0a      	ldr	r2, [pc, #40]	; (8004fe4 <AnglePID+0x4bc>)
 8004fbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004fc6:	4908      	ldr	r1, [pc, #32]	; (8004fe8 <AnglePID+0x4c0>)
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fc f893 	bl	80010f4 <__aeabi_fcmplt>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 80c2 	beq.w	800515a <AnglePID+0x632>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a03      	ldr	r2, [pc, #12]	; (8004fe8 <AnglePID+0x4c0>)
 8004fda:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004fde:	e0bc      	b.n	800515a <AnglePID+0x632>
 8004fe0:	2000032c 	.word	0x2000032c
 8004fe4:	447a0000 	.word	0x447a0000
 8004fe8:	c47a0000 	.word	0xc47a0000
 8004fec:	20000d40 	.word	0x20000d40
 8004ff0:	20000e20 	.word	0x20000e20
 8004ff4:	43340000 	.word	0x43340000
 8004ff8:	43b40000 	.word	0x43b40000
 8004ffc:	c3340000 	.word	0xc3340000
	}else{
		error = RC.rcCommand[YAW] - (-imu.gyroRaw[YAW]);
 8005000:	4b5b      	ldr	r3, [pc, #364]	; (8005170 <AnglePID+0x648>)
 8005002:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8005006:	4618      	mov	r0, r3
 8005008:	f7fb fe82 	bl	8000d10 <__aeabi_i2f>
 800500c:	4602      	mov	r2, r0
 800500e:	4b59      	ldr	r3, [pc, #356]	; (8005174 <AnglePID+0x64c>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	4619      	mov	r1, r3
 8005014:	4610      	mov	r0, r2
 8005016:	f7fb fdc7 	bl	8000ba8 <__addsf3>
 800501a:	4603      	mov	r3, r0
 800501c:	613b      	str	r3, [r7, #16]
		pid->Iterm2[YAW] += error * pid->ts;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6939      	ldr	r1, [r7, #16]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb fec4 	bl	8000db8 <__aeabi_fmul>
 8005030:	4603      	mov	r3, r0
 8005032:	4619      	mov	r1, r3
 8005034:	4620      	mov	r0, r4
 8005036:	f7fb fdb7 	bl	8000ba8 <__addsf3>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005050:	4619      	mov	r1, r3
 8005052:	4610      	mov	r0, r2
 8005054:	f7fc f86c 	bl	8001130 <__aeabi_fcmpgt>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d006      	beq.n	800506c <AnglePID+0x544>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800506a:	e016      	b.n	800509a <AnglePID+0x572>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005078:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f7fc f838 	bl	80010f4 <__aeabi_fcmplt>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <AnglePID+0x572>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005090:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050a0:	4619      	mov	r1, r3
 80050a2:	6938      	ldr	r0, [r7, #16]
 80050a4:	f7fb fd7e 	bl	8000ba4 <__aeabi_fsub>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b32      	ldr	r3, [pc, #200]	; (8005178 <AnglePID+0x650>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f7fb fe80 	bl	8000db8 <__aeabi_fmul>
 80050b8:	4603      	mov	r3, r0
 80050ba:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	6939      	ldr	r1, [r7, #16]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fb fe74 	bl	8000db8 <__aeabi_fmul>
 80050d0:	4603      	mov	r3, r0
 80050d2:	461c      	mov	r4, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80050de:	4619      	mov	r1, r3
 80050e0:	4610      	mov	r0, r2
 80050e2:	f7fb fe69 	bl	8000db8 <__aeabi_fmul>
 80050e6:	4603      	mov	r3, r0
 80050e8:	4619      	mov	r1, r3
 80050ea:	4620      	mov	r0, r4
 80050ec:	f7fb fd5c 	bl	8000ba8 <__addsf3>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461c      	mov	r4, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fb fe5c 	bl	8000db8 <__aeabi_fmul>
 8005100:	4603      	mov	r3, r0
 8005102:	4619      	mov	r1, r3
 8005104:	4620      	mov	r0, r4
 8005106:	f7fb fd4f 	bl	8000ba8 <__addsf3>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800511a:	4918      	ldr	r1, [pc, #96]	; (800517c <AnglePID+0x654>)
 800511c:	4618      	mov	r0, r3
 800511e:	f7fc f807 	bl	8001130 <__aeabi_fcmpgt>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <AnglePID+0x608>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a14      	ldr	r2, [pc, #80]	; (800517c <AnglePID+0x654>)
 800512c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005136:	4912      	ldr	r1, [pc, #72]	; (8005180 <AnglePID+0x658>)
 8005138:	4618      	mov	r0, r3
 800513a:	f7fb ffdb 	bl	80010f4 <__aeabi_fcmplt>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <AnglePID+0x624>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a0e      	ldr	r2, [pc, #56]	; (8005180 <AnglePID+0x658>)
 8005148:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		imu.yawheadinghold = imu.actual_compass_heading;
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <AnglePID+0x64c>)
 800514e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005152:	b21a      	sxth	r2, r3
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <AnglePID+0x64c>)
 8005156:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	}
	return ret;
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf14      	ite	ne
 8005160:	2301      	movne	r3, #1
 8005162:	2300      	moveq	r3, #0
 8005164:	b2db      	uxtb	r3, r3
}
 8005166:	4618      	mov	r0, r3
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	bd90      	pop	{r4, r7, pc}
 800516e:	bf00      	nop
 8005170:	20000d40 	.word	0x20000d40
 8005174:	20000e20 	.word	0x20000e20
 8005178:	2000032c 	.word	0x2000032c
 800517c:	447a0000 	.word	0x447a0000
 8005180:	c47a0000 	.word	0xc47a0000

08005184 <GpsPID>:

bool GpsPID(pidc_t *pid)
{
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	bool ret = true;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
	int axis;
	float error, deriv;
	//axis pid
	for(axis = 0; axis < 2; axis++){
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	e17f      	b.n	8005496 <GpsPID+0x312>
		error = constrain(RC.rcCommand[axis] + GPS_angle[axis], -20, 20) - imu.AHRS[axis];
 8005196:	4a6e      	ldr	r2, [pc, #440]	; (8005350 <GpsPID+0x1cc>)
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	3328      	adds	r3, #40	; 0x28
 800519c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80051a0:	4619      	mov	r1, r3
 80051a2:	4a6c      	ldr	r2, [pc, #432]	; (8005354 <GpsPID+0x1d0>)
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80051aa:	440b      	add	r3, r1
 80051ac:	2214      	movs	r2, #20
 80051ae:	f06f 0113 	mvn.w	r1, #19
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fb1c 	bl	80057f0 <constrain>
 80051b8:	4603      	mov	r3, r0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fb fda8 	bl	8000d10 <__aeabi_i2f>
 80051c0:	4a65      	ldr	r2, [pc, #404]	; (8005358 <GpsPID+0x1d4>)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	3322      	adds	r3, #34	; 0x22
 80051c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ca:	4619      	mov	r1, r3
 80051cc:	f7fb fcea 	bl	8000ba4 <__aeabi_fsub>
 80051d0:	4603      	mov	r3, r0
 80051d2:	613b      	str	r3, [r7, #16]
		pid->Iterm1[axis] += error * pid->ts;
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	332a      	adds	r3, #42	; 0x2a
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	685c      	ldr	r4, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6939      	ldr	r1, [r7, #16]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fb fde6 	bl	8000db8 <__aeabi_fmul>
 80051ec:	4603      	mov	r3, r0
 80051ee:	4619      	mov	r1, r3
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7fb fcd9 	bl	8000ba8 <__addsf3>
 80051f6:	4603      	mov	r3, r0
 80051f8:	4619      	mov	r1, r3
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	332a      	adds	r3, #42	; 0x2a
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	6059      	str	r1, [r3, #4]
		if(pid->Iterm1[axis] > pid->i1_limit[axis]) pid->Iterm1[axis] = pid->i1_limit[axis];
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	332a      	adds	r3, #42	; 0x2a
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	6858      	ldr	r0, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	3222      	adds	r2, #34	; 0x22
 8005218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521c:	4619      	mov	r1, r3
 800521e:	f7fb ff87 	bl	8001130 <__aeabi_fcmpgt>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <GpsPID+0xbc>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	3222      	adds	r2, #34	; 0x22
 800522e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	332a      	adds	r3, #42	; 0x2a
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	e01f      	b.n	8005280 <GpsPID+0xfc>
		else if(pid->Iterm1[axis] < -pid->i1_limit[axis]) pid->Iterm1[axis] = -pid->i1_limit[axis];
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	332a      	adds	r3, #42	; 0x2a
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	6858      	ldr	r0, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	3222      	adds	r2, #34	; 0x22
 8005252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005256:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800525a:	4619      	mov	r1, r3
 800525c:	f7fb ff4a 	bl	80010f4 <__aeabi_fcmplt>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00c      	beq.n	8005280 <GpsPID+0xfc>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	3222      	adds	r2, #34	; 0x22
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	332a      	adds	r3, #42	; 0x2a
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	605a      	str	r2, [r3, #4]
		pid->output1[axis] = pid->kp1[axis]*error + pid->ki1[axis]*pid->Iterm1[axis];
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	3204      	adds	r2, #4
 8005286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528a:	6939      	ldr	r1, [r7, #16]
 800528c:	4618      	mov	r0, r3
 800528e:	f7fb fd93 	bl	8000db8 <__aeabi_fmul>
 8005292:	4603      	mov	r3, r0
 8005294:	461c      	mov	r4, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	3210      	adds	r2, #16
 800529c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	332a      	adds	r3, #42	; 0x2a
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4619      	mov	r1, r3
 80052ae:	f7fb fd83 	bl	8000db8 <__aeabi_fmul>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4619      	mov	r1, r3
 80052b6:	4620      	mov	r0, r4
 80052b8:	f7fb fc76 	bl	8000ba8 <__addsf3>
 80052bc:	4603      	mov	r3, r0
 80052be:	4619      	mov	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	3240      	adds	r2, #64	; 0x40
 80052c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		error = pid->output1[axis] - imu.gyroRaw[axis];
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	3240      	adds	r2, #64	; 0x40
 80052d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80052d4:	4a20      	ldr	r2, [pc, #128]	; (8005358 <GpsPID+0x1d4>)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	330e      	adds	r3, #14
 80052da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052de:	4619      	mov	r1, r3
 80052e0:	f7fb fc60 	bl	8000ba4 <__aeabi_fsub>
 80052e4:	4603      	mov	r3, r0
 80052e6:	613b      	str	r3, [r7, #16]
		pid->Iterm2[axis] += error * pid->ts;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	322e      	adds	r2, #46	; 0x2e
 80052ee:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6939      	ldr	r1, [r7, #16]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7fb fd5d 	bl	8000db8 <__aeabi_fmul>
 80052fe:	4603      	mov	r3, r0
 8005300:	4619      	mov	r1, r3
 8005302:	4620      	mov	r0, r4
 8005304:	f7fb fc50 	bl	8000ba8 <__addsf3>
 8005308:	4603      	mov	r3, r0
 800530a:	4619      	mov	r1, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	322e      	adds	r2, #46	; 0x2e
 8005312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(pid->Iterm2[axis] > pid->i2_limit[axis]) pid->Iterm2[axis] = pid->i2_limit[axis];
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	322e      	adds	r2, #46	; 0x2e
 800531c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	3324      	adds	r3, #36	; 0x24
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4619      	mov	r1, r3
 800532e:	f7fb feff 	bl	8001130 <__aeabi_fcmpgt>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d011      	beq.n	800535c <GpsPID+0x1d8>
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	3324      	adds	r3, #36	; 0x24
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	6859      	ldr	r1, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	322e      	adds	r2, #46	; 0x2e
 800534a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800534e:	e025      	b.n	800539c <GpsPID+0x218>
 8005350:	20000d40 	.word	0x20000d40
 8005354:	2000027c 	.word	0x2000027c
 8005358:	20000e20 	.word	0x20000e20
		else if(pid->Iterm2[axis] < -pid->i2_limit[axis]) pid->Iterm2[axis] = -pid->i2_limit[axis];
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	322e      	adds	r2, #46	; 0x2e
 8005362:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	3324      	adds	r3, #36	; 0x24
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005376:	4619      	mov	r1, r3
 8005378:	f7fb febc 	bl	80010f4 <__aeabi_fcmplt>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <GpsPID+0x218>
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	3324      	adds	r3, #36	; 0x24
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	322e      	adds	r2, #46	; 0x2e
 8005398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		deriv = (error - pid->pre_error[axis])*dt_recip;
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	3336      	adds	r3, #54	; 0x36
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4619      	mov	r1, r3
 80053aa:	6938      	ldr	r0, [r7, #16]
 80053ac:	f7fb fbfa 	bl	8000ba4 <__aeabi_fsub>
 80053b0:	4603      	mov	r3, r0
 80053b2:	461a      	mov	r2, r3
 80053b4:	4ba8      	ldr	r3, [pc, #672]	; (8005658 <GpsPID+0x4d4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f7fb fcfc 	bl	8000db8 <__aeabi_fmul>
 80053c0:	4603      	mov	r3, r0
 80053c2:	60bb      	str	r3, [r7, #8]
		pid->pre_error[axis] = error;
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	3336      	adds	r3, #54	; 0x36
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	605a      	str	r2, [r3, #4]
		pid->output2[axis] = pid->kp2[axis]*error + pid->ki2[axis]*pid->Iterm2[axis] + pid->kd2[axis]*deriv;
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	3306      	adds	r3, #6
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	6939      	ldr	r1, [r7, #16]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fb fce9 	bl	8000db8 <__aeabi_fmul>
 80053e6:	4603      	mov	r3, r0
 80053e8:	461c      	mov	r4, r3
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3312      	adds	r3, #18
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	6858      	ldr	r0, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	322e      	adds	r2, #46	; 0x2e
 80053fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005400:	4619      	mov	r1, r3
 8005402:	f7fb fcd9 	bl	8000db8 <__aeabi_fmul>
 8005406:	4603      	mov	r3, r0
 8005408:	4619      	mov	r1, r3
 800540a:	4620      	mov	r0, r4
 800540c:	f7fb fbcc 	bl	8000ba8 <__addsf3>
 8005410:	4603      	mov	r3, r0
 8005412:	461c      	mov	r4, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	321c      	adds	r2, #28
 800541a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	4618      	mov	r0, r3
 8005422:	f7fb fcc9 	bl	8000db8 <__aeabi_fmul>
 8005426:	4603      	mov	r3, r0
 8005428:	4619      	mov	r1, r3
 800542a:	4620      	mov	r0, r4
 800542c:	f7fb fbbc 	bl	8000ba8 <__addsf3>
 8005430:	4603      	mov	r3, r0
 8005432:	4619      	mov	r1, r3
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3342      	adds	r3, #66	; 0x42
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	6059      	str	r1, [r3, #4]

		if(pid->output2[axis] > OUT_MAX) pid->output2[axis] = OUT_MAX;
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	3342      	adds	r3, #66	; 0x42
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4983      	ldr	r1, [pc, #524]	; (800565c <GpsPID+0x4d8>)
 800544e:	4618      	mov	r0, r3
 8005450:	f7fb fe6e 	bl	8001130 <__aeabi_fcmpgt>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d006      	beq.n	8005468 <GpsPID+0x2e4>
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	3342      	adds	r3, #66	; 0x42
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	4a7d      	ldr	r2, [pc, #500]	; (800565c <GpsPID+0x4d8>)
 8005466:	605a      	str	r2, [r3, #4]
		if(pid->output2[axis] < -OUT_MAX) pid->output2[axis] = -OUT_MAX;
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	3342      	adds	r3, #66	; 0x42
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	497a      	ldr	r1, [pc, #488]	; (8005660 <GpsPID+0x4dc>)
 8005476:	4618      	mov	r0, r3
 8005478:	f7fb fe3c 	bl	80010f4 <__aeabi_fcmplt>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d006      	beq.n	8005490 <GpsPID+0x30c>
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	3342      	adds	r3, #66	; 0x42
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	4a74      	ldr	r2, [pc, #464]	; (8005660 <GpsPID+0x4dc>)
 800548e:	605a      	str	r2, [r3, #4]
	for(axis = 0; axis < 2; axis++){
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	3301      	adds	r3, #1
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b01      	cmp	r3, #1
 800549a:	f77f ae7c 	ble.w	8005196 <GpsPID+0x12>
	}

	if(RC.rcCommand[YAW]>-5 && RC.rcCommand[YAW]<5){
 800549e:	4b71      	ldr	r3, [pc, #452]	; (8005664 <GpsPID+0x4e0>)
 80054a0:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80054a4:	f113 0f04 	cmn.w	r3, #4
 80054a8:	f2c0 80e6 	blt.w	8005678 <GpsPID+0x4f4>
 80054ac:	4b6d      	ldr	r3, [pc, #436]	; (8005664 <GpsPID+0x4e0>)
 80054ae:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	f300 80e0 	bgt.w	8005678 <GpsPID+0x4f4>
		error = imu.yawheadinghold - imu.actual_compass_heading;
 80054b8:	4b6b      	ldr	r3, [pc, #428]	; (8005668 <GpsPID+0x4e4>)
 80054ba:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 80054be:	461a      	mov	r2, r3
 80054c0:	4b69      	ldr	r3, [pc, #420]	; (8005668 <GpsPID+0x4e4>)
 80054c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fb fc21 	bl	8000d10 <__aeabi_i2f>
 80054ce:	4603      	mov	r3, r0
 80054d0:	613b      	str	r3, [r7, #16]
		imu.debug1 = error;
 80054d2:	6938      	ldr	r0, [r7, #16]
 80054d4:	f7fb fe4c 	bl	8001170 <__aeabi_f2iz>
 80054d8:	4603      	mov	r3, r0
 80054da:	b21a      	sxth	r2, r3
 80054dc:	4b62      	ldr	r3, [pc, #392]	; (8005668 <GpsPID+0x4e4>)
 80054de:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		if(error > 180) error -= 360;
 80054e2:	4962      	ldr	r1, [pc, #392]	; (800566c <GpsPID+0x4e8>)
 80054e4:	6938      	ldr	r0, [r7, #16]
 80054e6:	f7fb fe23 	bl	8001130 <__aeabi_fcmpgt>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <GpsPID+0x378>
 80054f0:	495f      	ldr	r1, [pc, #380]	; (8005670 <GpsPID+0x4ec>)
 80054f2:	6938      	ldr	r0, [r7, #16]
 80054f4:	f7fb fb56 	bl	8000ba4 <__aeabi_fsub>
 80054f8:	4603      	mov	r3, r0
 80054fa:	613b      	str	r3, [r7, #16]
		if(error < -180) error += 360;
 80054fc:	495d      	ldr	r1, [pc, #372]	; (8005674 <GpsPID+0x4f0>)
 80054fe:	6938      	ldr	r0, [r7, #16]
 8005500:	f7fb fdf8 	bl	80010f4 <__aeabi_fcmplt>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <GpsPID+0x392>
 800550a:	4959      	ldr	r1, [pc, #356]	; (8005670 <GpsPID+0x4ec>)
 800550c:	6938      	ldr	r0, [r7, #16]
 800550e:	f7fb fb4b 	bl	8000ba8 <__addsf3>
 8005512:	4603      	mov	r3, r0
 8005514:	613b      	str	r3, [r7, #16]
		imu.debug2 = error;
 8005516:	6938      	ldr	r0, [r7, #16]
 8005518:	f7fb fe2a 	bl	8001170 <__aeabi_f2iz>
 800551c:	4603      	mov	r3, r0
 800551e:	b21a      	sxth	r2, r3
 8005520:	4b51      	ldr	r3, [pc, #324]	; (8005668 <GpsPID+0x4e4>)
 8005522:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		pid->Iterm2[YAW] += error * pid->ts;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6939      	ldr	r1, [r7, #16]
 8005532:	4618      	mov	r0, r3
 8005534:	f7fb fc40 	bl	8000db8 <__aeabi_fmul>
 8005538:	4603      	mov	r3, r0
 800553a:	4619      	mov	r1, r3
 800553c:	4620      	mov	r0, r4
 800553e:	f7fb fb33 	bl	8000ba8 <__addsf3>
 8005542:	4603      	mov	r3, r0
 8005544:	461a      	mov	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005558:	4619      	mov	r1, r3
 800555a:	4610      	mov	r0, r2
 800555c:	f7fb fde8 	bl	8001130 <__aeabi_fcmpgt>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d006      	beq.n	8005574 <GpsPID+0x3f0>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8005572:	e016      	b.n	80055a2 <GpsPID+0x41e>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005580:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f7fb fdb4 	bl	80010f4 <__aeabi_fcmplt>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <GpsPID+0x41e>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005598:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055a8:	4619      	mov	r1, r3
 80055aa:	6938      	ldr	r0, [r7, #16]
 80055ac:	f7fb fafa 	bl	8000ba4 <__aeabi_fsub>
 80055b0:	4603      	mov	r3, r0
 80055b2:	461a      	mov	r2, r3
 80055b4:	4b28      	ldr	r3, [pc, #160]	; (8005658 <GpsPID+0x4d4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f7fb fbfc 	bl	8000db8 <__aeabi_fmul>
 80055c0:	4603      	mov	r3, r0
 80055c2:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	6939      	ldr	r1, [r7, #16]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fb fbf0 	bl	8000db8 <__aeabi_fmul>
 80055d8:	4603      	mov	r3, r0
 80055da:	461c      	mov	r4, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f7fb fbe5 	bl	8000db8 <__aeabi_fmul>
 80055ee:	4603      	mov	r3, r0
 80055f0:	4619      	mov	r1, r3
 80055f2:	4620      	mov	r0, r4
 80055f4:	f7fb fad8 	bl	8000ba8 <__addsf3>
 80055f8:	4603      	mov	r3, r0
 80055fa:	461c      	mov	r4, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fb fbd8 	bl	8000db8 <__aeabi_fmul>
 8005608:	4603      	mov	r3, r0
 800560a:	4619      	mov	r1, r3
 800560c:	4620      	mov	r0, r4
 800560e:	f7fb facb 	bl	8000ba8 <__addsf3>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005622:	490e      	ldr	r1, [pc, #56]	; (800565c <GpsPID+0x4d8>)
 8005624:	4618      	mov	r0, r3
 8005626:	f7fb fd83 	bl	8001130 <__aeabi_fcmpgt>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <GpsPID+0x4b4>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a0a      	ldr	r2, [pc, #40]	; (800565c <GpsPID+0x4d8>)
 8005634:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800563e:	4908      	ldr	r1, [pc, #32]	; (8005660 <GpsPID+0x4dc>)
 8005640:	4618      	mov	r0, r3
 8005642:	f7fb fd57 	bl	80010f4 <__aeabi_fcmplt>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80c2 	beq.w	80057d2 <GpsPID+0x64e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a03      	ldr	r2, [pc, #12]	; (8005660 <GpsPID+0x4dc>)
 8005652:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8005656:	e0bc      	b.n	80057d2 <GpsPID+0x64e>
 8005658:	2000032c 	.word	0x2000032c
 800565c:	447a0000 	.word	0x447a0000
 8005660:	c47a0000 	.word	0xc47a0000
 8005664:	20000d40 	.word	0x20000d40
 8005668:	20000e20 	.word	0x20000e20
 800566c:	43340000 	.word	0x43340000
 8005670:	43b40000 	.word	0x43b40000
 8005674:	c3340000 	.word	0xc3340000
	}else{
		error = RC.rcCommand[YAW] - (-imu.gyroRaw[YAW]);
 8005678:	4b58      	ldr	r3, [pc, #352]	; (80057dc <GpsPID+0x658>)
 800567a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800567e:	4618      	mov	r0, r3
 8005680:	f7fb fb46 	bl	8000d10 <__aeabi_i2f>
 8005684:	4602      	mov	r2, r0
 8005686:	4b56      	ldr	r3, [pc, #344]	; (80057e0 <GpsPID+0x65c>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f7fb fa8b 	bl	8000ba8 <__addsf3>
 8005692:	4603      	mov	r3, r0
 8005694:	613b      	str	r3, [r7, #16]
		pid->Iterm2[YAW] += error * pid->ts;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6939      	ldr	r1, [r7, #16]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fb fb88 	bl	8000db8 <__aeabi_fmul>
 80056a8:	4603      	mov	r3, r0
 80056aa:	4619      	mov	r1, r3
 80056ac:	4620      	mov	r0, r4
 80056ae:	f7fb fa7b 	bl	8000ba8 <__addsf3>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f7fb fd30 	bl	8001130 <__aeabi_fcmpgt>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d006      	beq.n	80056e4 <GpsPID+0x560>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80056e2:	e016      	b.n	8005712 <GpsPID+0x58e>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f7fb fcfc 	bl	80010f4 <__aeabi_fcmplt>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <GpsPID+0x58e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005708:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005718:	4619      	mov	r1, r3
 800571a:	6938      	ldr	r0, [r7, #16]
 800571c:	f7fb fa42 	bl	8000ba4 <__aeabi_fsub>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	4b2f      	ldr	r3, [pc, #188]	; (80057e4 <GpsPID+0x660>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f7fb fb44 	bl	8000db8 <__aeabi_fmul>
 8005730:	4603      	mov	r3, r0
 8005732:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	6939      	ldr	r1, [r7, #16]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fb fb38 	bl	8000db8 <__aeabi_fmul>
 8005748:	4603      	mov	r3, r0
 800574a:	461c      	mov	r4, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7fb fb2d 	bl	8000db8 <__aeabi_fmul>
 800575e:	4603      	mov	r3, r0
 8005760:	4619      	mov	r1, r3
 8005762:	4620      	mov	r0, r4
 8005764:	f7fb fa20 	bl	8000ba8 <__addsf3>
 8005768:	4603      	mov	r3, r0
 800576a:	461c      	mov	r4, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	4618      	mov	r0, r3
 8005774:	f7fb fb20 	bl	8000db8 <__aeabi_fmul>
 8005778:	4603      	mov	r3, r0
 800577a:	4619      	mov	r1, r3
 800577c:	4620      	mov	r0, r4
 800577e:	f7fb fa13 	bl	8000ba8 <__addsf3>
 8005782:	4603      	mov	r3, r0
 8005784:	461a      	mov	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005792:	4915      	ldr	r1, [pc, #84]	; (80057e8 <GpsPID+0x664>)
 8005794:	4618      	mov	r0, r3
 8005796:	f7fb fccb 	bl	8001130 <__aeabi_fcmpgt>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <GpsPID+0x624>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a11      	ldr	r2, [pc, #68]	; (80057e8 <GpsPID+0x664>)
 80057a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80057ae:	490f      	ldr	r1, [pc, #60]	; (80057ec <GpsPID+0x668>)
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fb fc9f 	bl	80010f4 <__aeabi_fcmplt>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <GpsPID+0x640>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a0b      	ldr	r2, [pc, #44]	; (80057ec <GpsPID+0x668>)
 80057c0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		imu.yawheadinghold = imu.actual_compass_heading;
 80057c4:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <GpsPID+0x65c>)
 80057c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057ca:	b21a      	sxth	r2, r3
 80057cc:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <GpsPID+0x65c>)
 80057ce:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	}

	return ret;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd90      	pop	{r4, r7, pc}
 80057dc:	20000d40 	.word	0x20000d40
 80057e0:	20000e20 	.word	0x20000e20
 80057e4:	2000032c 	.word	0x2000032c
 80057e8:	447a0000 	.word	0x447a0000
 80057ec:	c47a0000 	.word	0xc47a0000

080057f0 <constrain>:

int constrain(int amt, int low, int high)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
	if (amt < low)
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	429a      	cmp	r2, r3
 8005802:	da01      	bge.n	8005808 <constrain+0x18>
		return low;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	e006      	b.n	8005816 <constrain+0x26>
	else if (amt > high)
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	dd01      	ble.n	8005814 <constrain+0x24>
		return high;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	e000      	b.n	8005816 <constrain+0x26>
	else
		return amt;
 8005814:	68fb      	ldr	r3, [r7, #12]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <HAL_TIM_IC_CaptureCallback>:


static void cliRadio(cli_args_t *args);

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	7f1b      	ldrb	r3, [r3, #28]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d135      	bne.n	800589c <HAL_TIM_IC_CaptureCallback+0x7c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005838:	d130      	bne.n	800589c <HAL_TIM_IC_CaptureCallback+0x7c>
	{
		if(Ch1_PIN)
 800583a:	4b90      	ldr	r3, [pc, #576]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d011      	beq.n	800586a <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM2->CCR1 = 0;
 8005846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800584a:	2200      	movs	r2, #0
 800584c:	635a      	str	r2, [r3, #52]	; 0x34
			RC.capture_rise[0] = TIM2->CCR1; // read capture data
 800584e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	4a8a      	ldr	r2, [pc, #552]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005856:	6013      	str	r3, [r2, #0]
			Ch1_POL_FALLING;  // to falling edge
 8005858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005862:	f043 0302 	orr.w	r3, r3, #2
 8005866:	6213      	str	r3, [r2, #32]
 8005868:	e018      	b.n	800589c <HAL_TIM_IC_CaptureCallback+0x7c>
		}
		else
		{   // Timer2 Ch1 pin(PA0) is Low
			RC.capture_fall[0] = TIM2->CCR1; // read capture data
 800586a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	4a83      	ldr	r2, [pc, #524]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005872:	6213      	str	r3, [r2, #32]
			RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 8005874:	4b82      	ldr	r3, [pc, #520]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	b29a      	uxth	r2, r3
 800587a:	4b81      	ldr	r3, [pc, #516]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	b29b      	uxth	r3, r3
 8005884:	b21a      	sxth	r2, r3
 8005886:	4b7e      	ldr	r3, [pc, #504]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			Ch1_POL_RISING;   // to rising edge
 800588c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005896:	f023 0302 	bic.w	r3, r3, #2
 800589a:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	7f1b      	ldrb	r3, [r3, #28]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d135      	bne.n	8005910 <HAL_TIM_IC_CaptureCallback+0xf0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ac:	d130      	bne.n	8005910 <HAL_TIM_IC_CaptureCallback+0xf0>
	{
		if(Ch2_PIN)
 80058ae:	4b73      	ldr	r3, [pc, #460]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d011      	beq.n	80058de <HAL_TIM_IC_CaptureCallback+0xbe>
		{  // Timer2 Ch2 pin(PA1) is High
			TIM2->CCR2 = 0;
 80058ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058be:	2200      	movs	r2, #0
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
			RC.capture_rise[1] = TIM2->CCR2; // read capture data
 80058c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	4a6d      	ldr	r2, [pc, #436]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058ca:	6053      	str	r3, [r2, #4]
			Ch2_POL_FALLING;  // to falling edge
 80058cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058d6:	f043 0320 	orr.w	r3, r3, #32
 80058da:	6213      	str	r3, [r2, #32]
 80058dc:	e018      	b.n	8005910 <HAL_TIM_IC_CaptureCallback+0xf0>
		}
		else
		{   // Timer2 Ch2 pin(PA1) is Low
			RC.capture_fall[1] = TIM2->CCR2; // read capture data
 80058de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	4a66      	ldr	r2, [pc, #408]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058e6:	6253      	str	r3, [r2, #36]	; 0x24
			RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 80058e8:	4b65      	ldr	r3, [pc, #404]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	4b64      	ldr	r3, [pc, #400]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	b21a      	sxth	r2, r3
 80058fa:	4b61      	ldr	r3, [pc, #388]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058fc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			Ch2_POL_RISING;   // to rising edge
 8005900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800590a:	f023 0320 	bic.w	r3, r3, #32
 800590e:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	7f1b      	ldrb	r3, [r3, #28]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d12e      	bne.n	8005976 <HAL_TIM_IC_CaptureCallback+0x156>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a59      	ldr	r2, [pc, #356]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d129      	bne.n	8005976 <HAL_TIM_IC_CaptureCallback+0x156>
	{
		if(Ch3_PIN)
 8005922:	4b56      	ldr	r3, [pc, #344]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <HAL_TIM_IC_CaptureCallback+0x12a>
		{  // Timer3 Ch1 pin(PA6) is High
			TIM3->CCR1 = 0;
 800592e:	4b55      	ldr	r3, [pc, #340]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005930:	2200      	movs	r2, #0
 8005932:	635a      	str	r2, [r3, #52]	; 0x34
			RC.capture_rise[2] = TIM3->CCR1; // read capture data
 8005934:	4b53      	ldr	r3, [pc, #332]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005938:	4a51      	ldr	r2, [pc, #324]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 800593a:	6093      	str	r3, [r2, #8]
			Ch3_POL_FALLING;  // to falling edge
 800593c:	4b51      	ldr	r3, [pc, #324]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	4a50      	ldr	r2, [pc, #320]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005942:	f043 0302 	orr.w	r3, r3, #2
 8005946:	6213      	str	r3, [r2, #32]
 8005948:	e015      	b.n	8005976 <HAL_TIM_IC_CaptureCallback+0x156>
		}
		else
		{   // Timer3 Ch1 pin(PA6) is Low
			RC.capture_fall[2] = TIM3->CCR1; // read capture data
 800594a:	4b4e      	ldr	r3, [pc, #312]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	4a4c      	ldr	r2, [pc, #304]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005950:	6293      	str	r3, [r2, #40]	; 0x28
			RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 8005952:	4b4b      	ldr	r3, [pc, #300]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	b29a      	uxth	r2, r3
 8005958:	4b49      	ldr	r3, [pc, #292]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	b29b      	uxth	r3, r3
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	b29b      	uxth	r3, r3
 8005962:	b21a      	sxth	r2, r3
 8005964:	4b46      	ldr	r3, [pc, #280]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005966:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			Ch3_POL_RISING;   // to rising edge
 800596a:	4b46      	ldr	r3, [pc, #280]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	4a45      	ldr	r2, [pc, #276]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005970:	f023 0302 	bic.w	r3, r3, #2
 8005974:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM3)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	7f1b      	ldrb	r3, [r3, #28]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d12e      	bne.n	80059dc <HAL_TIM_IC_CaptureCallback+0x1bc>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d129      	bne.n	80059dc <HAL_TIM_IC_CaptureCallback+0x1bc>
	{
		if(Ch4_PIN)
 8005988:	4b3c      	ldr	r3, [pc, #240]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <HAL_TIM_IC_CaptureCallback+0x190>
		{  // Timer3 Ch2 pin(PA7) is High
			TIM3->CCR2 = 0;
 8005994:	4b3b      	ldr	r3, [pc, #236]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005996:	2200      	movs	r2, #0
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
			RC.capture_rise[3] = TIM3->CCR2; // read capture data
 800599a:	4b3a      	ldr	r3, [pc, #232]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	4a38      	ldr	r2, [pc, #224]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059a0:	60d3      	str	r3, [r2, #12]
			Ch4_POL_FALLING;  // to falling edge
 80059a2:	4b38      	ldr	r3, [pc, #224]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	4a37      	ldr	r2, [pc, #220]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 80059a8:	f043 0320 	orr.w	r3, r3, #32
 80059ac:	6213      	str	r3, [r2, #32]
 80059ae:	e015      	b.n	80059dc <HAL_TIM_IC_CaptureCallback+0x1bc>
		}
		else
		{   // Timer3 Ch2 pin(PA7) is Low
			RC.capture_fall[3] = TIM3->CCR2; // read capture data
 80059b0:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	4a32      	ldr	r2, [pc, #200]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059b6:	62d3      	str	r3, [r2, #44]	; 0x2c
			RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 80059b8:	4b31      	ldr	r3, [pc, #196]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	b29a      	uxth	r2, r3
 80059be:	4b30      	ldr	r3, [pc, #192]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	b21a      	sxth	r2, r3
 80059ca:	4b2d      	ldr	r3, [pc, #180]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			Ch4_POL_RISING;   // to rising edge
 80059d0:	4b2c      	ldr	r3, [pc, #176]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	4a2b      	ldr	r2, [pc, #172]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 80059d6:	f023 0320 	bic.w	r3, r3, #32
 80059da:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 && htim->Instance == TIM3)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	7f1b      	ldrb	r3, [r3, #28]
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d12e      	bne.n	8005a42 <HAL_TIM_IC_CaptureCallback+0x222>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a26      	ldr	r2, [pc, #152]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d129      	bne.n	8005a42 <HAL_TIM_IC_CaptureCallback+0x222>
	{
		if(Ch5_PIN)
 80059ee:	4b26      	ldr	r3, [pc, #152]	; (8005a88 <HAL_TIM_IC_CaptureCallback+0x268>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00d      	beq.n	8005a16 <HAL_TIM_IC_CaptureCallback+0x1f6>
		{  // Timer3 Ch3 pin(PB0) is High
			TIM3->CCR3 = 0;
 80059fa:	4b22      	ldr	r3, [pc, #136]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	63da      	str	r2, [r3, #60]	; 0x3c
			RC.capture_rise[4] = TIM3->CCR3; // read capture data
 8005a00:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a04:	4a1e      	ldr	r2, [pc, #120]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a06:	6113      	str	r3, [r2, #16]
			Ch5_POL_FALLING;  // to falling edge
 8005a08:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a12:	6213      	str	r3, [r2, #32]
 8005a14:	e015      	b.n	8005a42 <HAL_TIM_IC_CaptureCallback+0x222>
		}
		else
		{   // Timer3 Ch3 pin(PB0) is Low
			RC.capture_fall[4] = TIM3->CCR3; // read capture data
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	4a19      	ldr	r2, [pc, #100]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a1c:	6313      	str	r3, [r2, #48]	; 0x30
			RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 8005a1e:	4b18      	ldr	r3, [pc, #96]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	b21a      	sxth	r2, r3
 8005a30:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			Ch5_POL_RISING;   // to rising edge
 8005a36:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	4a12      	ldr	r2, [pc, #72]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a40:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	7f1b      	ldrb	r3, [r3, #28]
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d136      	bne.n	8005ab8 <HAL_TIM_IC_CaptureCallback+0x298>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d131      	bne.n	8005ab8 <HAL_TIM_IC_CaptureCallback+0x298>
	{
		if(Ch6_PIN)
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <HAL_TIM_IC_CaptureCallback+0x268>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d015      	beq.n	8005a8c <HAL_TIM_IC_CaptureCallback+0x26c>
		{  // Timer3 Ch4 pin(PB1) is High
			TIM3->CCR4 = 0;
 8005a60:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
			RC.capture_rise[5] = TIM3->CCR4; // read capture data
 8005a66:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	4a05      	ldr	r2, [pc, #20]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a6c:	6153      	str	r3, [r2, #20]
			Ch6_POL_FALLING;  // to falling edge
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a78:	6213      	str	r3, [r2, #32]
	//	        	RC.capture_fall[7] = TIM3->CCR4; // read capture data
	//	            RC.rcADC[7] = RC.capture_fall[7] - RC.capture_rise[7];
	//	            Ch8_POL_RISING;   // to rising edge
	//	        }
	//	    }
}
 8005a7a:	e01d      	b.n	8005ab8 <HAL_TIM_IC_CaptureCallback+0x298>
 8005a7c:	40010800 	.word	0x40010800
 8005a80:	20000d40 	.word	0x20000d40
 8005a84:	40000400 	.word	0x40000400
 8005a88:	40010c00 	.word	0x40010c00
			RC.capture_fall[5] = TIM3->CCR4; // read capture data
 8005a8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	4a0d      	ldr	r2, [pc, #52]	; (8005ac8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005a92:	6353      	str	r3, [r2, #52]	; 0x34
			RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	b21a      	sxth	r2, r3
 8005aa6:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005aa8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			Ch6_POL_RISING;   // to rising edge
 8005aac:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	4a04      	ldr	r2, [pc, #16]	; (8005ac4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ab6:	6213      	str	r3, [r2, #32]
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40000400 	.word	0x40000400
 8005ac8:	20000d40 	.word	0x20000d40

08005acc <mwArm>:

void mwArm(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
	if(!f.ARMED)
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <mwArm+0x24>)
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d108      	bne.n	8005aea <mwArm+0x1e>
	{
		f.ARMED = 1;
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <mwArm+0x24>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	705a      	strb	r2, [r3, #1]
		ms5611.ground_pressure = alt.EstAlt;
 8005ade:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <mwArm+0x28>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a05      	ldr	r2, [pc, #20]	; (8005af8 <mwArm+0x2c>)
 8005ae4:	6693      	str	r3, [r2, #104]	; 0x68
		GPS_reset_home_position();
 8005ae6:	f7fc fe01 	bl	80026ec <GPS_reset_home_position>
	}
}
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000ed4 	.word	0x20000ed4
 8005af4:	20000ef0 	.word	0x20000ef0
 8005af8:	20000da0 	.word	0x20000da0

08005afc <mwDisarm>:
void mwDisarm(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
	if(f.ARMED)
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <mwDisarm+0x1c>)
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <mwDisarm+0x12>
	{
		f.ARMED = 0;
 8005b08:	4b03      	ldr	r3, [pc, #12]	; (8005b18 <mwDisarm+0x1c>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	705a      	strb	r2, [r3, #1]
	}
}
 8005b0e:	bf00      	nop
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000ed4 	.word	0x20000ed4

08005b1c <computeRC>:
	Error.error = 0;
	cliAdd("radio", cliRadio);
}

void computeRC(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
	static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
	static uint8_t rcSticks;            // this hold sticks position for command combos
	uint8_t stTmp = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	71fb      	strb	r3, [r7, #7]
	int i;
	// ------------------ STICKS COMMAND HANDLER --------------------
	// checking sticks positions
	for (i = 0; i < 4; i++)
 8005b26:	2300      	movs	r3, #0
 8005b28:	603b      	str	r3, [r7, #0]
 8005b2a:	e01f      	b.n	8005b6c <computeRC+0x50>
	{
		stTmp >>= 2;
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	089b      	lsrs	r3, r3, #2
 8005b30:	71fb      	strb	r3, [r7, #7]
		if (RC.rcADC[i] > 1150)
 8005b32:	4ab6      	ldr	r2, [pc, #728]	; (8005e0c <computeRC+0x2f0>)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	3320      	adds	r3, #32
 8005b38:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005b3c:	f240 427e 	movw	r2, #1150	; 0x47e
 8005b40:	4293      	cmp	r3, r2
 8005b42:	dd03      	ble.n	8005b4c <computeRC+0x30>
			stTmp |= 0x80;  // check for MIN
 8005b44:	79fb      	ldrb	r3, [r7, #7]
 8005b46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b4a:	71fb      	strb	r3, [r7, #7]
		if (RC.rcADC[i] < 1850)
 8005b4c:	4aaf      	ldr	r2, [pc, #700]	; (8005e0c <computeRC+0x2f0>)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	3320      	adds	r3, #32
 8005b52:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005b56:	f240 7239 	movw	r2, #1849	; 0x739
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	dc03      	bgt.n	8005b66 <computeRC+0x4a>
			stTmp |= 0x40;  // check for MAX
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b64:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 4; i++)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	dddc      	ble.n	8005b2c <computeRC+0x10>
	}
	if (stTmp == rcSticks)
 8005b72:	4ba7      	ldr	r3, [pc, #668]	; (8005e10 <computeRC+0x2f4>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	79fa      	ldrb	r2, [r7, #7]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d10a      	bne.n	8005b92 <computeRC+0x76>
	{
		if (rcDelayCommand < 250)
 8005b7c:	4ba5      	ldr	r3, [pc, #660]	; (8005e14 <computeRC+0x2f8>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2bf9      	cmp	r3, #249	; 0xf9
 8005b82:	d809      	bhi.n	8005b98 <computeRC+0x7c>
			rcDelayCommand++;
 8005b84:	4ba3      	ldr	r3, [pc, #652]	; (8005e14 <computeRC+0x2f8>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	4ba1      	ldr	r3, [pc, #644]	; (8005e14 <computeRC+0x2f8>)
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	e002      	b.n	8005b98 <computeRC+0x7c>
	} else
		rcDelayCommand = 0;
 8005b92:	4ba0      	ldr	r3, [pc, #640]	; (8005e14 <computeRC+0x2f8>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	701a      	strb	r2, [r3, #0]
	rcSticks = stTmp;
 8005b98:	4a9d      	ldr	r2, [pc, #628]	; (8005e10 <computeRC+0x2f4>)
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	7013      	strb	r3, [r2, #0]

	if (rcDelayCommand == 50)
 8005b9e:	4b9d      	ldr	r3, [pc, #628]	; (8005e14 <computeRC+0x2f8>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b32      	cmp	r3, #50	; 0x32
 8005ba4:	d12e      	bne.n	8005c04 <computeRC+0xe8>
	{
		if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 8005ba6:	4b9c      	ldr	r3, [pc, #624]	; (8005e18 <computeRC+0x2fc>)
 8005ba8:	785b      	ldrb	r3, [r3, #1]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d107      	bne.n	8005bbe <computeRC+0xa2>
 8005bae:	4b98      	ldr	r3, [pc, #608]	; (8005e10 <computeRC+0x2f4>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b5f      	cmp	r3, #95	; 0x5f
 8005bb4:	d103      	bne.n	8005bbe <computeRC+0xa2>
		{
			ledToggle(RGB_BLUE);
 8005bb6:	2004      	movs	r0, #4
 8005bb8:	f005 fe1e 	bl	800b7f8 <ledToggle>
 8005bbc:	e01c      	b.n	8005bf8 <computeRC+0xdc>
		}else if(f.ARMED == 1 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 8005bbe:	4b96      	ldr	r3, [pc, #600]	; (8005e18 <computeRC+0x2fc>)
 8005bc0:	785b      	ldrb	r3, [r3, #1]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d107      	bne.n	8005bd6 <computeRC+0xba>
 8005bc6:	4b92      	ldr	r3, [pc, #584]	; (8005e10 <computeRC+0x2f4>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b6f      	cmp	r3, #111	; 0x6f
 8005bcc:	d103      	bne.n	8005bd6 <computeRC+0xba>
		{
			ledToggle(RGB_GREEN);
 8005bce:	2003      	movs	r0, #3
 8005bd0:	f005 fe12 	bl	800b7f8 <ledToggle>
 8005bd4:	e010      	b.n	8005bf8 <computeRC+0xdc>
		}else if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_HI + PIT_HI + ROL_HI))
 8005bd6:	4b90      	ldr	r3, [pc, #576]	; (8005e18 <computeRC+0x2fc>)
 8005bd8:	785b      	ldrb	r3, [r3, #1]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <computeRC+0xd0>
 8005bde:	4b8c      	ldr	r3, [pc, #560]	; (8005e10 <computeRC+0x2f4>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b6a      	cmp	r3, #106	; 0x6a
 8005be4:	d102      	bne.n	8005bec <computeRC+0xd0>
		{
			mwArm();
 8005be6:	f7ff ff71 	bl	8005acc <mwArm>
 8005bea:	e005      	b.n	8005bf8 <computeRC+0xdc>
		}else if(rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_LO)
 8005bec:	4b88      	ldr	r3, [pc, #544]	; (8005e10 <computeRC+0x2f4>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b59      	cmp	r3, #89	; 0x59
 8005bf2:	d101      	bne.n	8005bf8 <computeRC+0xdc>
		{
			mwDisarm();
 8005bf4:	f7ff ff82 	bl	8005afc <mwDisarm>
		}
		if (i)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <computeRC+0xe8>
		{
			// writeEEPROM(1, true);
			rcDelayCommand = 0; // allow autorepetition
 8005bfe:	4b85      	ldr	r3, [pc, #532]	; (8005e14 <computeRC+0x2f8>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
		}
	}
	if(RC.rcCommand[AUX1] > 1800)
 8005c04:	4b81      	ldr	r3, [pc, #516]	; (8005e0c <computeRC+0x2f0>)
 8005c06:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8005c0a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005c0e:	dd0f      	ble.n	8005c30 <computeRC+0x114>
	{
		f.ANGLE_MODE = 0;
 8005c10:	4b81      	ldr	r3, [pc, #516]	; (8005e18 <computeRC+0x2fc>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	715a      	strb	r2, [r3, #5]
		f.HORIZON_MODE = 0;
 8005c16:	4b80      	ldr	r3, [pc, #512]	; (8005e18 <computeRC+0x2fc>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	719a      	strb	r2, [r3, #6]
		f.ACRO_MODE = 1;
 8005c1c:	4b7e      	ldr	r3, [pc, #504]	; (8005e18 <computeRC+0x2fc>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	71da      	strb	r2, [r3, #7]
		f.GPS_HOLD_MODE = 0;
 8005c22:	4b7d      	ldr	r3, [pc, #500]	; (8005e18 <computeRC+0x2fc>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	735a      	strb	r2, [r3, #13]
    rcOptions[BOXGPSHOLD] = 0;
 8005c28:	4b7c      	ldr	r3, [pc, #496]	; (8005e1c <computeRC+0x300>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	721a      	strb	r2, [r3, #8]
 8005c2e:	e02a      	b.n	8005c86 <computeRC+0x16a>
	}else if(RC.rcCommand[AUX1] > 1400 && RC.rcCommand[AUX1] < 1600)
 8005c30:	4b76      	ldr	r3, [pc, #472]	; (8005e0c <computeRC+0x2f0>)
 8005c32:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8005c36:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8005c3a:	dd15      	ble.n	8005c68 <computeRC+0x14c>
 8005c3c:	4b73      	ldr	r3, [pc, #460]	; (8005e0c <computeRC+0x2f0>)
 8005c3e:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8005c42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c46:	da0f      	bge.n	8005c68 <computeRC+0x14c>
	{
		f.HORIZON_MODE = 0;
 8005c48:	4b73      	ldr	r3, [pc, #460]	; (8005e18 <computeRC+0x2fc>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	719a      	strb	r2, [r3, #6]
		f.ANGLE_MODE = 1;
 8005c4e:	4b72      	ldr	r3, [pc, #456]	; (8005e18 <computeRC+0x2fc>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	715a      	strb	r2, [r3, #5]
		f.ACRO_MODE = 0;
 8005c54:	4b70      	ldr	r3, [pc, #448]	; (8005e18 <computeRC+0x2fc>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	71da      	strb	r2, [r3, #7]
		f.GPS_HOLD_MODE = 0;
 8005c5a:	4b6f      	ldr	r3, [pc, #444]	; (8005e18 <computeRC+0x2fc>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	735a      	strb	r2, [r3, #13]
		rcOptions[BOXGPSHOLD] = 0;
 8005c60:	4b6e      	ldr	r3, [pc, #440]	; (8005e1c <computeRC+0x300>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	721a      	strb	r2, [r3, #8]
 8005c66:	e00e      	b.n	8005c86 <computeRC+0x16a>
	}else {
		f.ACRO_MODE = 0;
 8005c68:	4b6b      	ldr	r3, [pc, #428]	; (8005e18 <computeRC+0x2fc>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	71da      	strb	r2, [r3, #7]
		f.ANGLE_MODE = 0;
 8005c6e:	4b6a      	ldr	r3, [pc, #424]	; (8005e18 <computeRC+0x2fc>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	715a      	strb	r2, [r3, #5]
		f.HORIZON_MODE = 0;
 8005c74:	4b68      	ldr	r3, [pc, #416]	; (8005e18 <computeRC+0x2fc>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	719a      	strb	r2, [r3, #6]
		f.GPS_HOLD_MODE = 1;
 8005c7a:	4b67      	ldr	r3, [pc, #412]	; (8005e18 <computeRC+0x2fc>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	735a      	strb	r2, [r3, #13]
		rcOptions[BOXGPSHOLD] = 1;
 8005c80:	4b66      	ldr	r3, [pc, #408]	; (8005e1c <computeRC+0x300>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	721a      	strb	r2, [r3, #8]
	}

	if(RC.rcCommand[GEAR] > 1400 && RC.rcCommand[GEAR] < 1600 && f.ARMED == 1)
 8005c86:	4b61      	ldr	r3, [pc, #388]	; (8005e0c <computeRC+0x2f0>)
 8005c88:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8005c8c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8005c90:	dd0c      	ble.n	8005cac <computeRC+0x190>
 8005c92:	4b5e      	ldr	r3, [pc, #376]	; (8005e0c <computeRC+0x2f0>)
 8005c94:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8005c98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c9c:	da06      	bge.n	8005cac <computeRC+0x190>
 8005c9e:	4b5e      	ldr	r3, [pc, #376]	; (8005e18 <computeRC+0x2fc>)
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d102      	bne.n	8005cac <computeRC+0x190>
	{
		Error.error = 5;
 8005ca6:	4b5e      	ldr	r3, [pc, #376]	; (8005e20 <computeRC+0x304>)
 8005ca8:	2205      	movs	r2, #5
 8005caa:	701a      	strb	r2, [r3, #0]
	}

	if(f.ANGLE_MODE || f.GPS_HOLD_MODE)
 8005cac:	4b5a      	ldr	r3, [pc, #360]	; (8005e18 <computeRC+0x2fc>)
 8005cae:	795b      	ldrb	r3, [r3, #5]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <computeRC+0x1a2>
 8005cb4:	4b58      	ldr	r3, [pc, #352]	; (8005e18 <computeRC+0x2fc>)
 8005cb6:	7b5b      	ldrb	r3, [r3, #13]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80b5 	beq.w	8005e28 <computeRC+0x30c>
	{
		RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 20), 1100, 1900, -30, 30); //0~250 left:0, right:250
 8005cbe:	4b53      	ldr	r3, [pc, #332]	; (8005e0c <computeRC+0x2f0>)
 8005cc0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cc4:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005cc8:	dd13      	ble.n	8005cf2 <computeRC+0x1d6>
 8005cca:	4b50      	ldr	r3, [pc, #320]	; (8005e0c <computeRC+0x2f0>)
 8005ccc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cd0:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	1a9b      	subs	r3, r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4a51      	ldr	r2, [pc, #324]	; (8005e24 <computeRC+0x308>)
 8005cde:	fb82 1203 	smull	r1, r2, r2, r3
 8005ce2:	1212      	asrs	r2, r2, #8
 8005ce4:	17db      	asrs	r3, r3, #31
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b1e      	subs	r3, #30
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	b21b      	sxth	r3, r3
 8005cf0:	e01a      	b.n	8005d28 <computeRC+0x20c>
 8005cf2:	4b46      	ldr	r3, [pc, #280]	; (8005e0c <computeRC+0x2f0>)
 8005cf4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cf8:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005cfc:	da13      	bge.n	8005d26 <computeRC+0x20a>
 8005cfe:	4b43      	ldr	r3, [pc, #268]	; (8005e0c <computeRC+0x2f0>)
 8005d00:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005d04:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005d08:	4613      	mov	r3, r2
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4a44      	ldr	r2, [pc, #272]	; (8005e24 <computeRC+0x308>)
 8005d12:	fb82 1203 	smull	r1, r2, r2, r3
 8005d16:	1212      	asrs	r2, r2, #8
 8005d18:	17db      	asrs	r3, r3, #31
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b1e      	subs	r3, #30
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	b21b      	sxth	r3, r3
 8005d24:	e000      	b.n	8005d28 <computeRC+0x20c>
 8005d26:	2300      	movs	r3, #0
 8005d28:	4a38      	ldr	r2, [pc, #224]	; (8005e0c <computeRC+0x2f0>)
 8005d2a:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
		RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 20), 1100, 1900, -30, 30); //0~250 rear:0, fornt:250
 8005d2e:	4b37      	ldr	r3, [pc, #220]	; (8005e0c <computeRC+0x2f0>)
 8005d30:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d34:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005d38:	dd13      	ble.n	8005d62 <computeRC+0x246>
 8005d3a:	4b34      	ldr	r3, [pc, #208]	; (8005e0c <computeRC+0x2f0>)
 8005d3c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d40:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005d44:	4613      	mov	r3, r2
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	1a9b      	subs	r3, r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4a35      	ldr	r2, [pc, #212]	; (8005e24 <computeRC+0x308>)
 8005d4e:	fb82 1203 	smull	r1, r2, r2, r3
 8005d52:	1212      	asrs	r2, r2, #8
 8005d54:	17db      	asrs	r3, r3, #31
 8005d56:	1a9b      	subs	r3, r3, r2
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	331e      	adds	r3, #30
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	b21b      	sxth	r3, r3
 8005d60:	e01a      	b.n	8005d98 <computeRC+0x27c>
 8005d62:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <computeRC+0x2f0>)
 8005d64:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d68:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005d6c:	da13      	bge.n	8005d96 <computeRC+0x27a>
 8005d6e:	4b27      	ldr	r3, [pc, #156]	; (8005e0c <computeRC+0x2f0>)
 8005d70:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d74:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005d78:	4613      	mov	r3, r2
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4a28      	ldr	r2, [pc, #160]	; (8005e24 <computeRC+0x308>)
 8005d82:	fb82 1203 	smull	r1, r2, r2, r3
 8005d86:	1212      	asrs	r2, r2, #8
 8005d88:	17db      	asrs	r3, r3, #31
 8005d8a:	1a9b      	subs	r3, r3, r2
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	331e      	adds	r3, #30
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	b21b      	sxth	r3, r3
 8005d94:	e000      	b.n	8005d98 <computeRC+0x27c>
 8005d96:	2300      	movs	r3, #0
 8005d98:	4a1c      	ldr	r2, [pc, #112]	; (8005e0c <computeRC+0x2f0>)
 8005d9a:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
		RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 20), 1100, 1900, -90, 90); //0~250 left:0, right:250
 8005d9e:	4b1b      	ldr	r3, [pc, #108]	; (8005e0c <computeRC+0x2f0>)
 8005da0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005da4:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005da8:	dd12      	ble.n	8005dd0 <computeRC+0x2b4>
 8005daa:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <computeRC+0x2f0>)
 8005dac:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005db0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005db4:	22b4      	movs	r2, #180	; 0xb4
 8005db6:	fb02 f303 	mul.w	r3, r2, r3
 8005dba:	4a1a      	ldr	r2, [pc, #104]	; (8005e24 <computeRC+0x308>)
 8005dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8005dc0:	1212      	asrs	r2, r2, #8
 8005dc2:	17db      	asrs	r3, r3, #31
 8005dc4:	1a9b      	subs	r3, r3, r2
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	335a      	adds	r3, #90	; 0x5a
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	b21b      	sxth	r3, r3
 8005dce:	e019      	b.n	8005e04 <computeRC+0x2e8>
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <computeRC+0x2f0>)
 8005dd2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005dd6:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005dda:	da12      	bge.n	8005e02 <computeRC+0x2e6>
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <computeRC+0x2f0>)
 8005dde:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005de2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005de6:	22b4      	movs	r2, #180	; 0xb4
 8005de8:	fb02 f303 	mul.w	r3, r2, r3
 8005dec:	4a0d      	ldr	r2, [pc, #52]	; (8005e24 <computeRC+0x308>)
 8005dee:	fb82 1203 	smull	r1, r2, r2, r3
 8005df2:	1212      	asrs	r2, r2, #8
 8005df4:	17db      	asrs	r3, r3, #31
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	335a      	adds	r3, #90	; 0x5a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	b21b      	sxth	r3, r3
 8005e00:	e000      	b.n	8005e04 <computeRC+0x2e8>
 8005e02:	2300      	movs	r3, #0
 8005e04:	4a01      	ldr	r2, [pc, #4]	; (8005e0c <computeRC+0x2f0>)
 8005e06:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
 8005e0a:	e0b8      	b.n	8005f7e <computeRC+0x462>
 8005e0c:	20000d40 	.word	0x20000d40
 8005e10:	20000334 	.word	0x20000334
 8005e14:	20000335 	.word	0x20000335
 8005e18:	20000ed4 	.word	0x20000ed4
 8005e1c:	20000d34 	.word	0x20000d34
 8005e20:	20000acc 	.word	0x20000acc
 8005e24:	51eb851f 	.word	0x51eb851f
	}else if(f.ACRO_MODE){
 8005e28:	4b89      	ldr	r3, [pc, #548]	; (8006050 <computeRC+0x534>)
 8005e2a:	79db      	ldrb	r3, [r3, #7]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80a6 	beq.w	8005f7e <computeRC+0x462>
		RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 20), 1100, 1900, -150, 150);
 8005e32:	4b88      	ldr	r3, [pc, #544]	; (8006054 <computeRC+0x538>)
 8005e34:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e38:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005e3c:	dd13      	ble.n	8005e66 <computeRC+0x34a>
 8005e3e:	4b85      	ldr	r3, [pc, #532]	; (8006054 <computeRC+0x538>)
 8005e40:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e44:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005e48:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e4c:	fb02 f303 	mul.w	r3, r2, r3
 8005e50:	4a81      	ldr	r2, [pc, #516]	; (8006058 <computeRC+0x53c>)
 8005e52:	fb82 1203 	smull	r1, r2, r2, r3
 8005e56:	1212      	asrs	r2, r2, #8
 8005e58:	17db      	asrs	r3, r3, #31
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b96      	subs	r3, #150	; 0x96
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	b21b      	sxth	r3, r3
 8005e64:	e01a      	b.n	8005e9c <computeRC+0x380>
 8005e66:	4b7b      	ldr	r3, [pc, #492]	; (8006054 <computeRC+0x538>)
 8005e68:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e6c:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005e70:	da13      	bge.n	8005e9a <computeRC+0x37e>
 8005e72:	4b78      	ldr	r3, [pc, #480]	; (8006054 <computeRC+0x538>)
 8005e74:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e78:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005e7c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e80:	fb02 f303 	mul.w	r3, r2, r3
 8005e84:	4a74      	ldr	r2, [pc, #464]	; (8006058 <computeRC+0x53c>)
 8005e86:	fb82 1203 	smull	r1, r2, r2, r3
 8005e8a:	1212      	asrs	r2, r2, #8
 8005e8c:	17db      	asrs	r3, r3, #31
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b96      	subs	r3, #150	; 0x96
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	b21b      	sxth	r3, r3
 8005e98:	e000      	b.n	8005e9c <computeRC+0x380>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4a6d      	ldr	r2, [pc, #436]	; (8006054 <computeRC+0x538>)
 8005e9e:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
		RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 20), 1100, 1900, -150, 150);
 8005ea2:	4b6c      	ldr	r3, [pc, #432]	; (8006054 <computeRC+0x538>)
 8005ea4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005ea8:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005eac:	dd13      	ble.n	8005ed6 <computeRC+0x3ba>
 8005eae:	4b69      	ldr	r3, [pc, #420]	; (8006054 <computeRC+0x538>)
 8005eb0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005eb4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005eb8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ebc:	fb02 f303 	mul.w	r3, r2, r3
 8005ec0:	4a65      	ldr	r2, [pc, #404]	; (8006058 <computeRC+0x53c>)
 8005ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8005ec6:	1212      	asrs	r2, r2, #8
 8005ec8:	17db      	asrs	r3, r3, #31
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3396      	adds	r3, #150	; 0x96
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	b21b      	sxth	r3, r3
 8005ed4:	e01a      	b.n	8005f0c <computeRC+0x3f0>
 8005ed6:	4b5f      	ldr	r3, [pc, #380]	; (8006054 <computeRC+0x538>)
 8005ed8:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005edc:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005ee0:	da13      	bge.n	8005f0a <computeRC+0x3ee>
 8005ee2:	4b5c      	ldr	r3, [pc, #368]	; (8006054 <computeRC+0x538>)
 8005ee4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005ee8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005eec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	4a58      	ldr	r2, [pc, #352]	; (8006058 <computeRC+0x53c>)
 8005ef6:	fb82 1203 	smull	r1, r2, r2, r3
 8005efa:	1212      	asrs	r2, r2, #8
 8005efc:	17db      	asrs	r3, r3, #31
 8005efe:	1a9b      	subs	r3, r3, r2
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3396      	adds	r3, #150	; 0x96
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	b21b      	sxth	r3, r3
 8005f08:	e000      	b.n	8005f0c <computeRC+0x3f0>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4a51      	ldr	r2, [pc, #324]	; (8006054 <computeRC+0x538>)
 8005f0e:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
		RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 20), 1100, 1900, -90, 90);
 8005f12:	4b50      	ldr	r3, [pc, #320]	; (8006054 <computeRC+0x538>)
 8005f14:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f18:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005f1c:	dd12      	ble.n	8005f44 <computeRC+0x428>
 8005f1e:	4b4d      	ldr	r3, [pc, #308]	; (8006054 <computeRC+0x538>)
 8005f20:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f24:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005f28:	22b4      	movs	r2, #180	; 0xb4
 8005f2a:	fb02 f303 	mul.w	r3, r2, r3
 8005f2e:	4a4a      	ldr	r2, [pc, #296]	; (8006058 <computeRC+0x53c>)
 8005f30:	fb82 1203 	smull	r1, r2, r2, r3
 8005f34:	1212      	asrs	r2, r2, #8
 8005f36:	17db      	asrs	r3, r3, #31
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	335a      	adds	r3, #90	; 0x5a
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	b21b      	sxth	r3, r3
 8005f42:	e019      	b.n	8005f78 <computeRC+0x45c>
 8005f44:	4b43      	ldr	r3, [pc, #268]	; (8006054 <computeRC+0x538>)
 8005f46:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f4a:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005f4e:	da12      	bge.n	8005f76 <computeRC+0x45a>
 8005f50:	4b40      	ldr	r3, [pc, #256]	; (8006054 <computeRC+0x538>)
 8005f52:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f56:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005f5a:	22b4      	movs	r2, #180	; 0xb4
 8005f5c:	fb02 f303 	mul.w	r3, r2, r3
 8005f60:	4a3d      	ldr	r2, [pc, #244]	; (8006058 <computeRC+0x53c>)
 8005f62:	fb82 1203 	smull	r1, r2, r2, r3
 8005f66:	1212      	asrs	r2, r2, #8
 8005f68:	17db      	asrs	r3, r3, #31
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	335a      	adds	r3, #90	; 0x5a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	b21b      	sxth	r3, r3
 8005f74:	e000      	b.n	8005f78 <computeRC+0x45c>
 8005f76:	2300      	movs	r3, #0
 8005f78:	4a36      	ldr	r2, [pc, #216]	; (8006054 <computeRC+0x538>)
 8005f7a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
	}
	RC.rcCommand[THROTTLE] = map(zofs(RC.rcADC[THROTTLE], 1100, 20), 1100, 1900, 2250, 4000);//2250/4000
 8005f7e:	4b35      	ldr	r3, [pc, #212]	; (8006054 <computeRC+0x538>)
 8005f80:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005f84:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8005f88:	dd14      	ble.n	8005fb4 <computeRC+0x498>
 8005f8a:	4b32      	ldr	r3, [pc, #200]	; (8006054 <computeRC+0x538>)
 8005f8c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005f90:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005f94:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8005f98:	fb02 f303 	mul.w	r3, r2, r3
 8005f9c:	4a2e      	ldr	r2, [pc, #184]	; (8006058 <computeRC+0x53c>)
 8005f9e:	fb82 1203 	smull	r1, r2, r2, r3
 8005fa2:	1212      	asrs	r2, r2, #8
 8005fa4:	17db      	asrs	r3, r3, #31
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f603 03ca 	addw	r3, r3, #2250	; 0x8ca
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	b21b      	sxth	r3, r3
 8005fb2:	e01c      	b.n	8005fee <computeRC+0x4d2>
 8005fb4:	4b27      	ldr	r3, [pc, #156]	; (8006054 <computeRC+0x538>)
 8005fb6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005fba:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8005fbe:	da14      	bge.n	8005fea <computeRC+0x4ce>
 8005fc0:	4b24      	ldr	r3, [pc, #144]	; (8006054 <computeRC+0x538>)
 8005fc2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005fc6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005fca:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	4a21      	ldr	r2, [pc, #132]	; (8006058 <computeRC+0x53c>)
 8005fd4:	fb82 1203 	smull	r1, r2, r2, r3
 8005fd8:	1212      	asrs	r2, r2, #8
 8005fda:	17db      	asrs	r3, r3, #31
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f603 03ca 	addw	r3, r3, #2250	; 0x8ca
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	b21b      	sxth	r3, r3
 8005fe8:	e001      	b.n	8005fee <computeRC+0x4d2>
 8005fea:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8005fee:	4a19      	ldr	r2, [pc, #100]	; (8006054 <computeRC+0x538>)
 8005ff0:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
	RC.rcCommand[GEAR]     = RC.rcADC[GEAR];
 8005ff4:	4b17      	ldr	r3, [pc, #92]	; (8006054 <computeRC+0x538>)
 8005ff6:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8005ffa:	4b16      	ldr	r3, [pc, #88]	; (8006054 <computeRC+0x538>)
 8005ffc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	RC.rcCommand[AUX1]     = RC.rcADC[AUX1];
 8006000:	4b14      	ldr	r3, [pc, #80]	; (8006054 <computeRC+0x538>)
 8006002:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 8006006:	4b13      	ldr	r3, [pc, #76]	; (8006054 <computeRC+0x538>)
 8006008:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	if(RC.rcCommand[GEAR] > 1500 && !f.HEADFREE_MODE)
 800600c:	4b11      	ldr	r3, [pc, #68]	; (8006054 <computeRC+0x538>)
 800600e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8006012:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006016:	4293      	cmp	r3, r2
 8006018:	dd07      	ble.n	800602a <computeRC+0x50e>
 800601a:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <computeRC+0x534>)
 800601c:	7b9b      	ldrb	r3, [r3, #14]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <computeRC+0x50e>
	{
		f.HEADFREE_MODE = 1;
 8006022:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <computeRC+0x534>)
 8006024:	2201      	movs	r2, #1
 8006026:	739a      	strb	r2, [r3, #14]
	}else if(RC.rcCommand[GEAR] < 1500 && f.HEADFREE_MODE)
	{
		f.HEADFREE_MODE = 0;
	}
}
 8006028:	e00d      	b.n	8006046 <computeRC+0x52a>
	}else if(RC.rcCommand[GEAR] < 1500 && f.HEADFREE_MODE)
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <computeRC+0x538>)
 800602c:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8006030:	f240 52db 	movw	r2, #1499	; 0x5db
 8006034:	4293      	cmp	r3, r2
 8006036:	dc06      	bgt.n	8006046 <computeRC+0x52a>
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <computeRC+0x534>)
 800603a:	7b9b      	ldrb	r3, [r3, #14]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <computeRC+0x52a>
		f.HEADFREE_MODE = 0;
 8006040:	4b03      	ldr	r3, [pc, #12]	; (8006050 <computeRC+0x534>)
 8006042:	2200      	movs	r2, #0
 8006044:	739a      	strb	r2, [r3, #14]
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000ed4 	.word	0x20000ed4
 8006054:	20000d40 	.word	0x20000d40
 8006058:	51eb851f 	.word	0x51eb851f

0800605c <QueueCreate>:
{

}

bool QueueCreate(Queue_t *Q, uint8_t *Q_buf, uint32_t length)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8006068:	2301      	movs	r3, #1
 800606a:	75fb      	strb	r3, [r7, #23]

	Q->buffer = Q_buf;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	601a      	str	r2, [r3, #0]
	Q->head = 0;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	711a      	strb	r2, [r3, #4]
	Q->tail = 0;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	715a      	strb	r2, [r3, #5]
	Q->size = MAX_SIZE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	22ff      	movs	r2, #255	; 0xff
 8006082:	719a      	strb	r2, [r3, #6]
	Q->temp = 0;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	71da      	strb	r2, [r3, #7]
	Q->cnt = 0;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	609a      	str	r2, [r3, #8]

	return ret;
 8006090:	7dfb      	ldrb	r3, [r7, #23]
}
 8006092:	4618      	mov	r0, r3
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <Q_empty>:
{
	if((Q->head+1)%MAX_SIZE == Q->tail){
	   return true;
	} return false;
}
uint8_t Q_empty(Queue_t *Q){
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
	if(Q->head == Q->tail){
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	791b      	ldrb	r3, [r3, #4]
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	795b      	ldrb	r3, [r3, #5]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d101      	bne.n	80060b8 <Q_empty+0x1c>
		return true;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <Q_empty+0x1e>
	} return false;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <Q_read>:
		Q->head = (Q->head+1) % MAX_SIZE;
	}
	return true;
}

bool Q_read(Queue_t *Q, uint8_t *p_data, uint32_t length){
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
	if(Q_empty(Q)){
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff ffe3 	bl	800609c <Q_empty>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <Q_read+0x1c>
		return false;
 80060dc:	2300      	movs	r3, #0
 80060de:	e028      	b.n	8006132 <Q_read+0x6e>
	}
	for (int i=0; i<length; i++)
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	e020      	b.n	8006128 <Q_read+0x64>
	{
		p_data[i] = Q->buffer[Q->tail];
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	7952      	ldrb	r2, [r2, #5]
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	441a      	add	r2, r3
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	440b      	add	r3, r1
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]
		Q->tail = (Q->tail+1) % MAX_SIZE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	795b      	ldrb	r3, [r3, #5]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	4b0d      	ldr	r3, [pc, #52]	; (800613c <Q_read+0x78>)
 8006108:	fb83 1302 	smull	r1, r3, r3, r2
 800610c:	4413      	add	r3, r2
 800610e:	11d9      	asrs	r1, r3, #7
 8006110:	17d3      	asrs	r3, r2, #31
 8006112:	1ac9      	subs	r1, r1, r3
 8006114:	460b      	mov	r3, r1
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	1a5b      	subs	r3, r3, r1
 800611a:	1ad1      	subs	r1, r2, r3
 800611c:	b2ca      	uxtb	r2, r1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	715a      	strb	r2, [r3, #5]
	for (int i=0; i<length; i++)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	3301      	adds	r3, #1
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	d8da      	bhi.n	80060e6 <Q_read+0x22>
	}

	return true;
 8006130:	2301      	movs	r3, #1
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	80808081 	.word	0x80808081

08006140 <QueueAvailable>:

uint32_t QueueAvailable(Queue_t *Q)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t length;

  length = (Q->head - Q->tail) % Q->size;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	791b      	ldrb	r3, [r3, #4]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	795b      	ldrb	r3, [r3, #5]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	7992      	ldrb	r2, [r2, #6]
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	fb93 f1f2 	sdiv	r1, r3, r2
 8006162:	fb02 f201 	mul.w	r2, r2, r1
 8006166:	1a9b      	subs	r3, r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  return length;
 800616a:	68fb      	ldr	r3, [r7, #12]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr
	...

08006178 <getMres>:

// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
uint8_t Mmode = M_100HZ;

void getMres()
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
	switch (Mscale)
 800617c:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <getMres+0x2c>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <getMres+0x12>
 8006184:	2b01      	cmp	r3, #1
 8006186:	d004      	beq.n	8006192 <getMres+0x1a>
			break;
		case MFS_16BITS:
			mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
			break;
	}
}
 8006188:	e007      	b.n	800619a <getMres+0x22>
			mRes = 10.0f * 4912.0f / 8190.0f; // Proper scale to return milliGauss
 800618a:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <getMres+0x30>)
 800618c:	4a07      	ldr	r2, [pc, #28]	; (80061ac <getMres+0x34>)
 800618e:	601a      	str	r2, [r3, #0]
			break;
 8006190:	e003      	b.n	800619a <getMres+0x22>
			mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
 8006192:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <getMres+0x30>)
 8006194:	4a06      	ldr	r2, [pc, #24]	; (80061b0 <getMres+0x38>)
 8006196:	601a      	str	r2, [r3, #0]
			break;
 8006198:	bf00      	nop
}
 800619a:	bf00      	nop
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20000010 	.word	0x20000010
 80061a8:	20000ad8 	.word	0x20000ad8
 80061ac:	40bfebff 	.word	0x40bfebff
 80061b0:	3fbfebff 	.word	0x3fbfebff

080061b4 <getGres>:

void getGres()
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
	switch (Gscale)
 80061b8:	4b11      	ldr	r3, [pc, #68]	; (8006200 <getGres+0x4c>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d81b      	bhi.n	80061f8 <getGres+0x44>
 80061c0:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <getGres+0x14>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	080061d9 	.word	0x080061d9
 80061cc:	080061e1 	.word	0x080061e1
 80061d0:	080061e9 	.word	0x080061e9
 80061d4:	080061f1 	.word	0x080061f1
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS (11).
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
		// 2-bit value:
		case GFS_250DPS:
			gRes = 250.0f / 32768.0f;
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <getGres+0x50>)
 80061da:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <getGres+0x54>)
 80061dc:	601a      	str	r2, [r3, #0]
			break;
 80061de:	e00b      	b.n	80061f8 <getGres+0x44>
		case GFS_500DPS:
			gRes = 500.0f / 32768.0f;
 80061e0:	4b08      	ldr	r3, [pc, #32]	; (8006204 <getGres+0x50>)
 80061e2:	4a0a      	ldr	r2, [pc, #40]	; (800620c <getGres+0x58>)
 80061e4:	601a      	str	r2, [r3, #0]
			break;
 80061e6:	e007      	b.n	80061f8 <getGres+0x44>
		case GFS_1000DPS:
			gRes = 1000.0f / 32768.0f;
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <getGres+0x50>)
 80061ea:	4a09      	ldr	r2, [pc, #36]	; (8006210 <getGres+0x5c>)
 80061ec:	601a      	str	r2, [r3, #0]
			break;
 80061ee:	e003      	b.n	80061f8 <getGres+0x44>
		case GFS_2000DPS:
			gRes = 2000.0f / 32768.0f;
 80061f0:	4b04      	ldr	r3, [pc, #16]	; (8006204 <getGres+0x50>)
 80061f2:	4a08      	ldr	r2, [pc, #32]	; (8006214 <getGres+0x60>)
 80061f4:	601a      	str	r2, [r3, #0]
			break;
 80061f6:	bf00      	nop
	}
}
 80061f8:	bf00      	nop
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr
 8006200:	2000000e 	.word	0x2000000e
 8006204:	20000ad4 	.word	0x20000ad4
 8006208:	3bfa0000 	.word	0x3bfa0000
 800620c:	3c7a0000 	.word	0x3c7a0000
 8006210:	3cfa0000 	.word	0x3cfa0000
 8006214:	3d7a0000 	.word	0x3d7a0000

08006218 <getAres>:

void getAres()
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
	switch (Ascale)
 800621c:	4b13      	ldr	r3, [pc, #76]	; (800626c <getAres+0x54>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b03      	cmp	r3, #3
 8006222:	d81f      	bhi.n	8006264 <getAres+0x4c>
 8006224:	a201      	add	r2, pc, #4	; (adr r2, 800622c <getAres+0x14>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	0800623d 	.word	0x0800623d
 8006230:	08006247 	.word	0x08006247
 8006234:	08006251 	.word	0x08006251
 8006238:	0800625b 	.word	0x0800625b
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
		// 2-bit value:
		case AFS_2G:
			aRes = 2.0f / 32768.0f;
 800623c:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <getAres+0x58>)
 800623e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8006242:	601a      	str	r2, [r3, #0]
			break;
 8006244:	e00e      	b.n	8006264 <getAres+0x4c>
		case AFS_4G:
			aRes = 4.0f / 32768.0f;
 8006246:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <getAres+0x58>)
 8006248:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800624c:	601a      	str	r2, [r3, #0]
			break;
 800624e:	e009      	b.n	8006264 <getAres+0x4c>
		case AFS_8G:
			aRes = 8.0f / 32768.0f;
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <getAres+0x58>)
 8006252:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8006256:	601a      	str	r2, [r3, #0]
			break;
 8006258:	e004      	b.n	8006264 <getAres+0x4c>
		case AFS_16G:
			aRes = 16.0f / 32768.0f;
 800625a:	4b05      	ldr	r3, [pc, #20]	; (8006270 <getAres+0x58>)
 800625c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8006260:	601a      	str	r2, [r3, #0]
			break;
 8006262:	bf00      	nop
	}
}
 8006264:	bf00      	nop
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr
 800626c:	2000000f 	.word	0x2000000f
 8006270:	20000ac8 	.word	0x20000ac8

08006274 <MPU9250_Init>:

bool MPU9250_Init()
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af02      	add	r7, sp, #8
	bool ret = true;
 800627a:	2301      	movs	r3, #1
 800627c:	71fb      	strb	r3, [r7, #7]

	uint8_t whoami = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	71bb      	strb	r3, [r7, #6]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 8006282:	2301      	movs	r3, #1
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	4b73      	ldr	r3, [pc, #460]	; (8006454 <MPU9250_Init+0x1e0>)
 8006288:	2201      	movs	r2, #1
 800628a:	2175      	movs	r1, #117	; 0x75
 800628c:	20d2      	movs	r0, #210	; 0xd2
 800628e:	f004 ffd5 	bl	800b23c <I2C_ByteRead>
	whoami = rawADC[0];
 8006292:	4b70      	ldr	r3, [pc, #448]	; (8006454 <MPU9250_Init+0x1e0>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	71bb      	strb	r3, [r7, #6]
#ifdef debug
	logPrintf("I AM 0x%x\r\n", whoami);
	logPrintf("I SHOULD BE 0x71\r\n");
#endif
	if(whoami == 0x71)
 8006298:	79bb      	ldrb	r3, [r7, #6]
 800629a:	2b71      	cmp	r3, #113	; 0x71
 800629c:	f040 80d0 	bne.w	8006440 <MPU9250_Init+0x1cc>
	{
#ifdef debug
		logPrintf("MPU-9250 Init Start (9-DOF 16-bit motion sensor)\r\nMPU-9250 SelfTest Start\r\n");
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	2308      	movs	r3, #8
 80062a6:	2207      	movs	r2, #7
 80062a8:	216b      	movs	r1, #107	; 0x6b
 80062aa:	20d2      	movs	r0, #210	; 0xd2
 80062ac:	f004 ff3e 	bl	800b12c <I2C_ByteWrite>
		HAL_Delay(50);
 80062b0:	2032      	movs	r0, #50	; 0x32
 80062b2:	f006 fa63 	bl	800c77c <HAL_Delay>
		MPU9250SelfTest(SelfTest);
 80062b6:	4868      	ldr	r0, [pc, #416]	; (8006458 <MPU9250_Init+0x1e4>)
 80062b8:	f001 f972 	bl	80075a0 <MPU9250SelfTest>
		logPrintf(" z-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[5]);
		HAL_Delay(100); // for stability

		logPrintf("MPU-9250 Calibration Start\r\n");
#endif
		calibrateMPU9250(gyroBias, accBias);
 80062bc:	4967      	ldr	r1, [pc, #412]	; (800645c <MPU9250_Init+0x1e8>)
 80062be:	4868      	ldr	r0, [pc, #416]	; (8006460 <MPU9250_Init+0x1ec>)
 80062c0:	f000 fe08 	bl	8006ed4 <calibrateMPU9250>
		logPrintf(" %.2f   %.2f   %.2f o/s\r\n", gyroBias[0], gyroBias[1], gyroBias[2]);
		HAL_Delay(100); // for stability
#endif

		// ACC Gyro_Init
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 80062c4:	2300      	movs	r3, #0
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	2308      	movs	r3, #8
 80062ca:	2207      	movs	r2, #7
 80062cc:	216b      	movs	r1, #107	; 0x6b
 80062ce:	20d2      	movs	r0, #210	; 0xd2
 80062d0:	f004 ff2c 	bl	800b12c <I2C_ByteWrite>
		HAL_Delay(100); // for stability
 80062d4:	2064      	movs	r0, #100	; 0x64
 80062d6:	f006 fa51 	bl	800c77c <HAL_Delay>
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001;
 80062da:	2301      	movs	r3, #1
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	2308      	movs	r3, #8
 80062e0:	2207      	movs	r2, #7
 80062e2:	216b      	movs	r1, #107	; 0x6b
 80062e4:	20d2      	movs	r0, #210	; 0xd2
 80062e6:	f004 ff21 	bl	800b12c <I2C_ByteWrite>
		HAL_Delay(200); // for stability
 80062ea:	20c8      	movs	r0, #200	; 0xc8
 80062ec:	f006 fa46 	bl	800c77c <HAL_Delay>
		//I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 5, 6, 0x00);
		//HAL_Delay(100);
		//I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 4, 2, MPU9250_GYRO_FS_2000);
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, MPU9250_DLPF_BW_42); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 80062f0:	2303      	movs	r3, #3
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2308      	movs	r3, #8
 80062f6:	2207      	movs	r2, #7
 80062f8:	211a      	movs	r1, #26
 80062fa:	20d2      	movs	r0, #210	; 0xd2
 80062fc:	f004 ff16 	bl	800b12c <I2C_ByteWrite>
		HAL_Delay(100);
 8006300:	2064      	movs	r0, #100	; 0x64
 8006302:	f006 fa3b 	bl	800c77c <HAL_Delay>

		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x04);  //0x00 SMPLRT_DIV    -- SMPLRT_DIV = 0  Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
 8006306:	2304      	movs	r3, #4
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	2308      	movs	r3, #8
 800630c:	2207      	movs	r2, #7
 800630e:	2119      	movs	r1, #25
 8006310:	20d2      	movs	r0, #210	; 0xd2
 8006312:	f004 ff0b 	bl	800b12c <I2C_ByteWrite>
		HAL_Delay(100);
 8006316:	2064      	movs	r0, #100	; 0x64
 8006318:	f006 fa30 	bl	800c77c <HAL_Delay>

		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 1, rawADC, 1);
 800631c:	2301      	movs	r3, #1
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	4b4c      	ldr	r3, [pc, #304]	; (8006454 <MPU9250_Init+0x1e0>)
 8006322:	2201      	movs	r2, #1
 8006324:	211b      	movs	r1, #27
 8006326:	20d2      	movs	r0, #210	; 0xd2
 8006328:	f004 ff88 	bl	800b23c <I2C_ByteRead>
		uint8_t c = rawADC[0];
 800632c:	4b49      	ldr	r3, [pc, #292]	; (8006454 <MPU9250_Init+0x1e0>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	717b      	strb	r3, [r7, #5]
		// c = c & ~0xE0; // Clear self-test bits [7:5]
		c = c & ~0x02; // Clear Fchoice bits [1:0]
 8006332:	797b      	ldrb	r3, [r7, #5]
 8006334:	f023 0302 	bic.w	r3, r3, #2
 8006338:	717b      	strb	r3, [r7, #5]
		c = c & ~0x18; // Clear AFS bits [4:3]
 800633a:	797b      	ldrb	r3, [r7, #5]
 800633c:	f023 0318 	bic.w	r3, r3, #24
 8006340:	717b      	strb	r3, [r7, #5]
		c = c | Gscale << 3; // Set full scale range for the gyro
 8006342:	4b48      	ldr	r3, [pc, #288]	; (8006464 <MPU9250_Init+0x1f0>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	b25a      	sxtb	r2, r3
 800634a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800634e:	4313      	orrs	r3, r2
 8006350:	b25b      	sxtb	r3, r3
 8006352:	717b      	strb	r3, [r7, #5]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, rawADC[0] & ~0x18); // Clear AFS bits [4:3]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, rawADC[0] | (MPU9250_GYRO_FS_250<<3)); //GYRO_CONFIG   -- FS_SEL = 2: Full scale set to 1000 deg/sec
#ifdef debug
		logPrintf(" GYRO : %d \r\n", c);
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, c);
 8006354:	797b      	ldrb	r3, [r7, #5]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	2308      	movs	r3, #8
 800635a:	2207      	movs	r2, #7
 800635c:	211b      	movs	r1, #27
 800635e:	20d2      	movs	r0, #210	; 0xd2
 8006360:	f004 fee4 	bl	800b12c <I2C_ByteWrite>
		//	  HAL_Delay(100);

		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 1, rawADC, 1);
 8006364:	2301      	movs	r3, #1
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	4b3a      	ldr	r3, [pc, #232]	; (8006454 <MPU9250_Init+0x1e0>)
 800636a:	2201      	movs	r2, #1
 800636c:	211c      	movs	r1, #28
 800636e:	20d2      	movs	r0, #210	; 0xd2
 8006370:	f004 ff64 	bl	800b23c <I2C_ByteRead>
		c = rawADC[0];
 8006374:	4b37      	ldr	r3, [pc, #220]	; (8006454 <MPU9250_Init+0x1e0>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	717b      	strb	r3, [r7, #5]
		// c = c & ~0xE0; // Clear self-test bits [7:5]
		c = c & ~0x18;  // Clear AFS bits [4:3]
 800637a:	797b      	ldrb	r3, [r7, #5]
 800637c:	f023 0318 	bic.w	r3, r3, #24
 8006380:	717b      	strb	r3, [r7, #5]
		c = c | Ascale << 3; // Set full scale range for the accelerometer
 8006382:	4b39      	ldr	r3, [pc, #228]	; (8006468 <MPU9250_Init+0x1f4>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	b25a      	sxtb	r2, r3
 800638a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800638e:	4313      	orrs	r3, r2
 8006390:	b25b      	sxtb	r3, r3
 8006392:	717b      	strb	r3, [r7, #5]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, rawADC[0] & ~0x18); // Clear AFS bits [4:3]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, rawADC[0] | (MPU9250_ACCEL_FS_2<<3)); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
#ifdef debug
		logPrintf(" ACEL : %d \r\n", c);
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, c);
 8006394:	797b      	ldrb	r3, [r7, #5]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	2308      	movs	r3, #8
 800639a:	2207      	movs	r2, #7
 800639c:	211c      	movs	r1, #28
 800639e:	20d2      	movs	r0, #210	; 0xd2
 80063a0:	f004 fec4 	bl	800b12c <I2C_ByteWrite>
		//	  HAL_Delay(100);

		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 1, rawADC, 1);
 80063a4:	2301      	movs	r3, #1
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	4b2a      	ldr	r3, [pc, #168]	; (8006454 <MPU9250_Init+0x1e0>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	211d      	movs	r1, #29
 80063ae:	20d2      	movs	r0, #210	; 0xd2
 80063b0:	f004 ff44 	bl	800b23c <I2C_ByteRead>
		c = rawADC[0];
 80063b4:	4b27      	ldr	r3, [pc, #156]	; (8006454 <MPU9250_Init+0x1e0>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	717b      	strb	r3, [r7, #5]
		c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80063ba:	797b      	ldrb	r3, [r7, #5]
 80063bc:	f023 030f 	bic.w	r3, r3, #15
 80063c0:	717b      	strb	r3, [r7, #5]
		c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80063c2:	797b      	ldrb	r3, [r7, #5]
 80063c4:	f043 0303 	orr.w	r3, r3, #3
 80063c8:	717b      	strb	r3, [r7, #5]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, rawADC[0] & ~0x0F);// Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, rawADC[0] | 0x03);// Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
#ifdef debug
		logPrintf(" ACEL2 : %d \r\n", c);
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, c);
 80063ca:	797b      	ldrb	r3, [r7, #5]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	2308      	movs	r3, #8
 80063d0:	2207      	movs	r2, #7
 80063d2:	211d      	movs	r1, #29
 80063d4:	20d2      	movs	r0, #210	; 0xd2
 80063d6:	f004 fea9 	bl	800b12c <I2C_ByteWrite>
		//		HAL_Delay(100);
		//note: something seems to be wrong in the spec here. With AFS=2 1G = 4096 but according to my measurement: 1G=2048 (and 2048/8 = 256)
		//confirmed here: http://www.multiwii.com/forum/viewtopic.php?f=8&t=1080&start=10#p7480

		// I2C_BitWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_PIN_CFG, MPU9250_INTCFG_I2C_BYPASS_EN_BIT, ENABLE);  // enable I2C bypass for AUX I2C
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_PIN_CFG, 7, 8, 0x22);
 80063da:	2322      	movs	r3, #34	; 0x22
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	2308      	movs	r3, #8
 80063e0:	2207      	movs	r2, #7
 80063e2:	2137      	movs	r1, #55	; 0x37
 80063e4:	20d2      	movs	r0, #210	; 0xd2
 80063e6:	f004 fea1 	bl	800b12c <I2C_ByteWrite>
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x01);
 80063ea:	2301      	movs	r3, #1
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	2308      	movs	r3, #8
 80063f0:	2207      	movs	r2, #7
 80063f2:	2138      	movs	r1, #56	; 0x38
 80063f4:	20d2      	movs	r0, #210	; 0xd2
 80063f6:	f004 fe99 	bl	800b12c <I2C_ByteWrite>

		//MPU9150_I2C_BitWrite(MPU9150_Address, MPU6050_RA_INT_PIN_CFG, MPU6050_INTERRUPT_DATA_RDY_BIT, ENABLE);
		//MPU9150_I2C_BitWrite(MPU9150_Address, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, ENABLE);
		HAL_Delay(100); // for stability
 80063fa:	2064      	movs	r0, #100	; 0x64
 80063fc:	f006 f9be 	bl	800c77c <HAL_Delay>

		//Compass_Init
#ifdef debug
		logPrintf("AK8963 Init Start!\r\n");
#endif
		I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, WHO_AM_I_AK8963, 1, rawADC, 1);
 8006400:	2301      	movs	r3, #1
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	4b13      	ldr	r3, [pc, #76]	; (8006454 <MPU9250_Init+0x1e0>)
 8006406:	2201      	movs	r2, #1
 8006408:	2100      	movs	r1, #0
 800640a:	2018      	movs	r0, #24
 800640c:	f004 ff16 	bl	800b23c <I2C_ByteRead>
		whoami = rawADC[0];
 8006410:	4b10      	ldr	r3, [pc, #64]	; (8006454 <MPU9250_Init+0x1e0>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	71bb      	strb	r3, [r7, #6]
		logPrintf("I AM 0x%x\r\n", whoami);
		logPrintf("I SHOULD BE 0x48\r\n");
		logPrintf("AK8963 Init (Compass sensor)\r\n");
		HAL_Delay(100); // for stability
#endif
		initAK8963(magCalibration);
 8006416:	4815      	ldr	r0, [pc, #84]	; (800646c <MPU9250_Init+0x1f8>)
 8006418:	f001 f830 	bl	800747c <initAK8963>
		HAL_Delay(100); // for stability
 800641c:	2064      	movs	r0, #100	; 0x64
 800641e:	f006 f9ad 	bl	800c77c <HAL_Delay>

		getAres();
 8006422:	f7ff fef9 	bl	8006218 <getAres>
		getGres();
 8006426:	f7ff fec5 	bl	80061b4 <getGres>
		getMres();
 800642a:	f7ff fea5 	bl	8006178 <getMres>
 800642e:	e00b      	b.n	8006448 <MPU9250_Init+0x1d4>
		logPrintf("Could not connect to MPU9250: %#x\r\n", whoami);
		logPrintf("Communication failed, abort!\r\n");
#endif
		while (Error.error !=0)
		{
			Error.error = 1;
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <MPU9250_Init+0x1fc>)
 8006432:	2201      	movs	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
			error_signal();
 8006436:	f7fd fc81 	bl	8003d3c <error_signal>
			HAL_Delay(4);
 800643a:	2004      	movs	r0, #4
 800643c:	f006 f99e 	bl	800c77c <HAL_Delay>
		while (Error.error !=0)
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <MPU9250_Init+0x1fc>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1f3      	bne.n	8006430 <MPU9250_Init+0x1bc>
		}
	}
	return ret;
 8006448:	79fb      	ldrb	r3, [r7, #7]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000f0c 	.word	0x20000f0c
 8006458:	20000350 	.word	0x20000350
 800645c:	20000374 	.word	0x20000374
 8006460:	20000368 	.word	0x20000368
 8006464:	2000000e 	.word	0x2000000e
 8006468:	2000000f 	.word	0x2000000f
 800646c:	20000338 	.word	0x20000338
 8006470:	20000acc 	.word	0x20000acc

08006474 <Calibrate_gyro>:

void Calibrate_gyro(void)
{
 8006474:	b5b0      	push	{r4, r5, r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
	int cal_int = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
	uint8_t axis = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	70fb      	strb	r3, [r7, #3]

	for (cal_int = 0; cal_int < 2000; cal_int ++)
 8006482:	2300      	movs	r3, #0
 8006484:	607b      	str	r3, [r7, #4]
 8006486:	e03d      	b.n	8006504 <Calibrate_gyro+0x90>
	{
		if (cal_int % 125 == 0)
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	4b31      	ldr	r3, [pc, #196]	; (8006550 <Calibrate_gyro+0xdc>)
 800648c:	fb83 2301 	smull	r2, r3, r3, r1
 8006490:	10da      	asrs	r2, r3, #3
 8006492:	17cb      	asrs	r3, r1, #31
 8006494:	1ad2      	subs	r2, r2, r3
 8006496:	4613      	mov	r3, r2
 8006498:	015b      	lsls	r3, r3, #5
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	1aca      	subs	r2, r1, r3
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	d102      	bne.n	80064ac <Calibrate_gyro+0x38>
		{
			ledToggle(RGB_GREEN);  //Change the led status to indicate calibration.
 80064a6:	2003      	movs	r0, #3
 80064a8:	f005 f9a6 	bl	800b7f8 <ledToggle>
#ifdef debug
			logPrintf(".");
#endif
		}
		Gyro_getADC();
 80064ac:	f000 f856 	bl	800655c <Gyro_getADC>
		Mag_getADC();
 80064b0:	f000 fa0e 	bl	80068d0 <Mag_getADC>
		for(axis=0; axis<3; axis++)
 80064b4:	2300      	movs	r3, #0
 80064b6:	70fb      	strb	r3, [r7, #3]
 80064b8:	e01e      	b.n	80064f8 <Calibrate_gyro+0x84>
		{
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	4a25      	ldr	r2, [pc, #148]	; (8006554 <Calibrate_gyro+0xe0>)
 80064be:	331c      	adds	r3, #28
 80064c0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	4a23      	ldr	r2, [pc, #140]	; (8006554 <Calibrate_gyro+0xe0>)
 80064c8:	3304      	adds	r3, #4
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	4413      	add	r3, r2
 80064ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fa fc1c 	bl	8000d10 <__aeabi_i2f>
 80064d8:	4603      	mov	r3, r0
 80064da:	78fc      	ldrb	r4, [r7, #3]
 80064dc:	4619      	mov	r1, r3
 80064de:	4628      	mov	r0, r5
 80064e0:	f7fa fb62 	bl	8000ba8 <__addsf3>
 80064e4:	4603      	mov	r3, r0
 80064e6:	4619      	mov	r1, r3
 80064e8:	4a1a      	ldr	r2, [pc, #104]	; (8006554 <Calibrate_gyro+0xe0>)
 80064ea:	f104 031c 	add.w	r3, r4, #28
 80064ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(axis=0; axis<3; axis++)
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	3301      	adds	r3, #1
 80064f6:	70fb      	strb	r3, [r7, #3]
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d9dd      	bls.n	80064ba <Calibrate_gyro+0x46>
	for (cal_int = 0; cal_int < 2000; cal_int ++)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	3301      	adds	r3, #1
 8006502:	607b      	str	r3, [r7, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800650a:	dbbd      	blt.n	8006488 <Calibrate_gyro+0x14>
		}
	}
	for(axis=0; axis<3; axis++)
 800650c:	2300      	movs	r3, #0
 800650e:	70fb      	strb	r3, [r7, #3]
 8006510:	e013      	b.n	800653a <Calibrate_gyro+0xc6>
	{
		imu.gyro_cal[axis] /= 2000.0f;
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	4a0f      	ldr	r2, [pc, #60]	; (8006554 <Calibrate_gyro+0xe0>)
 8006516:	331c      	adds	r3, #28
 8006518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651c:	78fc      	ldrb	r4, [r7, #3]
 800651e:	490e      	ldr	r1, [pc, #56]	; (8006558 <Calibrate_gyro+0xe4>)
 8006520:	4618      	mov	r0, r3
 8006522:	f7fa fcfd 	bl	8000f20 <__aeabi_fdiv>
 8006526:	4603      	mov	r3, r0
 8006528:	4619      	mov	r1, r3
 800652a:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <Calibrate_gyro+0xe0>)
 800652c:	f104 031c 	add.w	r3, r4, #28
 8006530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(axis=0; axis<3; axis++)
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	3301      	adds	r3, #1
 8006538:	70fb      	strb	r3, [r7, #3]
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d9e8      	bls.n	8006512 <Calibrate_gyro+0x9e>
	}
	HAL_Delay(100);
 8006540:	2064      	movs	r0, #100	; 0x64
 8006542:	f006 f91b 	bl	800c77c <HAL_Delay>
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bdb0      	pop	{r4, r5, r7, pc}
 800654e:	bf00      	nop
 8006550:	10624dd3 	.word	0x10624dd3
 8006554:	20000e20 	.word	0x20000e20
 8006558:	44fa0000 	.word	0x44fa0000

0800655c <Gyro_getADC>:

void Gyro_getADC(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af02      	add	r7, sp, #8
	int16_t x = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	80fb      	strh	r3, [r7, #6]
	int16_t y = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	80bb      	strh	r3, [r7, #4]
	int16_t z = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	807b      	strh	r3, [r7, #2]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 800656e:	2306      	movs	r3, #6
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	4b18      	ldr	r3, [pc, #96]	; (80065d4 <Gyro_getADC+0x78>)
 8006574:	2201      	movs	r2, #1
 8006576:	2143      	movs	r1, #67	; 0x43
 8006578:	20d2      	movs	r0, #210	; 0xd2
 800657a:	f004 fe5f 	bl	800b23c <I2C_ByteRead>
	/* Get Angular rate */
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 800657e:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <Gyro_getADC+0x78>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	b21a      	sxth	r2, r3
 8006586:	4b13      	ldr	r3, [pc, #76]	; (80065d4 <Gyro_getADC+0x78>)
 8006588:	785b      	ldrb	r3, [r3, #1]
 800658a:	b21b      	sxth	r3, r3
 800658c:	4313      	orrs	r3, r2
 800658e:	80fb      	strh	r3, [r7, #6]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8006590:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <Gyro_getADC+0x78>)
 8006592:	789b      	ldrb	r3, [r3, #2]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	b21a      	sxth	r2, r3
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <Gyro_getADC+0x78>)
 800659a:	78db      	ldrb	r3, [r3, #3]
 800659c:	b21b      	sxth	r3, r3
 800659e:	4313      	orrs	r3, r2
 80065a0:	80bb      	strh	r3, [r7, #4]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 80065a2:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <Gyro_getADC+0x78>)
 80065a4:	791b      	ldrb	r3, [r3, #4]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	b21a      	sxth	r2, r3
 80065aa:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <Gyro_getADC+0x78>)
 80065ac:	795b      	ldrb	r3, [r3, #5]
 80065ae:	b21b      	sxth	r3, r3
 80065b0:	4313      	orrs	r3, r2
 80065b2:	807b      	strh	r3, [r7, #2]
	GYRO_ORIENTATION(x, y, z);
 80065b4:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <Gyro_getADC+0x7c>)
 80065b6:	88fb      	ldrh	r3, [r7, #6]
 80065b8:	81d3      	strh	r3, [r2, #14]
 80065ba:	4a07      	ldr	r2, [pc, #28]	; (80065d8 <Gyro_getADC+0x7c>)
 80065bc:	88bb      	ldrh	r3, [r7, #4]
 80065be:	8213      	strh	r3, [r2, #16]
 80065c0:	4a05      	ldr	r2, [pc, #20]	; (80065d8 <Gyro_getADC+0x7c>)
 80065c2:	887b      	ldrh	r3, [r7, #2]
 80065c4:	8253      	strh	r3, [r2, #18]
	GYRO_Common();
 80065c6:	f000 f809 	bl	80065dc <GYRO_Common>
}
 80065ca:	bf00      	nop
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20000f0c 	.word	0x20000f0c
 80065d8:	20000e20 	.word	0x20000e20

080065dc <GYRO_Common>:

void GYRO_Common(void)
{
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
	uint8_t axis =0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	71fb      	strb	r3, [r7, #7]
	for(axis=0; axis<3; axis++)
 80065e6:	2300      	movs	r3, #0
 80065e8:	71fb      	strb	r3, [r7, #7]
 80065ea:	e05d      	b.n	80066a8 <GYRO_Common+0xcc>
	{
		imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 80065ec:	79fb      	ldrb	r3, [r7, #7]
 80065ee:	4a32      	ldr	r2, [pc, #200]	; (80066b8 <GYRO_Common+0xdc>)
 80065f0:	3304      	adds	r3, #4
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	4413      	add	r3, r2
 80065f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fa fb88 	bl	8000d10 <__aeabi_i2f>
 8006600:	79fb      	ldrb	r3, [r7, #7]
 8006602:	4a2d      	ldr	r2, [pc, #180]	; (80066b8 <GYRO_Common+0xdc>)
 8006604:	331c      	adds	r3, #28
 8006606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800660a:	4619      	mov	r1, r3
 800660c:	f7fa faca 	bl	8000ba4 <__aeabi_fsub>
 8006610:	4603      	mov	r3, r0
 8006612:	461a      	mov	r2, r3
 8006614:	4b29      	ldr	r3, [pc, #164]	; (80066bc <GYRO_Common+0xe0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	79fc      	ldrb	r4, [r7, #7]
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f7fa fbcb 	bl	8000db8 <__aeabi_fmul>
 8006622:	4603      	mov	r3, r0
 8006624:	4619      	mov	r1, r3
 8006626:	4a24      	ldr	r2, [pc, #144]	; (80066b8 <GYRO_Common+0xdc>)
 8006628:	f104 030e 	add.w	r3, r4, #14
 800662c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if(abs(imu.gyroRaw[axis]) <= 5)
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	4a21      	ldr	r2, [pc, #132]	; (80066b8 <GYRO_Common+0xdc>)
 8006634:	330e      	adds	r3, #14
 8006636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800663a:	f04f 0100 	mov.w	r1, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f7fa fd76 	bl	8001130 <__aeabi_fcmpgt>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d011      	beq.n	800666e <GYRO_Common+0x92>
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	4a1a      	ldr	r2, [pc, #104]	; (80066b8 <GYRO_Common+0xdc>)
 800664e:	330e      	adds	r3, #14
 8006650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006654:	2201      	movs	r2, #1
 8006656:	4614      	mov	r4, r2
 8006658:	4919      	ldr	r1, [pc, #100]	; (80066c0 <GYRO_Common+0xe4>)
 800665a:	4618      	mov	r0, r3
 800665c:	f7fa fd54 	bl	8001108 <__aeabi_fcmple>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <GYRO_Common+0x8e>
 8006666:	2300      	movs	r3, #0
 8006668:	461c      	mov	r4, r3
 800666a:	b2e3      	uxtb	r3, r4
 800666c:	e010      	b.n	8006690 <GYRO_Common+0xb4>
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	4a11      	ldr	r2, [pc, #68]	; (80066b8 <GYRO_Common+0xdc>)
 8006672:	330e      	adds	r3, #14
 8006674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006678:	2201      	movs	r2, #1
 800667a:	4614      	mov	r4, r2
 800667c:	4911      	ldr	r1, [pc, #68]	; (80066c4 <GYRO_Common+0xe8>)
 800667e:	4618      	mov	r0, r3
 8006680:	f7fa fd4c 	bl	800111c <__aeabi_fcmpge>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <GYRO_Common+0xb2>
 800668a:	2300      	movs	r3, #0
 800668c:	461c      	mov	r4, r3
 800668e:	b2e3      	uxtb	r3, r4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d006      	beq.n	80066a2 <GYRO_Common+0xc6>
		{
			imu.gyroRaw[axis] = 0;
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <GYRO_Common+0xdc>)
 8006698:	330e      	adds	r3, #14
 800669a:	f04f 0100 	mov.w	r1, #0
 800669e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(axis=0; axis<3; axis++)
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	3301      	adds	r3, #1
 80066a6:	71fb      	strb	r3, [r7, #7]
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d99e      	bls.n	80065ec <GYRO_Common+0x10>
		}
	}
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd90      	pop	{r4, r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000e20 	.word	0x20000e20
 80066bc:	20000ad4 	.word	0x20000ad4
 80066c0:	40a00000 	.word	0x40a00000
 80066c4:	c0a00000 	.word	0xc0a00000

080066c8 <ACC_getADC>:

void ACC_getADC(void){
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af02      	add	r7, sp, #8
	int16_t x = 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	80fb      	strh	r3, [r7, #6]
	int16_t y = 0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	80bb      	strh	r3, [r7, #4]
	int16_t z = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	807b      	strh	r3, [r7, #2]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 80066da:	2306      	movs	r3, #6
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	4b1b      	ldr	r3, [pc, #108]	; (800674c <ACC_getADC+0x84>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	213b      	movs	r1, #59	; 0x3b
 80066e4:	20d2      	movs	r0, #210	; 0xd2
 80066e6:	f004 fda9 	bl	800b23c <I2C_ByteRead>
	/* Get acceleration */
	x = (int16_t)((rawADC[0]<<8) | rawADC[1])>>3;
 80066ea:	4b18      	ldr	r3, [pc, #96]	; (800674c <ACC_getADC+0x84>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	b21a      	sxth	r2, r3
 80066f2:	4b16      	ldr	r3, [pc, #88]	; (800674c <ACC_getADC+0x84>)
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	b21b      	sxth	r3, r3
 80066f8:	4313      	orrs	r3, r2
 80066fa:	b21b      	sxth	r3, r3
 80066fc:	10db      	asrs	r3, r3, #3
 80066fe:	80fb      	strh	r3, [r7, #6]
	y = (int16_t)((rawADC[2]<<8) | rawADC[3])>>3;
 8006700:	4b12      	ldr	r3, [pc, #72]	; (800674c <ACC_getADC+0x84>)
 8006702:	789b      	ldrb	r3, [r3, #2]
 8006704:	021b      	lsls	r3, r3, #8
 8006706:	b21a      	sxth	r2, r3
 8006708:	4b10      	ldr	r3, [pc, #64]	; (800674c <ACC_getADC+0x84>)
 800670a:	78db      	ldrb	r3, [r3, #3]
 800670c:	b21b      	sxth	r3, r3
 800670e:	4313      	orrs	r3, r2
 8006710:	b21b      	sxth	r3, r3
 8006712:	10db      	asrs	r3, r3, #3
 8006714:	80bb      	strh	r3, [r7, #4]
	z = (int16_t)((rawADC[4]<<8) | rawADC[5])>>3;
 8006716:	4b0d      	ldr	r3, [pc, #52]	; (800674c <ACC_getADC+0x84>)
 8006718:	791b      	ldrb	r3, [r3, #4]
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	b21a      	sxth	r2, r3
 800671e:	4b0b      	ldr	r3, [pc, #44]	; (800674c <ACC_getADC+0x84>)
 8006720:	795b      	ldrb	r3, [r3, #5]
 8006722:	b21b      	sxth	r3, r3
 8006724:	4313      	orrs	r3, r2
 8006726:	b21b      	sxth	r3, r3
 8006728:	10db      	asrs	r3, r3, #3
 800672a:	807b      	strh	r3, [r7, #2]
	ACC_ORIENTATION( x, y, z);
 800672c:	4a08      	ldr	r2, [pc, #32]	; (8006750 <ACC_getADC+0x88>)
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	8293      	strh	r3, [r2, #20]
 8006732:	4a07      	ldr	r2, [pc, #28]	; (8006750 <ACC_getADC+0x88>)
 8006734:	88bb      	ldrh	r3, [r7, #4]
 8006736:	82d3      	strh	r3, [r2, #22]
 8006738:	4a05      	ldr	r2, [pc, #20]	; (8006750 <ACC_getADC+0x88>)
 800673a:	887b      	ldrh	r3, [r7, #2]
 800673c:	8313      	strh	r3, [r2, #24]
	ACC_Common();
 800673e:	f000 f809 	bl	8006754 <ACC_Common>
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20000f0c 	.word	0x20000f0c
 8006750:	20000e20 	.word	0x20000e20

08006754 <ACC_Common>:

void ACC_Common(void)
{
 8006754:	b5b0      	push	{r4, r5, r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
	uint8_t axis = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	71fb      	strb	r3, [r7, #7]
	static float accLPF[3];
	static int32_t a[3];

	if(calibratingA>0)
 800675e:	4b56      	ldr	r3, [pc, #344]	; (80068b8 <ACC_Common+0x164>)
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d050      	beq.n	8006808 <ACC_Common+0xb4>
	{
		for(axis=0; axis <3; axis++)
 8006766:	2300      	movs	r3, #0
 8006768:	71fb      	strb	r3, [r7, #7]
 800676a:	e02b      	b.n	80067c4 <ACC_Common+0x70>
		{
			// Reset a[axis] at start of calibration
			if (calibratingA == 512) a[axis]=0;
 800676c:	4b52      	ldr	r3, [pc, #328]	; (80068b8 <ACC_Common+0x164>)
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006774:	d104      	bne.n	8006780 <ACC_Common+0x2c>
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	4a50      	ldr	r2, [pc, #320]	; (80068bc <ACC_Common+0x168>)
 800677a:	2100      	movs	r1, #0
 800677c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// Sum up 512 readings
			a[axis] +=imu.accADC[axis];
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	4a4e      	ldr	r2, [pc, #312]	; (80068bc <ACC_Common+0x168>)
 8006784:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	494d      	ldr	r1, [pc, #308]	; (80068c0 <ACC_Common+0x16c>)
 800678c:	3308      	adds	r3, #8
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	440b      	add	r3, r1
 8006792:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006796:	4619      	mov	r1, r3
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	440a      	add	r2, r1
 800679c:	4947      	ldr	r1, [pc, #284]	; (80068bc <ACC_Common+0x168>)
 800679e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// Clear global variables for next reading
			imu.accADC[axis]=0;
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	4a46      	ldr	r2, [pc, #280]	; (80068c0 <ACC_Common+0x16c>)
 80067a6:	3308      	adds	r3, #8
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	4413      	add	r3, r2
 80067ac:	2200      	movs	r2, #0
 80067ae:	809a      	strh	r2, [r3, #4]
			imu.accZero[axis]=0;
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	4a43      	ldr	r2, [pc, #268]	; (80068c0 <ACC_Common+0x16c>)
 80067b4:	3318      	adds	r3, #24
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	2200      	movs	r2, #0
 80067bc:	605a      	str	r2, [r3, #4]
		for(axis=0; axis <3; axis++)
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	3301      	adds	r3, #1
 80067c2:	71fb      	strb	r3, [r7, #7]
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d9d0      	bls.n	800676c <ACC_Common+0x18>
		}
		// Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
		if (calibratingA == 1)
 80067ca:	4b3b      	ldr	r3, [pc, #236]	; (80068b8 <ACC_Common+0x164>)
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d114      	bne.n	80067fc <ACC_Common+0xa8>
		{
			imu.accZero[ROLL]  = a[ROLL]>>9;
 80067d2:	4b3a      	ldr	r3, [pc, #232]	; (80068bc <ACC_Common+0x168>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	125b      	asrs	r3, r3, #9
 80067d8:	4a39      	ldr	r2, [pc, #228]	; (80068c0 <ACC_Common+0x16c>)
 80067da:	6653      	str	r3, [r2, #100]	; 0x64
			imu.accZero[PITCH] = a[PITCH]>>9;
 80067dc:	4b37      	ldr	r3, [pc, #220]	; (80068bc <ACC_Common+0x168>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	125b      	asrs	r3, r3, #9
 80067e2:	4a37      	ldr	r2, [pc, #220]	; (80068c0 <ACC_Common+0x16c>)
 80067e4:	6693      	str	r3, [r2, #104]	; 0x68
			imu.accZero[YAW]   = (a[YAW]>>9)-(int32_t)acc_1G;
 80067e6:	4b35      	ldr	r3, [pc, #212]	; (80068bc <ACC_Common+0x168>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	125b      	asrs	r3, r3, #9
 80067ec:	4a35      	ldr	r2, [pc, #212]	; (80068c4 <ACC_Common+0x170>)
 80067ee:	8812      	ldrh	r2, [r2, #0]
 80067f0:	1a9b      	subs	r3, r3, r2
 80067f2:	4a33      	ldr	r2, [pc, #204]	; (80068c0 <ACC_Common+0x16c>)
 80067f4:	66d3      	str	r3, [r2, #108]	; 0x6c
			f.CALIBRATE_ACC = 0;
 80067f6:	4b34      	ldr	r3, [pc, #208]	; (80068c8 <ACC_Common+0x174>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	711a      	strb	r2, [r3, #4]
		}
		calibratingA--;
 80067fc:	4b2e      	ldr	r3, [pc, #184]	; (80068b8 <ACC_Common+0x164>)
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	4b2c      	ldr	r3, [pc, #176]	; (80068b8 <ACC_Common+0x164>)
 8006806:	801a      	strh	r2, [r3, #0]
	}

	for(axis=0;axis<3;axis++)
 8006808:	2300      	movs	r3, #0
 800680a:	71fb      	strb	r3, [r7, #7]
 800680c:	e04d      	b.n	80068aa <ACC_Common+0x156>
	{
		imu.accRaw[axis] = (float)imu.accADC[axis]-imu.accZero[axis];// * aRes;// - accBias[axis];
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	4a2b      	ldr	r2, [pc, #172]	; (80068c0 <ACC_Common+0x16c>)
 8006812:	3308      	adds	r3, #8
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	4413      	add	r3, r2
 8006818:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800681c:	4618      	mov	r0, r3
 800681e:	f7fa fa77 	bl	8000d10 <__aeabi_i2f>
 8006822:	4605      	mov	r5, r0
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	4a26      	ldr	r2, [pc, #152]	; (80068c0 <ACC_Common+0x16c>)
 8006828:	3318      	adds	r3, #24
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4618      	mov	r0, r3
 8006832:	f7fa fa6d 	bl	8000d10 <__aeabi_i2f>
 8006836:	4603      	mov	r3, r0
 8006838:	79fc      	ldrb	r4, [r7, #7]
 800683a:	4619      	mov	r1, r3
 800683c:	4628      	mov	r0, r5
 800683e:	f7fa f9b1 	bl	8000ba4 <__aeabi_fsub>
 8006842:	4603      	mov	r3, r0
 8006844:	4619      	mov	r1, r3
 8006846:	4a1e      	ldr	r2, [pc, #120]	; (80068c0 <ACC_Common+0x16c>)
 8006848:	f104 0308 	add.w	r3, r4, #8
 800684c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (acc_lpf_factor > 0)
		{
			accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / acc_lpf_factor)) + imu.accRaw[axis] * (1.0f / acc_lpf_factor);
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	4a1e      	ldr	r2, [pc, #120]	; (80068cc <ACC_Common+0x178>)
 8006854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006858:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 800685c:	4618      	mov	r0, r3
 800685e:	f7fa faab 	bl	8000db8 <__aeabi_fmul>
 8006862:	4603      	mov	r3, r0
 8006864:	461d      	mov	r5, r3
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	4a15      	ldr	r2, [pc, #84]	; (80068c0 <ACC_Common+0x16c>)
 800686a:	3308      	adds	r3, #8
 800686c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006870:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8006874:	4618      	mov	r0, r3
 8006876:	f7fa fa9f 	bl	8000db8 <__aeabi_fmul>
 800687a:	4603      	mov	r3, r0
 800687c:	79fc      	ldrb	r4, [r7, #7]
 800687e:	4619      	mov	r1, r3
 8006880:	4628      	mov	r0, r5
 8006882:	f7fa f991 	bl	8000ba8 <__addsf3>
 8006886:	4603      	mov	r3, r0
 8006888:	461a      	mov	r2, r3
 800688a:	4b10      	ldr	r3, [pc, #64]	; (80068cc <ACC_Common+0x178>)
 800688c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			imu.accSmooth[axis] = accLPF[axis];
 8006890:	79fa      	ldrb	r2, [r7, #7]
 8006892:	79fb      	ldrb	r3, [r7, #7]
 8006894:	490d      	ldr	r1, [pc, #52]	; (80068cc <ACC_Common+0x178>)
 8006896:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800689a:	4909      	ldr	r1, [pc, #36]	; (80068c0 <ACC_Common+0x16c>)
 800689c:	330a      	adds	r3, #10
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	605a      	str	r2, [r3, #4]
	for(axis=0;axis<3;axis++)
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	3301      	adds	r3, #1
 80068a8:	71fb      	strb	r3, [r7, #7]
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d9ae      	bls.n	800680e <ACC_Common+0xba>
		}
	}
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bdb0      	pop	{r4, r5, r7, pc}
 80068b8:	20000008 	.word	0x20000008
 80068bc:	20000384 	.word	0x20000384
 80068c0:	20000e20 	.word	0x20000e20
 80068c4:	2000000c 	.word	0x2000000c
 80068c8:	20000ed4 	.word	0x20000ed4
 80068cc:	20000390 	.word	0x20000390

080068d0 <Mag_getADC>:

void Mag_getADC(void){
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af02      	add	r7, sp, #8
	int16_t x = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	80fb      	strh	r3, [r7, #6]
	int16_t y = 0;
 80068da:	2300      	movs	r3, #0
 80068dc:	80bb      	strh	r3, [r7, #4]
	int16_t z = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	807b      	strh	r3, [r7, #2]
	I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x02, 1, rawADC, 1);
 80068e2:	2301      	movs	r3, #1
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	4b24      	ldr	r3, [pc, #144]	; (8006978 <Mag_getADC+0xa8>)
 80068e8:	2201      	movs	r2, #1
 80068ea:	2102      	movs	r1, #2
 80068ec:	2018      	movs	r0, #24
 80068ee:	f004 fca5 	bl	800b23c <I2C_ByteRead>
	if( rawADC[0] & 0x01)
 80068f2:	4b21      	ldr	r3, [pc, #132]	; (8006978 <Mag_getADC+0xa8>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d038      	beq.n	8006970 <Mag_getADC+0xa0>
	{
		I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x03, 1, rawADC, 7);
 80068fe:	2307      	movs	r3, #7
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	4b1d      	ldr	r3, [pc, #116]	; (8006978 <Mag_getADC+0xa8>)
 8006904:	2201      	movs	r2, #1
 8006906:	2103      	movs	r1, #3
 8006908:	2018      	movs	r0, #24
 800690a:	f004 fc97 	bl	800b23c <I2C_ByteRead>
		uint8_t c = rawADC[6];
 800690e:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <Mag_getADC+0xa8>)
 8006910:	799b      	ldrb	r3, [r3, #6]
 8006912:	707b      	strb	r3, [r7, #1]
		if(!(c & 0x08))
 8006914:	787b      	ldrb	r3, [r7, #1]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d128      	bne.n	8006970 <Mag_getADC+0xa0>
		{
			x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 800691e:	4b16      	ldr	r3, [pc, #88]	; (8006978 <Mag_getADC+0xa8>)
 8006920:	785b      	ldrb	r3, [r3, #1]
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	b21a      	sxth	r2, r3
 8006926:	4b14      	ldr	r3, [pc, #80]	; (8006978 <Mag_getADC+0xa8>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	b21b      	sxth	r3, r3
 800692c:	4313      	orrs	r3, r2
 800692e:	80fb      	strh	r3, [r7, #6]
			y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 8006930:	4b11      	ldr	r3, [pc, #68]	; (8006978 <Mag_getADC+0xa8>)
 8006932:	78db      	ldrb	r3, [r3, #3]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	b21a      	sxth	r2, r3
 8006938:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <Mag_getADC+0xa8>)
 800693a:	789b      	ldrb	r3, [r3, #2]
 800693c:	b21b      	sxth	r3, r3
 800693e:	4313      	orrs	r3, r2
 8006940:	80bb      	strh	r3, [r7, #4]
			z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <Mag_getADC+0xa8>)
 8006944:	795b      	ldrb	r3, [r3, #5]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	b21a      	sxth	r2, r3
 800694a:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <Mag_getADC+0xa8>)
 800694c:	791b      	ldrb	r3, [r3, #4]
 800694e:	b21b      	sxth	r3, r3
 8006950:	4313      	orrs	r3, r2
 8006952:	807b      	strh	r3, [r7, #2]
			MAG_ORIENTATION( x, y, z);
 8006954:	4a09      	ldr	r2, [pc, #36]	; (800697c <Mag_getADC+0xac>)
 8006956:	88bb      	ldrh	r3, [r7, #4]
 8006958:	80d3      	strh	r3, [r2, #6]
 800695a:	4a08      	ldr	r2, [pc, #32]	; (800697c <Mag_getADC+0xac>)
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	8113      	strh	r3, [r2, #8]
 8006960:	887b      	ldrh	r3, [r7, #2]
 8006962:	425b      	negs	r3, r3
 8006964:	b29b      	uxth	r3, r3
 8006966:	b21a      	sxth	r2, r3
 8006968:	4b04      	ldr	r3, [pc, #16]	; (800697c <Mag_getADC+0xac>)
 800696a:	815a      	strh	r2, [r3, #10]
			MAG_Common();
 800696c:	f000 f808 	bl	8006980 <MAG_Common>
		}
	}
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20000f0c 	.word	0x20000f0c
 800697c:	20000e20 	.word	0x20000e20

08006980 <MAG_Common>:

void MAG_Common(void)
{
 8006980:	b5b0      	push	{r4, r5, r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
	uint8_t axis = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	71fb      	strb	r3, [r7, #7]
	static uint8_t flag = 0;
	static int jj = 0;
	static int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
	static int16_t mag_max[3] = {0x8000, 0x8000, 0x8000}, mag_min[3] = {0x7FFF, 0x7FFF, 0x7FFF}, mag_temp[3] = {0, 0, 0};

	if(f.CALIBRATE_MAG==1)
 800698a:	4b9a      	ldr	r3, [pc, #616]	; (8006bf4 <MAG_Common+0x274>)
 800698c:	7cdb      	ldrb	r3, [r3, #19]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d14b      	bne.n	8006a2a <MAG_Common+0xaa>
	{
		flag = 1;
 8006992:	4b99      	ldr	r3, [pc, #612]	; (8006bf8 <MAG_Common+0x278>)
 8006994:	2201      	movs	r2, #1
 8006996:	701a      	strb	r2, [r3, #0]
		mag_temp[0] = imu.magADC[0];
 8006998:	4b98      	ldr	r3, [pc, #608]	; (8006bfc <MAG_Common+0x27c>)
 800699a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800699e:	4b98      	ldr	r3, [pc, #608]	; (8006c00 <MAG_Common+0x280>)
 80069a0:	801a      	strh	r2, [r3, #0]
		mag_temp[1] = imu.magADC[1];
 80069a2:	4b96      	ldr	r3, [pc, #600]	; (8006bfc <MAG_Common+0x27c>)
 80069a4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80069a8:	4b95      	ldr	r3, [pc, #596]	; (8006c00 <MAG_Common+0x280>)
 80069aa:	805a      	strh	r2, [r3, #2]
		mag_temp[2] = imu.magADC[2];
 80069ac:	4b93      	ldr	r3, [pc, #588]	; (8006bfc <MAG_Common+0x27c>)
 80069ae:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80069b2:	4b93      	ldr	r3, [pc, #588]	; (8006c00 <MAG_Common+0x280>)
 80069b4:	809a      	strh	r2, [r3, #4]
		for (jj = 0; jj < 3; jj++)
 80069b6:	4b93      	ldr	r3, [pc, #588]	; (8006c04 <MAG_Common+0x284>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	e030      	b.n	8006a20 <MAG_Common+0xa0>
		{
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 80069be:	4b91      	ldr	r3, [pc, #580]	; (8006c04 <MAG_Common+0x284>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a8f      	ldr	r2, [pc, #572]	; (8006c00 <MAG_Common+0x280>)
 80069c4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80069c8:	4b8e      	ldr	r3, [pc, #568]	; (8006c04 <MAG_Common+0x284>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	498e      	ldr	r1, [pc, #568]	; (8006c08 <MAG_Common+0x288>)
 80069ce:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	dd09      	ble.n	80069ea <MAG_Common+0x6a>
 80069d6:	4b8b      	ldr	r3, [pc, #556]	; (8006c04 <MAG_Common+0x284>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b8a      	ldr	r3, [pc, #552]	; (8006c04 <MAG_Common+0x284>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4988      	ldr	r1, [pc, #544]	; (8006c00 <MAG_Common+0x280>)
 80069e0:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80069e4:	4a88      	ldr	r2, [pc, #544]	; (8006c08 <MAG_Common+0x288>)
 80069e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 80069ea:	4b86      	ldr	r3, [pc, #536]	; (8006c04 <MAG_Common+0x284>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a84      	ldr	r2, [pc, #528]	; (8006c00 <MAG_Common+0x280>)
 80069f0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80069f4:	4b83      	ldr	r3, [pc, #524]	; (8006c04 <MAG_Common+0x284>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4984      	ldr	r1, [pc, #528]	; (8006c0c <MAG_Common+0x28c>)
 80069fa:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	da09      	bge.n	8006a16 <MAG_Common+0x96>
 8006a02:	4b80      	ldr	r3, [pc, #512]	; (8006c04 <MAG_Common+0x284>)
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4b7f      	ldr	r3, [pc, #508]	; (8006c04 <MAG_Common+0x284>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	497d      	ldr	r1, [pc, #500]	; (8006c00 <MAG_Common+0x280>)
 8006a0c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8006a10:	4a7e      	ldr	r2, [pc, #504]	; (8006c0c <MAG_Common+0x28c>)
 8006a12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (jj = 0; jj < 3; jj++)
 8006a16:	4b7b      	ldr	r3, [pc, #492]	; (8006c04 <MAG_Common+0x284>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	4a79      	ldr	r2, [pc, #484]	; (8006c04 <MAG_Common+0x284>)
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	4b78      	ldr	r3, [pc, #480]	; (8006c04 <MAG_Common+0x284>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	ddca      	ble.n	80069be <MAG_Common+0x3e>
 8006a28:	e0e0      	b.n	8006bec <MAG_Common+0x26c>
		}
	}else if(flag == 1)
 8006a2a:	4b73      	ldr	r3, [pc, #460]	; (8006bf8 <MAG_Common+0x278>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	f040 80dc 	bne.w	8006bec <MAG_Common+0x26c>
	{
		flag = 0;
 8006a34:	4b70      	ldr	r3, [pc, #448]	; (8006bf8 <MAG_Common+0x278>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	701a      	strb	r2, [r3, #0]
		// Get hard iron correction
		mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8006a3a:	4b73      	ldr	r3, [pc, #460]	; (8006c08 <MAG_Common+0x288>)
 8006a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a40:	461a      	mov	r2, r3
 8006a42:	4b72      	ldr	r3, [pc, #456]	; (8006c0c <MAG_Common+0x28c>)
 8006a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a48:	4413      	add	r3, r2
 8006a4a:	0fda      	lsrs	r2, r3, #31
 8006a4c:	4413      	add	r3, r2
 8006a4e:	105b      	asrs	r3, r3, #1
 8006a50:	461a      	mov	r2, r3
 8006a52:	4b6f      	ldr	r3, [pc, #444]	; (8006c10 <MAG_Common+0x290>)
 8006a54:	601a      	str	r2, [r3, #0]
		mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8006a56:	4b6c      	ldr	r3, [pc, #432]	; (8006c08 <MAG_Common+0x288>)
 8006a58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4b6b      	ldr	r3, [pc, #428]	; (8006c0c <MAG_Common+0x28c>)
 8006a60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a64:	4413      	add	r3, r2
 8006a66:	0fda      	lsrs	r2, r3, #31
 8006a68:	4413      	add	r3, r2
 8006a6a:	105b      	asrs	r3, r3, #1
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4b68      	ldr	r3, [pc, #416]	; (8006c10 <MAG_Common+0x290>)
 8006a70:	605a      	str	r2, [r3, #4]
		mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8006a72:	4b65      	ldr	r3, [pc, #404]	; (8006c08 <MAG_Common+0x288>)
 8006a74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b64      	ldr	r3, [pc, #400]	; (8006c0c <MAG_Common+0x28c>)
 8006a7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a80:	4413      	add	r3, r2
 8006a82:	0fda      	lsrs	r2, r3, #31
 8006a84:	4413      	add	r3, r2
 8006a86:	105b      	asrs	r3, r3, #1
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4b61      	ldr	r3, [pc, #388]	; (8006c10 <MAG_Common+0x290>)
 8006a8c:	609a      	str	r2, [r3, #8]
		magBias[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8006a8e:	4b60      	ldr	r3, [pc, #384]	; (8006c10 <MAG_Common+0x290>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fa f93c 	bl	8000d10 <__aeabi_i2f>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	4b5e      	ldr	r3, [pc, #376]	; (8006c14 <MAG_Common+0x294>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	f7fa f989 	bl	8000db8 <__aeabi_fmul>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4b5b      	ldr	r3, [pc, #364]	; (8006c18 <MAG_Common+0x298>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	f7fa f981 	bl	8000db8 <__aeabi_fmul>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4b58      	ldr	r3, [pc, #352]	; (8006c1c <MAG_Common+0x29c>)
 8006abc:	601a      	str	r2, [r3, #0]
		magBias[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8006abe:	4b54      	ldr	r3, [pc, #336]	; (8006c10 <MAG_Common+0x290>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fa f924 	bl	8000d10 <__aeabi_i2f>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	4b52      	ldr	r3, [pc, #328]	; (8006c14 <MAG_Common+0x294>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	f7fa f971 	bl	8000db8 <__aeabi_fmul>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4b4f      	ldr	r3, [pc, #316]	; (8006c18 <MAG_Common+0x298>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	f7fa f969 	bl	8000db8 <__aeabi_fmul>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4b4c      	ldr	r3, [pc, #304]	; (8006c1c <MAG_Common+0x29c>)
 8006aec:	605a      	str	r2, [r3, #4]
		magBias[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8006aee:	4b48      	ldr	r3, [pc, #288]	; (8006c10 <MAG_Common+0x290>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fa f90c 	bl	8000d10 <__aeabi_i2f>
 8006af8:	4602      	mov	r2, r0
 8006afa:	4b46      	ldr	r3, [pc, #280]	; (8006c14 <MAG_Common+0x294>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4619      	mov	r1, r3
 8006b00:	4610      	mov	r0, r2
 8006b02:	f7fa f959 	bl	8000db8 <__aeabi_fmul>
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4b43      	ldr	r3, [pc, #268]	; (8006c18 <MAG_Common+0x298>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f7fa f951 	bl	8000db8 <__aeabi_fmul>
 8006b16:	4603      	mov	r3, r0
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4b40      	ldr	r3, [pc, #256]	; (8006c1c <MAG_Common+0x29c>)
 8006b1c:	609a      	str	r2, [r3, #8]

		// Get soft iron correction estimate
		mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8006b1e:	4b3a      	ldr	r3, [pc, #232]	; (8006c08 <MAG_Common+0x288>)
 8006b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b24:	461a      	mov	r2, r3
 8006b26:	4b39      	ldr	r3, [pc, #228]	; (8006c0c <MAG_Common+0x28c>)
 8006b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	0fda      	lsrs	r2, r3, #31
 8006b30:	4413      	add	r3, r2
 8006b32:	105b      	asrs	r3, r3, #1
 8006b34:	461a      	mov	r2, r3
 8006b36:	4b3a      	ldr	r3, [pc, #232]	; (8006c20 <MAG_Common+0x2a0>)
 8006b38:	601a      	str	r2, [r3, #0]
		mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8006b3a:	4b33      	ldr	r3, [pc, #204]	; (8006c08 <MAG_Common+0x288>)
 8006b3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b40:	461a      	mov	r2, r3
 8006b42:	4b32      	ldr	r3, [pc, #200]	; (8006c0c <MAG_Common+0x28c>)
 8006b44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	0fda      	lsrs	r2, r3, #31
 8006b4c:	4413      	add	r3, r2
 8006b4e:	105b      	asrs	r3, r3, #1
 8006b50:	461a      	mov	r2, r3
 8006b52:	4b33      	ldr	r3, [pc, #204]	; (8006c20 <MAG_Common+0x2a0>)
 8006b54:	605a      	str	r2, [r3, #4]
		mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8006b56:	4b2c      	ldr	r3, [pc, #176]	; (8006c08 <MAG_Common+0x288>)
 8006b58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	4b2b      	ldr	r3, [pc, #172]	; (8006c0c <MAG_Common+0x28c>)
 8006b60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	0fda      	lsrs	r2, r3, #31
 8006b68:	4413      	add	r3, r2
 8006b6a:	105b      	asrs	r3, r3, #1
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4b2c      	ldr	r3, [pc, #176]	; (8006c20 <MAG_Common+0x2a0>)
 8006b70:	609a      	str	r2, [r3, #8]

		float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8006b72:	4b2b      	ldr	r3, [pc, #172]	; (8006c20 <MAG_Common+0x2a0>)
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	4b2a      	ldr	r3, [pc, #168]	; (8006c20 <MAG_Common+0x2a0>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	441a      	add	r2, r3
 8006b7c:	4b28      	ldr	r3, [pc, #160]	; (8006c20 <MAG_Common+0x2a0>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	4413      	add	r3, r2
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fa f8c4 	bl	8000d10 <__aeabi_i2f>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	603b      	str	r3, [r7, #0]
		avg_rad /= 3.0;
 8006b8c:	4925      	ldr	r1, [pc, #148]	; (8006c24 <MAG_Common+0x2a4>)
 8006b8e:	6838      	ldr	r0, [r7, #0]
 8006b90:	f7fa f9c6 	bl	8000f20 <__aeabi_fdiv>
 8006b94:	4603      	mov	r3, r0
 8006b96:	603b      	str	r3, [r7, #0]

		magScale[0] = avg_rad/((float)mag_scale[0]);
 8006b98:	4b21      	ldr	r3, [pc, #132]	; (8006c20 <MAG_Common+0x2a0>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fa f8b7 	bl	8000d10 <__aeabi_i2f>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6838      	ldr	r0, [r7, #0]
 8006ba8:	f7fa f9ba 	bl	8000f20 <__aeabi_fdiv>
 8006bac:	4603      	mov	r3, r0
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4b1d      	ldr	r3, [pc, #116]	; (8006c28 <MAG_Common+0x2a8>)
 8006bb2:	601a      	str	r2, [r3, #0]
		magScale[1] = avg_rad/((float)mag_scale[1]);
 8006bb4:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <MAG_Common+0x2a0>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fa f8a9 	bl	8000d10 <__aeabi_i2f>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6838      	ldr	r0, [r7, #0]
 8006bc4:	f7fa f9ac 	bl	8000f20 <__aeabi_fdiv>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	461a      	mov	r2, r3
 8006bcc:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <MAG_Common+0x2a8>)
 8006bce:	605a      	str	r2, [r3, #4]
		magScale[2] = avg_rad/((float)mag_scale[2]);
 8006bd0:	4b13      	ldr	r3, [pc, #76]	; (8006c20 <MAG_Common+0x2a0>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fa f89b 	bl	8000d10 <__aeabi_i2f>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6838      	ldr	r0, [r7, #0]
 8006be0:	f7fa f99e 	bl	8000f20 <__aeabi_fdiv>
 8006be4:	4603      	mov	r3, r0
 8006be6:	461a      	mov	r2, r3
 8006be8:	4b0f      	ldr	r3, [pc, #60]	; (8006c28 <MAG_Common+0x2a8>)
 8006bea:	609a      	str	r2, [r3, #8]
	}
	for(axis=0;axis<3;axis++)
 8006bec:	2300      	movs	r3, #0
 8006bee:	71fb      	strb	r3, [r7, #7]
 8006bf0:	e073      	b.n	8006cda <MAG_Common+0x35a>
 8006bf2:	bf00      	nop
 8006bf4:	20000ed4 	.word	0x20000ed4
 8006bf8:	2000039c 	.word	0x2000039c
 8006bfc:	20000e20 	.word	0x20000e20
 8006c00:	200003a0 	.word	0x200003a0
 8006c04:	200003a8 	.word	0x200003a8
 8006c08:	20000014 	.word	0x20000014
 8006c0c:	2000001c 	.word	0x2000001c
 8006c10:	200003ac 	.word	0x200003ac
 8006c14:	20000ad8 	.word	0x20000ad8
 8006c18:	20000338 	.word	0x20000338
 8006c1c:	20000344 	.word	0x20000344
 8006c20:	200003b8 	.word	0x200003b8
 8006c24:	40400000 	.word	0x40400000
 8006c28:	20000f00 	.word	0x20000f00
	{
		imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	4a2e      	ldr	r2, [pc, #184]	; (8006ce8 <MAG_Common+0x368>)
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	4413      	add	r3, r2
 8006c34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fa f869 	bl	8000d10 <__aeabi_i2f>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	4b2a      	ldr	r3, [pc, #168]	; (8006cec <MAG_Common+0x36c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	f7fa f8b6 	bl	8000db8 <__aeabi_fmul>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	4a27      	ldr	r2, [pc, #156]	; (8006cf0 <MAG_Common+0x370>)
 8006c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	f7fa f8ad 	bl	8000db8 <__aeabi_fmul>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4618      	mov	r0, r3
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	4a23      	ldr	r2, [pc, #140]	; (8006cf4 <MAG_Common+0x374>)
 8006c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6a:	79fc      	ldrb	r4, [r7, #7]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	f7f9 ff99 	bl	8000ba4 <__aeabi_fsub>
 8006c72:	4603      	mov	r3, r0
 8006c74:	4619      	mov	r1, r3
 8006c76:	4a1c      	ldr	r2, [pc, #112]	; (8006ce8 <MAG_Common+0x368>)
 8006c78:	f104 0314 	add.w	r3, r4, #20
 8006c7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (mag_lpf_factor > 0) {
			magLPF[axis] = magLPF[axis] * (1.0f - (1.0f / mag_lpf_factor)) + imu.magRaw[axis] * (1.0f / mag_lpf_factor);
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	4a1d      	ldr	r2, [pc, #116]	; (8006cf8 <MAG_Common+0x378>)
 8006c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c88:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fa f893 	bl	8000db8 <__aeabi_fmul>
 8006c92:	4603      	mov	r3, r0
 8006c94:	461d      	mov	r5, r3
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	4a13      	ldr	r2, [pc, #76]	; (8006ce8 <MAG_Common+0x368>)
 8006c9a:	3314      	adds	r3, #20
 8006c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca0:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fa f887 	bl	8000db8 <__aeabi_fmul>
 8006caa:	4603      	mov	r3, r0
 8006cac:	79fc      	ldrb	r4, [r7, #7]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f7f9 ff79 	bl	8000ba8 <__addsf3>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4b0f      	ldr	r3, [pc, #60]	; (8006cf8 <MAG_Common+0x378>)
 8006cbc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			imu.magSmooth[axis] = magLPF[axis];
 8006cc0:	79fa      	ldrb	r2, [r7, #7]
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
 8006cc4:	490c      	ldr	r1, [pc, #48]	; (8006cf8 <MAG_Common+0x378>)
 8006cc6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006cca:	4907      	ldr	r1, [pc, #28]	; (8006ce8 <MAG_Common+0x368>)
 8006ccc:	3310      	adds	r3, #16
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	440b      	add	r3, r1
 8006cd2:	605a      	str	r2, [r3, #4]
	for(axis=0;axis<3;axis++)
 8006cd4:	79fb      	ldrb	r3, [r7, #7]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	71fb      	strb	r3, [r7, #7]
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d9a5      	bls.n	8006c2c <MAG_Common+0x2ac>
		}
	}
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ce8:	20000e20 	.word	0x20000e20
 8006cec:	20000ad8 	.word	0x20000ad8
 8006cf0:	20000338 	.word	0x20000338
 8006cf4:	20000344 	.word	0x20000344
 8006cf8:	200003c4 	.word	0x200003c4
 8006cfc:	00000000 	.word	0x00000000

08006d00 <CAL_Heading>:

void CAL_Heading(void)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b089      	sub	sp, #36	; 0x24
 8006d04:	af00      	add	r7, sp, #0
	static uint8_t ind = 0;
	static float heading[HEADING_SMOOTH], h_sum;

	float cosineRoll = cosf(imu.AHRS[ROLL] * 0.0174533f);
 8006d06:	4b54      	ldr	r3, [pc, #336]	; (8006e58 <CAL_Heading+0x158>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0c:	4953      	ldr	r1, [pc, #332]	; (8006e5c <CAL_Heading+0x15c>)
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fa f852 	bl	8000db8 <__aeabi_fmul>
 8006d14:	4603      	mov	r3, r0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f00e fce2 	bl	80156e0 <cosf>
 8006d1c:	61b8      	str	r0, [r7, #24]
	float sineRoll = sinf(imu.AHRS[ROLL] * 0.0174533f);
 8006d1e:	4b4e      	ldr	r3, [pc, #312]	; (8006e58 <CAL_Heading+0x158>)
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d24:	494d      	ldr	r1, [pc, #308]	; (8006e5c <CAL_Heading+0x15c>)
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fa f846 	bl	8000db8 <__aeabi_fmul>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f00e fd44 	bl	80157bc <sinf>
 8006d34:	6178      	str	r0, [r7, #20]
	float cosinePitch = cosf(imu.AHRS[PITCH] * 0.0174533f);
 8006d36:	4b48      	ldr	r3, [pc, #288]	; (8006e58 <CAL_Heading+0x158>)
 8006d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d3c:	4947      	ldr	r1, [pc, #284]	; (8006e5c <CAL_Heading+0x15c>)
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fa f83a 	bl	8000db8 <__aeabi_fmul>
 8006d44:	4603      	mov	r3, r0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f00e fcca 	bl	80156e0 <cosf>
 8006d4c:	6138      	str	r0, [r7, #16]
	float sinePitch = sinf(imu.AHRS[PITCH] * 0.0174533f);
 8006d4e:	4b42      	ldr	r3, [pc, #264]	; (8006e58 <CAL_Heading+0x158>)
 8006d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d54:	4941      	ldr	r1, [pc, #260]	; (8006e5c <CAL_Heading+0x15c>)
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fa f82e 	bl	8000db8 <__aeabi_fmul>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f00e fd2c 	bl	80157bc <sinf>
 8006d64:	60f8      	str	r0, [r7, #12]
	float Xh = imu.magSmooth[ROLL] * cosinePitch + imu.magSmooth[PITCH] * sineRoll * sinePitch + imu.magSmooth[YAW] * sinePitch * cosineRoll;
 8006d66:	4b3c      	ldr	r3, [pc, #240]	; (8006e58 <CAL_Heading+0x158>)
 8006d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6a:	6939      	ldr	r1, [r7, #16]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fa f823 	bl	8000db8 <__aeabi_fmul>
 8006d72:	4603      	mov	r3, r0
 8006d74:	461c      	mov	r4, r3
 8006d76:	4b38      	ldr	r3, [pc, #224]	; (8006e58 <CAL_Heading+0x158>)
 8006d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7a:	6979      	ldr	r1, [r7, #20]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fa f81b 	bl	8000db8 <__aeabi_fmul>
 8006d82:	4603      	mov	r3, r0
 8006d84:	68f9      	ldr	r1, [r7, #12]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fa f816 	bl	8000db8 <__aeabi_fmul>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4620      	mov	r0, r4
 8006d92:	f7f9 ff09 	bl	8000ba8 <__addsf3>
 8006d96:	4603      	mov	r3, r0
 8006d98:	461c      	mov	r4, r3
 8006d9a:	4b2f      	ldr	r3, [pc, #188]	; (8006e58 <CAL_Heading+0x158>)
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9e:	68f9      	ldr	r1, [r7, #12]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fa f809 	bl	8000db8 <__aeabi_fmul>
 8006da6:	4603      	mov	r3, r0
 8006da8:	69b9      	ldr	r1, [r7, #24]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fa f804 	bl	8000db8 <__aeabi_fmul>
 8006db0:	4603      	mov	r3, r0
 8006db2:	4619      	mov	r1, r3
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7f9 fef7 	bl	8000ba8 <__addsf3>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	60bb      	str	r3, [r7, #8]
	float Yh = imu.magSmooth[PITCH] * cosineRoll - imu.magSmooth[YAW] * sineRoll;
 8006dbe:	4b26      	ldr	r3, [pc, #152]	; (8006e58 <CAL_Heading+0x158>)
 8006dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc2:	69b9      	ldr	r1, [r7, #24]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7f9 fff7 	bl	8000db8 <__aeabi_fmul>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	461c      	mov	r4, r3
 8006dce:	4b22      	ldr	r3, [pc, #136]	; (8006e58 <CAL_Heading+0x158>)
 8006dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd2:	6979      	ldr	r1, [r7, #20]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7f9 ffef 	bl	8000db8 <__aeabi_fmul>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4620      	mov	r0, r4
 8006de0:	f7f9 fee0 	bl	8000ba4 <__aeabi_fsub>
 8006de4:	4603      	mov	r3, r0
 8006de6:	607b      	str	r3, [r7, #4]
	float hd = (atan2f(Yh, Xh) * 180.0f / M_PI);
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f00e ff78 	bl	8015ce0 <atan2f>
 8006df0:	4603      	mov	r3, r0
 8006df2:	491b      	ldr	r1, [pc, #108]	; (8006e60 <CAL_Heading+0x160>)
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7f9 ffdf 	bl	8000db8 <__aeabi_fmul>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7f9 fb2d 	bl	800045c <__aeabi_f2d>
 8006e02:	a313      	add	r3, pc, #76	; (adr r3, 8006e50 <CAL_Heading+0x150>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f7f9 fcaa 	bl	8000760 <__aeabi_ddiv>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	4618      	mov	r0, r3
 8006e12:	4621      	mov	r1, r4
 8006e14:	f7f9 fe72 	bl	8000afc <__aeabi_d2f>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	603b      	str	r3, [r7, #0]
	int32_t head = lrintf(hd);
 8006e1c:	6838      	ldr	r0, [r7, #0]
 8006e1e:	f00e fc93 	bl	8015748 <lrintf>
 8006e22:	61f8      	str	r0, [r7, #28]
	if (head < 0)
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	da03      	bge.n	8006e32 <CAL_Heading+0x132>
		head += 360;
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e30:	61fb      	str	r3, [r7, #28]
	imu.actual_compass_heading = head;
 8006e32:	4a09      	ldr	r2, [pc, #36]	; (8006e58 <CAL_Heading+0x158>)
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		h_sum -= heading[ind];
		heading[ind++] = imu.actual_compass_heading;
		ind %= HEADING_SMOOTH;
		imu.actual_compass_heading = h_sum/HEADING_SMOOTH;
	}
	att.mag_heading = (int16_t) imu.actual_compass_heading;
 8006e3a:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <CAL_Heading+0x158>)
 8006e3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e40:	b21a      	sxth	r2, r3
 8006e42:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <CAL_Heading+0x164>)
 8006e44:	80da      	strh	r2, [r3, #6]
}
 8006e46:	bf00      	nop
 8006e48:	3724      	adds	r7, #36	; 0x24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd90      	pop	{r4, r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	54442d18 	.word	0x54442d18
 8006e54:	400921fb 	.word	0x400921fb
 8006e58:	20000e20 	.word	0x20000e20
 8006e5c:	3c8efa39 	.word	0x3c8efa39
 8006e60:	43340000 	.word	0x43340000
 8006e64:	20000ef8 	.word	0x20000ef8

08006e68 <Temp_getADC>:

void Temp_getADC(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af02      	add	r7, sp, #8
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 8006e6e:	2302      	movs	r3, #2
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <Temp_getADC+0x5c>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	2141      	movs	r1, #65	; 0x41
 8006e78:	20d2      	movs	r0, #210	; 0xd2
 8006e7a:	f004 f9df 	bl	800b23c <I2C_ByteRead>
	/* Get acceleration */
	imu.rawTemp = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8006e7e:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <Temp_getADC+0x5c>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	b21a      	sxth	r2, r3
 8006e86:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <Temp_getADC+0x5c>)
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	b21b      	sxth	r3, r3
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b21a      	sxth	r2, r3
 8006e90:	4b0d      	ldr	r3, [pc, #52]	; (8006ec8 <Temp_getADC+0x60>)
 8006e92:	819a      	strh	r2, [r3, #12]
	imu.Temp = ((float)imu.rawTemp / 337.87f) + 21.0f;
 8006e94:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <Temp_getADC+0x60>)
 8006e96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7f9 ff38 	bl	8000d10 <__aeabi_i2f>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	490a      	ldr	r1, [pc, #40]	; (8006ecc <Temp_getADC+0x64>)
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fa f83b 	bl	8000f20 <__aeabi_fdiv>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4908      	ldr	r1, [pc, #32]	; (8006ed0 <Temp_getADC+0x68>)
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7f9 fe7a 	bl	8000ba8 <__addsf3>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <Temp_getADC+0x60>)
 8006eba:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ebc:	bf00      	nop
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000f0c 	.word	0x20000f0c
 8006ec8:	20000e20 	.word	0x20000e20
 8006ecc:	43a8ef5c 	.word	0x43a8ef5c
 8006ed0:	41a80000 	.word	0x41a80000

08006ed4 <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2)
{
 8006ed4:	b5b0      	push	{r4, r5, r7, lr}
 8006ed6:	b09a      	sub	sp, #104	; 0x68
 8006ed8:	af02      	add	r7, sp, #8
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8006ede:	2300      	movs	r3, #0
 8006ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8006eea:	2300      	movs	r3, #0
 8006eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eee:	2300      	movs	r3, #0
 8006ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8006ef6:	2380      	movs	r3, #128	; 0x80
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	2308      	movs	r3, #8
 8006efc:	2207      	movs	r2, #7
 8006efe:	216b      	movs	r1, #107	; 0x6b
 8006f00:	20d2      	movs	r0, #210	; 0xd2
 8006f02:	f004 f913 	bl	800b12c <I2C_ByteWrite>
	HAL_Delay(100); // for stability
 8006f06:	2064      	movs	r0, #100	; 0x64
 8006f08:	f005 fc38 	bl	800c77c <HAL_Delay>
	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	2308      	movs	r3, #8
 8006f12:	2207      	movs	r2, #7
 8006f14:	216b      	movs	r1, #107	; 0x6b
 8006f16:	20d2      	movs	r0, #210	; 0xd2
 8006f18:	f004 f908 	bl	800b12c <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	2308      	movs	r3, #8
 8006f22:	2207      	movs	r2, #7
 8006f24:	216c      	movs	r1, #108	; 0x6c
 8006f26:	20d2      	movs	r0, #210	; 0xd2
 8006f28:	f004 f900 	bl	800b12c <I2C_ByteWrite>
	HAL_Delay(200); // for stability
 8006f2c:	20c8      	movs	r0, #200	; 0xc8
 8006f2e:	f005 fc25 	bl	800c77c <HAL_Delay>

	// Configure device for bias calculation
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
 8006f32:	2300      	movs	r3, #0
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	2308      	movs	r3, #8
 8006f38:	2207      	movs	r2, #7
 8006f3a:	2138      	movs	r1, #56	; 0x38
 8006f3c:	20d2      	movs	r0, #210	; 0xd2
 8006f3e:	f004 f8f5 	bl	800b12c <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
 8006f42:	2300      	movs	r3, #0
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	2308      	movs	r3, #8
 8006f48:	2207      	movs	r2, #7
 8006f4a:	2123      	movs	r1, #35	; 0x23
 8006f4c:	20d2      	movs	r0, #210	; 0xd2
 8006f4e:	f004 f8ed 	bl	800b12c <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
 8006f52:	2300      	movs	r3, #0
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	2308      	movs	r3, #8
 8006f58:	2207      	movs	r2, #7
 8006f5a:	216b      	movs	r1, #107	; 0x6b
 8006f5c:	20d2      	movs	r0, #210	; 0xd2
 8006f5e:	f004 f8e5 	bl	800b12c <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
 8006f62:	2300      	movs	r3, #0
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	2308      	movs	r3, #8
 8006f68:	2207      	movs	r2, #7
 8006f6a:	2124      	movs	r1, #36	; 0x24
 8006f6c:	20d2      	movs	r0, #210	; 0xd2
 8006f6e:	f004 f8dd 	bl	800b12c <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
 8006f72:	2300      	movs	r3, #0
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	2308      	movs	r3, #8
 8006f78:	2207      	movs	r2, #7
 8006f7a:	216a      	movs	r1, #106	; 0x6a
 8006f7c:	20d2      	movs	r0, #210	; 0xd2
 8006f7e:	f004 f8d5 	bl	800b12c <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 8006f82:	230c      	movs	r3, #12
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	2308      	movs	r3, #8
 8006f88:	2207      	movs	r2, #7
 8006f8a:	216a      	movs	r1, #106	; 0x6a
 8006f8c:	20d2      	movs	r0, #210	; 0xd2
 8006f8e:	f004 f8cd 	bl	800b12c <I2C_ByteWrite>
	HAL_Delay(15); // for stability
 8006f92:	200f      	movs	r0, #15
 8006f94:	f005 fbf2 	bl	800c77c <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation.

	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x01); // Set low-pass filter to 188 Hz
 8006f98:	2301      	movs	r3, #1
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	2308      	movs	r3, #8
 8006f9e:	2207      	movs	r2, #7
 8006fa0:	211a      	movs	r1, #26
 8006fa2:	20d2      	movs	r0, #210	; 0xd2
 8006fa4:	f004 f8c2 	bl	800b12c <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set sample rate to 1 kHz
 8006fa8:	2300      	movs	r3, #0
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	2308      	movs	r3, #8
 8006fae:	2207      	movs	r2, #7
 8006fb0:	2119      	movs	r1, #25
 8006fb2:	20d2      	movs	r0, #210	; 0xd2
 8006fb4:	f004 f8ba 	bl	800b12c <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	2207      	movs	r2, #7
 8006fc0:	211b      	movs	r1, #27
 8006fc2:	20d2      	movs	r0, #210	; 0xd2
 8006fc4:	f004 f8b2 	bl	800b12c <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8006fc8:	2300      	movs	r3, #0
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	2308      	movs	r3, #8
 8006fce:	2207      	movs	r2, #7
 8006fd0:	211c      	movs	r1, #28
 8006fd2:	20d2      	movs	r0, #210	; 0xd2
 8006fd4:	f004 f8aa 	bl	800b12c <I2C_ByteWrite>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8006fd8:	2383      	movs	r3, #131	; 0x83
 8006fda:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8006fde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006fe2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x40); // Enable FIFO
 8006fe6:	2340      	movs	r3, #64	; 0x40
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	2308      	movs	r3, #8
 8006fec:	2207      	movs	r2, #7
 8006fee:	216a      	movs	r1, #106	; 0x6a
 8006ff0:	20d2      	movs	r0, #210	; 0xd2
 8006ff2:	f004 f89b 	bl	800b12c <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8006ff6:	2378      	movs	r3, #120	; 0x78
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	2308      	movs	r3, #8
 8006ffc:	2207      	movs	r2, #7
 8006ffe:	2123      	movs	r1, #35	; 0x23
 8007000:	20d2      	movs	r0, #210	; 0xd2
 8007002:	f004 f893 	bl	800b12c <I2C_ByteWrite>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8007006:	2028      	movs	r0, #40	; 0x28
 8007008:	f005 fbb8 	bl	800c77c <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable gyro and accelerometer sensors for FIFO
 800700c:	2300      	movs	r3, #0
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	2308      	movs	r3, #8
 8007012:	2207      	movs	r2, #7
 8007014:	2123      	movs	r1, #35	; 0x23
 8007016:	20d2      	movs	r0, #210	; 0xd2
 8007018:	f004 f888 	bl	800b12c <I2C_ByteWrite>
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_COUNTH, 1, rawADC, 2);// read FIFO sample count
 800701c:	2302      	movs	r3, #2
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	4b61      	ldr	r3, [pc, #388]	; (80071a8 <calibrateMPU9250+0x2d4>)
 8007022:	2201      	movs	r2, #1
 8007024:	2172      	movs	r1, #114	; 0x72
 8007026:	20d2      	movs	r0, #210	; 0xd2
 8007028:	f004 f908 	bl	800b23c <I2C_ByteRead>
	fifo_count = ((uint16_t)rawADC[0] << 8) | rawADC[1];
 800702c:	4b5e      	ldr	r3, [pc, #376]	; (80071a8 <calibrateMPU9250+0x2d4>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	b21a      	sxth	r2, r3
 8007034:	4b5c      	ldr	r3, [pc, #368]	; (80071a8 <calibrateMPU9250+0x2d4>)
 8007036:	785b      	ldrb	r3, [r3, #1]
 8007038:	b21b      	sxth	r3, r3
 800703a:	4313      	orrs	r3, r2
 800703c:	b21b      	sxth	r3, r3
 800703e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8007042:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8007046:	4a59      	ldr	r2, [pc, #356]	; (80071ac <calibrateMPU9250+0x2d8>)
 8007048:	fba2 2303 	umull	r2, r3, r2, r3
 800704c:	08db      	lsrs	r3, r3, #3
 800704e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (ii = 0; ii < packet_count; ii++)
 8007052:	2300      	movs	r3, #0
 8007054:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007058:	e072      	b.n	8007140 <calibrateMPU9250+0x26c>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 800705a:	2300      	movs	r3, #0
 800705c:	82bb      	strh	r3, [r7, #20]
 800705e:	2300      	movs	r3, #0
 8007060:	82fb      	strh	r3, [r7, #22]
 8007062:	2300      	movs	r3, #0
 8007064:	833b      	strh	r3, [r7, #24]
 8007066:	2300      	movs	r3, #0
 8007068:	81bb      	strh	r3, [r7, #12]
 800706a:	2300      	movs	r3, #0
 800706c:	81fb      	strh	r3, [r7, #14]
 800706e:	2300      	movs	r3, #0
 8007070:	823b      	strh	r3, [r7, #16]
		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_FIFO_R_W, 1, rawADC, 12);// read data for averaging
 8007072:	230c      	movs	r3, #12
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	4b4c      	ldr	r3, [pc, #304]	; (80071a8 <calibrateMPU9250+0x2d4>)
 8007078:	2201      	movs	r2, #1
 800707a:	2174      	movs	r1, #116	; 0x74
 800707c:	20d2      	movs	r0, #210	; 0xd2
 800707e:	f004 f8dd 	bl	800b23c <I2C_ByteRead>

		accel_temp[0] = (int16_t) (((int16_t)rawADC[0] << 8) | rawADC[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8007082:	4b49      	ldr	r3, [pc, #292]	; (80071a8 <calibrateMPU9250+0x2d4>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	b21a      	sxth	r2, r3
 800708a:	4b47      	ldr	r3, [pc, #284]	; (80071a8 <calibrateMPU9250+0x2d4>)
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	b21b      	sxth	r3, r3
 8007090:	4313      	orrs	r3, r2
 8007092:	b21b      	sxth	r3, r3
 8007094:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 8007096:	4b44      	ldr	r3, [pc, #272]	; (80071a8 <calibrateMPU9250+0x2d4>)
 8007098:	789b      	ldrb	r3, [r3, #2]
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	b21a      	sxth	r2, r3
 800709e:	4b42      	ldr	r3, [pc, #264]	; (80071a8 <calibrateMPU9250+0x2d4>)
 80070a0:	78db      	ldrb	r3, [r3, #3]
 80070a2:	b21b      	sxth	r3, r3
 80070a4:	4313      	orrs	r3, r2
 80070a6:	b21b      	sxth	r3, r3
 80070a8:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 80070aa:	4b3f      	ldr	r3, [pc, #252]	; (80071a8 <calibrateMPU9250+0x2d4>)
 80070ac:	791b      	ldrb	r3, [r3, #4]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	b21a      	sxth	r2, r3
 80070b2:	4b3d      	ldr	r3, [pc, #244]	; (80071a8 <calibrateMPU9250+0x2d4>)
 80070b4:	795b      	ldrb	r3, [r3, #5]
 80070b6:	b21b      	sxth	r3, r3
 80070b8:	4313      	orrs	r3, r2
 80070ba:	b21b      	sxth	r3, r3
 80070bc:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)rawADC[6] << 8) | rawADC[7]  ) ;
 80070be:	4b3a      	ldr	r3, [pc, #232]	; (80071a8 <calibrateMPU9250+0x2d4>)
 80070c0:	799b      	ldrb	r3, [r3, #6]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	b21a      	sxth	r2, r3
 80070c6:	4b38      	ldr	r3, [pc, #224]	; (80071a8 <calibrateMPU9250+0x2d4>)
 80070c8:	79db      	ldrb	r3, [r3, #7]
 80070ca:	b21b      	sxth	r3, r3
 80070cc:	4313      	orrs	r3, r2
 80070ce:	b21b      	sxth	r3, r3
 80070d0:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)rawADC[8] << 8) | rawADC[9]  ) ;
 80070d2:	4b35      	ldr	r3, [pc, #212]	; (80071a8 <calibrateMPU9250+0x2d4>)
 80070d4:	7a1b      	ldrb	r3, [r3, #8]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	b21a      	sxth	r2, r3
 80070da:	4b33      	ldr	r3, [pc, #204]	; (80071a8 <calibrateMPU9250+0x2d4>)
 80070dc:	7a5b      	ldrb	r3, [r3, #9]
 80070de:	b21b      	sxth	r3, r3
 80070e0:	4313      	orrs	r3, r2
 80070e2:	b21b      	sxth	r3, r3
 80070e4:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)rawADC[10] << 8) | rawADC[11]) ;
 80070e6:	4b30      	ldr	r3, [pc, #192]	; (80071a8 <calibrateMPU9250+0x2d4>)
 80070e8:	7a9b      	ldrb	r3, [r3, #10]
 80070ea:	021b      	lsls	r3, r3, #8
 80070ec:	b21a      	sxth	r2, r3
 80070ee:	4b2e      	ldr	r3, [pc, #184]	; (80071a8 <calibrateMPU9250+0x2d4>)
 80070f0:	7adb      	ldrb	r3, [r3, #11]
 80070f2:	b21b      	sxth	r3, r3
 80070f4:	4313      	orrs	r3, r2
 80070f6:	b21b      	sxth	r3, r3
 80070f8:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007100:	4413      	add	r3, r2
 8007102:	62fb      	str	r3, [r7, #44]	; 0x2c
		accel_bias[1] += (int32_t) accel_temp[1];
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800710a:	4413      	add	r3, r2
 800710c:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[2] += (int32_t) accel_temp[2];
 800710e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007110:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007114:	4413      	add	r3, r2
 8007116:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8007122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007124:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007128:	4413      	add	r3, r2
 800712a:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 800712c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800712e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007132:	4413      	add	r3, r2
 8007134:	643b      	str	r3, [r7, #64]	; 0x40
	for (ii = 0; ii < packet_count; ii++)
 8007136:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800713a:	3301      	adds	r3, #1
 800713c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007140:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8007144:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007148:	429a      	cmp	r2, r3
 800714a:	d386      	bcc.n	800705a <calibrateMPU9250+0x186>

	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 800714c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800714e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007152:	fb92 f3f3 	sdiv	r3, r2, r3
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
	accel_bias[1] /= (int32_t) packet_count;
 8007158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800715e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007162:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[2] /= (int32_t) packet_count;
 8007164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800716a:	fb92 f3f3 	sdiv	r3, r2, r3
 800716e:	637b      	str	r3, [r7, #52]	; 0x34
	gyro_bias[0]  /= (int32_t) packet_count;
 8007170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007172:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007176:	fb92 f3f3 	sdiv	r3, r2, r3
 800717a:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[1]  /= (int32_t) packet_count;
 800717c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800717e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007182:	fb92 f3f3 	sdiv	r3, r2, r3
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[2]  /= (int32_t) packet_count;
 8007188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800718a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800718e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007192:	643b      	str	r3, [r7, #64]	; 0x40

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	2b00      	cmp	r3, #0
 8007198:	dd0a      	ble.n	80071b0 <calibrateMPU9250+0x2dc>
 800719a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800719c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
 80071a4:	e009      	b.n	80071ba <calibrateMPU9250+0x2e6>
 80071a6:	bf00      	nop
 80071a8:	20000f0c 	.word	0x20000f0c
 80071ac:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 80071b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071b2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80071b6:	4413      	add	r3, r2
 80071b8:	637b      	str	r3, [r7, #52]	; 0x34

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	425b      	negs	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	da00      	bge.n	80071c4 <calibrateMPU9250+0x2f0>
 80071c2:	3303      	adds	r3, #3
 80071c4:	109b      	asrs	r3, r3, #2
 80071c6:	121b      	asrs	r3, r3, #8
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	425b      	negs	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	da00      	bge.n	80071d8 <calibrateMPU9250+0x304>
 80071d6:	3303      	adds	r3, #3
 80071d8:	109b      	asrs	r3, r3, #2
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80071e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e2:	425b      	negs	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	da00      	bge.n	80071ea <calibrateMPU9250+0x316>
 80071e8:	3303      	adds	r3, #3
 80071ea:	109b      	asrs	r3, r3, #2
 80071ec:	121b      	asrs	r3, r3, #8
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
 80071f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f6:	425b      	negs	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	da00      	bge.n	80071fe <calibrateMPU9250+0x32a>
 80071fc:	3303      	adds	r3, #3
 80071fe:	109b      	asrs	r3, r3, #2
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8007206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007208:	425b      	negs	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	da00      	bge.n	8007210 <calibrateMPU9250+0x33c>
 800720e:	3303      	adds	r3, #3
 8007210:	109b      	asrs	r3, r3, #2
 8007212:	121b      	asrs	r3, r3, #8
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
 800721a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721c:	425b      	negs	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	da00      	bge.n	8007224 <calibrateMPU9250+0x350>
 8007222:	3303      	adds	r3, #3
 8007224:	109b      	asrs	r3, r3, #2
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YG_OFFS_USRL, 7, 8, data[3]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRH, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRL, 7, 8, data[5]);
	 */

	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	4618      	mov	r0, r3
 8007230:	f7f9 fd6e 	bl	8000d10 <__aeabi_i2f>
 8007234:	4604      	mov	r4, r0
 8007236:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800723a:	4618      	mov	r0, r3
 800723c:	f7f9 fd64 	bl	8000d08 <__aeabi_ui2f>
 8007240:	4603      	mov	r3, r0
 8007242:	4619      	mov	r1, r3
 8007244:	4620      	mov	r0, r4
 8007246:	f7f9 fe6b 	bl	8000f20 <__aeabi_fdiv>
 800724a:	4603      	mov	r3, r0
 800724c:	461a      	mov	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8007252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007254:	4618      	mov	r0, r3
 8007256:	f7f9 fd5b 	bl	8000d10 <__aeabi_i2f>
 800725a:	4605      	mov	r5, r0
 800725c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007260:	4618      	mov	r0, r3
 8007262:	f7f9 fd51 	bl	8000d08 <__aeabi_ui2f>
 8007266:	4602      	mov	r2, r0
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	1d1c      	adds	r4, r3, #4
 800726c:	4611      	mov	r1, r2
 800726e:	4628      	mov	r0, r5
 8007270:	f7f9 fe56 	bl	8000f20 <__aeabi_fdiv>
 8007274:	4603      	mov	r3, r0
 8007276:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8007278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800727a:	4618      	mov	r0, r3
 800727c:	f7f9 fd48 	bl	8000d10 <__aeabi_i2f>
 8007280:	4605      	mov	r5, r0
 8007282:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007286:	4618      	mov	r0, r3
 8007288:	f7f9 fd3e 	bl	8000d08 <__aeabi_ui2f>
 800728c:	4602      	mov	r2, r0
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f103 0408 	add.w	r4, r3, #8
 8007294:	4611      	mov	r1, r2
 8007296:	4628      	mov	r0, r5
 8007298:	f7f9 fe42 	bl	8000f20 <__aeabi_fdiv>
 800729c:	4603      	mov	r3, r0
 800729e:	6023      	str	r3, [r4, #0]
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 80072a0:	2300      	movs	r3, #0
 80072a2:	623b      	str	r3, [r7, #32]
 80072a4:	2300      	movs	r3, #0
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
 80072a8:	2300      	movs	r3, #0
 80072aa:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 80072ac:	2302      	movs	r3, #2
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	4b71      	ldr	r3, [pc, #452]	; (8007478 <calibrateMPU9250+0x5a4>)
 80072b2:	2201      	movs	r2, #1
 80072b4:	2177      	movs	r1, #119	; 0x77
 80072b6:	20d2      	movs	r0, #210	; 0xd2
 80072b8:	f003 ffc0 	bl	800b23c <I2C_ByteRead>
	accel_bias_reg[0] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
 80072bc:	4b6e      	ldr	r3, [pc, #440]	; (8007478 <calibrateMPU9250+0x5a4>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	b21b      	sxth	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	4b6c      	ldr	r3, [pc, #432]	; (8007478 <calibrateMPU9250+0x5a4>)
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	623b      	str	r3, [r7, #32]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YA_OFFSET_H, 1, rawADC, 2);
 80072ce:	2302      	movs	r3, #2
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	4b69      	ldr	r3, [pc, #420]	; (8007478 <calibrateMPU9250+0x5a4>)
 80072d4:	2201      	movs	r2, #1
 80072d6:	217a      	movs	r1, #122	; 0x7a
 80072d8:	20d2      	movs	r0, #210	; 0xd2
 80072da:	f003 ffaf 	bl	800b23c <I2C_ByteRead>
	accel_bias_reg[1] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
 80072de:	4b66      	ldr	r3, [pc, #408]	; (8007478 <calibrateMPU9250+0x5a4>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	021b      	lsls	r3, r3, #8
 80072e4:	b21b      	sxth	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	4b63      	ldr	r3, [pc, #396]	; (8007478 <calibrateMPU9250+0x5a4>)
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 1, rawADC, 2);
 80072f0:	2302      	movs	r3, #2
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	4b60      	ldr	r3, [pc, #384]	; (8007478 <calibrateMPU9250+0x5a4>)
 80072f6:	2201      	movs	r2, #1
 80072f8:	217d      	movs	r1, #125	; 0x7d
 80072fa:	20d2      	movs	r0, #210	; 0xd2
 80072fc:	f003 ff9e 	bl	800b23c <I2C_ByteRead>
	accel_bias_reg[2] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
 8007300:	4b5d      	ldr	r3, [pc, #372]	; (8007478 <calibrateMPU9250+0x5a4>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	b21b      	sxth	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	4b5b      	ldr	r3, [pc, #364]	; (8007478 <calibrateMPU9250+0x5a4>)
 800730c:	785b      	ldrb	r3, [r3, #1]
 800730e:	4313      	orrs	r3, r2
 8007310:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8007312:	2301      	movs	r3, #1
 8007314:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8007316:	2300      	movs	r3, #0
 8007318:	773b      	strb	r3, [r7, #28]
 800731a:	2300      	movs	r3, #0
 800731c:	777b      	strb	r3, [r7, #29]
 800731e:	2300      	movs	r3, #0
 8007320:	77bb      	strb	r3, [r7, #30]

	for(ii = 0; ii < 3; ii++)
 8007322:	2300      	movs	r3, #0
 8007324:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007328:	e019      	b.n	800735e <calibrateMPU9250+0x48a>
	{
		if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 800732a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007334:	4413      	add	r3, r2
 8007336:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800733a:	461a      	mov	r2, r3
 800733c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800733e:	4013      	ands	r3, r2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d007      	beq.n	8007354 <calibrateMPU9250+0x480>
 8007344:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007348:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800734c:	4413      	add	r3, r2
 800734e:	2201      	movs	r2, #1
 8007350:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(ii = 0; ii < 3; ii++)
 8007354:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007358:	3301      	adds	r3, #1
 800735a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800735e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007362:	2b02      	cmp	r3, #2
 8007364:	d9e1      	bls.n	800732a <calibrateMPU9250+0x456>
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	2b00      	cmp	r3, #0
 800736c:	da00      	bge.n	8007370 <calibrateMPU9250+0x49c>
 800736e:	3307      	adds	r3, #7
 8007370:	10db      	asrs	r3, r3, #3
 8007372:	425b      	negs	r3, r3
 8007374:	4413      	add	r3, r2
 8007376:	623b      	str	r3, [r7, #32]
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8007378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	2b00      	cmp	r3, #0
 800737e:	da00      	bge.n	8007382 <calibrateMPU9250+0x4ae>
 8007380:	3307      	adds	r3, #7
 8007382:	10db      	asrs	r3, r3, #3
 8007384:	425b      	negs	r3, r3
 8007386:	4413      	add	r3, r2
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[2] -= (accel_bias[2]/8);
 800738a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800738c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738e:	2b00      	cmp	r3, #0
 8007390:	da00      	bge.n	8007394 <calibrateMPU9250+0x4c0>
 8007392:	3307      	adds	r3, #7
 8007394:	10db      	asrs	r3, r3, #3
 8007396:	425b      	negs	r3, r3
 8007398:	4413      	add	r3, r2
 800739a:	62bb      	str	r3, [r7, #40]	; 0x28

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	121b      	asrs	r3, r3, #8
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (accel_bias_reg[0])      & 0xFF;
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80073ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80073b2:	7f3b      	ldrb	r3, [r7, #28]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	121b      	asrs	r3, r3, #8
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (accel_bias_reg[1])      & 0xFF;
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80073ce:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80073d2:	7f7b      	ldrb	r3, [r7, #29]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	121b      	asrs	r3, r3, #8
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (accel_bias_reg[2])      & 0xFF;
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80073ee:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80073f2:	7fbb      	ldrb	r3, [r7, #30]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_L, 7, 8, data[5]);*/


	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	4618      	mov	r0, r3
 8007400:	f7f9 fc86 	bl	8000d10 <__aeabi_i2f>
 8007404:	4604      	mov	r4, r0
 8007406:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800740a:	4618      	mov	r0, r3
 800740c:	f7f9 fc7c 	bl	8000d08 <__aeabi_ui2f>
 8007410:	4603      	mov	r3, r0
 8007412:	4619      	mov	r1, r3
 8007414:	4620      	mov	r0, r4
 8007416:	f7f9 fd83 	bl	8000f20 <__aeabi_fdiv>
 800741a:	4603      	mov	r3, r0
 800741c:	461a      	mov	r2, r3
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	601a      	str	r2, [r3, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	4618      	mov	r0, r3
 8007426:	f7f9 fc73 	bl	8000d10 <__aeabi_i2f>
 800742a:	4605      	mov	r5, r0
 800742c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007430:	4618      	mov	r0, r3
 8007432:	f7f9 fc69 	bl	8000d08 <__aeabi_ui2f>
 8007436:	4602      	mov	r2, r0
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	1d1c      	adds	r4, r3, #4
 800743c:	4611      	mov	r1, r2
 800743e:	4628      	mov	r0, r5
 8007440:	f7f9 fd6e 	bl	8000f20 <__aeabi_fdiv>
 8007444:	4603      	mov	r3, r0
 8007446:	6023      	str	r3, [r4, #0]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8007448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744a:	4618      	mov	r0, r3
 800744c:	f7f9 fc60 	bl	8000d10 <__aeabi_i2f>
 8007450:	4605      	mov	r5, r0
 8007452:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007456:	4618      	mov	r0, r3
 8007458:	f7f9 fc56 	bl	8000d08 <__aeabi_ui2f>
 800745c:	4602      	mov	r2, r0
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	f103 0408 	add.w	r4, r3, #8
 8007464:	4611      	mov	r1, r2
 8007466:	4628      	mov	r0, r5
 8007468:	f7f9 fd5a 	bl	8000f20 <__aeabi_fdiv>
 800746c:	4603      	mov	r3, r0
 800746e:	6023      	str	r3, [r4, #0]
}
 8007470:	bf00      	nop
 8007472:	3760      	adds	r7, #96	; 0x60
 8007474:	46bd      	mov	sp, r7
 8007476:	bdb0      	pop	{r4, r5, r7, pc}
 8007478:	20000f0c 	.word	0x20000f0c

0800747c <initAK8963>:
void initAK8963(float * destination){
 800747c:	b590      	push	{r4, r7, lr}
 800747e:	b085      	sub	sp, #20
 8007480:	af02      	add	r7, sp, #8
 8007482:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8007484:	2300      	movs	r3, #0
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	2308      	movs	r3, #8
 800748a:	2207      	movs	r2, #7
 800748c:	210a      	movs	r1, #10
 800748e:	2018      	movs	r0, #24
 8007490:	f003 fe4c 	bl	800b12c <I2C_ByteWrite>
	  HAL_Delay(10);
 8007494:	200a      	movs	r0, #10
 8007496:	f005 f971 	bl	800c77c <HAL_Delay>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x0F);// Enter Fuse ROM access mode
 800749a:	230f      	movs	r3, #15
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	2308      	movs	r3, #8
 80074a0:	2207      	movs	r2, #7
 80074a2:	210a      	movs	r1, #10
 80074a4:	2018      	movs	r0, #24
 80074a6:	f003 fe41 	bl	800b12c <I2C_ByteWrite>
	  HAL_Delay(10);
 80074aa:	200a      	movs	r0, #10
 80074ac:	f005 f966 	bl	800c77c <HAL_Delay>
	  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, AK8963_ASAX, 1, rawADC, 3);// Read the x-, y-, and z-axis calibration values
 80074b0:	2303      	movs	r3, #3
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	4b36      	ldr	r3, [pc, #216]	; (8007590 <initAK8963+0x114>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	2110      	movs	r1, #16
 80074ba:	2018      	movs	r0, #24
 80074bc:	f003 febe 	bl	800b23c <I2C_ByteRead>
	  destination[0] =  (float)(rawADC[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 80074c0:	4b33      	ldr	r3, [pc, #204]	; (8007590 <initAK8963+0x114>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	3b80      	subs	r3, #128	; 0x80
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7f9 fc22 	bl	8000d10 <__aeabi_i2f>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7f9 fd24 	bl	8000f20 <__aeabi_fdiv>
 80074d8:	4603      	mov	r3, r0
 80074da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80074de:	4618      	mov	r0, r3
 80074e0:	f7f9 fb62 	bl	8000ba8 <__addsf3>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	601a      	str	r2, [r3, #0]
	  destination[1] =  (float)(rawADC[1] - 128)/256.0f + 1.0f;
 80074ec:	4b28      	ldr	r3, [pc, #160]	; (8007590 <initAK8963+0x114>)
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	3b80      	subs	r3, #128	; 0x80
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7f9 fc0c 	bl	8000d10 <__aeabi_i2f>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80074fe:	4618      	mov	r0, r3
 8007500:	f7f9 fd0e 	bl	8000f20 <__aeabi_fdiv>
 8007504:	4603      	mov	r3, r0
 8007506:	461a      	mov	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	1d1c      	adds	r4, r3, #4
 800750c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007510:	4610      	mov	r0, r2
 8007512:	f7f9 fb49 	bl	8000ba8 <__addsf3>
 8007516:	4603      	mov	r3, r0
 8007518:	6023      	str	r3, [r4, #0]
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 800751a:	4b1d      	ldr	r3, [pc, #116]	; (8007590 <initAK8963+0x114>)
 800751c:	789b      	ldrb	r3, [r3, #2]
 800751e:	3b80      	subs	r3, #128	; 0x80
 8007520:	4618      	mov	r0, r3
 8007522:	f7f9 fbf5 	bl	8000d10 <__aeabi_i2f>
 8007526:	4603      	mov	r3, r0
 8007528:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800752c:	4618      	mov	r0, r3
 800752e:	f7f9 fcf7 	bl	8000f20 <__aeabi_fdiv>
 8007532:	4603      	mov	r3, r0
 8007534:	461a      	mov	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f103 0408 	add.w	r4, r3, #8
 800753c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007540:	4610      	mov	r0, r2
 8007542:	f7f9 fb31 	bl	8000ba8 <__addsf3>
 8007546:	4603      	mov	r3, r0
 8007548:	6023      	str	r3, [r4, #0]
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 800754a:	2300      	movs	r3, #0
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	2308      	movs	r3, #8
 8007550:	2207      	movs	r2, #7
 8007552:	210a      	movs	r1, #10
 8007554:	2018      	movs	r0, #24
 8007556:	f003 fde9 	bl	800b12c <I2C_ByteWrite>
	  HAL_Delay(10);
 800755a:	200a      	movs	r0, #10
 800755c:	f005 f90e 	bl	800c77c <HAL_Delay>
	  // Configure the magnetometer for continuous read and highest resolution
	  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8007560:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <initAK8963+0x118>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	011b      	lsls	r3, r3, #4
 8007566:	b25a      	sxtb	r2, r3
 8007568:	4b0b      	ldr	r3, [pc, #44]	; (8007598 <initAK8963+0x11c>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	b25b      	sxtb	r3, r3
 800756e:	4313      	orrs	r3, r2
 8007570:	b25b      	sxtb	r3, r3
 8007572:	b2db      	uxtb	r3, r3
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	2308      	movs	r3, #8
 8007578:	2207      	movs	r2, #7
 800757a:	210a      	movs	r1, #10
 800757c:	2018      	movs	r0, #24
 800757e:	f003 fdd5 	bl	800b12c <I2C_ByteWrite>
	  HAL_Delay(10);
 8007582:	200a      	movs	r0, #10
 8007584:	f005 f8fa 	bl	800c77c <HAL_Delay>
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bd90      	pop	{r4, r7, pc}
 8007590:	20000f0c 	.word	0x20000f0c
 8007594:	20000010 	.word	0x20000010
 8007598:	20000011 	.word	0x20000011
 800759c:	00000000 	.word	0x00000000

080075a0 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 80075a0:	b5b0      	push	{r4, r5, r7, lr}
 80075a2:	b096      	sub	sp, #88	; 0x58
 80075a4:	af02      	add	r7, sp, #8
 80075a6:	6078      	str	r0, [r7, #4]
   uint8_t selfTest[6] = {0, 0, 0, 0, 0, 0};
 80075a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80075ac:	2200      	movs	r2, #0
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	809a      	strh	r2, [r3, #4]
   uint16_t i, ii;
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80075b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	809a      	strh	r2, [r3, #4]
 80075bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	809a      	strh	r2, [r3, #4]
 80075c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	809a      	strh	r2, [r3, #4]
 80075d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	809a      	strh	r2, [r3, #4]
   float factoryTrim[6];
   uint8_t FS = GFS_250DPS;
 80075da:	2300      	movs	r3, #0
 80075dc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 80075e0:	2300      	movs	r3, #0
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	2308      	movs	r3, #8
 80075e6:	2207      	movs	r2, #7
 80075e8:	2119      	movs	r1, #25
 80075ea:	20d2      	movs	r0, #210	; 0xd2
 80075ec:	f003 fd9e 	bl	800b12c <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80075f0:	2302      	movs	r3, #2
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2308      	movs	r3, #8
 80075f6:	2207      	movs	r2, #7
 80075f8:	211a      	movs	r1, #26
 80075fa:	20d2      	movs	r0, #210	; 0xd2
 80075fc:	f003 fd96 	bl	800b12c <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, FS<<3);// Set full scale range for the gyro to 250 dps
 8007600:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	b2db      	uxtb	r3, r3
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	2308      	movs	r3, #8
 800760c:	2207      	movs	r2, #7
 800760e:	211b      	movs	r1, #27
 8007610:	20d2      	movs	r0, #210	; 0xd2
 8007612:	f003 fd8b 	bl	800b12c <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, 0x1D, 7, 8, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8007616:	2302      	movs	r3, #2
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	2308      	movs	r3, #8
 800761c:	2207      	movs	r2, #7
 800761e:	211d      	movs	r1, #29
 8007620:	20d2      	movs	r0, #210	; 0xd2
 8007622:	f003 fd83 	bl	800b12c <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, FS<<3);// Set full scale range for the accelerometer to 2 g
 8007626:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	b2db      	uxtb	r3, r3
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	2308      	movs	r3, #8
 8007632:	2207      	movs	r2, #7
 8007634:	211c      	movs	r1, #28
 8007636:	20d2      	movs	r0, #210	; 0xd2
 8007638:	f003 fd78 	bl	800b12c <I2C_ByteWrite>

  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800763c:	2300      	movs	r3, #0
 800763e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007642:	e07b      	b.n	800773c <MPU9250SelfTest+0x19c>

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);  // Read the six raw data registers into data array
 8007644:	2306      	movs	r3, #6
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	4baa      	ldr	r3, [pc, #680]	; (80078f4 <MPU9250SelfTest+0x354>)
 800764a:	2201      	movs	r2, #1
 800764c:	213b      	movs	r1, #59	; 0x3b
 800764e:	20d2      	movs	r0, #210	; 0xd2
 8007650:	f003 fdf4 	bl	800b23c <I2C_ByteRead>
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8007654:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8007658:	b29a      	uxth	r2, r3
 800765a:	4ba6      	ldr	r3, [pc, #664]	; (80078f4 <MPU9250SelfTest+0x354>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	021b      	lsls	r3, r3, #8
 8007660:	b219      	sxth	r1, r3
 8007662:	4ba4      	ldr	r3, [pc, #656]	; (80078f4 <MPU9250SelfTest+0x354>)
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	b21b      	sxth	r3, r3
 8007668:	430b      	orrs	r3, r1
 800766a:	b21b      	sxth	r3, r3
 800766c:	b29b      	uxth	r3, r3
 800766e:	4413      	add	r3, r2
 8007670:	b29b      	uxth	r3, r3
 8007672:	b21b      	sxth	r3, r3
 8007674:	86bb      	strh	r3, [r7, #52]	; 0x34
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8007676:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800767a:	b29a      	uxth	r2, r3
 800767c:	4b9d      	ldr	r3, [pc, #628]	; (80078f4 <MPU9250SelfTest+0x354>)
 800767e:	789b      	ldrb	r3, [r3, #2]
 8007680:	021b      	lsls	r3, r3, #8
 8007682:	b219      	sxth	r1, r3
 8007684:	4b9b      	ldr	r3, [pc, #620]	; (80078f4 <MPU9250SelfTest+0x354>)
 8007686:	78db      	ldrb	r3, [r3, #3]
 8007688:	b21b      	sxth	r3, r3
 800768a:	430b      	orrs	r3, r1
 800768c:	b21b      	sxth	r3, r3
 800768e:	b29b      	uxth	r3, r3
 8007690:	4413      	add	r3, r2
 8007692:	b29b      	uxth	r3, r3
 8007694:	b21b      	sxth	r3, r3
 8007696:	86fb      	strh	r3, [r7, #54]	; 0x36
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8007698:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800769c:	b29a      	uxth	r2, r3
 800769e:	4b95      	ldr	r3, [pc, #596]	; (80078f4 <MPU9250SelfTest+0x354>)
 80076a0:	791b      	ldrb	r3, [r3, #4]
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	b219      	sxth	r1, r3
 80076a6:	4b93      	ldr	r3, [pc, #588]	; (80078f4 <MPU9250SelfTest+0x354>)
 80076a8:	795b      	ldrb	r3, [r3, #5]
 80076aa:	b21b      	sxth	r3, r3
 80076ac:	430b      	orrs	r3, r1
 80076ae:	b21b      	sxth	r3, r3
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	4413      	add	r3, r2
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	b21b      	sxth	r3, r3
 80076b8:	873b      	strh	r3, [r7, #56]	; 0x38

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 80076ba:	2306      	movs	r3, #6
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	4b8d      	ldr	r3, [pc, #564]	; (80078f4 <MPU9250SelfTest+0x354>)
 80076c0:	2201      	movs	r2, #1
 80076c2:	2143      	movs	r1, #67	; 0x43
 80076c4:	20d2      	movs	r0, #210	; 0xd2
 80076c6:	f003 fdb9 	bl	800b23c <I2C_ByteRead>
  gAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80076ca:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	4b88      	ldr	r3, [pc, #544]	; (80078f4 <MPU9250SelfTest+0x354>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	021b      	lsls	r3, r3, #8
 80076d6:	b219      	sxth	r1, r3
 80076d8:	4b86      	ldr	r3, [pc, #536]	; (80078f4 <MPU9250SelfTest+0x354>)
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	b21b      	sxth	r3, r3
 80076de:	430b      	orrs	r3, r1
 80076e0:	b21b      	sxth	r3, r3
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	4413      	add	r3, r2
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	b21b      	sxth	r3, r3
 80076ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  gAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 80076ec:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	4b80      	ldr	r3, [pc, #512]	; (80078f4 <MPU9250SelfTest+0x354>)
 80076f4:	789b      	ldrb	r3, [r3, #2]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	b219      	sxth	r1, r3
 80076fa:	4b7e      	ldr	r3, [pc, #504]	; (80078f4 <MPU9250SelfTest+0x354>)
 80076fc:	78db      	ldrb	r3, [r3, #3]
 80076fe:	b21b      	sxth	r3, r3
 8007700:	430b      	orrs	r3, r1
 8007702:	b21b      	sxth	r3, r3
 8007704:	b29b      	uxth	r3, r3
 8007706:	4413      	add	r3, r2
 8007708:	b29b      	uxth	r3, r3
 800770a:	b21b      	sxth	r3, r3
 800770c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  gAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 800770e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8007712:	b29a      	uxth	r2, r3
 8007714:	4b77      	ldr	r3, [pc, #476]	; (80078f4 <MPU9250SelfTest+0x354>)
 8007716:	791b      	ldrb	r3, [r3, #4]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	b219      	sxth	r1, r3
 800771c:	4b75      	ldr	r3, [pc, #468]	; (80078f4 <MPU9250SelfTest+0x354>)
 800771e:	795b      	ldrb	r3, [r3, #5]
 8007720:	b21b      	sxth	r3, r3
 8007722:	430b      	orrs	r3, r1
 8007724:	b21b      	sxth	r3, r3
 8007726:	b29b      	uxth	r3, r3
 8007728:	4413      	add	r3, r2
 800772a:	b29b      	uxth	r3, r3
 800772c:	b21b      	sxth	r3, r3
 800772e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8007732:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007736:	3301      	adds	r3, #1
 8007738:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800773c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007740:	2bc7      	cmp	r3, #199	; 0xc7
 8007742:	f67f af7f 	bls.w	8007644 <MPU9250SelfTest+0xa4>
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8007746:	2300      	movs	r3, #0
 8007748:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800774c:	e034      	b.n	80077b8 <MPU9250SelfTest+0x218>
  aAvg[ii] /= 200;
 800774e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007758:	4413      	add	r3, r2
 800775a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800775e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007762:	4965      	ldr	r1, [pc, #404]	; (80078f8 <MPU9250SelfTest+0x358>)
 8007764:	fb81 0103 	smull	r0, r1, r1, r3
 8007768:	1189      	asrs	r1, r1, #6
 800776a:	17db      	asrs	r3, r3, #31
 800776c:	1acb      	subs	r3, r1, r3
 800776e:	b219      	sxth	r1, r3
 8007770:	0053      	lsls	r3, r2, #1
 8007772:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007776:	4413      	add	r3, r2
 8007778:	460a      	mov	r2, r1
 800777a:	f823 2c1c 	strh.w	r2, [r3, #-28]
  gAvg[ii] /= 200;
 800777e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007788:	4413      	add	r3, r2
 800778a:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800778e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007792:	4959      	ldr	r1, [pc, #356]	; (80078f8 <MPU9250SelfTest+0x358>)
 8007794:	fb81 0103 	smull	r0, r1, r1, r3
 8007798:	1189      	asrs	r1, r1, #6
 800779a:	17db      	asrs	r3, r3, #31
 800779c:	1acb      	subs	r3, r1, r3
 800779e:	b219      	sxth	r1, r3
 80077a0:	0053      	lsls	r3, r2, #1
 80077a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80077a6:	4413      	add	r3, r2
 80077a8:	460a      	mov	r2, r1
 80077aa:	f823 2c14 	strh.w	r2, [r3, #-20]
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80077ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077b2:	3301      	adds	r3, #1
 80077b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80077b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d9c6      	bls.n	800774e <MPU9250SelfTest+0x1ae>
  }

// Configure the accelerometer for self-test
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80077c0:	23e0      	movs	r3, #224	; 0xe0
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	2308      	movs	r3, #8
 80077c6:	2207      	movs	r2, #7
 80077c8:	211c      	movs	r1, #28
 80077ca:	20d2      	movs	r0, #210	; 0xd2
 80077cc:	f003 fcae 	bl	800b12c <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80077d0:	23e0      	movs	r3, #224	; 0xe0
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	2308      	movs	r3, #8
 80077d6:	2207      	movs	r2, #7
 80077d8:	211b      	movs	r1, #27
 80077da:	20d2      	movs	r0, #210	; 0xd2
 80077dc:	f003 fca6 	bl	800b12c <I2C_ByteWrite>
   HAL_Delay(25); // Delay a while to let the device stabilize
 80077e0:	2019      	movs	r0, #25
 80077e2:	f004 ffcb 	bl	800c77c <HAL_Delay>

  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80077e6:	2300      	movs	r3, #0
 80077e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80077ec:	e07a      	b.n	80078e4 <MPU9250SelfTest+0x344>

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6); // Read the six raw data registers into data array
 80077ee:	2306      	movs	r3, #6
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	4b40      	ldr	r3, [pc, #256]	; (80078f4 <MPU9250SelfTest+0x354>)
 80077f4:	2201      	movs	r2, #1
 80077f6:	213b      	movs	r1, #59	; 0x3b
 80077f8:	20d2      	movs	r0, #210	; 0xd2
 80077fa:	f003 fd1f 	bl	800b23c <I2C_ByteRead>
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80077fe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8007802:	b29a      	uxth	r2, r3
 8007804:	4b3b      	ldr	r3, [pc, #236]	; (80078f4 <MPU9250SelfTest+0x354>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	021b      	lsls	r3, r3, #8
 800780a:	b219      	sxth	r1, r3
 800780c:	4b39      	ldr	r3, [pc, #228]	; (80078f4 <MPU9250SelfTest+0x354>)
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	b21b      	sxth	r3, r3
 8007812:	430b      	orrs	r3, r1
 8007814:	b21b      	sxth	r3, r3
 8007816:	b29b      	uxth	r3, r3
 8007818:	4413      	add	r3, r2
 800781a:	b29b      	uxth	r3, r3
 800781c:	b21b      	sxth	r3, r3
 800781e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8007820:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8007824:	b29a      	uxth	r2, r3
 8007826:	4b33      	ldr	r3, [pc, #204]	; (80078f4 <MPU9250SelfTest+0x354>)
 8007828:	789b      	ldrb	r3, [r3, #2]
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	b219      	sxth	r1, r3
 800782e:	4b31      	ldr	r3, [pc, #196]	; (80078f4 <MPU9250SelfTest+0x354>)
 8007830:	78db      	ldrb	r3, [r3, #3]
 8007832:	b21b      	sxth	r3, r3
 8007834:	430b      	orrs	r3, r1
 8007836:	b21b      	sxth	r3, r3
 8007838:	b29b      	uxth	r3, r3
 800783a:	4413      	add	r3, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	b21b      	sxth	r3, r3
 8007840:	85fb      	strh	r3, [r7, #46]	; 0x2e
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8007842:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8007846:	b29a      	uxth	r2, r3
 8007848:	4b2a      	ldr	r3, [pc, #168]	; (80078f4 <MPU9250SelfTest+0x354>)
 800784a:	791b      	ldrb	r3, [r3, #4]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	b219      	sxth	r1, r3
 8007850:	4b28      	ldr	r3, [pc, #160]	; (80078f4 <MPU9250SelfTest+0x354>)
 8007852:	795b      	ldrb	r3, [r3, #5]
 8007854:	b21b      	sxth	r3, r3
 8007856:	430b      	orrs	r3, r1
 8007858:	b21b      	sxth	r3, r3
 800785a:	b29b      	uxth	r3, r3
 800785c:	4413      	add	r3, r2
 800785e:	b29b      	uxth	r3, r3
 8007860:	b21b      	sxth	r3, r3
 8007862:	863b      	strh	r3, [r7, #48]	; 0x30

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 8007864:	2306      	movs	r3, #6
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	4b22      	ldr	r3, [pc, #136]	; (80078f4 <MPU9250SelfTest+0x354>)
 800786a:	2201      	movs	r2, #1
 800786c:	2143      	movs	r1, #67	; 0x43
 800786e:	20d2      	movs	r0, #210	; 0xd2
 8007870:	f003 fce4 	bl	800b23c <I2C_ByteRead>
  gSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8007874:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007878:	b29a      	uxth	r2, r3
 800787a:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <MPU9250SelfTest+0x354>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	021b      	lsls	r3, r3, #8
 8007880:	b219      	sxth	r1, r3
 8007882:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <MPU9250SelfTest+0x354>)
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	b21b      	sxth	r3, r3
 8007888:	430b      	orrs	r3, r1
 800788a:	b21b      	sxth	r3, r3
 800788c:	b29b      	uxth	r3, r3
 800788e:	4413      	add	r3, r2
 8007890:	b29b      	uxth	r3, r3
 8007892:	b21b      	sxth	r3, r3
 8007894:	84bb      	strh	r3, [r7, #36]	; 0x24
  gSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8007896:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800789a:	b29a      	uxth	r2, r3
 800789c:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <MPU9250SelfTest+0x354>)
 800789e:	789b      	ldrb	r3, [r3, #2]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	b219      	sxth	r1, r3
 80078a4:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <MPU9250SelfTest+0x354>)
 80078a6:	78db      	ldrb	r3, [r3, #3]
 80078a8:	b21b      	sxth	r3, r3
 80078aa:	430b      	orrs	r3, r1
 80078ac:	b21b      	sxth	r3, r3
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	4413      	add	r3, r2
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	b21b      	sxth	r3, r3
 80078b6:	84fb      	strh	r3, [r7, #38]	; 0x26
  gSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 80078b8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80078bc:	b29a      	uxth	r2, r3
 80078be:	4b0d      	ldr	r3, [pc, #52]	; (80078f4 <MPU9250SelfTest+0x354>)
 80078c0:	791b      	ldrb	r3, [r3, #4]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	b219      	sxth	r1, r3
 80078c6:	4b0b      	ldr	r3, [pc, #44]	; (80078f4 <MPU9250SelfTest+0x354>)
 80078c8:	795b      	ldrb	r3, [r3, #5]
 80078ca:	b21b      	sxth	r3, r3
 80078cc:	430b      	orrs	r3, r1
 80078ce:	b21b      	sxth	r3, r3
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	4413      	add	r3, r2
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	b21b      	sxth	r3, r3
 80078d8:	853b      	strh	r3, [r7, #40]	; 0x28
  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80078da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80078de:	3301      	adds	r3, #1
 80078e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80078e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80078e8:	2bc7      	cmp	r3, #199	; 0xc7
 80078ea:	d980      	bls.n	80077ee <MPU9250SelfTest+0x24e>
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80078ec:	2300      	movs	r3, #0
 80078ee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80078f2:	e038      	b.n	8007966 <MPU9250SelfTest+0x3c6>
 80078f4:	20000f0c 	.word	0x20000f0c
 80078f8:	51eb851f 	.word	0x51eb851f
  aSTAvg[ii] /= 200;
 80078fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007906:	4413      	add	r3, r2
 8007908:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800790c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007910:	49cf      	ldr	r1, [pc, #828]	; (8007c50 <MPU9250SelfTest+0x6b0>)
 8007912:	fb81 0103 	smull	r0, r1, r1, r3
 8007916:	1189      	asrs	r1, r1, #6
 8007918:	17db      	asrs	r3, r3, #31
 800791a:	1acb      	subs	r3, r1, r3
 800791c:	b219      	sxth	r1, r3
 800791e:	0053      	lsls	r3, r2, #1
 8007920:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007924:	4413      	add	r3, r2
 8007926:	460a      	mov	r2, r1
 8007928:	f823 2c24 	strh.w	r2, [r3, #-36]
  gSTAvg[ii] /= 200;
 800792c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007936:	4413      	add	r3, r2
 8007938:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 800793c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007940:	49c3      	ldr	r1, [pc, #780]	; (8007c50 <MPU9250SelfTest+0x6b0>)
 8007942:	fb81 0103 	smull	r0, r1, r1, r3
 8007946:	1189      	asrs	r1, r1, #6
 8007948:	17db      	asrs	r3, r3, #31
 800794a:	1acb      	subs	r3, r1, r3
 800794c:	b219      	sxth	r1, r3
 800794e:	0053      	lsls	r3, r2, #1
 8007950:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007954:	4413      	add	r3, r2
 8007956:	460a      	mov	r2, r1
 8007958:	f823 2c2c 	strh.w	r2, [r3, #-44]
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 800795c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007960:	3301      	adds	r3, #1
 8007962:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007966:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800796a:	2b02      	cmp	r3, #2
 800796c:	d9c6      	bls.n	80078fc <MPU9250SelfTest+0x35c>
  }

 // Configure the gyro and accelerometer for normal operation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 800796e:	2300      	movs	r3, #0
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	2308      	movs	r3, #8
 8007974:	2207      	movs	r2, #7
 8007976:	211c      	movs	r1, #28
 8007978:	20d2      	movs	r0, #210	; 0xd2
 800797a:	f003 fbd7 	bl	800b12c <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
 800797e:	2300      	movs	r3, #0
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	2308      	movs	r3, #8
 8007984:	2207      	movs	r2, #7
 8007986:	211b      	movs	r1, #27
 8007988:	20d2      	movs	r0, #210	; 0xd2
 800798a:	f003 fbcf 	bl	800b12c <I2C_ByteWrite>
  HAL_Delay(25); // Delay a while to let the device stabilize
 800798e:	2019      	movs	r0, #25
 8007990:	f004 fef4 	bl	800c77c <HAL_Delay>

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 8007994:	2303      	movs	r3, #3
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	4bae      	ldr	r3, [pc, #696]	; (8007c54 <MPU9250SelfTest+0x6b4>)
 800799a:	2201      	movs	r2, #1
 800799c:	210d      	movs	r1, #13
 800799e:	20d2      	movs	r0, #210	; 0xd2
 80079a0:	f003 fc4c 	bl	800b23c <I2C_ByteRead>
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
 80079a4:	4bab      	ldr	r3, [pc, #684]	; (8007c54 <MPU9250SelfTest+0x6b4>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
 80079ac:	4ba9      	ldr	r3, [pc, #676]	; (8007c54 <MPU9250SelfTest+0x6b4>)
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 80079b4:	4ba7      	ldr	r3, [pc, #668]	; (8007c54 <MPU9250SelfTest+0x6b4>)
 80079b6:	789b      	ldrb	r3, [r3, #2]
 80079b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 80079bc:	2303      	movs	r3, #3
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	4ba4      	ldr	r3, [pc, #656]	; (8007c54 <MPU9250SelfTest+0x6b4>)
 80079c2:	2201      	movs	r2, #1
 80079c4:	2100      	movs	r1, #0
 80079c6:	20d2      	movs	r0, #210	; 0xd2
 80079c8:	f003 fc38 	bl	800b23c <I2C_ByteRead>
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 80079cc:	4ba1      	ldr	r3, [pc, #644]	; (8007c54 <MPU9250SelfTest+0x6b4>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 80079d4:	4b9f      	ldr	r3, [pc, #636]	; (8007c54 <MPU9250SelfTest+0x6b4>)
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results
 80079dc:	4b9d      	ldr	r3, [pc, #628]	; (8007c54 <MPU9250SelfTest+0x6b4>)
 80079de:	789b      	ldrb	r3, [r3, #2]
 80079e0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 80079e4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80079e8:	f640 223c 	movw	r2, #2620	; 0xa3c
 80079ec:	fa02 f303 	lsl.w	r3, r2, r3
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7f9 f98d 	bl	8000d10 <__aeabi_i2f>
 80079f6:	4603      	mov	r3, r0
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7f8 fd2f 	bl	800045c <__aeabi_f2d>
 80079fe:	4604      	mov	r4, r0
 8007a00:	460d      	mov	r5, r1
 8007a02:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7f9 f97e 	bl	8000d08 <__aeabi_ui2f>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7f8 fd24 	bl	800045c <__aeabi_f2d>
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	4b8f      	ldr	r3, [pc, #572]	; (8007c58 <MPU9250SelfTest+0x6b8>)
 8007a1a:	f7f8 fbbf 	bl	800019c <__aeabi_dsub>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	a189      	add	r1, pc, #548	; (adr r1, 8007c48 <MPU9250SelfTest+0x6a8>)
 8007a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a28:	f00d ff5c 	bl	80158e4 <pow>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4620      	mov	r0, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	f7f8 fd6a 	bl	800050c <__aeabi_dmul>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	4621      	mov	r1, r4
 8007a40:	f7f9 f85c 	bl	8000afc <__aeabi_d2f>
 8007a44:	4603      	mov	r3, r0
 8007a46:	60fb      	str	r3, [r7, #12]
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8007a48:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a4c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007a50:	fa02 f303 	lsl.w	r3, r2, r3
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7f9 f95b 	bl	8000d10 <__aeabi_i2f>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7f8 fcfd 	bl	800045c <__aeabi_f2d>
 8007a62:	4604      	mov	r4, r0
 8007a64:	460d      	mov	r5, r1
 8007a66:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7f9 f94c 	bl	8000d08 <__aeabi_ui2f>
 8007a70:	4603      	mov	r3, r0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7f8 fcf2 	bl	800045c <__aeabi_f2d>
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	4b76      	ldr	r3, [pc, #472]	; (8007c58 <MPU9250SelfTest+0x6b8>)
 8007a7e:	f7f8 fb8d 	bl	800019c <__aeabi_dsub>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	a170      	add	r1, pc, #448	; (adr r1, 8007c48 <MPU9250SelfTest+0x6a8>)
 8007a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a8c:	f00d ff2a 	bl	80158e4 <pow>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	4620      	mov	r0, r4
 8007a96:	4629      	mov	r1, r5
 8007a98:	f7f8 fd38 	bl	800050c <__aeabi_dmul>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	f7f9 f82a 	bl	8000afc <__aeabi_d2f>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	613b      	str	r3, [r7, #16]
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8007aac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007ab0:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7f9 f929 	bl	8000d10 <__aeabi_i2f>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7f8 fccb 	bl	800045c <__aeabi_f2d>
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460d      	mov	r5, r1
 8007aca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7f9 f91a 	bl	8000d08 <__aeabi_ui2f>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7f8 fcc0 	bl	800045c <__aeabi_f2d>
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	4b5d      	ldr	r3, [pc, #372]	; (8007c58 <MPU9250SelfTest+0x6b8>)
 8007ae2:	f7f8 fb5b 	bl	800019c <__aeabi_dsub>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	a157      	add	r1, pc, #348	; (adr r1, 8007c48 <MPU9250SelfTest+0x6a8>)
 8007aec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af0:	f00d fef8 	bl	80158e4 <pow>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4620      	mov	r0, r4
 8007afa:	4629      	mov	r1, r5
 8007afc:	f7f8 fd06 	bl	800050c <__aeabi_dmul>
 8007b00:	4603      	mov	r3, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	4618      	mov	r0, r3
 8007b06:	4621      	mov	r1, r4
 8007b08:	f7f8 fff8 	bl	8000afc <__aeabi_d2f>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	617b      	str	r3, [r7, #20]
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8007b10:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007b14:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007b18:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7f9 f8f7 	bl	8000d10 <__aeabi_i2f>
 8007b22:	4603      	mov	r3, r0
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7f8 fc99 	bl	800045c <__aeabi_f2d>
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	460d      	mov	r5, r1
 8007b2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7f9 f8e8 	bl	8000d08 <__aeabi_ui2f>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7f8 fc8e 	bl	800045c <__aeabi_f2d>
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	4b44      	ldr	r3, [pc, #272]	; (8007c58 <MPU9250SelfTest+0x6b8>)
 8007b46:	f7f8 fb29 	bl	800019c <__aeabi_dsub>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	a13e      	add	r1, pc, #248	; (adr r1, 8007c48 <MPU9250SelfTest+0x6a8>)
 8007b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b54:	f00d fec6 	bl	80158e4 <pow>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	4629      	mov	r1, r5
 8007b60:	f7f8 fcd4 	bl	800050c <__aeabi_dmul>
 8007b64:	4603      	mov	r3, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	4618      	mov	r0, r3
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	f7f8 ffc6 	bl	8000afc <__aeabi_d2f>
 8007b70:	4603      	mov	r3, r0
 8007b72:	61bb      	str	r3, [r7, #24]
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8007b74:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007b78:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7f9 f8c5 	bl	8000d10 <__aeabi_i2f>
 8007b86:	4603      	mov	r3, r0
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7f8 fc67 	bl	800045c <__aeabi_f2d>
 8007b8e:	4604      	mov	r4, r0
 8007b90:	460d      	mov	r5, r1
 8007b92:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7f9 f8b6 	bl	8000d08 <__aeabi_ui2f>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7f8 fc5c 	bl	800045c <__aeabi_f2d>
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	4b2b      	ldr	r3, [pc, #172]	; (8007c58 <MPU9250SelfTest+0x6b8>)
 8007baa:	f7f8 faf7 	bl	800019c <__aeabi_dsub>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	a125      	add	r1, pc, #148	; (adr r1, 8007c48 <MPU9250SelfTest+0x6a8>)
 8007bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb8:	f00d fe94 	bl	80158e4 <pow>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	f7f8 fca2 	bl	800050c <__aeabi_dmul>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	4618      	mov	r0, r3
 8007bce:	4621      	mov	r1, r4
 8007bd0:	f7f8 ff94 	bl	8000afc <__aeabi_d2f>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	61fb      	str	r3, [r7, #28]
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8007bd8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007bdc:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007be0:	fa02 f303 	lsl.w	r3, r2, r3
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7f9 f893 	bl	8000d10 <__aeabi_i2f>
 8007bea:	4603      	mov	r3, r0
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7f8 fc35 	bl	800045c <__aeabi_f2d>
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	460d      	mov	r5, r1
 8007bf6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7f9 f884 	bl	8000d08 <__aeabi_ui2f>
 8007c00:	4603      	mov	r3, r0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7f8 fc2a 	bl	800045c <__aeabi_f2d>
 8007c08:	f04f 0200 	mov.w	r2, #0
 8007c0c:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <MPU9250SelfTest+0x6b8>)
 8007c0e:	f7f8 fac5 	bl	800019c <__aeabi_dsub>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	a10c      	add	r1, pc, #48	; (adr r1, 8007c48 <MPU9250SelfTest+0x6a8>)
 8007c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c1c:	f00d fe62 	bl	80158e4 <pow>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 fc70 	bl	800050c <__aeabi_dmul>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	4618      	mov	r0, r3
 8007c32:	4621      	mov	r1, r4
 8007c34:	f7f8 ff62 	bl	8000afc <__aeabi_d2f>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	623b      	str	r3, [r7, #32]

 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (i = 0; i < 3; i++) {
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c42:	e092      	b.n	8007d6a <MPU9250SelfTest+0x7ca>
 8007c44:	f3af 8000 	nop.w
 8007c48:	c28f5c29 	.word	0xc28f5c29
 8007c4c:	3ff028f5 	.word	0x3ff028f5
 8007c50:	51eb851f 	.word	0x51eb851f
 8007c54:	20000f0c 	.word	0x20000f0c
 8007c58:	3ff00000 	.word	0x3ff00000
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];// - 100.0; // Report percent differences
 8007c5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007c66:	4413      	add	r3, r2
 8007c68:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007c78:	440b      	add	r3, r1
 8007c7a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7f9 f845 	bl	8000d10 <__aeabi_i2f>
 8007c86:	4603      	mov	r3, r0
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7f8 fbe7 	bl	800045c <__aeabi_f2d>
 8007c8e:	f04f 0200 	mov.w	r2, #0
 8007c92:	4b3a      	ldr	r3, [pc, #232]	; (8007d7c <MPU9250SelfTest+0x7dc>)
 8007c94:	f7f8 fc3a 	bl	800050c <__aeabi_dmul>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	4625      	mov	r5, r4
 8007c9e:	461c      	mov	r4, r3
 8007ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007caa:	4413      	add	r3, r2
 8007cac:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7f8 fbd3 	bl	800045c <__aeabi_f2d>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4620      	mov	r0, r4
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	f7f8 fd4f 	bl	8000760 <__aeabi_ddiv>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	4621      	mov	r1, r4
 8007cca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	18d4      	adds	r4, r2, r3
 8007cd4:	f7f8 ff12 	bl	8000afc <__aeabi_d2f>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3];// - 100.0; // Report percent differences
 8007cdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8007cec:	461a      	mov	r2, r3
 8007cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007cf8:	440b      	add	r3, r1
 8007cfa:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7f9 f805 	bl	8000d10 <__aeabi_i2f>
 8007d06:	4603      	mov	r3, r0
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7f8 fba7 	bl	800045c <__aeabi_f2d>
 8007d0e:	f04f 0200 	mov.w	r2, #0
 8007d12:	4b1a      	ldr	r3, [pc, #104]	; (8007d7c <MPU9250SelfTest+0x7dc>)
 8007d14:	f7f8 fbfa 	bl	800050c <__aeabi_dmul>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	4625      	mov	r5, r4
 8007d1e:	461c      	mov	r4, r3
 8007d20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d24:	3303      	adds	r3, #3
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7f8 fb92 	bl	800045c <__aeabi_f2d>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f7f8 fd0e 	bl	8000760 <__aeabi_ddiv>
 8007d44:	4603      	mov	r3, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	4618      	mov	r0, r3
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d50:	3303      	adds	r3, #3
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	18d4      	adds	r4, r2, r3
 8007d58:	f7f8 fed0 	bl	8000afc <__aeabi_d2f>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	6023      	str	r3, [r4, #0]
   for (i = 0; i < 3; i++) {
 8007d60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d64:	3301      	adds	r3, #1
 8007d66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	f67f af74 	bls.w	8007c5c <MPU9250SelfTest+0x6bc>
   }
}
 8007d74:	bf00      	nop
 8007d76:	3750      	adds	r7, #80	; 0x50
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8007d7c:	40590000 	.word	0x40590000

08007d80 <MS5611_Init>:
alt_t alt;

static void cliBaro(cli_args_t *args);

void MS5611_Init(ms5611_osr_t osr)
{
 8007d80:	b590      	push	{r4, r7, lr}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	71fb      	strb	r3, [r7, #7]
#ifdef debug
	logPrintf("Initialize MS-5611 Sensor\r\n");
#endif
  I2C_Write(MS5611_ADDRESS, MS5611_CMD_RESET, 1);
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	211e      	movs	r1, #30
 8007d8e:	20ee      	movs	r0, #238	; 0xee
 8007d90:	f003 fad0 	bl	800b334 <I2C_Write>
  // Set oversampling value
  switch (osr)
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d828      	bhi.n	8007dec <MS5611_Init+0x6c>
 8007d9a:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <MS5611_Init+0x20>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007ded 	.word	0x08007ded
 8007da8:	08007dcd 	.word	0x08007dcd
 8007dac:	08007ded 	.word	0x08007ded
 8007db0:	08007dd5 	.word	0x08007dd5
 8007db4:	08007ded 	.word	0x08007ded
 8007db8:	08007ddd 	.word	0x08007ddd
 8007dbc:	08007ded 	.word	0x08007ded
 8007dc0:	08007de5 	.word	0x08007de5
  {
    case MS5611_ULTRA_LOW_POWER:
      ms5611.ct = 1;
 8007dc4:	4b1c      	ldr	r3, [pc, #112]	; (8007e38 <MS5611_Init+0xb8>)
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	731a      	strb	r2, [r3, #12]
      break;
 8007dca:	e00f      	b.n	8007dec <MS5611_Init+0x6c>
    case MS5611_LOW_POWER:
      ms5611.ct = 2;
 8007dcc:	4b1a      	ldr	r3, [pc, #104]	; (8007e38 <MS5611_Init+0xb8>)
 8007dce:	2202      	movs	r2, #2
 8007dd0:	731a      	strb	r2, [r3, #12]
      break;
 8007dd2:	e00b      	b.n	8007dec <MS5611_Init+0x6c>
    case MS5611_STANDARD:
      ms5611.ct = 3;
 8007dd4:	4b18      	ldr	r3, [pc, #96]	; (8007e38 <MS5611_Init+0xb8>)
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	731a      	strb	r2, [r3, #12]
      break;
 8007dda:	e007      	b.n	8007dec <MS5611_Init+0x6c>
    case MS5611_HIGH_RES:
      ms5611.ct = 5;
 8007ddc:	4b16      	ldr	r3, [pc, #88]	; (8007e38 <MS5611_Init+0xb8>)
 8007dde:	2205      	movs	r2, #5
 8007de0:	731a      	strb	r2, [r3, #12]
      break;
 8007de2:	e003      	b.n	8007dec <MS5611_Init+0x6c>
    case MS5611_ULTRA_HIGH_RES:
      ms5611.ct = 10;
 8007de4:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <MS5611_Init+0xb8>)
 8007de6:	220a      	movs	r2, #10
 8007de8:	731a      	strb	r2, [r3, #12]
      break;
 8007dea:	bf00      	nop
  }
  ms5611.uosr = osr;
 8007dec:	4a12      	ldr	r2, [pc, #72]	; (8007e38 <MS5611_Init+0xb8>)
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	7353      	strb	r3, [r2, #13]
  HAL_Delay(100);
 8007df2:	2064      	movs	r0, #100	; 0x64
 8007df4:	f004 fcc2 	bl	800c77c <HAL_Delay>

  for (uint8_t offset = 0; offset < 6; offset++)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
 8007dfc:	e010      	b.n	8007e20 <MS5611_Init+0xa0>
  {
    ms5611.fc[offset] = readRegister16(MS5611_CMD_READ_PROM + (offset * 2));
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	3351      	adds	r3, #81	; 0x51
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	7bfc      	ldrb	r4, [r7, #15]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fbfa 	bl	8008604 <readRegister16>
 8007e10:	4603      	mov	r3, r0
 8007e12:	461a      	mov	r2, r3
 8007e14:	4b08      	ldr	r3, [pc, #32]	; (8007e38 <MS5611_Init+0xb8>)
 8007e16:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  for (uint8_t offset = 0; offset < 6; offset++)
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	73fb      	strb	r3, [r7, #15]
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	2b05      	cmp	r3, #5
 8007e24:	d9eb      	bls.n	8007dfe <MS5611_Init+0x7e>
  }
  cliAdd("baro", cliBaro);
 8007e26:	4905      	ldr	r1, [pc, #20]	; (8007e3c <MS5611_Init+0xbc>)
 8007e28:	4805      	ldr	r0, [pc, #20]	; (8007e40 <MS5611_Init+0xc0>)
 8007e2a:	f003 f81f 	bl	800ae6c <cliAdd>
#ifdef debug
  logPrintf("Oversampling: %d\r\n", ms5611.uosr);
#endif
}
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd90      	pop	{r4, r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20000da0 	.word	0x20000da0
 8007e3c:	080086a1 	.word	0x080086a1
 8007e40:	08019c3c 	.word	0x08019c3c

08007e44 <applyBarometerMedianFilter>:

#define PRESSURE_SAMPLES_MEDIAN 3

static int32_t applyBarometerMedianFilter(int32_t newPressureReading)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
    static int32_t barometerFilterSamples[PRESSURE_SAMPLES_MEDIAN];
    static int currentFilterSampleIndex = 0;
    static bool medianFilterReady = false;
    int nextSampleIndex;

    nextSampleIndex = (currentFilterSampleIndex + 1);
 8007e4c:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <applyBarometerMedianFilter+0x50>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3301      	adds	r3, #1
 8007e52:	60fb      	str	r3, [r7, #12]
    if (nextSampleIndex == PRESSURE_SAMPLES_MEDIAN) {
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d104      	bne.n	8007e64 <applyBarometerMedianFilter+0x20>
        nextSampleIndex = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
        medianFilterReady = true;
 8007e5e:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <applyBarometerMedianFilter+0x54>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	701a      	strb	r2, [r3, #0]
    }

    barometerFilterSamples[currentFilterSampleIndex] = newPressureReading;
 8007e64:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <applyBarometerMedianFilter+0x50>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	490c      	ldr	r1, [pc, #48]	; (8007e9c <applyBarometerMedianFilter+0x58>)
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    currentFilterSampleIndex = nextSampleIndex;
 8007e70:	4a08      	ldr	r2, [pc, #32]	; (8007e94 <applyBarometerMedianFilter+0x50>)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6013      	str	r3, [r2, #0]

    if (medianFilterReady)
 8007e76:	4b08      	ldr	r3, [pc, #32]	; (8007e98 <applyBarometerMedianFilter+0x54>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <applyBarometerMedianFilter+0x44>
        return quickMedianFilter3(barometerFilterSamples);
 8007e7e:	4807      	ldr	r0, [pc, #28]	; (8007e9c <applyBarometerMedianFilter+0x58>)
 8007e80:	f7f9 fede 	bl	8001c40 <quickMedianFilter3>
 8007e84:	4603      	mov	r3, r0
 8007e86:	e000      	b.n	8007e8a <applyBarometerMedianFilter+0x46>
    else
        return newPressureReading;
 8007e88:	687b      	ldr	r3, [r7, #4]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	200003d0 	.word	0x200003d0
 8007e98:	200003d4 	.word	0x200003d4
 8007e9c:	200003d8 	.word	0x200003d8

08007ea0 <Baro_Common>:

void Baro_Common(void){
 8007ea0:	b590      	push	{r4, r7, lr}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
  static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
  static int baroHistIdx = 0;

  uint8_t indexplus1 = (baroHistIdx + 1);
 8007ea6:	4b18      	ldr	r3, [pc, #96]	; (8007f08 <Baro_Common+0x68>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	3301      	adds	r3, #1
 8007eae:	71fb      	strb	r3, [r7, #7]
  if (indexplus1 == 21) indexplus1 = 0;
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	2b15      	cmp	r3, #21
 8007eb4:	d101      	bne.n	8007eba <Baro_Common+0x1a>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	71fb      	strb	r3, [r7, #7]
  baroHistTab[baroHistIdx] = applyBarometerMedianFilter(ms5611.realPressure);
 8007eba:	4b14      	ldr	r3, [pc, #80]	; (8007f0c <Baro_Common+0x6c>)
 8007ebc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ebe:	4b12      	ldr	r3, [pc, #72]	; (8007f08 <Baro_Common+0x68>)
 8007ec0:	681c      	ldr	r4, [r3, #0]
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	f7ff ffbe 	bl	8007e44 <applyBarometerMedianFilter>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	4b11      	ldr	r3, [pc, #68]	; (8007f10 <Baro_Common+0x70>)
 8007ecc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  baroPressureSum += baroHistTab[baroHistIdx];
 8007ed0:	4b0d      	ldr	r3, [pc, #52]	; (8007f08 <Baro_Common+0x68>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a0e      	ldr	r2, [pc, #56]	; (8007f10 <Baro_Common+0x70>)
 8007ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eda:	461a      	mov	r2, r3
 8007edc:	4b0d      	ldr	r3, [pc, #52]	; (8007f14 <Baro_Common+0x74>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	4a0c      	ldr	r2, [pc, #48]	; (8007f14 <Baro_Common+0x74>)
 8007ee4:	6013      	str	r3, [r2, #0]
  baroPressureSum -= baroHistTab[indexplus1];
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <Baro_Common+0x74>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	79fa      	ldrb	r2, [r7, #7]
 8007eec:	4908      	ldr	r1, [pc, #32]	; (8007f10 <Baro_Common+0x70>)
 8007eee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007ef2:	1a9b      	subs	r3, r3, r2
 8007ef4:	4a07      	ldr	r2, [pc, #28]	; (8007f14 <Baro_Common+0x74>)
 8007ef6:	6013      	str	r3, [r2, #0]
  baroHistIdx = indexplus1;
 8007ef8:	79fb      	ldrb	r3, [r7, #7]
 8007efa:	4a03      	ldr	r2, [pc, #12]	; (8007f08 <Baro_Common+0x68>)
 8007efc:	6013      	str	r3, [r2, #0]
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd90      	pop	{r4, r7, pc}
 8007f06:	bf00      	nop
 8007f08:	200003e4 	.word	0x200003e4
 8007f0c:	20000da0 	.word	0x20000da0
 8007f10:	200003e8 	.word	0x200003e8
 8007f14:	20000380 	.word	0x20000380

08007f18 <Baro_update>:

uint8_t Baro_update(uint32_t currentTime)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	static uint32_t baroDeadline = 0;
	static int state = 0;

	if(state >= 2)
 8007f20:	4b29      	ldr	r3, [pc, #164]	; (8007fc8 <Baro_update+0xb0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	dd06      	ble.n	8007f36 <Baro_update+0x1e>
	{
		state = 0;
 8007f28:	4b27      	ldr	r3, [pc, #156]	; (8007fc8 <Baro_update+0xb0>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
		MS561101BA_Calculate();
 8007f2e:	f000 f965 	bl	80081fc <MS561101BA_Calculate>
		return 1;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e043      	b.n	8007fbe <Baro_update+0xa6>
	}
	if ((int32_t)(currentTime - baroDeadline) < 0) return 0;
 8007f36:	4b25      	ldr	r3, [pc, #148]	; (8007fcc <Baro_update+0xb4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da01      	bge.n	8007f46 <Baro_update+0x2e>
 8007f42:	2300      	movs	r3, #0
 8007f44:	e03b      	b.n	8007fbe <Baro_update+0xa6>
	baroDeadline = currentTime;
 8007f46:	4a21      	ldr	r2, [pc, #132]	; (8007fcc <Baro_update+0xb4>)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6013      	str	r3, [r2, #0]
	if (state == 0)
 8007f4c:	4b1e      	ldr	r3, [pc, #120]	; (8007fc8 <Baro_update+0xb0>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d118      	bne.n	8007f86 <Baro_update+0x6e>
	{
		Baro_Common();
 8007f54:	f7ff ffa4 	bl	8007ea0 <Baro_Common>
		ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8007f58:	2000      	movs	r0, #0
 8007f5a:	f000 fb79 	bl	8008650 <readRegister24>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4b1b      	ldr	r3, [pc, #108]	; (8007fd0 <Baro_update+0xb8>)
 8007f62:	651a      	str	r2, [r3, #80]	; 0x50
		//Request pressure data
		I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8007f64:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <Baro_update+0xb8>)
 8007f66:	7b5b      	ldrb	r3, [r3, #13]
 8007f68:	3340      	adds	r3, #64	; 0x40
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	4619      	mov	r1, r3
 8007f70:	20ee      	movs	r0, #238	; 0xee
 8007f72:	f003 f9df 	bl	800b334 <I2C_Write>
		baroDeadline +=10000;
 8007f76:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <Baro_update+0xb4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007f7e:	3310      	adds	r3, #16
 8007f80:	4a12      	ldr	r2, [pc, #72]	; (8007fcc <Baro_update+0xb4>)
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	e015      	b.n	8007fb2 <Baro_update+0x9a>
	} else
	{
		ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8007f86:	2000      	movs	r0, #0
 8007f88:	f000 fb62 	bl	8008650 <readRegister24>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <Baro_update+0xb8>)
 8007f90:	659a      	str	r2, [r3, #88]	; 0x58
		//Request temperature data
		I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8007f92:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <Baro_update+0xb8>)
 8007f94:	7b5b      	ldrb	r3, [r3, #13]
 8007f96:	3350      	adds	r3, #80	; 0x50
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	20ee      	movs	r0, #238	; 0xee
 8007fa0:	f003 f9c8 	bl	800b334 <I2C_Write>
		baroDeadline +=10000;
 8007fa4:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <Baro_update+0xb4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007fac:	3310      	adds	r3, #16
 8007fae:	4a07      	ldr	r2, [pc, #28]	; (8007fcc <Baro_update+0xb4>)
 8007fb0:	6013      	str	r3, [r2, #0]
	}
	state ++;
 8007fb2:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <Baro_update+0xb0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	4a03      	ldr	r2, [pc, #12]	; (8007fc8 <Baro_update+0xb0>)
 8007fba:	6013      	str	r3, [r2, #0]
	return 1;
 8007fbc:	2301      	movs	r3, #1
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	2000043c 	.word	0x2000043c
 8007fcc:	20000440 	.word	0x20000440
 8007fd0:	20000da0 	.word	0x20000da0

08007fd4 <getEstimatedAltitude>:

uint8_t getEstimatedAltitude(void){
 8007fd4:	b590      	push	{r4, r7, lr}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
  static int32_t baroAltOffset = 0;
  int32_t BaroAlt_tmp;
  static int32_t baroGroundAltitude = 0;
  static int32_t baroGroundPressure = 8*101325;
  static uint16_t previousT;
  uint16_t currentT = micros();
 8007fda:	f7f9 fa77 	bl	80014cc <micros>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	80fb      	strh	r3, [r7, #6]
  uint16_t dTime;

  dTime = currentT - previousT;
 8007fe2:	4b6e      	ldr	r3, [pc, #440]	; (800819c <getEstimatedAltitude+0x1c8>)
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	88fa      	ldrh	r2, [r7, #6]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	80bb      	strh	r3, [r7, #4]
  if (dTime < 25000) return 0;
 8007fec:	88bb      	ldrh	r3, [r7, #4]
 8007fee:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d801      	bhi.n	8007ffa <getEstimatedAltitude+0x26>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e0cc      	b.n	8008194 <getEstimatedAltitude+0x1c0>
  previousT = currentT;
 8007ffa:	4a68      	ldr	r2, [pc, #416]	; (800819c <getEstimatedAltitude+0x1c8>)
 8007ffc:	88fb      	ldrh	r3, [r7, #6]
 8007ffe:	8013      	strh	r3, [r2, #0]
  if (calibratingB > 0) {
 8008000:	4b67      	ldr	r3, [pc, #412]	; (80081a0 <getEstimatedAltitude+0x1cc>)
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d043      	beq.n	8008090 <getEstimatedAltitude+0xbc>
//    logBaroGroundPressureSum = log(baroPressureSum);
//    baroGroundTemperatureScale = ((int32_t)ms5611.realTemperature + 27315) * (2 * 29.271267f); // 2 *  is included here => no need for * 2  on BaroAlt in additional LPF

    baroGroundPressure -= baroGroundPressure / 8;
 8008008:	4b66      	ldr	r3, [pc, #408]	; (80081a4 <getEstimatedAltitude+0x1d0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	da00      	bge.n	8008012 <getEstimatedAltitude+0x3e>
 8008010:	3307      	adds	r3, #7
 8008012:	10db      	asrs	r3, r3, #3
 8008014:	425b      	negs	r3, r3
 8008016:	461a      	mov	r2, r3
 8008018:	4b62      	ldr	r3, [pc, #392]	; (80081a4 <getEstimatedAltitude+0x1d0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4413      	add	r3, r2
 800801e:	4a61      	ldr	r2, [pc, #388]	; (80081a4 <getEstimatedAltitude+0x1d0>)
 8008020:	6013      	str	r3, [r2, #0]
    baroGroundPressure += baroPressureSum / 20;
 8008022:	4b61      	ldr	r3, [pc, #388]	; (80081a8 <getEstimatedAltitude+0x1d4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a61      	ldr	r2, [pc, #388]	; (80081ac <getEstimatedAltitude+0x1d8>)
 8008028:	fba2 2303 	umull	r2, r3, r2, r3
 800802c:	091b      	lsrs	r3, r3, #4
 800802e:	4a5d      	ldr	r2, [pc, #372]	; (80081a4 <getEstimatedAltitude+0x1d0>)
 8008030:	6812      	ldr	r2, [r2, #0]
 8008032:	4413      	add	r3, r2
 8008034:	461a      	mov	r2, r3
 8008036:	4b5b      	ldr	r3, [pc, #364]	; (80081a4 <getEstimatedAltitude+0x1d0>)
 8008038:	601a      	str	r2, [r3, #0]
    //debug = baroGroundPressure;
    baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190259f)) * 4433000.0f;
 800803a:	4b5a      	ldr	r3, [pc, #360]	; (80081a4 <getEstimatedAltitude+0x1d0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	da00      	bge.n	8008044 <getEstimatedAltitude+0x70>
 8008042:	3307      	adds	r3, #7
 8008044:	10db      	asrs	r3, r3, #3
 8008046:	4618      	mov	r0, r3
 8008048:	f7f8 fe62 	bl	8000d10 <__aeabi_i2f>
 800804c:	4603      	mov	r3, r0
 800804e:	4958      	ldr	r1, [pc, #352]	; (80081b0 <getEstimatedAltitude+0x1dc>)
 8008050:	4618      	mov	r0, r3
 8008052:	f7f8 ff65 	bl	8000f20 <__aeabi_fdiv>
 8008056:	4603      	mov	r3, r0
 8008058:	4956      	ldr	r1, [pc, #344]	; (80081b4 <getEstimatedAltitude+0x1e0>)
 800805a:	4618      	mov	r0, r3
 800805c:	f00d fe42 	bl	8015ce4 <powf>
 8008060:	4603      	mov	r3, r0
 8008062:	4619      	mov	r1, r3
 8008064:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008068:	f7f8 fd9c 	bl	8000ba4 <__aeabi_fsub>
 800806c:	4603      	mov	r3, r0
 800806e:	4952      	ldr	r1, [pc, #328]	; (80081b8 <getEstimatedAltitude+0x1e4>)
 8008070:	4618      	mov	r0, r3
 8008072:	f7f8 fea1 	bl	8000db8 <__aeabi_fmul>
 8008076:	4603      	mov	r3, r0
 8008078:	4618      	mov	r0, r3
 800807a:	f7f9 f879 	bl	8001170 <__aeabi_f2iz>
 800807e:	4602      	mov	r2, r0
 8008080:	4b4e      	ldr	r3, [pc, #312]	; (80081bc <getEstimatedAltitude+0x1e8>)
 8008082:	601a      	str	r2, [r3, #0]
    //debug = baroGroundAltitude;
    calibratingB--;
 8008084:	4b46      	ldr	r3, [pc, #280]	; (80081a0 <getEstimatedAltitude+0x1cc>)
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	3b01      	subs	r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	4b44      	ldr	r3, [pc, #272]	; (80081a0 <getEstimatedAltitude+0x1cc>)
 800808e:	801a      	strh	r2, [r3, #0]
  }

  // calculates height from ground via baro readings
  // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
  if(isBaroCalibrationComplete()){
 8008090:	f000 f8a4 	bl	80081dc <isBaroCalibrationComplete>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d04c      	beq.n	8008134 <getEstimatedAltitude+0x160>
  BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / 20) / 101325.0f, 0.190259f)) * 4433000.0f); // in cm
 800809a:	4b43      	ldr	r3, [pc, #268]	; (80081a8 <getEstimatedAltitude+0x1d4>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a43      	ldr	r2, [pc, #268]	; (80081ac <getEstimatedAltitude+0x1d8>)
 80080a0:	fba2 2303 	umull	r2, r3, r2, r3
 80080a4:	091b      	lsrs	r3, r3, #4
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7f8 fe2e 	bl	8000d08 <__aeabi_ui2f>
 80080ac:	4603      	mov	r3, r0
 80080ae:	4940      	ldr	r1, [pc, #256]	; (80081b0 <getEstimatedAltitude+0x1dc>)
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7f8 ff35 	bl	8000f20 <__aeabi_fdiv>
 80080b6:	4603      	mov	r3, r0
 80080b8:	493e      	ldr	r1, [pc, #248]	; (80081b4 <getEstimatedAltitude+0x1e0>)
 80080ba:	4618      	mov	r0, r3
 80080bc:	f00d fe12 	bl	8015ce4 <powf>
 80080c0:	4603      	mov	r3, r0
 80080c2:	4619      	mov	r1, r3
 80080c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80080c8:	f7f8 fd6c 	bl	8000ba4 <__aeabi_fsub>
 80080cc:	4603      	mov	r3, r0
 80080ce:	493a      	ldr	r1, [pc, #232]	; (80081b8 <getEstimatedAltitude+0x1e4>)
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7f8 fe71 	bl	8000db8 <__aeabi_fmul>
 80080d6:	4603      	mov	r3, r0
 80080d8:	4618      	mov	r0, r3
 80080da:	f00d fb35 	bl	8015748 <lrintf>
 80080de:	6038      	str	r0, [r7, #0]
  BaroAlt_tmp -= baroGroundAltitude;
 80080e0:	4b36      	ldr	r3, [pc, #216]	; (80081bc <getEstimatedAltitude+0x1e8>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	603b      	str	r3, [r7, #0]
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.6f + (float)BaroAlt_tmp * (1.0f - 0.6f)); // additional LPF to reduce baro noise
 80080ea:	4b35      	ldr	r3, [pc, #212]	; (80081c0 <getEstimatedAltitude+0x1ec>)
 80080ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f8 fe0e 	bl	8000d10 <__aeabi_i2f>
 80080f4:	4603      	mov	r3, r0
 80080f6:	4933      	ldr	r1, [pc, #204]	; (80081c4 <getEstimatedAltitude+0x1f0>)
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7f8 fe5d 	bl	8000db8 <__aeabi_fmul>
 80080fe:	4603      	mov	r3, r0
 8008100:	461c      	mov	r4, r3
 8008102:	6838      	ldr	r0, [r7, #0]
 8008104:	f7f8 fe04 	bl	8000d10 <__aeabi_i2f>
 8008108:	4603      	mov	r3, r0
 800810a:	492f      	ldr	r1, [pc, #188]	; (80081c8 <getEstimatedAltitude+0x1f4>)
 800810c:	4618      	mov	r0, r3
 800810e:	f7f8 fe53 	bl	8000db8 <__aeabi_fmul>
 8008112:	4603      	mov	r3, r0
 8008114:	4619      	mov	r1, r3
 8008116:	4620      	mov	r0, r4
 8008118:	f7f8 fd46 	bl	8000ba8 <__addsf3>
 800811c:	4603      	mov	r3, r0
 800811e:	4618      	mov	r0, r3
 8008120:	f00d fb12 	bl	8015748 <lrintf>
 8008124:	4602      	mov	r2, r0
 8008126:	4b26      	ldr	r3, [pc, #152]	; (80081c0 <getEstimatedAltitude+0x1ec>)
 8008128:	671a      	str	r2, [r3, #112]	; 0x70
  alt.EstAlt = ms5611.BaroAlt;
 800812a:	4b25      	ldr	r3, [pc, #148]	; (80081c0 <getEstimatedAltitude+0x1ec>)
 800812c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812e:	4a27      	ldr	r2, [pc, #156]	; (80081cc <getEstimatedAltitude+0x1f8>)
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	e002      	b.n	800813a <getEstimatedAltitude+0x166>
  }else{
    alt.EstAlt = 0;
 8008134:	4b25      	ldr	r3, [pc, #148]	; (80081cc <getEstimatedAltitude+0x1f8>)
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]

  //  ms5611.BaroAlt = ( logBaroGroundPressureSum - log(baroPressureSum) ) * baroGroundTemperatureScale;
  //  alt.EstAlt = (alt.EstAlt * 6 + ms5611.BaroAlt ) >> 3; // additional LPF to reduce baro noise (faster by 30 µs)
  //if(alt.EstAlt < 0) alt.EstAlt = 0;

  if ((f.ARMED|f.mag_reset) && !altitudeOffsetSet) {
 800813a:	4b25      	ldr	r3, [pc, #148]	; (80081d0 <getEstimatedAltitude+0x1fc>)
 800813c:	785a      	ldrb	r2, [r3, #1]
 800813e:	4b24      	ldr	r3, [pc, #144]	; (80081d0 <getEstimatedAltitude+0x1fc>)
 8008140:	7e9b      	ldrb	r3, [r3, #26]
 8008142:	4313      	orrs	r3, r2
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d011      	beq.n	800816e <getEstimatedAltitude+0x19a>
 800814a:	4b22      	ldr	r3, [pc, #136]	; (80081d4 <getEstimatedAltitude+0x200>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	f083 0301 	eor.w	r3, r3, #1
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <getEstimatedAltitude+0x19a>
      f.mag_reset = false;
 8008158:	4b1d      	ldr	r3, [pc, #116]	; (80081d0 <getEstimatedAltitude+0x1fc>)
 800815a:	2200      	movs	r2, #0
 800815c:	769a      	strb	r2, [r3, #26]
      baroAltOffset = alt.EstAlt;
 800815e:	4b1b      	ldr	r3, [pc, #108]	; (80081cc <getEstimatedAltitude+0x1f8>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a1d      	ldr	r2, [pc, #116]	; (80081d8 <getEstimatedAltitude+0x204>)
 8008164:	6013      	str	r3, [r2, #0]
      altitudeOffsetSet = true;
 8008166:	4b1b      	ldr	r3, [pc, #108]	; (80081d4 <getEstimatedAltitude+0x200>)
 8008168:	2201      	movs	r2, #1
 800816a:	701a      	strb	r2, [r3, #0]
 800816c:	e00a      	b.n	8008184 <getEstimatedAltitude+0x1b0>
  } else if (!f.ARMED && altitudeOffsetSet) {
 800816e:	4b18      	ldr	r3, [pc, #96]	; (80081d0 <getEstimatedAltitude+0x1fc>)
 8008170:	785b      	ldrb	r3, [r3, #1]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d106      	bne.n	8008184 <getEstimatedAltitude+0x1b0>
 8008176:	4b17      	ldr	r3, [pc, #92]	; (80081d4 <getEstimatedAltitude+0x200>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <getEstimatedAltitude+0x1b0>
      altitudeOffsetSet = false;
 800817e:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <getEstimatedAltitude+0x200>)
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
  }
  alt.EstAlt -= baroAltOffset;
 8008184:	4b11      	ldr	r3, [pc, #68]	; (80081cc <getEstimatedAltitude+0x1f8>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	4b13      	ldr	r3, [pc, #76]	; (80081d8 <getEstimatedAltitude+0x204>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	4a0f      	ldr	r2, [pc, #60]	; (80081cc <getEstimatedAltitude+0x1f8>)
 8008190:	6013      	str	r3, [r2, #0]
  return 1;
 8008192:	2301      	movs	r3, #1
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	bd90      	pop	{r4, r7, pc}
 800819c:	20000444 	.word	0x20000444
 80081a0:	2000000a 	.word	0x2000000a
 80081a4:	20000024 	.word	0x20000024
 80081a8:	20000380 	.word	0x20000380
 80081ac:	cccccccd 	.word	0xcccccccd
 80081b0:	47c5e680 	.word	0x47c5e680
 80081b4:	3e42d341 	.word	0x3e42d341
 80081b8:	4a8748d0 	.word	0x4a8748d0
 80081bc:	20000448 	.word	0x20000448
 80081c0:	20000da0 	.word	0x20000da0
 80081c4:	3f19999a 	.word	0x3f19999a
 80081c8:	3ecccccc 	.word	0x3ecccccc
 80081cc:	20000ef0 	.word	0x20000ef0
 80081d0:	20000ed4 	.word	0x20000ed4
 80081d4:	2000044c 	.word	0x2000044c
 80081d8:	20000450 	.word	0x20000450

080081dc <isBaroCalibrationComplete>:

bool isBaroCalibrationComplete(void)
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
    return calibratingB == 0;
 80081e0:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <isBaroCalibrationComplete+0x1c>)
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	bf0c      	ite	eq
 80081e8:	2301      	moveq	r3, #1
 80081ea:	2300      	movne	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	2000000a 	.word	0x2000000a

080081fc <MS561101BA_Calculate>:

    return readRegister24(MS5611_CMD_ADC_READ);
}

void MS561101BA_Calculate(void)
{
 80081fc:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8008200:	b08d      	sub	sp, #52	; 0x34
 8008202:	af00      	add	r7, sp, #0
  int64_t delt;

  uint32_t D1 = ms5611.rawPressure;
 8008204:	4bc6      	ldr	r3, [pc, #792]	; (8008520 <MS561101BA_Calculate+0x324>)
 8008206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008208:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t D2 = ms5611.rawTemp;
 800820a:	4bc5      	ldr	r3, [pc, #788]	; (8008520 <MS561101BA_Calculate+0x324>)
 800820c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820e:	623b      	str	r3, [r7, #32]
  int64_t dT = D2 - ((uint32_t)ms5611.fc[4] << 8);
 8008210:	4bc3      	ldr	r3, [pc, #780]	; (8008520 <MS561101BA_Calculate+0x324>)
 8008212:	891b      	ldrh	r3, [r3, #8]
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	6a3a      	ldr	r2, [r7, #32]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	f04f 0400 	mov.w	r4, #0
 800821e:	e9c7 3406 	strd	r3, r4, [r7, #24]

  int64_t OFF = ((int64_t)ms5611.fc[1] << 16) + (((int64_t)ms5611.fc[3] * dT) >> 7);
 8008222:	4bbf      	ldr	r3, [pc, #764]	; (8008520 <MS561101BA_Calculate+0x324>)
 8008224:	885b      	ldrh	r3, [r3, #2]
 8008226:	b29b      	uxth	r3, r3
 8008228:	f04f 0400 	mov.w	r4, #0
 800822c:	0c1e      	lsrs	r6, r3, #16
 800822e:	041d      	lsls	r5, r3, #16
 8008230:	4bbb      	ldr	r3, [pc, #748]	; (8008520 <MS561101BA_Calculate+0x324>)
 8008232:	88db      	ldrh	r3, [r3, #6]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f04f 0400 	mov.w	r4, #0
 800823a:	69ba      	ldr	r2, [r7, #24]
 800823c:	fb04 f102 	mul.w	r1, r4, r2
 8008240:	69fa      	ldr	r2, [r7, #28]
 8008242:	fb03 f202 	mul.w	r2, r3, r2
 8008246:	1888      	adds	r0, r1, r2
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	fba2 1203 	umull	r1, r2, r2, r3
 800824e:	1883      	adds	r3, r0, r2
 8008250:	461a      	mov	r2, r3
 8008252:	f04f 0800 	mov.w	r8, #0
 8008256:	f04f 0900 	mov.w	r9, #0
 800825a:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 800825e:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 8008262:	ea4f 19e2 	mov.w	r9, r2, asr #7
 8008266:	eb18 0305 	adds.w	r3, r8, r5
 800826a:	eb49 0406 	adc.w	r4, r9, r6
 800826e:	e9c7 3404 	strd	r3, r4, [r7, #16]
  int64_t SENS =((int64_t)ms5611.fc[0] << 15) + (((int64_t)ms5611.fc[2] * dT) >> 8);
 8008272:	4bab      	ldr	r3, [pc, #684]	; (8008520 <MS561101BA_Calculate+0x324>)
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f04f 0400 	mov.w	r4, #0
 800827c:	f04f 0100 	mov.w	r1, #0
 8008280:	f04f 0200 	mov.w	r2, #0
 8008284:	03e2      	lsls	r2, r4, #15
 8008286:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 800828a:	03d9      	lsls	r1, r3, #15
 800828c:	4ba4      	ldr	r3, [pc, #656]	; (8008520 <MS561101BA_Calculate+0x324>)
 800828e:	889b      	ldrh	r3, [r3, #4]
 8008290:	b29b      	uxth	r3, r3
 8008292:	f04f 0400 	mov.w	r4, #0
 8008296:	69b8      	ldr	r0, [r7, #24]
 8008298:	fb04 f500 	mul.w	r5, r4, r0
 800829c:	69f8      	ldr	r0, [r7, #28]
 800829e:	fb03 f000 	mul.w	r0, r3, r0
 80082a2:	4428      	add	r0, r5
 80082a4:	69bd      	ldr	r5, [r7, #24]
 80082a6:	fba5 5603 	umull	r5, r6, r5, r3
 80082aa:	1983      	adds	r3, r0, r6
 80082ac:	461e      	mov	r6, r3
 80082ae:	f04f 0800 	mov.w	r8, #0
 80082b2:	f04f 0900 	mov.w	r9, #0
 80082b6:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80082ba:	ea48 6806 	orr.w	r8, r8, r6, lsl #24
 80082be:	ea4f 2926 	mov.w	r9, r6, asr #8
 80082c2:	eb18 0301 	adds.w	r3, r8, r1
 80082c6:	eb49 0402 	adc.w	r4, r9, r2
 80082ca:	e9c7 3402 	strd	r3, r4, [r7, #8]

  int64_t TEMP = 2000 + ((dT * (int64_t)ms5611.fc[5]) >> 23);
 80082ce:	4b94      	ldr	r3, [pc, #592]	; (8008520 <MS561101BA_Calculate+0x324>)
 80082d0:	895b      	ldrh	r3, [r3, #10]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f04f 0400 	mov.w	r4, #0
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	fb04 f102 	mul.w	r1, r4, r2
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	fb03 f202 	mul.w	r2, r3, r2
 80082e4:	1888      	adds	r0, r1, r2
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	fba2 1203 	umull	r1, r2, r2, r3
 80082ec:	1883      	adds	r3, r0, r2
 80082ee:	461a      	mov	r2, r3
 80082f0:	f04f 0500 	mov.w	r5, #0
 80082f4:	f04f 0600 	mov.w	r6, #0
 80082f8:	0dcd      	lsrs	r5, r1, #23
 80082fa:	ea45 2542 	orr.w	r5, r5, r2, lsl #9
 80082fe:	15d6      	asrs	r6, r2, #23
 8008300:	f515 63fa 	adds.w	r3, r5, #2000	; 0x7d0
 8008304:	f146 0400 	adc.w	r4, r6, #0
 8008308:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

  ms5611.OFF2 = 0;
 800830c:	4a84      	ldr	r2, [pc, #528]	; (8008520 <MS561101BA_Calculate+0x324>)
 800830e:	f04f 0300 	mov.w	r3, #0
 8008312:	f04f 0400 	mov.w	r4, #0
 8008316:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
  ms5611.SENS2 = 0;
 800831a:	4a81      	ldr	r2, [pc, #516]	; (8008520 <MS561101BA_Calculate+0x324>)
 800831c:	f04f 0300 	mov.w	r3, #0
 8008320:	f04f 0400 	mov.w	r4, #0
 8008324:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

  if (TEMP < 2000)
 8008328:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800832c:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8008330:	f04f 0200 	mov.w	r2, #0
 8008334:	4299      	cmp	r1, r3
 8008336:	eb72 0304 	sbcs.w	r3, r2, r4
 800833a:	f2c0 8115 	blt.w	8008568 <MS561101BA_Calculate+0x36c>
  {
    delt = TEMP - 2000;
 800833e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008342:	f5b3 61fa 	subs.w	r1, r3, #2000	; 0x7d0
 8008346:	f144 32ff 	adc.w	r2, r4, #4294967295
 800834a:	e9c7 1200 	strd	r1, r2, [r7]
    ms5611.OFF2 = 5 * (delt * delt) / 2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	fb02 f203 	mul.w	r2, r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	fb01 f303 	mul.w	r3, r1, r3
 800835e:	4413      	add	r3, r2
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	fba1 5602 	umull	r5, r6, r1, r2
 8008368:	4433      	add	r3, r6
 800836a:	461e      	mov	r6, r3
 800836c:	4629      	mov	r1, r5
 800836e:	4632      	mov	r2, r6
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	f04f 0400 	mov.w	r4, #0
 8008378:	0094      	lsls	r4, r2, #2
 800837a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800837e:	008b      	lsls	r3, r1, #2
 8008380:	4619      	mov	r1, r3
 8008382:	4622      	mov	r2, r4
 8008384:	eb11 0805 	adds.w	r8, r1, r5
 8008388:	eb42 0906 	adc.w	r9, r2, r6
 800838c:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 8008390:	4611      	mov	r1, r2
 8008392:	f04f 0200 	mov.w	r2, #0
 8008396:	eb18 0301 	adds.w	r3, r8, r1
 800839a:	eb49 0402 	adc.w	r4, r9, r2
 800839e:	1064      	asrs	r4, r4, #1
 80083a0:	ea4f 0333 	mov.w	r3, r3, rrx
 80083a4:	4a5e      	ldr	r2, [pc, #376]	; (8008520 <MS561101BA_Calculate+0x324>)
 80083a6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    ms5611.SENS2 = 5 * (delt * delt) / 4;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	fb02 f203 	mul.w	r2, r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	fb01 f303 	mul.w	r3, r1, r3
 80083ba:	4413      	add	r3, r2
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	fba1 5602 	umull	r5, r6, r1, r2
 80083c4:	4433      	add	r3, r6
 80083c6:	461e      	mov	r6, r3
 80083c8:	4629      	mov	r1, r5
 80083ca:	4632      	mov	r2, r6
 80083cc:	f04f 0300 	mov.w	r3, #0
 80083d0:	f04f 0400 	mov.w	r4, #0
 80083d4:	0094      	lsls	r4, r2, #2
 80083d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80083da:	008b      	lsls	r3, r1, #2
 80083dc:	4619      	mov	r1, r3
 80083de:	4622      	mov	r2, r4
 80083e0:	194b      	adds	r3, r1, r5
 80083e2:	eb42 0406 	adc.w	r4, r2, r6
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f174 0200 	sbcs.w	r2, r4, #0
 80083ec:	da02      	bge.n	80083f4 <MS561101BA_Calculate+0x1f8>
 80083ee:	3303      	adds	r3, #3
 80083f0:	f144 0400 	adc.w	r4, r4, #0
 80083f4:	f04f 0100 	mov.w	r1, #0
 80083f8:	f04f 0200 	mov.w	r2, #0
 80083fc:	0899      	lsrs	r1, r3, #2
 80083fe:	ea41 7184 	orr.w	r1, r1, r4, lsl #30
 8008402:	10a2      	asrs	r2, r4, #2
 8008404:	460b      	mov	r3, r1
 8008406:	4614      	mov	r4, r2
 8008408:	4a45      	ldr	r2, [pc, #276]	; (8008520 <MS561101BA_Calculate+0x324>)
 800840a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    if (TEMP < -1500)
 800840e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008412:	4944      	ldr	r1, [pc, #272]	; (8008524 <MS561101BA_Calculate+0x328>)
 8008414:	f04f 32ff 	mov.w	r2, #4294967295
 8008418:	428b      	cmp	r3, r1
 800841a:	eb74 0302 	sbcs.w	r3, r4, r2
 800841e:	f280 8083 	bge.w	8008528 <MS561101BA_Calculate+0x32c>
    {
      delt = TEMP + 1500;
 8008422:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008426:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800842a:	f04f 0200 	mov.w	r2, #0
 800842e:	185d      	adds	r5, r3, r1
 8008430:	eb44 0602 	adc.w	r6, r4, r2
 8008434:	e9c7 5600 	strd	r5, r6, [r7]
      ms5611.OFF2 = ms5611.OFF2 + 7 * (delt * delt);
 8008438:	4b39      	ldr	r3, [pc, #228]	; (8008520 <MS561101BA_Calculate+0x324>)
 800843a:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	fb02 f203 	mul.w	r2, r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	fb01 f303 	mul.w	r3, r1, r3
 800844e:	4413      	add	r3, r2
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	fba1 5602 	umull	r5, r6, r1, r2
 8008458:	4433      	add	r3, r6
 800845a:	461e      	mov	r6, r3
 800845c:	4629      	mov	r1, r5
 800845e:	4632      	mov	r2, r6
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	f04f 0400 	mov.w	r4, #0
 8008468:	00d4      	lsls	r4, r2, #3
 800846a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800846e:	00cb      	lsls	r3, r1, #3
 8008470:	4619      	mov	r1, r3
 8008472:	4622      	mov	r2, r4
 8008474:	460b      	mov	r3, r1
 8008476:	4614      	mov	r4, r2
 8008478:	1b5b      	subs	r3, r3, r5
 800847a:	eb64 0406 	sbc.w	r4, r4, r6
 800847e:	4619      	mov	r1, r3
 8008480:	4622      	mov	r2, r4
 8008482:	eb11 0308 	adds.w	r3, r1, r8
 8008486:	eb42 0409 	adc.w	r4, r2, r9
 800848a:	4a25      	ldr	r2, [pc, #148]	; (8008520 <MS561101BA_Calculate+0x324>)
 800848c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
      ms5611.SENS2 = ms5611.SENS2 + 11 * (delt * delt) / 2;
 8008490:	4b23      	ldr	r3, [pc, #140]	; (8008520 <MS561101BA_Calculate+0x324>)
 8008492:	e9d3 8912 	ldrd	r8, r9, [r3, #72]	; 0x48
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	fb02 f203 	mul.w	r2, r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	fb01 f303 	mul.w	r3, r1, r3
 80084a6:	4413      	add	r3, r2
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	fba1 5602 	umull	r5, r6, r1, r2
 80084b0:	4433      	add	r3, r6
 80084b2:	461e      	mov	r6, r3
 80084b4:	46ab      	mov	fp, r5
 80084b6:	46b4      	mov	ip, r6
 80084b8:	eb1b 030b 	adds.w	r3, fp, fp
 80084bc:	eb4c 040c 	adc.w	r4, ip, ip
 80084c0:	469b      	mov	fp, r3
 80084c2:	46a4      	mov	ip, r4
 80084c4:	eb1b 0b05 	adds.w	fp, fp, r5
 80084c8:	eb4c 0c06 	adc.w	ip, ip, r6
 80084cc:	f04f 0100 	mov.w	r1, #0
 80084d0:	f04f 0200 	mov.w	r2, #0
 80084d4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80084d8:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80084dc:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80084e0:	468b      	mov	fp, r1
 80084e2:	4694      	mov	ip, r2
 80084e4:	ebbb 0b05 	subs.w	fp, fp, r5
 80084e8:	eb6c 0c06 	sbc.w	ip, ip, r6
 80084ec:	465c      	mov	r4, fp
 80084ee:	4665      	mov	r5, ip
 80084f0:	462b      	mov	r3, r5
 80084f2:	0fda      	lsrs	r2, r3, #31
 80084f4:	4611      	mov	r1, r2
 80084f6:	f04f 0200 	mov.w	r2, #0
 80084fa:	4623      	mov	r3, r4
 80084fc:	462c      	mov	r4, r5
 80084fe:	185b      	adds	r3, r3, r1
 8008500:	eb44 0402 	adc.w	r4, r4, r2
 8008504:	1064      	asrs	r4, r4, #1
 8008506:	ea4f 0333 	mov.w	r3, r3, rrx
 800850a:	4619      	mov	r1, r3
 800850c:	4622      	mov	r2, r4
 800850e:	eb11 0308 	adds.w	r3, r1, r8
 8008512:	eb42 0409 	adc.w	r4, r2, r9
 8008516:	4a02      	ldr	r2, [pc, #8]	; (8008520 <MS561101BA_Calculate+0x324>)
 8008518:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 800851c:	e004      	b.n	8008528 <MS561101BA_Calculate+0x32c>
 800851e:	bf00      	nop
 8008520:	20000da0 	.word	0x20000da0
 8008524:	fffffa24 	.word	0xfffffa24
    }
    TEMP -= ((dT * dT) >> 31);
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	fb02 f203 	mul.w	r2, r2, r3
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	69b9      	ldr	r1, [r7, #24]
 8008534:	fb01 f303 	mul.w	r3, r1, r3
 8008538:	4413      	add	r3, r2
 800853a:	69b9      	ldr	r1, [r7, #24]
 800853c:	69ba      	ldr	r2, [r7, #24]
 800853e:	fba1 1202 	umull	r1, r2, r1, r2
 8008542:	4413      	add	r3, r2
 8008544:	461a      	mov	r2, r3
 8008546:	f04f 0500 	mov.w	r5, #0
 800854a:	f04f 0600 	mov.w	r6, #0
 800854e:	0fcd      	lsrs	r5, r1, #31
 8008550:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 8008554:	17d6      	asrs	r6, r2, #31
 8008556:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800855a:	460b      	mov	r3, r1
 800855c:	4614      	mov	r4, r2
 800855e:	1b5b      	subs	r3, r3, r5
 8008560:	eb64 0406 	sbc.w	r4, r4, r6
 8008564:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  }

  OFF = OFF - ms5611.OFF2;
 8008568:	4b25      	ldr	r3, [pc, #148]	; (8008600 <MS561101BA_Calculate+0x404>)
 800856a:	e9d3 5610 	ldrd	r5, r6, [r3, #64]	; 0x40
 800856e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008572:	460b      	mov	r3, r1
 8008574:	4614      	mov	r4, r2
 8008576:	1b5b      	subs	r3, r3, r5
 8008578:	eb64 0406 	sbc.w	r4, r4, r6
 800857c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  SENS = SENS - ms5611.SENS2;
 8008580:	4b1f      	ldr	r3, [pc, #124]	; (8008600 <MS561101BA_Calculate+0x404>)
 8008582:	e9d3 5612 	ldrd	r5, r6, [r3, #72]	; 0x48
 8008586:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800858a:	460b      	mov	r3, r1
 800858c:	4614      	mov	r4, r2
 800858e:	1b5b      	subs	r3, r3, r5
 8008590:	eb64 0406 	sbc.w	r4, r4, r6
 8008594:	e9c7 3402 	strd	r3, r4, [r7, #8]

  ms5611.realPressure = ((((int64_t)D1 * SENS) >> 21) - OFF) >> 15;
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	f04f 0400 	mov.w	r4, #0
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	fb04 f102 	mul.w	r1, r4, r2
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	fb03 f202 	mul.w	r2, r3, r2
 80085aa:	1888      	adds	r0, r1, r2
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	fba2 1203 	umull	r1, r2, r2, r3
 80085b2:	1883      	adds	r3, r0, r2
 80085b4:	461a      	mov	r2, r3
 80085b6:	f04f 0300 	mov.w	r3, #0
 80085ba:	f04f 0400 	mov.w	r4, #0
 80085be:	0d4b      	lsrs	r3, r1, #21
 80085c0:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80085c4:	1554      	asrs	r4, r2, #21
 80085c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80085ca:	1a5b      	subs	r3, r3, r1
 80085cc:	eb64 0402 	sbc.w	r4, r4, r2
 80085d0:	461d      	mov	r5, r3
 80085d2:	4626      	mov	r6, r4
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	f04f 0400 	mov.w	r4, #0
 80085dc:	0beb      	lsrs	r3, r5, #15
 80085de:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80085e2:	13f4      	asrs	r4, r6, #15
 80085e4:	461a      	mov	r2, r3
 80085e6:	4b06      	ldr	r3, [pc, #24]	; (8008600 <MS561101BA_Calculate+0x404>)
 80085e8:	65da      	str	r2, [r3, #92]	; 0x5c
  ms5611.realTemperature = (uint32_t)TEMP;
 80085ea:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80085ee:	4b04      	ldr	r3, [pc, #16]	; (8008600 <MS561101BA_Calculate+0x404>)
 80085f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 80085f4:	bf00      	nop
 80085f6:	3734      	adds	r7, #52	; 0x34
 80085f8:	46bd      	mov	sp, r7
 80085fa:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 80085fe:	4770      	bx	lr
 8008600:	20000da0 	.word	0x20000da0

08008604 <readRegister16>:

// Read 16-bit from register (oops MSB, LSB)
uint16_t readRegister16(uint8_t reg)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
    uint16_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	2201      	movs	r2, #1
 8008612:	4619      	mov	r1, r3
 8008614:	20ee      	movs	r0, #238	; 0xee
 8008616:	f002 fe8d 	bl	800b334 <I2C_Write>

    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 800861a:	2202      	movs	r2, #2
 800861c:	490b      	ldr	r1, [pc, #44]	; (800864c <readRegister16+0x48>)
 800861e:	20ee      	movs	r0, #238	; 0xee
 8008620:	f002 fec8 	bl	800b3b4 <I2C_Read>

    uint8_t vha = rawADC[0];
 8008624:	4b09      	ldr	r3, [pc, #36]	; (800864c <readRegister16+0x48>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	73fb      	strb	r3, [r7, #15]
    uint8_t vla = rawADC[1];
 800862a:	4b08      	ldr	r3, [pc, #32]	; (800864c <readRegister16+0x48>)
 800862c:	785b      	ldrb	r3, [r3, #1]
 800862e:	73bb      	strb	r3, [r7, #14]

    value = vha << 8 | vla;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	021b      	lsls	r3, r3, #8
 8008634:	b21a      	sxth	r2, r3
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	b21b      	sxth	r3, r3
 800863a:	4313      	orrs	r3, r2
 800863c:	b21b      	sxth	r3, r3
 800863e:	81bb      	strh	r3, [r7, #12]

    return value;
 8008640:	89bb      	ldrh	r3, [r7, #12]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000f0c 	.word	0x20000f0c

08008650 <readRegister24>:

// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	71fb      	strb	r3, [r7, #7]
    uint32_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	2201      	movs	r2, #1
 800865e:	4619      	mov	r1, r3
 8008660:	20ee      	movs	r0, #238	; 0xee
 8008662:	f002 fe67 	bl	800b334 <I2C_Write>

    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 8008666:	2203      	movs	r2, #3
 8008668:	490c      	ldr	r1, [pc, #48]	; (800869c <readRegister24+0x4c>)
 800866a:	20ee      	movs	r0, #238	; 0xee
 800866c:	f002 fea2 	bl	800b3b4 <I2C_Read>

    uint8_t vxa = rawADC[0];
 8008670:	4b0a      	ldr	r3, [pc, #40]	; (800869c <readRegister24+0x4c>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	73fb      	strb	r3, [r7, #15]
    uint8_t vha = rawADC[1];
 8008676:	4b09      	ldr	r3, [pc, #36]	; (800869c <readRegister24+0x4c>)
 8008678:	785b      	ldrb	r3, [r3, #1]
 800867a:	73bb      	strb	r3, [r7, #14]
    uint8_t vla = rawADC[2];
 800867c:	4b07      	ldr	r3, [pc, #28]	; (800869c <readRegister24+0x4c>)
 800867e:	789b      	ldrb	r3, [r3, #2]
 8008680:	737b      	strb	r3, [r7, #13]

    value = ((int32_t)vxa << 16) | ((int32_t)vha << 8) | vla;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	041a      	lsls	r2, r3, #16
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	021b      	lsls	r3, r3, #8
 800868a:	431a      	orrs	r2, r3
 800868c:	7b7b      	ldrb	r3, [r7, #13]
 800868e:	4313      	orrs	r3, r2
 8008690:	60bb      	str	r3, [r7, #8]

    return value;
 8008692:	68bb      	ldr	r3, [r7, #8]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	20000f0c 	.word	0x20000f0c

080086a0 <cliBaro>:


void cliBaro(cli_args_t *args)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80086a8:	2300      	movs	r3, #0
 80086aa:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 1 && args->isStr(0, "show")==true)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d14b      	bne.n	800874c <cliBaro+0xac>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	492b      	ldr	r1, [pc, #172]	; (8008768 <cliBaro+0xc8>)
 80086ba:	2000      	movs	r0, #0
 80086bc:	4798      	blx	r3
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d043      	beq.n	800874c <cliBaro+0xac>
	{
		uint32_t currentTime;
		uint32_t pre_time;

		pre_time = micros();
 80086c4:	f7f8 ff02 	bl	80014cc <micros>
 80086c8:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 80086ca:	e03a      	b.n	8008742 <cliBaro+0xa2>
		{
			currentTime = micros()-pre_time;
 80086cc:	f7f8 fefe 	bl	80014cc <micros>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	60fb      	str	r3, [r7, #12]
			if(currentTime >= 4000)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80086de:	d32e      	bcc.n	800873e <cliBaro+0x9e>
			{
				pre_time = micros();
 80086e0:	f7f8 fef4 	bl	80014cc <micros>
 80086e4:	6138      	str	r0, [r7, #16]
		  	static uint8_t taskOrder = 0;
		  	    switch (taskOrder){ //4~206us
 80086e6:	4b21      	ldr	r3, [pc, #132]	; (800876c <cliBaro+0xcc>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d00f      	beq.n	800870e <cliBaro+0x6e>
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d018      	beq.n	8008724 <cliBaro+0x84>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d123      	bne.n	800873e <cliBaro+0x9e>
		  	      case 0: //200us
		  	        taskOrder++;
 80086f6:	4b1d      	ldr	r3, [pc, #116]	; (800876c <cliBaro+0xcc>)
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	4b1b      	ldr	r3, [pc, #108]	; (800876c <cliBaro+0xcc>)
 8008700:	701a      	strb	r2, [r3, #0]
		  	        if(Baro_update(currentTime)) break;
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7ff fc08 	bl	8007f18 <Baro_update>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d114      	bne.n	8008738 <cliBaro+0x98>
		  	      case 1:  //80us
		  	      	taskOrder++;
 800870e:	4b17      	ldr	r3, [pc, #92]	; (800876c <cliBaro+0xcc>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	b2da      	uxtb	r2, r3
 8008716:	4b15      	ldr	r3, [pc, #84]	; (800876c <cliBaro+0xcc>)
 8008718:	701a      	strb	r2, [r3, #0]
		  	        if(getEstimatedAltitude() !=0) break;
 800871a:	f7ff fc5b 	bl	8007fd4 <getEstimatedAltitude>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10b      	bne.n	800873c <cliBaro+0x9c>
		  	      case 2:  //40~50us
		  	        taskOrder = 0;
 8008724:	4b11      	ldr	r3, [pc, #68]	; (800876c <cliBaro+0xcc>)
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
		  	        cliPrintf("Baro : %d cm\r\n", ms5611.rawTemp);
 800872a:	4b11      	ldr	r3, [pc, #68]	; (8008770 <cliBaro+0xd0>)
 800872c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800872e:	4619      	mov	r1, r3
 8008730:	4810      	ldr	r0, [pc, #64]	; (8008774 <cliBaro+0xd4>)
 8008732:	f002 fa91 	bl	800ac58 <cliPrintf>
 8008736:	e002      	b.n	800873e <cliBaro+0x9e>
		  	        if(Baro_update(currentTime)) break;
 8008738:	bf00      	nop
 800873a:	e000      	b.n	800873e <cliBaro+0x9e>
		  	        if(getEstimatedAltitude() !=0) break;
 800873c:	bf00      	nop
		  	    }
			}
			ret = true;
 800873e:	2301      	movs	r3, #1
 8008740:	75fb      	strb	r3, [r7, #23]
		while(cliKeepLoop())
 8008742:	f002 fb7d 	bl	800ae40 <cliKeepLoop>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1bf      	bne.n	80086cc <cliBaro+0x2c>
		}
	}
	if(ret !=true)
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	f083 0301 	eor.w	r3, r3, #1
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <cliBaro+0xbe>
	{
		cliPrintf("baro show");
 8008758:	4807      	ldr	r0, [pc, #28]	; (8008778 <cliBaro+0xd8>)
 800875a:	f002 fa7d 	bl	800ac58 <cliPrintf>
	}
}
 800875e:	bf00      	nop
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	08019c44 	.word	0x08019c44
 800876c:	20000454 	.word	0x20000454
 8008770:	20000da0 	.word	0x20000da0
 8008774:	08019c4c 	.word	0x08019c4c
 8008778:	08019c5c 	.word	0x08019c5c

0800877c <serialize8>:
static void s_struct_partial(uint8_t *cb,uint8_t siz);
static void s_struct(uint8_t *cb,uint8_t siz);


void serialize8(uint8_t a)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	71fb      	strb	r3, [r7, #7]
	SerialSerialize(CURRENTPORT,a);
 8008786:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <serialize8+0x34>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	79fa      	ldrb	r2, [r7, #7]
 800878c:	4611      	mov	r1, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f001 fc80 	bl	800a094 <SerialSerialize>
	currentPortState->checksum ^= (a & 0xFF);
 8008794:	4b07      	ldr	r3, [pc, #28]	; (80087b4 <serialize8+0x38>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	7819      	ldrb	r1, [r3, #0]
 800879a:	4b06      	ldr	r3, [pc, #24]	; (80087b4 <serialize8+0x38>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	79fa      	ldrb	r2, [r7, #7]
 80087a0:	404a      	eors	r2, r1
 80087a2:	b2d2      	uxtb	r2, r2
 80087a4:	701a      	strb	r2, [r3, #0]
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	20000662 	.word	0x20000662
 80087b4:	20000028 	.word	0x20000028

080087b8 <read8>:
	serialize8((a>>16) & 0xFF);
	serialize8((a>>24) & 0xFF);
}

uint8_t read8(void)
{
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
	return currentPortState->inBuf[currentPortState->indRX++] & 0xff;
 80087bc:	4b07      	ldr	r3, [pc, #28]	; (80087dc <read8+0x24>)
 80087be:	6819      	ldr	r1, [r3, #0]
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <read8+0x24>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	785a      	ldrb	r2, [r3, #1]
 80087c6:	1c50      	adds	r0, r2, #1
 80087c8:	b2c0      	uxtb	r0, r0
 80087ca:	7058      	strb	r0, [r3, #1]
 80087cc:	4613      	mov	r3, r2
 80087ce:	440b      	add	r3, r1
 80087d0:	789b      	ldrb	r3, [r3, #2]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bc80      	pop	{r7}
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000028 	.word	0x20000028

080087e0 <read16>:

uint16_t read16(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
	uint16_t t = read8();
 80087e6:	f7ff ffe7 	bl	80087b8 <read8>
 80087ea:	4603      	mov	r3, r0
 80087ec:	80fb      	strh	r3, [r7, #6]
	t += (uint16_t)read8() << 8;
 80087ee:	f7ff ffe3 	bl	80087b8 <read8>
 80087f2:	4603      	mov	r3, r0
 80087f4:	021b      	lsls	r3, r3, #8
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	88fb      	ldrh	r3, [r7, #6]
 80087fa:	4413      	add	r3, r2
 80087fc:	80fb      	strh	r3, [r7, #6]
	return t;
 80087fe:	88fb      	ldrh	r3, [r7, #6]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <headSerialResponse>:
{
	headSerial(0, s, cmdMSP);
}

void headSerialResponse(uint8_t err, uint8_t s)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	4603      	mov	r3, r0
 8008810:	460a      	mov	r2, r1
 8008812:	71fb      	strb	r3, [r7, #7]
 8008814:	4613      	mov	r3, r2
 8008816:	71bb      	strb	r3, [r7, #6]
	serialize8('$');
 8008818:	2024      	movs	r0, #36	; 0x24
 800881a:	f7ff ffaf 	bl	800877c <serialize8>
	serialize8('M');
 800881e:	204d      	movs	r0, #77	; 0x4d
 8008820:	f7ff ffac 	bl	800877c <serialize8>
	serialize8(err ? '!' : '>');
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <headSerialResponse+0x26>
 800882a:	2321      	movs	r3, #33	; 0x21
 800882c:	e000      	b.n	8008830 <headSerialResponse+0x28>
 800882e:	233e      	movs	r3, #62	; 0x3e
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff ffa3 	bl	800877c <serialize8>
	currentPortState->checksum = 0;               // start calculating a new checksum
 8008836:	4b09      	ldr	r3, [pc, #36]	; (800885c <headSerialResponse+0x54>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2200      	movs	r2, #0
 800883c:	701a      	strb	r2, [r3, #0]
	serialize8(s);
 800883e:	79bb      	ldrb	r3, [r7, #6]
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff ff9b 	bl	800877c <serialize8>
	serialize8(currentPortState->cmdMSP);
 8008846:	4b05      	ldr	r3, [pc, #20]	; (800885c <headSerialResponse+0x54>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff ff94 	bl	800877c <serialize8>
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20000028 	.word	0x20000028

08008860 <headSerialReply>:

void headSerialReply(uint8_t s)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	71fb      	strb	r3, [r7, #7]
	headSerialResponse(0, s);
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	4619      	mov	r1, r3
 800886e:	2000      	movs	r0, #0
 8008870:	f7ff ffca 	bl	8008808 <headSerialResponse>
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <tailSerialReply>:
{
	headSerialResponse(1, s);
}

void tailSerialReply(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
	SerialSerialize(CURRENTPORT,currentPortState->checksum);
 8008880:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <tailSerialReply+0x24>)
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	4b07      	ldr	r3, [pc, #28]	; (80088a4 <tailSerialReply+0x28>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	4619      	mov	r1, r3
 800888c:	4610      	mov	r0, r2
 800888e:	f001 fc01 	bl	800a094 <SerialSerialize>
	UartSendData(CURRENTPORT);
 8008892:	4b03      	ldr	r3, [pc, #12]	; (80088a0 <tailSerialReply+0x24>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f001 fc26 	bl	800a0e8 <UartSendData>
	//serialize8(currentPortState->checksum);
}
 800889c:	bf00      	nop
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20000662 	.word	0x20000662
 80088a4:	20000028 	.word	0x20000028

080088a8 <s_struct_partial>:

void s_struct_partial(uint8_t *cb,uint8_t siz)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
	while(siz--) serialize8(*cb++);
 80088b4:	e006      	b.n	80088c4 <s_struct_partial+0x1c>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff ff5c 	bl	800877c <serialize8>
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	1e5a      	subs	r2, r3, #1
 80088c8:	70fa      	strb	r2, [r7, #3]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f3      	bne.n	80088b6 <s_struct_partial+0xe>
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <s_struct>:

void s_struct(uint8_t *cb,uint8_t siz)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
	headSerialReply(siz);
 80088e2:	78fb      	ldrb	r3, [r7, #3]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7ff ffbb 	bl	8008860 <headSerialReply>
	s_struct_partial(cb,siz);
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff ffda 	bl	80088a8 <s_struct_partial>
	tailSerialReply();
 80088f4:	f7ff ffc2 	bl	800887c <tailSerialReply>
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <SerialCom>:
///////////////////////////////////////////////////

void SerialCom(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t timeMax; // limit max time in this function in case of GPS
	timeMax = micros();
 8008906:	f7f8 fde1 	bl	80014cc <micros>
 800890a:	60f8      	str	r0, [r7, #12]
	int i = 1;
 800890c:	2301      	movs	r3, #1
 800890e:	60bb      	str	r3, [r7, #8]
#ifndef _USE_HW_CLI
	for(int i = 0; i < 2; i++)
	{
#endif
		currentPortState = &ports[i];
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2286      	movs	r2, #134	; 0x86
 8008914:	fb02 f303 	mul.w	r3, r2, r3
 8008918:	4a8f      	ldr	r2, [pc, #572]	; (8008b58 <SerialCom+0x258>)
 800891a:	4413      	add	r3, r2
 800891c:	4a8f      	ldr	r2, [pc, #572]	; (8008b5c <SerialCom+0x25c>)
 800891e:	6013      	str	r3, [r2, #0]
		CURRENTPORT = i;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	b2da      	uxtb	r2, r3
 8008924:	4b8e      	ldr	r3, [pc, #568]	; (8008b60 <SerialCom+0x260>)
 8008926:	701a      	strb	r2, [r3, #0]
		while(uartAvailable(CURRENTPORT) > 0)
 8008928:	e108      	b.n	8008b3c <SerialCom+0x23c>
		{
			c = uartRead(CURRENTPORT);
 800892a:	4b8d      	ldr	r3, [pc, #564]	; (8008b60 <SerialCom+0x260>)
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	4618      	mov	r0, r3
 8008930:	f003 fbc6 	bl	800c0c0 <uartRead>
 8008934:	4603      	mov	r3, r0
 8008936:	71fb      	strb	r3, [r7, #7]
			if (currentPortState->c_state == IDLE)
 8008938:	4b88      	ldr	r3, [pc, #544]	; (8008b5c <SerialCom+0x25c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <SerialCom+0x5a>
			{
				currentPortState->c_state = (c=='$') ? HEADER_START : IDLE;
 8008944:	79fb      	ldrb	r3, [r7, #7]
 8008946:	2b24      	cmp	r3, #36	; 0x24
 8008948:	bf0c      	ite	eq
 800894a:	2301      	moveq	r3, #1
 800894c:	2300      	movne	r3, #0
 800894e:	b2da      	uxtb	r2, r3
 8008950:	4b82      	ldr	r3, [pc, #520]	; (8008b5c <SerialCom+0x25c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8008958:	e0b0      	b.n	8008abc <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_START)
 800895a:	4b80      	ldr	r3, [pc, #512]	; (8008b5c <SerialCom+0x25c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008962:	2b01      	cmp	r3, #1
 8008964:	d10a      	bne.n	800897c <SerialCom+0x7c>
			{
				currentPortState->c_state = (c=='M') ? HEADER_M : IDLE;
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	2b4d      	cmp	r3, #77	; 0x4d
 800896a:	d101      	bne.n	8008970 <SerialCom+0x70>
 800896c:	2202      	movs	r2, #2
 800896e:	e000      	b.n	8008972 <SerialCom+0x72>
 8008970:	2200      	movs	r2, #0
 8008972:	4b7a      	ldr	r3, [pc, #488]	; (8008b5c <SerialCom+0x25c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800897a:	e09f      	b.n	8008abc <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_M)
 800897c:	4b77      	ldr	r3, [pc, #476]	; (8008b5c <SerialCom+0x25c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008984:	2b02      	cmp	r3, #2
 8008986:	d10a      	bne.n	800899e <SerialCom+0x9e>
			{
				currentPortState->c_state = (c=='<') ? HEADER_ARROW : IDLE;
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	2b3c      	cmp	r3, #60	; 0x3c
 800898c:	d101      	bne.n	8008992 <SerialCom+0x92>
 800898e:	2203      	movs	r2, #3
 8008990:	e000      	b.n	8008994 <SerialCom+0x94>
 8008992:	2200      	movs	r2, #0
 8008994:	4b71      	ldr	r3, [pc, #452]	; (8008b5c <SerialCom+0x25c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800899c:	e08e      	b.n	8008abc <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_ARROW)
 800899e:	4b6f      	ldr	r3, [pc, #444]	; (8008b5c <SerialCom+0x25c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d129      	bne.n	80089fe <SerialCom+0xfe>
			{
				if (c > INBUF_SIZE)
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	2b80      	cmp	r3, #128	; 0x80
 80089ae:	d905      	bls.n	80089bc <SerialCom+0xbc>
				{  // now we are expecting the payload size
					currentPortState->c_state = IDLE;
 80089b0:	4b6a      	ldr	r3, [pc, #424]	; (8008b5c <SerialCom+0x25c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
					continue;
 80089ba:	e0bf      	b.n	8008b3c <SerialCom+0x23c>
				}
				currentPortState->dataSize = c;
 80089bc:	4b67      	ldr	r3, [pc, #412]	; (8008b5c <SerialCom+0x25c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	79fa      	ldrb	r2, [r7, #7]
 80089c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				currentPortState->offset = 0;
 80089c6:	4b65      	ldr	r3, [pc, #404]	; (8008b5c <SerialCom+0x25c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				currentPortState->indRX = 0;
 80089d0:	4b62      	ldr	r3, [pc, #392]	; (8008b5c <SerialCom+0x25c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2200      	movs	r2, #0
 80089d6:	705a      	strb	r2, [r3, #1]
				currentPortState->checksum = 0;
 80089d8:	4b60      	ldr	r3, [pc, #384]	; (8008b5c <SerialCom+0x25c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2200      	movs	r2, #0
 80089de:	701a      	strb	r2, [r3, #0]
				currentPortState->checksum ^= c;
 80089e0:	4b5e      	ldr	r3, [pc, #376]	; (8008b5c <SerialCom+0x25c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	7819      	ldrb	r1, [r3, #0]
 80089e6:	4b5d      	ldr	r3, [pc, #372]	; (8008b5c <SerialCom+0x25c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	79fa      	ldrb	r2, [r7, #7]
 80089ec:	404a      	eors	r2, r1
 80089ee:	b2d2      	uxtb	r2, r2
 80089f0:	701a      	strb	r2, [r3, #0]
				currentPortState->c_state = HEADER_SIZE;
 80089f2:	4b5a      	ldr	r3, [pc, #360]	; (8008b5c <SerialCom+0x25c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2204      	movs	r2, #4
 80089f8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 80089fc:	e05e      	b.n	8008abc <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_SIZE)
 80089fe:	4b57      	ldr	r3, [pc, #348]	; (8008b5c <SerialCom+0x25c>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008a06:	2b04      	cmp	r3, #4
 8008a08:	d113      	bne.n	8008a32 <SerialCom+0x132>
			{
				currentPortState->cmdMSP = c;
 8008a0a:	4b54      	ldr	r3, [pc, #336]	; (8008b5c <SerialCom+0x25c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	79fa      	ldrb	r2, [r7, #7]
 8008a10:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				currentPortState->checksum ^= c;
 8008a14:	4b51      	ldr	r3, [pc, #324]	; (8008b5c <SerialCom+0x25c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	7819      	ldrb	r1, [r3, #0]
 8008a1a:	4b50      	ldr	r3, [pc, #320]	; (8008b5c <SerialCom+0x25c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	79fa      	ldrb	r2, [r7, #7]
 8008a20:	404a      	eors	r2, r1
 8008a22:	b2d2      	uxtb	r2, r2
 8008a24:	701a      	strb	r2, [r3, #0]
				currentPortState->c_state = HEADER_CMD;
 8008a26:	4b4d      	ldr	r3, [pc, #308]	; (8008b5c <SerialCom+0x25c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2205      	movs	r2, #5
 8008a2c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8008a30:	e044      	b.n	8008abc <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset < currentPortState->dataSize)
 8008a32:	4b4a      	ldr	r3, [pc, #296]	; (8008b5c <SerialCom+0x25c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008a3a:	2b05      	cmp	r3, #5
 8008a3c:	d121      	bne.n	8008a82 <SerialCom+0x182>
 8008a3e:	4b47      	ldr	r3, [pc, #284]	; (8008b5c <SerialCom+0x25c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8008a46:	4b45      	ldr	r3, [pc, #276]	; (8008b5c <SerialCom+0x25c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d217      	bcs.n	8008a82 <SerialCom+0x182>
			{
				currentPortState->checksum ^= c;
 8008a52:	4b42      	ldr	r3, [pc, #264]	; (8008b5c <SerialCom+0x25c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	7819      	ldrb	r1, [r3, #0]
 8008a58:	4b40      	ldr	r3, [pc, #256]	; (8008b5c <SerialCom+0x25c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	79fa      	ldrb	r2, [r7, #7]
 8008a5e:	404a      	eors	r2, r1
 8008a60:	b2d2      	uxtb	r2, r2
 8008a62:	701a      	strb	r2, [r3, #0]
				currentPortState->inBuf[currentPortState->offset++] = c;
 8008a64:	4b3d      	ldr	r3, [pc, #244]	; (8008b5c <SerialCom+0x25c>)
 8008a66:	6819      	ldr	r1, [r3, #0]
 8008a68:	4b3c      	ldr	r3, [pc, #240]	; (8008b5c <SerialCom+0x25c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8008a70:	1c50      	adds	r0, r2, #1
 8008a72:	b2c0      	uxtb	r0, r0
 8008a74:	f883 0083 	strb.w	r0, [r3, #131]	; 0x83
 8008a78:	4613      	mov	r3, r2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	79fa      	ldrb	r2, [r7, #7]
 8008a7e:	709a      	strb	r2, [r3, #2]
 8008a80:	e01c      	b.n	8008abc <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset >= currentPortState->dataSize)
 8008a82:	4b36      	ldr	r3, [pc, #216]	; (8008b5c <SerialCom+0x25c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008a8a:	2b05      	cmp	r3, #5
 8008a8c:	d116      	bne.n	8008abc <SerialCom+0x1bc>
 8008a8e:	4b33      	ldr	r3, [pc, #204]	; (8008b5c <SerialCom+0x25c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8008a96:	4b31      	ldr	r3, [pc, #196]	; (8008b5c <SerialCom+0x25c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d30c      	bcc.n	8008abc <SerialCom+0x1bc>
			{
				if (currentPortState->checksum == c)
 8008aa2:	4b2e      	ldr	r3, [pc, #184]	; (8008b5c <SerialCom+0x25c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	79fa      	ldrb	r2, [r7, #7]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d101      	bne.n	8008ab2 <SerialCom+0x1b2>
				{
					evaluateCommand();
 8008aae:	f000 f863 	bl	8008b78 <evaluateCommand>
				}
				currentPortState->c_state = IDLE;
 8008ab2:	4b2a      	ldr	r3, [pc, #168]	; (8008b5c <SerialCom+0x25c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
			}
#ifdef GPS_Recive
			if(i == _DEF_UART1||GPS_virtual)
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <SerialCom+0x1ca>
 8008ac2:	4b28      	ldr	r3, [pc, #160]	; (8008b64 <SerialCom+0x264>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d031      	beq.n	8008b2e <SerialCom+0x22e>
			{
				static uint32_t GPS_last_frame_seen; //Last gps frame seen at this time, used to detect stalled gps communication
				if (GPS_newFrame(c)||GPS_virtual)
 8008aca:	79fb      	ldrb	r3, [r7, #7]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7f9 fe85 	bl	80027dc <GPS_newFrame>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d103      	bne.n	8008ae0 <SerialCom+0x1e0>
 8008ad8:	4b22      	ldr	r3, [pc, #136]	; (8008b64 <SerialCom+0x264>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d014      	beq.n	8008b0a <SerialCom+0x20a>
				{

					//We had a valid GPS data frame, so signal task scheduler to switch to compute
					if (GPS.GPS_update == 1) GPS.GPS_update = 0; else GPS.GPS_update = 1; //Blink GPS update
 8008ae0:	4b21      	ldr	r3, [pc, #132]	; (8008b68 <SerialCom+0x268>)
 8008ae2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d104      	bne.n	8008af4 <SerialCom+0x1f4>
 8008aea:	4b1f      	ldr	r3, [pc, #124]	; (8008b68 <SerialCom+0x268>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8008af2:	e003      	b.n	8008afc <SerialCom+0x1fc>
 8008af4:	4b1c      	ldr	r3, [pc, #112]	; (8008b68 <SerialCom+0x268>)
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
					GPS_last_frame_seen = timeMax;
 8008afc:	4a1b      	ldr	r2, [pc, #108]	; (8008b6c <SerialCom+0x26c>)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6013      	str	r3, [r2, #0]
					GPS.GPS_Frame = 1;
 8008b02:	4b19      	ldr	r3, [pc, #100]	; (8008b68 <SerialCom+0x268>)
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
				}
				// Check for stalled GPS, if no frames seen for 1.2sec then consider it LOST
				if ((timeMax - GPS_last_frame_seen) > 1200000)
 8008b0a:	4b18      	ldr	r3, [pc, #96]	; (8008b6c <SerialCom+0x26c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	4a17      	ldr	r2, [pc, #92]	; (8008b70 <SerialCom+0x270>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d90a      	bls.n	8008b2e <SerialCom+0x22e>
				{
					//No update since 1200ms clear fix...
					f.GPS_FIX = 0;
 8008b18:	4b16      	ldr	r3, [pc, #88]	; (8008b74 <SerialCom+0x274>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	741a      	strb	r2, [r3, #16]
					GPS.fixquality = 0;
 8008b1e:	4b12      	ldr	r3, [pc, #72]	; (8008b68 <SerialCom+0x268>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
					GPS.satellites = 0;
 8008b26:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <SerialCom+0x268>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
				}
			}
			if (micros()-timeMax>250) return;  // Limit the maximum execution time of serial decoding to avoid time spike
 8008b2e:	f7f8 fccd 	bl	80014cc <micros>
 8008b32:	4602      	mov	r2, r0
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	2bfa      	cmp	r3, #250	; 0xfa
 8008b3a:	d809      	bhi.n	8008b50 <SerialCom+0x250>
		while(uartAvailable(CURRENTPORT) > 0)
 8008b3c:	4b08      	ldr	r3, [pc, #32]	; (8008b60 <SerialCom+0x260>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f003 fa59 	bl	800bff8 <uartAvailable>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f47f aeee 	bne.w	800892a <SerialCom+0x2a>
 8008b4e:	e000      	b.n	8008b52 <SerialCom+0x252>
			if (micros()-timeMax>250) return;  // Limit the maximum execution time of serial decoding to avoid time spike
 8008b50:	bf00      	nop
#endif
		}
#ifndef _USE_HW_CLI
	}
#endif
}
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	2000067c 	.word	0x2000067c
 8008b5c:	20000028 	.word	0x20000028
 8008b60:	20000662 	.word	0x20000662
 8008b64:	20000678 	.word	0x20000678
 8008b68:	20000b78 	.word	0x20000b78
 8008b6c:	20000788 	.word	0x20000788
 8008b70:	00124f80 	.word	0x00124f80
 8008b74:	20000ed4 	.word	0x20000ed4

08008b78 <evaluateCommand>:

void evaluateCommand(void)
{
 8008b78:	b590      	push	{r4, r7, lr}
 8008b7a:	b0ab      	sub	sp, #172	; 0xac
 8008b7c:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	uint32_t tmp=0;
 8008b84:	2300      	movs	r3, #0
 8008b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	switch(currentPortState->cmdMSP)
 8008b8a:	4be5      	ldr	r3, [pc, #916]	; (8008f20 <evaluateCommand+0x3a8>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008b92:	3b38      	subs	r3, #56	; 0x38
 8008b94:	2b9e      	cmp	r3, #158	; 0x9e
 8008b96:	f201 826e 	bhi.w	800a076 <evaluateCommand+0x14fe>
 8008b9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ba0 <evaluateCommand+0x28>)
 8008b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba0:	08009e7d 	.word	0x08009e7d
 8008ba4:	0800a077 	.word	0x0800a077
 8008ba8:	0800a077 	.word	0x0800a077
 8008bac:	0800a077 	.word	0x0800a077
 8008bb0:	0800a077 	.word	0x0800a077
 8008bb4:	0800a077 	.word	0x0800a077
 8008bb8:	0800a077 	.word	0x0800a077
 8008bbc:	0800a077 	.word	0x0800a077
 8008bc0:	0800a077 	.word	0x0800a077
 8008bc4:	0800a077 	.word	0x0800a077
 8008bc8:	0800a077 	.word	0x0800a077
 8008bcc:	0800a077 	.word	0x0800a077
 8008bd0:	0800a077 	.word	0x0800a077
 8008bd4:	0800a077 	.word	0x0800a077
 8008bd8:	0800a077 	.word	0x0800a077
 8008bdc:	0800a077 	.word	0x0800a077
 8008be0:	0800a077 	.word	0x0800a077
 8008be4:	0800a077 	.word	0x0800a077
 8008be8:	0800a077 	.word	0x0800a077
 8008bec:	0800a077 	.word	0x0800a077
 8008bf0:	0800a077 	.word	0x0800a077
 8008bf4:	0800a077 	.word	0x0800a077
 8008bf8:	0800a077 	.word	0x0800a077
 8008bfc:	0800a077 	.word	0x0800a077
 8008c00:	0800a077 	.word	0x0800a077
 8008c04:	0800a077 	.word	0x0800a077
 8008c08:	0800a077 	.word	0x0800a077
 8008c0c:	0800a077 	.word	0x0800a077
 8008c10:	0800a077 	.word	0x0800a077
 8008c14:	0800a077 	.word	0x0800a077
 8008c18:	0800a077 	.word	0x0800a077
 8008c1c:	0800a077 	.word	0x0800a077
 8008c20:	0800a077 	.word	0x0800a077
 8008c24:	0800a077 	.word	0x0800a077
 8008c28:	0800a077 	.word	0x0800a077
 8008c2c:	0800a077 	.word	0x0800a077
 8008c30:	0800a077 	.word	0x0800a077
 8008c34:	0800a077 	.word	0x0800a077
 8008c38:	0800a077 	.word	0x0800a077
 8008c3c:	0800a077 	.word	0x0800a077
 8008c40:	0800a077 	.word	0x0800a077
 8008c44:	0800a077 	.word	0x0800a077
 8008c48:	0800a077 	.word	0x0800a077
 8008c4c:	0800a077 	.word	0x0800a077
 8008c50:	0800a077 	.word	0x0800a077
 8008c54:	08008f8f 	.word	0x08008f8f
 8008c58:	080092cb 	.word	0x080092cb
 8008c5c:	0800a077 	.word	0x0800a077
 8008c60:	080093bd 	.word	0x080093bd
 8008c64:	08008f35 	.word	0x08008f35
 8008c68:	08009387 	.word	0x08009387
 8008c6c:	0800a077 	.word	0x0800a077
 8008c70:	08008feb 	.word	0x08008feb
 8008c74:	08008ff7 	.word	0x08008ff7
 8008c78:	080097a7 	.word	0x080097a7
 8008c7c:	0800a077 	.word	0x0800a077
 8008c80:	080093dd 	.word	0x080093dd
 8008c84:	0800a077 	.word	0x0800a077
 8008c88:	08009013 	.word	0x08009013
 8008c8c:	0800a077 	.word	0x0800a077
 8008c90:	0800a077 	.word	0x0800a077
 8008c94:	0800a077 	.word	0x0800a077
 8008c98:	0800a077 	.word	0x0800a077
 8008c9c:	0800a077 	.word	0x0800a077
 8008ca0:	0800a077 	.word	0x0800a077
 8008ca4:	08009c6d 	.word	0x08009c6d
 8008ca8:	08009c95 	.word	0x08009c95
 8008cac:	0800a077 	.word	0x0800a077
 8008cb0:	0800a077 	.word	0x0800a077
 8008cb4:	0800a077 	.word	0x0800a077
 8008cb8:	0800a077 	.word	0x0800a077
 8008cbc:	0800a077 	.word	0x0800a077
 8008cc0:	0800a077 	.word	0x0800a077
 8008cc4:	0800a077 	.word	0x0800a077
 8008cc8:	0800a077 	.word	0x0800a077
 8008ccc:	0800a077 	.word	0x0800a077
 8008cd0:	0800a077 	.word	0x0800a077
 8008cd4:	0800a077 	.word	0x0800a077
 8008cd8:	0800a077 	.word	0x0800a077
 8008cdc:	0800a077 	.word	0x0800a077
 8008ce0:	0800a077 	.word	0x0800a077
 8008ce4:	0800a077 	.word	0x0800a077
 8008ce8:	0800a077 	.word	0x0800a077
 8008cec:	0800a077 	.word	0x0800a077
 8008cf0:	0800a077 	.word	0x0800a077
 8008cf4:	0800a077 	.word	0x0800a077
 8008cf8:	0800a077 	.word	0x0800a077
 8008cfc:	0800a077 	.word	0x0800a077
 8008d00:	0800a077 	.word	0x0800a077
 8008d04:	0800a077 	.word	0x0800a077
 8008d08:	0800a077 	.word	0x0800a077
 8008d0c:	0800a077 	.word	0x0800a077
 8008d10:	0800a077 	.word	0x0800a077
 8008d14:	0800a077 	.word	0x0800a077
 8008d18:	08008e2d 	.word	0x08008e2d
 8008d1c:	08008e1d 	.word	0x08008e1d
 8008d20:	08008e25 	.word	0x08008e25
 8008d24:	08009e4d 	.word	0x08009e4d
 8008d28:	08009e59 	.word	0x08009e59
 8008d2c:	08009e65 	.word	0x08009e65
 8008d30:	08009e71 	.word	0x08009e71
 8008d34:	0800a077 	.word	0x0800a077
 8008d38:	0800a077 	.word	0x0800a077
 8008d3c:	0800a077 	.word	0x0800a077
 8008d40:	0800a077 	.word	0x0800a077
 8008d44:	0800a077 	.word	0x0800a077
 8008d48:	0800a077 	.word	0x0800a077
 8008d4c:	0800a077 	.word	0x0800a077
 8008d50:	0800a077 	.word	0x0800a077
 8008d54:	0800a077 	.word	0x0800a077
 8008d58:	0800a077 	.word	0x0800a077
 8008d5c:	0800a077 	.word	0x0800a077
 8008d60:	0800a077 	.word	0x0800a077
 8008d64:	0800a077 	.word	0x0800a077
 8008d68:	0800a077 	.word	0x0800a077
 8008d6c:	0800a077 	.word	0x0800a077
 8008d70:	0800a077 	.word	0x0800a077
 8008d74:	0800a077 	.word	0x0800a077
 8008d78:	0800a077 	.word	0x0800a077
 8008d7c:	0800a077 	.word	0x0800a077
 8008d80:	0800a077 	.word	0x0800a077
 8008d84:	0800a077 	.word	0x0800a077
 8008d88:	0800a077 	.word	0x0800a077
 8008d8c:	0800a077 	.word	0x0800a077
 8008d90:	0800a077 	.word	0x0800a077
 8008d94:	0800a077 	.word	0x0800a077
 8008d98:	0800a077 	.word	0x0800a077
 8008d9c:	0800a077 	.word	0x0800a077
 8008da0:	0800a077 	.word	0x0800a077
 8008da4:	0800a077 	.word	0x0800a077
 8008da8:	0800a077 	.word	0x0800a077
 8008dac:	0800a077 	.word	0x0800a077
 8008db0:	0800a077 	.word	0x0800a077
 8008db4:	0800a077 	.word	0x0800a077
 8008db8:	0800a077 	.word	0x0800a077
 8008dbc:	0800a077 	.word	0x0800a077
 8008dc0:	0800a077 	.word	0x0800a077
 8008dc4:	0800a077 	.word	0x0800a077
 8008dc8:	0800a077 	.word	0x0800a077
 8008dcc:	0800a077 	.word	0x0800a077
 8008dd0:	0800a077 	.word	0x0800a077
 8008dd4:	0800a077 	.word	0x0800a077
 8008dd8:	0800a077 	.word	0x0800a077
 8008ddc:	0800a077 	.word	0x0800a077
 8008de0:	0800a077 	.word	0x0800a077
 8008de4:	0800a077 	.word	0x0800a077
 8008de8:	080097db 	.word	0x080097db
 8008dec:	0800a077 	.word	0x0800a077
 8008df0:	0800a077 	.word	0x0800a077
 8008df4:	08009e13 	.word	0x08009e13
 8008df8:	08009e2d 	.word	0x08009e2d
 8008dfc:	0800a077 	.word	0x0800a077
 8008e00:	0800a077 	.word	0x0800a077
 8008e04:	0800a077 	.word	0x0800a077
 8008e08:	0800a077 	.word	0x0800a077
 8008e0c:	0800a077 	.word	0x0800a077
 8008e10:	0800a077 	.word	0x0800a077
 8008e14:	0800a077 	.word	0x0800a077
 8008e18:	08009c0b 	.word	0x08009c0b
	{
		case MSP_ARM:
			mwArm();
 8008e1c:	f7fc fe56 	bl	8005acc <mwArm>
			break;
 8008e20:	f001 b92e 	b.w	800a080 <evaluateCommand+0x1508>

		case MSP_DISARM:
			mwDisarm();
 8008e24:	f7fc fe6a 	bl	8005afc <mwDisarm>
			break;
 8008e28:	f001 b92a 	b.w	800a080 <evaluateCommand+0x1508>

		case MSP_RC_RAW:
			for(i=0; i < 5; i++)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8008e32:	e00f      	b.n	8008e54 <evaluateCommand+0x2dc>
			{
				RC_Raw.rcCommand[i]  = read8();
 8008e34:	f7ff fcc0 	bl	80087b8 <read8>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008e40:	b211      	sxth	r1, r2
 8008e42:	4a38      	ldr	r2, [pc, #224]	; (8008f24 <evaluateCommand+0x3ac>)
 8008e44:	3328      	adds	r3, #40	; 0x28
 8008e46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i=0; i < 5; i++)
 8008e4a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008e4e:	3301      	adds	r3, #1
 8008e50:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8008e54:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	d9eb      	bls.n	8008e34 <evaluateCommand+0x2bc>
			}
			RC.rcCommand[ROLL]     = map(RC_Raw.rcCommand[ROLL], 0, 250, -20, 20)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
 8008e5c:	4b31      	ldr	r3, [pc, #196]	; (8008f24 <evaluateCommand+0x3ac>)
 8008e5e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8008e62:	461a      	mov	r2, r3
 8008e64:	4613      	mov	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	4a2e      	ldr	r2, [pc, #184]	; (8008f28 <evaluateCommand+0x3b0>)
 8008e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8008e72:	1112      	asrs	r2, r2, #4
 8008e74:	17db      	asrs	r3, r3, #31
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	4b2c      	ldr	r3, [pc, #176]	; (8008f2c <evaluateCommand+0x3b4>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	4413      	add	r3, r2
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	3b14      	subs	r3, #20
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	b21a      	sxth	r2, r3
 8008e8a:	4b29      	ldr	r3, [pc, #164]	; (8008f30 <evaluateCommand+0x3b8>)
 8008e8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			RC.rcCommand[PITCH]    = map(RC_Raw.rcCommand[PITCH], 0, 250, -20, 20)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 8008e90:	4b24      	ldr	r3, [pc, #144]	; (8008f24 <evaluateCommand+0x3ac>)
 8008e92:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8008e96:	461a      	mov	r2, r3
 8008e98:	4613      	mov	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	4a21      	ldr	r2, [pc, #132]	; (8008f28 <evaluateCommand+0x3b0>)
 8008ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8008ea6:	1112      	asrs	r2, r2, #4
 8008ea8:	17db      	asrs	r3, r3, #31
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	4b1f      	ldr	r3, [pc, #124]	; (8008f2c <evaluateCommand+0x3b4>)
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	4413      	add	r3, r2
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	3b14      	subs	r3, #20
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	b21a      	sxth	r2, r3
 8008ebe:	4b1c      	ldr	r3, [pc, #112]	; (8008f30 <evaluateCommand+0x3b8>)
 8008ec0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			RC.rcCommand[YAW]      = map(RC_Raw.rcCommand[YAW], 0, 250, -100, 100); //0~250 left:0, right:250
 8008ec4:	4b17      	ldr	r3, [pc, #92]	; (8008f24 <evaluateCommand+0x3ac>)
 8008ec6:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8008eca:	461a      	mov	r2, r3
 8008ecc:	23c8      	movs	r3, #200	; 0xc8
 8008ece:	fb03 f302 	mul.w	r3, r3, r2
 8008ed2:	4a15      	ldr	r2, [pc, #84]	; (8008f28 <evaluateCommand+0x3b0>)
 8008ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8008ed8:	1112      	asrs	r2, r2, #4
 8008eda:	17db      	asrs	r3, r3, #31
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3b64      	subs	r3, #100	; 0x64
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	b21a      	sxth	r2, r3
 8008ee6:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <evaluateCommand+0x3b8>)
 8008ee8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			RC.rcCommand[THROTTLE] = map(RC_Raw.rcCommand[THROTTLE], 0, 250, 0, 1800);//0~250
 8008eec:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <evaluateCommand+0x3ac>)
 8008eee:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8008ef8:	fb03 f302 	mul.w	r3, r3, r2
 8008efc:	4a0a      	ldr	r2, [pc, #40]	; (8008f28 <evaluateCommand+0x3b0>)
 8008efe:	fb82 1203 	smull	r1, r2, r2, r3
 8008f02:	1112      	asrs	r2, r2, #4
 8008f04:	17db      	asrs	r3, r3, #31
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	b21a      	sxth	r2, r3
 8008f0a:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <evaluateCommand+0x3b8>)
 8008f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			RC.rcCommand[AUX1] 	   =  RC_Raw.rcCommand[GEAR];
 8008f10:	4b04      	ldr	r3, [pc, #16]	; (8008f24 <evaluateCommand+0x3ac>)
 8008f12:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 8008f16:	4b06      	ldr	r3, [pc, #24]	; (8008f30 <evaluateCommand+0x3b8>)
 8008f18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			break;
 8008f1c:	f001 b8b0 	b.w	800a080 <evaluateCommand+0x1508>
 8008f20:	20000028 	.word	0x20000028
 8008f24:	20000cd4 	.word	0x20000cd4
 8008f28:	10624dd3 	.word	0x10624dd3
 8008f2c:	20000664 	.word	0x20000664
 8008f30:	20000d40 	.word	0x20000d40

		case MSP_RC:
		{  struct {
			uint16_t roll, pitch, yaw, throttle, gear, aux1;
		} rc;
		rc.roll     = RC.rcCommand[ROLL];
 8008f34:	4b92      	ldr	r3, [pc, #584]	; (8009180 <evaluateCommand+0x608>)
 8008f36:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		rc.pitch    = RC.rcCommand[PITCH];
 8008f40:	4b8f      	ldr	r3, [pc, #572]	; (8009180 <evaluateCommand+0x608>)
 8008f42:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		rc.yaw      = RC.rcCommand[YAW];
 8008f4c:	4b8c      	ldr	r3, [pc, #560]	; (8009180 <evaluateCommand+0x608>)
 8008f4e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		rc.throttle = RC.rcCommand[THROTTLE];
 8008f58:	4b89      	ldr	r3, [pc, #548]	; (8009180 <evaluateCommand+0x608>)
 8008f5a:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		rc.aux1     = RC.rcCommand[AUX1];
 8008f64:	4b86      	ldr	r3, [pc, #536]	; (8009180 <evaluateCommand+0x608>)
 8008f66:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		rc.gear     = RC.rcCommand[GEAR];
 8008f70:	4b83      	ldr	r3, [pc, #524]	; (8009180 <evaluateCommand+0x608>)
 8008f72:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		s_struct((uint8_t*)&rc, 12);
 8008f7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008f80:	210c      	movs	r1, #12
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff fca7 	bl	80088d6 <s_struct>
		break;
 8008f88:	bf00      	nop
 8008f8a:	f001 b879 	b.w	800a080 <evaluateCommand+0x1508>
		{ struct {
			uint32_t ArmedTime;
			uint32_t cycleTime;
			uint8_t error, flag;
		} st;
		st.ArmedTime    = armedTime;
 8008f8e:	4b7d      	ldr	r3, [pc, #500]	; (8009184 <evaluateCommand+0x60c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		st.cycleTime    = loopTime;
 8008f96:	4b7c      	ldr	r3, [pc, #496]	; (8009188 <evaluateCommand+0x610>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		st.error        = Error.error;
 8008f9e:	4b7b      	ldr	r3, [pc, #492]	; (800918c <evaluateCommand+0x614>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		if(f.ARMED) tmp |= 1<<BOXARM;
 8008fa6:	4b7a      	ldr	r3, [pc, #488]	; (8009190 <evaluateCommand+0x618>)
 8008fa8:	785b      	ldrb	r3, [r3, #1]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d005      	beq.n	8008fba <evaluateCommand+0x442>
 8008fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fb2:	f043 0301 	orr.w	r3, r3, #1
 8008fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8008fba:	4b75      	ldr	r3, [pc, #468]	; (8009190 <evaluateCommand+0x618>)
 8008fbc:	7b9b      	ldrb	r3, [r3, #14]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d005      	beq.n	8008fce <evaluateCommand+0x456>
 8008fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fc6:	f043 0302 	orr.w	r3, r3, #2
 8008fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		st.flag         = tmp;
 8008fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
		s_struct((uint8_t*)&st,10);
 8008fd8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008fdc:	210a      	movs	r1, #10
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7ff fc79 	bl	80088d6 <s_struct>
		break;
 8008fe4:	bf00      	nop
 8008fe6:	f001 b84b 	b.w	800a080 <evaluateCommand+0x1508>
		}

		case MSP_ATTITUDE:
			s_struct((uint8_t*)&att,8);
 8008fea:	2108      	movs	r1, #8
 8008fec:	4869      	ldr	r0, [pc, #420]	; (8009194 <evaluateCommand+0x61c>)
 8008fee:	f7ff fc72 	bl	80088d6 <s_struct>
			break;
 8008ff2:	f001 b845 	b.w	800a080 <evaluateCommand+0x1508>

		case MSP_ALTITUDE:
		{ struct {
			int16_t alt;
		} tmp;
		tmp.alt = (int16_t) alt.EstAlt;
 8008ff6:	4b68      	ldr	r3, [pc, #416]	; (8009198 <evaluateCommand+0x620>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	b21b      	sxth	r3, r3
 8008ffc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		s_struct((uint8_t*)&tmp,2);
 8009000:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009004:	2102      	movs	r1, #2
 8009006:	4618      	mov	r0, r3
 8009008:	f7ff fc65 	bl	80088d6 <s_struct>
		break;
 800900c:	bf00      	nop
 800900e:	f001 b837 	b.w	800a080 <evaluateCommand+0x1508>
			int16_t e;
			uint16_t f;
			int16_t motor[4];//74
			int16_t debug_t[4];//82
		} tele;
		tele.roll     = RC.rcCommand[ROLL];
 8009012:	4b5b      	ldr	r3, [pc, #364]	; (8009180 <evaluateCommand+0x608>)
 8009014:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8009018:	b29b      	uxth	r3, r3
 800901a:	80bb      	strh	r3, [r7, #4]
		tele.pitch    = RC.rcCommand[PITCH];
 800901c:	4b58      	ldr	r3, [pc, #352]	; (8009180 <evaluateCommand+0x608>)
 800901e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8009022:	b29b      	uxth	r3, r3
 8009024:	80fb      	strh	r3, [r7, #6]
		tele.yaw      = RC.rcCommand[YAW];
 8009026:	4b56      	ldr	r3, [pc, #344]	; (8009180 <evaluateCommand+0x608>)
 8009028:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800902c:	b29b      	uxth	r3, r3
 800902e:	813b      	strh	r3, [r7, #8]
		tele.throttle = RC.rcCommand[THROTTLE];
 8009030:	4b53      	ldr	r3, [pc, #332]	; (8009180 <evaluateCommand+0x608>)
 8009032:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8009036:	b29b      	uxth	r3, r3
 8009038:	817b      	strh	r3, [r7, #10]
		tele.aux1     = RC.rcCommand[AUX1];
 800903a:	4b51      	ldr	r3, [pc, #324]	; (8009180 <evaluateCommand+0x608>)
 800903c:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8009040:	b29b      	uxth	r3, r3
 8009042:	81fb      	strh	r3, [r7, #14]
		tele.gear     = RC.rcCommand[GEAR];
 8009044:	4b4e      	ldr	r3, [pc, #312]	; (8009180 <evaluateCommand+0x608>)
 8009046:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800904a:	b29b      	uxth	r3, r3
 800904c:	81bb      	strh	r3, [r7, #12]
		tele.ArmedTime    = armedTime;
 800904e:	4b4d      	ldr	r3, [pc, #308]	; (8009184 <evaluateCommand+0x60c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	613b      	str	r3, [r7, #16]
		tele.cycleTime    = loopTime;
 8009054:	4b4c      	ldr	r3, [pc, #304]	; (8009188 <evaluateCommand+0x610>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	617b      	str	r3, [r7, #20]
		tele.error        = Error.error;
 800905a:	4b4c      	ldr	r3, [pc, #304]	; (800918c <evaluateCommand+0x614>)
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	763b      	strb	r3, [r7, #24]
		if(f.ARMED) tmp |= 1<<BOXARM;
 8009060:	4b4b      	ldr	r3, [pc, #300]	; (8009190 <evaluateCommand+0x618>)
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d005      	beq.n	8009074 <evaluateCommand+0x4fc>
 8009068:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8009074:	4b46      	ldr	r3, [pc, #280]	; (8009190 <evaluateCommand+0x618>)
 8009076:	7b9b      	ldrb	r3, [r3, #14]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d005      	beq.n	8009088 <evaluateCommand+0x510>
 800907c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009080:	f043 0302 	orr.w	r3, r3, #2
 8009084:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ACRO_MODE) tmp |= 1<<BOXACRO_MODE;
 8009088:	4b41      	ldr	r3, [pc, #260]	; (8009190 <evaluateCommand+0x618>)
 800908a:	79db      	ldrb	r3, [r3, #7]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <evaluateCommand+0x524>
 8009090:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009094:	f043 0304 	orr.w	r3, r3, #4
 8009098:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ANGLE_MODE) tmp |= 1<<BOXANGLE_MODE;
 800909c:	4b3c      	ldr	r3, [pc, #240]	; (8009190 <evaluateCommand+0x618>)
 800909e:	795b      	ldrb	r3, [r3, #5]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <evaluateCommand+0x538>
 80090a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090a8:	f043 0308 	orr.w	r3, r3, #8
 80090ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_ACC) tmp |= 1<<BOXCALIBRATE_ACC;
 80090b0:	4b37      	ldr	r3, [pc, #220]	; (8009190 <evaluateCommand+0x618>)
 80090b2:	791b      	ldrb	r3, [r3, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <evaluateCommand+0x54c>
 80090b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090bc:	f043 0310 	orr.w	r3, r3, #16
 80090c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_MAG) tmp |= 1<<BOXCALIBRATE_MAG;
 80090c4:	4b32      	ldr	r3, [pc, #200]	; (8009190 <evaluateCommand+0x618>)
 80090c6:	7cdb      	ldrb	r3, [r3, #19]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <evaluateCommand+0x560>
 80090cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090d0:	f043 0320 	orr.w	r3, r3, #32
 80090d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.GPS_HOLD_MODE) tmp |= 1<<BOXGPS_MODE;
 80090d8:	4b2d      	ldr	r3, [pc, #180]	; (8009190 <evaluateCommand+0x618>)
 80090da:	7b5b      	ldrb	r3, [r3, #13]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d005      	beq.n	80090ec <evaluateCommand+0x574>
 80090e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		tele.flag         = tmp;
 80090ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	767b      	strb	r3, [r7, #25]
		tele.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 80090f4:	4b29      	ldr	r3, [pc, #164]	; (800919c <evaluateCommand+0x624>)
 80090f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f8 f838 	bl	8001170 <__aeabi_f2iz>
 8009100:	4603      	mov	r3, r0
 8009102:	b21b      	sxth	r3, r3
 8009104:	b29b      	uxth	r3, r3
 8009106:	461a      	mov	r2, r3
 8009108:	0092      	lsls	r2, r2, #2
 800910a:	4413      	add	r3, r2
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	b29b      	uxth	r3, r3
 8009110:	b21b      	sxth	r3, r3
 8009112:	837b      	strh	r3, [r7, #26]
		tele.angle[PITCH] = (int16_t) imu.AHRS[PITCH] * 10;
 8009114:	4b21      	ldr	r3, [pc, #132]	; (800919c <evaluateCommand+0x624>)
 8009116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800911a:	4618      	mov	r0, r3
 800911c:	f7f8 f828 	bl	8001170 <__aeabi_f2iz>
 8009120:	4603      	mov	r3, r0
 8009122:	b21b      	sxth	r3, r3
 8009124:	b29b      	uxth	r3, r3
 8009126:	461a      	mov	r2, r3
 8009128:	0092      	lsls	r2, r2, #2
 800912a:	4413      	add	r3, r2
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	b29b      	uxth	r3, r3
 8009130:	b21b      	sxth	r3, r3
 8009132:	83bb      	strh	r3, [r7, #28]
		tele.heading = (int16_t) imu.gyroRaw[YAW];
 8009134:	4b19      	ldr	r3, [pc, #100]	; (800919c <evaluateCommand+0x624>)
 8009136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009138:	4618      	mov	r0, r3
 800913a:	f7f8 f819 	bl	8001170 <__aeabi_f2iz>
 800913e:	4603      	mov	r3, r0
 8009140:	b21b      	sxth	r3, r3
 8009142:	83fb      	strh	r3, [r7, #30]
		tele.mag_heading = (int16_t) imu.actual_compass_heading;
 8009144:	4b15      	ldr	r3, [pc, #84]	; (800919c <evaluateCommand+0x624>)
 8009146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800914a:	b21b      	sxth	r3, r3
 800914c:	843b      	strh	r3, [r7, #32]
		tele.alt = (int16_t) alt.EstAlt;
 800914e:	4b12      	ldr	r3, [pc, #72]	; (8009198 <evaluateCommand+0x620>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	b21b      	sxth	r3, r3
 8009154:	847b      	strh	r3, [r7, #34]	; 0x22
		tele.VBAT = (int16_t) 100;//BAT.VBAT;
 8009156:	2364      	movs	r3, #100	; 0x64
 8009158:	84bb      	strh	r3, [r7, #36]	; 0x24
		tele.Temp = (int16_t) imu.Temp*10;
 800915a:	4b10      	ldr	r3, [pc, #64]	; (800919c <evaluateCommand+0x624>)
 800915c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800915e:	4618      	mov	r0, r3
 8009160:	f7f8 f806 	bl	8001170 <__aeabi_f2iz>
 8009164:	4603      	mov	r3, r0
 8009166:	b21b      	sxth	r3, r3
 8009168:	b29b      	uxth	r3, r3
 800916a:	461a      	mov	r2, r3
 800916c:	0092      	lsls	r2, r2, #2
 800916e:	4413      	add	r3, r2
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	b29b      	uxth	r3, r3
 8009174:	b21b      	sxth	r3, r3
 8009176:	84fb      	strh	r3, [r7, #38]	; 0x26
		for(uint8_t axis=0; axis<3;axis++)
 8009178:	2300      	movs	r3, #0
 800917a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800917e:	e055      	b.n	800922c <evaluateCommand+0x6b4>
 8009180:	20000d40 	.word	0x20000d40
 8009184:	20000268 	.word	0x20000268
 8009188:	20000260 	.word	0x20000260
 800918c:	20000acc 	.word	0x20000acc
 8009190:	20000ed4 	.word	0x20000ed4
 8009194:	20000ef8 	.word	0x20000ef8
 8009198:	20000ef0 	.word	0x20000ef0
 800919c:	20000e20 	.word	0x20000e20
		{
			tele.acc[axis]  = (int16_t) imu.accSmooth[axis];
 80091a0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80091a4:	4a88      	ldr	r2, [pc, #544]	; (80093c8 <evaluateCommand+0x850>)
 80091a6:	330a      	adds	r3, #10
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f7 ffdc 	bl	8001170 <__aeabi_f2iz>
 80091b8:	4603      	mov	r3, r0
 80091ba:	b21a      	sxth	r2, r3
 80091bc:	f104 0310 	add.w	r3, r4, #16
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80091c6:	440b      	add	r3, r1
 80091c8:	f823 2ca0 	strh.w	r2, [r3, #-160]
			tele.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 80091cc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80091d0:	4a7d      	ldr	r2, [pc, #500]	; (80093c8 <evaluateCommand+0x850>)
 80091d2:	330e      	adds	r3, #14
 80091d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d8:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 80091dc:	4618      	mov	r0, r3
 80091de:	f7f7 ffc7 	bl	8001170 <__aeabi_f2iz>
 80091e2:	4603      	mov	r3, r0
 80091e4:	b21a      	sxth	r2, r3
 80091e6:	f104 0314 	add.w	r3, r4, #20
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80091f0:	440b      	add	r3, r1
 80091f2:	f823 2ca2 	strh.w	r2, [r3, #-162]
			tele.mag[axis]  = (int16_t) imu.magSmooth[axis];
 80091f6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80091fa:	4a73      	ldr	r2, [pc, #460]	; (80093c8 <evaluateCommand+0x850>)
 80091fc:	3310      	adds	r3, #16
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 8009208:	4618      	mov	r0, r3
 800920a:	f7f7 ffb1 	bl	8001170 <__aeabi_f2iz>
 800920e:	4603      	mov	r3, r0
 8009210:	b21a      	sxth	r2, r3
 8009212:	f104 0318 	add.w	r3, r4, #24
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800921c:	440b      	add	r3, r1
 800921e:	f823 2ca4 	strh.w	r2, [r3, #-164]
		for(uint8_t axis=0; axis<3;axis++)
 8009222:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8009226:	3301      	adds	r3, #1
 8009228:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800922c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8009230:	2b02      	cmp	r3, #2
 8009232:	d9b5      	bls.n	80091a0 <evaluateCommand+0x628>
		}
		tele.a     = GPS.fixquality;
 8009234:	4b65      	ldr	r3, [pc, #404]	; (80093cc <evaluateCommand+0x854>)
 8009236:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800923a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		tele.b     = GPS.satellites;
 800923e:	4b63      	ldr	r3, [pc, #396]	; (80093cc <evaluateCommand+0x854>)
 8009240:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009244:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		tele.c     = GPS_coord[LAT];
 8009248:	4b61      	ldr	r3, [pc, #388]	; (80093d0 <evaluateCommand+0x858>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
		tele.d     = GPS_coord[LON];
 800924e:	4b60      	ldr	r3, [pc, #384]	; (80093d0 <evaluateCommand+0x858>)
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	643b      	str	r3, [r7, #64]	; 0x40
		tele.e     = GPS.altitude;
 8009254:	4b5d      	ldr	r3, [pc, #372]	; (80093cc <evaluateCommand+0x854>)
 8009256:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800925a:	b21b      	sxth	r3, r3
 800925c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		tele.f     = GPS.speed;
 8009260:	4b5a      	ldr	r3, [pc, #360]	; (80093cc <evaluateCommand+0x854>)
 8009262:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8009266:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		tele.motor[0] = motor[0];
 800926a:	4b5a      	ldr	r3, [pc, #360]	; (80093d4 <evaluateCommand+0x85c>)
 800926c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009270:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		tele.motor[1] = motor[1];
 8009274:	4b57      	ldr	r3, [pc, #348]	; (80093d4 <evaluateCommand+0x85c>)
 8009276:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800927a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		tele.motor[2] = motor[2];
 800927e:	4b55      	ldr	r3, [pc, #340]	; (80093d4 <evaluateCommand+0x85c>)
 8009280:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009284:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		tele.motor[3] = motor[3];
 8009288:	4b52      	ldr	r3, [pc, #328]	; (80093d4 <evaluateCommand+0x85c>)
 800928a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800928e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		tele.debug_t[0] = debug[0];
 8009292:	4b51      	ldr	r3, [pc, #324]	; (80093d8 <evaluateCommand+0x860>)
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	b21b      	sxth	r3, r3
 8009298:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		tele.debug_t[1] = debug[1];
 800929c:	4b4e      	ldr	r3, [pc, #312]	; (80093d8 <evaluateCommand+0x860>)
 800929e:	885b      	ldrh	r3, [r3, #2]
 80092a0:	b21b      	sxth	r3, r3
 80092a2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		tele.debug_t[2] = debug[2];
 80092a6:	4b4c      	ldr	r3, [pc, #304]	; (80093d8 <evaluateCommand+0x860>)
 80092a8:	889b      	ldrh	r3, [r3, #4]
 80092aa:	b21b      	sxth	r3, r3
 80092ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		tele.debug_t[3] = debug[3];
 80092b0:	4b49      	ldr	r3, [pc, #292]	; (80093d8 <evaluateCommand+0x860>)
 80092b2:	88db      	ldrh	r3, [r3, #6]
 80092b4:	b21b      	sxth	r3, r3
 80092b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		s_struct((uint8_t*)&tele, 86);
 80092ba:	1d3b      	adds	r3, r7, #4
 80092bc:	2156      	movs	r1, #86	; 0x56
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff fb09 	bl	80088d6 <s_struct>
		break;
 80092c4:	bf00      	nop
 80092c6:	f000 bedb 	b.w	800a080 <evaluateCommand+0x1508>
		{ struct {
			int16_t acc[3];
			int16_t gyro[3];
			int16_t mag[3];
		} mpu;
		for(uint8_t axis=0; axis<3;axis++)
 80092ca:	2300      	movs	r3, #0
 80092cc:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80092d0:	e04c      	b.n	800936c <evaluateCommand+0x7f4>
		{
			mpu.acc[axis]  = (int16_t) map(imu.accADC[axis], -32768, 32768, -1000, 1000);
 80092d2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80092d6:	4a3c      	ldr	r2, [pc, #240]	; (80093c8 <evaluateCommand+0x850>)
 80092d8:	3308      	adds	r3, #8
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	4413      	add	r3, r2
 80092de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80092e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80092e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80092ea:	fb02 f303 	mul.w	r3, r2, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	da02      	bge.n	80092f8 <evaluateCommand+0x780>
 80092f2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80092f6:	33ff      	adds	r3, #255	; 0xff
 80092f8:	141b      	asrs	r3, r3, #16
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8009300:	b29a      	uxth	r2, r3
 8009302:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8009306:	b212      	sxth	r2, r2
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800930e:	440b      	add	r3, r1
 8009310:	f823 2c40 	strh.w	r2, [r3, #-64]
			mpu.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 8009314:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8009318:	4a2b      	ldr	r2, [pc, #172]	; (80093c8 <evaluateCommand+0x850>)
 800931a:	330e      	adds	r3, #14
 800931c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009320:	f897 409e 	ldrb.w	r4, [r7, #158]	; 0x9e
 8009324:	4618      	mov	r0, r3
 8009326:	f7f7 ff23 	bl	8001170 <__aeabi_f2iz>
 800932a:	4603      	mov	r3, r0
 800932c:	b21a      	sxth	r2, r3
 800932e:	0063      	lsls	r3, r4, #1
 8009330:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8009334:	440b      	add	r3, r1
 8009336:	f823 2c3a 	strh.w	r2, [r3, #-58]
			mpu.mag[axis]  = (int16_t) imu.magRaw[axis];
 800933a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800933e:	4a22      	ldr	r2, [pc, #136]	; (80093c8 <evaluateCommand+0x850>)
 8009340:	3314      	adds	r3, #20
 8009342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009346:	f897 409e 	ldrb.w	r4, [r7, #158]	; 0x9e
 800934a:	4618      	mov	r0, r3
 800934c:	f7f7 ff10 	bl	8001170 <__aeabi_f2iz>
 8009350:	4603      	mov	r3, r0
 8009352:	b21a      	sxth	r2, r3
 8009354:	1d23      	adds	r3, r4, #4
 8009356:	005b      	lsls	r3, r3, #1
 8009358:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800935c:	440b      	add	r3, r1
 800935e:	f823 2c3c 	strh.w	r2, [r3, #-60]
		for(uint8_t axis=0; axis<3;axis++)
 8009362:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8009366:	3301      	adds	r3, #1
 8009368:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800936c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8009370:	2b02      	cmp	r3, #2
 8009372:	d9ae      	bls.n	80092d2 <evaluateCommand+0x75a>
		}
		s_struct((uint8_t*)&mpu,18);
 8009374:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009378:	2112      	movs	r1, #18
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff faab 	bl	80088d6 <s_struct>
		break;
 8009380:	bf00      	nop
 8009382:	f000 be7d 	b.w	800a080 <evaluateCommand+0x1508>
			uint8_t a,b;
			int32_t c,d;
			//	        int16_t e;
			//	        uint16_t f,g;
		} msp_raw_gps;
		msp_raw_gps.a     = GPS.fixquality;
 8009386:	4b11      	ldr	r3, [pc, #68]	; (80093cc <evaluateCommand+0x854>)
 8009388:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800938c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		msp_raw_gps.b     = GPS.satellites;
 8009390:	4b0e      	ldr	r3, [pc, #56]	; (80093cc <evaluateCommand+0x854>)
 8009392:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009396:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		msp_raw_gps.c     = GPS.GPS_coord[LAT];
 800939a:	4b0c      	ldr	r3, [pc, #48]	; (80093cc <evaluateCommand+0x854>)
 800939c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093a0:	663b      	str	r3, [r7, #96]	; 0x60
		msp_raw_gps.d     = GPS.GPS_coord[LON];
 80093a2:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <evaluateCommand+0x854>)
 80093a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093a8:	667b      	str	r3, [r7, #100]	; 0x64
		//msp_raw_gps.e     = GPS_altitude;
		//msp_raw_gps.f     = GPS_speed;
		//msp_raw_gps.g     = GPS_ground_course;
		s_struct((uint8_t*)&msp_raw_gps,10);
 80093aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80093ae:	210a      	movs	r1, #10
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7ff fa90 	bl	80088d6 <s_struct>
		break;
 80093b6:	bf00      	nop
 80093b8:	f000 be62 	b.w	800a080 <evaluateCommand+0x1508>
		}

		case MSP_MOTOR:
			s_struct((uint8_t*)&motor,8);
 80093bc:	2108      	movs	r1, #8
 80093be:	4805      	ldr	r0, [pc, #20]	; (80093d4 <evaluateCommand+0x85c>)
 80093c0:	f7ff fa89 	bl	80088d6 <s_struct>
			break;
 80093c4:	f000 be5c 	b.w	800a080 <evaluateCommand+0x1508>
 80093c8:	20000e20 	.word	0x20000e20
 80093cc:	20000b78 	.word	0x20000b78
 80093d0:	20000c5c 	.word	0x20000c5c
 80093d4:	20000cc8 	.word	0x20000cc8
 80093d8:	20000670 	.word	0x20000670
			uint16_t inner_YAW[3];
			uint16_t YAW_rate[3];
		} pid_t;


		pid_t.GPS_P[0]  = (int16_t) (posholdPID_PARAM.kP  * 100);
 80093dc:	4b9a      	ldr	r3, [pc, #616]	; (8009648 <evaluateCommand+0xad0>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	499a      	ldr	r1, [pc, #616]	; (800964c <evaluateCommand+0xad4>)
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7f7 fce8 	bl	8000db8 <__aeabi_fmul>
 80093e8:	4603      	mov	r3, r0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7f7 fec0 	bl	8001170 <__aeabi_f2iz>
 80093f0:	4603      	mov	r3, r0
 80093f2:	b21b      	sxth	r3, r3
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	80bb      	strh	r3, [r7, #4]
		pid_t.GPS_P[1]  = (int16_t) (poshold_ratePID_PARAM.kP  * 100);
 80093f8:	4b95      	ldr	r3, [pc, #596]	; (8009650 <evaluateCommand+0xad8>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4993      	ldr	r1, [pc, #588]	; (800964c <evaluateCommand+0xad4>)
 80093fe:	4618      	mov	r0, r3
 8009400:	f7f7 fcda 	bl	8000db8 <__aeabi_fmul>
 8009404:	4603      	mov	r3, r0
 8009406:	4618      	mov	r0, r3
 8009408:	f7f7 feb2 	bl	8001170 <__aeabi_f2iz>
 800940c:	4603      	mov	r3, r0
 800940e:	b21b      	sxth	r3, r3
 8009410:	b29b      	uxth	r3, r3
 8009412:	80fb      	strh	r3, [r7, #6]
		pid_t.GPS_P[2]  = (int16_t) (navPID_PARAM.kP  * 100);
 8009414:	4b8f      	ldr	r3, [pc, #572]	; (8009654 <evaluateCommand+0xadc>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	498c      	ldr	r1, [pc, #560]	; (800964c <evaluateCommand+0xad4>)
 800941a:	4618      	mov	r0, r3
 800941c:	f7f7 fccc 	bl	8000db8 <__aeabi_fmul>
 8009420:	4603      	mov	r3, r0
 8009422:	4618      	mov	r0, r3
 8009424:	f7f7 fea4 	bl	8001170 <__aeabi_f2iz>
 8009428:	4603      	mov	r3, r0
 800942a:	b21b      	sxth	r3, r3
 800942c:	b29b      	uxth	r3, r3
 800942e:	813b      	strh	r3, [r7, #8]
		pid_t.GPS_I[0]  = (int16_t) (posholdPID_PARAM.kI * 100);
 8009430:	4b85      	ldr	r3, [pc, #532]	; (8009648 <evaluateCommand+0xad0>)
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	4985      	ldr	r1, [pc, #532]	; (800964c <evaluateCommand+0xad4>)
 8009436:	4618      	mov	r0, r3
 8009438:	f7f7 fcbe 	bl	8000db8 <__aeabi_fmul>
 800943c:	4603      	mov	r3, r0
 800943e:	4618      	mov	r0, r3
 8009440:	f7f7 fe96 	bl	8001170 <__aeabi_f2iz>
 8009444:	4603      	mov	r3, r0
 8009446:	b21b      	sxth	r3, r3
 8009448:	b29b      	uxth	r3, r3
 800944a:	837b      	strh	r3, [r7, #26]
		pid_t.GPS_I[1]  = (int16_t) (poshold_ratePID_PARAM.kI * 100);
 800944c:	4b80      	ldr	r3, [pc, #512]	; (8009650 <evaluateCommand+0xad8>)
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	497e      	ldr	r1, [pc, #504]	; (800964c <evaluateCommand+0xad4>)
 8009452:	4618      	mov	r0, r3
 8009454:	f7f7 fcb0 	bl	8000db8 <__aeabi_fmul>
 8009458:	4603      	mov	r3, r0
 800945a:	4618      	mov	r0, r3
 800945c:	f7f7 fe88 	bl	8001170 <__aeabi_f2iz>
 8009460:	4603      	mov	r3, r0
 8009462:	b21b      	sxth	r3, r3
 8009464:	b29b      	uxth	r3, r3
 8009466:	83bb      	strh	r3, [r7, #28]
		pid_t.GPS_I[2]  = (int16_t) (navPID_PARAM.kI * 100);
 8009468:	4b7a      	ldr	r3, [pc, #488]	; (8009654 <evaluateCommand+0xadc>)
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	4977      	ldr	r1, [pc, #476]	; (800964c <evaluateCommand+0xad4>)
 800946e:	4618      	mov	r0, r3
 8009470:	f7f7 fca2 	bl	8000db8 <__aeabi_fmul>
 8009474:	4603      	mov	r3, r0
 8009476:	4618      	mov	r0, r3
 8009478:	f7f7 fe7a 	bl	8001170 <__aeabi_f2iz>
 800947c:	4603      	mov	r3, r0
 800947e:	b21b      	sxth	r3, r3
 8009480:	b29b      	uxth	r3, r3
 8009482:	83fb      	strh	r3, [r7, #30]
		pid_t.GPS_D[0]  = (int16_t) (poshold_ratePID_PARAM.kD  * 1000);
 8009484:	4b72      	ldr	r3, [pc, #456]	; (8009650 <evaluateCommand+0xad8>)
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	4973      	ldr	r1, [pc, #460]	; (8009658 <evaluateCommand+0xae0>)
 800948a:	4618      	mov	r0, r3
 800948c:	f7f7 fc94 	bl	8000db8 <__aeabi_fmul>
 8009490:	4603      	mov	r3, r0
 8009492:	4618      	mov	r0, r3
 8009494:	f7f7 fe6c 	bl	8001170 <__aeabi_f2iz>
 8009498:	4603      	mov	r3, r0
 800949a:	b21b      	sxth	r3, r3
 800949c:	b29b      	uxth	r3, r3
 800949e:	863b      	strh	r3, [r7, #48]	; 0x30
		pid_t.GPS_D[1]  = (int16_t) (navPID_PARAM.kD   * 1000);
 80094a0:	4b6c      	ldr	r3, [pc, #432]	; (8009654 <evaluateCommand+0xadc>)
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	496c      	ldr	r1, [pc, #432]	; (8009658 <evaluateCommand+0xae0>)
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7f7 fc86 	bl	8000db8 <__aeabi_fmul>
 80094ac:	4603      	mov	r3, r0
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7f7 fe5e 	bl	8001170 <__aeabi_f2iz>
 80094b4:	4603      	mov	r3, r0
 80094b6:	b21b      	sxth	r3, r3
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	867b      	strh	r3, [r7, #50]	; 0x32
		pid_t.GPS_D[2]  = (int16_t) (posholdPID_PARAM.Imax);
 80094bc:	4b62      	ldr	r3, [pc, #392]	; (8009648 <evaluateCommand+0xad0>)
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7f7 fe55 	bl	8001170 <__aeabi_f2iz>
 80094c6:	4603      	mov	r3, r0
 80094c8:	b21b      	sxth	r3, r3
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	86bb      	strh	r3, [r7, #52]	; 0x34

		pid_t.outer_ROLL[0] = (int16_t) (pid.kp1[ROLL] * 10);
 80094ce:	4b63      	ldr	r3, [pc, #396]	; (800965c <evaluateCommand+0xae4>)
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	4963      	ldr	r1, [pc, #396]	; (8009660 <evaluateCommand+0xae8>)
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7f7 fc6f 	bl	8000db8 <__aeabi_fmul>
 80094da:	4603      	mov	r3, r0
 80094dc:	4618      	mov	r0, r3
 80094de:	f7f7 fe47 	bl	8001170 <__aeabi_f2iz>
 80094e2:	4603      	mov	r3, r0
 80094e4:	b21b      	sxth	r3, r3
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	817b      	strh	r3, [r7, #10]
		pid_t.outer_ROLL[1] = (int16_t) (pid.ki1[ROLL] * 10);
 80094ea:	4b5c      	ldr	r3, [pc, #368]	; (800965c <evaluateCommand+0xae4>)
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	495c      	ldr	r1, [pc, #368]	; (8009660 <evaluateCommand+0xae8>)
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7f7 fc61 	bl	8000db8 <__aeabi_fmul>
 80094f6:	4603      	mov	r3, r0
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7f7 fe39 	bl	8001170 <__aeabi_f2iz>
 80094fe:	4603      	mov	r3, r0
 8009500:	b21b      	sxth	r3, r3
 8009502:	b29b      	uxth	r3, r3
 8009504:	81bb      	strh	r3, [r7, #12]
		pid_t.outer_PITCH[0] = (int16_t) (pid.kp1[PITCH] * 10);
 8009506:	4b55      	ldr	r3, [pc, #340]	; (800965c <evaluateCommand+0xae4>)
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	4955      	ldr	r1, [pc, #340]	; (8009660 <evaluateCommand+0xae8>)
 800950c:	4618      	mov	r0, r3
 800950e:	f7f7 fc53 	bl	8000db8 <__aeabi_fmul>
 8009512:	4603      	mov	r3, r0
 8009514:	4618      	mov	r0, r3
 8009516:	f7f7 fe2b 	bl	8001170 <__aeabi_f2iz>
 800951a:	4603      	mov	r3, r0
 800951c:	b21b      	sxth	r3, r3
 800951e:	b29b      	uxth	r3, r3
 8009520:	843b      	strh	r3, [r7, #32]
		pid_t.outer_PITCH[1] = (int16_t) (pid.ki1[PITCH] * 10);
 8009522:	4b4e      	ldr	r3, [pc, #312]	; (800965c <evaluateCommand+0xae4>)
 8009524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009526:	494e      	ldr	r1, [pc, #312]	; (8009660 <evaluateCommand+0xae8>)
 8009528:	4618      	mov	r0, r3
 800952a:	f7f7 fc45 	bl	8000db8 <__aeabi_fmul>
 800952e:	4603      	mov	r3, r0
 8009530:	4618      	mov	r0, r3
 8009532:	f7f7 fe1d 	bl	8001170 <__aeabi_f2iz>
 8009536:	4603      	mov	r3, r0
 8009538:	b21b      	sxth	r3, r3
 800953a:	b29b      	uxth	r3, r3
 800953c:	847b      	strh	r3, [r7, #34]	; 0x22
		pid_t.outer_YAW[0] = (int16_t) (pid.kp1[YAW] * 10);
 800953e:	4b47      	ldr	r3, [pc, #284]	; (800965c <evaluateCommand+0xae4>)
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	4947      	ldr	r1, [pc, #284]	; (8009660 <evaluateCommand+0xae8>)
 8009544:	4618      	mov	r0, r3
 8009546:	f7f7 fc37 	bl	8000db8 <__aeabi_fmul>
 800954a:	4603      	mov	r3, r0
 800954c:	4618      	mov	r0, r3
 800954e:	f7f7 fe0f 	bl	8001170 <__aeabi_f2iz>
 8009552:	4603      	mov	r3, r0
 8009554:	b21b      	sxth	r3, r3
 8009556:	b29b      	uxth	r3, r3
 8009558:	86fb      	strh	r3, [r7, #54]	; 0x36
		pid_t.outer_YAW[1] = (int16_t) (pid.ki1[YAW] * 10);
 800955a:	4b40      	ldr	r3, [pc, #256]	; (800965c <evaluateCommand+0xae4>)
 800955c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800955e:	4940      	ldr	r1, [pc, #256]	; (8009660 <evaluateCommand+0xae8>)
 8009560:	4618      	mov	r0, r3
 8009562:	f7f7 fc29 	bl	8000db8 <__aeabi_fmul>
 8009566:	4603      	mov	r3, r0
 8009568:	4618      	mov	r0, r3
 800956a:	f7f7 fe01 	bl	8001170 <__aeabi_f2iz>
 800956e:	4603      	mov	r3, r0
 8009570:	b21b      	sxth	r3, r3
 8009572:	b29b      	uxth	r3, r3
 8009574:	873b      	strh	r3, [r7, #56]	; 0x38

		pid_t.inner_ROLL[0] = (int16_t) (pid.kp2[ROLL] * 10);
 8009576:	4b39      	ldr	r3, [pc, #228]	; (800965c <evaluateCommand+0xae4>)
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	4939      	ldr	r1, [pc, #228]	; (8009660 <evaluateCommand+0xae8>)
 800957c:	4618      	mov	r0, r3
 800957e:	f7f7 fc1b 	bl	8000db8 <__aeabi_fmul>
 8009582:	4603      	mov	r3, r0
 8009584:	4618      	mov	r0, r3
 8009586:	f7f7 fdf3 	bl	8001170 <__aeabi_f2iz>
 800958a:	4603      	mov	r3, r0
 800958c:	b21b      	sxth	r3, r3
 800958e:	b29b      	uxth	r3, r3
 8009590:	81fb      	strh	r3, [r7, #14]
		pid_t.inner_ROLL[1] = (int16_t) (pid.ki2[ROLL] * 10);
 8009592:	4b32      	ldr	r3, [pc, #200]	; (800965c <evaluateCommand+0xae4>)
 8009594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009596:	4932      	ldr	r1, [pc, #200]	; (8009660 <evaluateCommand+0xae8>)
 8009598:	4618      	mov	r0, r3
 800959a:	f7f7 fc0d 	bl	8000db8 <__aeabi_fmul>
 800959e:	4603      	mov	r3, r0
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7f7 fde5 	bl	8001170 <__aeabi_f2iz>
 80095a6:	4603      	mov	r3, r0
 80095a8:	b21b      	sxth	r3, r3
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	823b      	strh	r3, [r7, #16]
		pid_t.inner_ROLL[2] = (int16_t) (pid.kd2[ROLL] * 100);
 80095ae:	4b2b      	ldr	r3, [pc, #172]	; (800965c <evaluateCommand+0xae4>)
 80095b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b2:	4926      	ldr	r1, [pc, #152]	; (800964c <evaluateCommand+0xad4>)
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7f7 fbff 	bl	8000db8 <__aeabi_fmul>
 80095ba:	4603      	mov	r3, r0
 80095bc:	4618      	mov	r0, r3
 80095be:	f7f7 fdd7 	bl	8001170 <__aeabi_f2iz>
 80095c2:	4603      	mov	r3, r0
 80095c4:	b21b      	sxth	r3, r3
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	827b      	strh	r3, [r7, #18]
		pid_t.inner_PITCH[0] = (int16_t) (pid.kp2[PITCH] * 10);
 80095ca:	4b24      	ldr	r3, [pc, #144]	; (800965c <evaluateCommand+0xae4>)
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	4924      	ldr	r1, [pc, #144]	; (8009660 <evaluateCommand+0xae8>)
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7f7 fbf1 	bl	8000db8 <__aeabi_fmul>
 80095d6:	4603      	mov	r3, r0
 80095d8:	4618      	mov	r0, r3
 80095da:	f7f7 fdc9 	bl	8001170 <__aeabi_f2iz>
 80095de:	4603      	mov	r3, r0
 80095e0:	b21b      	sxth	r3, r3
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		pid_t.inner_PITCH[1] = (int16_t) (pid.ki2[PITCH] * 10);
 80095e6:	4b1d      	ldr	r3, [pc, #116]	; (800965c <evaluateCommand+0xae4>)
 80095e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ea:	491d      	ldr	r1, [pc, #116]	; (8009660 <evaluateCommand+0xae8>)
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7f7 fbe3 	bl	8000db8 <__aeabi_fmul>
 80095f2:	4603      	mov	r3, r0
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7f7 fdbb 	bl	8001170 <__aeabi_f2iz>
 80095fa:	4603      	mov	r3, r0
 80095fc:	b21b      	sxth	r3, r3
 80095fe:	b29b      	uxth	r3, r3
 8009600:	84fb      	strh	r3, [r7, #38]	; 0x26
		pid_t.inner_PITCH[2] = (int16_t) (pid.kd2[PITCH] * 100);
 8009602:	4b16      	ldr	r3, [pc, #88]	; (800965c <evaluateCommand+0xae4>)
 8009604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009606:	4911      	ldr	r1, [pc, #68]	; (800964c <evaluateCommand+0xad4>)
 8009608:	4618      	mov	r0, r3
 800960a:	f7f7 fbd5 	bl	8000db8 <__aeabi_fmul>
 800960e:	4603      	mov	r3, r0
 8009610:	4618      	mov	r0, r3
 8009612:	f7f7 fdad 	bl	8001170 <__aeabi_f2iz>
 8009616:	4603      	mov	r3, r0
 8009618:	b21b      	sxth	r3, r3
 800961a:	b29b      	uxth	r3, r3
 800961c:	853b      	strh	r3, [r7, #40]	; 0x28
		pid_t.inner_YAW[0] = (int16_t) (pid.kp2[YAW] * 10);
 800961e:	4b0f      	ldr	r3, [pc, #60]	; (800965c <evaluateCommand+0xae4>)
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	490f      	ldr	r1, [pc, #60]	; (8009660 <evaluateCommand+0xae8>)
 8009624:	4618      	mov	r0, r3
 8009626:	f7f7 fbc7 	bl	8000db8 <__aeabi_fmul>
 800962a:	4603      	mov	r3, r0
 800962c:	4618      	mov	r0, r3
 800962e:	f7f7 fd9f 	bl	8001170 <__aeabi_f2iz>
 8009632:	4603      	mov	r3, r0
 8009634:	b21b      	sxth	r3, r3
 8009636:	b29b      	uxth	r3, r3
 8009638:	877b      	strh	r3, [r7, #58]	; 0x3a
		pid_t.inner_YAW[1] = (int16_t) (pid.ki2[YAW] * 10);
 800963a:	4b08      	ldr	r3, [pc, #32]	; (800965c <evaluateCommand+0xae4>)
 800963c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963e:	4908      	ldr	r1, [pc, #32]	; (8009660 <evaluateCommand+0xae8>)
 8009640:	4618      	mov	r0, r3
 8009642:	f7f7 fbb9 	bl	8000db8 <__aeabi_fmul>
 8009646:	e00d      	b.n	8009664 <evaluateCommand+0xaec>
 8009648:	20000c64 	.word	0x20000c64
 800964c:	42c80000 	.word	0x42c80000
 8009650:	20000b68 	.word	0x20000b68
 8009654:	20000b20 	.word	0x20000b20
 8009658:	447a0000 	.word	0x447a0000
 800965c:	200009b0 	.word	0x200009b0
 8009660:	41200000 	.word	0x41200000
 8009664:	4603      	mov	r3, r0
 8009666:	4618      	mov	r0, r3
 8009668:	f7f7 fd82 	bl	8001170 <__aeabi_f2iz>
 800966c:	4603      	mov	r3, r0
 800966e:	b21b      	sxth	r3, r3
 8009670:	b29b      	uxth	r3, r3
 8009672:	87bb      	strh	r3, [r7, #60]	; 0x3c
		pid_t.inner_YAW[2] = (int16_t) (pid.kd2[YAW] * 100);
 8009674:	4b8a      	ldr	r3, [pc, #552]	; (80098a0 <evaluateCommand+0xd28>)
 8009676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009678:	498a      	ldr	r1, [pc, #552]	; (80098a4 <evaluateCommand+0xd2c>)
 800967a:	4618      	mov	r0, r3
 800967c:	f7f7 fb9c 	bl	8000db8 <__aeabi_fmul>
 8009680:	4603      	mov	r3, r0
 8009682:	4618      	mov	r0, r3
 8009684:	f7f7 fd74 	bl	8001170 <__aeabi_f2iz>
 8009688:	4603      	mov	r3, r0
 800968a:	b21b      	sxth	r3, r3
 800968c:	b29b      	uxth	r3, r3
 800968e:	87fb      	strh	r3, [r7, #62]	; 0x3e

		pid_t.ROLL_rate[0]  = (int16_t) (pid.kp_rate[ROLL]  * 10);
 8009690:	4b83      	ldr	r3, [pc, #524]	; (80098a0 <evaluateCommand+0xd28>)
 8009692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009694:	4984      	ldr	r1, [pc, #528]	; (80098a8 <evaluateCommand+0xd30>)
 8009696:	4618      	mov	r0, r3
 8009698:	f7f7 fb8e 	bl	8000db8 <__aeabi_fmul>
 800969c:	4603      	mov	r3, r0
 800969e:	4618      	mov	r0, r3
 80096a0:	f7f7 fd66 	bl	8001170 <__aeabi_f2iz>
 80096a4:	4603      	mov	r3, r0
 80096a6:	b21b      	sxth	r3, r3
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	82bb      	strh	r3, [r7, #20]
		pid_t.ROLL_rate[1]  = (int16_t) (pid.ki_rate[ROLL]  * 10);
 80096ac:	4b7c      	ldr	r3, [pc, #496]	; (80098a0 <evaluateCommand+0xd28>)
 80096ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b0:	497d      	ldr	r1, [pc, #500]	; (80098a8 <evaluateCommand+0xd30>)
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7f7 fb80 	bl	8000db8 <__aeabi_fmul>
 80096b8:	4603      	mov	r3, r0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7f7 fd58 	bl	8001170 <__aeabi_f2iz>
 80096c0:	4603      	mov	r3, r0
 80096c2:	b21b      	sxth	r3, r3
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	82fb      	strh	r3, [r7, #22]
		pid_t.ROLL_rate[2]  = (int16_t) (pid.kd_rate[ROLL]  * 100);
 80096c8:	4b75      	ldr	r3, [pc, #468]	; (80098a0 <evaluateCommand+0xd28>)
 80096ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096cc:	4975      	ldr	r1, [pc, #468]	; (80098a4 <evaluateCommand+0xd2c>)
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7f7 fb72 	bl	8000db8 <__aeabi_fmul>
 80096d4:	4603      	mov	r3, r0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7f7 fd4a 	bl	8001170 <__aeabi_f2iz>
 80096dc:	4603      	mov	r3, r0
 80096de:	b21b      	sxth	r3, r3
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	833b      	strh	r3, [r7, #24]
		pid_t.PITCH_rate[0] = (int16_t) (pid.kp_rate[PITCH] * 10);
 80096e4:	4b6e      	ldr	r3, [pc, #440]	; (80098a0 <evaluateCommand+0xd28>)
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	496f      	ldr	r1, [pc, #444]	; (80098a8 <evaluateCommand+0xd30>)
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7f7 fb64 	bl	8000db8 <__aeabi_fmul>
 80096f0:	4603      	mov	r3, r0
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7f7 fd3c 	bl	8001170 <__aeabi_f2iz>
 80096f8:	4603      	mov	r3, r0
 80096fa:	b21b      	sxth	r3, r3
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	857b      	strh	r3, [r7, #42]	; 0x2a
		pid_t.PITCH_rate[1] = (int16_t) (pid.ki_rate[PITCH] * 10);
 8009700:	4b67      	ldr	r3, [pc, #412]	; (80098a0 <evaluateCommand+0xd28>)
 8009702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009704:	4968      	ldr	r1, [pc, #416]	; (80098a8 <evaluateCommand+0xd30>)
 8009706:	4618      	mov	r0, r3
 8009708:	f7f7 fb56 	bl	8000db8 <__aeabi_fmul>
 800970c:	4603      	mov	r3, r0
 800970e:	4618      	mov	r0, r3
 8009710:	f7f7 fd2e 	bl	8001170 <__aeabi_f2iz>
 8009714:	4603      	mov	r3, r0
 8009716:	b21b      	sxth	r3, r3
 8009718:	b29b      	uxth	r3, r3
 800971a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		pid_t.PITCH_rate[2] = (int16_t) (pid.kd_rate[PITCH] * 100);
 800971c:	4b60      	ldr	r3, [pc, #384]	; (80098a0 <evaluateCommand+0xd28>)
 800971e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009722:	4960      	ldr	r1, [pc, #384]	; (80098a4 <evaluateCommand+0xd2c>)
 8009724:	4618      	mov	r0, r3
 8009726:	f7f7 fb47 	bl	8000db8 <__aeabi_fmul>
 800972a:	4603      	mov	r3, r0
 800972c:	4618      	mov	r0, r3
 800972e:	f7f7 fd1f 	bl	8001170 <__aeabi_f2iz>
 8009732:	4603      	mov	r3, r0
 8009734:	b21b      	sxth	r3, r3
 8009736:	b29b      	uxth	r3, r3
 8009738:	85fb      	strh	r3, [r7, #46]	; 0x2e
		pid_t.YAW_rate[0]   = (int16_t) (pid.kp_rate[YAW]   * 10);
 800973a:	4b59      	ldr	r3, [pc, #356]	; (80098a0 <evaluateCommand+0xd28>)
 800973c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973e:	495a      	ldr	r1, [pc, #360]	; (80098a8 <evaluateCommand+0xd30>)
 8009740:	4618      	mov	r0, r3
 8009742:	f7f7 fb39 	bl	8000db8 <__aeabi_fmul>
 8009746:	4603      	mov	r3, r0
 8009748:	4618      	mov	r0, r3
 800974a:	f7f7 fd11 	bl	8001170 <__aeabi_f2iz>
 800974e:	4603      	mov	r3, r0
 8009750:	b21b      	sxth	r3, r3
 8009752:	b29b      	uxth	r3, r3
 8009754:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		pid_t.YAW_rate[1]   = (int16_t) (pid.ki_rate[YAW]   * 10);
 8009758:	4b51      	ldr	r3, [pc, #324]	; (80098a0 <evaluateCommand+0xd28>)
 800975a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800975c:	4952      	ldr	r1, [pc, #328]	; (80098a8 <evaluateCommand+0xd30>)
 800975e:	4618      	mov	r0, r3
 8009760:	f7f7 fb2a 	bl	8000db8 <__aeabi_fmul>
 8009764:	4603      	mov	r3, r0
 8009766:	4618      	mov	r0, r3
 8009768:	f7f7 fd02 	bl	8001170 <__aeabi_f2iz>
 800976c:	4603      	mov	r3, r0
 800976e:	b21b      	sxth	r3, r3
 8009770:	b29b      	uxth	r3, r3
 8009772:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pid_t.YAW_rate[2]   = (int16_t) (pid.kd_rate[YAW]   * 100);
 8009776:	4b4a      	ldr	r3, [pc, #296]	; (80098a0 <evaluateCommand+0xd28>)
 8009778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800977c:	4949      	ldr	r1, [pc, #292]	; (80098a4 <evaluateCommand+0xd2c>)
 800977e:	4618      	mov	r0, r3
 8009780:	f7f7 fb1a 	bl	8000db8 <__aeabi_fmul>
 8009784:	4603      	mov	r3, r0
 8009786:	4618      	mov	r0, r3
 8009788:	f7f7 fcf2 	bl	8001170 <__aeabi_f2iz>
 800978c:	4603      	mov	r3, r0
 800978e:	b21b      	sxth	r3, r3
 8009790:	b29b      	uxth	r3, r3
 8009792:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

		s_struct((uint8_t*)&pid_t,66);
 8009796:	1d3b      	adds	r3, r7, #4
 8009798:	2142      	movs	r1, #66	; 0x42
 800979a:	4618      	mov	r0, r3
 800979c:	f7ff f89b 	bl	80088d6 <s_struct>

		break;
 80097a0:	bf00      	nop
 80097a2:	f000 bc6d 	b.w	800a080 <evaluateCommand+0x1508>
		{ struct {
			uint16_t VBAT;
			uint16_t Temp;
		} analog;

		analog.VBAT = 100;//BAT.VBAT;
 80097a6:	2364      	movs	r3, #100	; 0x64
 80097a8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		analog.Temp = (imu.Temp*10);
 80097ac:	4b3f      	ldr	r3, [pc, #252]	; (80098ac <evaluateCommand+0xd34>)
 80097ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b0:	493d      	ldr	r1, [pc, #244]	; (80098a8 <evaluateCommand+0xd30>)
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7f7 fb00 	bl	8000db8 <__aeabi_fmul>
 80097b8:	4603      	mov	r3, r0
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7f7 fcfe 	bl	80011bc <__aeabi_f2uiz>
 80097c0:	4603      	mov	r3, r0
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

		s_struct((uint8_t*)&analog,4);
 80097c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80097cc:	2104      	movs	r1, #4
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7ff f881 	bl	80088d6 <s_struct>
		break;
 80097d4:	bf00      	nop
 80097d6:	f000 bc53 	b.w	800a080 <evaluateCommand+0x1508>
		}

		case MSP_SET_PID:
			posholdPID_PARAM.kP   = 0.15f;
 80097da:	4b35      	ldr	r3, [pc, #212]	; (80098b0 <evaluateCommand+0xd38>)
 80097dc:	4a35      	ldr	r2, [pc, #212]	; (80098b4 <evaluateCommand+0xd3c>)
 80097de:	601a      	str	r2, [r3, #0]
			posholdPID_PARAM.kI   = 0;
 80097e0:	4b33      	ldr	r3, [pc, #204]	; (80098b0 <evaluateCommand+0xd38>)
 80097e2:	f04f 0200 	mov.w	r2, #0
 80097e6:	605a      	str	r2, [r3, #4]
			posholdPID_PARAM.Imax = 2000;
 80097e8:	4b31      	ldr	r3, [pc, #196]	; (80098b0 <evaluateCommand+0xd38>)
 80097ea:	4a33      	ldr	r2, [pc, #204]	; (80098b8 <evaluateCommand+0xd40>)
 80097ec:	60da      	str	r2, [r3, #12]

			poshold_ratePID_PARAM.kP   = 3.4f;
 80097ee:	4b33      	ldr	r3, [pc, #204]	; (80098bc <evaluateCommand+0xd44>)
 80097f0:	4a33      	ldr	r2, [pc, #204]	; (80098c0 <evaluateCommand+0xd48>)
 80097f2:	601a      	str	r2, [r3, #0]
			poshold_ratePID_PARAM.kI   = 0.14f;
 80097f4:	4b31      	ldr	r3, [pc, #196]	; (80098bc <evaluateCommand+0xd44>)
 80097f6:	4a33      	ldr	r2, [pc, #204]	; (80098c4 <evaluateCommand+0xd4c>)
 80097f8:	605a      	str	r2, [r3, #4]
			poshold_ratePID_PARAM.kD   = 0.053f;
 80097fa:	4b30      	ldr	r3, [pc, #192]	; (80098bc <evaluateCommand+0xd44>)
 80097fc:	4a32      	ldr	r2, [pc, #200]	; (80098c8 <evaluateCommand+0xd50>)
 80097fe:	609a      	str	r2, [r3, #8]
			poshold_ratePID_PARAM.Imax = 2000;
 8009800:	4b2e      	ldr	r3, [pc, #184]	; (80098bc <evaluateCommand+0xd44>)
 8009802:	4a2d      	ldr	r2, [pc, #180]	; (80098b8 <evaluateCommand+0xd40>)
 8009804:	60da      	str	r2, [r3, #12]

			navPID_PARAM.kP   = 2.5f;
 8009806:	4b31      	ldr	r3, [pc, #196]	; (80098cc <evaluateCommand+0xd54>)
 8009808:	4a31      	ldr	r2, [pc, #196]	; (80098d0 <evaluateCommand+0xd58>)
 800980a:	601a      	str	r2, [r3, #0]
			navPID_PARAM.kI   = 0.33f;
 800980c:	4b2f      	ldr	r3, [pc, #188]	; (80098cc <evaluateCommand+0xd54>)
 800980e:	4a31      	ldr	r2, [pc, #196]	; (80098d4 <evaluateCommand+0xd5c>)
 8009810:	605a      	str	r2, [r3, #4]
			navPID_PARAM.kD   = 0.053f;
 8009812:	4b2e      	ldr	r3, [pc, #184]	; (80098cc <evaluateCommand+0xd54>)
 8009814:	4a2c      	ldr	r2, [pc, #176]	; (80098c8 <evaluateCommand+0xd50>)
 8009816:	609a      	str	r2, [r3, #8]
			navPID_PARAM.Imax = 2000;
 8009818:	4b2c      	ldr	r3, [pc, #176]	; (80098cc <evaluateCommand+0xd54>)
 800981a:	4a27      	ldr	r2, [pc, #156]	; (80098b8 <evaluateCommand+0xd40>)
 800981c:	60da      	str	r2, [r3, #12]

			for(i=0; i < 3; i++)
 800981e:	2300      	movs	r3, #0
 8009820:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8009824:	e1eb      	b.n	8009bfe <evaluateCommand+0x1086>
			{
				if(i==0)
 8009826:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800982a:	2b00      	cmp	r3, #0
 800982c:	d154      	bne.n	80098d8 <evaluateCommand+0xd60>
				{
					posholdPID_PARAM.kP   = (float) read16();
 800982e:	f7fe ffd7 	bl	80087e0 <read16>
 8009832:	4603      	mov	r3, r0
 8009834:	4618      	mov	r0, r3
 8009836:	f7f7 fa67 	bl	8000d08 <__aeabi_ui2f>
 800983a:	4602      	mov	r2, r0
 800983c:	4b1c      	ldr	r3, [pc, #112]	; (80098b0 <evaluateCommand+0xd38>)
 800983e:	601a      	str	r2, [r3, #0]
					posholdPID_PARAM.kP /= 100;
 8009840:	4b1b      	ldr	r3, [pc, #108]	; (80098b0 <evaluateCommand+0xd38>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4917      	ldr	r1, [pc, #92]	; (80098a4 <evaluateCommand+0xd2c>)
 8009846:	4618      	mov	r0, r3
 8009848:	f7f7 fb6a 	bl	8000f20 <__aeabi_fdiv>
 800984c:	4603      	mov	r3, r0
 800984e:	461a      	mov	r2, r3
 8009850:	4b17      	ldr	r3, [pc, #92]	; (80098b0 <evaluateCommand+0xd38>)
 8009852:	601a      	str	r2, [r3, #0]

					posholdPID_PARAM.kI = (float) read16();
 8009854:	f7fe ffc4 	bl	80087e0 <read16>
 8009858:	4603      	mov	r3, r0
 800985a:	4618      	mov	r0, r3
 800985c:	f7f7 fa54 	bl	8000d08 <__aeabi_ui2f>
 8009860:	4602      	mov	r2, r0
 8009862:	4b13      	ldr	r3, [pc, #76]	; (80098b0 <evaluateCommand+0xd38>)
 8009864:	605a      	str	r2, [r3, #4]
					posholdPID_PARAM.kI /= 100;
 8009866:	4b12      	ldr	r3, [pc, #72]	; (80098b0 <evaluateCommand+0xd38>)
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	490e      	ldr	r1, [pc, #56]	; (80098a4 <evaluateCommand+0xd2c>)
 800986c:	4618      	mov	r0, r3
 800986e:	f7f7 fb57 	bl	8000f20 <__aeabi_fdiv>
 8009872:	4603      	mov	r3, r0
 8009874:	461a      	mov	r2, r3
 8009876:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <evaluateCommand+0xd38>)
 8009878:	605a      	str	r2, [r3, #4]

					posholdPID_PARAM.Imax = (float) read16();
 800987a:	f7fe ffb1 	bl	80087e0 <read16>
 800987e:	4603      	mov	r3, r0
 8009880:	4618      	mov	r0, r3
 8009882:	f7f7 fa41 	bl	8000d08 <__aeabi_ui2f>
 8009886:	4602      	mov	r2, r0
 8009888:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <evaluateCommand+0xd38>)
 800988a:	60da      	str	r2, [r3, #12]
					poshold_ratePID_PARAM.Imax = posholdPID_PARAM.Imax;
 800988c:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <evaluateCommand+0xd38>)
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	4a0a      	ldr	r2, [pc, #40]	; (80098bc <evaluateCommand+0xd44>)
 8009892:	60d3      	str	r3, [r2, #12]
					navPID_PARAM.Imax = posholdPID_PARAM.Imax;
 8009894:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <evaluateCommand+0xd38>)
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	4a0c      	ldr	r2, [pc, #48]	; (80098cc <evaluateCommand+0xd54>)
 800989a:	60d3      	str	r3, [r2, #12]
 800989c:	e09d      	b.n	80099da <evaluateCommand+0xe62>
 800989e:	bf00      	nop
 80098a0:	200009b0 	.word	0x200009b0
 80098a4:	42c80000 	.word	0x42c80000
 80098a8:	41200000 	.word	0x41200000
 80098ac:	20000e20 	.word	0x20000e20
 80098b0:	20000c64 	.word	0x20000c64
 80098b4:	3e19999a 	.word	0x3e19999a
 80098b8:	44fa0000 	.word	0x44fa0000
 80098bc:	20000b68 	.word	0x20000b68
 80098c0:	4059999a 	.word	0x4059999a
 80098c4:	3e0f5c29 	.word	0x3e0f5c29
 80098c8:	3d591687 	.word	0x3d591687
 80098cc:	20000b20 	.word	0x20000b20
 80098d0:	40200000 	.word	0x40200000
 80098d4:	3ea8f5c3 	.word	0x3ea8f5c3
				}else if(i == 1)
 80098d8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d13f      	bne.n	8009960 <evaluateCommand+0xde8>
				{
					poshold_ratePID_PARAM.kP = (float) read16();
 80098e0:	f7fe ff7e 	bl	80087e0 <read16>
 80098e4:	4603      	mov	r3, r0
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7f7 fa0e 	bl	8000d08 <__aeabi_ui2f>
 80098ec:	4602      	mov	r2, r0
 80098ee:	4b19      	ldr	r3, [pc, #100]	; (8009954 <evaluateCommand+0xddc>)
 80098f0:	601a      	str	r2, [r3, #0]
					poshold_ratePID_PARAM.kP /= 100;
 80098f2:	4b18      	ldr	r3, [pc, #96]	; (8009954 <evaluateCommand+0xddc>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4918      	ldr	r1, [pc, #96]	; (8009958 <evaluateCommand+0xde0>)
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7f7 fb11 	bl	8000f20 <__aeabi_fdiv>
 80098fe:	4603      	mov	r3, r0
 8009900:	461a      	mov	r2, r3
 8009902:	4b14      	ldr	r3, [pc, #80]	; (8009954 <evaluateCommand+0xddc>)
 8009904:	601a      	str	r2, [r3, #0]

					poshold_ratePID_PARAM.kI = (float) read16();
 8009906:	f7fe ff6b 	bl	80087e0 <read16>
 800990a:	4603      	mov	r3, r0
 800990c:	4618      	mov	r0, r3
 800990e:	f7f7 f9fb 	bl	8000d08 <__aeabi_ui2f>
 8009912:	4602      	mov	r2, r0
 8009914:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <evaluateCommand+0xddc>)
 8009916:	605a      	str	r2, [r3, #4]
					poshold_ratePID_PARAM.kI /= 100;
 8009918:	4b0e      	ldr	r3, [pc, #56]	; (8009954 <evaluateCommand+0xddc>)
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	490e      	ldr	r1, [pc, #56]	; (8009958 <evaluateCommand+0xde0>)
 800991e:	4618      	mov	r0, r3
 8009920:	f7f7 fafe 	bl	8000f20 <__aeabi_fdiv>
 8009924:	4603      	mov	r3, r0
 8009926:	461a      	mov	r2, r3
 8009928:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <evaluateCommand+0xddc>)
 800992a:	605a      	str	r2, [r3, #4]

					poshold_ratePID_PARAM.kD = (float) read16();
 800992c:	f7fe ff58 	bl	80087e0 <read16>
 8009930:	4603      	mov	r3, r0
 8009932:	4618      	mov	r0, r3
 8009934:	f7f7 f9e8 	bl	8000d08 <__aeabi_ui2f>
 8009938:	4602      	mov	r2, r0
 800993a:	4b06      	ldr	r3, [pc, #24]	; (8009954 <evaluateCommand+0xddc>)
 800993c:	609a      	str	r2, [r3, #8]
					poshold_ratePID_PARAM.kD /= 1000;
 800993e:	4b05      	ldr	r3, [pc, #20]	; (8009954 <evaluateCommand+0xddc>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	4906      	ldr	r1, [pc, #24]	; (800995c <evaluateCommand+0xde4>)
 8009944:	4618      	mov	r0, r3
 8009946:	f7f7 faeb 	bl	8000f20 <__aeabi_fdiv>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	4b01      	ldr	r3, [pc, #4]	; (8009954 <evaluateCommand+0xddc>)
 8009950:	609a      	str	r2, [r3, #8]
 8009952:	e042      	b.n	80099da <evaluateCommand+0xe62>
 8009954:	20000b68 	.word	0x20000b68
 8009958:	42c80000 	.word	0x42c80000
 800995c:	447a0000 	.word	0x447a0000


				}else if(i == 2)
 8009960:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009964:	2b02      	cmp	r3, #2
 8009966:	d138      	bne.n	80099da <evaluateCommand+0xe62>
				{
					navPID_PARAM.kP = (float) read16();
 8009968:	f7fe ff3a 	bl	80087e0 <read16>
 800996c:	4603      	mov	r3, r0
 800996e:	4618      	mov	r0, r3
 8009970:	f7f7 f9ca 	bl	8000d08 <__aeabi_ui2f>
 8009974:	4602      	mov	r2, r0
 8009976:	4bb5      	ldr	r3, [pc, #724]	; (8009c4c <evaluateCommand+0x10d4>)
 8009978:	601a      	str	r2, [r3, #0]
					navPID_PARAM.kP /= 100;
 800997a:	4bb4      	ldr	r3, [pc, #720]	; (8009c4c <evaluateCommand+0x10d4>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	49b4      	ldr	r1, [pc, #720]	; (8009c50 <evaluateCommand+0x10d8>)
 8009980:	4618      	mov	r0, r3
 8009982:	f7f7 facd 	bl	8000f20 <__aeabi_fdiv>
 8009986:	4603      	mov	r3, r0
 8009988:	461a      	mov	r2, r3
 800998a:	4bb0      	ldr	r3, [pc, #704]	; (8009c4c <evaluateCommand+0x10d4>)
 800998c:	601a      	str	r2, [r3, #0]

					navPID_PARAM.kI = (float) read16();
 800998e:	f7fe ff27 	bl	80087e0 <read16>
 8009992:	4603      	mov	r3, r0
 8009994:	4618      	mov	r0, r3
 8009996:	f7f7 f9b7 	bl	8000d08 <__aeabi_ui2f>
 800999a:	4602      	mov	r2, r0
 800999c:	4bab      	ldr	r3, [pc, #684]	; (8009c4c <evaluateCommand+0x10d4>)
 800999e:	605a      	str	r2, [r3, #4]
					navPID_PARAM.kI /= 100;
 80099a0:	4baa      	ldr	r3, [pc, #680]	; (8009c4c <evaluateCommand+0x10d4>)
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	49aa      	ldr	r1, [pc, #680]	; (8009c50 <evaluateCommand+0x10d8>)
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7f7 faba 	bl	8000f20 <__aeabi_fdiv>
 80099ac:	4603      	mov	r3, r0
 80099ae:	461a      	mov	r2, r3
 80099b0:	4ba6      	ldr	r3, [pc, #664]	; (8009c4c <evaluateCommand+0x10d4>)
 80099b2:	605a      	str	r2, [r3, #4]

					navPID_PARAM.kD = (float) read16();
 80099b4:	f7fe ff14 	bl	80087e0 <read16>
 80099b8:	4603      	mov	r3, r0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7f7 f9a4 	bl	8000d08 <__aeabi_ui2f>
 80099c0:	4602      	mov	r2, r0
 80099c2:	4ba2      	ldr	r3, [pc, #648]	; (8009c4c <evaluateCommand+0x10d4>)
 80099c4:	609a      	str	r2, [r3, #8]
					navPID_PARAM.kD /= 1000;
 80099c6:	4ba1      	ldr	r3, [pc, #644]	; (8009c4c <evaluateCommand+0x10d4>)
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	49a2      	ldr	r1, [pc, #648]	; (8009c54 <evaluateCommand+0x10dc>)
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7f7 faa7 	bl	8000f20 <__aeabi_fdiv>
 80099d2:	4603      	mov	r3, r0
 80099d4:	461a      	mov	r2, r3
 80099d6:	4b9d      	ldr	r3, [pc, #628]	; (8009c4c <evaluateCommand+0x10d4>)
 80099d8:	609a      	str	r2, [r3, #8]
				}

				pid.kp1[i] = (float) read16();
 80099da:	f7fe ff01 	bl	80087e0 <read16>
 80099de:	4603      	mov	r3, r0
 80099e0:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7f7 f98f 	bl	8000d08 <__aeabi_ui2f>
 80099ea:	4601      	mov	r1, r0
 80099ec:	4a9a      	ldr	r2, [pc, #616]	; (8009c58 <evaluateCommand+0x10e0>)
 80099ee:	1d23      	adds	r3, r4, #4
 80099f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kp1[i] /= 10;
 80099f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80099f8:	4a97      	ldr	r2, [pc, #604]	; (8009c58 <evaluateCommand+0x10e0>)
 80099fa:	3304      	adds	r3, #4
 80099fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a00:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a04:	4995      	ldr	r1, [pc, #596]	; (8009c5c <evaluateCommand+0x10e4>)
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7f7 fa8a 	bl	8000f20 <__aeabi_fdiv>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	4619      	mov	r1, r3
 8009a10:	4a91      	ldr	r2, [pc, #580]	; (8009c58 <evaluateCommand+0x10e0>)
 8009a12:	1d23      	adds	r3, r4, #4
 8009a14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki1[i] = (float) read16();
 8009a18:	f7fe fee2 	bl	80087e0 <read16>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7f7 f970 	bl	8000d08 <__aeabi_ui2f>
 8009a28:	4601      	mov	r1, r0
 8009a2a:	4a8b      	ldr	r2, [pc, #556]	; (8009c58 <evaluateCommand+0x10e0>)
 8009a2c:	f104 0310 	add.w	r3, r4, #16
 8009a30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki1[i] /= 10;
 8009a34:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009a38:	4a87      	ldr	r2, [pc, #540]	; (8009c58 <evaluateCommand+0x10e0>)
 8009a3a:	3310      	adds	r3, #16
 8009a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a40:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a44:	4985      	ldr	r1, [pc, #532]	; (8009c5c <evaluateCommand+0x10e4>)
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7f7 fa6a 	bl	8000f20 <__aeabi_fdiv>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	4619      	mov	r1, r3
 8009a50:	4a81      	ldr	r2, [pc, #516]	; (8009c58 <evaluateCommand+0x10e0>)
 8009a52:	f104 0310 	add.w	r3, r4, #16
 8009a56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kp2[i] = (float) read16();
 8009a5a:	f7fe fec1 	bl	80087e0 <read16>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7f7 f94f 	bl	8000d08 <__aeabi_ui2f>
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	4a7a      	ldr	r2, [pc, #488]	; (8009c58 <evaluateCommand+0x10e0>)
 8009a6e:	1da3      	adds	r3, r4, #6
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	6059      	str	r1, [r3, #4]
				pid.kp2[i] /= 10;
 8009a76:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009a7a:	4a77      	ldr	r2, [pc, #476]	; (8009c58 <evaluateCommand+0x10e0>)
 8009a7c:	3306      	adds	r3, #6
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a88:	4974      	ldr	r1, [pc, #464]	; (8009c5c <evaluateCommand+0x10e4>)
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7f7 fa48 	bl	8000f20 <__aeabi_fdiv>
 8009a90:	4603      	mov	r3, r0
 8009a92:	4619      	mov	r1, r3
 8009a94:	4a70      	ldr	r2, [pc, #448]	; (8009c58 <evaluateCommand+0x10e0>)
 8009a96:	1da3      	adds	r3, r4, #6
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	6059      	str	r1, [r3, #4]
				pid.ki2[i] = (float) read16();
 8009a9e:	f7fe fe9f 	bl	80087e0 <read16>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7f7 f92d 	bl	8000d08 <__aeabi_ui2f>
 8009aae:	4601      	mov	r1, r0
 8009ab0:	4a69      	ldr	r2, [pc, #420]	; (8009c58 <evaluateCommand+0x10e0>)
 8009ab2:	f104 0312 	add.w	r3, r4, #18
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	6059      	str	r1, [r3, #4]
				pid.ki2[i] /= 10;
 8009abc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009ac0:	4a65      	ldr	r2, [pc, #404]	; (8009c58 <evaluateCommand+0x10e0>)
 8009ac2:	3312      	adds	r3, #18
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009ace:	4963      	ldr	r1, [pc, #396]	; (8009c5c <evaluateCommand+0x10e4>)
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7f7 fa25 	bl	8000f20 <__aeabi_fdiv>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4a5f      	ldr	r2, [pc, #380]	; (8009c58 <evaluateCommand+0x10e0>)
 8009adc:	f104 0312 	add.w	r3, r4, #18
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	6059      	str	r1, [r3, #4]
				pid.kd2[i] = (float) read16();
 8009ae6:	f7fe fe7b 	bl	80087e0 <read16>
 8009aea:	4603      	mov	r3, r0
 8009aec:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7f7 f909 	bl	8000d08 <__aeabi_ui2f>
 8009af6:	4601      	mov	r1, r0
 8009af8:	4a57      	ldr	r2, [pc, #348]	; (8009c58 <evaluateCommand+0x10e0>)
 8009afa:	f104 031c 	add.w	r3, r4, #28
 8009afe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kd2[i] /= 100;
 8009b02:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009b06:	4a54      	ldr	r2, [pc, #336]	; (8009c58 <evaluateCommand+0x10e0>)
 8009b08:	331c      	adds	r3, #28
 8009b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b0e:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b12:	494f      	ldr	r1, [pc, #316]	; (8009c50 <evaluateCommand+0x10d8>)
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7f7 fa03 	bl	8000f20 <__aeabi_fdiv>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4a4e      	ldr	r2, [pc, #312]	; (8009c58 <evaluateCommand+0x10e0>)
 8009b20:	f104 031c 	add.w	r3, r4, #28
 8009b24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				pid.kp_rate[i] = (float) read16();
 8009b28:	f7fe fe5a 	bl	80087e0 <read16>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f7 f8e8 	bl	8000d08 <__aeabi_ui2f>
 8009b38:	4601      	mov	r1, r0
 8009b3a:	4a47      	ldr	r2, [pc, #284]	; (8009c58 <evaluateCommand+0x10e0>)
 8009b3c:	f104 030a 	add.w	r3, r4, #10
 8009b40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kp_rate[i] /= 10;
 8009b44:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009b48:	4a43      	ldr	r2, [pc, #268]	; (8009c58 <evaluateCommand+0x10e0>)
 8009b4a:	330a      	adds	r3, #10
 8009b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b50:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b54:	4941      	ldr	r1, [pc, #260]	; (8009c5c <evaluateCommand+0x10e4>)
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7f7 f9e2 	bl	8000f20 <__aeabi_fdiv>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4a3d      	ldr	r2, [pc, #244]	; (8009c58 <evaluateCommand+0x10e0>)
 8009b62:	f104 030a 	add.w	r3, r4, #10
 8009b66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki_rate[i] = (float) read16();
 8009b6a:	f7fe fe39 	bl	80087e0 <read16>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7f7 f8c7 	bl	8000d08 <__aeabi_ui2f>
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	4a36      	ldr	r2, [pc, #216]	; (8009c58 <evaluateCommand+0x10e0>)
 8009b7e:	f104 0316 	add.w	r3, r4, #22
 8009b82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki_rate[i] /= 10;
 8009b86:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009b8a:	4a33      	ldr	r2, [pc, #204]	; (8009c58 <evaluateCommand+0x10e0>)
 8009b8c:	3316      	adds	r3, #22
 8009b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b92:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b96:	4931      	ldr	r1, [pc, #196]	; (8009c5c <evaluateCommand+0x10e4>)
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7f7 f9c1 	bl	8000f20 <__aeabi_fdiv>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4a2d      	ldr	r2, [pc, #180]	; (8009c58 <evaluateCommand+0x10e0>)
 8009ba4:	f104 0316 	add.w	r3, r4, #22
 8009ba8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kd_rate[i] = (float) read16();
 8009bac:	f7fe fe18 	bl	80087e0 <read16>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7f7 f8a6 	bl	8000d08 <__aeabi_ui2f>
 8009bbc:	4601      	mov	r1, r0
 8009bbe:	4a26      	ldr	r2, [pc, #152]	; (8009c58 <evaluateCommand+0x10e0>)
 8009bc0:	f104 031e 	add.w	r3, r4, #30
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	6059      	str	r1, [r3, #4]
				pid.kd_rate[i] /= 100;
 8009bca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009bce:	4a22      	ldr	r2, [pc, #136]	; (8009c58 <evaluateCommand+0x10e0>)
 8009bd0:	331e      	adds	r3, #30
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009bdc:	491c      	ldr	r1, [pc, #112]	; (8009c50 <evaluateCommand+0x10d8>)
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7f7 f99e 	bl	8000f20 <__aeabi_fdiv>
 8009be4:	4603      	mov	r3, r0
 8009be6:	4619      	mov	r1, r3
 8009be8:	4a1b      	ldr	r2, [pc, #108]	; (8009c58 <evaluateCommand+0x10e0>)
 8009bea:	f104 031e 	add.w	r3, r4, #30
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	6059      	str	r1, [r3, #4]
			for(i=0; i < 3; i++)
 8009bf4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8009bfe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	f67f ae0f 	bls.w	8009826 <evaluateCommand+0xcae>
			}
			break;
 8009c08:	e23a      	b.n	800a080 <evaluateCommand+0x1508>

		case MSP_SET_MOTOR:
			M_motor[0] = read16();
 8009c0a:	f7fe fde9 	bl	80087e0 <read16>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	b21a      	sxth	r2, r3
 8009c12:	4b13      	ldr	r3, [pc, #76]	; (8009c60 <evaluateCommand+0x10e8>)
 8009c14:	801a      	strh	r2, [r3, #0]
			M_motor[1] = read16();
 8009c16:	f7fe fde3 	bl	80087e0 <read16>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	b21a      	sxth	r2, r3
 8009c1e:	4b10      	ldr	r3, [pc, #64]	; (8009c60 <evaluateCommand+0x10e8>)
 8009c20:	805a      	strh	r2, [r3, #2]
			M_motor[2] = read16();
 8009c22:	f7fe fddd 	bl	80087e0 <read16>
 8009c26:	4603      	mov	r3, r0
 8009c28:	b21a      	sxth	r2, r3
 8009c2a:	4b0d      	ldr	r3, [pc, #52]	; (8009c60 <evaluateCommand+0x10e8>)
 8009c2c:	809a      	strh	r2, [r3, #4]
			M_motor[3] = read16();
 8009c2e:	f7fe fdd7 	bl	80087e0 <read16>
 8009c32:	4603      	mov	r3, r0
 8009c34:	b21a      	sxth	r2, r3
 8009c36:	4b0a      	ldr	r3, [pc, #40]	; (8009c60 <evaluateCommand+0x10e8>)
 8009c38:	80da      	strh	r2, [r3, #6]
			Manual_Motor_flag = true;
 8009c3a:	4b0a      	ldr	r3, [pc, #40]	; (8009c64 <evaluateCommand+0x10ec>)
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	701a      	strb	r2, [r3, #0]
			time_manual_motor = micros();
 8009c40:	f7f7 fc44 	bl	80014cc <micros>
 8009c44:	4602      	mov	r2, r0
 8009c46:	4b08      	ldr	r3, [pc, #32]	; (8009c68 <evaluateCommand+0x10f0>)
 8009c48:	601a      	str	r2, [r3, #0]
			break;
 8009c4a:	e219      	b.n	800a080 <evaluateCommand+0x1508>
 8009c4c:	20000b20 	.word	0x20000b20
 8009c50:	42c80000 	.word	0x42c80000
 8009c54:	447a0000 	.word	0x447a0000
 8009c58:	200009b0 	.word	0x200009b0
 8009c5c:	41200000 	.word	0x41200000
 8009c60:	20000cb8 	.word	0x20000cb8
 8009c64:	200002e8 	.word	0x200002e8
 8009c68:	20000cc4 	.word	0x20000cc4

		case MSP_RESET:
			Error.error = 0;
 8009c6c:	4ba2      	ldr	r3, [pc, #648]	; (8009ef8 <evaluateCommand+0x1380>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	701a      	strb	r2, [r3, #0]
			ledOff(RGB_RED);
 8009c72:	2002      	movs	r0, #2
 8009c74:	f001 fda0 	bl	800b7b8 <ledOff>
			cycleTimeMax = 0;
 8009c78:	4ba0      	ldr	r3, [pc, #640]	; (8009efc <evaluateCommand+0x1384>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	801a      	strh	r2, [r3, #0]
			cycleTimeMin = 65535;
 8009c7e:	4ba0      	ldr	r3, [pc, #640]	; (8009f00 <evaluateCommand+0x1388>)
 8009c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c84:	801a      	strh	r2, [r3, #0]
			f.mag_reset = 1;
 8009c86:	4b9f      	ldr	r3, [pc, #636]	; (8009f04 <evaluateCommand+0x138c>)
 8009c88:	2201      	movs	r2, #1
 8009c8a:	769a      	strb	r2, [r3, #26]
			ledToggle(RGB_GREEN);
 8009c8c:	2003      	movs	r0, #3
 8009c8e:	f001 fdb3 	bl	800b7f8 <ledToggle>
			break;
 8009c92:	e1f5      	b.n	800a080 <evaluateCommand+0x1508>
			int16_t angle[2];//17
			int16_t mag_heading;//19
			int16_t motor[4];//74
		} debug_t;

		debug_t.roll     = RC.rcCommand[ROLL];
 8009c94:	4b9c      	ldr	r3, [pc, #624]	; (8009f08 <evaluateCommand+0x1390>)
 8009c96:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	80bb      	strh	r3, [r7, #4]
		debug_t.pitch    = RC.rcCommand[PITCH];
 8009c9e:	4b9a      	ldr	r3, [pc, #616]	; (8009f08 <evaluateCommand+0x1390>)
 8009ca0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	80fb      	strh	r3, [r7, #6]
		debug_t.yaw      = RC.rcCommand[YAW];
 8009ca8:	4b97      	ldr	r3, [pc, #604]	; (8009f08 <evaluateCommand+0x1390>)
 8009caa:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	813b      	strh	r3, [r7, #8]
		debug_t.throttle = RC.rcCommand[THROTTLE];
 8009cb2:	4b95      	ldr	r3, [pc, #596]	; (8009f08 <evaluateCommand+0x1390>)
 8009cb4:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	817b      	strh	r3, [r7, #10]
		debug_t.aux1     = RC.rcCommand[AUX1];
 8009cbc:	4b92      	ldr	r3, [pc, #584]	; (8009f08 <evaluateCommand+0x1390>)
 8009cbe:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	81fb      	strh	r3, [r7, #14]
		debug_t.gear     = RC.rcCommand[GEAR];
 8009cc6:	4b90      	ldr	r3, [pc, #576]	; (8009f08 <evaluateCommand+0x1390>)
 8009cc8:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	81bb      	strh	r3, [r7, #12]
		//debug_t.ArmedTime    = armedTime;
		debug_t.cycleTime    = loopTime;
 8009cd0:	4b8e      	ldr	r3, [pc, #568]	; (8009f0c <evaluateCommand+0x1394>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	613b      	str	r3, [r7, #16]
		debug_t.error        = Error.error;
 8009cd6:	4b88      	ldr	r3, [pc, #544]	; (8009ef8 <evaluateCommand+0x1380>)
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	82bb      	strh	r3, [r7, #20]
		if(f.ARMED) tmp |= 1<<BOXARM;
 8009cde:	4b89      	ldr	r3, [pc, #548]	; (8009f04 <evaluateCommand+0x138c>)
 8009ce0:	785b      	ldrb	r3, [r3, #1]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d005      	beq.n	8009cf2 <evaluateCommand+0x117a>
 8009ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cea:	f043 0301 	orr.w	r3, r3, #1
 8009cee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8009cf2:	4b84      	ldr	r3, [pc, #528]	; (8009f04 <evaluateCommand+0x138c>)
 8009cf4:	7b9b      	ldrb	r3, [r3, #14]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d005      	beq.n	8009d06 <evaluateCommand+0x118e>
 8009cfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cfe:	f043 0302 	orr.w	r3, r3, #2
 8009d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ACRO_MODE) tmp |= 1<<BOXACRO_MODE;
 8009d06:	4b7f      	ldr	r3, [pc, #508]	; (8009f04 <evaluateCommand+0x138c>)
 8009d08:	79db      	ldrb	r3, [r3, #7]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d005      	beq.n	8009d1a <evaluateCommand+0x11a2>
 8009d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d12:	f043 0304 	orr.w	r3, r3, #4
 8009d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ANGLE_MODE) tmp |= 1<<BOXANGLE_MODE;
 8009d1a:	4b7a      	ldr	r3, [pc, #488]	; (8009f04 <evaluateCommand+0x138c>)
 8009d1c:	795b      	ldrb	r3, [r3, #5]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d005      	beq.n	8009d2e <evaluateCommand+0x11b6>
 8009d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d26:	f043 0308 	orr.w	r3, r3, #8
 8009d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.GPS_HOLD_MODE) tmp |= 1<<BOXGPS_MODE;
 8009d2e:	4b75      	ldr	r3, [pc, #468]	; (8009f04 <evaluateCommand+0x138c>)
 8009d30:	7b5b      	ldrb	r3, [r3, #13]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d005      	beq.n	8009d42 <evaluateCommand+0x11ca>
 8009d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_ACC) tmp |= 1<<BOXCALIBRATE_ACC;
 8009d42:	4b70      	ldr	r3, [pc, #448]	; (8009f04 <evaluateCommand+0x138c>)
 8009d44:	791b      	ldrb	r3, [r3, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d005      	beq.n	8009d56 <evaluateCommand+0x11de>
 8009d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d4e:	f043 0310 	orr.w	r3, r3, #16
 8009d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_MAG) tmp |= 1<<BOXCALIBRATE_MAG;
 8009d56:	4b6b      	ldr	r3, [pc, #428]	; (8009f04 <evaluateCommand+0x138c>)
 8009d58:	7cdb      	ldrb	r3, [r3, #19]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d005      	beq.n	8009d6a <evaluateCommand+0x11f2>
 8009d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d62:	f043 0320 	orr.w	r3, r3, #32
 8009d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		debug_t.flag         = tmp;
 8009d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	82fb      	strh	r3, [r7, #22]
		debug_t.alt = (int16_t) alt.EstAlt;
 8009d72:	4b67      	ldr	r3, [pc, #412]	; (8009f10 <evaluateCommand+0x1398>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	b21b      	sxth	r3, r3
 8009d78:	833b      	strh	r3, [r7, #24]
		debug_t.VBAT = 100;//BAT.VBAT;
 8009d7a:	2364      	movs	r3, #100	; 0x64
 8009d7c:	837b      	strh	r3, [r7, #26]
		debug_t.Temp = imu.Temp*10;
 8009d7e:	4b65      	ldr	r3, [pc, #404]	; (8009f14 <evaluateCommand+0x139c>)
 8009d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d82:	4965      	ldr	r1, [pc, #404]	; (8009f18 <evaluateCommand+0x13a0>)
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7f7 f817 	bl	8000db8 <__aeabi_fmul>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7f7 f9ef 	bl	8001170 <__aeabi_f2iz>
 8009d92:	4603      	mov	r3, r0
 8009d94:	b21b      	sxth	r3, r3
 8009d96:	83bb      	strh	r3, [r7, #28]

		debug_t.angle[ROLL] = imu.AHRS[ROLL]*10;
 8009d98:	4b5e      	ldr	r3, [pc, #376]	; (8009f14 <evaluateCommand+0x139c>)
 8009d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d9e:	495e      	ldr	r1, [pc, #376]	; (8009f18 <evaluateCommand+0x13a0>)
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7f7 f809 	bl	8000db8 <__aeabi_fmul>
 8009da6:	4603      	mov	r3, r0
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7f7 f9e1 	bl	8001170 <__aeabi_f2iz>
 8009dae:	4603      	mov	r3, r0
 8009db0:	b21b      	sxth	r3, r3
 8009db2:	83fb      	strh	r3, [r7, #30]
		debug_t.angle[PITCH] = imu.AHRS[PITCH]*10;
 8009db4:	4b57      	ldr	r3, [pc, #348]	; (8009f14 <evaluateCommand+0x139c>)
 8009db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dba:	4957      	ldr	r1, [pc, #348]	; (8009f18 <evaluateCommand+0x13a0>)
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7f6 fffb 	bl	8000db8 <__aeabi_fmul>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7f7 f9d3 	bl	8001170 <__aeabi_f2iz>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	b21b      	sxth	r3, r3
 8009dce:	843b      	strh	r3, [r7, #32]
		debug_t.mag_heading = (int16_t)imu.actual_compass_heading*10;
 8009dd0:	4b50      	ldr	r3, [pc, #320]	; (8009f14 <evaluateCommand+0x139c>)
 8009dd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	461a      	mov	r2, r3
 8009dda:	0092      	lsls	r2, r2, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	b21b      	sxth	r3, r3
 8009de4:	847b      	strh	r3, [r7, #34]	; 0x22

		debug_t.motor[0] = motor[0];
 8009de6:	4b4d      	ldr	r3, [pc, #308]	; (8009f1c <evaluateCommand+0x13a4>)
 8009de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dec:	84bb      	strh	r3, [r7, #36]	; 0x24
		debug_t.motor[1] = motor[1];
 8009dee:	4b4b      	ldr	r3, [pc, #300]	; (8009f1c <evaluateCommand+0x13a4>)
 8009df0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009df4:	84fb      	strh	r3, [r7, #38]	; 0x26
		debug_t.motor[2] = motor[2];
 8009df6:	4b49      	ldr	r3, [pc, #292]	; (8009f1c <evaluateCommand+0x13a4>)
 8009df8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009dfc:	853b      	strh	r3, [r7, #40]	; 0x28
		debug_t.motor[3] = motor[3];
 8009dfe:	4b47      	ldr	r3, [pc, #284]	; (8009f1c <evaluateCommand+0x13a4>)
 8009e00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009e04:	857b      	strh	r3, [r7, #42]	; 0x2a

		s_struct((uint8_t*)&debug_t, 41);
 8009e06:	1d3b      	adds	r3, r7, #4
 8009e08:	2129      	movs	r1, #41	; 0x29
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe fd63 	bl	80088d6 <s_struct>
		}
		break;
 8009e10:	e136      	b.n	800a080 <evaluateCommand+0x1508>

		case MSP_ACC_CALIBRATION:
			if(!f.ARMED)
 8009e12:	4b3c      	ldr	r3, [pc, #240]	; (8009f04 <evaluateCommand+0x138c>)
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f040 812f 	bne.w	800a07a <evaluateCommand+0x1502>
			{
				calibratingA=512;
 8009e1c:	4b40      	ldr	r3, [pc, #256]	; (8009f20 <evaluateCommand+0x13a8>)
 8009e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e22:	801a      	strh	r2, [r3, #0]
				f.CALIBRATE_ACC = 1;
 8009e24:	4b37      	ldr	r3, [pc, #220]	; (8009f04 <evaluateCommand+0x138c>)
 8009e26:	2201      	movs	r2, #1
 8009e28:	711a      	strb	r2, [r3, #4]
			}
			break;
 8009e2a:	e126      	b.n	800a07a <evaluateCommand+0x1502>

		case MSP_MAG_CALIBRATION:
			if(!f.ARMED)
 8009e2c:	4b35      	ldr	r3, [pc, #212]	; (8009f04 <evaluateCommand+0x138c>)
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 8124 	bne.w	800a07e <evaluateCommand+0x1506>
			{
				f.CALIBRATE_MAG=!f.CALIBRATE_MAG;
 8009e36:	4b33      	ldr	r3, [pc, #204]	; (8009f04 <evaluateCommand+0x138c>)
 8009e38:	7cdb      	ldrb	r3, [r3, #19]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	bf0c      	ite	eq
 8009e3e:	2301      	moveq	r3, #1
 8009e40:	2300      	movne	r3, #0
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	4b2f      	ldr	r3, [pc, #188]	; (8009f04 <evaluateCommand+0x138c>)
 8009e48:	74da      	strb	r2, [r3, #19]
			}
			break;
 8009e4a:	e118      	b.n	800a07e <evaluateCommand+0x1506>

		case MSP_TRIM_UP:
			MSP_TRIM[PITCH] += 1;
 8009e4c:	4b35      	ldr	r3, [pc, #212]	; (8009f24 <evaluateCommand+0x13ac>)
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	3301      	adds	r3, #1
 8009e52:	4a34      	ldr	r2, [pc, #208]	; (8009f24 <evaluateCommand+0x13ac>)
 8009e54:	6053      	str	r3, [r2, #4]
			break;
 8009e56:	e113      	b.n	800a080 <evaluateCommand+0x1508>

		case MSP_TRIM_DOWN:
			MSP_TRIM[PITCH] -= 1;
 8009e58:	4b32      	ldr	r3, [pc, #200]	; (8009f24 <evaluateCommand+0x13ac>)
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	4a31      	ldr	r2, [pc, #196]	; (8009f24 <evaluateCommand+0x13ac>)
 8009e60:	6053      	str	r3, [r2, #4]
			break;
 8009e62:	e10d      	b.n	800a080 <evaluateCommand+0x1508>

		case MSP_TRIM_LEFT:
			MSP_TRIM[ROLL] -= 1;
 8009e64:	4b2f      	ldr	r3, [pc, #188]	; (8009f24 <evaluateCommand+0x13ac>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	4a2e      	ldr	r2, [pc, #184]	; (8009f24 <evaluateCommand+0x13ac>)
 8009e6c:	6013      	str	r3, [r2, #0]
			break;
 8009e6e:	e107      	b.n	800a080 <evaluateCommand+0x1508>

		case MSP_TRIM_RIGHT:
			MSP_TRIM[ROLL] += 1;
 8009e70:	4b2c      	ldr	r3, [pc, #176]	; (8009f24 <evaluateCommand+0x13ac>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	3301      	adds	r3, #1
 8009e76:	4a2b      	ldr	r2, [pc, #172]	; (8009f24 <evaluateCommand+0x13ac>)
 8009e78:	6013      	str	r3, [r2, #0]
			break;
 8009e7a:	e101      	b.n	800a080 <evaluateCommand+0x1508>

		case TELEMERY_PID_SAVE:
			ledToggle(RGB_BLUE);
 8009e7c:	2004      	movs	r0, #4
 8009e7e:	f001 fcbb 	bl	800b7f8 <ledToggle>
			writeFloat(0, posholdPID_PARAM.kP);
 8009e82:	4b29      	ldr	r3, [pc, #164]	; (8009f28 <evaluateCommand+0x13b0>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4619      	mov	r1, r3
 8009e88:	2000      	movs	r0, #0
 8009e8a:	f7f7 fe07 	bl	8001a9c <writeFloat>
			writeFloat(4, posholdPID_PARAM.kI);
 8009e8e:	4b26      	ldr	r3, [pc, #152]	; (8009f28 <evaluateCommand+0x13b0>)
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	4619      	mov	r1, r3
 8009e94:	2004      	movs	r0, #4
 8009e96:	f7f7 fe01 	bl	8001a9c <writeFloat>
			writeFloat(8, poshold_ratePID_PARAM.kP);
 8009e9a:	4b24      	ldr	r3, [pc, #144]	; (8009f2c <evaluateCommand+0x13b4>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	2008      	movs	r0, #8
 8009ea2:	f7f7 fdfb 	bl	8001a9c <writeFloat>
			writeFloat(12, poshold_ratePID_PARAM.kI);
 8009ea6:	4b21      	ldr	r3, [pc, #132]	; (8009f2c <evaluateCommand+0x13b4>)
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	200c      	movs	r0, #12
 8009eae:	f7f7 fdf5 	bl	8001a9c <writeFloat>
			writeFloat(16, poshold_ratePID_PARAM.kD);
 8009eb2:	4b1e      	ldr	r3, [pc, #120]	; (8009f2c <evaluateCommand+0x13b4>)
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	2010      	movs	r0, #16
 8009eba:	f7f7 fdef 	bl	8001a9c <writeFloat>
			writeFloat(20, navPID_PARAM.kP);
 8009ebe:	4b1c      	ldr	r3, [pc, #112]	; (8009f30 <evaluateCommand+0x13b8>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	2014      	movs	r0, #20
 8009ec6:	f7f7 fde9 	bl	8001a9c <writeFloat>
			writeFloat(24, navPID_PARAM.kI);
 8009eca:	4b19      	ldr	r3, [pc, #100]	; (8009f30 <evaluateCommand+0x13b8>)
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	2018      	movs	r0, #24
 8009ed2:	f7f7 fde3 	bl	8001a9c <writeFloat>
			writeFloat(28, navPID_PARAM.kD);
 8009ed6:	4b16      	ldr	r3, [pc, #88]	; (8009f30 <evaluateCommand+0x13b8>)
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	4619      	mov	r1, r3
 8009edc:	201c      	movs	r0, #28
 8009ede:	f7f7 fddd 	bl	8001a9c <writeFloat>
			writeFloat(32, posholdPID_PARAM.Imax);
 8009ee2:	4b11      	ldr	r3, [pc, #68]	; (8009f28 <evaluateCommand+0x13b0>)
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	2020      	movs	r0, #32
 8009eea:	f7f7 fdd7 	bl	8001a9c <writeFloat>
			for(int i = 0; i < 3; i++){
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ef4:	e096      	b.n	800a024 <evaluateCommand+0x14ac>
 8009ef6:	bf00      	nop
 8009ef8:	20000acc 	.word	0x20000acc
 8009efc:	20000264 	.word	0x20000264
 8009f00:	20000000 	.word	0x20000000
 8009f04:	20000ed4 	.word	0x20000ed4
 8009f08:	20000d40 	.word	0x20000d40
 8009f0c:	20000260 	.word	0x20000260
 8009f10:	20000ef0 	.word	0x20000ef0
 8009f14:	20000e20 	.word	0x20000e20
 8009f18:	41200000 	.word	0x41200000
 8009f1c:	20000cc8 	.word	0x20000cc8
 8009f20:	20000008 	.word	0x20000008
 8009f24:	20000664 	.word	0x20000664
 8009f28:	20000c64 	.word	0x20000c64
 8009f2c:	20000b68 	.word	0x20000b68
 8009f30:	20000b20 	.word	0x20000b20
				writeFloat( 36+(4*i), pid.kp1[i]);
 8009f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f38:	3309      	adds	r3, #9
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	4a52      	ldr	r2, [pc, #328]	; (800a088 <evaluateCommand+0x1510>)
 8009f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f44:	3304      	adds	r3, #4
 8009f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	f7f7 fda6 	bl	8001a9c <writeFloat>
				writeFloat( 48+(4*i), pid.ki1[i]);
 8009f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f54:	330c      	adds	r3, #12
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	4a4b      	ldr	r2, [pc, #300]	; (800a088 <evaluateCommand+0x1510>)
 8009f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f60:	3310      	adds	r3, #16
 8009f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f66:	4619      	mov	r1, r3
 8009f68:	f7f7 fd98 	bl	8001a9c <writeFloat>
				writeFloat( 60+(4*i), pid.kp2[i]);
 8009f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f70:	330f      	adds	r3, #15
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4618      	mov	r0, r3
 8009f76:	4a44      	ldr	r2, [pc, #272]	; (800a088 <evaluateCommand+0x1510>)
 8009f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f7c:	3306      	adds	r3, #6
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	4619      	mov	r1, r3
 8009f86:	f7f7 fd89 	bl	8001a9c <writeFloat>
				writeFloat( 72+(4*i), pid.ki2[i]);
 8009f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f8e:	3312      	adds	r3, #18
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4618      	mov	r0, r3
 8009f94:	4a3c      	ldr	r2, [pc, #240]	; (800a088 <evaluateCommand+0x1510>)
 8009f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f9a:	3312      	adds	r3, #18
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	f7f7 fd7a 	bl	8001a9c <writeFloat>
				writeFloat( 84+(4*i), pid.kd2[i]);
 8009fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fac:	3315      	adds	r3, #21
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	4a35      	ldr	r2, [pc, #212]	; (800a088 <evaluateCommand+0x1510>)
 8009fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fb8:	331c      	adds	r3, #28
 8009fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	f7f7 fd6c 	bl	8001a9c <writeFloat>

				writeFloat( 96+(4*i), pid.kp_rate[i]);
 8009fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fc8:	3318      	adds	r3, #24
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4618      	mov	r0, r3
 8009fce:	4a2e      	ldr	r2, [pc, #184]	; (800a088 <evaluateCommand+0x1510>)
 8009fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fd4:	330a      	adds	r3, #10
 8009fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	f7f7 fd5e 	bl	8001a9c <writeFloat>
				writeFloat(108+(4*i), pid.ki_rate[i]);
 8009fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fe4:	331b      	adds	r3, #27
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4618      	mov	r0, r3
 8009fea:	4a27      	ldr	r2, [pc, #156]	; (800a088 <evaluateCommand+0x1510>)
 8009fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ff0:	3316      	adds	r3, #22
 8009ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	f7f7 fd50 	bl	8001a9c <writeFloat>
				writeFloat(120+(4*i), pid.kd_rate[i]);
 8009ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a000:	331e      	adds	r3, #30
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4618      	mov	r0, r3
 800a006:	4a20      	ldr	r2, [pc, #128]	; (800a088 <evaluateCommand+0x1510>)
 800a008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a00c:	331e      	adds	r3, #30
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	4619      	mov	r1, r3
 800a016:	f7f7 fd41 	bl	8001a9c <writeFloat>
			for(int i = 0; i < 3; i++){
 800a01a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a01e:	3301      	adds	r3, #1
 800a020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a028:	2b02      	cmp	r3, #2
 800a02a:	dd83      	ble.n	8009f34 <evaluateCommand+0x13bc>
			}
			writeFloat(132, magBias[0]);
 800a02c:	4b17      	ldr	r3, [pc, #92]	; (800a08c <evaluateCommand+0x1514>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4619      	mov	r1, r3
 800a032:	2084      	movs	r0, #132	; 0x84
 800a034:	f7f7 fd32 	bl	8001a9c <writeFloat>
			writeFloat(136, magBias[1]);
 800a038:	4b14      	ldr	r3, [pc, #80]	; (800a08c <evaluateCommand+0x1514>)
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	4619      	mov	r1, r3
 800a03e:	2088      	movs	r0, #136	; 0x88
 800a040:	f7f7 fd2c 	bl	8001a9c <writeFloat>
			writeFloat(140, magBias[2]);
 800a044:	4b11      	ldr	r3, [pc, #68]	; (800a08c <evaluateCommand+0x1514>)
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	4619      	mov	r1, r3
 800a04a:	208c      	movs	r0, #140	; 0x8c
 800a04c:	f7f7 fd26 	bl	8001a9c <writeFloat>
			writeFloat(144, magScale[0]);
 800a050:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <evaluateCommand+0x1518>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4619      	mov	r1, r3
 800a056:	2090      	movs	r0, #144	; 0x90
 800a058:	f7f7 fd20 	bl	8001a9c <writeFloat>
			writeFloat(148, magScale[1]);
 800a05c:	4b0c      	ldr	r3, [pc, #48]	; (800a090 <evaluateCommand+0x1518>)
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	4619      	mov	r1, r3
 800a062:	2094      	movs	r0, #148	; 0x94
 800a064:	f7f7 fd1a 	bl	8001a9c <writeFloat>
			writeFloat(152, magScale[2]);
 800a068:	4b09      	ldr	r3, [pc, #36]	; (800a090 <evaluateCommand+0x1518>)
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	4619      	mov	r1, r3
 800a06e:	2098      	movs	r0, #152	; 0x98
 800a070:	f7f7 fd14 	bl	8001a9c <writeFloat>
			break;
 800a074:	e004      	b.n	800a080 <evaluateCommand+0x1508>

		default:
			//headSerialError();
			//tailSerialReply();
			break;
 800a076:	bf00      	nop
 800a078:	e002      	b.n	800a080 <evaluateCommand+0x1508>
			break;
 800a07a:	bf00      	nop
 800a07c:	e000      	b.n	800a080 <evaluateCommand+0x1508>
			break;
 800a07e:	bf00      	nop
	}

}
 800a080:	bf00      	nop
 800a082:	37ac      	adds	r7, #172	; 0xac
 800a084:	46bd      	mov	sp, r7
 800a086:	bd90      	pop	{r4, r7, pc}
 800a088:	200009b0 	.word	0x200009b0
 800a08c:	20000344 	.word	0x20000344
 800a090:	20000f00 	.word	0x20000f00

0800a094 <SerialSerialize>:

void SerialSerialize(uint8_t port,uint8_t a) {
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	460a      	mov	r2, r1
 800a09e:	71fb      	strb	r3, [r7, #7]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	71bb      	strb	r3, [r7, #6]
	uint8_t t = serialHeadTX[port];
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	4a0e      	ldr	r2, [pc, #56]	; (800a0e0 <SerialSerialize+0x4c>)
 800a0a8:	5cd3      	ldrb	r3, [r2, r3]
 800a0aa:	73fb      	strb	r3, [r7, #15]
	if (++t >= TX_BUFFER_SIZE) t = 0;
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	73fb      	strb	r3, [r7, #15]
 800a0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	da01      	bge.n	800a0be <SerialSerialize+0x2a>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
	serialBufferTX[t][port] = a;
 800a0be:	7bfa      	ldrb	r2, [r7, #15]
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	4908      	ldr	r1, [pc, #32]	; (800a0e4 <SerialSerialize+0x50>)
 800a0c4:	0052      	lsls	r2, r2, #1
 800a0c6:	440a      	add	r2, r1
 800a0c8:	4413      	add	r3, r2
 800a0ca:	79ba      	ldrb	r2, [r7, #6]
 800a0cc:	701a      	strb	r2, [r3, #0]
	serialHeadTX[port] = t;
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	4903      	ldr	r1, [pc, #12]	; (800a0e0 <SerialSerialize+0x4c>)
 800a0d2:	7bfa      	ldrb	r2, [r7, #15]
 800a0d4:	54ca      	strb	r2, [r1, r3]
}
 800a0d6:	bf00      	nop
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bc80      	pop	{r7}
 800a0de:	4770      	bx	lr
 800a0e0:	20000458 	.word	0x20000458
 800a0e4:	20000460 	.word	0x20000460

0800a0e8 <UartSendData>:

void UartSendData(uint8_t port)
{
 800a0e8:	b590      	push	{r4, r7, lr}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	71fb      	strb	r3, [r7, #7]
	uint8_t t = serialTailTX[port];
 800a0f2:	79fb      	ldrb	r3, [r7, #7]
 800a0f4:	4a37      	ldr	r2, [pc, #220]	; (800a1d4 <UartSendData+0xec>)
 800a0f6:	5cd3      	ldrb	r3, [r2, r3]
 800a0f8:	73fb      	strb	r3, [r7, #15]
	switch(port){
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d01c      	beq.n	800a13a <UartSendData+0x52>
 800a100:	2b01      	cmp	r3, #1
 800a102:	d04b      	beq.n	800a19c <UartSendData+0xb4>
			serialTailTX[port] = t;
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
			serialHead_1 = 0;
			break;
	}
}
 800a104:	e061      	b.n	800a1ca <UartSendData+0xe2>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 800a106:	7bfb      	ldrb	r3, [r7, #15]
 800a108:	3301      	adds	r3, #1
 800a10a:	73fb      	strb	r3, [r7, #15]
 800a10c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a110:	2b00      	cmp	r3, #0
 800a112:	da01      	bge.n	800a118 <UartSendData+0x30>
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
				serialBufTx_0[serialHead_0++] = serialBufferTX[t][port];
 800a118:	7bf9      	ldrb	r1, [r7, #15]
 800a11a:	79fa      	ldrb	r2, [r7, #7]
 800a11c:	4b2e      	ldr	r3, [pc, #184]	; (800a1d8 <UartSendData+0xf0>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	b2db      	uxtb	r3, r3
 800a122:	1c58      	adds	r0, r3, #1
 800a124:	b2c4      	uxtb	r4, r0
 800a126:	482c      	ldr	r0, [pc, #176]	; (800a1d8 <UartSendData+0xf0>)
 800a128:	7004      	strb	r4, [r0, #0]
 800a12a:	461c      	mov	r4, r3
 800a12c:	482b      	ldr	r0, [pc, #172]	; (800a1dc <UartSendData+0xf4>)
 800a12e:	004b      	lsls	r3, r1, #1
 800a130:	4403      	add	r3, r0
 800a132:	4413      	add	r3, r2
 800a134:	781a      	ldrb	r2, [r3, #0]
 800a136:	4b2a      	ldr	r3, [pc, #168]	; (800a1e0 <UartSendData+0xf8>)
 800a138:	551a      	strb	r2, [r3, r4]
			while (serialHeadTX[port] != t)
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	4a29      	ldr	r2, [pc, #164]	; (800a1e4 <UartSendData+0xfc>)
 800a13e:	5cd3      	ldrb	r3, [r2, r3]
 800a140:	b2db      	uxtb	r3, r3
 800a142:	7bfa      	ldrb	r2, [r7, #15]
 800a144:	429a      	cmp	r2, r3
 800a146:	d1de      	bne.n	800a106 <UartSendData+0x1e>
			serialTailTX[port] = t;
 800a148:	79fb      	ldrb	r3, [r7, #7]
 800a14a:	4922      	ldr	r1, [pc, #136]	; (800a1d4 <UartSendData+0xec>)
 800a14c:	7bfa      	ldrb	r2, [r7, #15]
 800a14e:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART1, serialBufTx_0, serialHead_0);
 800a150:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <UartSendData+0xf0>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	b2db      	uxtb	r3, r3
 800a156:	461a      	mov	r2, r3
 800a158:	4921      	ldr	r1, [pc, #132]	; (800a1e0 <UartSendData+0xf8>)
 800a15a:	2000      	movs	r0, #0
 800a15c:	f002 f810 	bl	800c180 <uartWriteIT>
			serialHead_0 = 0;
 800a160:	4b1d      	ldr	r3, [pc, #116]	; (800a1d8 <UartSendData+0xf0>)
 800a162:	2200      	movs	r2, #0
 800a164:	701a      	strb	r2, [r3, #0]
			break;
 800a166:	e030      	b.n	800a1ca <UartSendData+0xe2>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	3301      	adds	r3, #1
 800a16c:	73fb      	strb	r3, [r7, #15]
 800a16e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a172:	2b00      	cmp	r3, #0
 800a174:	da01      	bge.n	800a17a <UartSendData+0x92>
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]
				serialBufTx_1[serialHead_1++] = serialBufferTX[t][port];
 800a17a:	7bf9      	ldrb	r1, [r7, #15]
 800a17c:	79fa      	ldrb	r2, [r7, #7]
 800a17e:	4b1a      	ldr	r3, [pc, #104]	; (800a1e8 <UartSendData+0x100>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	1c58      	adds	r0, r3, #1
 800a186:	b2c4      	uxtb	r4, r0
 800a188:	4817      	ldr	r0, [pc, #92]	; (800a1e8 <UartSendData+0x100>)
 800a18a:	7004      	strb	r4, [r0, #0]
 800a18c:	461c      	mov	r4, r3
 800a18e:	4813      	ldr	r0, [pc, #76]	; (800a1dc <UartSendData+0xf4>)
 800a190:	004b      	lsls	r3, r1, #1
 800a192:	4403      	add	r3, r0
 800a194:	4413      	add	r3, r2
 800a196:	781a      	ldrb	r2, [r3, #0]
 800a198:	4b14      	ldr	r3, [pc, #80]	; (800a1ec <UartSendData+0x104>)
 800a19a:	551a      	strb	r2, [r3, r4]
			while (serialHeadTX[port] != t)
 800a19c:	79fb      	ldrb	r3, [r7, #7]
 800a19e:	4a11      	ldr	r2, [pc, #68]	; (800a1e4 <UartSendData+0xfc>)
 800a1a0:	5cd3      	ldrb	r3, [r2, r3]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	7bfa      	ldrb	r2, [r7, #15]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d1de      	bne.n	800a168 <UartSendData+0x80>
			serialTailTX[port] = t;
 800a1aa:	79fb      	ldrb	r3, [r7, #7]
 800a1ac:	4909      	ldr	r1, [pc, #36]	; (800a1d4 <UartSendData+0xec>)
 800a1ae:	7bfa      	ldrb	r2, [r7, #15]
 800a1b0:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
 800a1b2:	4b0d      	ldr	r3, [pc, #52]	; (800a1e8 <UartSendData+0x100>)
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	490c      	ldr	r1, [pc, #48]	; (800a1ec <UartSendData+0x104>)
 800a1bc:	2001      	movs	r0, #1
 800a1be:	f001 ffdf 	bl	800c180 <uartWriteIT>
			serialHead_1 = 0;
 800a1c2:	4b09      	ldr	r3, [pc, #36]	; (800a1e8 <UartSendData+0x100>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	701a      	strb	r2, [r3, #0]
			break;
 800a1c8:	bf00      	nop
}
 800a1ca:	bf00      	nop
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd90      	pop	{r4, r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	2000045c 	.word	0x2000045c
 800a1d8:	20000660 	.word	0x20000660
 800a1dc:	20000460 	.word	0x20000460
 800a1e0:	20000560 	.word	0x20000560
 800a1e4:	20000458 	.word	0x20000458
 800a1e8:	20000661 	.word	0x20000661
 800a1ec:	200005e0 	.word	0x200005e0

0800a1f0 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800a1f4:	4b1b      	ldr	r3, [pc, #108]	; (800a264 <cliInit+0x74>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800a1fa:	4b1a      	ldr	r3, [pc, #104]	; (800a264 <cliInit+0x74>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 800a200:	4b18      	ldr	r3, [pc, #96]	; (800a264 <cliInit+0x74>)
 800a202:	2200      	movs	r2, #0
 800a204:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800a206:	4b17      	ldr	r3, [pc, #92]	; (800a264 <cliInit+0x74>)
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800a20e:	4b15      	ldr	r3, [pc, #84]	; (800a264 <cliInit+0x74>)
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800a216:	4b13      	ldr	r3, [pc, #76]	; (800a264 <cliInit+0x74>)
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800a21e:	4b11      	ldr	r3, [pc, #68]	; (800a264 <cliInit+0x74>)
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800a226:	4b0f      	ldr	r3, [pc, #60]	; (800a264 <cliInit+0x74>)
 800a228:	4a0f      	ldr	r2, [pc, #60]	; (800a268 <cliInit+0x78>)
 800a22a:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800a22e:	4b0d      	ldr	r3, [pc, #52]	; (800a264 <cliInit+0x74>)
 800a230:	4a0e      	ldr	r2, [pc, #56]	; (800a26c <cliInit+0x7c>)
 800a232:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800a236:	4b0b      	ldr	r3, [pc, #44]	; (800a264 <cliInit+0x74>)
 800a238:	4a0d      	ldr	r2, [pc, #52]	; (800a270 <cliInit+0x80>)
 800a23a:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800a23e:	4b09      	ldr	r3, [pc, #36]	; (800a264 <cliInit+0x74>)
 800a240:	4a0c      	ldr	r2, [pc, #48]	; (800a274 <cliInit+0x84>)
 800a242:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 800a246:	4807      	ldr	r0, [pc, #28]	; (800a264 <cliInit+0x74>)
 800a248:	f000 fb5c 	bl	800a904 <cliLineClean>


  cliAdd("help", cliShowList);
 800a24c:	490a      	ldr	r1, [pc, #40]	; (800a278 <cliInit+0x88>)
 800a24e:	480b      	ldr	r0, [pc, #44]	; (800a27c <cliInit+0x8c>)
 800a250:	f000 fe0c 	bl	800ae6c <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800a254:	490a      	ldr	r1, [pc, #40]	; (800a280 <cliInit+0x90>)
 800a256:	480b      	ldr	r0, [pc, #44]	; (800a284 <cliInit+0x94>)
 800a258:	f000 fe08 	bl	800ae6c <cliAdd>

  return true;
 800a25c:	2301      	movs	r3, #1
}
 800a25e:	4618      	mov	r0, r3
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000f18 	.word	0x20000f18
 800a268:	0800ad09 	.word	0x0800ad09
 800a26c:	0800ad59 	.word	0x0800ad59
 800a270:	0800ada9 	.word	0x0800ada9
 800a274:	0800aded 	.word	0x0800aded
 800a278:	0800af01 	.word	0x0800af01
 800a27c:	08019c68 	.word	0x08019c68
 800a280:	0800af71 	.word	0x0800af71
 800a284:	08019c70 	.word	0x08019c70

0800a288 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	4603      	mov	r3, r0
 800a290:	6039      	str	r1, [r7, #0]
 800a292:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 800a294:	4a0a      	ldr	r2, [pc, #40]	; (800a2c0 <cliOpen+0x38>)
 800a296:	79fb      	ldrb	r3, [r7, #7]
 800a298:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800a29a:	4a09      	ldr	r2, [pc, #36]	; (800a2c0 <cliOpen+0x38>)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 fda7 	bl	800bdf8 <uartOpen>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <cliOpen+0x38>)
 800a2b0:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800a2b2:	4b03      	ldr	r3, [pc, #12]	; (800a2c0 <cliOpen+0x38>)
 800a2b4:	7a1b      	ldrb	r3, [r3, #8]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	20000f18 	.word	0x20000f18

0800a2c4 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800a2cc:	4b34      	ldr	r3, [pc, #208]	; (800a3a0 <cliShowLog+0xdc>)
 800a2ce:	7a5b      	ldrb	r3, [r3, #9]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d061      	beq.n	800a398 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	7a98      	ldrb	r0, [r3, #10]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800a2de:	461a      	mov	r2, r3
 800a2e0:	4930      	ldr	r1, [pc, #192]	; (800a3a4 <cliShowLog+0xe0>)
 800a2e2:	f001 ff87 	bl	800c1f4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	7a98      	ldrb	r0, [r3, #10]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	492d      	ldr	r1, [pc, #180]	; (800a3a8 <cliShowLog+0xe4>)
 800a2f4:	f001 ff7e 	bl	800c1f4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	7a98      	ldrb	r0, [r3, #10]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800a302:	461a      	mov	r2, r3
 800a304:	4929      	ldr	r1, [pc, #164]	; (800a3ac <cliShowLog+0xe8>)
 800a306:	f001 ff75 	bl	800c1f4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	7a98      	ldrb	r0, [r3, #10]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a314:	461a      	mov	r2, r3
 800a316:	4926      	ldr	r1, [pc, #152]	; (800a3b0 <cliShowLog+0xec>)
 800a318:	f001 ff6c 	bl	800c1f4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	7a98      	ldrb	r0, [r3, #10]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800a326:	461a      	mov	r2, r3
 800a328:	4922      	ldr	r1, [pc, #136]	; (800a3b4 <cliShowLog+0xf0>)
 800a32a:	f001 ff63 	bl	800c1f4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	7a98      	ldrb	r0, [r3, #10]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a338:	461a      	mov	r2, r3
 800a33a:	491f      	ldr	r1, [pc, #124]	; (800a3b8 <cliShowLog+0xf4>)
 800a33c:	f001 ff5a 	bl	800c1f4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7a98      	ldrb	r0, [r3, #10]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a34a:	461a      	mov	r2, r3
 800a34c:	491b      	ldr	r1, [pc, #108]	; (800a3bc <cliShowLog+0xf8>)
 800a34e:	f001 ff51 	bl	800c1f4 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 800a352:	2300      	movs	r3, #0
 800a354:	60fb      	str	r3, [r7, #12]
 800a356:	e012      	b.n	800a37e <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	7a98      	ldrb	r0, [r3, #10]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	00da      	lsls	r2, r3, #3
 800a366:	1ad2      	subs	r2, r2, r3
 800a368:	f502 73cc 	add.w	r3, r2, #408	; 0x198
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	4413      	add	r3, r2
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	4913      	ldr	r1, [pc, #76]	; (800a3c0 <cliShowLog+0xfc>)
 800a374:	f001 ff3e 	bl	800c1f4 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	3301      	adds	r3, #1
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a384:	461a      	mov	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	4293      	cmp	r3, r2
 800a38a:	dbe5      	blt.n	800a358 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	7a9b      	ldrb	r3, [r3, #10]
 800a390:	490c      	ldr	r1, [pc, #48]	; (800a3c4 <cliShowLog+0x100>)
 800a392:	4618      	mov	r0, r3
 800a394:	f001 ff2e 	bl	800c1f4 <uartPrintf>
  }
}
 800a398:	bf00      	nop
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	20000f18 	.word	0x20000f18
 800a3a4:	08019c74 	.word	0x08019c74
 800a3a8:	08019c84 	.word	0x08019c84
 800a3ac:	08019c94 	.word	0x08019c94
 800a3b0:	08019ca4 	.word	0x08019ca4
 800a3b4:	08019cb4 	.word	0x08019cb4
 800a3b8:	08019cc4 	.word	0x08019cc4
 800a3bc:	08019cd4 	.word	0x08019cd4
 800a3c0:	08019ce4 	.word	0x08019ce4
 800a3c4:	08019cf4 	.word	0x08019cf4

0800a3c8 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	4906      	ldr	r1, [pc, #24]	; (800a3f0 <cliShowPrompt+0x28>)
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f001 ff0c 	bl	800c1f4 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	4904      	ldr	r1, [pc, #16]	; (800a3f4 <cliShowPrompt+0x2c>)
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f001 ff06 	bl	800c1f4 <uartPrintf>
}
 800a3e8:	bf00      	nop
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	08019cf8 	.word	0x08019cf8
 800a3f4:	08019cfc 	.word	0x08019cfc

0800a3f8 <cliMain>:

bool cliMain(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800a3fc:	4b0e      	ldr	r3, [pc, #56]	; (800a438 <cliMain+0x40>)
 800a3fe:	7a1b      	ldrb	r3, [r3, #8]
 800a400:	f083 0301 	eor.w	r3, r3, #1
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <cliMain+0x16>
  {
    return false;
 800a40a:	2300      	movs	r3, #0
 800a40c:	e012      	b.n	800a434 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 800a40e:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <cliMain+0x40>)
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	4618      	mov	r0, r3
 800a414:	f001 fdf0 	bl	800bff8 <uartAvailable>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d009      	beq.n	800a432 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800a41e:	4b06      	ldr	r3, [pc, #24]	; (800a438 <cliMain+0x40>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	4618      	mov	r0, r3
 800a424:	f001 fe4c 	bl	800c0c0 <uartRead>
 800a428:	4603      	mov	r3, r0
 800a42a:	4619      	mov	r1, r3
 800a42c:	4802      	ldr	r0, [pc, #8]	; (800a438 <cliMain+0x40>)
 800a42e:	f000 f805 	bl	800a43c <cliUpdate>
  }

  return true;
 800a432:	2301      	movs	r3, #1
}
 800a434:	4618      	mov	r0, r3
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000f18 	.word	0x20000f18

0800a43c <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08c      	sub	sp, #48	; 0x30
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 800a448:	2300      	movs	r3, #0
 800a44a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a454:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	7c1b      	ldrb	r3, [r3, #16]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f040 8165 	bne.w	800a72a <cliUpdate+0x2ee>
  {
    switch(rx_data)
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	2b0d      	cmp	r3, #13
 800a464:	d009      	beq.n	800a47a <cliUpdate+0x3e>
 800a466:	2b0d      	cmp	r3, #13
 800a468:	dc02      	bgt.n	800a470 <cliUpdate+0x34>
 800a46a:	2b08      	cmp	r3, #8
 800a46c:	d065      	beq.n	800a53a <cliUpdate+0xfe>
 800a46e:	e0d4      	b.n	800a61a <cliUpdate+0x1de>
 800a470:	2b1b      	cmp	r3, #27
 800a472:	d01c      	beq.n	800a4ae <cliUpdate+0x72>
 800a474:	2b7f      	cmp	r3, #127	; 0x7f
 800a476:	d01e      	beq.n	800a4b6 <cliUpdate+0x7a>
 800a478:	e0cf      	b.n	800a61a <cliUpdate+0x1de>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a480:	2b00      	cmp	r3, #0
 800a482:	d005      	beq.n	800a490 <cliUpdate+0x54>
        {
          cliLineAdd(p_cli);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fa56 	bl	800a936 <cliLineAdd>
          cliRunCmd(p_cli);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fb42 	bl	800ab14 <cliRunCmd>
        }

        line->count = 0;
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff ff8e 	bl	800a3c8 <cliShowPrompt>
        break;
 800a4ac:	e144      	b.n	800a738 <cliUpdate+0x2fc>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	741a      	strb	r2, [r3, #16]
        break;
 800a4b4:	e140      	b.n	800a738 <cliUpdate+0x2fc>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	f080 8133 	bcs.w	800a72e <cliUpdate+0x2f2>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800a4d8:	2301      	movs	r3, #1
 800a4da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4dc:	e013      	b.n	800a506 <cliUpdate+0xca>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e8:	441a      	add	r2, r3
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f4:	440b      	add	r3, r1
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	69f9      	ldr	r1, [r7, #28]
 800a4fa:	5c89      	ldrb	r1, [r1, r2]
 800a4fc:	69fa      	ldr	r2, [r7, #28]
 800a4fe:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	3301      	adds	r3, #1
 800a504:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a506:	7efb      	ldrb	r3, [r7, #27]
 800a508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a50a:	429a      	cmp	r2, r3
 800a50c:	dbe7      	blt.n	800a4de <cliUpdate+0xa2>
          }

          line->count--;
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a514:	3b01      	subs	r3, #1
 800a516:	b2da      	uxtb	r2, r3
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a524:	461a      	mov	r2, r3
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	2100      	movs	r1, #0
 800a52a:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	498e      	ldr	r1, [pc, #568]	; (800a76c <cliUpdate+0x330>)
 800a532:	4618      	mov	r0, r3
 800a534:	f001 fe5e 	bl	800c1f4 <uartPrintf>
        }
        break;
 800a538:	e0f9      	b.n	800a72e <cliUpdate+0x2f2>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a540:	2b00      	cmp	r3, #0
 800a542:	d055      	beq.n	800a5f0 <cliUpdate+0x1b4>
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d050      	beq.n	800a5f0 <cliUpdate+0x1b4>
        {
          if (line->cursor == line->count)
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d10e      	bne.n	800a57c <cliUpdate+0x140>
          {
            line->count--;
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a564:	3b01      	subs	r3, #1
 800a566:	b2da      	uxtb	r2, r3
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a574:	461a      	mov	r2, r3
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	2100      	movs	r1, #0
 800a57a:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a588:	429a      	cmp	r2, r3
 800a58a:	d231      	bcs.n	800a5f0 <cliUpdate+0x1b4>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 800a59c:	2300      	movs	r3, #0
 800a59e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5a0:	e013      	b.n	800a5ca <cliUpdate+0x18e>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ac:	441a      	add	r2, r3
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b8:	440b      	add	r3, r1
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	69f9      	ldr	r1, [r7, #28]
 800a5be:	5c89      	ldrb	r1, [r1, r2]
 800a5c0:	69fa      	ldr	r2, [r7, #28]
 800a5c2:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800a5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5ca:	7ebb      	ldrb	r3, [r7, #26]
 800a5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	dbe7      	blt.n	800a5a2 <cliUpdate+0x166>
            }

            line->count--;
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 809b 	beq.w	800a732 <cliUpdate+0x2f6>
        {
          line->cursor--;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a602:	3b01      	subs	r3, #1
 800a604:	b2da      	uxtb	r2, r3
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	4957      	ldr	r1, [pc, #348]	; (800a770 <cliUpdate+0x334>)
 800a612:	4618      	mov	r0, r3
 800a614:	f001 fdee 	bl	800c1f4 <uartPrintf>
        }
        break;
 800a618:	e08b      	b.n	800a732 <cliUpdate+0x2f6>


      default:
        if ((line->count + 1) < line->buf_len)
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a620:	3301      	adds	r3, #1
 800a622:	69fa      	ldr	r2, [r7, #28]
 800a624:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a628:	4293      	cmp	r3, r2
 800a62a:	f280 8084 	bge.w	800a736 <cliUpdate+0x2fa>
        {
          if (line->cursor == line->count)
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d124      	bne.n	800a688 <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	1cf9      	adds	r1, r7, #3
 800a644:	2201      	movs	r2, #1
 800a646:	4618      	mov	r0, r3
 800a648:	f001 fd60 	bl	800c10c <uartWrite>

            line->buf[line->cursor] = rx_data;
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a652:	461a      	mov	r2, r3
 800a654:	78f9      	ldrb	r1, [r7, #3]
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	5499      	strb	r1, [r3, r2]
            line->count++;
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a660:	3301      	adds	r3, #1
 800a662:	b2da      	uxtb	r2, r3
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a670:	3301      	adds	r3, #1
 800a672:	b2da      	uxtb	r2, r3
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a680:	461a      	mov	r2, r3
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	2100      	movs	r1, #0
 800a686:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a694:	429a      	cmp	r2, r3
 800a696:	d24e      	bcs.n	800a736 <cliUpdate+0x2fa>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ac:	e013      	b.n	800a6d6 <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	1e5a      	subs	r2, r3, #1
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	1acb      	subs	r3, r1, r3
 800a6c8:	69f9      	ldr	r1, [r7, #28]
 800a6ca:	5c89      	ldrb	r1, [r1, r2]
 800a6cc:	69fa      	ldr	r2, [r7, #28]
 800a6ce:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6d6:	7e7b      	ldrb	r3, [r7, #25]
 800a6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	dbe7      	blt.n	800a6ae <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	78f9      	ldrb	r1, [r7, #3]
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	5499      	strb	r1, [r3, r2]
            line->count++;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a702:	3301      	adds	r3, #1
 800a704:	b2da      	uxtb	r2, r3
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a712:	461a      	mov	r2, r3
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	2100      	movs	r1, #0
 800a718:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	78fa      	ldrb	r2, [r7, #3]
 800a720:	4914      	ldr	r1, [pc, #80]	; (800a774 <cliUpdate+0x338>)
 800a722:	4618      	mov	r0, r3
 800a724:	f001 fd66 	bl	800c1f4 <uartPrintf>
          }
        }
        break;
 800a728:	e005      	b.n	800a736 <cliUpdate+0x2fa>
    }
  }
 800a72a:	bf00      	nop
 800a72c:	e004      	b.n	800a738 <cliUpdate+0x2fc>
        break;
 800a72e:	bf00      	nop
 800a730:	e002      	b.n	800a738 <cliUpdate+0x2fc>
        break;
 800a732:	bf00      	nop
 800a734:	e000      	b.n	800a738 <cliUpdate+0x2fc>
        break;
 800a736:	bf00      	nop

  switch(p_cli->state)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	7c1b      	ldrb	r3, [r3, #16]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	2b03      	cmp	r3, #3
 800a740:	f200 80d3 	bhi.w	800a8ea <cliUpdate+0x4ae>
 800a744:	a201      	add	r2, pc, #4	; (adr r2, 800a74c <cliUpdate+0x310>)
 800a746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74a:	bf00      	nop
 800a74c:	0800a75d 	.word	0x0800a75d
 800a750:	0800a765 	.word	0x0800a765
 800a754:	0800a779 	.word	0x0800a779
 800a758:	0800a8e1 	.word	0x0800a8e1
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2202      	movs	r2, #2
 800a760:	741a      	strb	r2, [r3, #16]
      break;
 800a762:	e0c2      	b.n	800a8ea <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2203      	movs	r2, #3
 800a768:	741a      	strb	r2, [r3, #16]
      break;
 800a76a:	e0be      	b.n	800a8ea <cliUpdate+0x4ae>
 800a76c:	08019d04 	.word	0x08019d04
 800a770:	08019d0c 	.word	0x08019d0c
 800a774:	08019d14 	.word	0x08019d14

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	2b44      	cmp	r3, #68	; 0x44
 800a782:	d11a      	bne.n	800a7ba <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d015      	beq.n	800a7ba <cliUpdate+0x37e>
        {
          line->cursor--;
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a794:	3b01      	subs	r3, #1
 800a796:	b2da      	uxtb	r2, r3
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800a79e:	231b      	movs	r3, #27
 800a7a0:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800a7a2:	235b      	movs	r3, #91	; 0x5b
 800a7a4:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800a7a6:	78fb      	ldrb	r3, [r7, #3]
 800a7a8:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	f107 010c 	add.w	r1, r7, #12
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f001 fca9 	bl	800c10c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 800a7ba:	78fb      	ldrb	r3, [r7, #3]
 800a7bc:	2b43      	cmp	r3, #67	; 0x43
 800a7be:	d11d      	bne.n	800a7fc <cliUpdate+0x3c0>
      {
        if (line->cursor < line->buf_len)
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d215      	bcs.n	800a7fc <cliUpdate+0x3c0>
        {
          line->cursor++;
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800a7e0:	231b      	movs	r3, #27
 800a7e2:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800a7e4:	235b      	movs	r3, #91	; 0x5b
 800a7e6:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800a7e8:	78fb      	ldrb	r3, [r7, #3]
 800a7ea:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	f107 010c 	add.w	r1, r7, #12
 800a7f4:	2203      	movs	r2, #3
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f001 fc88 	bl	800c10c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	2b41      	cmp	r3, #65	; 0x41
 800a800:	d10c      	bne.n	800a81c <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800a802:	2101      	movs	r1, #1
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 f8eb 	bl	800a9e0 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	781a      	ldrb	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a814:	4619      	mov	r1, r3
 800a816:	4610      	mov	r0, r2
 800a818:	f001 fcec 	bl	800c1f4 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 800a81c:	78fb      	ldrb	r3, [r7, #3]
 800a81e:	2b42      	cmp	r3, #66	; 0x42
 800a820:	d10c      	bne.n	800a83c <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 800a822:	2100      	movs	r1, #0
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f8db 	bl	800a9e0 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	781a      	ldrb	r2, [r3, #0]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a834:	4619      	mov	r1, r3
 800a836:	4610      	mov	r0, r2
 800a838:	f001 fcdc 	bl	800c1f4 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	2b31      	cmp	r3, #49	; 0x31
 800a840:	d10f      	bne.n	800a862 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	7818      	ldrb	r0, [r3, #0]
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a84c:	461a      	mov	r2, r3
 800a84e:	492b      	ldr	r1, [pc, #172]	; (800a8fc <cliUpdate+0x4c0>)
 800a850:	f001 fcd0 	bl	800c1f4 <uartPrintf>
        line->cursor = 0;
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2204      	movs	r2, #4
 800a860:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800a862:	78fb      	ldrb	r3, [r7, #3]
 800a864:	2b34      	cmp	r3, #52	; 0x34
 800a866:	d13f      	bne.n	800a8e8 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a874:	429a      	cmp	r2, r3
 800a876:	d210      	bcs.n	800a89a <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a87e:	b29a      	uxth	r2, r3
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a886:	b29b      	uxth	r3, r3
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	8afa      	ldrh	r2, [r7, #22]
 800a892:	491b      	ldr	r1, [pc, #108]	; (800a900 <cliUpdate+0x4c4>)
 800a894:	4618      	mov	r0, r3
 800a896:	f001 fcad 	bl	800c1f4 <uartPrintf>
        }
        if (line->cursor > line->count)
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d910      	bls.n	800a8cc <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	8afa      	ldrh	r2, [r7, #22]
 800a8c4:	490d      	ldr	r1, [pc, #52]	; (800a8fc <cliUpdate+0x4c0>)
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f001 fc94 	bl	800c1f4 <uartPrintf>
        }
        line->cursor = line->count;
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2204      	movs	r2, #4
 800a8dc:	741a      	strb	r2, [r3, #16]
      }
      break;
 800a8de:	e003      	b.n	800a8e8 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	741a      	strb	r2, [r3, #16]
      break;
 800a8e6:	e000      	b.n	800a8ea <cliUpdate+0x4ae>
      break;
 800a8e8:	bf00      	nop
  }



  cliShowLog(p_cli);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fcea 	bl	800a2c4 <cliShowLog>

  return ret;
 800a8f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3730      	adds	r7, #48	; 0x30
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	08019d20 	.word	0x08019d20
 800a900:	08019d28 	.word	0x08019d28

0800a904 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	221f      	movs	r2, #31
 800a920:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	bc80      	pop	{r7}
 800a934:	4770      	bx	lr

0800a936 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 800a936:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a938:	b083      	sub	sp, #12
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a944:	461a      	mov	r2, r3
 800a946:	6879      	ldr	r1, [r7, #4]
 800a948:	4613      	mov	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	00da      	lsls	r2, r3, #3
 800a950:	1ad2      	subs	r2, r2, r3
 800a952:	188b      	adds	r3, r1, r2
 800a954:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f503 7409 	add.w	r4, r3, #548	; 0x224
 800a95e:	4694      	mov	ip, r2
 800a960:	f104 0e20 	add.w	lr, r4, #32
 800a964:	4665      	mov	r5, ip
 800a966:	4626      	mov	r6, r4
 800a968:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a96a:	6028      	str	r0, [r5, #0]
 800a96c:	6069      	str	r1, [r5, #4]
 800a96e:	60aa      	str	r2, [r5, #8]
 800a970:	60eb      	str	r3, [r5, #12]
 800a972:	3410      	adds	r4, #16
 800a974:	f10c 0c10 	add.w	ip, ip, #16
 800a978:	4574      	cmp	r4, lr
 800a97a:	d1f3      	bne.n	800a964 <cliLineAdd+0x2e>
 800a97c:	4663      	mov	r3, ip
 800a97e:	4622      	mov	r2, r4
 800a980:	8811      	ldrh	r1, [r2, #0]
 800a982:	7892      	ldrb	r2, [r2, #2]
 800a984:	8019      	strh	r1, [r3, #0]
 800a986:	709a      	strb	r2, [r3, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a98e:	2b03      	cmp	r3, #3
 800a990:	d807      	bhi.n	800a9a2 <cliLineAdd+0x6c>
  {
    p_cli->hist_line_count++;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a998:	3301      	adds	r3, #1
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a9a8:	b25a      	sxtb	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	425a      	negs	r2, r3
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	f002 0203 	and.w	r2, r2, #3
 800a9c2:	bf58      	it	pl
 800a9c4:	4253      	negpl	r3, r2
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 800a9d6:	bf00      	nop
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a9e0 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800a9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f000 8086 	beq.w	800ab04 <cliLineChange+0x124>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d008      	beq.n	800aa14 <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	7818      	ldrb	r0, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	493f      	ldr	r1, [pc, #252]	; (800ab0c <cliLineChange+0x12c>)
 800aa10:	f001 fbf0 	bl	800c1f4 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d008      	beq.n	800aa30 <cliLineChange+0x50>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	7818      	ldrb	r0, [r3, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800aa28:	461a      	mov	r2, r3
 800aa2a:	4939      	ldr	r1, [pc, #228]	; (800ab10 <cliLineChange+0x130>)
 800aa2c:	f001 fbe2 	bl	800c1f4 <uartPrintf>
  }


  if (key_up == true)
 800aa30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d125      	bne.n	800aa84 <cliLineChange+0xa4>
  {
    if (p_cli->hist_line_new == true)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d006      	beq.n	800aa50 <cliLineChange+0x70>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800aa48:	b25a      	sxtb	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aa56:	461a      	mov	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800aa5e:	4413      	add	r3, r2
 800aa60:	3b01      	subs	r3, #1
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800aa68:	fb93 f1f2 	sdiv	r1, r3, r2
 800aa6c:	fb02 f201 	mul.w	r2, r2, r1
 800aa70:	1a9b      	subs	r3, r3, r2
 800aa72:	b25a      	sxtb	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aa80:	73fb      	strb	r3, [r7, #15]
 800aa82:	e013      	b.n	800aaac <cliLineChange+0xcc>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800aa92:	fb93 f1f2 	sdiv	r1, r3, r2
 800aa96:	fb02 f201 	mul.w	r2, r2, r1
 800aa9a:	1a9b      	subs	r3, r3, r2
 800aa9c:	b25a      	sxtb	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aaaa:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800aaac:	7bfa      	ldrb	r2, [r7, #15]
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	4613      	mov	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	00da      	lsls	r2, r3, #3
 800aaba:	1ad2      	subs	r2, r2, r3
 800aabc:	1883      	adds	r3, r0, r2
 800aabe:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800aac2:	461c      	mov	r4, r3
 800aac4:	f501 7609 	add.w	r6, r1, #548	; 0x224
 800aac8:	f104 0c20 	add.w	ip, r4, #32
 800aacc:	4635      	mov	r5, r6
 800aace:	4623      	mov	r3, r4
 800aad0:	6818      	ldr	r0, [r3, #0]
 800aad2:	6859      	ldr	r1, [r3, #4]
 800aad4:	689a      	ldr	r2, [r3, #8]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aada:	3410      	adds	r4, #16
 800aadc:	3610      	adds	r6, #16
 800aade:	4564      	cmp	r4, ip
 800aae0:	d1f4      	bne.n	800aacc <cliLineChange+0xec>
 800aae2:	4633      	mov	r3, r6
 800aae4:	4622      	mov	r2, r4
 800aae6:	8811      	ldrh	r1, [r2, #0]
 800aae8:	7892      	ldrb	r2, [r2, #2]
 800aaea:	8019      	strh	r1, [r3, #0]
 800aaec:	709a      	strb	r2, [r3, #2]
  p_cli->line.cursor = p_cli->line.count;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

  p_cli->hist_line_new = false;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800ab02:	e000      	b.n	800ab06 <cliLineChange+0x126>
    return;
 800ab04:	bf00      	nop
}
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab0c:	08019d20 	.word	0x08019d20
 800ab10:	08019d30 	.word	0x08019d30

0800ab14 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f851 	bl	800abc8 <cliParseArgs>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d046      	beq.n	800abba <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 800ab2c:	4825      	ldr	r0, [pc, #148]	; (800abc4 <cliRunCmd+0xb0>)
 800ab2e:	f000 f893 	bl	800ac58 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 f8b1 	bl	800aca0 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 800ab3e:	2300      	movs	r3, #0
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	e033      	b.n	800abac <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	4413      	add	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	4619      	mov	r1, r3
 800ab60:	f7f5 fb06 	bl	8000170 <strcmp>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d11d      	bne.n	800aba6 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 800ab70:	3b01      	subs	r3, #1
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800ab86:	6879      	ldr	r1, [r7, #4]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	440b      	add	r3, r1
 800ab94:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 800aba0:	4610      	mov	r0, r2
 800aba2:	4798      	blx	r3
        break;
 800aba4:	e009      	b.n	800abba <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3301      	adds	r3, #1
 800abaa:	60fb      	str	r3, [r7, #12]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800abb2:	461a      	mov	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	4293      	cmp	r3, r2
 800abb8:	dbc4      	blt.n	800ab44 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800abba:	7afb      	ldrb	r3, [r7, #11]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	08019d38 	.word	0x08019d38

0800abc8 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800abd0:	2300      	movs	r3, #0
 800abd2:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  cmdline = (char *)p_cli->line.buf;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800abe6:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800abee:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800abf0:	8afb      	ldrh	r3, [r7, #22]
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	4413      	add	r3, r2
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800abfc:	4b15      	ldr	r3, [pc, #84]	; (800ac54 <cliParseArgs+0x8c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f107 0208 	add.w	r2, r7, #8
 800ac04:	4619      	mov	r1, r3
 800ac06:	6938      	ldr	r0, [r7, #16]
 800ac08:	f007 ff98 	bl	8012b3c <strtok_r>
 800ac0c:	61b8      	str	r0, [r7, #24]
 800ac0e:	e010      	b.n	800ac32 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800ac10:	8afb      	ldrh	r3, [r7, #22]
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	82fa      	strh	r2, [r7, #22]
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	69ba      	ldr	r2, [r7, #24]
 800ac1e:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800ac20:	4b0c      	ldr	r3, [pc, #48]	; (800ac54 <cliParseArgs+0x8c>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f107 0208 	add.w	r2, r7, #8
 800ac28:	4619      	mov	r1, r3
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	f007 ff86 	bl	8012b3c <strtok_r>
 800ac30:	61b8      	str	r0, [r7, #24]
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1eb      	bne.n	800ac10 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	8afa      	ldrh	r2, [r7, #22]
 800ac3c:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  if (argc > 0)
 800ac40:	8afb      	ldrh	r3, [r7, #22]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <cliParseArgs+0x82>
  {
    ret = true;
 800ac46:	2301      	movs	r3, #1
 800ac48:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800ac4a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3720      	adds	r7, #32
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	2000002c 	.word	0x2000002c

0800ac58 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 800ac58:	b40f      	push	{r0, r1, r2, r3}
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800ac60:	f107 031c 	add.w	r3, r7, #28
 800ac64:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800ac66:	4b0d      	ldr	r3, [pc, #52]	; (800ac9c <cliPrintf+0x44>)
 800ac68:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 255, fmt, arg);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f103 0011 	add.w	r0, r3, #17
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	21ff      	movs	r1, #255	; 0xff
 800ac76:	f008 f821 	bl	8012cbc <vsniprintf>
 800ac7a:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	7818      	ldrb	r0, [r3, #0]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3311      	adds	r3, #17
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	4619      	mov	r1, r3
 800ac88:	f001 fa40 	bl	800c10c <uartWrite>
}
 800ac8c:	bf00      	nop
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac96:	b004      	add	sp, #16
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	20000f18 	.word	0x20000f18

0800aca0 <cliToUpper>:

void cliToUpper(char *str)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800aca8:	2300      	movs	r3, #0
 800acaa:	81fb      	strh	r3, [r7, #14]
 800acac:	e018      	b.n	800ace0 <cliToUpper+0x40>
  {
    str_ch = str[i];
 800acae:	89fb      	ldrh	r3, [r7, #14]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	4413      	add	r3, r2
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 800acb8:	7b7b      	ldrb	r3, [r7, #13]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d014      	beq.n	800ace8 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800acbe:	7b7b      	ldrb	r3, [r7, #13]
 800acc0:	2b60      	cmp	r3, #96	; 0x60
 800acc2:	d905      	bls.n	800acd0 <cliToUpper+0x30>
 800acc4:	7b7b      	ldrb	r3, [r7, #13]
 800acc6:	2b7a      	cmp	r3, #122	; 0x7a
 800acc8:	d802      	bhi.n	800acd0 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800acca:	7b7b      	ldrb	r3, [r7, #13]
 800accc:	3b20      	subs	r3, #32
 800acce:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800acd0:	89fb      	ldrh	r3, [r7, #14]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	4413      	add	r3, r2
 800acd6:	7b7a      	ldrb	r2, [r7, #13]
 800acd8:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800acda:	89fb      	ldrh	r3, [r7, #14]
 800acdc:	3301      	adds	r3, #1
 800acde:	81fb      	strh	r3, [r7, #14]
 800ace0:	89fb      	ldrh	r3, [r7, #14]
 800ace2:	2b0f      	cmp	r3, #15
 800ace4:	d9e3      	bls.n	800acae <cliToUpper+0xe>
 800ace6:	e000      	b.n	800acea <cliToUpper+0x4a>
      break;
 800ace8:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800acea:	89fb      	ldrh	r3, [r7, #14]
 800acec:	2b10      	cmp	r3, #16
 800acee:	d105      	bne.n	800acfc <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800acf0:	89fb      	ldrh	r3, [r7, #14]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	4413      	add	r3, r2
 800acf8:	2200      	movs	r2, #0
 800acfa:	701a      	strb	r2, [r3, #0]
  }
}
 800acfc:	bf00      	nop
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bc80      	pop	{r7}
 800ad04:	4770      	bx	lr
	...

0800ad08 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800ad16:	4b0f      	ldr	r3, [pc, #60]	; (800ad54 <cliArgsGetData+0x4c>)
 800ad18:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800ad1a:	79fb      	ldrb	r3, [r7, #7]
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d301      	bcc.n	800ad2c <cliArgsGetData+0x24>
  {
    return 0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	e00e      	b.n	800ad4a <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800ad32:	79fb      	ldrb	r3, [r7, #7]
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4413      	add	r3, r2
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f007 ff7a 	bl	8012c38 <strtoul>
 800ad44:	4603      	mov	r3, r0
 800ad46:	60fb      	str	r3, [r7, #12]

  return ret;
 800ad48:	68fb      	ldr	r3, [r7, #12]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	20000f18 	.word	0x20000f18

0800ad58 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800ad62:	f04f 0300 	mov.w	r3, #0
 800ad66:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800ad68:	4b0e      	ldr	r3, [pc, #56]	; (800ada4 <cliArgsGetFloat+0x4c>)
 800ad6a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800ad6c:	79fb      	ldrb	r3, [r7, #7]
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d302      	bcc.n	800ad80 <cliArgsGetFloat+0x28>
  {
    return 0;
 800ad7a:	f04f 0300 	mov.w	r3, #0
 800ad7e:	e00c      	b.n	800ad9a <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800ad86:	79fb      	ldrb	r3, [r7, #7]
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2100      	movs	r1, #0
 800ad90:	4618      	mov	r0, r3
 800ad92:	f007 fe5b 	bl	8012a4c <strtof>
 800ad96:	60f8      	str	r0, [r7, #12]

  return ret;
 800ad98:	68fb      	ldr	r3, [r7, #12]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20000f18 	.word	0x20000f18

0800ada8 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	4603      	mov	r3, r0
 800adb0:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800adb6:	4b0c      	ldr	r3, [pc, #48]	; (800ade8 <cliArgsGetStr+0x40>)
 800adb8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d301      	bcc.n	800adcc <cliArgsGetStr+0x24>
  {
    return 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	e008      	b.n	800adde <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	60fb      	str	r3, [r7, #12]

  return ret;
 800addc:	68fb      	ldr	r3, [r7, #12]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bc80      	pop	{r7}
 800ade6:	4770      	bx	lr
 800ade8:	20000f18 	.word	0x20000f18

0800adec <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	4603      	mov	r3, r0
 800adf4:	6039      	str	r1, [r7, #0]
 800adf6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800adf8:	2300      	movs	r3, #0
 800adfa:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 800adfc:	4b0f      	ldr	r3, [pc, #60]	; (800ae3c <cliArgsIsStr+0x50>)
 800adfe:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800ae00:	79fb      	ldrb	r3, [r7, #7]
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d301      	bcc.n	800ae12 <cliArgsIsStr+0x26>
  {
    return 0;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e010      	b.n	800ae34 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800ae18:	79fb      	ldrb	r3, [r7, #7]
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4619      	mov	r1, r3
 800ae22:	6838      	ldr	r0, [r7, #0]
 800ae24:	f7f5 f9a4 	bl	8000170 <strcmp>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <cliArgsIsStr+0x46>
  {
    ret = true;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ae32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20000f18 	.word	0x20000f18

0800ae40 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800ae46:	4b08      	ldr	r3, [pc, #32]	; (800ae68 <cliKeepLoop+0x28>)
 800ae48:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f001 f8d2 	bl	800bff8 <uartAvailable>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <cliKeepLoop+0x1e>
  {
    return true;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e000      	b.n	800ae60 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 800ae5e:	2300      	movs	r3, #0
  }
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20000f18 	.word	0x20000f18

0800ae6c <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800ae76:	2301      	movs	r3, #1
 800ae78:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800ae7a:	4b20      	ldr	r3, [pc, #128]	; (800aefc <cliAdd+0x90>)
 800ae7c:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800ae84:	2b0f      	cmp	r3, #15
 800ae86:	d901      	bls.n	800ae8c <cliAdd+0x20>
  {
    return false;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e032      	b.n	800aef2 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800ae92:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800ae94:	89fa      	ldrh	r2, [r7, #14]
 800ae96:	4613      	mov	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	4413      	add	r3, r2
 800aea6:	3304      	adds	r3, #4
 800aea8:	6879      	ldr	r1, [r7, #4]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f006 ff90 	bl	8011dd0 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800aeb0:	89fa      	ldrh	r2, [r7, #14]
 800aeb2:	6939      	ldr	r1, [r7, #16]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	440b      	add	r3, r1
 800aebe:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800aec6:	89fa      	ldrh	r2, [r7, #14]
 800aec8:	4613      	mov	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	4413      	add	r3, r2
 800aed8:	3304      	adds	r3, #4
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff fee0 	bl	800aca0 <cliToUpper>

  p_cli->cmd_count++;
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800aee6:	3301      	adds	r3, #1
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20000f18 	.word	0x20000f18

0800af00 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 800af08:	4b15      	ldr	r3, [pc, #84]	; (800af60 <cliShowList+0x60>)
 800af0a:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 800af0c:	4815      	ldr	r0, [pc, #84]	; (800af64 <cliShowList+0x64>)
 800af0e:	f7ff fea3 	bl	800ac58 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800af12:	4815      	ldr	r0, [pc, #84]	; (800af68 <cliShowList+0x68>)
 800af14:	f7ff fea0 	bl	800ac58 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e012      	b.n	800af44 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	4613      	mov	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	4413      	add	r3, r2
 800af30:	3304      	adds	r3, #4
 800af32:	4618      	mov	r0, r3
 800af34:	f7ff fe90 	bl	800ac58 <cliPrintf>
    cliPrintf("\r\n");
 800af38:	480a      	ldr	r0, [pc, #40]	; (800af64 <cliShowList+0x64>)
 800af3a:	f7ff fe8d 	bl	800ac58 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3301      	adds	r3, #1
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800af4a:	461a      	mov	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	4293      	cmp	r3, r2
 800af50:	dbe5      	blt.n	800af1e <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800af52:	4806      	ldr	r0, [pc, #24]	; (800af6c <cliShowList+0x6c>)
 800af54:	f7ff fe80 	bl	800ac58 <cliPrintf>
}
 800af58:	bf00      	nop
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20000f18 	.word	0x20000f18
 800af64:	08019d38 	.word	0x08019d38
 800af68:	08019d3c 	.word	0x08019d3c
 800af6c:	08019d5c 	.word	0x08019d5c

0800af70 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08c      	sub	sp, #48	; 0x30
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 800af78:	2310      	movs	r3, #16
 800af7a:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d103      	bne.n	800af98 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800af90:	4840      	ldr	r0, [pc, #256]	; (800b094 <cliMemoryDump+0x124>)
 800af92:	f7ff fe61 	bl	800ac58 <cliPrintf>
 800af96:	e07a      	b.n	800b08e <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	dd09      	ble.n	800afb2 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	3304      	adds	r3, #4
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2200      	movs	r2, #0
 800afa6:	2100      	movs	r1, #0
 800afa8:	4618      	mov	r0, r3
 800afaa:	f007 fe45 	bl	8012c38 <strtoul>
 800afae:	4603      	mov	r3, r0
 800afb0:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2200      	movs	r2, #0
 800afb8:	2100      	movs	r1, #0
 800afba:	4618      	mov	r0, r3
 800afbc:	f007 fe3c 	bl	8012c38 <strtoul>
 800afc0:	4603      	mov	r3, r0
 800afc2:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 800afc8:	4833      	ldr	r0, [pc, #204]	; (800b098 <cliMemoryDump+0x128>)
 800afca:	f7ff fe45 	bl	800ac58 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800afce:	2300      	movs	r3, #0
 800afd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afd2:	e058      	b.n	800b086 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800afd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd6:	f003 0303 	and.w	r3, r3, #3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d104      	bne.n	800afe8 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	4619      	mov	r1, r3
 800afe2:	482e      	ldr	r0, [pc, #184]	; (800b09c <cliMemoryDump+0x12c>)
 800afe4:	f7ff fe38 	bl	800ac58 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4619      	mov	r1, r3
 800afee:	482c      	ldr	r0, [pc, #176]	; (800b0a0 <cliMemoryDump+0x130>)
 800aff0:	f7ff fe32 	bl	800ac58 <cliPrintf>

    if ((idx%4) == 3)
 800aff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff6:	425a      	negs	r2, r3
 800aff8:	f003 0303 	and.w	r3, r3, #3
 800affc:	f002 0203 	and.w	r2, r2, #3
 800b000:	bf58      	it	pl
 800b002:	4253      	negpl	r3, r2
 800b004:	2b03      	cmp	r3, #3
 800b006:	d138      	bne.n	800b07a <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 800b008:	4826      	ldr	r0, [pc, #152]	; (800b0a4 <cliMemoryDump+0x134>)
 800b00a:	f7ff fe25 	bl	800ac58 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800b00e:	2300      	movs	r3, #0
 800b010:	623b      	str	r3, [r7, #32]
 800b012:	e02c      	b.n	800b06e <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800b01a:	2300      	movs	r3, #0
 800b01c:	61fb      	str	r3, [r7, #28]
 800b01e:	e01d      	b.n	800b05c <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800b020:	f107 020c 	add.w	r2, r7, #12
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	4413      	add	r3, r2
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	2b1f      	cmp	r3, #31
 800b02c:	d910      	bls.n	800b050 <cliMemoryDump+0xe0>
 800b02e:	f107 020c 	add.w	r2, r7, #12
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	4413      	add	r3, r2
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2b7e      	cmp	r3, #126	; 0x7e
 800b03a:	d809      	bhi.n	800b050 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 800b03c:	f107 020c 	add.w	r2, r7, #12
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	4619      	mov	r1, r3
 800b048:	4817      	ldr	r0, [pc, #92]	; (800b0a8 <cliMemoryDump+0x138>)
 800b04a:	f7ff fe05 	bl	800ac58 <cliPrintf>
 800b04e:	e002      	b.n	800b056 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800b050:	4816      	ldr	r0, [pc, #88]	; (800b0ac <cliMemoryDump+0x13c>)
 800b052:	f7ff fe01 	bl	800ac58 <cliPrintf>
        for (i=0;i<4;i++)
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	3301      	adds	r3, #1
 800b05a:	61fb      	str	r3, [r7, #28]
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	2b03      	cmp	r3, #3
 800b060:	ddde      	ble.n	800b020 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	3304      	adds	r3, #4
 800b066:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800b068:	6a3b      	ldr	r3, [r7, #32]
 800b06a:	3301      	adds	r3, #1
 800b06c:	623b      	str	r3, [r7, #32]
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	2b03      	cmp	r3, #3
 800b072:	ddcf      	ble.n	800b014 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800b074:	480e      	ldr	r0, [pc, #56]	; (800b0b0 <cliMemoryDump+0x140>)
 800b076:	f7ff fdef 	bl	800ac58 <cliPrintf>
    }
    addr++;
 800b07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07c:	3304      	adds	r3, #4
 800b07e:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 800b080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b082:	3301      	adds	r3, #1
 800b084:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	429a      	cmp	r2, r3
 800b08c:	dba2      	blt.n	800afd4 <cliMemoryDump+0x64>
  }
}
 800b08e:	3730      	adds	r7, #48	; 0x30
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	08019d7c 	.word	0x08019d7c
 800b098:	08019d90 	.word	0x08019d90
 800b09c:	08019d98 	.word	0x08019d98
 800b0a0:	08019da4 	.word	0x08019da4
 800b0a4:	08019dac 	.word	0x08019dac
 800b0a8:	08019db0 	.word	0x08019db0
 800b0ac:	08019db4 	.word	0x08019db4
 800b0b0:	08019db8 	.word	0x08019db8

0800b0b4 <i2cInit>:
I2C_HandleTypeDef hi2c2;

static void cliI2C(cli_args_t *args);

bool i2cInit(void)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
  bool ret = true;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	71fb      	strb	r3, [r7, #7]

  hi2c2.Instance = I2C2;
 800b0be:	4b16      	ldr	r3, [pc, #88]	; (800b118 <i2cInit+0x64>)
 800b0c0:	4a16      	ldr	r2, [pc, #88]	; (800b11c <i2cInit+0x68>)
 800b0c2:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800b0c4:	4b14      	ldr	r3, [pc, #80]	; (800b118 <i2cInit+0x64>)
 800b0c6:	4a16      	ldr	r2, [pc, #88]	; (800b120 <i2cInit+0x6c>)
 800b0c8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b0ca:	4b13      	ldr	r3, [pc, #76]	; (800b118 <i2cInit+0x64>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800b0d0:	4b11      	ldr	r3, [pc, #68]	; (800b118 <i2cInit+0x64>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b0d6:	4b10      	ldr	r3, [pc, #64]	; (800b118 <i2cInit+0x64>)
 800b0d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b0dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b0de:	4b0e      	ldr	r3, [pc, #56]	; (800b118 <i2cInit+0x64>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800b0e4:	4b0c      	ldr	r3, [pc, #48]	; (800b118 <i2cInit+0x64>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b0ea:	4b0b      	ldr	r3, [pc, #44]	; (800b118 <i2cInit+0x64>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b0f0:	4b09      	ldr	r3, [pc, #36]	; (800b118 <i2cInit+0x64>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b0f6:	4808      	ldr	r0, [pc, #32]	; (800b118 <i2cInit+0x64>)
 800b0f8:	f002 f866 	bl	800d1c8 <HAL_I2C_Init>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <i2cInit+0x52>
  {
    Error_Handler();
 800b102:	f7f6 fa59 	bl	80015b8 <Error_Handler>
  }
  cliAdd("i2c", cliI2C);
 800b106:	4907      	ldr	r1, [pc, #28]	; (800b124 <i2cInit+0x70>)
 800b108:	4807      	ldr	r0, [pc, #28]	; (800b128 <i2cInit+0x74>)
 800b10a:	f7ff feaf 	bl	800ae6c <cliAdd>
  return ret;
 800b10e:	79fb      	ldrb	r3, [r7, #7]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	200012bc 	.word	0x200012bc
 800b11c:	40005800 	.word	0x40005800
 800b120:	00061a80 	.word	0x00061a80
 800b124:	0800b4e9 	.word	0x0800b4e9
 800b128:	08019dc8 	.word	0x08019dc8

0800b12c <I2C_ByteWrite>:


bool I2C_ByteWrite(uint8_t DevAddress, uint8_t MemAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 800b12c:	b590      	push	{r4, r7, lr}
 800b12e:	b08b      	sub	sp, #44	; 0x2c
 800b130:	af04      	add	r7, sp, #16
 800b132:	4604      	mov	r4, r0
 800b134:	4608      	mov	r0, r1
 800b136:	4611      	mov	r1, r2
 800b138:	461a      	mov	r2, r3
 800b13a:	4623      	mov	r3, r4
 800b13c:	71fb      	strb	r3, [r7, #7]
 800b13e:	4603      	mov	r3, r0
 800b140:	71bb      	strb	r3, [r7, #6]
 800b142:	460b      	mov	r3, r1
 800b144:	717b      	strb	r3, [r7, #5]
 800b146:	4613      	mov	r3, r2
 800b148:	713b      	strb	r3, [r7, #4]
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t tmp;
	state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1000);
 800b14a:	79fb      	ldrb	r3, [r7, #7]
 800b14c:	b299      	uxth	r1, r3
 800b14e:	79bb      	ldrb	r3, [r7, #6]
 800b150:	b29a      	uxth	r2, r3
 800b152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b156:	9302      	str	r3, [sp, #8]
 800b158:	2301      	movs	r3, #1
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	f107 030e 	add.w	r3, r7, #14
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	2301      	movs	r3, #1
 800b164:	4832      	ldr	r0, [pc, #200]	; (800b230 <I2C_ByteWrite+0x104>)
 800b166:	f002 fdb9 	bl	800dcdc <HAL_I2C_Mem_Read>
 800b16a:	4603      	mov	r3, r0
 800b16c:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b16e:	4b30      	ldr	r3, [pc, #192]	; (800b230 <I2C_ByteWrite+0x104>)
 800b170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b172:	613b      	str	r3, [r7, #16]
//      Error.error = 2;
//      error_signal();
//      HAL_Delay(4);
//    }
//  }
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800b174:	793b      	ldrb	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	fa02 f303 	lsl.w	r3, r2, r3
 800b17c:	1e5a      	subs	r2, r3, #1
 800b17e:	7979      	ldrb	r1, [r7, #5]
 800b180:	793b      	ldrb	r3, [r7, #4]
 800b182:	1acb      	subs	r3, r1, r3
 800b184:	3301      	adds	r3, #1
 800b186:	fa02 f303 	lsl.w	r3, r2, r3
 800b18a:	73fb      	strb	r3, [r7, #15]
	data <<= (bitStart - length + 1); // shift data into correct position
 800b18c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b190:	7979      	ldrb	r1, [r7, #5]
 800b192:	793b      	ldrb	r3, [r7, #4]
 800b194:	1acb      	subs	r3, r1, r3
 800b196:	3301      	adds	r3, #1
 800b198:	fa02 f303 	lsl.w	r3, r2, r3
 800b19c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	data &= mask; // zero all non-important bits in data
 800b1a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tmp &= ~(mask); // zero all important bits in existing byte
 800b1ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1b0:	43db      	mvns	r3, r3
 800b1b2:	b25a      	sxtb	r2, r3
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
 800b1b6:	b25b      	sxtb	r3, r3
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	b25b      	sxtb	r3, r3
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	73bb      	strb	r3, [r7, #14]
	tmp |= data; // combine data with existing byte
 800b1c0:	7bba      	ldrb	r2, [r7, #14]
 800b1c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	73bb      	strb	r3, [r7, #14]
	state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1000);
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	b299      	uxth	r1, r3
 800b1d0:	79bb      	ldrb	r3, [r7, #6]
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b1d8:	9302      	str	r3, [sp, #8]
 800b1da:	2301      	movs	r3, #1
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	f107 030e 	add.w	r3, r7, #14
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	4812      	ldr	r0, [pc, #72]	; (800b230 <I2C_ByteWrite+0x104>)
 800b1e8:	f002 fc7e 	bl	800dae8 <HAL_I2C_Mem_Write>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b1f0:	4b0f      	ldr	r3, [pc, #60]	; (800b230 <I2C_ByteWrite+0x104>)
 800b1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f4:	613b      	str	r3, [r7, #16]
  while(state)
 800b1f6:	e012      	b.n	800b21e <I2C_ByteWrite+0xf2>
  {
  	logPrintf("MPU9250_Tx(write)_Error : %d, %ld\r\n", state, ErrorCode);
 800b1f8:	7dfb      	ldrb	r3, [r7, #23]
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	480d      	ldr	r0, [pc, #52]	; (800b234 <I2C_ByteWrite+0x108>)
 800b200:	f006 fdce 	bl	8011da0 <iprintf>
    while (Error.error !=0)
 800b204:	e007      	b.n	800b216 <I2C_ByteWrite+0xea>
    {
      Error.error = 2;
 800b206:	4b0c      	ldr	r3, [pc, #48]	; (800b238 <I2C_ByteWrite+0x10c>)
 800b208:	2202      	movs	r2, #2
 800b20a:	701a      	strb	r2, [r3, #0]
      error_signal();
 800b20c:	f7f8 fd96 	bl	8003d3c <error_signal>
      HAL_Delay(4);
 800b210:	2004      	movs	r0, #4
 800b212:	f001 fab3 	bl	800c77c <HAL_Delay>
    while (Error.error !=0)
 800b216:	4b08      	ldr	r3, [pc, #32]	; (800b238 <I2C_ByteWrite+0x10c>)
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1f3      	bne.n	800b206 <I2C_ByteWrite+0xda>
  while(state)
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1e9      	bne.n	800b1f8 <I2C_ByteWrite+0xcc>
    }
  }
  return true;
 800b224:	2301      	movs	r3, #1
}
 800b226:	4618      	mov	r0, r3
 800b228:	371c      	adds	r7, #28
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd90      	pop	{r4, r7, pc}
 800b22e:	bf00      	nop
 800b230:	200012bc 	.word	0x200012bc
 800b234:	08019dcc 	.word	0x08019dcc
 800b238:	20000acc 	.word	0x20000acc

0800b23c <I2C_ByteRead>:
//	tmp >>= (bitStart - length + 1);
//	*data = tmp;
//}

bool I2C_ByteRead(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08a      	sub	sp, #40	; 0x28
 800b240:	af04      	add	r7, sp, #16
 800b242:	607b      	str	r3, [r7, #4]
 800b244:	4603      	mov	r3, r0
 800b246:	81fb      	strh	r3, [r7, #14]
 800b248:	460b      	mov	r3, r1
 800b24a:	81bb      	strh	r3, [r7, #12]
 800b24c:	4613      	mov	r3, r2
 800b24e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;
  state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 800b250:	8978      	ldrh	r0, [r7, #10]
 800b252:	89ba      	ldrh	r2, [r7, #12]
 800b254:	89f9      	ldrh	r1, [r7, #14]
 800b256:	2301      	movs	r3, #1
 800b258:	9302      	str	r3, [sp, #8]
 800b25a:	8c3b      	ldrh	r3, [r7, #32]
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	4603      	mov	r3, r0
 800b264:	4811      	ldr	r0, [pc, #68]	; (800b2ac <I2C_ByteRead+0x70>)
 800b266:	f002 fd39 	bl	800dcdc <HAL_I2C_Mem_Read>
 800b26a:	4603      	mov	r3, r0
 800b26c:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b26e:	4b0f      	ldr	r3, [pc, #60]	; (800b2ac <I2C_ByteRead+0x70>)
 800b270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b272:	613b      	str	r3, [r7, #16]
  while(state)
 800b274:	e012      	b.n	800b29c <I2C_ByteRead+0x60>
  {
  	logPrintf("MPU9250_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 800b276:	7dfb      	ldrb	r3, [r7, #23]
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	4619      	mov	r1, r3
 800b27c:	480c      	ldr	r0, [pc, #48]	; (800b2b0 <I2C_ByteRead+0x74>)
 800b27e:	f006 fd8f 	bl	8011da0 <iprintf>
    while (Error.error !=0)
 800b282:	e007      	b.n	800b294 <I2C_ByteRead+0x58>
    {
      Error.error = 2;
 800b284:	4b0b      	ldr	r3, [pc, #44]	; (800b2b4 <I2C_ByteRead+0x78>)
 800b286:	2202      	movs	r2, #2
 800b288:	701a      	strb	r2, [r3, #0]
      error_signal();
 800b28a:	f7f8 fd57 	bl	8003d3c <error_signal>
      HAL_Delay(4);
 800b28e:	2004      	movs	r0, #4
 800b290:	f001 fa74 	bl	800c77c <HAL_Delay>
    while (Error.error !=0)
 800b294:	4b07      	ldr	r3, [pc, #28]	; (800b2b4 <I2C_ByteRead+0x78>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1f3      	bne.n	800b284 <I2C_ByteRead+0x48>
  while(state)
 800b29c:	7dfb      	ldrb	r3, [r7, #23]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1e9      	bne.n	800b276 <I2C_ByteRead+0x3a>
    }
  }
  return true;
 800b2a2:	2301      	movs	r3, #1
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3718      	adds	r7, #24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	200012bc 	.word	0x200012bc
 800b2b0:	08019df0 	.word	0x08019df0
 800b2b4:	20000acc 	.word	0x20000acc

0800b2b8 <I2C_ByteWrite_HAL>:

bool I2C_ByteWrite_HAL(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b08a      	sub	sp, #40	; 0x28
 800b2bc:	af04      	add	r7, sp, #16
 800b2be:	607b      	str	r3, [r7, #4]
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	81fb      	strh	r3, [r7, #14]
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	81bb      	strh	r3, [r7, #12]
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;
  state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 800b2cc:	8978      	ldrh	r0, [r7, #10]
 800b2ce:	89ba      	ldrh	r2, [r7, #12]
 800b2d0:	89f9      	ldrh	r1, [r7, #14]
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	9302      	str	r3, [sp, #8]
 800b2d6:	8c3b      	ldrh	r3, [r7, #32]
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	4603      	mov	r3, r0
 800b2e0:	4811      	ldr	r0, [pc, #68]	; (800b328 <I2C_ByteWrite_HAL+0x70>)
 800b2e2:	f002 fc01 	bl	800dae8 <HAL_I2C_Mem_Write>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b2ea:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <I2C_ByteWrite_HAL+0x70>)
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ee:	613b      	str	r3, [r7, #16]
  while(state)
 800b2f0:	e012      	b.n	800b318 <I2C_ByteWrite_HAL+0x60>
  {
  	logPrintf("MPU9250_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	480c      	ldr	r0, [pc, #48]	; (800b32c <I2C_ByteWrite_HAL+0x74>)
 800b2fa:	f006 fd51 	bl	8011da0 <iprintf>
    while (Error.error !=0)
 800b2fe:	e007      	b.n	800b310 <I2C_ByteWrite_HAL+0x58>
    {
      Error.error = 2;
 800b300:	4b0b      	ldr	r3, [pc, #44]	; (800b330 <I2C_ByteWrite_HAL+0x78>)
 800b302:	2202      	movs	r2, #2
 800b304:	701a      	strb	r2, [r3, #0]
      error_signal();
 800b306:	f7f8 fd19 	bl	8003d3c <error_signal>
      HAL_Delay(4);
 800b30a:	2004      	movs	r0, #4
 800b30c:	f001 fa36 	bl	800c77c <HAL_Delay>
    while (Error.error !=0)
 800b310:	4b07      	ldr	r3, [pc, #28]	; (800b330 <I2C_ByteWrite_HAL+0x78>)
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1f3      	bne.n	800b300 <I2C_ByteWrite_HAL+0x48>
  while(state)
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e9      	bne.n	800b2f2 <I2C_ByteWrite_HAL+0x3a>
    }
  }
  return true;
 800b31e:	2301      	movs	r3, #1
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	200012bc 	.word	0x200012bc
 800b32c:	08019e10 	.word	0x08019e10
 800b330:	20000acc 	.word	0x20000acc

0800b334 <I2C_Write>:
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1000);
	*data = tmp & (1 << bitNum);
}

void I2C_Write(uint16_t DevAddress, uint8_t data, uint16_t Size)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af02      	add	r7, sp, #8
 800b33a:	4603      	mov	r3, r0
 800b33c:	80fb      	strh	r3, [r7, #6]
 800b33e:	460b      	mov	r3, r1
 800b340:	717b      	strb	r3, [r7, #5]
 800b342:	4613      	mov	r3, r2
 800b344:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 800b346:	4818      	ldr	r0, [pc, #96]	; (800b3a8 <I2C_Write+0x74>)
 800b348:	f003 f858 	bl	800e3fc <HAL_I2C_GetState>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b20      	cmp	r3, #32
 800b350:	d125      	bne.n	800b39e <I2C_Write+0x6a>

  state = HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1000);
 800b352:	8878      	ldrh	r0, [r7, #2]
 800b354:	1d7a      	adds	r2, r7, #5
 800b356:	88f9      	ldrh	r1, [r7, #6]
 800b358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	4603      	mov	r3, r0
 800b360:	4811      	ldr	r0, [pc, #68]	; (800b3a8 <I2C_Write+0x74>)
 800b362:	f002 f869 	bl	800d438 <HAL_I2C_Master_Transmit>
 800b366:	4603      	mov	r3, r0
 800b368:	73fb      	strb	r3, [r7, #15]
  ErrorCode = hi2c2.ErrorCode;
 800b36a:	4b0f      	ldr	r3, [pc, #60]	; (800b3a8 <I2C_Write+0x74>)
 800b36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36e:	60bb      	str	r3, [r7, #8]
   while(state)
 800b370:	e012      	b.n	800b398 <I2C_Write+0x64>
   {
  	 logPrintf("MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 800b372:	7bfb      	ldrb	r3, [r7, #15]
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	4619      	mov	r1, r3
 800b378:	480c      	ldr	r0, [pc, #48]	; (800b3ac <I2C_Write+0x78>)
 800b37a:	f006 fd11 	bl	8011da0 <iprintf>
     while (Error.error !=0)
 800b37e:	e007      	b.n	800b390 <I2C_Write+0x5c>
     {
       Error.error = 2;
 800b380:	4b0b      	ldr	r3, [pc, #44]	; (800b3b0 <I2C_Write+0x7c>)
 800b382:	2202      	movs	r2, #2
 800b384:	701a      	strb	r2, [r3, #0]
       error_signal();
 800b386:	f7f8 fcd9 	bl	8003d3c <error_signal>
       HAL_Delay(4);
 800b38a:	2004      	movs	r0, #4
 800b38c:	f001 f9f6 	bl	800c77c <HAL_Delay>
     while (Error.error !=0)
 800b390:	4b07      	ldr	r3, [pc, #28]	; (800b3b0 <I2C_Write+0x7c>)
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1f3      	bne.n	800b380 <I2C_Write+0x4c>
   while(state)
 800b398:	7bfb      	ldrb	r3, [r7, #15]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1e9      	bne.n	800b372 <I2C_Write+0x3e>
     }
   }
  }
}
 800b39e:	bf00      	nop
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	200012bc 	.word	0x200012bc
 800b3ac:	08019e30 	.word	0x08019e30
 800b3b0:	20000acc 	.word	0x20000acc

0800b3b4 <I2C_Read>:

void I2C_Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b086      	sub	sp, #24
 800b3b8:	af02      	add	r7, sp, #8
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	6039      	str	r1, [r7, #0]
 800b3be:	80fb      	strh	r3, [r7, #6]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 800b3c4:	4817      	ldr	r0, [pc, #92]	; (800b424 <I2C_Read+0x70>)
 800b3c6:	f003 f819 	bl	800e3fc <HAL_I2C_GetState>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b20      	cmp	r3, #32
 800b3ce:	d125      	bne.n	800b41c <I2C_Read+0x68>

  state = HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1000);
 800b3d0:	88ba      	ldrh	r2, [r7, #4]
 800b3d2:	88f9      	ldrh	r1, [r7, #6]
 800b3d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	4811      	ldr	r0, [pc, #68]	; (800b424 <I2C_Read+0x70>)
 800b3e0:	f002 f928 	bl	800d634 <HAL_I2C_Master_Receive>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	73fb      	strb	r3, [r7, #15]
  ErrorCode = hi2c2.ErrorCode;
 800b3e8:	4b0e      	ldr	r3, [pc, #56]	; (800b424 <I2C_Read+0x70>)
 800b3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ec:	60bb      	str	r3, [r7, #8]
    while(state)
 800b3ee:	e012      	b.n	800b416 <I2C_Read+0x62>
    {
    	logPrintf("MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	480c      	ldr	r0, [pc, #48]	; (800b428 <I2C_Read+0x74>)
 800b3f8:	f006 fcd2 	bl	8011da0 <iprintf>
      while (Error.error !=0)
 800b3fc:	e007      	b.n	800b40e <I2C_Read+0x5a>
      {
        Error.error = 3;
 800b3fe:	4b0b      	ldr	r3, [pc, #44]	; (800b42c <I2C_Read+0x78>)
 800b400:	2203      	movs	r2, #3
 800b402:	701a      	strb	r2, [r3, #0]
        error_signal();
 800b404:	f7f8 fc9a 	bl	8003d3c <error_signal>
        HAL_Delay(4);
 800b408:	2004      	movs	r0, #4
 800b40a:	f001 f9b7 	bl	800c77c <HAL_Delay>
      while (Error.error !=0)
 800b40e:	4b07      	ldr	r3, [pc, #28]	; (800b42c <I2C_Read+0x78>)
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1f3      	bne.n	800b3fe <I2C_Read+0x4a>
    while(state)
 800b416:	7bfb      	ldrb	r3, [r7, #15]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1e9      	bne.n	800b3f0 <I2C_Read+0x3c>
      }
    }
  }
}
 800b41c:	bf00      	nop
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	200012bc 	.word	0x200012bc
 800b428:	08019e30 	.word	0x08019e30
 800b42c:	20000acc 	.word	0x20000acc

0800b430 <i2cIsDeviceReady>:

bool i2cIsDeviceReady(uint8_t dev_addr)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	4603      	mov	r3, r0
 800b438:	71fb      	strb	r3, [r7, #7]

  if (HAL_I2C_IsDeviceReady(&hi2c2, dev_addr << 1, 10, 10) == HAL_OK)
 800b43a:	79fb      	ldrb	r3, [r7, #7]
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	005b      	lsls	r3, r3, #1
 800b440:	b299      	uxth	r1, r3
 800b442:	230a      	movs	r3, #10
 800b444:	220a      	movs	r2, #10
 800b446:	4807      	ldr	r0, [pc, #28]	; (800b464 <i2cIsDeviceReady+0x34>)
 800b448:	f002 feaa 	bl	800e1a0 <HAL_I2C_IsDeviceReady>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d102      	bne.n	800b458 <i2cIsDeviceReady+0x28>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800b452:	b662      	cpsie	i
  {
    __enable_irq();
    return true;
 800b454:	2301      	movs	r3, #1
 800b456:	e000      	b.n	800b45a <i2cIsDeviceReady+0x2a>
  }

  return false;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	200012bc 	.word	0x200012bc

0800b468 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b088      	sub	sp, #32
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b470:	f107 0310 	add.w	r3, r7, #16
 800b474:	2200      	movs	r2, #0
 800b476:	601a      	str	r2, [r3, #0]
 800b478:	605a      	str	r2, [r3, #4]
 800b47a:	609a      	str	r2, [r3, #8]
 800b47c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a16      	ldr	r2, [pc, #88]	; (800b4dc <HAL_I2C_MspInit+0x74>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d124      	bne.n	800b4d2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b488:	4b15      	ldr	r3, [pc, #84]	; (800b4e0 <HAL_I2C_MspInit+0x78>)
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	4a14      	ldr	r2, [pc, #80]	; (800b4e0 <HAL_I2C_MspInit+0x78>)
 800b48e:	f043 0308 	orr.w	r3, r3, #8
 800b492:	6193      	str	r3, [r2, #24]
 800b494:	4b12      	ldr	r3, [pc, #72]	; (800b4e0 <HAL_I2C_MspInit+0x78>)
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	f003 0308 	and.w	r3, r3, #8
 800b49c:	60fb      	str	r3, [r7, #12]
 800b49e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b4a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b4a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b4a6:	2312      	movs	r3, #18
 800b4a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4ae:	f107 0310 	add.w	r3, r7, #16
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	480b      	ldr	r0, [pc, #44]	; (800b4e4 <HAL_I2C_MspInit+0x7c>)
 800b4b6:	f001 fcfb 	bl	800ceb0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b4ba:	4b09      	ldr	r3, [pc, #36]	; (800b4e0 <HAL_I2C_MspInit+0x78>)
 800b4bc:	69db      	ldr	r3, [r3, #28]
 800b4be:	4a08      	ldr	r2, [pc, #32]	; (800b4e0 <HAL_I2C_MspInit+0x78>)
 800b4c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b4c4:	61d3      	str	r3, [r2, #28]
 800b4c6:	4b06      	ldr	r3, [pc, #24]	; (800b4e0 <HAL_I2C_MspInit+0x78>)
 800b4c8:	69db      	ldr	r3, [r3, #28]
 800b4ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4ce:	60bb      	str	r3, [r7, #8]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b4d2:	bf00      	nop
 800b4d4:	3720      	adds	r7, #32
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	40005800 	.word	0x40005800
 800b4e0:	40021000 	.word	0x40021000
 800b4e4:	40010c00 	.word	0x40010c00

0800b4e8 <cliI2C>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

void cliI2C(cli_args_t *args)
{
 800b4e8:	b5b0      	push	{r4, r5, r7, lr}
 800b4ea:	b0aa      	sub	sp, #168	; 0xa8
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	6078      	str	r0, [r7, #4]
  bool ret = true;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t i;
  uint8_t i2c_data[128];
  uint32_t pre_time;


  if (args->argc == 1)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	881b      	ldrh	r3, [r3, #0]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d125      	bne.n	800b54a <cliI2C+0x62>
  {

    if(args->isStr(0, "scan") == true)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	496c      	ldr	r1, [pc, #432]	; (800b6b4 <cliI2C+0x1cc>)
 800b504:	2000      	movs	r0, #0
 800b506:	4798      	blx	r3
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 80be 	beq.w	800b68c <cliI2C+0x1a4>
    {
      for (i=0x00; i<= 0x7F; i++)
 800b510:	2300      	movs	r3, #0
 800b512:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b516:	e013      	b.n	800b540 <cliI2C+0x58>
      {
        if (i2cIsDeviceReady(i) == true)
 800b518:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	4618      	mov	r0, r3
 800b520:	f7ff ff86 	bl	800b430 <i2cIsDeviceReady>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d005      	beq.n	800b536 <cliI2C+0x4e>
        {
          cliPrintf("I2C CH%d Addr 0x%X : OK\n", 2, i);
 800b52a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b52e:	2102      	movs	r1, #2
 800b530:	4861      	ldr	r0, [pc, #388]	; (800b6b8 <cliI2C+0x1d0>)
 800b532:	f7ff fb91 	bl	800ac58 <cliPrintf>
      for (i=0x00; i<= 0x7F; i++)
 800b536:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b53a:	3301      	adds	r3, #1
 800b53c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b544:	2b7f      	cmp	r3, #127	; 0x7f
 800b546:	d9e7      	bls.n	800b518 <cliI2C+0x30>
 800b548:	e0a0      	b.n	800b68c <cliI2C+0x1a4>
        }
      }
    }
  }
  else if (args->argc == 4)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	2b04      	cmp	r3, #4
 800b550:	f040 8099 	bne.w	800b686 <cliI2C+0x19e>
  {
    dev_addr = (uint16_t) args->getData(1);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	2001      	movs	r0, #1
 800b55a:	4798      	blx	r3
 800b55c:	4603      	mov	r3, r0
 800b55e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    reg_addr = (uint16_t) args->getData(2);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	2002      	movs	r0, #2
 800b568:	4798      	blx	r3
 800b56a:	4603      	mov	r3, r0
 800b56c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    length   = (uint16_t) args->getData(3);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	2003      	movs	r0, #3
 800b576:	4798      	blx	r3
 800b578:	4603      	mov	r3, r0
 800b57a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

    if(args->isStr(0, "read") == true)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	494e      	ldr	r1, [pc, #312]	; (800b6bc <cliI2C+0x1d4>)
 800b584:	2000      	movs	r0, #0
 800b586:	4798      	blx	r3
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d039      	beq.n	800b602 <cliI2C+0x11a>
    {
      for (i=0; i<length; i++)
 800b58e:	2300      	movs	r3, #0
 800b590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b594:	e02e      	b.n	800b5f4 <cliI2C+0x10c>
      {
        i2c_ret = I2C_ByteRead(dev_addr<<1, reg_addr+i, I2C_MEMADD_SIZE_8BIT, i2c_data, 1);
 800b596:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b59a:	005b      	lsls	r3, r3, #1
 800b59c:	b298      	uxth	r0, r3
 800b59e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b5a8:	4413      	add	r3, r2
 800b5aa:	b299      	uxth	r1, r3
 800b5ac:	f107 0208 	add.w	r2, r7, #8
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f7ff fe40 	bl	800b23c <I2C_ByteRead>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
        if (i2c_ret == true)
 800b5c2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00a      	beq.n	800b5e0 <cliI2C+0xf8>
        {
          cliPrintf("%d I2C - 0x%02X : 0x%02X\n", reg_addr+i, i2c_data[0]);
 800b5ca:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800b5ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5d2:	4413      	add	r3, r2
 800b5d4:	7a3a      	ldrb	r2, [r7, #8]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	4839      	ldr	r0, [pc, #228]	; (800b6c0 <cliI2C+0x1d8>)
 800b5da:	f7ff fb3d 	bl	800ac58 <cliPrintf>
 800b5de:	e004      	b.n	800b5ea <cliI2C+0x102>
        }
        else
        {
          cliPrintf("%d I2C - Fail \n", 2);
 800b5e0:	2102      	movs	r1, #2
 800b5e2:	4838      	ldr	r0, [pc, #224]	; (800b6c4 <cliI2C+0x1dc>)
 800b5e4:	f7ff fb38 	bl	800ac58 <cliPrintf>
          break;
 800b5e8:	e050      	b.n	800b68c <cliI2C+0x1a4>
      for (i=0; i<length; i++)
 800b5ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b5f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b5f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d3ca      	bcc.n	800b596 <cliI2C+0xae>
 800b600:	e044      	b.n	800b68c <cliI2C+0x1a4>
        }
      }
    }
    else if(args->isStr(0, "write") == true)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	4930      	ldr	r1, [pc, #192]	; (800b6c8 <cliI2C+0x1e0>)
 800b608:	2000      	movs	r0, #0
 800b60a:	4798      	blx	r3
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d035      	beq.n	800b67e <cliI2C+0x196>
    {
      pre_time = millis();
 800b612:	f7f5 ff53 	bl	80014bc <millis>
 800b616:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
      data = (uint8_t) length;
 800b61a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
      i2c_ret = I2C_ByteWrite_HAL(dev_addr<<1, reg_addr, I2C_MEMADD_SIZE_8BIT, &data, 1);
 800b624:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b628:	005b      	lsls	r3, r3, #1
 800b62a:	b298      	uxth	r0, r3
 800b62c:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 800b630:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 800b634:	2301      	movs	r3, #1
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	4613      	mov	r3, r2
 800b63a:	2201      	movs	r2, #1
 800b63c:	f7ff fe3c 	bl	800b2b8 <I2C_ByteWrite_HAL>
 800b640:	4603      	mov	r3, r0
 800b642:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
      if (i2c_ret == true)
 800b646:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d012      	beq.n	800b674 <cliI2C+0x18c>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d ms\n", 2, reg_addr, data, millis()-pre_time);
 800b64e:	f8b7 4094 	ldrh.w	r4, [r7, #148]	; 0x94
 800b652:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800b656:	461d      	mov	r5, r3
 800b658:	f7f5 ff30 	bl	80014bc <millis>
 800b65c:	4602      	mov	r2, r0
 800b65e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	462b      	mov	r3, r5
 800b668:	4622      	mov	r2, r4
 800b66a:	2102      	movs	r1, #2
 800b66c:	4817      	ldr	r0, [pc, #92]	; (800b6cc <cliI2C+0x1e4>)
 800b66e:	f7ff faf3 	bl	800ac58 <cliPrintf>
 800b672:	e00b      	b.n	800b68c <cliI2C+0x1a4>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n", 2);
 800b674:	2102      	movs	r1, #2
 800b676:	4813      	ldr	r0, [pc, #76]	; (800b6c4 <cliI2C+0x1dc>)
 800b678:	f7ff faee 	bl	800ac58 <cliPrintf>
 800b67c:	e006      	b.n	800b68c <cliI2C+0x1a4>
      }
    }
    else
    {
      ret = false;
 800b67e:	2300      	movs	r3, #0
 800b680:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800b684:	e002      	b.n	800b68c <cliI2C+0x1a4>
    }
  }
  else
  {
    ret = false;
 800b686:	2300      	movs	r3, #0
 800b688:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  }

  if (ret == false)
 800b68c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b690:	f083 0301 	eor.w	r3, r3, #1
 800b694:	b2db      	uxtb	r3, r3
 800b696:	2b00      	cmp	r3, #0
 800b698:	d008      	beq.n	800b6ac <cliI2C+0x1c4>
  {
    cliPrintf( "i2c scan\n");
 800b69a:	480d      	ldr	r0, [pc, #52]	; (800b6d0 <cliI2C+0x1e8>)
 800b69c:	f7ff fadc 	bl	800ac58 <cliPrintf>
    cliPrintf( "i2c read dev_addr reg_addr length\n");
 800b6a0:	480c      	ldr	r0, [pc, #48]	; (800b6d4 <cliI2C+0x1ec>)
 800b6a2:	f7ff fad9 	bl	800ac58 <cliPrintf>
    cliPrintf( "i2c write dev_addr reg_addr data\n");
 800b6a6:	480c      	ldr	r0, [pc, #48]	; (800b6d8 <cliI2C+0x1f0>)
 800b6a8:	f7ff fad6 	bl	800ac58 <cliPrintf>
  }
}
 800b6ac:	bf00      	nop
 800b6ae:	37a0      	adds	r7, #160	; 0xa0
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bdb0      	pop	{r4, r5, r7, pc}
 800b6b4:	08019e4c 	.word	0x08019e4c
 800b6b8:	08019e54 	.word	0x08019e54
 800b6bc:	08019e70 	.word	0x08019e70
 800b6c0:	08019e78 	.word	0x08019e78
 800b6c4:	08019e94 	.word	0x08019e94
 800b6c8:	08019ea4 	.word	0x08019ea4
 800b6cc:	08019eac 	.word	0x08019eac
 800b6d0:	08019ed0 	.word	0x08019ed0
 800b6d4:	08019edc 	.word	0x08019edc
 800b6d8:	08019f00 	.word	0x08019f00

0800b6dc <ledInit>:
#ifdef _USE_HW_CLI
static void cliLed(cli_args_t *args);
#endif

bool ledInit(void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b088      	sub	sp, #32
 800b6e0:	af00      	add	r7, sp, #0
  bool ret = true;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6e6:	f107 0308 	add.w	r3, r7, #8
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	605a      	str	r2, [r3, #4]
 800b6f0:	609a      	str	r2, [r3, #8]
 800b6f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b6f4:	4b1b      	ldr	r3, [pc, #108]	; (800b764 <ledInit+0x88>)
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	4a1a      	ldr	r2, [pc, #104]	; (800b764 <ledInit+0x88>)
 800b6fa:	f043 0308 	orr.w	r3, r3, #8
 800b6fe:	6193      	str	r3, [r2, #24]
 800b700:	4b18      	ldr	r3, [pc, #96]	; (800b764 <ledInit+0x88>)
 800b702:	699b      	ldr	r3, [r3, #24]
 800b704:	f003 0308 	and.w	r3, r3, #8
 800b708:	607b      	str	r3, [r7, #4]
 800b70a:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b70c:	2301      	movs	r3, #1
 800b70e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b710:	2300      	movs	r3, #0
 800b712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b714:	2303      	movs	r3, #3
 800b716:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 800b718:	2300      	movs	r3, #0
 800b71a:	61fb      	str	r3, [r7, #28]
 800b71c:	e00f      	b.n	800b73e <ledInit+0x62>
  {
    GPIO_InitStruct.Pin |= led_tbl[i].pin;
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	4911      	ldr	r1, [pc, #68]	; (800b768 <ledInit+0x8c>)
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	00db      	lsls	r3, r3, #3
 800b726:	440b      	add	r3, r1
 800b728:	889b      	ldrh	r3, [r3, #4]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	60bb      	str	r3, [r7, #8]
    ledOff(i);
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	b2db      	uxtb	r3, r3
 800b732:	4618      	mov	r0, r3
 800b734:	f000 f840 	bl	800b7b8 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	3301      	adds	r3, #1
 800b73c:	61fb      	str	r3, [r7, #28]
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	2b04      	cmp	r3, #4
 800b742:	ddec      	ble.n	800b71e <ledInit+0x42>
  }

   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b744:	f107 0308 	add.w	r3, r7, #8
 800b748:	4619      	mov	r1, r3
 800b74a:	4808      	ldr	r0, [pc, #32]	; (800b76c <ledInit+0x90>)
 800b74c:	f001 fbb0 	bl	800ceb0 <HAL_GPIO_Init>

	#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 800b750:	4907      	ldr	r1, [pc, #28]	; (800b770 <ledInit+0x94>)
 800b752:	4808      	ldr	r0, [pc, #32]	; (800b774 <ledInit+0x98>)
 800b754:	f7ff fb8a 	bl	800ae6c <cliAdd>
	#endif

  return ret;
 800b758:	7efb      	ldrb	r3, [r7, #27]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3720      	adds	r7, #32
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	40021000 	.word	0x40021000
 800b768:	20000030 	.word	0x20000030
 800b76c:	40010c00 	.word	0x40010c00
 800b770:	0800b831 	.word	0x0800b831
 800b774:	08019f24 	.word	0x08019f24

0800b778 <ledOn>:

void ledOn(uint8_t ch)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	2b04      	cmp	r3, #4
 800b786:	d811      	bhi.n	800b7ac <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 800b788:	79fb      	ldrb	r3, [r7, #7]
 800b78a:	4a0a      	ldr	r2, [pc, #40]	; (800b7b4 <ledOn+0x3c>)
 800b78c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	4a08      	ldr	r2, [pc, #32]	; (800b7b4 <ledOn+0x3c>)
 800b794:	00db      	lsls	r3, r3, #3
 800b796:	4413      	add	r3, r2
 800b798:	8899      	ldrh	r1, [r3, #4]
 800b79a:	79fb      	ldrb	r3, [r7, #7]
 800b79c:	4a05      	ldr	r2, [pc, #20]	; (800b7b4 <ledOn+0x3c>)
 800b79e:	00db      	lsls	r3, r3, #3
 800b7a0:	4413      	add	r3, r2
 800b7a2:	799b      	ldrb	r3, [r3, #6]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	f001 fcdd 	bl	800d164 <HAL_GPIO_WritePin>
 800b7aa:	e000      	b.n	800b7ae <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 800b7ac:	bf00      	nop
}
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	20000030 	.word	0x20000030

0800b7b8 <ledOff>:

void ledOff(uint8_t ch)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800b7c2:	79fb      	ldrb	r3, [r7, #7]
 800b7c4:	2b04      	cmp	r3, #4
 800b7c6:	d811      	bhi.n	800b7ec <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800b7c8:	79fb      	ldrb	r3, [r7, #7]
 800b7ca:	4a0a      	ldr	r2, [pc, #40]	; (800b7f4 <ledOff+0x3c>)
 800b7cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b7d0:	79fb      	ldrb	r3, [r7, #7]
 800b7d2:	4a08      	ldr	r2, [pc, #32]	; (800b7f4 <ledOff+0x3c>)
 800b7d4:	00db      	lsls	r3, r3, #3
 800b7d6:	4413      	add	r3, r2
 800b7d8:	8899      	ldrh	r1, [r3, #4]
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	4a05      	ldr	r2, [pc, #20]	; (800b7f4 <ledOff+0x3c>)
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	4413      	add	r3, r2
 800b7e2:	79db      	ldrb	r3, [r3, #7]
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	f001 fcbd 	bl	800d164 <HAL_GPIO_WritePin>
 800b7ea:	e000      	b.n	800b7ee <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 800b7ec:	bf00      	nop
}
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	20000030 	.word	0x20000030

0800b7f8 <ledToggle>:

void ledToggle(uint8_t ch)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	2b04      	cmp	r3, #4
 800b806:	d80c      	bhi.n	800b822 <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800b808:	79fb      	ldrb	r3, [r7, #7]
 800b80a:	4a08      	ldr	r2, [pc, #32]	; (800b82c <ledToggle+0x34>)
 800b80c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b810:	79fb      	ldrb	r3, [r7, #7]
 800b812:	4a06      	ldr	r2, [pc, #24]	; (800b82c <ledToggle+0x34>)
 800b814:	00db      	lsls	r3, r3, #3
 800b816:	4413      	add	r3, r2
 800b818:	889b      	ldrh	r3, [r3, #4]
 800b81a:	4619      	mov	r1, r3
 800b81c:	f001 fcba 	bl	800d194 <HAL_GPIO_TogglePin>
 800b820:	e000      	b.n	800b824 <ledToggle+0x2c>
  if (ch >= LED_MAX_CH) return;
 800b822:	bf00      	nop
}
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20000030 	.word	0x20000030

0800b830 <cliLed>:

#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800b838:	2300      	movs	r3, #0
 800b83a:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	2b03      	cmp	r3, #3
 800b842:	d133      	bne.n	800b8ac <cliLed+0x7c>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	695b      	ldr	r3, [r3, #20]
 800b848:	491f      	ldr	r1, [pc, #124]	; (800b8c8 <cliLed+0x98>)
 800b84a:	2000      	movs	r0, #0
 800b84c:	4798      	blx	r3
 800b84e:	4603      	mov	r3, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d02b      	beq.n	800b8ac <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = args->getData(1);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	2001      	movs	r0, #1
 800b85a:	4798      	blx	r3
 800b85c:	4603      	mov	r3, r0
 800b85e:	75bb      	strb	r3, [r7, #22]
    toggle_time = args->getData(2);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	2002      	movs	r0, #2
 800b866:	4798      	blx	r3
 800b868:	4603      	mov	r3, r0
 800b86a:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 800b86c:	7dbb      	ldrb	r3, [r7, #22]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d002      	beq.n	800b878 <cliLed+0x48>
    {
      led_ch--;
 800b872:	7dbb      	ldrb	r3, [r7, #22]
 800b874:	3b01      	subs	r3, #1
 800b876:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 800b878:	f7f5 fe20 	bl	80014bc <millis>
 800b87c:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800b87e:	e00e      	b.n	800b89e <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 800b880:	f7f5 fe1c 	bl	80014bc <millis>
 800b884:	4602      	mov	r2, r0
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	68fa      	ldr	r2, [r7, #12]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d806      	bhi.n	800b89e <cliLed+0x6e>
      {
        pre_time = millis();
 800b890:	f7f5 fe14 	bl	80014bc <millis>
 800b894:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 800b896:	7dbb      	ldrb	r3, [r7, #22]
 800b898:	4618      	mov	r0, r3
 800b89a:	f7ff ffad 	bl	800b7f8 <ledToggle>
    while(cliKeepLoop())
 800b89e:	f7ff facf 	bl	800ae40 <cliKeepLoop>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1eb      	bne.n	800b880 <cliLed+0x50>
      }
    }
    ret = true;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	75fb      	strb	r3, [r7, #23]
  }



  if (ret != true)
 800b8ac:	7dfb      	ldrb	r3, [r7, #23]
 800b8ae:	f083 0301 	eor.w	r3, r3, #1
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d003      	beq.n	800b8c0 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time(ms)\n", LED_MAX_CH);
 800b8b8:	2105      	movs	r1, #5
 800b8ba:	4804      	ldr	r0, [pc, #16]	; (800b8cc <cliLed+0x9c>)
 800b8bc:	f7ff f9cc 	bl	800ac58 <cliPrintf>
  }
}
 800b8c0:	bf00      	nop
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	08019f28 	.word	0x08019f28
 800b8cc:	08019f30 	.word	0x08019f30

0800b8d0 <timerInit>:
TIM_HandleTypeDef htim4;

static void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

bool timerInit(void)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b092      	sub	sp, #72	; 0x48
 800b8d4:	af00      	add	r7, sp, #0
	bool ret = true;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	//time4 init

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b8dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	601a      	str	r2, [r3, #0]
 800b8e4:	605a      	str	r2, [r3, #4]
 800b8e6:	609a      	str	r2, [r3, #8]
 800b8e8:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b8ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800b8f4:	f107 0310 	add.w	r3, r7, #16
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	601a      	str	r2, [r3, #0]
 800b8fc:	605a      	str	r2, [r3, #4]
 800b8fe:	609a      	str	r2, [r3, #8]
 800b900:	60da      	str	r2, [r3, #12]
 800b902:	611a      	str	r2, [r3, #16]
 800b904:	615a      	str	r2, [r3, #20]
 800b906:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 800b908:	4bb3      	ldr	r3, [pc, #716]	; (800bbd8 <timerInit+0x308>)
 800b90a:	4ab4      	ldr	r2, [pc, #720]	; (800bbdc <timerInit+0x30c>)
 800b90c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72-1;
 800b90e:	4bb2      	ldr	r3, [pc, #712]	; (800bbd8 <timerInit+0x308>)
 800b910:	2247      	movs	r2, #71	; 0x47
 800b912:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b914:	4bb0      	ldr	r3, [pc, #704]	; (800bbd8 <timerInit+0x308>)
 800b916:	2200      	movs	r2, #0
 800b918:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 2000-1; //500hz
 800b91a:	4baf      	ldr	r3, [pc, #700]	; (800bbd8 <timerInit+0x308>)
 800b91c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800b920:	60da      	str	r2, [r3, #12]
#ifdef MOTOR_ESC
	htim4.Init.Period = 2041-1;//490hz
 800b922:	4bad      	ldr	r3, [pc, #692]	; (800bbd8 <timerInit+0x308>)
 800b924:	f44f 62ff 	mov.w	r2, #2040	; 0x7f8
 800b928:	60da      	str	r2, [r3, #12]
#endif
#ifdef MOTOR_ESC_OneShot125
	htim4.Init.Prescaler = 3; //4khz
 800b92a:	4bab      	ldr	r3, [pc, #684]	; (800bbd8 <timerInit+0x308>)
 800b92c:	2203      	movs	r2, #3
 800b92e:	605a      	str	r2, [r3, #4]
	htim4.Init.Period = 4500-1;
 800b930:	4ba9      	ldr	r3, [pc, #676]	; (800bbd8 <timerInit+0x308>)
 800b932:	f241 1293 	movw	r2, #4499	; 0x1193
 800b936:	60da      	str	r2, [r3, #12]
#endif
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b938:	4ba7      	ldr	r3, [pc, #668]	; (800bbd8 <timerInit+0x308>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b93e:	4ba6      	ldr	r3, [pc, #664]	; (800bbd8 <timerInit+0x308>)
 800b940:	2200      	movs	r2, #0
 800b942:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b944:	48a4      	ldr	r0, [pc, #656]	; (800bbd8 <timerInit+0x308>)
 800b946:	f003 fe2d 	bl	800f5a4 <HAL_TIM_Base_Init>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <timerInit+0x84>
	{
		Error_Handler();
 800b950:	f7f5 fe32 	bl	80015b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b958:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b95a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b95e:	4619      	mov	r1, r3
 800b960:	489d      	ldr	r0, [pc, #628]	; (800bbd8 <timerInit+0x308>)
 800b962:	f004 fb19 	bl	800ff98 <HAL_TIM_ConfigClockSource>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <timerInit+0xa0>
	{
		Error_Handler();
 800b96c:	f7f5 fe24 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800b970:	4899      	ldr	r0, [pc, #612]	; (800bbd8 <timerInit+0x308>)
 800b972:	f003 fe66 	bl	800f642 <HAL_TIM_PWM_Init>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <timerInit+0xb0>
	{
		Error_Handler();
 800b97c:	f7f5 fe1c 	bl	80015b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b980:	2300      	movs	r3, #0
 800b982:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b984:	2300      	movs	r3, #0
 800b986:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b98c:	4619      	mov	r1, r3
 800b98e:	4892      	ldr	r0, [pc, #584]	; (800bbd8 <timerInit+0x308>)
 800b990:	f004 ff90 	bl	80108b4 <HAL_TIMEx_MasterConfigSynchronization>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <timerInit+0xce>
	{
		Error_Handler();
 800b99a:	f7f5 fe0d 	bl	80015b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b99e:	2360      	movs	r3, #96	; 0x60
 800b9a0:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	617b      	str	r3, [r7, #20]
#ifdef MOTOR_ESC
	sConfigOC.Pulse = 1000;
 800b9a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9aa:	617b      	str	r3, [r7, #20]
#endif
#ifdef MOTOR_ESC_OneShot125
	sConfigOC.Pulse = 2250;
 800b9ac:	f640 03ca 	movw	r3, #2250	; 0x8ca
 800b9b0:	617b      	str	r3, [r7, #20]
#endif
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b9ba:	f107 0310 	add.w	r3, r7, #16
 800b9be:	2200      	movs	r2, #0
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4885      	ldr	r0, [pc, #532]	; (800bbd8 <timerInit+0x308>)
 800b9c4:	f004 fa2a 	bl	800fe1c <HAL_TIM_PWM_ConfigChannel>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <timerInit+0x102>
	{
		Error_Handler();
 800b9ce:	f7f5 fdf3 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b9d2:	f107 0310 	add.w	r3, r7, #16
 800b9d6:	2204      	movs	r2, #4
 800b9d8:	4619      	mov	r1, r3
 800b9da:	487f      	ldr	r0, [pc, #508]	; (800bbd8 <timerInit+0x308>)
 800b9dc:	f004 fa1e 	bl	800fe1c <HAL_TIM_PWM_ConfigChannel>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <timerInit+0x11a>
	{
		Error_Handler();
 800b9e6:	f7f5 fde7 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b9ea:	f107 0310 	add.w	r3, r7, #16
 800b9ee:	2208      	movs	r2, #8
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4879      	ldr	r0, [pc, #484]	; (800bbd8 <timerInit+0x308>)
 800b9f4:	f004 fa12 	bl	800fe1c <HAL_TIM_PWM_ConfigChannel>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <timerInit+0x132>
	{
		Error_Handler();
 800b9fe:	f7f5 fddb 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ba02:	f107 0310 	add.w	r3, r7, #16
 800ba06:	220c      	movs	r2, #12
 800ba08:	4619      	mov	r1, r3
 800ba0a:	4873      	ldr	r0, [pc, #460]	; (800bbd8 <timerInit+0x308>)
 800ba0c:	f004 fa06 	bl	800fe1c <HAL_TIM_PWM_ConfigChannel>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <timerInit+0x14a>
	{
		Error_Handler();
 800ba16:	f7f5 fdcf 	bl	80015b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	486e      	ldr	r0, [pc, #440]	; (800bbd8 <timerInit+0x308>)
 800ba1e:	f003 fe69 	bl	800f6f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800ba22:	2104      	movs	r1, #4
 800ba24:	486c      	ldr	r0, [pc, #432]	; (800bbd8 <timerInit+0x308>)
 800ba26:	f003 fe65 	bl	800f6f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800ba2a:	2108      	movs	r1, #8
 800ba2c:	486a      	ldr	r0, [pc, #424]	; (800bbd8 <timerInit+0x308>)
 800ba2e:	f003 fe61 	bl	800f6f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800ba32:	210c      	movs	r1, #12
 800ba34:	4868      	ldr	r0, [pc, #416]	; (800bbd8 <timerInit+0x308>)
 800ba36:	f003 fe5d 	bl	800f6f4 <HAL_TIM_PWM_Start>
	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800ba3a:	4867      	ldr	r0, [pc, #412]	; (800bbd8 <timerInit+0x308>)
 800ba3c:	f000 f98e 	bl	800bd5c <HAL_TIM_MspPostInit>


	//TIM2 Init
	TIM_IC_InitTypeDef sConfigIC = {0};
 800ba40:	463b      	mov	r3, r7
 800ba42:	2200      	movs	r2, #0
 800ba44:	601a      	str	r2, [r3, #0]
 800ba46:	605a      	str	r2, [r3, #4]
 800ba48:	609a      	str	r2, [r3, #8]
 800ba4a:	60da      	str	r2, [r3, #12]

	htim2.Instance = TIM2;
 800ba4c:	4b64      	ldr	r3, [pc, #400]	; (800bbe0 <timerInit+0x310>)
 800ba4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ba52:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72-1;
 800ba54:	4b62      	ldr	r3, [pc, #392]	; (800bbe0 <timerInit+0x310>)
 800ba56:	2247      	movs	r2, #71	; 0x47
 800ba58:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ba5a:	4b61      	ldr	r3, [pc, #388]	; (800bbe0 <timerInit+0x310>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFF;
 800ba60:	4b5f      	ldr	r3, [pc, #380]	; (800bbe0 <timerInit+0x310>)
 800ba62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba66:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ba68:	4b5d      	ldr	r3, [pc, #372]	; (800bbe0 <timerInit+0x310>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ba6e:	4b5c      	ldr	r3, [pc, #368]	; (800bbe0 <timerInit+0x310>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800ba74:	485a      	ldr	r0, [pc, #360]	; (800bbe0 <timerInit+0x310>)
 800ba76:	f003 fedf 	bl	800f838 <HAL_TIM_IC_Init>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <timerInit+0x1b4>
	{
		Error_Handler();
 800ba80:	f7f5 fd9a 	bl	80015b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ba84:	2300      	movs	r3, #0
 800ba86:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ba8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba90:	4619      	mov	r1, r3
 800ba92:	4853      	ldr	r0, [pc, #332]	; (800bbe0 <timerInit+0x310>)
 800ba94:	f004 ff0e 	bl	80108b4 <HAL_TIMEx_MasterConfigSynchronization>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d001      	beq.n	800baa2 <timerInit+0x1d2>
	{
		Error_Handler();
 800ba9e:	f7f5 fd8b 	bl	80015b8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800baa2:	2300      	movs	r3, #0
 800baa4:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800baa6:	2301      	movs	r3, #1
 800baa8:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800baaa:	2300      	movs	r3, #0
 800baac:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800bab2:	463b      	mov	r3, r7
 800bab4:	2200      	movs	r2, #0
 800bab6:	4619      	mov	r1, r3
 800bab8:	4849      	ldr	r0, [pc, #292]	; (800bbe0 <timerInit+0x310>)
 800baba:	f004 f91b 	bl	800fcf4 <HAL_TIM_IC_ConfigChannel>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d001      	beq.n	800bac8 <timerInit+0x1f8>
	{
		Error_Handler();
 800bac4:	f7f5 fd78 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800bac8:	463b      	mov	r3, r7
 800baca:	2204      	movs	r2, #4
 800bacc:	4619      	mov	r1, r3
 800bace:	4844      	ldr	r0, [pc, #272]	; (800bbe0 <timerInit+0x310>)
 800bad0:	f004 f910 	bl	800fcf4 <HAL_TIM_IC_ConfigChannel>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <timerInit+0x20e>
	{
		Error_Handler();
 800bada:	f7f5 fd6d 	bl	80015b8 <Error_Handler>
	}

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800bade:	2100      	movs	r1, #0
 800bae0:	483f      	ldr	r0, [pc, #252]	; (800bbe0 <timerInit+0x310>)
 800bae2:	f003 fef9 	bl	800f8d8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800bae6:	2104      	movs	r1, #4
 800bae8:	483d      	ldr	r0, [pc, #244]	; (800bbe0 <timerInit+0x310>)
 800baea:	f003 fef5 	bl	800f8d8 <HAL_TIM_IC_Start_IT>


	//timer3 init

	htim3.Instance = TIM3;
 800baee:	4b3d      	ldr	r3, [pc, #244]	; (800bbe4 <timerInit+0x314>)
 800baf0:	4a3d      	ldr	r2, [pc, #244]	; (800bbe8 <timerInit+0x318>)
 800baf2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72-1;
 800baf4:	4b3b      	ldr	r3, [pc, #236]	; (800bbe4 <timerInit+0x314>)
 800baf6:	2247      	movs	r2, #71	; 0x47
 800baf8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bafa:	4b3a      	ldr	r3, [pc, #232]	; (800bbe4 <timerInit+0x314>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800bb00:	4b38      	ldr	r3, [pc, #224]	; (800bbe4 <timerInit+0x314>)
 800bb02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb06:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bb08:	4b36      	ldr	r3, [pc, #216]	; (800bbe4 <timerInit+0x314>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bb0e:	4b35      	ldr	r3, [pc, #212]	; (800bbe4 <timerInit+0x314>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800bb14:	4833      	ldr	r0, [pc, #204]	; (800bbe4 <timerInit+0x314>)
 800bb16:	f003 fe8f 	bl	800f838 <HAL_TIM_IC_Init>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <timerInit+0x254>
	{
		Error_Handler();
 800bb20:	f7f5 fd4a 	bl	80015b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bb24:	2300      	movs	r3, #0
 800bb26:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800bb2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb30:	4619      	mov	r1, r3
 800bb32:	482c      	ldr	r0, [pc, #176]	; (800bbe4 <timerInit+0x314>)
 800bb34:	f004 febe 	bl	80108b4 <HAL_TIMEx_MasterConfigSynchronization>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d001      	beq.n	800bb42 <timerInit+0x272>
	{
		Error_Handler();
 800bb3e:	f7f5 fd3b 	bl	80015b8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800bb42:	2300      	movs	r3, #0
 800bb44:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800bb46:	2301      	movs	r3, #1
 800bb48:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800bb52:	463b      	mov	r3, r7
 800bb54:	2200      	movs	r2, #0
 800bb56:	4619      	mov	r1, r3
 800bb58:	4822      	ldr	r0, [pc, #136]	; (800bbe4 <timerInit+0x314>)
 800bb5a:	f004 f8cb 	bl	800fcf4 <HAL_TIM_IC_ConfigChannel>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d001      	beq.n	800bb68 <timerInit+0x298>
	{
		Error_Handler();
 800bb64:	f7f5 fd28 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800bb68:	463b      	mov	r3, r7
 800bb6a:	2204      	movs	r2, #4
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	481d      	ldr	r0, [pc, #116]	; (800bbe4 <timerInit+0x314>)
 800bb70:	f004 f8c0 	bl	800fcf4 <HAL_TIM_IC_ConfigChannel>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <timerInit+0x2ae>
	{
		Error_Handler();
 800bb7a:	f7f5 fd1d 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800bb7e:	463b      	mov	r3, r7
 800bb80:	2208      	movs	r2, #8
 800bb82:	4619      	mov	r1, r3
 800bb84:	4817      	ldr	r0, [pc, #92]	; (800bbe4 <timerInit+0x314>)
 800bb86:	f004 f8b5 	bl	800fcf4 <HAL_TIM_IC_ConfigChannel>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <timerInit+0x2c4>
	{
		Error_Handler();
 800bb90:	f7f5 fd12 	bl	80015b8 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800bb94:	463b      	mov	r3, r7
 800bb96:	220c      	movs	r2, #12
 800bb98:	4619      	mov	r1, r3
 800bb9a:	4812      	ldr	r0, [pc, #72]	; (800bbe4 <timerInit+0x314>)
 800bb9c:	f004 f8aa 	bl	800fcf4 <HAL_TIM_IC_ConfigChannel>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <timerInit+0x2da>
	{
		Error_Handler();
 800bba6:	f7f5 fd07 	bl	80015b8 <Error_Handler>
	}

	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800bbaa:	2100      	movs	r1, #0
 800bbac:	480d      	ldr	r0, [pc, #52]	; (800bbe4 <timerInit+0x314>)
 800bbae:	f003 fe93 	bl	800f8d8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800bbb2:	2104      	movs	r1, #4
 800bbb4:	480b      	ldr	r0, [pc, #44]	; (800bbe4 <timerInit+0x314>)
 800bbb6:	f003 fe8f 	bl	800f8d8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 800bbba:	2108      	movs	r1, #8
 800bbbc:	4809      	ldr	r0, [pc, #36]	; (800bbe4 <timerInit+0x314>)
 800bbbe:	f003 fe8b 	bl	800f8d8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 800bbc2:	210c      	movs	r1, #12
 800bbc4:	4807      	ldr	r0, [pc, #28]	; (800bbe4 <timerInit+0x314>)
 800bbc6:	f003 fe87 	bl	800f8d8 <HAL_TIM_IC_Start_IT>

	return ret;
 800bbca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3748      	adds	r7, #72	; 0x48
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20001310 	.word	0x20001310
 800bbdc:	40000800 	.word	0x40000800
 800bbe0:	200013a0 	.word	0x200013a0
 800bbe4:	20001358 	.word	0x20001358
 800bbe8:	40000400 	.word	0x40000400

0800bbec <HAL_TIM_IC_MspInit>:


void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b08c      	sub	sp, #48	; 0x30
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbf4:	f107 0320 	add.w	r3, r7, #32
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	601a      	str	r2, [r3, #0]
 800bbfc:	605a      	str	r2, [r3, #4]
 800bbfe:	609a      	str	r2, [r3, #8]
 800bc00:	60da      	str	r2, [r3, #12]
	if(tim_icHandle->Instance==TIM2)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc0a:	d12c      	bne.n	800bc66 <HAL_TIM_IC_MspInit+0x7a>
	{
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 800bc0c:	4b3c      	ldr	r3, [pc, #240]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc0e:	69db      	ldr	r3, [r3, #28]
 800bc10:	4a3b      	ldr	r2, [pc, #236]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc12:	f043 0301 	orr.w	r3, r3, #1
 800bc16:	61d3      	str	r3, [r2, #28]
 800bc18:	4b39      	ldr	r3, [pc, #228]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc1a:	69db      	ldr	r3, [r3, #28]
 800bc1c:	f003 0301 	and.w	r3, r3, #1
 800bc20:	61fb      	str	r3, [r7, #28]
 800bc22:	69fb      	ldr	r3, [r7, #28]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800bc24:	4b36      	ldr	r3, [pc, #216]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	4a35      	ldr	r2, [pc, #212]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc2a:	f043 0304 	orr.w	r3, r3, #4
 800bc2e:	6193      	str	r3, [r2, #24]
 800bc30:	4b33      	ldr	r3, [pc, #204]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	f003 0304 	and.w	r3, r3, #4
 800bc38:	61bb      	str	r3, [r7, #24]
 800bc3a:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP ------> TIM2_CH1
    PA1      ------> TIM2_CH2
    PA2      ------> TIM2_CH3  //UART2 reserved
    PA3      ------> TIM2_CH4  //UART2 reserved
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc40:	2300      	movs	r3, #0
 800bc42:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc48:	f107 0320 	add.w	r3, r7, #32
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	482d      	ldr	r0, [pc, #180]	; (800bd04 <HAL_TIM_IC_MspInit+0x118>)
 800bc50:	f001 f92e 	bl	800ceb0 <HAL_GPIO_Init>

		/* TIM2 interrupt Init */
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800bc54:	2200      	movs	r2, #0
 800bc56:	2100      	movs	r1, #0
 800bc58:	201c      	movs	r0, #28
 800bc5a:	f000 fe88 	bl	800c96e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800bc5e:	201c      	movs	r0, #28
 800bc60:	f000 fea1 	bl	800c9a6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 800bc64:	e048      	b.n	800bcf8 <HAL_TIM_IC_MspInit+0x10c>
	else if(tim_icHandle->Instance==TIM3)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a27      	ldr	r2, [pc, #156]	; (800bd08 <HAL_TIM_IC_MspInit+0x11c>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d143      	bne.n	800bcf8 <HAL_TIM_IC_MspInit+0x10c>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800bc70:	4b23      	ldr	r3, [pc, #140]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc72:	69db      	ldr	r3, [r3, #28]
 800bc74:	4a22      	ldr	r2, [pc, #136]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc76:	f043 0302 	orr.w	r3, r3, #2
 800bc7a:	61d3      	str	r3, [r2, #28]
 800bc7c:	4b20      	ldr	r3, [pc, #128]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc7e:	69db      	ldr	r3, [r3, #28]
 800bc80:	f003 0302 	and.w	r3, r3, #2
 800bc84:	617b      	str	r3, [r7, #20]
 800bc86:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800bc88:	4b1d      	ldr	r3, [pc, #116]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	4a1c      	ldr	r2, [pc, #112]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc8e:	f043 0304 	orr.w	r3, r3, #4
 800bc92:	6193      	str	r3, [r2, #24]
 800bc94:	4b1a      	ldr	r3, [pc, #104]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bc96:	699b      	ldr	r3, [r3, #24]
 800bc98:	f003 0304 	and.w	r3, r3, #4
 800bc9c:	613b      	str	r3, [r7, #16]
 800bc9e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800bca0:	4b17      	ldr	r3, [pc, #92]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bca2:	699b      	ldr	r3, [r3, #24]
 800bca4:	4a16      	ldr	r2, [pc, #88]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bca6:	f043 0308 	orr.w	r3, r3, #8
 800bcaa:	6193      	str	r3, [r2, #24]
 800bcac:	4b14      	ldr	r3, [pc, #80]	; (800bd00 <HAL_TIM_IC_MspInit+0x114>)
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	f003 0308 	and.w	r3, r3, #8
 800bcb4:	60fb      	str	r3, [r7, #12]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bcb8:	23c0      	movs	r3, #192	; 0xc0
 800bcba:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bcc4:	f107 0320 	add.w	r3, r7, #32
 800bcc8:	4619      	mov	r1, r3
 800bcca:	480e      	ldr	r0, [pc, #56]	; (800bd04 <HAL_TIM_IC_MspInit+0x118>)
 800bccc:	f001 f8f0 	bl	800ceb0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bcd0:	2303      	movs	r3, #3
 800bcd2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bcdc:	f107 0320 	add.w	r3, r7, #32
 800bce0:	4619      	mov	r1, r3
 800bce2:	480a      	ldr	r0, [pc, #40]	; (800bd0c <HAL_TIM_IC_MspInit+0x120>)
 800bce4:	f001 f8e4 	bl	800ceb0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800bce8:	2200      	movs	r2, #0
 800bcea:	2100      	movs	r1, #0
 800bcec:	201d      	movs	r0, #29
 800bcee:	f000 fe3e 	bl	800c96e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800bcf2:	201d      	movs	r0, #29
 800bcf4:	f000 fe57 	bl	800c9a6 <HAL_NVIC_EnableIRQ>
}
 800bcf8:	bf00      	nop
 800bcfa:	3730      	adds	r7, #48	; 0x30
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	40021000 	.word	0x40021000
 800bd04:	40010800 	.word	0x40010800
 800bd08:	40000400 	.word	0x40000400
 800bd0c:	40010c00 	.word	0x40010c00

0800bd10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]

	if(tim_baseHandle->Instance==TIM4)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a0d      	ldr	r2, [pc, #52]	; (800bd54 <HAL_TIM_Base_MspInit+0x44>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d113      	bne.n	800bd4a <HAL_TIM_Base_MspInit+0x3a>
	{
		/* USER CODE BEGIN TIM4_MspInit 0 */

		/* USER CODE END TIM4_MspInit 0 */
		/* TIM4 clock enable */
		__HAL_RCC_TIM4_CLK_ENABLE();
 800bd22:	4b0d      	ldr	r3, [pc, #52]	; (800bd58 <HAL_TIM_Base_MspInit+0x48>)
 800bd24:	69db      	ldr	r3, [r3, #28]
 800bd26:	4a0c      	ldr	r2, [pc, #48]	; (800bd58 <HAL_TIM_Base_MspInit+0x48>)
 800bd28:	f043 0304 	orr.w	r3, r3, #4
 800bd2c:	61d3      	str	r3, [r2, #28]
 800bd2e:	4b0a      	ldr	r3, [pc, #40]	; (800bd58 <HAL_TIM_Base_MspInit+0x48>)
 800bd30:	69db      	ldr	r3, [r3, #28]
 800bd32:	f003 0304 	and.w	r3, r3, #4
 800bd36:	60fb      	str	r3, [r7, #12]
 800bd38:	68fb      	ldr	r3, [r7, #12]

		/* TIM4 interrupt Init */
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	201e      	movs	r0, #30
 800bd40:	f000 fe15 	bl	800c96e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800bd44:	201e      	movs	r0, #30
 800bd46:	f000 fe2e 	bl	800c9a6 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	}
}
 800bd4a:	bf00      	nop
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	40000800 	.word	0x40000800
 800bd58:	40021000 	.word	0x40021000

0800bd5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b088      	sub	sp, #32
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd64:	f107 0310 	add.w	r3, r7, #16
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	605a      	str	r2, [r3, #4]
 800bd6e:	609a      	str	r2, [r3, #8]
 800bd70:	60da      	str	r2, [r3, #12]
	if(timHandle->Instance==TIM4)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a10      	ldr	r2, [pc, #64]	; (800bdb8 <HAL_TIM_MspPostInit+0x5c>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d118      	bne.n	800bdae <HAL_TIM_MspPostInit+0x52>
	{
		/* USER CODE BEGIN TIM4_MspPostInit 0 */

		/* USER CODE END TIM4_MspPostInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800bd7c:	4b0f      	ldr	r3, [pc, #60]	; (800bdbc <HAL_TIM_MspPostInit+0x60>)
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	4a0e      	ldr	r2, [pc, #56]	; (800bdbc <HAL_TIM_MspPostInit+0x60>)
 800bd82:	f043 0308 	orr.w	r3, r3, #8
 800bd86:	6193      	str	r3, [r2, #24]
 800bd88:	4b0c      	ldr	r3, [pc, #48]	; (800bdbc <HAL_TIM_MspPostInit+0x60>)
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	f003 0308 	and.w	r3, r3, #8
 800bd90:	60fb      	str	r3, [r7, #12]
 800bd92:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800bd94:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bd98:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd9a:	2302      	movs	r3, #2
 800bd9c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bda2:	f107 0310 	add.w	r3, r7, #16
 800bda6:	4619      	mov	r1, r3
 800bda8:	4805      	ldr	r0, [pc, #20]	; (800bdc0 <HAL_TIM_MspPostInit+0x64>)
 800bdaa:	f001 f881 	bl	800ceb0 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM4_MspPostInit 1 */

		/* USER CODE END TIM4_MspPostInit 1 */
	}

}
 800bdae:	bf00      	nop
 800bdb0:	3720      	adds	r7, #32
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	40000800 	.word	0x40000800
 800bdbc:	40021000 	.word	0x40021000
 800bdc0:	40010c00 	.word	0x40010c00

0800bdc4 <uartInit>:

static void MX_DMA_Init(void);


bool uartInit(void)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800bdca:	2300      	movs	r3, #0
 800bdcc:	607b      	str	r3, [r7, #4]
 800bdce:	e007      	b.n	800bde0 <uartInit+0x1c>
  {
    is_open[i] = false;
 800bdd0:	4a08      	ldr	r2, [pc, #32]	; (800bdf4 <uartInit+0x30>)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	3301      	adds	r3, #1
 800bdde:	607b      	str	r3, [r7, #4]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	ddf4      	ble.n	800bdd0 <uartInit+0xc>
  }

  MX_DMA_Init();
 800bde6:	f000 fbfd 	bl	800c5e4 <MX_DMA_Init>
  return true;
 800bdea:	2301      	movs	r3, #1
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	2000078c 	.word	0x2000078c

0800bdf8 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	4603      	mov	r3, r0
 800be00:	6039      	str	r1, [r7, #0]
 800be02:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800be04:	2300      	movs	r3, #0
 800be06:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 800be08:	79fb      	ldrb	r3, [r7, #7]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <uartOpen+0x1c>
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d06c      	beq.n	800beec <uartOpen+0xf4>
 800be12:	e0d7      	b.n	800bfc4 <uartOpen+0x1cc>
  {
    case _DEF_UART1:
    	huart1.Instance = USART1;
 800be14:	4b6e      	ldr	r3, [pc, #440]	; (800bfd0 <uartOpen+0x1d8>)
 800be16:	4a6f      	ldr	r2, [pc, #444]	; (800bfd4 <uartOpen+0x1dc>)
 800be18:	601a      	str	r2, [r3, #0]
    	huart1.Init.BaudRate = baud;
 800be1a:	4a6d      	ldr	r2, [pc, #436]	; (800bfd0 <uartOpen+0x1d8>)
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	6053      	str	r3, [r2, #4]
    	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800be20:	4b6b      	ldr	r3, [pc, #428]	; (800bfd0 <uartOpen+0x1d8>)
 800be22:	2200      	movs	r2, #0
 800be24:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 800be26:	4b6a      	ldr	r3, [pc, #424]	; (800bfd0 <uartOpen+0x1d8>)
 800be28:	2200      	movs	r2, #0
 800be2a:	60da      	str	r2, [r3, #12]
    	huart1.Init.Parity = UART_PARITY_NONE;
 800be2c:	4b68      	ldr	r3, [pc, #416]	; (800bfd0 <uartOpen+0x1d8>)
 800be2e:	2200      	movs	r2, #0
 800be30:	611a      	str	r2, [r3, #16]
    	huart1.Init.Mode = UART_MODE_TX_RX;
 800be32:	4b67      	ldr	r3, [pc, #412]	; (800bfd0 <uartOpen+0x1d8>)
 800be34:	220c      	movs	r2, #12
 800be36:	615a      	str	r2, [r3, #20]
    	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800be38:	4b65      	ldr	r3, [pc, #404]	; (800bfd0 <uartOpen+0x1d8>)
 800be3a:	2200      	movs	r2, #0
 800be3c:	619a      	str	r2, [r3, #24]
    	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800be3e:	4b64      	ldr	r3, [pc, #400]	; (800bfd0 <uartOpen+0x1d8>)
 800be40:	2200      	movs	r2, #0
 800be42:	61da      	str	r2, [r3, #28]

    	QueueCreate(&ring_buffer[ch], &u1_rx_buf[0], MAX_SIZE);
 800be44:	79fa      	ldrb	r2, [r7, #7]
 800be46:	4613      	mov	r3, r2
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	4413      	add	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4a62      	ldr	r2, [pc, #392]	; (800bfd8 <uartOpen+0x1e0>)
 800be50:	4413      	add	r3, r2
 800be52:	22ff      	movs	r2, #255	; 0xff
 800be54:	4961      	ldr	r1, [pc, #388]	; (800bfdc <uartOpen+0x1e4>)
 800be56:	4618      	mov	r0, r3
 800be58:	f7fa f900 	bl	800605c <QueueCreate>

    	if (HAL_UART_Init(&huart1) != HAL_OK)
 800be5c:	485c      	ldr	r0, [pc, #368]	; (800bfd0 <uartOpen+0x1d8>)
 800be5e:	f004 fd99 	bl	8010994 <HAL_UART_Init>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d002      	beq.n	800be6e <uartOpen+0x76>
    	{
    	  Error_Handler();
 800be68:	f7f5 fba6 	bl	80015b8 <Error_Handler>
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart1_rx.Instance->CNDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
    	}
      break;
 800be6c:	e0aa      	b.n	800bfc4 <uartOpen+0x1cc>
    		ret = true;
 800be6e:	2301      	movs	r3, #1
 800be70:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 800be72:	79fb      	ldrb	r3, [r7, #7]
 800be74:	4a5a      	ldr	r2, [pc, #360]	; (800bfe0 <uartOpen+0x1e8>)
 800be76:	2101      	movs	r1, #1
 800be78:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&u1_rx_buf[0], MAX_SIZE) != HAL_OK)
 800be7a:	22ff      	movs	r2, #255	; 0xff
 800be7c:	4957      	ldr	r1, [pc, #348]	; (800bfdc <uartOpen+0x1e4>)
 800be7e:	4854      	ldr	r0, [pc, #336]	; (800bfd0 <uartOpen+0x1d8>)
 800be80:	f004 feac 	bl	8010bdc <HAL_UART_Receive_DMA>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <uartOpen+0x96>
          ret = false;
 800be8a:	2300      	movs	r3, #0
 800be8c:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart1_rx.Instance->CNDTR;
 800be8e:	79fa      	ldrb	r2, [r7, #7]
 800be90:	4951      	ldr	r1, [pc, #324]	; (800bfd8 <uartOpen+0x1e0>)
 800be92:	4613      	mov	r3, r2
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	440b      	add	r3, r1
 800be9c:	3306      	adds	r3, #6
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	b2d9      	uxtb	r1, r3
 800bea2:	4b50      	ldr	r3, [pc, #320]	; (800bfe4 <uartOpen+0x1ec>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	79fa      	ldrb	r2, [r7, #7]
 800beac:	1acb      	subs	r3, r1, r3
 800beae:	b2d8      	uxtb	r0, r3
 800beb0:	4949      	ldr	r1, [pc, #292]	; (800bfd8 <uartOpen+0x1e0>)
 800beb2:	4613      	mov	r3, r2
 800beb4:	005b      	lsls	r3, r3, #1
 800beb6:	4413      	add	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	440b      	add	r3, r1
 800bebc:	3304      	adds	r3, #4
 800bebe:	4602      	mov	r2, r0
 800bec0:	701a      	strb	r2, [r3, #0]
        ring_buffer[ch].tail = ring_buffer[ch].head;
 800bec2:	79f9      	ldrb	r1, [r7, #7]
 800bec4:	79fa      	ldrb	r2, [r7, #7]
 800bec6:	4844      	ldr	r0, [pc, #272]	; (800bfd8 <uartOpen+0x1e0>)
 800bec8:	460b      	mov	r3, r1
 800beca:	005b      	lsls	r3, r3, #1
 800becc:	440b      	add	r3, r1
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4403      	add	r3, r0
 800bed2:	3304      	adds	r3, #4
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	b2d8      	uxtb	r0, r3
 800bed8:	493f      	ldr	r1, [pc, #252]	; (800bfd8 <uartOpen+0x1e0>)
 800beda:	4613      	mov	r3, r2
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	4413      	add	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	440b      	add	r3, r1
 800bee4:	3305      	adds	r3, #5
 800bee6:	4602      	mov	r2, r0
 800bee8:	701a      	strb	r2, [r3, #0]
      break;
 800beea:	e06b      	b.n	800bfc4 <uartOpen+0x1cc>

    case _DEF_UART2:
      huart2.Instance = USART2;
 800beec:	4b3e      	ldr	r3, [pc, #248]	; (800bfe8 <uartOpen+0x1f0>)
 800beee:	4a3f      	ldr	r2, [pc, #252]	; (800bfec <uartOpen+0x1f4>)
 800bef0:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 800bef2:	4a3d      	ldr	r2, [pc, #244]	; (800bfe8 <uartOpen+0x1f0>)
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800bef8:	4b3b      	ldr	r3, [pc, #236]	; (800bfe8 <uartOpen+0x1f0>)
 800befa:	2200      	movs	r2, #0
 800befc:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 800befe:	4b3a      	ldr	r3, [pc, #232]	; (800bfe8 <uartOpen+0x1f0>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 800bf04:	4b38      	ldr	r3, [pc, #224]	; (800bfe8 <uartOpen+0x1f0>)
 800bf06:	2200      	movs	r2, #0
 800bf08:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 800bf0a:	4b37      	ldr	r3, [pc, #220]	; (800bfe8 <uartOpen+0x1f0>)
 800bf0c:	220c      	movs	r2, #12
 800bf0e:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bf10:	4b35      	ldr	r3, [pc, #212]	; (800bfe8 <uartOpen+0x1f0>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800bf16:	4b34      	ldr	r3, [pc, #208]	; (800bfe8 <uartOpen+0x1f0>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	61da      	str	r2, [r3, #28]

      QueueCreate(&ring_buffer[ch], &u2_rx_buf[0], MAX_SIZE);
 800bf1c:	79fa      	ldrb	r2, [r7, #7]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	4413      	add	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4a2c      	ldr	r2, [pc, #176]	; (800bfd8 <uartOpen+0x1e0>)
 800bf28:	4413      	add	r3, r2
 800bf2a:	22ff      	movs	r2, #255	; 0xff
 800bf2c:	4930      	ldr	r1, [pc, #192]	; (800bff0 <uartOpen+0x1f8>)
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fa f894 	bl	800605c <QueueCreate>

      if (HAL_UART_Init(&huart2) != HAL_OK)
 800bf34:	482c      	ldr	r0, [pc, #176]	; (800bfe8 <uartOpen+0x1f0>)
 800bf36:	f004 fd2d 	bl	8010994 <HAL_UART_Init>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d002      	beq.n	800bf46 <uartOpen+0x14e>
      {
        ret = false;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart2_rx.Instance->CNDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
      }
      break;
 800bf44:	e03d      	b.n	800bfc2 <uartOpen+0x1ca>
        ret = true;
 800bf46:	2301      	movs	r3, #1
 800bf48:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 800bf4a:	79fb      	ldrb	r3, [r7, #7]
 800bf4c:	4a24      	ldr	r2, [pc, #144]	; (800bfe0 <uartOpen+0x1e8>)
 800bf4e:	2101      	movs	r1, #1
 800bf50:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&u2_rx_buf[0], MAX_SIZE) != HAL_OK)
 800bf52:	22ff      	movs	r2, #255	; 0xff
 800bf54:	4926      	ldr	r1, [pc, #152]	; (800bff0 <uartOpen+0x1f8>)
 800bf56:	4824      	ldr	r0, [pc, #144]	; (800bfe8 <uartOpen+0x1f0>)
 800bf58:	f004 fe40 	bl	8010bdc <HAL_UART_Receive_DMA>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d001      	beq.n	800bf66 <uartOpen+0x16e>
          ret = false;
 800bf62:	2300      	movs	r3, #0
 800bf64:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart2_rx.Instance->CNDTR;
 800bf66:	79fa      	ldrb	r2, [r7, #7]
 800bf68:	491b      	ldr	r1, [pc, #108]	; (800bfd8 <uartOpen+0x1e0>)
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	4413      	add	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	440b      	add	r3, r1
 800bf74:	3306      	adds	r3, #6
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	b2d9      	uxtb	r1, r3
 800bf7a:	4b1e      	ldr	r3, [pc, #120]	; (800bff4 <uartOpen+0x1fc>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	79fa      	ldrb	r2, [r7, #7]
 800bf84:	1acb      	subs	r3, r1, r3
 800bf86:	b2d8      	uxtb	r0, r3
 800bf88:	4913      	ldr	r1, [pc, #76]	; (800bfd8 <uartOpen+0x1e0>)
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	4413      	add	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	440b      	add	r3, r1
 800bf94:	3304      	adds	r3, #4
 800bf96:	4602      	mov	r2, r0
 800bf98:	701a      	strb	r2, [r3, #0]
        ring_buffer[ch].tail = ring_buffer[ch].head;
 800bf9a:	79f9      	ldrb	r1, [r7, #7]
 800bf9c:	79fa      	ldrb	r2, [r7, #7]
 800bf9e:	480e      	ldr	r0, [pc, #56]	; (800bfd8 <uartOpen+0x1e0>)
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	440b      	add	r3, r1
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4403      	add	r3, r0
 800bfaa:	3304      	adds	r3, #4
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	b2d8      	uxtb	r0, r3
 800bfb0:	4909      	ldr	r1, [pc, #36]	; (800bfd8 <uartOpen+0x1e0>)
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	005b      	lsls	r3, r3, #1
 800bfb6:	4413      	add	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	440b      	add	r3, r1
 800bfbc:	3305      	adds	r3, #5
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	701a      	strb	r2, [r3, #0]
      break;
 800bfc2:	bf00      	nop
  }

  return ret;
 800bfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	200014f8 	.word	0x200014f8
 800bfd4:	40013800 	.word	0x40013800
 800bfd8:	20000790 	.word	0x20000790
 800bfdc:	200007a8 	.word	0x200007a8
 800bfe0:	2000078c 	.word	0x2000078c
 800bfe4:	20001470 	.word	0x20001470
 800bfe8:	20001538 	.word	0x20001538
 800bfec:	40004400 	.word	0x40004400
 800bff0:	200008a8 	.word	0x200008a8
 800bff4:	200013e8 	.word	0x200013e8

0800bff8 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	4603      	mov	r3, r0
 800c000:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800c002:	2300      	movs	r3, #0
 800c004:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <uartAvailable+0x1a>
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d026      	beq.n	800c05e <uartAvailable+0x66>
 800c010:	e04b      	b.n	800c0aa <uartAvailable+0xb2>
  {
    case _DEF_UART1:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_usart1_rx.Instance->CNDTR);
 800c012:	79fa      	ldrb	r2, [r7, #7]
 800c014:	4927      	ldr	r1, [pc, #156]	; (800c0b4 <uartAvailable+0xbc>)
 800c016:	4613      	mov	r3, r2
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	4413      	add	r3, r2
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	440b      	add	r3, r1
 800c020:	3306      	adds	r3, #6
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	b2d9      	uxtb	r1, r3
 800c026:	4b24      	ldr	r3, [pc, #144]	; (800c0b8 <uartAvailable+0xc0>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	79fa      	ldrb	r2, [r7, #7]
 800c030:	1acb      	subs	r3, r1, r3
 800c032:	b2d8      	uxtb	r0, r3
 800c034:	491f      	ldr	r1, [pc, #124]	; (800c0b4 <uartAvailable+0xbc>)
 800c036:	4613      	mov	r3, r2
 800c038:	005b      	lsls	r3, r3, #1
 800c03a:	4413      	add	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	440b      	add	r3, r1
 800c040:	3304      	adds	r3, #4
 800c042:	4602      	mov	r2, r0
 800c044:	701a      	strb	r2, [r3, #0]
      ret = QueueAvailable(&ring_buffer[ch]);
 800c046:	79fa      	ldrb	r2, [r7, #7]
 800c048:	4613      	mov	r3, r2
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	4413      	add	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4a18      	ldr	r2, [pc, #96]	; (800c0b4 <uartAvailable+0xbc>)
 800c052:	4413      	add	r3, r2
 800c054:	4618      	mov	r0, r3
 800c056:	f7fa f873 	bl	8006140 <QueueAvailable>
 800c05a:	60f8      	str	r0, [r7, #12]
      break;
 800c05c:	e025      	b.n	800c0aa <uartAvailable+0xb2>

    case _DEF_UART2:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_usart2_rx.Instance->CNDTR);
 800c05e:	79fa      	ldrb	r2, [r7, #7]
 800c060:	4914      	ldr	r1, [pc, #80]	; (800c0b4 <uartAvailable+0xbc>)
 800c062:	4613      	mov	r3, r2
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	440b      	add	r3, r1
 800c06c:	3306      	adds	r3, #6
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	b2d9      	uxtb	r1, r3
 800c072:	4b12      	ldr	r3, [pc, #72]	; (800c0bc <uartAvailable+0xc4>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	79fa      	ldrb	r2, [r7, #7]
 800c07c:	1acb      	subs	r3, r1, r3
 800c07e:	b2d8      	uxtb	r0, r3
 800c080:	490c      	ldr	r1, [pc, #48]	; (800c0b4 <uartAvailable+0xbc>)
 800c082:	4613      	mov	r3, r2
 800c084:	005b      	lsls	r3, r3, #1
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	440b      	add	r3, r1
 800c08c:	3304      	adds	r3, #4
 800c08e:	4602      	mov	r2, r0
 800c090:	701a      	strb	r2, [r3, #0]
      ret = QueueAvailable(&ring_buffer[ch]);
 800c092:	79fa      	ldrb	r2, [r7, #7]
 800c094:	4613      	mov	r3, r2
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	4413      	add	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4a05      	ldr	r2, [pc, #20]	; (800c0b4 <uartAvailable+0xbc>)
 800c09e:	4413      	add	r3, r2
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fa f84d 	bl	8006140 <QueueAvailable>
 800c0a6:	60f8      	str	r0, [r7, #12]
      break;
 800c0a8:	bf00      	nop
  }

  return ret;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	20000790 	.word	0x20000790
 800c0b8:	20001470 	.word	0x20001470
 800c0bc:	200013e8 	.word	0x200013e8

0800c0c0 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800c0ce:	79fb      	ldrb	r3, [r7, #7]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d002      	beq.n	800c0da <uartRead+0x1a>
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d008      	beq.n	800c0ea <uartRead+0x2a>
 800c0d8:	e00f      	b.n	800c0fa <uartRead+0x3a>
  {
    case _DEF_UART1:
    	Q_read(&ring_buffer[_DEF_UART1], &ret, 1);
 800c0da:	f107 030f 	add.w	r3, r7, #15
 800c0de:	2201      	movs	r2, #1
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	4808      	ldr	r0, [pc, #32]	; (800c104 <uartRead+0x44>)
 800c0e4:	f7f9 ffee 	bl	80060c4 <Q_read>
      break;
 800c0e8:	e007      	b.n	800c0fa <uartRead+0x3a>

    case _DEF_UART2:
    	Q_read(&ring_buffer[_DEF_UART2], &ret, 1);
 800c0ea:	f107 030f 	add.w	r3, r7, #15
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	4805      	ldr	r0, [pc, #20]	; (800c108 <uartRead+0x48>)
 800c0f4:	f7f9 ffe6 	bl	80060c4 <Q_read>
      break;
 800c0f8:	bf00      	nop
  }

  return ret;
 800c0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	20000790 	.word	0x20000790
 800c108:	2000079c 	.word	0x2000079c

0800c10c <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b086      	sub	sp, #24
 800c110:	af00      	add	r7, sp, #0
 800c112:	4603      	mov	r3, r0
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
 800c118:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 800c11e:	7bfb      	ldrb	r3, [r7, #15]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <uartWrite+0x1e>
 800c124:	2b01      	cmp	r3, #1
 800c126:	d00f      	beq.n	800c148 <uartWrite+0x3c>
 800c128:	e020      	b.n	800c16c <uartWrite+0x60>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	2364      	movs	r3, #100	; 0x64
 800c130:	68b9      	ldr	r1, [r7, #8]
 800c132:	4811      	ldr	r0, [pc, #68]	; (800c178 <uartWrite+0x6c>)
 800c134:	f004 fc7b 	bl	8010a2e <HAL_UART_Transmit>
 800c138:	4603      	mov	r3, r0
 800c13a:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800c13c:	7cfb      	ldrb	r3, [r7, #19]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d111      	bne.n	800c166 <uartWrite+0x5a>
      {
        ret = length;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	617b      	str	r3, [r7, #20]
      }
      break;
 800c146:	e00e      	b.n	800c166 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart2, p_data, length, 100);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	2364      	movs	r3, #100	; 0x64
 800c14e:	68b9      	ldr	r1, [r7, #8]
 800c150:	480a      	ldr	r0, [pc, #40]	; (800c17c <uartWrite+0x70>)
 800c152:	f004 fc6c 	bl	8010a2e <HAL_UART_Transmit>
 800c156:	4603      	mov	r3, r0
 800c158:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800c15a:	7cfb      	ldrb	r3, [r7, #19]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d104      	bne.n	800c16a <uartWrite+0x5e>
      {
        ret = length;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	617b      	str	r3, [r7, #20]
      }
      break;
 800c164:	e001      	b.n	800c16a <uartWrite+0x5e>
      break;
 800c166:	bf00      	nop
 800c168:	e000      	b.n	800c16c <uartWrite+0x60>
      break;
 800c16a:	bf00      	nop
  }

  return ret;
 800c16c:	697b      	ldr	r3, [r7, #20]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3718      	adds	r7, #24
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	200014f8 	.word	0x200014f8
 800c17c:	20001538 	.word	0x20001538

0800c180 <uartWriteIT>:

uint32_t uartWriteIT(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
 800c18c:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800c18e:	2300      	movs	r3, #0
 800c190:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 800c192:	7bfb      	ldrb	r3, [r7, #15]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d002      	beq.n	800c19e <uartWriteIT+0x1e>
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d00f      	beq.n	800c1bc <uartWriteIT+0x3c>
 800c19c:	e020      	b.n	800c1e0 <uartWriteIT+0x60>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit_IT(&huart1, p_data, length);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	4811      	ldr	r0, [pc, #68]	; (800c1ec <uartWriteIT+0x6c>)
 800c1a8:	f004 fcd3 	bl	8010b52 <HAL_UART_Transmit_IT>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800c1b0:	7cfb      	ldrb	r3, [r7, #19]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d111      	bne.n	800c1da <uartWriteIT+0x5a>
      {
        ret = length;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	617b      	str	r3, [r7, #20]
      }
      break;
 800c1ba:	e00e      	b.n	800c1da <uartWriteIT+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit_IT(&huart2, p_data, length);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	68b9      	ldr	r1, [r7, #8]
 800c1c4:	480a      	ldr	r0, [pc, #40]	; (800c1f0 <uartWriteIT+0x70>)
 800c1c6:	f004 fcc4 	bl	8010b52 <HAL_UART_Transmit_IT>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800c1ce:	7cfb      	ldrb	r3, [r7, #19]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d104      	bne.n	800c1de <uartWriteIT+0x5e>
      {
        ret = length;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	617b      	str	r3, [r7, #20]
      }
      break;
 800c1d8:	e001      	b.n	800c1de <uartWriteIT+0x5e>
      break;
 800c1da:	bf00      	nop
 800c1dc:	e000      	b.n	800c1e0 <uartWriteIT+0x60>
      break;
 800c1de:	bf00      	nop
  }

  return ret;
 800c1e0:	697b      	ldr	r3, [r7, #20]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	200014f8 	.word	0x200014f8
 800c1f0:	20001538 	.word	0x20001538

0800c1f4 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800c1f4:	b40e      	push	{r1, r2, r3}
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b0c7      	sub	sp, #284	; 0x11c
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	1dfb      	adds	r3, r7, #7
 800c200:	701a      	strb	r2, [r3, #0]
  char buf[MAX_SIZE];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800c202:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800c206:	f107 030c 	add.w	r3, r7, #12
 800c20a:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, MAX_SIZE, fmt, args);
 800c20c:	f107 030c 	add.w	r3, r7, #12
 800c210:	f107 0010 	add.w	r0, r7, #16
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c21a:	21ff      	movs	r1, #255	; 0xff
 800c21c:	f006 fd4e 	bl	8012cbc <vsniprintf>
 800c220:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800c224:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c228:	f107 0110 	add.w	r1, r7, #16
 800c22c:	1dfb      	adds	r3, r7, #7
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	4618      	mov	r0, r3
 800c232:	f7ff ff6b 	bl	800c10c <uartWrite>
 800c236:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 800c23a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800c23e:	4618      	mov	r0, r3
 800c240:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800c244:	46bd      	mov	sp, r7
 800c246:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c24a:	b003      	add	sp, #12
 800c24c:	4770      	bx	lr
	...

0800c250 <uartGetBaud>:

  return ret;
}

uint32_t uartGetBaud(uint8_t ch)
{
 800c250:	b480      	push	{r7}
 800c252:	b085      	sub	sp, #20
 800c254:	af00      	add	r7, sp, #0
 800c256:	4603      	mov	r3, r0
 800c258:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	60fb      	str	r3, [r7, #12]


  switch(ch)
 800c25e:	79fb      	ldrb	r3, [r7, #7]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <uartGetBaud+0x1a>
 800c264:	2b01      	cmp	r3, #1
 800c266:	d004      	beq.n	800c272 <uartGetBaud+0x22>
 800c268:	e007      	b.n	800c27a <uartGetBaud+0x2a>
  {
    case _DEF_UART1:
      ret = huart1.Init.BaudRate;
 800c26a:	4b07      	ldr	r3, [pc, #28]	; (800c288 <uartGetBaud+0x38>)
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	60fb      	str	r3, [r7, #12]
      break;
 800c270:	e003      	b.n	800c27a <uartGetBaud+0x2a>

    case _DEF_UART2:
      ret = huart2.Init.BaudRate;
 800c272:	4b06      	ldr	r3, [pc, #24]	; (800c28c <uartGetBaud+0x3c>)
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	60fb      	str	r3, [r7, #12]
      break;
 800c278:	bf00      	nop
  }

  return ret;
 800c27a:	68fb      	ldr	r3, [r7, #12]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3714      	adds	r7, #20
 800c280:	46bd      	mov	sp, r7
 800c282:	bc80      	pop	{r7}
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	200014f8 	.word	0x200014f8
 800c28c:	20001538 	.word	0x20001538

0800c290 <uartSetBaud>:

bool uartSetBaud(uint8_t ch, uint32_t baud)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	4603      	mov	r3, r0
 800c298:	6039      	str	r1, [r7, #0]
 800c29a:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 800c29c:	2300      	movs	r3, #0
 800c29e:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 800c2a0:	79fb      	ldrb	r3, [r7, #7]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <uartSetBaud+0x1c>
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d00f      	beq.n	800c2ca <uartSetBaud+0x3a>
 800c2aa:	e01d      	b.n	800c2e8 <uartSetBaud+0x58>
	{
		case _DEF_UART1:
			huart1.Init.BaudRate = baud;
 800c2ac:	4a11      	ldr	r2, [pc, #68]	; (800c2f4 <uartSetBaud+0x64>)
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart1) != HAL_OK)
 800c2b2:	4810      	ldr	r0, [pc, #64]	; (800c2f4 <uartSetBaud+0x64>)
 800c2b4:	f004 fb6e 	bl	8010994 <HAL_UART_Init>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <uartSetBaud+0x34>
    	{
    	  Error_Handler();
 800c2be:	f7f5 f97b 	bl	80015b8 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 800c2c2:	e011      	b.n	800c2e8 <uartSetBaud+0x58>
    		ret = true;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	73fb      	strb	r3, [r7, #15]
			break;
 800c2c8:	e00e      	b.n	800c2e8 <uartSetBaud+0x58>

		case _DEF_UART2:
			huart2.Init.BaudRate = baud;
 800c2ca:	4a0b      	ldr	r2, [pc, #44]	; (800c2f8 <uartSetBaud+0x68>)
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart2) != HAL_OK)
 800c2d0:	4809      	ldr	r0, [pc, #36]	; (800c2f8 <uartSetBaud+0x68>)
 800c2d2:	f004 fb5f 	bl	8010994 <HAL_UART_Init>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <uartSetBaud+0x52>
    	{
    	  Error_Handler();
 800c2dc:	f7f5 f96c 	bl	80015b8 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 800c2e0:	e001      	b.n	800c2e6 <uartSetBaud+0x56>
    		ret = true;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	73fb      	strb	r3, [r7, #15]
			break;
 800c2e6:	bf00      	nop
	}

	return ret;
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	200014f8 	.word	0x200014f8
 800c2f8:	20001538 	.word	0x20001538

0800c2fc <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }

  if(huart->ErrorCode == HAL_UART_ERROR_FE) //current USART
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c308:	2b04      	cmp	r3, #4
 800c30a:	d109      	bne.n	800c320 <HAL_UART_ErrorCallback+0x24>
  {
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)&u1_rx_buf[0], 1);
 800c30c:	2201      	movs	r2, #1
 800c30e:	490d      	ldr	r1, [pc, #52]	; (800c344 <HAL_UART_ErrorCallback+0x48>)
 800c310:	480d      	ldr	r0, [pc, #52]	; (800c348 <HAL_UART_ErrorCallback+0x4c>)
 800c312:	f004 fc63 	bl	8010bdc <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, (uint8_t*)&u2_rx_buf[0], 1);
 800c316:	2201      	movs	r2, #1
 800c318:	490c      	ldr	r1, [pc, #48]	; (800c34c <HAL_UART_ErrorCallback+0x50>)
 800c31a:	480d      	ldr	r0, [pc, #52]	; (800c350 <HAL_UART_ErrorCallback+0x54>)
 800c31c:	f004 fc5e 	bl	8010bdc <HAL_UART_Receive_DMA>
  }
  if(huart->ErrorCode == HAL_UART_ERROR_NE) //current USART
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c324:	2b02      	cmp	r3, #2
 800c326:	d109      	bne.n	800c33c <HAL_UART_ErrorCallback+0x40>
  {
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)&u1_rx_buf[0], 1);
 800c328:	2201      	movs	r2, #1
 800c32a:	4906      	ldr	r1, [pc, #24]	; (800c344 <HAL_UART_ErrorCallback+0x48>)
 800c32c:	4806      	ldr	r0, [pc, #24]	; (800c348 <HAL_UART_ErrorCallback+0x4c>)
 800c32e:	f004 fc55 	bl	8010bdc <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, (uint8_t*)&u2_rx_buf[0], 1);
 800c332:	2201      	movs	r2, #1
 800c334:	4905      	ldr	r1, [pc, #20]	; (800c34c <HAL_UART_ErrorCallback+0x50>)
 800c336:	4806      	ldr	r0, [pc, #24]	; (800c350 <HAL_UART_ErrorCallback+0x54>)
 800c338:	f004 fc50 	bl	8010bdc <HAL_UART_Receive_DMA>
  }
}
 800c33c:	bf00      	nop
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	200007a8 	.word	0x200007a8
 800c348:	200014f8 	.word	0x200014f8
 800c34c:	200008a8 	.word	0x200008a8
 800c350:	20001538 	.word	0x20001538

0800c354 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
//  }
//  else if(huart->Instance == USART2)
//  {
//  	Q_write(&ring_buffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//  }
}
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	bc80      	pop	{r7}
 800c364:	4770      	bx	lr
	...

0800c368 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b08a      	sub	sp, #40	; 0x28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c370:	f107 0318 	add.w	r3, r7, #24
 800c374:	2200      	movs	r2, #0
 800c376:	601a      	str	r2, [r3, #0]
 800c378:	605a      	str	r2, [r3, #4]
 800c37a:	609a      	str	r2, [r3, #8]
 800c37c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a8c      	ldr	r2, [pc, #560]	; (800c5b4 <HAL_UART_MspInit+0x24c>)
 800c384:	4293      	cmp	r3, r2
 800c386:	f040 8087 	bne.w	800c498 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c38a:	4b8b      	ldr	r3, [pc, #556]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c38c:	699b      	ldr	r3, [r3, #24]
 800c38e:	4a8a      	ldr	r2, [pc, #552]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c394:	6193      	str	r3, [r2, #24]
 800c396:	4b88      	ldr	r3, [pc, #544]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c39e:	617b      	str	r3, [r7, #20]
 800c3a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3a2:	4b85      	ldr	r3, [pc, #532]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c3a4:	699b      	ldr	r3, [r3, #24]
 800c3a6:	4a84      	ldr	r2, [pc, #528]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c3a8:	f043 0304 	orr.w	r3, r3, #4
 800c3ac:	6193      	str	r3, [r2, #24]
 800c3ae:	4b82      	ldr	r3, [pc, #520]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c3b0:	699b      	ldr	r3, [r3, #24]
 800c3b2:	f003 0304 	and.w	r3, r3, #4
 800c3b6:	613b      	str	r3, [r7, #16]
 800c3b8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c3ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c3c4:	2303      	movs	r3, #3
 800c3c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3c8:	f107 0318 	add.w	r3, r7, #24
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	487b      	ldr	r0, [pc, #492]	; (800c5bc <HAL_UART_MspInit+0x254>)
 800c3d0:	f000 fd6e 	bl	800ceb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c3d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3e2:	f107 0318 	add.w	r3, r7, #24
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4874      	ldr	r0, [pc, #464]	; (800c5bc <HAL_UART_MspInit+0x254>)
 800c3ea:	f000 fd61 	bl	800ceb0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800c3ee:	4b74      	ldr	r3, [pc, #464]	; (800c5c0 <HAL_UART_MspInit+0x258>)
 800c3f0:	4a74      	ldr	r2, [pc, #464]	; (800c5c4 <HAL_UART_MspInit+0x25c>)
 800c3f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c3f4:	4b72      	ldr	r3, [pc, #456]	; (800c5c0 <HAL_UART_MspInit+0x258>)
 800c3f6:	2210      	movs	r2, #16
 800c3f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c3fa:	4b71      	ldr	r3, [pc, #452]	; (800c5c0 <HAL_UART_MspInit+0x258>)
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c400:	4b6f      	ldr	r3, [pc, #444]	; (800c5c0 <HAL_UART_MspInit+0x258>)
 800c402:	2280      	movs	r2, #128	; 0x80
 800c404:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c406:	4b6e      	ldr	r3, [pc, #440]	; (800c5c0 <HAL_UART_MspInit+0x258>)
 800c408:	2200      	movs	r2, #0
 800c40a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c40c:	4b6c      	ldr	r3, [pc, #432]	; (800c5c0 <HAL_UART_MspInit+0x258>)
 800c40e:	2200      	movs	r2, #0
 800c410:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800c412:	4b6b      	ldr	r3, [pc, #428]	; (800c5c0 <HAL_UART_MspInit+0x258>)
 800c414:	2200      	movs	r2, #0
 800c416:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c418:	4b69      	ldr	r3, [pc, #420]	; (800c5c0 <HAL_UART_MspInit+0x258>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800c41e:	4868      	ldr	r0, [pc, #416]	; (800c5c0 <HAL_UART_MspInit+0x258>)
 800c420:	f000 fae2 	bl	800c9e8 <HAL_DMA_Init>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800c42a:	f7f5 f8c5 	bl	80015b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a63      	ldr	r2, [pc, #396]	; (800c5c0 <HAL_UART_MspInit+0x258>)
 800c432:	631a      	str	r2, [r3, #48]	; 0x30
 800c434:	4a62      	ldr	r2, [pc, #392]	; (800c5c0 <HAL_UART_MspInit+0x258>)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800c43a:	4b63      	ldr	r3, [pc, #396]	; (800c5c8 <HAL_UART_MspInit+0x260>)
 800c43c:	4a63      	ldr	r2, [pc, #396]	; (800c5cc <HAL_UART_MspInit+0x264>)
 800c43e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c440:	4b61      	ldr	r3, [pc, #388]	; (800c5c8 <HAL_UART_MspInit+0x260>)
 800c442:	2200      	movs	r2, #0
 800c444:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c446:	4b60      	ldr	r3, [pc, #384]	; (800c5c8 <HAL_UART_MspInit+0x260>)
 800c448:	2200      	movs	r2, #0
 800c44a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c44c:	4b5e      	ldr	r3, [pc, #376]	; (800c5c8 <HAL_UART_MspInit+0x260>)
 800c44e:	2280      	movs	r2, #128	; 0x80
 800c450:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c452:	4b5d      	ldr	r3, [pc, #372]	; (800c5c8 <HAL_UART_MspInit+0x260>)
 800c454:	2200      	movs	r2, #0
 800c456:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c458:	4b5b      	ldr	r3, [pc, #364]	; (800c5c8 <HAL_UART_MspInit+0x260>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800c45e:	4b5a      	ldr	r3, [pc, #360]	; (800c5c8 <HAL_UART_MspInit+0x260>)
 800c460:	2220      	movs	r2, #32
 800c462:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c464:	4b58      	ldr	r3, [pc, #352]	; (800c5c8 <HAL_UART_MspInit+0x260>)
 800c466:	2200      	movs	r2, #0
 800c468:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800c46a:	4857      	ldr	r0, [pc, #348]	; (800c5c8 <HAL_UART_MspInit+0x260>)
 800c46c:	f000 fabc 	bl	800c9e8 <HAL_DMA_Init>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d001      	beq.n	800c47a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800c476:	f7f5 f89f 	bl	80015b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a52      	ldr	r2, [pc, #328]	; (800c5c8 <HAL_UART_MspInit+0x260>)
 800c47e:	635a      	str	r2, [r3, #52]	; 0x34
 800c480:	4a51      	ldr	r2, [pc, #324]	; (800c5c8 <HAL_UART_MspInit+0x260>)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c486:	2200      	movs	r2, #0
 800c488:	2100      	movs	r1, #0
 800c48a:	2025      	movs	r0, #37	; 0x25
 800c48c:	f000 fa6f 	bl	800c96e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c490:	2025      	movs	r0, #37	; 0x25
 800c492:	f000 fa88 	bl	800c9a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800c496:	e089      	b.n	800c5ac <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a4c      	ldr	r2, [pc, #304]	; (800c5d0 <HAL_UART_MspInit+0x268>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	f040 8084 	bne.w	800c5ac <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 800c4a4:	4b44      	ldr	r3, [pc, #272]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c4a6:	69db      	ldr	r3, [r3, #28]
 800c4a8:	4a43      	ldr	r2, [pc, #268]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c4aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4ae:	61d3      	str	r3, [r2, #28]
 800c4b0:	4b41      	ldr	r3, [pc, #260]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c4b2:	69db      	ldr	r3, [r3, #28]
 800c4b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4b8:	60fb      	str	r3, [r7, #12]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4bc:	4b3e      	ldr	r3, [pc, #248]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c4be:	699b      	ldr	r3, [r3, #24]
 800c4c0:	4a3d      	ldr	r2, [pc, #244]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c4c2:	f043 0304 	orr.w	r3, r3, #4
 800c4c6:	6193      	str	r3, [r2, #24]
 800c4c8:	4b3b      	ldr	r3, [pc, #236]	; (800c5b8 <HAL_UART_MspInit+0x250>)
 800c4ca:	699b      	ldr	r3, [r3, #24]
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	60bb      	str	r3, [r7, #8]
 800c4d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c4d4:	2304      	movs	r3, #4
 800c4d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4d8:	2302      	movs	r3, #2
 800c4da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c4dc:	2303      	movs	r3, #3
 800c4de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4e0:	f107 0318 	add.w	r3, r7, #24
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	4835      	ldr	r0, [pc, #212]	; (800c5bc <HAL_UART_MspInit+0x254>)
 800c4e8:	f000 fce2 	bl	800ceb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c4ec:	2308      	movs	r3, #8
 800c4ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4f8:	f107 0318 	add.w	r3, r7, #24
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	482f      	ldr	r0, [pc, #188]	; (800c5bc <HAL_UART_MspInit+0x254>)
 800c500:	f000 fcd6 	bl	800ceb0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800c504:	4b33      	ldr	r3, [pc, #204]	; (800c5d4 <HAL_UART_MspInit+0x26c>)
 800c506:	4a34      	ldr	r2, [pc, #208]	; (800c5d8 <HAL_UART_MspInit+0x270>)
 800c508:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c50a:	4b32      	ldr	r3, [pc, #200]	; (800c5d4 <HAL_UART_MspInit+0x26c>)
 800c50c:	2210      	movs	r2, #16
 800c50e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c510:	4b30      	ldr	r3, [pc, #192]	; (800c5d4 <HAL_UART_MspInit+0x26c>)
 800c512:	2200      	movs	r2, #0
 800c514:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c516:	4b2f      	ldr	r3, [pc, #188]	; (800c5d4 <HAL_UART_MspInit+0x26c>)
 800c518:	2280      	movs	r2, #128	; 0x80
 800c51a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c51c:	4b2d      	ldr	r3, [pc, #180]	; (800c5d4 <HAL_UART_MspInit+0x26c>)
 800c51e:	2200      	movs	r2, #0
 800c520:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c522:	4b2c      	ldr	r3, [pc, #176]	; (800c5d4 <HAL_UART_MspInit+0x26c>)
 800c524:	2200      	movs	r2, #0
 800c526:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800c528:	4b2a      	ldr	r3, [pc, #168]	; (800c5d4 <HAL_UART_MspInit+0x26c>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c52e:	4b29      	ldr	r3, [pc, #164]	; (800c5d4 <HAL_UART_MspInit+0x26c>)
 800c530:	2200      	movs	r2, #0
 800c532:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800c534:	4827      	ldr	r0, [pc, #156]	; (800c5d4 <HAL_UART_MspInit+0x26c>)
 800c536:	f000 fa57 	bl	800c9e8 <HAL_DMA_Init>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d001      	beq.n	800c544 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 800c540:	f7f5 f83a 	bl	80015b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a23      	ldr	r2, [pc, #140]	; (800c5d4 <HAL_UART_MspInit+0x26c>)
 800c548:	631a      	str	r2, [r3, #48]	; 0x30
 800c54a:	4a22      	ldr	r2, [pc, #136]	; (800c5d4 <HAL_UART_MspInit+0x26c>)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800c550:	4b22      	ldr	r3, [pc, #136]	; (800c5dc <HAL_UART_MspInit+0x274>)
 800c552:	4a23      	ldr	r2, [pc, #140]	; (800c5e0 <HAL_UART_MspInit+0x278>)
 800c554:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c556:	4b21      	ldr	r3, [pc, #132]	; (800c5dc <HAL_UART_MspInit+0x274>)
 800c558:	2200      	movs	r2, #0
 800c55a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c55c:	4b1f      	ldr	r3, [pc, #124]	; (800c5dc <HAL_UART_MspInit+0x274>)
 800c55e:	2200      	movs	r2, #0
 800c560:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c562:	4b1e      	ldr	r3, [pc, #120]	; (800c5dc <HAL_UART_MspInit+0x274>)
 800c564:	2280      	movs	r2, #128	; 0x80
 800c566:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c568:	4b1c      	ldr	r3, [pc, #112]	; (800c5dc <HAL_UART_MspInit+0x274>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c56e:	4b1b      	ldr	r3, [pc, #108]	; (800c5dc <HAL_UART_MspInit+0x274>)
 800c570:	2200      	movs	r2, #0
 800c572:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800c574:	4b19      	ldr	r3, [pc, #100]	; (800c5dc <HAL_UART_MspInit+0x274>)
 800c576:	2220      	movs	r2, #32
 800c578:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c57a:	4b18      	ldr	r3, [pc, #96]	; (800c5dc <HAL_UART_MspInit+0x274>)
 800c57c:	2200      	movs	r2, #0
 800c57e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800c580:	4816      	ldr	r0, [pc, #88]	; (800c5dc <HAL_UART_MspInit+0x274>)
 800c582:	f000 fa31 	bl	800c9e8 <HAL_DMA_Init>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <HAL_UART_MspInit+0x228>
      Error_Handler();
 800c58c:	f7f5 f814 	bl	80015b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a12      	ldr	r2, [pc, #72]	; (800c5dc <HAL_UART_MspInit+0x274>)
 800c594:	635a      	str	r2, [r3, #52]	; 0x34
 800c596:	4a11      	ldr	r2, [pc, #68]	; (800c5dc <HAL_UART_MspInit+0x274>)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800c59c:	2200      	movs	r2, #0
 800c59e:	2100      	movs	r1, #0
 800c5a0:	2026      	movs	r0, #38	; 0x26
 800c5a2:	f000 f9e4 	bl	800c96e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c5a6:	2026      	movs	r0, #38	; 0x26
 800c5a8:	f000 f9fd 	bl	800c9a6 <HAL_NVIC_EnableIRQ>
}
 800c5ac:	bf00      	nop
 800c5ae:	3728      	adds	r7, #40	; 0x28
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	40013800 	.word	0x40013800
 800c5b8:	40021000 	.word	0x40021000
 800c5bc:	40010800 	.word	0x40010800
 800c5c0:	2000142c 	.word	0x2000142c
 800c5c4:	40020044 	.word	0x40020044
 800c5c8:	20001470 	.word	0x20001470
 800c5cc:	40020058 	.word	0x40020058
 800c5d0:	40004400 	.word	0x40004400
 800c5d4:	200014b4 	.word	0x200014b4
 800c5d8:	40020080 	.word	0x40020080
 800c5dc:	200013e8 	.word	0x200013e8
 800c5e0:	4002006c 	.word	0x4002006c

0800c5e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c5ea:	4b18      	ldr	r3, [pc, #96]	; (800c64c <MX_DMA_Init+0x68>)
 800c5ec:	695b      	ldr	r3, [r3, #20]
 800c5ee:	4a17      	ldr	r2, [pc, #92]	; (800c64c <MX_DMA_Init+0x68>)
 800c5f0:	f043 0301 	orr.w	r3, r3, #1
 800c5f4:	6153      	str	r3, [r2, #20]
 800c5f6:	4b15      	ldr	r3, [pc, #84]	; (800c64c <MX_DMA_Init+0x68>)
 800c5f8:	695b      	ldr	r3, [r3, #20]
 800c5fa:	f003 0301 	and.w	r3, r3, #1
 800c5fe:	607b      	str	r3, [r7, #4]
 800c600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800c602:	2200      	movs	r2, #0
 800c604:	2100      	movs	r1, #0
 800c606:	200e      	movs	r0, #14
 800c608:	f000 f9b1 	bl	800c96e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800c60c:	200e      	movs	r0, #14
 800c60e:	f000 f9ca 	bl	800c9a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800c612:	2200      	movs	r2, #0
 800c614:	2100      	movs	r1, #0
 800c616:	200f      	movs	r0, #15
 800c618:	f000 f9a9 	bl	800c96e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800c61c:	200f      	movs	r0, #15
 800c61e:	f000 f9c2 	bl	800c9a6 <HAL_NVIC_EnableIRQ>

  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800c622:	2200      	movs	r2, #0
 800c624:	2100      	movs	r1, #0
 800c626:	2010      	movs	r0, #16
 800c628:	f000 f9a1 	bl	800c96e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800c62c:	2010      	movs	r0, #16
 800c62e:	f000 f9ba 	bl	800c9a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800c632:	2200      	movs	r2, #0
 800c634:	2100      	movs	r1, #0
 800c636:	2011      	movs	r0, #17
 800c638:	f000 f999 	bl	800c96e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800c63c:	2011      	movs	r0, #17
 800c63e:	f000 f9b2 	bl	800c9a6 <HAL_NVIC_EnableIRQ>

}
 800c642:	bf00      	nop
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	40021000 	.word	0x40021000

0800c650 <hwInit>:




void hwInit(void)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
  bspInit();
 800c656:	f7f4 ff0b 	bl	8001470 <bspInit>
  timerInit();
 800c65a:	f7ff f939 	bl	800b8d0 <timerInit>
  cliInit();
 800c65e:	f7fd fdc7 	bl	800a1f0 <cliInit>
  ledInit();
 800c662:	f7ff f83b 	bl	800b6dc <ledInit>
  i2cInit();
 800c666:	f7fe fd25 	bl	800b0b4 <i2cInit>
  uartInit();
 800c66a:	f7ff fbab 	bl	800bdc4 <uartInit>

	ledOn(ST1);
 800c66e:	2000      	movs	r0, #0
 800c670:	f7ff f882 	bl	800b778 <ledOn>
  ledOff(ST2);
 800c674:	2001      	movs	r0, #1
 800c676:	f7ff f89f 	bl	800b7b8 <ledOff>
  for (int i = 0; i < 10; i++){
 800c67a:	2300      	movs	r3, #0
 800c67c:	607b      	str	r3, [r7, #4]
 800c67e:	e00e      	b.n	800c69e <hwInit+0x4e>
    ledToggle(ST1);
 800c680:	2000      	movs	r0, #0
 800c682:	f7ff f8b9 	bl	800b7f8 <ledToggle>
    ledToggle(ST2);
 800c686:	2001      	movs	r0, #1
 800c688:	f7ff f8b6 	bl	800b7f8 <ledToggle>
    HAL_Delay(25);
 800c68c:	2019      	movs	r0, #25
 800c68e:	f000 f875 	bl	800c77c <HAL_Delay>
    //BEEP_ON;
    HAL_Delay(25);
 800c692:	2019      	movs	r0, #25
 800c694:	f000 f872 	bl	800c77c <HAL_Delay>
  for (int i = 0; i < 10; i++){
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	3301      	adds	r3, #1
 800c69c:	607b      	str	r3, [r7, #4]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2b09      	cmp	r3, #9
 800c6a2:	dded      	ble.n	800c680 <hwInit+0x30>
    //BEEP_OFF;
  }
  ledOff(ST1);
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	f7ff f887 	bl	800b7b8 <ledOff>
  ledOff(ST2);
 800c6aa:	2001      	movs	r0, #1
 800c6ac:	f7ff f884 	bl	800b7b8 <ledOff>
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c6bc:	4b08      	ldr	r3, [pc, #32]	; (800c6e0 <HAL_Init+0x28>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a07      	ldr	r2, [pc, #28]	; (800c6e0 <HAL_Init+0x28>)
 800c6c2:	f043 0310 	orr.w	r3, r3, #16
 800c6c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c6c8:	2003      	movs	r0, #3
 800c6ca:	f000 f945 	bl	800c958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	f000 f808 	bl	800c6e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c6d4:	f7f4 ff76 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	40022000 	.word	0x40022000

0800c6e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c6ec:	4b12      	ldr	r3, [pc, #72]	; (800c738 <HAL_InitTick+0x54>)
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	4b12      	ldr	r3, [pc, #72]	; (800c73c <HAL_InitTick+0x58>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c702:	4618      	mov	r0, r3
 800c704:	f000 f95d 	bl	800c9c2 <HAL_SYSTICK_Config>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c70e:	2301      	movs	r3, #1
 800c710:	e00e      	b.n	800c730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b0f      	cmp	r3, #15
 800c716:	d80a      	bhi.n	800c72e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c718:	2200      	movs	r2, #0
 800c71a:	6879      	ldr	r1, [r7, #4]
 800c71c:	f04f 30ff 	mov.w	r0, #4294967295
 800c720:	f000 f925 	bl	800c96e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c724:	4a06      	ldr	r2, [pc, #24]	; (800c740 <HAL_InitTick+0x5c>)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	e000      	b.n	800c730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
}
 800c730:	4618      	mov	r0, r3
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	20000004 	.word	0x20000004
 800c73c:	2000005c 	.word	0x2000005c
 800c740:	20000058 	.word	0x20000058

0800c744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c744:	b480      	push	{r7}
 800c746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c748:	4b05      	ldr	r3, [pc, #20]	; (800c760 <HAL_IncTick+0x1c>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	461a      	mov	r2, r3
 800c74e:	4b05      	ldr	r3, [pc, #20]	; (800c764 <HAL_IncTick+0x20>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4413      	add	r3, r2
 800c754:	4a03      	ldr	r2, [pc, #12]	; (800c764 <HAL_IncTick+0x20>)
 800c756:	6013      	str	r3, [r2, #0]
}
 800c758:	bf00      	nop
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bc80      	pop	{r7}
 800c75e:	4770      	bx	lr
 800c760:	2000005c 	.word	0x2000005c
 800c764:	20001578 	.word	0x20001578

0800c768 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c768:	b480      	push	{r7}
 800c76a:	af00      	add	r7, sp, #0
  return uwTick;
 800c76c:	4b02      	ldr	r3, [pc, #8]	; (800c778 <HAL_GetTick+0x10>)
 800c76e:	681b      	ldr	r3, [r3, #0]
}
 800c770:	4618      	mov	r0, r3
 800c772:	46bd      	mov	sp, r7
 800c774:	bc80      	pop	{r7}
 800c776:	4770      	bx	lr
 800c778:	20001578 	.word	0x20001578

0800c77c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c784:	f7ff fff0 	bl	800c768 <HAL_GetTick>
 800c788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c794:	d005      	beq.n	800c7a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c796:	4b09      	ldr	r3, [pc, #36]	; (800c7bc <HAL_Delay+0x40>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	461a      	mov	r2, r3
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	4413      	add	r3, r2
 800c7a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c7a2:	bf00      	nop
 800c7a4:	f7ff ffe0 	bl	800c768 <HAL_GetTick>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d8f7      	bhi.n	800c7a4 <HAL_Delay+0x28>
  {
  }
}
 800c7b4:	bf00      	nop
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	2000005c 	.word	0x2000005c

0800c7c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f003 0307 	and.w	r3, r3, #7
 800c7ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c7d0:	4b0c      	ldr	r3, [pc, #48]	; (800c804 <__NVIC_SetPriorityGrouping+0x44>)
 800c7d2:	68db      	ldr	r3, [r3, #12]
 800c7d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c7d6:	68ba      	ldr	r2, [r7, #8]
 800c7d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c7dc:	4013      	ands	r3, r2
 800c7de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c7e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c7ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c7f2:	4a04      	ldr	r2, [pc, #16]	; (800c804 <__NVIC_SetPriorityGrouping+0x44>)
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	60d3      	str	r3, [r2, #12]
}
 800c7f8:	bf00      	nop
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bc80      	pop	{r7}
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	e000ed00 	.word	0xe000ed00

0800c808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c808:	b480      	push	{r7}
 800c80a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c80c:	4b04      	ldr	r3, [pc, #16]	; (800c820 <__NVIC_GetPriorityGrouping+0x18>)
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	0a1b      	lsrs	r3, r3, #8
 800c812:	f003 0307 	and.w	r3, r3, #7
}
 800c816:	4618      	mov	r0, r3
 800c818:	46bd      	mov	sp, r7
 800c81a:	bc80      	pop	{r7}
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	e000ed00 	.word	0xe000ed00

0800c824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	4603      	mov	r3, r0
 800c82c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c82e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c832:	2b00      	cmp	r3, #0
 800c834:	db0b      	blt.n	800c84e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c836:	79fb      	ldrb	r3, [r7, #7]
 800c838:	f003 021f 	and.w	r2, r3, #31
 800c83c:	4906      	ldr	r1, [pc, #24]	; (800c858 <__NVIC_EnableIRQ+0x34>)
 800c83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c842:	095b      	lsrs	r3, r3, #5
 800c844:	2001      	movs	r0, #1
 800c846:	fa00 f202 	lsl.w	r2, r0, r2
 800c84a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c84e:	bf00      	nop
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	bc80      	pop	{r7}
 800c856:	4770      	bx	lr
 800c858:	e000e100 	.word	0xe000e100

0800c85c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	4603      	mov	r3, r0
 800c864:	6039      	str	r1, [r7, #0]
 800c866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	db0a      	blt.n	800c886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	b2da      	uxtb	r2, r3
 800c874:	490c      	ldr	r1, [pc, #48]	; (800c8a8 <__NVIC_SetPriority+0x4c>)
 800c876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c87a:	0112      	lsls	r2, r2, #4
 800c87c:	b2d2      	uxtb	r2, r2
 800c87e:	440b      	add	r3, r1
 800c880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c884:	e00a      	b.n	800c89c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	b2da      	uxtb	r2, r3
 800c88a:	4908      	ldr	r1, [pc, #32]	; (800c8ac <__NVIC_SetPriority+0x50>)
 800c88c:	79fb      	ldrb	r3, [r7, #7]
 800c88e:	f003 030f 	and.w	r3, r3, #15
 800c892:	3b04      	subs	r3, #4
 800c894:	0112      	lsls	r2, r2, #4
 800c896:	b2d2      	uxtb	r2, r2
 800c898:	440b      	add	r3, r1
 800c89a:	761a      	strb	r2, [r3, #24]
}
 800c89c:	bf00      	nop
 800c89e:	370c      	adds	r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bc80      	pop	{r7}
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	e000e100 	.word	0xe000e100
 800c8ac:	e000ed00 	.word	0xe000ed00

0800c8b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b089      	sub	sp, #36	; 0x24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f003 0307 	and.w	r3, r3, #7
 800c8c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	f1c3 0307 	rsb	r3, r3, #7
 800c8ca:	2b04      	cmp	r3, #4
 800c8cc:	bf28      	it	cs
 800c8ce:	2304      	movcs	r3, #4
 800c8d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	3304      	adds	r3, #4
 800c8d6:	2b06      	cmp	r3, #6
 800c8d8:	d902      	bls.n	800c8e0 <NVIC_EncodePriority+0x30>
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	3b03      	subs	r3, #3
 800c8de:	e000      	b.n	800c8e2 <NVIC_EncodePriority+0x32>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ee:	43da      	mvns	r2, r3
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	401a      	ands	r2, r3
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c8f8:	f04f 31ff 	mov.w	r1, #4294967295
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c902:	43d9      	mvns	r1, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c908:	4313      	orrs	r3, r2
         );
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3724      	adds	r7, #36	; 0x24
 800c90e:	46bd      	mov	sp, r7
 800c910:	bc80      	pop	{r7}
 800c912:	4770      	bx	lr

0800c914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	3b01      	subs	r3, #1
 800c920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c924:	d301      	bcc.n	800c92a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c926:	2301      	movs	r3, #1
 800c928:	e00f      	b.n	800c94a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c92a:	4a0a      	ldr	r2, [pc, #40]	; (800c954 <SysTick_Config+0x40>)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	3b01      	subs	r3, #1
 800c930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c932:	210f      	movs	r1, #15
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	f7ff ff90 	bl	800c85c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c93c:	4b05      	ldr	r3, [pc, #20]	; (800c954 <SysTick_Config+0x40>)
 800c93e:	2200      	movs	r2, #0
 800c940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c942:	4b04      	ldr	r3, [pc, #16]	; (800c954 <SysTick_Config+0x40>)
 800c944:	2207      	movs	r2, #7
 800c946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	e000e010 	.word	0xe000e010

0800c958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7ff ff2d 	bl	800c7c0 <__NVIC_SetPriorityGrouping>
}
 800c966:	bf00      	nop
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c96e:	b580      	push	{r7, lr}
 800c970:	b086      	sub	sp, #24
 800c972:	af00      	add	r7, sp, #0
 800c974:	4603      	mov	r3, r0
 800c976:	60b9      	str	r1, [r7, #8]
 800c978:	607a      	str	r2, [r7, #4]
 800c97a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c97c:	2300      	movs	r3, #0
 800c97e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c980:	f7ff ff42 	bl	800c808 <__NVIC_GetPriorityGrouping>
 800c984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	68b9      	ldr	r1, [r7, #8]
 800c98a:	6978      	ldr	r0, [r7, #20]
 800c98c:	f7ff ff90 	bl	800c8b0 <NVIC_EncodePriority>
 800c990:	4602      	mov	r2, r0
 800c992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c996:	4611      	mov	r1, r2
 800c998:	4618      	mov	r0, r3
 800c99a:	f7ff ff5f 	bl	800c85c <__NVIC_SetPriority>
}
 800c99e:	bf00      	nop
 800c9a0:	3718      	adds	r7, #24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c9b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff ff35 	bl	800c824 <__NVIC_EnableIRQ>
}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7ff ffa2 	bl	800c914 <SysTick_Config>
 800c9d0:	4603      	mov	r3, r0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800c9de:	f7f4 fd39 	bl	8001454 <HAL_SYSTICK_Callback>
}
 800c9e2:	bf00      	nop
 800c9e4:	bd80      	pop	{r7, pc}
	...

0800c9e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d101      	bne.n	800c9fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e043      	b.n	800ca86 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	461a      	mov	r2, r3
 800ca04:	4b22      	ldr	r3, [pc, #136]	; (800ca90 <HAL_DMA_Init+0xa8>)
 800ca06:	4413      	add	r3, r2
 800ca08:	4a22      	ldr	r2, [pc, #136]	; (800ca94 <HAL_DMA_Init+0xac>)
 800ca0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ca0e:	091b      	lsrs	r3, r3, #4
 800ca10:	009a      	lsls	r2, r3, #2
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a1f      	ldr	r2, [pc, #124]	; (800ca98 <HAL_DMA_Init+0xb0>)
 800ca1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2202      	movs	r2, #2
 800ca20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800ca32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ca36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800ca40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	695b      	ldr	r3, [r3, #20]
 800ca52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	69db      	ldr	r3, [r3, #28]
 800ca5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bc80      	pop	{r7}
 800ca8e:	4770      	bx	lr
 800ca90:	bffdfff8 	.word	0xbffdfff8
 800ca94:	cccccccd 	.word	0xcccccccd
 800ca98:	40020000 	.word	0x40020000

0800ca9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
 800caa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d101      	bne.n	800cabc <HAL_DMA_Start_IT+0x20>
 800cab8:	2302      	movs	r3, #2
 800caba:	e04a      	b.n	800cb52 <HAL_DMA_Start_IT+0xb6>
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d13a      	bne.n	800cb44 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2202      	movs	r2, #2
 800cad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f022 0201 	bic.w	r2, r2, #1
 800caea:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	68b9      	ldr	r1, [r7, #8]
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f000 f9ae 	bl	800ce54 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d008      	beq.n	800cb12 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f042 020e 	orr.w	r2, r2, #14
 800cb0e:	601a      	str	r2, [r3, #0]
 800cb10:	e00f      	b.n	800cb32 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f022 0204 	bic.w	r2, r2, #4
 800cb20:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f042 020a 	orr.w	r2, r2, #10
 800cb30:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f042 0201 	orr.w	r2, r2, #1
 800cb40:	601a      	str	r2, [r3, #0]
 800cb42:	e005      	b.n	800cb50 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2200      	movs	r2, #0
 800cb48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800cb50:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3718      	adds	r7, #24
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cb6e:	2b02      	cmp	r3, #2
 800cb70:	d005      	beq.n	800cb7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2204      	movs	r2, #4
 800cb76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	73fb      	strb	r3, [r7, #15]
 800cb7c:	e051      	b.n	800cc22 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f022 020e 	bic.w	r2, r2, #14
 800cb8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f022 0201 	bic.w	r2, r2, #1
 800cb9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a22      	ldr	r2, [pc, #136]	; (800cc2c <HAL_DMA_Abort_IT+0xd0>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d029      	beq.n	800cbfc <HAL_DMA_Abort_IT+0xa0>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a20      	ldr	r2, [pc, #128]	; (800cc30 <HAL_DMA_Abort_IT+0xd4>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d022      	beq.n	800cbf8 <HAL_DMA_Abort_IT+0x9c>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a1f      	ldr	r2, [pc, #124]	; (800cc34 <HAL_DMA_Abort_IT+0xd8>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d01a      	beq.n	800cbf2 <HAL_DMA_Abort_IT+0x96>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a1d      	ldr	r2, [pc, #116]	; (800cc38 <HAL_DMA_Abort_IT+0xdc>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d012      	beq.n	800cbec <HAL_DMA_Abort_IT+0x90>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a1c      	ldr	r2, [pc, #112]	; (800cc3c <HAL_DMA_Abort_IT+0xe0>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d00a      	beq.n	800cbe6 <HAL_DMA_Abort_IT+0x8a>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a1a      	ldr	r2, [pc, #104]	; (800cc40 <HAL_DMA_Abort_IT+0xe4>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d102      	bne.n	800cbe0 <HAL_DMA_Abort_IT+0x84>
 800cbda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cbde:	e00e      	b.n	800cbfe <HAL_DMA_Abort_IT+0xa2>
 800cbe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cbe4:	e00b      	b.n	800cbfe <HAL_DMA_Abort_IT+0xa2>
 800cbe6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cbea:	e008      	b.n	800cbfe <HAL_DMA_Abort_IT+0xa2>
 800cbec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbf0:	e005      	b.n	800cbfe <HAL_DMA_Abort_IT+0xa2>
 800cbf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbf6:	e002      	b.n	800cbfe <HAL_DMA_Abort_IT+0xa2>
 800cbf8:	2310      	movs	r3, #16
 800cbfa:	e000      	b.n	800cbfe <HAL_DMA_Abort_IT+0xa2>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	4a11      	ldr	r2, [pc, #68]	; (800cc44 <HAL_DMA_Abort_IT+0xe8>)
 800cc00:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2201      	movs	r2, #1
 800cc06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	4798      	blx	r3
    } 
  }
  return status;
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	40020008 	.word	0x40020008
 800cc30:	4002001c 	.word	0x4002001c
 800cc34:	40020030 	.word	0x40020030
 800cc38:	40020044 	.word	0x40020044
 800cc3c:	40020058 	.word	0x40020058
 800cc40:	4002006c 	.word	0x4002006c
 800cc44:	40020000 	.word	0x40020000

0800cc48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc64:	2204      	movs	r2, #4
 800cc66:	409a      	lsls	r2, r3
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d04f      	beq.n	800cd10 <HAL_DMA_IRQHandler+0xc8>
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	f003 0304 	and.w	r3, r3, #4
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d04a      	beq.n	800cd10 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f003 0320 	and.w	r3, r3, #32
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d107      	bne.n	800cc98 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f022 0204 	bic.w	r2, r2, #4
 800cc96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a66      	ldr	r2, [pc, #408]	; (800ce38 <HAL_DMA_IRQHandler+0x1f0>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d029      	beq.n	800ccf6 <HAL_DMA_IRQHandler+0xae>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a65      	ldr	r2, [pc, #404]	; (800ce3c <HAL_DMA_IRQHandler+0x1f4>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d022      	beq.n	800ccf2 <HAL_DMA_IRQHandler+0xaa>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a63      	ldr	r2, [pc, #396]	; (800ce40 <HAL_DMA_IRQHandler+0x1f8>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d01a      	beq.n	800ccec <HAL_DMA_IRQHandler+0xa4>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a62      	ldr	r2, [pc, #392]	; (800ce44 <HAL_DMA_IRQHandler+0x1fc>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d012      	beq.n	800cce6 <HAL_DMA_IRQHandler+0x9e>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a60      	ldr	r2, [pc, #384]	; (800ce48 <HAL_DMA_IRQHandler+0x200>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d00a      	beq.n	800cce0 <HAL_DMA_IRQHandler+0x98>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a5f      	ldr	r2, [pc, #380]	; (800ce4c <HAL_DMA_IRQHandler+0x204>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d102      	bne.n	800ccda <HAL_DMA_IRQHandler+0x92>
 800ccd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ccd8:	e00e      	b.n	800ccf8 <HAL_DMA_IRQHandler+0xb0>
 800ccda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ccde:	e00b      	b.n	800ccf8 <HAL_DMA_IRQHandler+0xb0>
 800cce0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cce4:	e008      	b.n	800ccf8 <HAL_DMA_IRQHandler+0xb0>
 800cce6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ccea:	e005      	b.n	800ccf8 <HAL_DMA_IRQHandler+0xb0>
 800ccec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccf0:	e002      	b.n	800ccf8 <HAL_DMA_IRQHandler+0xb0>
 800ccf2:	2340      	movs	r3, #64	; 0x40
 800ccf4:	e000      	b.n	800ccf8 <HAL_DMA_IRQHandler+0xb0>
 800ccf6:	2304      	movs	r3, #4
 800ccf8:	4a55      	ldr	r2, [pc, #340]	; (800ce50 <HAL_DMA_IRQHandler+0x208>)
 800ccfa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 8094 	beq.w	800ce2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800cd0e:	e08e      	b.n	800ce2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd14:	2202      	movs	r2, #2
 800cd16:	409a      	lsls	r2, r3
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d056      	beq.n	800cdce <HAL_DMA_IRQHandler+0x186>
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	f003 0302 	and.w	r3, r3, #2
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d051      	beq.n	800cdce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 0320 	and.w	r3, r3, #32
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10b      	bne.n	800cd50 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f022 020a 	bic.w	r2, r2, #10
 800cd46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a38      	ldr	r2, [pc, #224]	; (800ce38 <HAL_DMA_IRQHandler+0x1f0>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d029      	beq.n	800cdae <HAL_DMA_IRQHandler+0x166>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a37      	ldr	r2, [pc, #220]	; (800ce3c <HAL_DMA_IRQHandler+0x1f4>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d022      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x162>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a35      	ldr	r2, [pc, #212]	; (800ce40 <HAL_DMA_IRQHandler+0x1f8>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d01a      	beq.n	800cda4 <HAL_DMA_IRQHandler+0x15c>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a34      	ldr	r2, [pc, #208]	; (800ce44 <HAL_DMA_IRQHandler+0x1fc>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d012      	beq.n	800cd9e <HAL_DMA_IRQHandler+0x156>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a32      	ldr	r2, [pc, #200]	; (800ce48 <HAL_DMA_IRQHandler+0x200>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d00a      	beq.n	800cd98 <HAL_DMA_IRQHandler+0x150>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a31      	ldr	r2, [pc, #196]	; (800ce4c <HAL_DMA_IRQHandler+0x204>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d102      	bne.n	800cd92 <HAL_DMA_IRQHandler+0x14a>
 800cd8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cd90:	e00e      	b.n	800cdb0 <HAL_DMA_IRQHandler+0x168>
 800cd92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cd96:	e00b      	b.n	800cdb0 <HAL_DMA_IRQHandler+0x168>
 800cd98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cd9c:	e008      	b.n	800cdb0 <HAL_DMA_IRQHandler+0x168>
 800cd9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cda2:	e005      	b.n	800cdb0 <HAL_DMA_IRQHandler+0x168>
 800cda4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cda8:	e002      	b.n	800cdb0 <HAL_DMA_IRQHandler+0x168>
 800cdaa:	2320      	movs	r3, #32
 800cdac:	e000      	b.n	800cdb0 <HAL_DMA_IRQHandler+0x168>
 800cdae:	2302      	movs	r3, #2
 800cdb0:	4a27      	ldr	r2, [pc, #156]	; (800ce50 <HAL_DMA_IRQHandler+0x208>)
 800cdb2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d034      	beq.n	800ce2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800cdcc:	e02f      	b.n	800ce2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd2:	2208      	movs	r2, #8
 800cdd4:	409a      	lsls	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	4013      	ands	r3, r2
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d028      	beq.n	800ce30 <HAL_DMA_IRQHandler+0x1e8>
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	f003 0308 	and.w	r3, r3, #8
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d023      	beq.n	800ce30 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f022 020e 	bic.w	r2, r2, #14
 800cdf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce00:	2101      	movs	r1, #1
 800ce02:	fa01 f202 	lsl.w	r2, r1, r2
 800ce06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2201      	movs	r2, #1
 800ce12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d004      	beq.n	800ce30 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	4798      	blx	r3
    }
  }
  return;
 800ce2e:	bf00      	nop
 800ce30:	bf00      	nop
}
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	40020008 	.word	0x40020008
 800ce3c:	4002001c 	.word	0x4002001c
 800ce40:	40020030 	.word	0x40020030
 800ce44:	40020044 	.word	0x40020044
 800ce48:	40020058 	.word	0x40020058
 800ce4c:	4002006c 	.word	0x4002006c
 800ce50:	40020000 	.word	0x40020000

0800ce54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
 800ce60:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6a:	2101      	movs	r1, #1
 800ce6c:	fa01 f202 	lsl.w	r2, r1, r2
 800ce70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	2b10      	cmp	r3, #16
 800ce80:	d108      	bne.n	800ce94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	68ba      	ldr	r2, [r7, #8]
 800ce90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ce92:	e007      	b.n	800cea4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	60da      	str	r2, [r3, #12]
}
 800cea4:	bf00      	nop
 800cea6:	3714      	adds	r7, #20
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bc80      	pop	{r7}
 800ceac:	4770      	bx	lr
	...

0800ceb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b08b      	sub	sp, #44	; 0x2c
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ceba:	2300      	movs	r3, #0
 800cebc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800cebe:	2300      	movs	r3, #0
 800cec0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cec2:	e127      	b.n	800d114 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800cec4:	2201      	movs	r2, #1
 800cec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec8:	fa02 f303 	lsl.w	r3, r2, r3
 800cecc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	69fa      	ldr	r2, [r7, #28]
 800ced4:	4013      	ands	r3, r2
 800ced6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800ced8:	69ba      	ldr	r2, [r7, #24]
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	429a      	cmp	r2, r3
 800cede:	f040 8116 	bne.w	800d10e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	2b12      	cmp	r3, #18
 800cee8:	d034      	beq.n	800cf54 <HAL_GPIO_Init+0xa4>
 800ceea:	2b12      	cmp	r3, #18
 800ceec:	d80d      	bhi.n	800cf0a <HAL_GPIO_Init+0x5a>
 800ceee:	2b02      	cmp	r3, #2
 800cef0:	d02b      	beq.n	800cf4a <HAL_GPIO_Init+0x9a>
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d804      	bhi.n	800cf00 <HAL_GPIO_Init+0x50>
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d031      	beq.n	800cf5e <HAL_GPIO_Init+0xae>
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d01c      	beq.n	800cf38 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800cefe:	e048      	b.n	800cf92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800cf00:	2b03      	cmp	r3, #3
 800cf02:	d043      	beq.n	800cf8c <HAL_GPIO_Init+0xdc>
 800cf04:	2b11      	cmp	r3, #17
 800cf06:	d01b      	beq.n	800cf40 <HAL_GPIO_Init+0x90>
          break;
 800cf08:	e043      	b.n	800cf92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800cf0a:	4a89      	ldr	r2, [pc, #548]	; (800d130 <HAL_GPIO_Init+0x280>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d026      	beq.n	800cf5e <HAL_GPIO_Init+0xae>
 800cf10:	4a87      	ldr	r2, [pc, #540]	; (800d130 <HAL_GPIO_Init+0x280>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d806      	bhi.n	800cf24 <HAL_GPIO_Init+0x74>
 800cf16:	4a87      	ldr	r2, [pc, #540]	; (800d134 <HAL_GPIO_Init+0x284>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d020      	beq.n	800cf5e <HAL_GPIO_Init+0xae>
 800cf1c:	4a86      	ldr	r2, [pc, #536]	; (800d138 <HAL_GPIO_Init+0x288>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d01d      	beq.n	800cf5e <HAL_GPIO_Init+0xae>
          break;
 800cf22:	e036      	b.n	800cf92 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800cf24:	4a85      	ldr	r2, [pc, #532]	; (800d13c <HAL_GPIO_Init+0x28c>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d019      	beq.n	800cf5e <HAL_GPIO_Init+0xae>
 800cf2a:	4a85      	ldr	r2, [pc, #532]	; (800d140 <HAL_GPIO_Init+0x290>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d016      	beq.n	800cf5e <HAL_GPIO_Init+0xae>
 800cf30:	4a84      	ldr	r2, [pc, #528]	; (800d144 <HAL_GPIO_Init+0x294>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d013      	beq.n	800cf5e <HAL_GPIO_Init+0xae>
          break;
 800cf36:	e02c      	b.n	800cf92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	623b      	str	r3, [r7, #32]
          break;
 800cf3e:	e028      	b.n	800cf92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	3304      	adds	r3, #4
 800cf46:	623b      	str	r3, [r7, #32]
          break;
 800cf48:	e023      	b.n	800cf92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	3308      	adds	r3, #8
 800cf50:	623b      	str	r3, [r7, #32]
          break;
 800cf52:	e01e      	b.n	800cf92 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	330c      	adds	r3, #12
 800cf5a:	623b      	str	r3, [r7, #32]
          break;
 800cf5c:	e019      	b.n	800cf92 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d102      	bne.n	800cf6c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800cf66:	2304      	movs	r3, #4
 800cf68:	623b      	str	r3, [r7, #32]
          break;
 800cf6a:	e012      	b.n	800cf92 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d105      	bne.n	800cf80 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800cf74:	2308      	movs	r3, #8
 800cf76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	69fa      	ldr	r2, [r7, #28]
 800cf7c:	611a      	str	r2, [r3, #16]
          break;
 800cf7e:	e008      	b.n	800cf92 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800cf80:	2308      	movs	r3, #8
 800cf82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	69fa      	ldr	r2, [r7, #28]
 800cf88:	615a      	str	r2, [r3, #20]
          break;
 800cf8a:	e002      	b.n	800cf92 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	623b      	str	r3, [r7, #32]
          break;
 800cf90:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	2bff      	cmp	r3, #255	; 0xff
 800cf96:	d801      	bhi.n	800cf9c <HAL_GPIO_Init+0xec>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	e001      	b.n	800cfa0 <HAL_GPIO_Init+0xf0>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	2bff      	cmp	r3, #255	; 0xff
 800cfa6:	d802      	bhi.n	800cfae <HAL_GPIO_Init+0xfe>
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	e002      	b.n	800cfb4 <HAL_GPIO_Init+0x104>
 800cfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb0:	3b08      	subs	r3, #8
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	210f      	movs	r1, #15
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	fa01 f303 	lsl.w	r3, r1, r3
 800cfc2:	43db      	mvns	r3, r3
 800cfc4:	401a      	ands	r2, r3
 800cfc6:	6a39      	ldr	r1, [r7, #32]
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	fa01 f303 	lsl.w	r3, r1, r3
 800cfce:	431a      	orrs	r2, r3
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f000 8096 	beq.w	800d10e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800cfe2:	4b59      	ldr	r3, [pc, #356]	; (800d148 <HAL_GPIO_Init+0x298>)
 800cfe4:	699b      	ldr	r3, [r3, #24]
 800cfe6:	4a58      	ldr	r2, [pc, #352]	; (800d148 <HAL_GPIO_Init+0x298>)
 800cfe8:	f043 0301 	orr.w	r3, r3, #1
 800cfec:	6193      	str	r3, [r2, #24]
 800cfee:	4b56      	ldr	r3, [pc, #344]	; (800d148 <HAL_GPIO_Init+0x298>)
 800cff0:	699b      	ldr	r3, [r3, #24]
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	60bb      	str	r3, [r7, #8]
 800cff8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800cffa:	4a54      	ldr	r2, [pc, #336]	; (800d14c <HAL_GPIO_Init+0x29c>)
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	089b      	lsrs	r3, r3, #2
 800d000:	3302      	adds	r3, #2
 800d002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d006:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800d008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00a:	f003 0303 	and.w	r3, r3, #3
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	220f      	movs	r2, #15
 800d012:	fa02 f303 	lsl.w	r3, r2, r3
 800d016:	43db      	mvns	r3, r3
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	4013      	ands	r3, r2
 800d01c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4a4b      	ldr	r2, [pc, #300]	; (800d150 <HAL_GPIO_Init+0x2a0>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d013      	beq.n	800d04e <HAL_GPIO_Init+0x19e>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	4a4a      	ldr	r2, [pc, #296]	; (800d154 <HAL_GPIO_Init+0x2a4>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d00d      	beq.n	800d04a <HAL_GPIO_Init+0x19a>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4a49      	ldr	r2, [pc, #292]	; (800d158 <HAL_GPIO_Init+0x2a8>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d007      	beq.n	800d046 <HAL_GPIO_Init+0x196>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4a48      	ldr	r2, [pc, #288]	; (800d15c <HAL_GPIO_Init+0x2ac>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d101      	bne.n	800d042 <HAL_GPIO_Init+0x192>
 800d03e:	2303      	movs	r3, #3
 800d040:	e006      	b.n	800d050 <HAL_GPIO_Init+0x1a0>
 800d042:	2304      	movs	r3, #4
 800d044:	e004      	b.n	800d050 <HAL_GPIO_Init+0x1a0>
 800d046:	2302      	movs	r3, #2
 800d048:	e002      	b.n	800d050 <HAL_GPIO_Init+0x1a0>
 800d04a:	2301      	movs	r3, #1
 800d04c:	e000      	b.n	800d050 <HAL_GPIO_Init+0x1a0>
 800d04e:	2300      	movs	r3, #0
 800d050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d052:	f002 0203 	and.w	r2, r2, #3
 800d056:	0092      	lsls	r2, r2, #2
 800d058:	4093      	lsls	r3, r2
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	4313      	orrs	r3, r2
 800d05e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800d060:	493a      	ldr	r1, [pc, #232]	; (800d14c <HAL_GPIO_Init+0x29c>)
 800d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d064:	089b      	lsrs	r3, r3, #2
 800d066:	3302      	adds	r3, #2
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d076:	2b00      	cmp	r3, #0
 800d078:	d006      	beq.n	800d088 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800d07a:	4b39      	ldr	r3, [pc, #228]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	4938      	ldr	r1, [pc, #224]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	4313      	orrs	r3, r2
 800d084:	600b      	str	r3, [r1, #0]
 800d086:	e006      	b.n	800d096 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800d088:	4b35      	ldr	r3, [pc, #212]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	43db      	mvns	r3, r3
 800d090:	4933      	ldr	r1, [pc, #204]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d092:	4013      	ands	r3, r2
 800d094:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d006      	beq.n	800d0b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800d0a2:	4b2f      	ldr	r3, [pc, #188]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d0a4:	685a      	ldr	r2, [r3, #4]
 800d0a6:	492e      	ldr	r1, [pc, #184]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	604b      	str	r3, [r1, #4]
 800d0ae:	e006      	b.n	800d0be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800d0b0:	4b2b      	ldr	r3, [pc, #172]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d0b2:	685a      	ldr	r2, [r3, #4]
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	43db      	mvns	r3, r3
 800d0b8:	4929      	ldr	r1, [pc, #164]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d006      	beq.n	800d0d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800d0ca:	4b25      	ldr	r3, [pc, #148]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d0cc:	689a      	ldr	r2, [r3, #8]
 800d0ce:	4924      	ldr	r1, [pc, #144]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d0d0:	69bb      	ldr	r3, [r7, #24]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	608b      	str	r3, [r1, #8]
 800d0d6:	e006      	b.n	800d0e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800d0d8:	4b21      	ldr	r3, [pc, #132]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d0da:	689a      	ldr	r2, [r3, #8]
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	43db      	mvns	r3, r3
 800d0e0:	491f      	ldr	r1, [pc, #124]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d0e2:	4013      	ands	r3, r2
 800d0e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d006      	beq.n	800d100 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800d0f2:	4b1b      	ldr	r3, [pc, #108]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d0f4:	68da      	ldr	r2, [r3, #12]
 800d0f6:	491a      	ldr	r1, [pc, #104]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	60cb      	str	r3, [r1, #12]
 800d0fe:	e006      	b.n	800d10e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800d100:	4b17      	ldr	r3, [pc, #92]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d102:	68da      	ldr	r2, [r3, #12]
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	43db      	mvns	r3, r3
 800d108:	4915      	ldr	r1, [pc, #84]	; (800d160 <HAL_GPIO_Init+0x2b0>)
 800d10a:	4013      	ands	r3, r2
 800d10c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800d10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d110:	3301      	adds	r3, #1
 800d112:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11a:	fa22 f303 	lsr.w	r3, r2, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f47f aed0 	bne.w	800cec4 <HAL_GPIO_Init+0x14>
  }
}
 800d124:	bf00      	nop
 800d126:	372c      	adds	r7, #44	; 0x2c
 800d128:	46bd      	mov	sp, r7
 800d12a:	bc80      	pop	{r7}
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	10210000 	.word	0x10210000
 800d134:	10110000 	.word	0x10110000
 800d138:	10120000 	.word	0x10120000
 800d13c:	10310000 	.word	0x10310000
 800d140:	10320000 	.word	0x10320000
 800d144:	10220000 	.word	0x10220000
 800d148:	40021000 	.word	0x40021000
 800d14c:	40010000 	.word	0x40010000
 800d150:	40010800 	.word	0x40010800
 800d154:	40010c00 	.word	0x40010c00
 800d158:	40011000 	.word	0x40011000
 800d15c:	40011400 	.word	0x40011400
 800d160:	40010400 	.word	0x40010400

0800d164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	460b      	mov	r3, r1
 800d16e:	807b      	strh	r3, [r7, #2]
 800d170:	4613      	mov	r3, r2
 800d172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d174:	787b      	ldrb	r3, [r7, #1]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d003      	beq.n	800d182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d17a:	887a      	ldrh	r2, [r7, #2]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800d180:	e003      	b.n	800d18a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800d182:	887b      	ldrh	r3, [r7, #2]
 800d184:	041a      	lsls	r2, r3, #16
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	611a      	str	r2, [r3, #16]
}
 800d18a:	bf00      	nop
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	bc80      	pop	{r7}
 800d192:	4770      	bx	lr

0800d194 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	460b      	mov	r3, r1
 800d19e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d1a6:	887a      	ldrh	r2, [r7, #2]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	041a      	lsls	r2, r3, #16
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	43d9      	mvns	r1, r3
 800d1b2:	887b      	ldrh	r3, [r7, #2]
 800d1b4:	400b      	ands	r3, r1
 800d1b6:	431a      	orrs	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	611a      	str	r2, [r3, #16]
}
 800d1bc:	bf00      	nop
 800d1be:	3714      	adds	r7, #20
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bc80      	pop	{r7}
 800d1c4:	4770      	bx	lr
	...

0800d1c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d101      	bne.n	800d1da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e11f      	b.n	800d41a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d106      	bne.n	800d1f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7fe f93a 	bl	800b468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2224      	movs	r2, #36	; 0x24
 800d1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f022 0201 	bic.w	r2, r2, #1
 800d20a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d21a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d22a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d22c:	f002 f974 	bl	800f518 <HAL_RCC_GetPCLK1Freq>
 800d230:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	4a7b      	ldr	r2, [pc, #492]	; (800d424 <HAL_I2C_Init+0x25c>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d807      	bhi.n	800d24c <HAL_I2C_Init+0x84>
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	4a7a      	ldr	r2, [pc, #488]	; (800d428 <HAL_I2C_Init+0x260>)
 800d240:	4293      	cmp	r3, r2
 800d242:	bf94      	ite	ls
 800d244:	2301      	movls	r3, #1
 800d246:	2300      	movhi	r3, #0
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	e006      	b.n	800d25a <HAL_I2C_Init+0x92>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4a77      	ldr	r2, [pc, #476]	; (800d42c <HAL_I2C_Init+0x264>)
 800d250:	4293      	cmp	r3, r2
 800d252:	bf94      	ite	ls
 800d254:	2301      	movls	r3, #1
 800d256:	2300      	movhi	r3, #0
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d001      	beq.n	800d262 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d25e:	2301      	movs	r3, #1
 800d260:	e0db      	b.n	800d41a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	4a72      	ldr	r2, [pc, #456]	; (800d430 <HAL_I2C_Init+0x268>)
 800d266:	fba2 2303 	umull	r2, r3, r2, r3
 800d26a:	0c9b      	lsrs	r3, r3, #18
 800d26c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68ba      	ldr	r2, [r7, #8]
 800d27e:	430a      	orrs	r2, r1
 800d280:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	6a1b      	ldr	r3, [r3, #32]
 800d288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	4a64      	ldr	r2, [pc, #400]	; (800d424 <HAL_I2C_Init+0x25c>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d802      	bhi.n	800d29c <HAL_I2C_Init+0xd4>
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	3301      	adds	r3, #1
 800d29a:	e009      	b.n	800d2b0 <HAL_I2C_Init+0xe8>
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d2a2:	fb02 f303 	mul.w	r3, r2, r3
 800d2a6:	4a63      	ldr	r2, [pc, #396]	; (800d434 <HAL_I2C_Init+0x26c>)
 800d2a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ac:	099b      	lsrs	r3, r3, #6
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	6812      	ldr	r2, [r2, #0]
 800d2b4:	430b      	orrs	r3, r1
 800d2b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	69db      	ldr	r3, [r3, #28]
 800d2be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d2c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	4956      	ldr	r1, [pc, #344]	; (800d424 <HAL_I2C_Init+0x25c>)
 800d2cc:	428b      	cmp	r3, r1
 800d2ce:	d80d      	bhi.n	800d2ec <HAL_I2C_Init+0x124>
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	1e59      	subs	r1, r3, #1
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	005b      	lsls	r3, r3, #1
 800d2da:	fbb1 f3f3 	udiv	r3, r1, r3
 800d2de:	3301      	adds	r3, #1
 800d2e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2e4:	2b04      	cmp	r3, #4
 800d2e6:	bf38      	it	cc
 800d2e8:	2304      	movcc	r3, #4
 800d2ea:	e04f      	b.n	800d38c <HAL_I2C_Init+0x1c4>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d111      	bne.n	800d318 <HAL_I2C_Init+0x150>
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	1e58      	subs	r0, r3, #1
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6859      	ldr	r1, [r3, #4]
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	005b      	lsls	r3, r3, #1
 800d300:	440b      	add	r3, r1
 800d302:	fbb0 f3f3 	udiv	r3, r0, r3
 800d306:	3301      	adds	r3, #1
 800d308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	bf0c      	ite	eq
 800d310:	2301      	moveq	r3, #1
 800d312:	2300      	movne	r3, #0
 800d314:	b2db      	uxtb	r3, r3
 800d316:	e012      	b.n	800d33e <HAL_I2C_Init+0x176>
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	1e58      	subs	r0, r3, #1
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6859      	ldr	r1, [r3, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	440b      	add	r3, r1
 800d326:	0099      	lsls	r1, r3, #2
 800d328:	440b      	add	r3, r1
 800d32a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d32e:	3301      	adds	r3, #1
 800d330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d334:	2b00      	cmp	r3, #0
 800d336:	bf0c      	ite	eq
 800d338:	2301      	moveq	r3, #1
 800d33a:	2300      	movne	r3, #0
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d001      	beq.n	800d346 <HAL_I2C_Init+0x17e>
 800d342:	2301      	movs	r3, #1
 800d344:	e022      	b.n	800d38c <HAL_I2C_Init+0x1c4>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10e      	bne.n	800d36c <HAL_I2C_Init+0x1a4>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	1e58      	subs	r0, r3, #1
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6859      	ldr	r1, [r3, #4]
 800d356:	460b      	mov	r3, r1
 800d358:	005b      	lsls	r3, r3, #1
 800d35a:	440b      	add	r3, r1
 800d35c:	fbb0 f3f3 	udiv	r3, r0, r3
 800d360:	3301      	adds	r3, #1
 800d362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d36a:	e00f      	b.n	800d38c <HAL_I2C_Init+0x1c4>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	1e58      	subs	r0, r3, #1
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6859      	ldr	r1, [r3, #4]
 800d374:	460b      	mov	r3, r1
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	440b      	add	r3, r1
 800d37a:	0099      	lsls	r1, r3, #2
 800d37c:	440b      	add	r3, r1
 800d37e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d382:	3301      	adds	r3, #1
 800d384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d38c:	6879      	ldr	r1, [r7, #4]
 800d38e:	6809      	ldr	r1, [r1, #0]
 800d390:	4313      	orrs	r3, r2
 800d392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	69da      	ldr	r2, [r3, #28]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	431a      	orrs	r2, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	430a      	orrs	r2, r1
 800d3ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d3ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	6911      	ldr	r1, [r2, #16]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	68d2      	ldr	r2, [r2, #12]
 800d3c6:	4311      	orrs	r1, r2
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	6812      	ldr	r2, [r2, #0]
 800d3cc:	430b      	orrs	r3, r1
 800d3ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	695a      	ldr	r2, [r3, #20]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	699b      	ldr	r3, [r3, #24]
 800d3e2:	431a      	orrs	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	430a      	orrs	r2, r1
 800d3ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f042 0201 	orr.w	r2, r2, #1
 800d3fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2220      	movs	r2, #32
 800d406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	000186a0 	.word	0x000186a0
 800d428:	001e847f 	.word	0x001e847f
 800d42c:	003d08ff 	.word	0x003d08ff
 800d430:	431bde83 	.word	0x431bde83
 800d434:	10624dd3 	.word	0x10624dd3

0800d438 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b088      	sub	sp, #32
 800d43c:	af02      	add	r7, sp, #8
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	607a      	str	r2, [r7, #4]
 800d442:	461a      	mov	r2, r3
 800d444:	460b      	mov	r3, r1
 800d446:	817b      	strh	r3, [r7, #10]
 800d448:	4613      	mov	r3, r2
 800d44a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d44c:	f7ff f98c 	bl	800c768 <HAL_GetTick>
 800d450:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	2b20      	cmp	r3, #32
 800d45c:	f040 80e0 	bne.w	800d620 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	9300      	str	r3, [sp, #0]
 800d464:	2319      	movs	r3, #25
 800d466:	2201      	movs	r2, #1
 800d468:	4970      	ldr	r1, [pc, #448]	; (800d62c <HAL_I2C_Master_Transmit+0x1f4>)
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f001 faa2 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d001      	beq.n	800d47a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d476:	2302      	movs	r3, #2
 800d478:	e0d3      	b.n	800d622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d480:	2b01      	cmp	r3, #1
 800d482:	d101      	bne.n	800d488 <HAL_I2C_Master_Transmit+0x50>
 800d484:	2302      	movs	r3, #2
 800d486:	e0cc      	b.n	800d622 <HAL_I2C_Master_Transmit+0x1ea>
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2201      	movs	r2, #1
 800d48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f003 0301 	and.w	r3, r3, #1
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d007      	beq.n	800d4ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f042 0201 	orr.w	r2, r2, #1
 800d4ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d4bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2221      	movs	r2, #33	; 0x21
 800d4c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2210      	movs	r2, #16
 800d4ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	893a      	ldrh	r2, [r7, #8]
 800d4de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	4a50      	ldr	r2, [pc, #320]	; (800d630 <HAL_I2C_Master_Transmit+0x1f8>)
 800d4ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d4f0:	8979      	ldrh	r1, [r7, #10]
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	6a3a      	ldr	r2, [r7, #32]
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f000 ff8e 	bl	800e418 <I2C_MasterRequestWrite>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d502:	2301      	movs	r3, #1
 800d504:	e08d      	b.n	800d622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d506:	2300      	movs	r3, #0
 800d508:	613b      	str	r3, [r7, #16]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	613b      	str	r3, [r7, #16]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	613b      	str	r3, [r7, #16]
 800d51a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d51c:	e066      	b.n	800d5ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d51e:	697a      	ldr	r2, [r7, #20]
 800d520:	6a39      	ldr	r1, [r7, #32]
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f001 fb1c 	bl	800eb60 <I2C_WaitOnTXEFlagUntilTimeout>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00d      	beq.n	800d54a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d532:	2b04      	cmp	r3, #4
 800d534:	d107      	bne.n	800d546 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	e06b      	b.n	800d622 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54e:	781a      	ldrb	r2, [r3, #0]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55a:	1c5a      	adds	r2, r3, #1
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d564:	b29b      	uxth	r3, r3
 800d566:	3b01      	subs	r3, #1
 800d568:	b29a      	uxth	r2, r3
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d572:	3b01      	subs	r3, #1
 800d574:	b29a      	uxth	r2, r3
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	695b      	ldr	r3, [r3, #20]
 800d580:	f003 0304 	and.w	r3, r3, #4
 800d584:	2b04      	cmp	r3, #4
 800d586:	d11b      	bne.n	800d5c0 <HAL_I2C_Master_Transmit+0x188>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d017      	beq.n	800d5c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d594:	781a      	ldrb	r2, [r3, #0]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a0:	1c5a      	adds	r2, r3, #1
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	3b01      	subs	r3, #1
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d5c0:	697a      	ldr	r2, [r7, #20]
 800d5c2:	6a39      	ldr	r1, [r7, #32]
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f001 fb0c 	bl	800ebe2 <I2C_WaitOnBTFFlagUntilTimeout>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00d      	beq.n	800d5ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d4:	2b04      	cmp	r3, #4
 800d5d6:	d107      	bne.n	800d5e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e01a      	b.n	800d622 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d194      	bne.n	800d51e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2220      	movs	r2, #32
 800d608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2200      	movs	r2, #0
 800d618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	e000      	b.n	800d622 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d620:	2302      	movs	r3, #2
  }
}
 800d622:	4618      	mov	r0, r3
 800d624:	3718      	adds	r7, #24
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	00100002 	.word	0x00100002
 800d630:	ffff0000 	.word	0xffff0000

0800d634 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08c      	sub	sp, #48	; 0x30
 800d638:	af02      	add	r7, sp, #8
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	607a      	str	r2, [r7, #4]
 800d63e:	461a      	mov	r2, r3
 800d640:	460b      	mov	r3, r1
 800d642:	817b      	strh	r3, [r7, #10]
 800d644:	4613      	mov	r3, r2
 800d646:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800d648:	2300      	movs	r3, #0
 800d64a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d64c:	f7ff f88c 	bl	800c768 <HAL_GetTick>
 800d650:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	2b20      	cmp	r3, #32
 800d65c:	f040 8238 	bne.w	800dad0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	2319      	movs	r3, #25
 800d666:	2201      	movs	r2, #1
 800d668:	497e      	ldr	r1, [pc, #504]	; (800d864 <HAL_I2C_Master_Receive+0x230>)
 800d66a:	68f8      	ldr	r0, [r7, #12]
 800d66c:	f001 f9a2 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800d676:	2302      	movs	r3, #2
 800d678:	e22b      	b.n	800dad2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d680:	2b01      	cmp	r3, #1
 800d682:	d101      	bne.n	800d688 <HAL_I2C_Master_Receive+0x54>
 800d684:	2302      	movs	r3, #2
 800d686:	e224      	b.n	800dad2 <HAL_I2C_Master_Receive+0x49e>
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2201      	movs	r2, #1
 800d68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f003 0301 	and.w	r3, r3, #1
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d007      	beq.n	800d6ae <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f042 0201 	orr.w	r2, r2, #1
 800d6ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2222      	movs	r2, #34	; 0x22
 800d6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2210      	movs	r2, #16
 800d6ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	893a      	ldrh	r2, [r7, #8]
 800d6de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	4a5e      	ldr	r2, [pc, #376]	; (800d868 <HAL_I2C_Master_Receive+0x234>)
 800d6ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d6f0:	8979      	ldrh	r1, [r7, #10]
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f000 ff10 	bl	800e51c <I2C_MasterRequestRead>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d001      	beq.n	800d706 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800d702:	2301      	movs	r3, #1
 800d704:	e1e5      	b.n	800dad2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d113      	bne.n	800d736 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d70e:	2300      	movs	r3, #0
 800d710:	61fb      	str	r3, [r7, #28]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	61fb      	str	r3, [r7, #28]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	699b      	ldr	r3, [r3, #24]
 800d720:	61fb      	str	r3, [r7, #28]
 800d722:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d732:	601a      	str	r2, [r3, #0]
 800d734:	e1b9      	b.n	800daaa <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d11d      	bne.n	800d77a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d74c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d74e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d750:	2300      	movs	r3, #0
 800d752:	61bb      	str	r3, [r7, #24]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	695b      	ldr	r3, [r3, #20]
 800d75a:	61bb      	str	r3, [r7, #24]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	61bb      	str	r3, [r7, #24]
 800d764:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d774:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d776:	b662      	cpsie	i
 800d778:	e197      	b.n	800daaa <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d77e:	2b02      	cmp	r3, #2
 800d780:	d11d      	bne.n	800d7be <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d790:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800d792:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d794:	2300      	movs	r3, #0
 800d796:	617b      	str	r3, [r7, #20]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	695b      	ldr	r3, [r3, #20]
 800d79e:	617b      	str	r3, [r7, #20]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	699b      	ldr	r3, [r3, #24]
 800d7a6:	617b      	str	r3, [r7, #20]
 800d7a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d7ba:	b662      	cpsie	i
 800d7bc:	e175      	b.n	800daaa <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d7cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	613b      	str	r3, [r7, #16]
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	695b      	ldr	r3, [r3, #20]
 800d7d8:	613b      	str	r3, [r7, #16]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	699b      	ldr	r3, [r3, #24]
 800d7e0:	613b      	str	r3, [r7, #16]
 800d7e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800d7e4:	e161      	b.n	800daaa <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7ea:	2b03      	cmp	r3, #3
 800d7ec:	f200 811a 	bhi.w	800da24 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d123      	bne.n	800d840 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d7f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f001 fa31 	bl	800ec64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	e162      	b.n	800dad2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	691a      	ldr	r2, [r3, #16]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d816:	b2d2      	uxtb	r2, r2
 800d818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d828:	3b01      	subs	r3, #1
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d834:	b29b      	uxth	r3, r3
 800d836:	3b01      	subs	r3, #1
 800d838:	b29a      	uxth	r2, r3
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d83e:	e134      	b.n	800daaa <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d844:	2b02      	cmp	r3, #2
 800d846:	d150      	bne.n	800d8ea <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84e:	2200      	movs	r2, #0
 800d850:	4906      	ldr	r1, [pc, #24]	; (800d86c <HAL_I2C_Master_Receive+0x238>)
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f001 f8ae 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d008      	beq.n	800d870 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800d85e:	2301      	movs	r3, #1
 800d860:	e137      	b.n	800dad2 <HAL_I2C_Master_Receive+0x49e>
 800d862:	bf00      	nop
 800d864:	00100002 	.word	0x00100002
 800d868:	ffff0000 	.word	0xffff0000
 800d86c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800d870:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d880:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	691a      	ldr	r2, [r3, #16]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88c:	b2d2      	uxtb	r2, r2
 800d88e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d894:	1c5a      	adds	r2, r3, #1
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	b29a      	uxth	r2, r3
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800d8b4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	691a      	ldr	r2, [r3, #16]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c0:	b2d2      	uxtb	r2, r2
 800d8c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c8:	1c5a      	adds	r2, r3, #1
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d8e8:	e0df      	b.n	800daaa <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	9300      	str	r3, [sp, #0]
 800d8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	497a      	ldr	r1, [pc, #488]	; (800dadc <HAL_I2C_Master_Receive+0x4a8>)
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f001 f85d 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d001      	beq.n	800d904 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	e0e6      	b.n	800dad2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d912:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800d914:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	691a      	ldr	r2, [r3, #16]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d920:	b2d2      	uxtb	r2, r2
 800d922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d928:	1c5a      	adds	r2, r3, #1
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d932:	3b01      	subs	r3, #1
 800d934:	b29a      	uxth	r2, r3
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d93e:	b29b      	uxth	r3, r3
 800d940:	3b01      	subs	r3, #1
 800d942:	b29a      	uxth	r2, r3
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d948:	4b65      	ldr	r3, [pc, #404]	; (800dae0 <HAL_I2C_Master_Receive+0x4ac>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	08db      	lsrs	r3, r3, #3
 800d94e:	4a65      	ldr	r2, [pc, #404]	; (800dae4 <HAL_I2C_Master_Receive+0x4b0>)
 800d950:	fba2 2303 	umull	r2, r3, r2, r3
 800d954:	0a1a      	lsrs	r2, r3, #8
 800d956:	4613      	mov	r3, r2
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4413      	add	r3, r2
 800d95c:	00da      	lsls	r2, r3, #3
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800d962:	6a3b      	ldr	r3, [r7, #32]
 800d964:	3b01      	subs	r3, #1
 800d966:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800d968:	6a3b      	ldr	r3, [r7, #32]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d117      	bne.n	800d99e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2200      	movs	r2, #0
 800d972:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2220      	movs	r2, #32
 800d978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2200      	movs	r2, #0
 800d980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d988:	f043 0220 	orr.w	r2, r3, #32
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800d990:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2200      	movs	r2, #0
 800d996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800d99a:	2301      	movs	r3, #1
 800d99c:	e099      	b.n	800dad2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	695b      	ldr	r3, [r3, #20]
 800d9a4:	f003 0304 	and.w	r3, r3, #4
 800d9a8:	2b04      	cmp	r3, #4
 800d9aa:	d1da      	bne.n	800d962 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	691a      	ldr	r2, [r3, #16]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c6:	b2d2      	uxtb	r2, r2
 800d9c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ce:	1c5a      	adds	r2, r3, #1
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d9ee:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	691a      	ldr	r2, [r3, #16]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fa:	b2d2      	uxtb	r2, r2
 800d9fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da02:	1c5a      	adds	r2, r3, #1
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da0c:	3b01      	subs	r3, #1
 800da0e:	b29a      	uxth	r2, r3
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da18:	b29b      	uxth	r3, r3
 800da1a:	3b01      	subs	r3, #1
 800da1c:	b29a      	uxth	r2, r3
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	855a      	strh	r2, [r3, #42]	; 0x2a
 800da22:	e042      	b.n	800daaa <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f001 f91b 	bl	800ec64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d001      	beq.n	800da38 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800da34:	2301      	movs	r3, #1
 800da36:	e04c      	b.n	800dad2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	691a      	ldr	r2, [r3, #16]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da42:	b2d2      	uxtb	r2, r2
 800da44:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4a:	1c5a      	adds	r2, r3, #1
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da54:	3b01      	subs	r3, #1
 800da56:	b29a      	uxth	r2, r3
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da60:	b29b      	uxth	r3, r3
 800da62:	3b01      	subs	r3, #1
 800da64:	b29a      	uxth	r2, r3
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	695b      	ldr	r3, [r3, #20]
 800da70:	f003 0304 	and.w	r3, r3, #4
 800da74:	2b04      	cmp	r3, #4
 800da76:	d118      	bne.n	800daaa <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	691a      	ldr	r2, [r3, #16]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da82:	b2d2      	uxtb	r2, r2
 800da84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8a:	1c5a      	adds	r2, r3, #1
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da94:	3b01      	subs	r3, #1
 800da96:	b29a      	uxth	r2, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	3b01      	subs	r3, #1
 800daa4:	b29a      	uxth	r2, r3
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f47f ae99 	bne.w	800d7e6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2220      	movs	r2, #32
 800dab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2200      	movs	r2, #0
 800dac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	e000      	b.n	800dad2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800dad0:	2302      	movs	r3, #2
  }
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3728      	adds	r7, #40	; 0x28
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	00010004 	.word	0x00010004
 800dae0:	20000004 	.word	0x20000004
 800dae4:	14f8b589 	.word	0x14f8b589

0800dae8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b088      	sub	sp, #32
 800daec:	af02      	add	r7, sp, #8
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	4608      	mov	r0, r1
 800daf2:	4611      	mov	r1, r2
 800daf4:	461a      	mov	r2, r3
 800daf6:	4603      	mov	r3, r0
 800daf8:	817b      	strh	r3, [r7, #10]
 800dafa:	460b      	mov	r3, r1
 800dafc:	813b      	strh	r3, [r7, #8]
 800dafe:	4613      	mov	r3, r2
 800db00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800db02:	f7fe fe31 	bl	800c768 <HAL_GetTick>
 800db06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	2b20      	cmp	r3, #32
 800db12:	f040 80d9 	bne.w	800dcc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	9300      	str	r3, [sp, #0]
 800db1a:	2319      	movs	r3, #25
 800db1c:	2201      	movs	r2, #1
 800db1e:	496d      	ldr	r1, [pc, #436]	; (800dcd4 <HAL_I2C_Mem_Write+0x1ec>)
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f000 ff47 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d001      	beq.n	800db30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800db2c:	2302      	movs	r3, #2
 800db2e:	e0cc      	b.n	800dcca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db36:	2b01      	cmp	r3, #1
 800db38:	d101      	bne.n	800db3e <HAL_I2C_Mem_Write+0x56>
 800db3a:	2302      	movs	r3, #2
 800db3c:	e0c5      	b.n	800dcca <HAL_I2C_Mem_Write+0x1e2>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2201      	movs	r2, #1
 800db42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	2b01      	cmp	r3, #1
 800db52:	d007      	beq.n	800db64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f042 0201 	orr.w	r2, r2, #1
 800db62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2221      	movs	r2, #33	; 0x21
 800db78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2240      	movs	r2, #64	; 0x40
 800db80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2200      	movs	r2, #0
 800db88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	6a3a      	ldr	r2, [r7, #32]
 800db8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	4a4d      	ldr	r2, [pc, #308]	; (800dcd8 <HAL_I2C_Mem_Write+0x1f0>)
 800dba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dba6:	88f8      	ldrh	r0, [r7, #6]
 800dba8:	893a      	ldrh	r2, [r7, #8]
 800dbaa:	8979      	ldrh	r1, [r7, #10]
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	9301      	str	r3, [sp, #4]
 800dbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f000 fd7e 	bl	800e6b8 <I2C_RequestMemoryWrite>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d052      	beq.n	800dc68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e081      	b.n	800dcca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dbc6:	697a      	ldr	r2, [r7, #20]
 800dbc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f000 ffc8 	bl	800eb60 <I2C_WaitOnTXEFlagUntilTimeout>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00d      	beq.n	800dbf2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbda:	2b04      	cmp	r3, #4
 800dbdc:	d107      	bne.n	800dbee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e06b      	b.n	800dcca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf6:	781a      	ldrb	r2, [r3, #0]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc02:	1c5a      	adds	r2, r3, #1
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	b29a      	uxth	r2, r3
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	695b      	ldr	r3, [r3, #20]
 800dc28:	f003 0304 	and.w	r3, r3, #4
 800dc2c:	2b04      	cmp	r3, #4
 800dc2e:	d11b      	bne.n	800dc68 <HAL_I2C_Mem_Write+0x180>
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d017      	beq.n	800dc68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3c:	781a      	ldrb	r2, [r3, #0]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc52:	3b01      	subs	r3, #1
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	3b01      	subs	r3, #1
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1aa      	bne.n	800dbc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc70:	697a      	ldr	r2, [r7, #20]
 800dc72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f000 ffb4 	bl	800ebe2 <I2C_WaitOnBTFFlagUntilTimeout>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00d      	beq.n	800dc9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc84:	2b04      	cmp	r3, #4
 800dc86:	d107      	bne.n	800dc98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	e016      	b.n	800dcca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dcaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2220      	movs	r2, #32
 800dcb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	e000      	b.n	800dcca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800dcc8:	2302      	movs	r3, #2
  }
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3718      	adds	r7, #24
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	00100002 	.word	0x00100002
 800dcd8:	ffff0000 	.word	0xffff0000

0800dcdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b08c      	sub	sp, #48	; 0x30
 800dce0:	af02      	add	r7, sp, #8
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	4608      	mov	r0, r1
 800dce6:	4611      	mov	r1, r2
 800dce8:	461a      	mov	r2, r3
 800dcea:	4603      	mov	r3, r0
 800dcec:	817b      	strh	r3, [r7, #10]
 800dcee:	460b      	mov	r3, r1
 800dcf0:	813b      	strh	r3, [r7, #8]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dcfa:	f7fe fd35 	bl	800c768 <HAL_GetTick>
 800dcfe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	2b20      	cmp	r3, #32
 800dd0a:	f040 823d 	bne.w	800e188 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	2319      	movs	r3, #25
 800dd14:	2201      	movs	r2, #1
 800dd16:	4981      	ldr	r1, [pc, #516]	; (800df1c <HAL_I2C_Mem_Read+0x240>)
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f000 fe4b 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d001      	beq.n	800dd28 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800dd24:	2302      	movs	r3, #2
 800dd26:	e230      	b.n	800e18a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d101      	bne.n	800dd36 <HAL_I2C_Mem_Read+0x5a>
 800dd32:	2302      	movs	r3, #2
 800dd34:	e229      	b.n	800e18a <HAL_I2C_Mem_Read+0x4ae>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 0301 	and.w	r3, r3, #1
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d007      	beq.n	800dd5c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f042 0201 	orr.w	r2, r2, #1
 800dd5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2222      	movs	r2, #34	; 0x22
 800dd70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2240      	movs	r2, #64	; 0x40
 800dd78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800dd8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	4a61      	ldr	r2, [pc, #388]	; (800df20 <HAL_I2C_Mem_Read+0x244>)
 800dd9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dd9e:	88f8      	ldrh	r0, [r7, #6]
 800dda0:	893a      	ldrh	r2, [r7, #8]
 800dda2:	8979      	ldrh	r1, [r7, #10]
 800dda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda6:	9301      	str	r3, [sp, #4]
 800dda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddaa:	9300      	str	r3, [sp, #0]
 800ddac:	4603      	mov	r3, r0
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	f000 fd18 	bl	800e7e4 <I2C_RequestMemoryRead>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d001      	beq.n	800ddbe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e1e5      	b.n	800e18a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d113      	bne.n	800ddee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	61fb      	str	r3, [r7, #28]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	695b      	ldr	r3, [r3, #20]
 800ddd0:	61fb      	str	r3, [r7, #28]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	699b      	ldr	r3, [r3, #24]
 800ddd8:	61fb      	str	r3, [r7, #28]
 800ddda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddea:	601a      	str	r2, [r3, #0]
 800ddec:	e1b9      	b.n	800e162 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d11d      	bne.n	800de32 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800de06:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de08:	2300      	movs	r3, #0
 800de0a:	61bb      	str	r3, [r7, #24]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	695b      	ldr	r3, [r3, #20]
 800de12:	61bb      	str	r3, [r7, #24]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	699b      	ldr	r3, [r3, #24]
 800de1a:	61bb      	str	r3, [r7, #24]
 800de1c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800de2e:	b662      	cpsie	i
 800de30:	e197      	b.n	800e162 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de36:	2b02      	cmp	r3, #2
 800de38:	d11d      	bne.n	800de76 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800de4a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de4c:	2300      	movs	r3, #0
 800de4e:	617b      	str	r3, [r7, #20]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	617b      	str	r3, [r7, #20]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	699b      	ldr	r3, [r3, #24]
 800de5e:	617b      	str	r3, [r7, #20]
 800de60:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800de72:	b662      	cpsie	i
 800de74:	e175      	b.n	800e162 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de84:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de86:	2300      	movs	r3, #0
 800de88:	613b      	str	r3, [r7, #16]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	695b      	ldr	r3, [r3, #20]
 800de90:	613b      	str	r3, [r7, #16]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	699b      	ldr	r3, [r3, #24]
 800de98:	613b      	str	r3, [r7, #16]
 800de9a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800de9c:	e161      	b.n	800e162 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dea2:	2b03      	cmp	r3, #3
 800dea4:	f200 811a 	bhi.w	800e0dc <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800deac:	2b01      	cmp	r3, #1
 800deae:	d123      	bne.n	800def8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800deb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f000 fed5 	bl	800ec64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d001      	beq.n	800dec4 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 800dec0:	2301      	movs	r3, #1
 800dec2:	e162      	b.n	800e18a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	691a      	ldr	r2, [r3, #16]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dece:	b2d2      	uxtb	r2, r2
 800ded0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded6:	1c5a      	adds	r2, r3, #1
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dee0:	3b01      	subs	r3, #1
 800dee2:	b29a      	uxth	r2, r3
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800deec:	b29b      	uxth	r3, r3
 800deee:	3b01      	subs	r3, #1
 800def0:	b29a      	uxth	r2, r3
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800def6:	e134      	b.n	800e162 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800defc:	2b02      	cmp	r3, #2
 800defe:	d150      	bne.n	800dfa2 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df02:	9300      	str	r3, [sp, #0]
 800df04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df06:	2200      	movs	r2, #0
 800df08:	4906      	ldr	r1, [pc, #24]	; (800df24 <HAL_I2C_Mem_Read+0x248>)
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f000 fd52 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d008      	beq.n	800df28 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800df16:	2301      	movs	r3, #1
 800df18:	e137      	b.n	800e18a <HAL_I2C_Mem_Read+0x4ae>
 800df1a:	bf00      	nop
 800df1c:	00100002 	.word	0x00100002
 800df20:	ffff0000 	.word	0xffff0000
 800df24:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800df28:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df38:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	691a      	ldr	r2, [r3, #16]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df44:	b2d2      	uxtb	r2, r2
 800df46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4c:	1c5a      	adds	r2, r3, #1
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df56:	3b01      	subs	r3, #1
 800df58:	b29a      	uxth	r2, r3
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df62:	b29b      	uxth	r3, r3
 800df64:	3b01      	subs	r3, #1
 800df66:	b29a      	uxth	r2, r3
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800df6c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	691a      	ldr	r2, [r3, #16]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df78:	b2d2      	uxtb	r2, r2
 800df7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df80:	1c5a      	adds	r2, r3, #1
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df8a:	3b01      	subs	r3, #1
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df96:	b29b      	uxth	r3, r3
 800df98:	3b01      	subs	r3, #1
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dfa0:	e0df      	b.n	800e162 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	497a      	ldr	r1, [pc, #488]	; (800e194 <HAL_I2C_Mem_Read+0x4b8>)
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f000 fd01 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d001      	beq.n	800dfbc <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e0e6      	b.n	800e18a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800dfcc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	691a      	ldr	r2, [r3, #16]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd8:	b2d2      	uxtb	r2, r2
 800dfda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe0:	1c5a      	adds	r2, r3, #1
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfea:	3b01      	subs	r3, #1
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	3b01      	subs	r3, #1
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e000:	4b65      	ldr	r3, [pc, #404]	; (800e198 <HAL_I2C_Mem_Read+0x4bc>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	08db      	lsrs	r3, r3, #3
 800e006:	4a65      	ldr	r2, [pc, #404]	; (800e19c <HAL_I2C_Mem_Read+0x4c0>)
 800e008:	fba2 2303 	umull	r2, r3, r2, r3
 800e00c:	0a1a      	lsrs	r2, r3, #8
 800e00e:	4613      	mov	r3, r2
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4413      	add	r3, r2
 800e014:	00da      	lsls	r2, r3, #3
 800e016:	1ad3      	subs	r3, r2, r3
 800e018:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800e01a:	6a3b      	ldr	r3, [r7, #32]
 800e01c:	3b01      	subs	r3, #1
 800e01e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800e020:	6a3b      	ldr	r3, [r7, #32]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d117      	bne.n	800e056 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2200      	movs	r2, #0
 800e02a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2220      	movs	r2, #32
 800e030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2200      	movs	r2, #0
 800e038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e040:	f043 0220 	orr.w	r2, r3, #32
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800e048:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	e099      	b.n	800e18a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	695b      	ldr	r3, [r3, #20]
 800e05c:	f003 0304 	and.w	r3, r3, #4
 800e060:	2b04      	cmp	r3, #4
 800e062:	d1da      	bne.n	800e01a <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	691a      	ldr	r2, [r3, #16]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07e:	b2d2      	uxtb	r2, r2
 800e080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e086:	1c5a      	adds	r2, r3, #1
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e090:	3b01      	subs	r3, #1
 800e092:	b29a      	uxth	r2, r3
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e0a6:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	691a      	ldr	r2, [r3, #16]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b2:	b2d2      	uxtb	r2, r2
 800e0b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ba:	1c5a      	adds	r2, r3, #1
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	b29a      	uxth	r2, r3
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	3b01      	subs	r3, #1
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e0da:	e042      	b.n	800e162 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f000 fdbf 	bl	800ec64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d001      	beq.n	800e0f0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e04c      	b.n	800e18a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	691a      	ldr	r2, [r3, #16]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fa:	b2d2      	uxtb	r2, r2
 800e0fc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e102:	1c5a      	adds	r2, r3, #1
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e10c:	3b01      	subs	r3, #1
 800e10e:	b29a      	uxth	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e118:	b29b      	uxth	r3, r3
 800e11a:	3b01      	subs	r3, #1
 800e11c:	b29a      	uxth	r2, r3
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	f003 0304 	and.w	r3, r3, #4
 800e12c:	2b04      	cmp	r3, #4
 800e12e:	d118      	bne.n	800e162 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	691a      	ldr	r2, [r3, #16]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13a:	b2d2      	uxtb	r2, r2
 800e13c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e142:	1c5a      	adds	r2, r3, #1
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e14c:	3b01      	subs	r3, #1
 800e14e:	b29a      	uxth	r2, r3
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e158:	b29b      	uxth	r3, r3
 800e15a:	3b01      	subs	r3, #1
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e166:	2b00      	cmp	r3, #0
 800e168:	f47f ae99 	bne.w	800de9e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2220      	movs	r2, #32
 800e170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2200      	movs	r2, #0
 800e178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e184:	2300      	movs	r3, #0
 800e186:	e000      	b.n	800e18a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 800e188:	2302      	movs	r3, #2
  }
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3728      	adds	r7, #40	; 0x28
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	00010004 	.word	0x00010004
 800e198:	20000004 	.word	0x20000004
 800e19c:	14f8b589 	.word	0x14f8b589

0800e1a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b08a      	sub	sp, #40	; 0x28
 800e1a4:	af02      	add	r7, sp, #8
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	607a      	str	r2, [r7, #4]
 800e1aa:	603b      	str	r3, [r7, #0]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800e1b0:	f7fe fada 	bl	800c768 <HAL_GetTick>
 800e1b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	2b20      	cmp	r3, #32
 800e1c4:	f040 8111 	bne.w	800e3ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	9300      	str	r3, [sp, #0]
 800e1cc:	2319      	movs	r3, #25
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	4988      	ldr	r1, [pc, #544]	; (800e3f4 <HAL_I2C_IsDeviceReady+0x254>)
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	f000 fbee 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800e1de:	2302      	movs	r3, #2
 800e1e0:	e104      	b.n	800e3ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d101      	bne.n	800e1f0 <HAL_I2C_IsDeviceReady+0x50>
 800e1ec:	2302      	movs	r3, #2
 800e1ee:	e0fd      	b.n	800e3ec <HAL_I2C_IsDeviceReady+0x24c>
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f003 0301 	and.w	r3, r3, #1
 800e202:	2b01      	cmp	r3, #1
 800e204:	d007      	beq.n	800e216 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f042 0201 	orr.w	r2, r2, #1
 800e214:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e224:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2224      	movs	r2, #36	; 0x24
 800e22a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2200      	movs	r2, #0
 800e232:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	4a70      	ldr	r2, [pc, #448]	; (800e3f8 <HAL_I2C_IsDeviceReady+0x258>)
 800e238:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e248:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	9300      	str	r3, [sp, #0]
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	2200      	movs	r2, #0
 800e252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	f000 fbac 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00d      	beq.n	800e27e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e26c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e270:	d103      	bne.n	800e27a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e278:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800e27a:	2303      	movs	r3, #3
 800e27c:	e0b6      	b.n	800e3ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e27e:	897b      	ldrh	r3, [r7, #10]
 800e280:	b2db      	uxtb	r3, r3
 800e282:	461a      	mov	r2, r3
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e28c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800e28e:	f7fe fa6b 	bl	800c768 <HAL_GetTick>
 800e292:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	695b      	ldr	r3, [r3, #20]
 800e29a:	f003 0302 	and.w	r3, r3, #2
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	bf0c      	ite	eq
 800e2a2:	2301      	moveq	r3, #1
 800e2a4:	2300      	movne	r3, #0
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	695b      	ldr	r3, [r3, #20]
 800e2b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e2b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2b8:	bf0c      	ite	eq
 800e2ba:	2301      	moveq	r3, #1
 800e2bc:	2300      	movne	r3, #0
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800e2c2:	e025      	b.n	800e310 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e2c4:	f7fe fa50 	bl	800c768 <HAL_GetTick>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	1ad3      	subs	r3, r2, r3
 800e2ce:	683a      	ldr	r2, [r7, #0]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d302      	bcc.n	800e2da <HAL_I2C_IsDeviceReady+0x13a>
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d103      	bne.n	800e2e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	22a0      	movs	r2, #160	; 0xa0
 800e2de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	695b      	ldr	r3, [r3, #20]
 800e2e8:	f003 0302 	and.w	r3, r3, #2
 800e2ec:	2b02      	cmp	r3, #2
 800e2ee:	bf0c      	ite	eq
 800e2f0:	2301      	moveq	r3, #1
 800e2f2:	2300      	movne	r3, #0
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	695b      	ldr	r3, [r3, #20]
 800e2fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e306:	bf0c      	ite	eq
 800e308:	2301      	moveq	r3, #1
 800e30a:	2300      	movne	r3, #0
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e316:	b2db      	uxtb	r3, r3
 800e318:	2ba0      	cmp	r3, #160	; 0xa0
 800e31a:	d005      	beq.n	800e328 <HAL_I2C_IsDeviceReady+0x188>
 800e31c:	7dfb      	ldrb	r3, [r7, #23]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d102      	bne.n	800e328 <HAL_I2C_IsDeviceReady+0x188>
 800e322:	7dbb      	ldrb	r3, [r7, #22]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d0cd      	beq.n	800e2c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2220      	movs	r2, #32
 800e32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	695b      	ldr	r3, [r3, #20]
 800e336:	f003 0302 	and.w	r3, r3, #2
 800e33a:	2b02      	cmp	r3, #2
 800e33c:	d129      	bne.n	800e392 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e34c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e34e:	2300      	movs	r3, #0
 800e350:	613b      	str	r3, [r7, #16]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	695b      	ldr	r3, [r3, #20]
 800e358:	613b      	str	r3, [r7, #16]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	699b      	ldr	r3, [r3, #24]
 800e360:	613b      	str	r3, [r7, #16]
 800e362:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	9300      	str	r3, [sp, #0]
 800e368:	2319      	movs	r3, #25
 800e36a:	2201      	movs	r2, #1
 800e36c:	4921      	ldr	r1, [pc, #132]	; (800e3f4 <HAL_I2C_IsDeviceReady+0x254>)
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f000 fb20 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d001      	beq.n	800e37e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800e37a:	2301      	movs	r3, #1
 800e37c:	e036      	b.n	800e3ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2220      	movs	r2, #32
 800e382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2200      	movs	r2, #0
 800e38a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800e38e:	2300      	movs	r3, #0
 800e390:	e02c      	b.n	800e3ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e3a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e3aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	2319      	movs	r3, #25
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	490f      	ldr	r1, [pc, #60]	; (800e3f4 <HAL_I2C_IsDeviceReady+0x254>)
 800e3b6:	68f8      	ldr	r0, [r7, #12]
 800e3b8:	f000 fafc 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e012      	b.n	800e3ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800e3cc:	69ba      	ldr	r2, [r7, #24]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	f4ff af32 	bcc.w	800e23a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2220      	movs	r2, #32
 800e3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e000      	b.n	800e3ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800e3ea:	2302      	movs	r3, #2
  }
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3720      	adds	r7, #32
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	00100002 	.word	0x00100002
 800e3f8:	ffff0000 	.word	0xffff0000

0800e3fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e40a:	b2db      	uxtb	r3, r3
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	bc80      	pop	{r7}
 800e414:	4770      	bx	lr
	...

0800e418 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b088      	sub	sp, #32
 800e41c:	af02      	add	r7, sp, #8
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	607a      	str	r2, [r7, #4]
 800e422:	603b      	str	r3, [r7, #0]
 800e424:	460b      	mov	r3, r1
 800e426:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	2b08      	cmp	r3, #8
 800e432:	d006      	beq.n	800e442 <I2C_MasterRequestWrite+0x2a>
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	2b01      	cmp	r3, #1
 800e438:	d003      	beq.n	800e442 <I2C_MasterRequestWrite+0x2a>
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e440:	d108      	bne.n	800e454 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e450:	601a      	str	r2, [r3, #0]
 800e452:	e00b      	b.n	800e46c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e458:	2b12      	cmp	r3, #18
 800e45a:	d107      	bne.n	800e46c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e46a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f000 fa9b 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00d      	beq.n	800e4a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e48e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e492:	d103      	bne.n	800e49c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e49a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e49c:	2303      	movs	r3, #3
 800e49e:	e035      	b.n	800e50c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	691b      	ldr	r3, [r3, #16]
 800e4a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4a8:	d108      	bne.n	800e4bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e4aa:	897b      	ldrh	r3, [r7, #10]
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e4b8:	611a      	str	r2, [r3, #16]
 800e4ba:	e01b      	b.n	800e4f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e4bc:	897b      	ldrh	r3, [r7, #10]
 800e4be:	11db      	asrs	r3, r3, #7
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	f003 0306 	and.w	r3, r3, #6
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	f063 030f 	orn	r3, r3, #15
 800e4cc:	b2da      	uxtb	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	490e      	ldr	r1, [pc, #56]	; (800e514 <I2C_MasterRequestWrite+0xfc>)
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f000 fac1 	bl	800ea62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d001      	beq.n	800e4ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	e010      	b.n	800e50c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e4ea:	897b      	ldrh	r3, [r7, #10]
 800e4ec:	b2da      	uxtb	r2, r3
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	4907      	ldr	r1, [pc, #28]	; (800e518 <I2C_MasterRequestWrite+0x100>)
 800e4fa:	68f8      	ldr	r0, [r7, #12]
 800e4fc:	f000 fab1 	bl	800ea62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d001      	beq.n	800e50a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e506:	2301      	movs	r3, #1
 800e508:	e000      	b.n	800e50c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e50a:	2300      	movs	r3, #0
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	00010008 	.word	0x00010008
 800e518:	00010002 	.word	0x00010002

0800e51c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b088      	sub	sp, #32
 800e520:	af02      	add	r7, sp, #8
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	607a      	str	r2, [r7, #4]
 800e526:	603b      	str	r3, [r7, #0]
 800e528:	460b      	mov	r3, r1
 800e52a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e530:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e540:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	2b08      	cmp	r3, #8
 800e546:	d006      	beq.n	800e556 <I2C_MasterRequestRead+0x3a>
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d003      	beq.n	800e556 <I2C_MasterRequestRead+0x3a>
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e554:	d108      	bne.n	800e568 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e564:	601a      	str	r2, [r3, #0]
 800e566:	e00b      	b.n	800e580 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e56c:	2b11      	cmp	r3, #17
 800e56e:	d107      	bne.n	800e580 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e57e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f000 fa11 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00d      	beq.n	800e5b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5a6:	d103      	bne.n	800e5b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e5ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e5b0:	2303      	movs	r3, #3
 800e5b2:	e079      	b.n	800e6a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	691b      	ldr	r3, [r3, #16]
 800e5b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e5bc:	d108      	bne.n	800e5d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e5be:	897b      	ldrh	r3, [r7, #10]
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	f043 0301 	orr.w	r3, r3, #1
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	611a      	str	r2, [r3, #16]
 800e5ce:	e05f      	b.n	800e690 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e5d0:	897b      	ldrh	r3, [r7, #10]
 800e5d2:	11db      	asrs	r3, r3, #7
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	f003 0306 	and.w	r3, r3, #6
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	f063 030f 	orn	r3, r3, #15
 800e5e0:	b2da      	uxtb	r2, r3
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	4930      	ldr	r1, [pc, #192]	; (800e6b0 <I2C_MasterRequestRead+0x194>)
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	f000 fa37 	bl	800ea62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d001      	beq.n	800e5fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e054      	b.n	800e6a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e5fe:	897b      	ldrh	r3, [r7, #10]
 800e600:	b2da      	uxtb	r2, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	4929      	ldr	r1, [pc, #164]	; (800e6b4 <I2C_MasterRequestRead+0x198>)
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f000 fa27 	bl	800ea62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e614:	4603      	mov	r3, r0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d001      	beq.n	800e61e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e61a:	2301      	movs	r3, #1
 800e61c:	e044      	b.n	800e6a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e61e:	2300      	movs	r3, #0
 800e620:	613b      	str	r3, [r7, #16]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	695b      	ldr	r3, [r3, #20]
 800e628:	613b      	str	r3, [r7, #16]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	699b      	ldr	r3, [r3, #24]
 800e630:	613b      	str	r3, [r7, #16]
 800e632:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e642:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f000 f9af 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00d      	beq.n	800e678 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e66a:	d103      	bne.n	800e674 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e672:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e674:	2303      	movs	r3, #3
 800e676:	e017      	b.n	800e6a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e678:	897b      	ldrh	r3, [r7, #10]
 800e67a:	11db      	asrs	r3, r3, #7
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	f003 0306 	and.w	r3, r3, #6
 800e682:	b2db      	uxtb	r3, r3
 800e684:	f063 030e 	orn	r3, r3, #14
 800e688:	b2da      	uxtb	r2, r3
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	4907      	ldr	r1, [pc, #28]	; (800e6b4 <I2C_MasterRequestRead+0x198>)
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	f000 f9e3 	bl	800ea62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e69c:	4603      	mov	r3, r0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d001      	beq.n	800e6a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e000      	b.n	800e6a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3718      	adds	r7, #24
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	00010008 	.word	0x00010008
 800e6b4:	00010002 	.word	0x00010002

0800e6b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b088      	sub	sp, #32
 800e6bc:	af02      	add	r7, sp, #8
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	4608      	mov	r0, r1
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	817b      	strh	r3, [r7, #10]
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	813b      	strh	r3, [r7, #8]
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e4:	9300      	str	r3, [sp, #0]
 800e6e6:	6a3b      	ldr	r3, [r7, #32]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e6ee:	68f8      	ldr	r0, [r7, #12]
 800e6f0:	f000 f960 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d00d      	beq.n	800e716 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e708:	d103      	bne.n	800e712 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e710:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e712:	2303      	movs	r3, #3
 800e714:	e05f      	b.n	800e7d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e716:	897b      	ldrh	r3, [r7, #10]
 800e718:	b2db      	uxtb	r3, r3
 800e71a:	461a      	mov	r2, r3
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e724:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	6a3a      	ldr	r2, [r7, #32]
 800e72a:	492d      	ldr	r1, [pc, #180]	; (800e7e0 <I2C_RequestMemoryWrite+0x128>)
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f000 f998 	bl	800ea62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d001      	beq.n	800e73c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e738:	2301      	movs	r3, #1
 800e73a:	e04c      	b.n	800e7d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e73c:	2300      	movs	r3, #0
 800e73e:	617b      	str	r3, [r7, #20]
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	695b      	ldr	r3, [r3, #20]
 800e746:	617b      	str	r3, [r7, #20]
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	699b      	ldr	r3, [r3, #24]
 800e74e:	617b      	str	r3, [r7, #20]
 800e750:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e754:	6a39      	ldr	r1, [r7, #32]
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f000 fa02 	bl	800eb60 <I2C_WaitOnTXEFlagUntilTimeout>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d00d      	beq.n	800e77e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e766:	2b04      	cmp	r3, #4
 800e768:	d107      	bne.n	800e77a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e778:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e77a:	2301      	movs	r3, #1
 800e77c:	e02b      	b.n	800e7d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e77e:	88fb      	ldrh	r3, [r7, #6]
 800e780:	2b01      	cmp	r3, #1
 800e782:	d105      	bne.n	800e790 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e784:	893b      	ldrh	r3, [r7, #8]
 800e786:	b2da      	uxtb	r2, r3
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	611a      	str	r2, [r3, #16]
 800e78e:	e021      	b.n	800e7d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e790:	893b      	ldrh	r3, [r7, #8]
 800e792:	0a1b      	lsrs	r3, r3, #8
 800e794:	b29b      	uxth	r3, r3
 800e796:	b2da      	uxtb	r2, r3
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e79e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7a0:	6a39      	ldr	r1, [r7, #32]
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f000 f9dc 	bl	800eb60 <I2C_WaitOnTXEFlagUntilTimeout>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00d      	beq.n	800e7ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	d107      	bne.n	800e7c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e005      	b.n	800e7d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e7ca:	893b      	ldrh	r3, [r7, #8]
 800e7cc:	b2da      	uxtb	r2, r3
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3718      	adds	r7, #24
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	00010002 	.word	0x00010002

0800e7e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b088      	sub	sp, #32
 800e7e8:	af02      	add	r7, sp, #8
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	4608      	mov	r0, r1
 800e7ee:	4611      	mov	r1, r2
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	817b      	strh	r3, [r7, #10]
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	813b      	strh	r3, [r7, #8]
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e80c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e81c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	2200      	movs	r2, #0
 800e826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f000 f8c2 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00d      	beq.n	800e852 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e844:	d103      	bne.n	800e84e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e84c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e84e:	2303      	movs	r3, #3
 800e850:	e0aa      	b.n	800e9a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e852:	897b      	ldrh	r3, [r7, #10]
 800e854:	b2db      	uxtb	r3, r3
 800e856:	461a      	mov	r2, r3
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e860:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	6a3a      	ldr	r2, [r7, #32]
 800e866:	4952      	ldr	r1, [pc, #328]	; (800e9b0 <I2C_RequestMemoryRead+0x1cc>)
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f000 f8fa 	bl	800ea62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d001      	beq.n	800e878 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	e097      	b.n	800e9a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e878:	2300      	movs	r3, #0
 800e87a:	617b      	str	r3, [r7, #20]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	695b      	ldr	r3, [r3, #20]
 800e882:	617b      	str	r3, [r7, #20]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	699b      	ldr	r3, [r3, #24]
 800e88a:	617b      	str	r3, [r7, #20]
 800e88c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e890:	6a39      	ldr	r1, [r7, #32]
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f000 f964 	bl	800eb60 <I2C_WaitOnTXEFlagUntilTimeout>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d00d      	beq.n	800e8ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8a2:	2b04      	cmp	r3, #4
 800e8a4:	d107      	bne.n	800e8b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e076      	b.n	800e9a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e8ba:	88fb      	ldrh	r3, [r7, #6]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d105      	bne.n	800e8cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e8c0:	893b      	ldrh	r3, [r7, #8]
 800e8c2:	b2da      	uxtb	r2, r3
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	611a      	str	r2, [r3, #16]
 800e8ca:	e021      	b.n	800e910 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e8cc:	893b      	ldrh	r3, [r7, #8]
 800e8ce:	0a1b      	lsrs	r3, r3, #8
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	b2da      	uxtb	r2, r3
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e8da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8dc:	6a39      	ldr	r1, [r7, #32]
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	f000 f93e 	bl	800eb60 <I2C_WaitOnTXEFlagUntilTimeout>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00d      	beq.n	800e906 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ee:	2b04      	cmp	r3, #4
 800e8f0:	d107      	bne.n	800e902 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e900:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e902:	2301      	movs	r3, #1
 800e904:	e050      	b.n	800e9a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e906:	893b      	ldrh	r3, [r7, #8]
 800e908:	b2da      	uxtb	r2, r3
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e912:	6a39      	ldr	r1, [r7, #32]
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f000 f923 	bl	800eb60 <I2C_WaitOnTXEFlagUntilTimeout>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d00d      	beq.n	800e93c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e924:	2b04      	cmp	r3, #4
 800e926:	d107      	bne.n	800e938 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e936:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e938:	2301      	movs	r3, #1
 800e93a:	e035      	b.n	800e9a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e94a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	6a3b      	ldr	r3, [r7, #32]
 800e952:	2200      	movs	r2, #0
 800e954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e958:	68f8      	ldr	r0, [r7, #12]
 800e95a:	f000 f82b 	bl	800e9b4 <I2C_WaitOnFlagUntilTimeout>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d00d      	beq.n	800e980 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e96e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e972:	d103      	bne.n	800e97c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e97a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e97c:	2303      	movs	r3, #3
 800e97e:	e013      	b.n	800e9a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e980:	897b      	ldrh	r3, [r7, #10]
 800e982:	b2db      	uxtb	r3, r3
 800e984:	f043 0301 	orr.w	r3, r3, #1
 800e988:	b2da      	uxtb	r2, r3
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e992:	6a3a      	ldr	r2, [r7, #32]
 800e994:	4906      	ldr	r1, [pc, #24]	; (800e9b0 <I2C_RequestMemoryRead+0x1cc>)
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f000 f863 	bl	800ea62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d001      	beq.n	800e9a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e000      	b.n	800e9a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3718      	adds	r7, #24
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	00010002 	.word	0x00010002

0800e9b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	603b      	str	r3, [r7, #0]
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e9c4:	e025      	b.n	800ea12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9cc:	d021      	beq.n	800ea12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9ce:	f7fd fecb 	bl	800c768 <HAL_GetTick>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	683a      	ldr	r2, [r7, #0]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d302      	bcc.n	800e9e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d116      	bne.n	800ea12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2220      	movs	r2, #32
 800e9ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9fe:	f043 0220 	orr.w	r2, r3, #32
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ea0e:	2301      	movs	r3, #1
 800ea10:	e023      	b.n	800ea5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	0c1b      	lsrs	r3, r3, #16
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d10d      	bne.n	800ea38 <I2C_WaitOnFlagUntilTimeout+0x84>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	43da      	mvns	r2, r3
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	4013      	ands	r3, r2
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	bf0c      	ite	eq
 800ea2e:	2301      	moveq	r3, #1
 800ea30:	2300      	movne	r3, #0
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	461a      	mov	r2, r3
 800ea36:	e00c      	b.n	800ea52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	699b      	ldr	r3, [r3, #24]
 800ea3e:	43da      	mvns	r2, r3
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	4013      	ands	r3, r2
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	bf0c      	ite	eq
 800ea4a:	2301      	moveq	r3, #1
 800ea4c:	2300      	movne	r3, #0
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	461a      	mov	r2, r3
 800ea52:	79fb      	ldrb	r3, [r7, #7]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d0b6      	beq.n	800e9c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b084      	sub	sp, #16
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	60f8      	str	r0, [r7, #12]
 800ea6a:	60b9      	str	r1, [r7, #8]
 800ea6c:	607a      	str	r2, [r7, #4]
 800ea6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ea70:	e051      	b.n	800eb16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	695b      	ldr	r3, [r3, #20]
 800ea78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ea7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea80:	d123      	bne.n	800eaca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ea9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2220      	movs	r2, #32
 800eaa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eab6:	f043 0204 	orr.w	r2, r3, #4
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2200      	movs	r2, #0
 800eac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800eac6:	2301      	movs	r3, #1
 800eac8:	e046      	b.n	800eb58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead0:	d021      	beq.n	800eb16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ead2:	f7fd fe49 	bl	800c768 <HAL_GetTick>
 800ead6:	4602      	mov	r2, r0
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	1ad3      	subs	r3, r2, r3
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	429a      	cmp	r2, r3
 800eae0:	d302      	bcc.n	800eae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d116      	bne.n	800eb16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2220      	movs	r2, #32
 800eaf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb02:	f043 0220 	orr.w	r2, r3, #32
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800eb12:	2301      	movs	r3, #1
 800eb14:	e020      	b.n	800eb58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	0c1b      	lsrs	r3, r3, #16
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d10c      	bne.n	800eb3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	695b      	ldr	r3, [r3, #20]
 800eb26:	43da      	mvns	r2, r3
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	bf14      	ite	ne
 800eb32:	2301      	movne	r3, #1
 800eb34:	2300      	moveq	r3, #0
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	e00b      	b.n	800eb52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	699b      	ldr	r3, [r3, #24]
 800eb40:	43da      	mvns	r2, r3
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	4013      	ands	r3, r2
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	bf14      	ite	ne
 800eb4c:	2301      	movne	r3, #1
 800eb4e:	2300      	moveq	r3, #0
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d18d      	bne.n	800ea72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800eb56:	2300      	movs	r3, #0
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3710      	adds	r7, #16
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eb6c:	e02d      	b.n	800ebca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	f000 f8ce 	bl	800ed10 <I2C_IsAcknowledgeFailed>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d001      	beq.n	800eb7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	e02d      	b.n	800ebda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb84:	d021      	beq.n	800ebca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb86:	f7fd fdef 	bl	800c768 <HAL_GetTick>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	1ad3      	subs	r3, r2, r3
 800eb90:	68ba      	ldr	r2, [r7, #8]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d302      	bcc.n	800eb9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d116      	bne.n	800ebca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2220      	movs	r2, #32
 800eba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2200      	movs	r2, #0
 800ebae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb6:	f043 0220 	orr.w	r2, r3, #32
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e007      	b.n	800ebda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	695b      	ldr	r3, [r3, #20]
 800ebd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebd4:	2b80      	cmp	r3, #128	; 0x80
 800ebd6:	d1ca      	bne.n	800eb6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	60f8      	str	r0, [r7, #12]
 800ebea:	60b9      	str	r1, [r7, #8]
 800ebec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ebee:	e02d      	b.n	800ec4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ebf0:	68f8      	ldr	r0, [r7, #12]
 800ebf2:	f000 f88d 	bl	800ed10 <I2C_IsAcknowledgeFailed>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	e02d      	b.n	800ec5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec06:	d021      	beq.n	800ec4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec08:	f7fd fdae 	bl	800c768 <HAL_GetTick>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	1ad3      	subs	r3, r2, r3
 800ec12:	68ba      	ldr	r2, [r7, #8]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d302      	bcc.n	800ec1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d116      	bne.n	800ec4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2200      	movs	r2, #0
 800ec22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2220      	movs	r2, #32
 800ec28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec38:	f043 0220 	orr.w	r2, r3, #32
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	e007      	b.n	800ec5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	695b      	ldr	r3, [r3, #20]
 800ec52:	f003 0304 	and.w	r3, r3, #4
 800ec56:	2b04      	cmp	r3, #4
 800ec58:	d1ca      	bne.n	800ebf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3710      	adds	r7, #16
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ec70:	e042      	b.n	800ecf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	695b      	ldr	r3, [r3, #20]
 800ec78:	f003 0310 	and.w	r3, r3, #16
 800ec7c:	2b10      	cmp	r3, #16
 800ec7e:	d119      	bne.n	800ecb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f06f 0210 	mvn.w	r2, #16
 800ec88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2220      	movs	r2, #32
 800ec94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	e029      	b.n	800ed08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecb4:	f7fd fd58 	bl	800c768 <HAL_GetTick>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	68ba      	ldr	r2, [r7, #8]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d302      	bcc.n	800ecca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d116      	bne.n	800ecf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2200      	movs	r2, #0
 800ecce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2220      	movs	r2, #32
 800ecd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece4:	f043 0220 	orr.w	r2, r3, #32
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	e007      	b.n	800ed08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	695b      	ldr	r3, [r3, #20]
 800ecfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed02:	2b40      	cmp	r3, #64	; 0x40
 800ed04:	d1b5      	bne.n	800ec72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b083      	sub	sp, #12
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	695b      	ldr	r3, [r3, #20]
 800ed1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed26:	d11b      	bne.n	800ed60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ed30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2220      	movs	r2, #32
 800ed3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed4c:	f043 0204 	orr.w	r2, r3, #4
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e000      	b.n	800ed62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	370c      	adds	r7, #12
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bc80      	pop	{r7}
 800ed6a:	4770      	bx	lr

0800ed6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d101      	bne.n	800ed7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e26c      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f003 0301 	and.w	r3, r3, #1
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f000 8087 	beq.w	800ee9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ed8c:	4b92      	ldr	r3, [pc, #584]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	f003 030c 	and.w	r3, r3, #12
 800ed94:	2b04      	cmp	r3, #4
 800ed96:	d00c      	beq.n	800edb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ed98:	4b8f      	ldr	r3, [pc, #572]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	f003 030c 	and.w	r3, r3, #12
 800eda0:	2b08      	cmp	r3, #8
 800eda2:	d112      	bne.n	800edca <HAL_RCC_OscConfig+0x5e>
 800eda4:	4b8c      	ldr	r3, [pc, #560]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800edac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edb0:	d10b      	bne.n	800edca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800edb2:	4b89      	ldr	r3, [pc, #548]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d06c      	beq.n	800ee98 <HAL_RCC_OscConfig+0x12c>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d168      	bne.n	800ee98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800edc6:	2301      	movs	r3, #1
 800edc8:	e246      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edd2:	d106      	bne.n	800ede2 <HAL_RCC_OscConfig+0x76>
 800edd4:	4b80      	ldr	r3, [pc, #512]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a7f      	ldr	r2, [pc, #508]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800edda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800edde:	6013      	str	r3, [r2, #0]
 800ede0:	e02e      	b.n	800ee40 <HAL_RCC_OscConfig+0xd4>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10c      	bne.n	800ee04 <HAL_RCC_OscConfig+0x98>
 800edea:	4b7b      	ldr	r3, [pc, #492]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a7a      	ldr	r2, [pc, #488]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800edf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800edf4:	6013      	str	r3, [r2, #0]
 800edf6:	4b78      	ldr	r3, [pc, #480]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a77      	ldr	r2, [pc, #476]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800edfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ee00:	6013      	str	r3, [r2, #0]
 800ee02:	e01d      	b.n	800ee40 <HAL_RCC_OscConfig+0xd4>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ee0c:	d10c      	bne.n	800ee28 <HAL_RCC_OscConfig+0xbc>
 800ee0e:	4b72      	ldr	r3, [pc, #456]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4a71      	ldr	r2, [pc, #452]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ee14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ee18:	6013      	str	r3, [r2, #0]
 800ee1a:	4b6f      	ldr	r3, [pc, #444]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a6e      	ldr	r2, [pc, #440]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ee20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee24:	6013      	str	r3, [r2, #0]
 800ee26:	e00b      	b.n	800ee40 <HAL_RCC_OscConfig+0xd4>
 800ee28:	4b6b      	ldr	r3, [pc, #428]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a6a      	ldr	r2, [pc, #424]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ee2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee32:	6013      	str	r3, [r2, #0]
 800ee34:	4b68      	ldr	r3, [pc, #416]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4a67      	ldr	r2, [pc, #412]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ee3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ee3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d013      	beq.n	800ee70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee48:	f7fd fc8e 	bl	800c768 <HAL_GetTick>
 800ee4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee4e:	e008      	b.n	800ee62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ee50:	f7fd fc8a 	bl	800c768 <HAL_GetTick>
 800ee54:	4602      	mov	r2, r0
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	2b64      	cmp	r3, #100	; 0x64
 800ee5c:	d901      	bls.n	800ee62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ee5e:	2303      	movs	r3, #3
 800ee60:	e1fa      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee62:	4b5d      	ldr	r3, [pc, #372]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d0f0      	beq.n	800ee50 <HAL_RCC_OscConfig+0xe4>
 800ee6e:	e014      	b.n	800ee9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee70:	f7fd fc7a 	bl	800c768 <HAL_GetTick>
 800ee74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee76:	e008      	b.n	800ee8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ee78:	f7fd fc76 	bl	800c768 <HAL_GetTick>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	1ad3      	subs	r3, r2, r3
 800ee82:	2b64      	cmp	r3, #100	; 0x64
 800ee84:	d901      	bls.n	800ee8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ee86:	2303      	movs	r3, #3
 800ee88:	e1e6      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee8a:	4b53      	ldr	r3, [pc, #332]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d1f0      	bne.n	800ee78 <HAL_RCC_OscConfig+0x10c>
 800ee96:	e000      	b.n	800ee9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f003 0302 	and.w	r3, r3, #2
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d063      	beq.n	800ef6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800eea6:	4b4c      	ldr	r3, [pc, #304]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	f003 030c 	and.w	r3, r3, #12
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00b      	beq.n	800eeca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800eeb2:	4b49      	ldr	r3, [pc, #292]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	f003 030c 	and.w	r3, r3, #12
 800eeba:	2b08      	cmp	r3, #8
 800eebc:	d11c      	bne.n	800eef8 <HAL_RCC_OscConfig+0x18c>
 800eebe:	4b46      	ldr	r3, [pc, #280]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d116      	bne.n	800eef8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eeca:	4b43      	ldr	r3, [pc, #268]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 0302 	and.w	r3, r3, #2
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d005      	beq.n	800eee2 <HAL_RCC_OscConfig+0x176>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	691b      	ldr	r3, [r3, #16]
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d001      	beq.n	800eee2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800eede:	2301      	movs	r3, #1
 800eee0:	e1ba      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eee2:	4b3d      	ldr	r3, [pc, #244]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	695b      	ldr	r3, [r3, #20]
 800eeee:	00db      	lsls	r3, r3, #3
 800eef0:	4939      	ldr	r1, [pc, #228]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800eef2:	4313      	orrs	r3, r2
 800eef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eef6:	e03a      	b.n	800ef6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	691b      	ldr	r3, [r3, #16]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d020      	beq.n	800ef42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ef00:	4b36      	ldr	r3, [pc, #216]	; (800efdc <HAL_RCC_OscConfig+0x270>)
 800ef02:	2201      	movs	r2, #1
 800ef04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef06:	f7fd fc2f 	bl	800c768 <HAL_GetTick>
 800ef0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef0c:	e008      	b.n	800ef20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ef0e:	f7fd fc2b 	bl	800c768 <HAL_GetTick>
 800ef12:	4602      	mov	r2, r0
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	1ad3      	subs	r3, r2, r3
 800ef18:	2b02      	cmp	r3, #2
 800ef1a:	d901      	bls.n	800ef20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ef1c:	2303      	movs	r3, #3
 800ef1e:	e19b      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef20:	4b2d      	ldr	r3, [pc, #180]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f003 0302 	and.w	r3, r3, #2
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d0f0      	beq.n	800ef0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef2c:	4b2a      	ldr	r3, [pc, #168]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	695b      	ldr	r3, [r3, #20]
 800ef38:	00db      	lsls	r3, r3, #3
 800ef3a:	4927      	ldr	r1, [pc, #156]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	600b      	str	r3, [r1, #0]
 800ef40:	e015      	b.n	800ef6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ef42:	4b26      	ldr	r3, [pc, #152]	; (800efdc <HAL_RCC_OscConfig+0x270>)
 800ef44:	2200      	movs	r2, #0
 800ef46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef48:	f7fd fc0e 	bl	800c768 <HAL_GetTick>
 800ef4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef4e:	e008      	b.n	800ef62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ef50:	f7fd fc0a 	bl	800c768 <HAL_GetTick>
 800ef54:	4602      	mov	r2, r0
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	2b02      	cmp	r3, #2
 800ef5c:	d901      	bls.n	800ef62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	e17a      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef62:	4b1d      	ldr	r3, [pc, #116]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f003 0302 	and.w	r3, r3, #2
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1f0      	bne.n	800ef50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f003 0308 	and.w	r3, r3, #8
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d03a      	beq.n	800eff0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	699b      	ldr	r3, [r3, #24]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d019      	beq.n	800efb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ef82:	4b17      	ldr	r3, [pc, #92]	; (800efe0 <HAL_RCC_OscConfig+0x274>)
 800ef84:	2201      	movs	r2, #1
 800ef86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef88:	f7fd fbee 	bl	800c768 <HAL_GetTick>
 800ef8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ef8e:	e008      	b.n	800efa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ef90:	f7fd fbea 	bl	800c768 <HAL_GetTick>
 800ef94:	4602      	mov	r2, r0
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	1ad3      	subs	r3, r2, r3
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	d901      	bls.n	800efa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ef9e:	2303      	movs	r3, #3
 800efa0:	e15a      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800efa2:	4b0d      	ldr	r3, [pc, #52]	; (800efd8 <HAL_RCC_OscConfig+0x26c>)
 800efa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa6:	f003 0302 	and.w	r3, r3, #2
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d0f0      	beq.n	800ef90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800efae:	2001      	movs	r0, #1
 800efb0:	f000 fada 	bl	800f568 <RCC_Delay>
 800efb4:	e01c      	b.n	800eff0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800efb6:	4b0a      	ldr	r3, [pc, #40]	; (800efe0 <HAL_RCC_OscConfig+0x274>)
 800efb8:	2200      	movs	r2, #0
 800efba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800efbc:	f7fd fbd4 	bl	800c768 <HAL_GetTick>
 800efc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800efc2:	e00f      	b.n	800efe4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800efc4:	f7fd fbd0 	bl	800c768 <HAL_GetTick>
 800efc8:	4602      	mov	r2, r0
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	1ad3      	subs	r3, r2, r3
 800efce:	2b02      	cmp	r3, #2
 800efd0:	d908      	bls.n	800efe4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800efd2:	2303      	movs	r3, #3
 800efd4:	e140      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
 800efd6:	bf00      	nop
 800efd8:	40021000 	.word	0x40021000
 800efdc:	42420000 	.word	0x42420000
 800efe0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800efe4:	4b9e      	ldr	r3, [pc, #632]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800efe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe8:	f003 0302 	and.w	r3, r3, #2
 800efec:	2b00      	cmp	r3, #0
 800efee:	d1e9      	bne.n	800efc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f003 0304 	and.w	r3, r3, #4
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f000 80a6 	beq.w	800f14a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800effe:	2300      	movs	r3, #0
 800f000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f002:	4b97      	ldr	r3, [pc, #604]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f004:	69db      	ldr	r3, [r3, #28]
 800f006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d10d      	bne.n	800f02a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f00e:	4b94      	ldr	r3, [pc, #592]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f010:	69db      	ldr	r3, [r3, #28]
 800f012:	4a93      	ldr	r2, [pc, #588]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f018:	61d3      	str	r3, [r2, #28]
 800f01a:	4b91      	ldr	r3, [pc, #580]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f01c:	69db      	ldr	r3, [r3, #28]
 800f01e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f022:	60bb      	str	r3, [r7, #8]
 800f024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f026:	2301      	movs	r3, #1
 800f028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f02a:	4b8e      	ldr	r3, [pc, #568]	; (800f264 <HAL_RCC_OscConfig+0x4f8>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f032:	2b00      	cmp	r3, #0
 800f034:	d118      	bne.n	800f068 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f036:	4b8b      	ldr	r3, [pc, #556]	; (800f264 <HAL_RCC_OscConfig+0x4f8>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a8a      	ldr	r2, [pc, #552]	; (800f264 <HAL_RCC_OscConfig+0x4f8>)
 800f03c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f042:	f7fd fb91 	bl	800c768 <HAL_GetTick>
 800f046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f048:	e008      	b.n	800f05c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f04a:	f7fd fb8d 	bl	800c768 <HAL_GetTick>
 800f04e:	4602      	mov	r2, r0
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	1ad3      	subs	r3, r2, r3
 800f054:	2b64      	cmp	r3, #100	; 0x64
 800f056:	d901      	bls.n	800f05c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800f058:	2303      	movs	r3, #3
 800f05a:	e0fd      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f05c:	4b81      	ldr	r3, [pc, #516]	; (800f264 <HAL_RCC_OscConfig+0x4f8>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f064:	2b00      	cmp	r3, #0
 800f066:	d0f0      	beq.n	800f04a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d106      	bne.n	800f07e <HAL_RCC_OscConfig+0x312>
 800f070:	4b7b      	ldr	r3, [pc, #492]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f072:	6a1b      	ldr	r3, [r3, #32]
 800f074:	4a7a      	ldr	r2, [pc, #488]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f076:	f043 0301 	orr.w	r3, r3, #1
 800f07a:	6213      	str	r3, [r2, #32]
 800f07c:	e02d      	b.n	800f0da <HAL_RCC_OscConfig+0x36e>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d10c      	bne.n	800f0a0 <HAL_RCC_OscConfig+0x334>
 800f086:	4b76      	ldr	r3, [pc, #472]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f088:	6a1b      	ldr	r3, [r3, #32]
 800f08a:	4a75      	ldr	r2, [pc, #468]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f08c:	f023 0301 	bic.w	r3, r3, #1
 800f090:	6213      	str	r3, [r2, #32]
 800f092:	4b73      	ldr	r3, [pc, #460]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f094:	6a1b      	ldr	r3, [r3, #32]
 800f096:	4a72      	ldr	r2, [pc, #456]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f098:	f023 0304 	bic.w	r3, r3, #4
 800f09c:	6213      	str	r3, [r2, #32]
 800f09e:	e01c      	b.n	800f0da <HAL_RCC_OscConfig+0x36e>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	2b05      	cmp	r3, #5
 800f0a6:	d10c      	bne.n	800f0c2 <HAL_RCC_OscConfig+0x356>
 800f0a8:	4b6d      	ldr	r3, [pc, #436]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f0aa:	6a1b      	ldr	r3, [r3, #32]
 800f0ac:	4a6c      	ldr	r2, [pc, #432]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f0ae:	f043 0304 	orr.w	r3, r3, #4
 800f0b2:	6213      	str	r3, [r2, #32]
 800f0b4:	4b6a      	ldr	r3, [pc, #424]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f0b6:	6a1b      	ldr	r3, [r3, #32]
 800f0b8:	4a69      	ldr	r2, [pc, #420]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f0ba:	f043 0301 	orr.w	r3, r3, #1
 800f0be:	6213      	str	r3, [r2, #32]
 800f0c0:	e00b      	b.n	800f0da <HAL_RCC_OscConfig+0x36e>
 800f0c2:	4b67      	ldr	r3, [pc, #412]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f0c4:	6a1b      	ldr	r3, [r3, #32]
 800f0c6:	4a66      	ldr	r2, [pc, #408]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f0c8:	f023 0301 	bic.w	r3, r3, #1
 800f0cc:	6213      	str	r3, [r2, #32]
 800f0ce:	4b64      	ldr	r3, [pc, #400]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f0d0:	6a1b      	ldr	r3, [r3, #32]
 800f0d2:	4a63      	ldr	r2, [pc, #396]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f0d4:	f023 0304 	bic.w	r3, r3, #4
 800f0d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d015      	beq.n	800f10e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f0e2:	f7fd fb41 	bl	800c768 <HAL_GetTick>
 800f0e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f0e8:	e00a      	b.n	800f100 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f0ea:	f7fd fb3d 	bl	800c768 <HAL_GetTick>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	1ad3      	subs	r3, r2, r3
 800f0f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d901      	bls.n	800f100 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800f0fc:	2303      	movs	r3, #3
 800f0fe:	e0ab      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f100:	4b57      	ldr	r3, [pc, #348]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f102:	6a1b      	ldr	r3, [r3, #32]
 800f104:	f003 0302 	and.w	r3, r3, #2
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d0ee      	beq.n	800f0ea <HAL_RCC_OscConfig+0x37e>
 800f10c:	e014      	b.n	800f138 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f10e:	f7fd fb2b 	bl	800c768 <HAL_GetTick>
 800f112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f114:	e00a      	b.n	800f12c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f116:	f7fd fb27 	bl	800c768 <HAL_GetTick>
 800f11a:	4602      	mov	r2, r0
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	f241 3288 	movw	r2, #5000	; 0x1388
 800f124:	4293      	cmp	r3, r2
 800f126:	d901      	bls.n	800f12c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800f128:	2303      	movs	r3, #3
 800f12a:	e095      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f12c:	4b4c      	ldr	r3, [pc, #304]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f12e:	6a1b      	ldr	r3, [r3, #32]
 800f130:	f003 0302 	and.w	r3, r3, #2
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1ee      	bne.n	800f116 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800f138:	7dfb      	ldrb	r3, [r7, #23]
 800f13a:	2b01      	cmp	r3, #1
 800f13c:	d105      	bne.n	800f14a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f13e:	4b48      	ldr	r3, [pc, #288]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f140:	69db      	ldr	r3, [r3, #28]
 800f142:	4a47      	ldr	r2, [pc, #284]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f148:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	69db      	ldr	r3, [r3, #28]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	f000 8081 	beq.w	800f256 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f154:	4b42      	ldr	r3, [pc, #264]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	f003 030c 	and.w	r3, r3, #12
 800f15c:	2b08      	cmp	r3, #8
 800f15e:	d061      	beq.n	800f224 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	69db      	ldr	r3, [r3, #28]
 800f164:	2b02      	cmp	r3, #2
 800f166:	d146      	bne.n	800f1f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f168:	4b3f      	ldr	r3, [pc, #252]	; (800f268 <HAL_RCC_OscConfig+0x4fc>)
 800f16a:	2200      	movs	r2, #0
 800f16c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f16e:	f7fd fafb 	bl	800c768 <HAL_GetTick>
 800f172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f174:	e008      	b.n	800f188 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f176:	f7fd faf7 	bl	800c768 <HAL_GetTick>
 800f17a:	4602      	mov	r2, r0
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	1ad3      	subs	r3, r2, r3
 800f180:	2b02      	cmp	r3, #2
 800f182:	d901      	bls.n	800f188 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800f184:	2303      	movs	r3, #3
 800f186:	e067      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f188:	4b35      	ldr	r3, [pc, #212]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f190:	2b00      	cmp	r3, #0
 800f192:	d1f0      	bne.n	800f176 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6a1b      	ldr	r3, [r3, #32]
 800f198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f19c:	d108      	bne.n	800f1b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800f19e:	4b30      	ldr	r3, [pc, #192]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	689b      	ldr	r3, [r3, #8]
 800f1aa:	492d      	ldr	r1, [pc, #180]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f1b0:	4b2b      	ldr	r3, [pc, #172]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6a19      	ldr	r1, [r3, #32]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c0:	430b      	orrs	r3, r1
 800f1c2:	4927      	ldr	r1, [pc, #156]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f1c8:	4b27      	ldr	r3, [pc, #156]	; (800f268 <HAL_RCC_OscConfig+0x4fc>)
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f1ce:	f7fd facb 	bl	800c768 <HAL_GetTick>
 800f1d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800f1d4:	e008      	b.n	800f1e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f1d6:	f7fd fac7 	bl	800c768 <HAL_GetTick>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	2b02      	cmp	r3, #2
 800f1e2:	d901      	bls.n	800f1e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800f1e4:	2303      	movs	r3, #3
 800f1e6:	e037      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800f1e8:	4b1d      	ldr	r3, [pc, #116]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d0f0      	beq.n	800f1d6 <HAL_RCC_OscConfig+0x46a>
 800f1f4:	e02f      	b.n	800f256 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f1f6:	4b1c      	ldr	r3, [pc, #112]	; (800f268 <HAL_RCC_OscConfig+0x4fc>)
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f1fc:	f7fd fab4 	bl	800c768 <HAL_GetTick>
 800f200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f202:	e008      	b.n	800f216 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f204:	f7fd fab0 	bl	800c768 <HAL_GetTick>
 800f208:	4602      	mov	r2, r0
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	2b02      	cmp	r3, #2
 800f210:	d901      	bls.n	800f216 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800f212:	2303      	movs	r3, #3
 800f214:	e020      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f216:	4b12      	ldr	r3, [pc, #72]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1f0      	bne.n	800f204 <HAL_RCC_OscConfig+0x498>
 800f222:	e018      	b.n	800f256 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	69db      	ldr	r3, [r3, #28]
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d101      	bne.n	800f230 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800f22c:	2301      	movs	r3, #1
 800f22e:	e013      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800f230:	4b0b      	ldr	r3, [pc, #44]	; (800f260 <HAL_RCC_OscConfig+0x4f4>)
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6a1b      	ldr	r3, [r3, #32]
 800f240:	429a      	cmp	r2, r3
 800f242:	d106      	bne.n	800f252 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f24e:	429a      	cmp	r2, r3
 800f250:	d001      	beq.n	800f256 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800f252:	2301      	movs	r3, #1
 800f254:	e000      	b.n	800f258 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800f256:	2300      	movs	r3, #0
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3718      	adds	r7, #24
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	40021000 	.word	0x40021000
 800f264:	40007000 	.word	0x40007000
 800f268:	42420060 	.word	0x42420060

0800f26c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d101      	bne.n	800f280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f27c:	2301      	movs	r3, #1
 800f27e:	e0d0      	b.n	800f422 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f280:	4b6a      	ldr	r3, [pc, #424]	; (800f42c <HAL_RCC_ClockConfig+0x1c0>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f003 0307 	and.w	r3, r3, #7
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d910      	bls.n	800f2b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f28e:	4b67      	ldr	r3, [pc, #412]	; (800f42c <HAL_RCC_ClockConfig+0x1c0>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f023 0207 	bic.w	r2, r3, #7
 800f296:	4965      	ldr	r1, [pc, #404]	; (800f42c <HAL_RCC_ClockConfig+0x1c0>)
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	4313      	orrs	r3, r2
 800f29c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f29e:	4b63      	ldr	r3, [pc, #396]	; (800f42c <HAL_RCC_ClockConfig+0x1c0>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f003 0307 	and.w	r3, r3, #7
 800f2a6:	683a      	ldr	r2, [r7, #0]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d001      	beq.n	800f2b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	e0b8      	b.n	800f422 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f003 0302 	and.w	r3, r3, #2
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d020      	beq.n	800f2fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f003 0304 	and.w	r3, r3, #4
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d005      	beq.n	800f2d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f2c8:	4b59      	ldr	r3, [pc, #356]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	4a58      	ldr	r2, [pc, #352]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f2ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800f2d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f003 0308 	and.w	r3, r3, #8
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d005      	beq.n	800f2ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f2e0:	4b53      	ldr	r3, [pc, #332]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	4a52      	ldr	r2, [pc, #328]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f2e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800f2ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f2ec:	4b50      	ldr	r3, [pc, #320]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	494d      	ldr	r1, [pc, #308]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f003 0301 	and.w	r3, r3, #1
 800f306:	2b00      	cmp	r3, #0
 800f308:	d040      	beq.n	800f38c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d107      	bne.n	800f322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f312:	4b47      	ldr	r3, [pc, #284]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d115      	bne.n	800f34a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f31e:	2301      	movs	r3, #1
 800f320:	e07f      	b.n	800f422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	2b02      	cmp	r3, #2
 800f328:	d107      	bne.n	800f33a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f32a:	4b41      	ldr	r3, [pc, #260]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f332:	2b00      	cmp	r3, #0
 800f334:	d109      	bne.n	800f34a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f336:	2301      	movs	r3, #1
 800f338:	e073      	b.n	800f422 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f33a:	4b3d      	ldr	r3, [pc, #244]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f003 0302 	and.w	r3, r3, #2
 800f342:	2b00      	cmp	r3, #0
 800f344:	d101      	bne.n	800f34a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f346:	2301      	movs	r3, #1
 800f348:	e06b      	b.n	800f422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f34a:	4b39      	ldr	r3, [pc, #228]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	f023 0203 	bic.w	r2, r3, #3
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	4936      	ldr	r1, [pc, #216]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f358:	4313      	orrs	r3, r2
 800f35a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f35c:	f7fd fa04 	bl	800c768 <HAL_GetTick>
 800f360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f362:	e00a      	b.n	800f37a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f364:	f7fd fa00 	bl	800c768 <HAL_GetTick>
 800f368:	4602      	mov	r2, r0
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	1ad3      	subs	r3, r2, r3
 800f36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f372:	4293      	cmp	r3, r2
 800f374:	d901      	bls.n	800f37a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f376:	2303      	movs	r3, #3
 800f378:	e053      	b.n	800f422 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f37a:	4b2d      	ldr	r3, [pc, #180]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	f003 020c 	and.w	r2, r3, #12
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	009b      	lsls	r3, r3, #2
 800f388:	429a      	cmp	r2, r3
 800f38a:	d1eb      	bne.n	800f364 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f38c:	4b27      	ldr	r3, [pc, #156]	; (800f42c <HAL_RCC_ClockConfig+0x1c0>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f003 0307 	and.w	r3, r3, #7
 800f394:	683a      	ldr	r2, [r7, #0]
 800f396:	429a      	cmp	r2, r3
 800f398:	d210      	bcs.n	800f3bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f39a:	4b24      	ldr	r3, [pc, #144]	; (800f42c <HAL_RCC_ClockConfig+0x1c0>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f023 0207 	bic.w	r2, r3, #7
 800f3a2:	4922      	ldr	r1, [pc, #136]	; (800f42c <HAL_RCC_ClockConfig+0x1c0>)
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	4313      	orrs	r3, r2
 800f3a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3aa:	4b20      	ldr	r3, [pc, #128]	; (800f42c <HAL_RCC_ClockConfig+0x1c0>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f003 0307 	and.w	r3, r3, #7
 800f3b2:	683a      	ldr	r2, [r7, #0]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d001      	beq.n	800f3bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e032      	b.n	800f422 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f003 0304 	and.w	r3, r3, #4
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d008      	beq.n	800f3da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f3c8:	4b19      	ldr	r3, [pc, #100]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	68db      	ldr	r3, [r3, #12]
 800f3d4:	4916      	ldr	r1, [pc, #88]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f003 0308 	and.w	r3, r3, #8
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d009      	beq.n	800f3fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f3e6:	4b12      	ldr	r3, [pc, #72]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	691b      	ldr	r3, [r3, #16]
 800f3f2:	00db      	lsls	r3, r3, #3
 800f3f4:	490e      	ldr	r1, [pc, #56]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f3f6:	4313      	orrs	r3, r2
 800f3f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f3fa:	f000 f821 	bl	800f440 <HAL_RCC_GetSysClockFreq>
 800f3fe:	4601      	mov	r1, r0
 800f400:	4b0b      	ldr	r3, [pc, #44]	; (800f430 <HAL_RCC_ClockConfig+0x1c4>)
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	091b      	lsrs	r3, r3, #4
 800f406:	f003 030f 	and.w	r3, r3, #15
 800f40a:	4a0a      	ldr	r2, [pc, #40]	; (800f434 <HAL_RCC_ClockConfig+0x1c8>)
 800f40c:	5cd3      	ldrb	r3, [r2, r3]
 800f40e:	fa21 f303 	lsr.w	r3, r1, r3
 800f412:	4a09      	ldr	r2, [pc, #36]	; (800f438 <HAL_RCC_ClockConfig+0x1cc>)
 800f414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800f416:	4b09      	ldr	r3, [pc, #36]	; (800f43c <HAL_RCC_ClockConfig+0x1d0>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fd f962 	bl	800c6e4 <HAL_InitTick>

  return HAL_OK;
 800f420:	2300      	movs	r3, #0
}
 800f422:	4618      	mov	r0, r3
 800f424:	3710      	adds	r7, #16
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop
 800f42c:	40022000 	.word	0x40022000
 800f430:	40021000 	.word	0x40021000
 800f434:	08019f64 	.word	0x08019f64
 800f438:	20000004 	.word	0x20000004
 800f43c:	20000058 	.word	0x20000058

0800f440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f440:	b490      	push	{r4, r7}
 800f442:	b08a      	sub	sp, #40	; 0x28
 800f444:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800f446:	4b2a      	ldr	r3, [pc, #168]	; (800f4f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800f448:	1d3c      	adds	r4, r7, #4
 800f44a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f44c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800f450:	4b28      	ldr	r3, [pc, #160]	; (800f4f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800f452:	881b      	ldrh	r3, [r3, #0]
 800f454:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800f456:	2300      	movs	r3, #0
 800f458:	61fb      	str	r3, [r7, #28]
 800f45a:	2300      	movs	r3, #0
 800f45c:	61bb      	str	r3, [r7, #24]
 800f45e:	2300      	movs	r3, #0
 800f460:	627b      	str	r3, [r7, #36]	; 0x24
 800f462:	2300      	movs	r3, #0
 800f464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800f466:	2300      	movs	r3, #0
 800f468:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800f46a:	4b23      	ldr	r3, [pc, #140]	; (800f4f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	f003 030c 	and.w	r3, r3, #12
 800f476:	2b04      	cmp	r3, #4
 800f478:	d002      	beq.n	800f480 <HAL_RCC_GetSysClockFreq+0x40>
 800f47a:	2b08      	cmp	r3, #8
 800f47c:	d003      	beq.n	800f486 <HAL_RCC_GetSysClockFreq+0x46>
 800f47e:	e02d      	b.n	800f4dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f480:	4b1e      	ldr	r3, [pc, #120]	; (800f4fc <HAL_RCC_GetSysClockFreq+0xbc>)
 800f482:	623b      	str	r3, [r7, #32]
      break;
 800f484:	e02d      	b.n	800f4e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	0c9b      	lsrs	r3, r3, #18
 800f48a:	f003 030f 	and.w	r3, r3, #15
 800f48e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f492:	4413      	add	r3, r2
 800f494:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800f498:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800f49a:	69fb      	ldr	r3, [r7, #28]
 800f49c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d013      	beq.n	800f4cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800f4a4:	4b14      	ldr	r3, [pc, #80]	; (800f4f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	0c5b      	lsrs	r3, r3, #17
 800f4aa:	f003 0301 	and.w	r3, r3, #1
 800f4ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f4b2:	4413      	add	r3, r2
 800f4b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800f4b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	4a0f      	ldr	r2, [pc, #60]	; (800f4fc <HAL_RCC_GetSysClockFreq+0xbc>)
 800f4be:	fb02 f203 	mul.w	r2, r2, r3
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4c8:	627b      	str	r3, [r7, #36]	; 0x24
 800f4ca:	e004      	b.n	800f4d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	4a0c      	ldr	r2, [pc, #48]	; (800f500 <HAL_RCC_GetSysClockFreq+0xc0>)
 800f4d0:	fb02 f303 	mul.w	r3, r2, r3
 800f4d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d8:	623b      	str	r3, [r7, #32]
      break;
 800f4da:	e002      	b.n	800f4e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800f4dc:	4b07      	ldr	r3, [pc, #28]	; (800f4fc <HAL_RCC_GetSysClockFreq+0xbc>)
 800f4de:	623b      	str	r3, [r7, #32]
      break;
 800f4e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f4e2:	6a3b      	ldr	r3, [r7, #32]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3728      	adds	r7, #40	; 0x28
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bc90      	pop	{r4, r7}
 800f4ec:	4770      	bx	lr
 800f4ee:	bf00      	nop
 800f4f0:	08019f50 	.word	0x08019f50
 800f4f4:	08019f60 	.word	0x08019f60
 800f4f8:	40021000 	.word	0x40021000
 800f4fc:	007a1200 	.word	0x007a1200
 800f500:	003d0900 	.word	0x003d0900

0800f504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f504:	b480      	push	{r7}
 800f506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f508:	4b02      	ldr	r3, [pc, #8]	; (800f514 <HAL_RCC_GetHCLKFreq+0x10>)
 800f50a:	681b      	ldr	r3, [r3, #0]
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	46bd      	mov	sp, r7
 800f510:	bc80      	pop	{r7}
 800f512:	4770      	bx	lr
 800f514:	20000004 	.word	0x20000004

0800f518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f51c:	f7ff fff2 	bl	800f504 <HAL_RCC_GetHCLKFreq>
 800f520:	4601      	mov	r1, r0
 800f522:	4b05      	ldr	r3, [pc, #20]	; (800f538 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	0a1b      	lsrs	r3, r3, #8
 800f528:	f003 0307 	and.w	r3, r3, #7
 800f52c:	4a03      	ldr	r2, [pc, #12]	; (800f53c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f52e:	5cd3      	ldrb	r3, [r2, r3]
 800f530:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f534:	4618      	mov	r0, r3
 800f536:	bd80      	pop	{r7, pc}
 800f538:	40021000 	.word	0x40021000
 800f53c:	08019f74 	.word	0x08019f74

0800f540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f544:	f7ff ffde 	bl	800f504 <HAL_RCC_GetHCLKFreq>
 800f548:	4601      	mov	r1, r0
 800f54a:	4b05      	ldr	r3, [pc, #20]	; (800f560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	0adb      	lsrs	r3, r3, #11
 800f550:	f003 0307 	and.w	r3, r3, #7
 800f554:	4a03      	ldr	r2, [pc, #12]	; (800f564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f556:	5cd3      	ldrb	r3, [r2, r3]
 800f558:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	40021000 	.word	0x40021000
 800f564:	08019f74 	.word	0x08019f74

0800f568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800f570:	4b0a      	ldr	r3, [pc, #40]	; (800f59c <RCC_Delay+0x34>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a0a      	ldr	r2, [pc, #40]	; (800f5a0 <RCC_Delay+0x38>)
 800f576:	fba2 2303 	umull	r2, r3, r2, r3
 800f57a:	0a5b      	lsrs	r3, r3, #9
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	fb02 f303 	mul.w	r3, r2, r3
 800f582:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800f584:	bf00      	nop
  }
  while (Delay --);
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	1e5a      	subs	r2, r3, #1
 800f58a:	60fa      	str	r2, [r7, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d1f9      	bne.n	800f584 <RCC_Delay+0x1c>
}
 800f590:	bf00      	nop
 800f592:	3714      	adds	r7, #20
 800f594:	46bd      	mov	sp, r7
 800f596:	bc80      	pop	{r7}
 800f598:	4770      	bx	lr
 800f59a:	bf00      	nop
 800f59c:	20000004 	.word	0x20000004
 800f5a0:	10624dd3 	.word	0x10624dd3

0800f5a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d101      	bne.n	800f5b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e041      	b.n	800f63a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d106      	bne.n	800f5d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7fc fba0 	bl	800bd10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2202      	movs	r2, #2
 800f5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	3304      	adds	r3, #4
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	4610      	mov	r0, r2
 800f5e4:	f000 fdb4 	bl	8010150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2201      	movs	r2, #1
 800f604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2201      	movs	r2, #1
 800f60c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2201      	movs	r2, #1
 800f614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2201      	movs	r2, #1
 800f61c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2201      	movs	r2, #1
 800f624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2201      	movs	r2, #1
 800f62c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2201      	movs	r2, #1
 800f634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3708      	adds	r7, #8
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}

0800f642 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b082      	sub	sp, #8
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d101      	bne.n	800f654 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f650:	2301      	movs	r3, #1
 800f652:	e041      	b.n	800f6d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d106      	bne.n	800f66e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2200      	movs	r2, #0
 800f664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 f839 	bl	800f6e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2202      	movs	r2, #2
 800f672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681a      	ldr	r2, [r3, #0]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	3304      	adds	r3, #4
 800f67e:	4619      	mov	r1, r3
 800f680:	4610      	mov	r0, r2
 800f682:	f000 fd65 	bl	8010150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2201      	movs	r2, #1
 800f68a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2201      	movs	r2, #1
 800f692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2201      	movs	r2, #1
 800f69a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2201      	movs	r2, #1
 800f6aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2201      	movs	r2, #1
 800f6b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3708      	adds	r7, #8
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b083      	sub	sp, #12
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f6e8:	bf00      	nop
 800f6ea:	370c      	adds	r7, #12
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bc80      	pop	{r7}
 800f6f0:	4770      	bx	lr
	...

0800f6f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b084      	sub	sp, #16
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d109      	bne.n	800f718 <HAL_TIM_PWM_Start+0x24>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	bf14      	ite	ne
 800f710:	2301      	movne	r3, #1
 800f712:	2300      	moveq	r3, #0
 800f714:	b2db      	uxtb	r3, r3
 800f716:	e022      	b.n	800f75e <HAL_TIM_PWM_Start+0x6a>
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	2b04      	cmp	r3, #4
 800f71c:	d109      	bne.n	800f732 <HAL_TIM_PWM_Start+0x3e>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f724:	b2db      	uxtb	r3, r3
 800f726:	2b01      	cmp	r3, #1
 800f728:	bf14      	ite	ne
 800f72a:	2301      	movne	r3, #1
 800f72c:	2300      	moveq	r3, #0
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	e015      	b.n	800f75e <HAL_TIM_PWM_Start+0x6a>
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	2b08      	cmp	r3, #8
 800f736:	d109      	bne.n	800f74c <HAL_TIM_PWM_Start+0x58>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	2b01      	cmp	r3, #1
 800f742:	bf14      	ite	ne
 800f744:	2301      	movne	r3, #1
 800f746:	2300      	moveq	r3, #0
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	e008      	b.n	800f75e <HAL_TIM_PWM_Start+0x6a>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f752:	b2db      	uxtb	r3, r3
 800f754:	2b01      	cmp	r3, #1
 800f756:	bf14      	ite	ne
 800f758:	2301      	movne	r3, #1
 800f75a:	2300      	moveq	r3, #0
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d001      	beq.n	800f766 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f762:	2301      	movs	r3, #1
 800f764:	e05e      	b.n	800f824 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d104      	bne.n	800f776 <HAL_TIM_PWM_Start+0x82>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2202      	movs	r2, #2
 800f770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f774:	e013      	b.n	800f79e <HAL_TIM_PWM_Start+0xaa>
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	2b04      	cmp	r3, #4
 800f77a:	d104      	bne.n	800f786 <HAL_TIM_PWM_Start+0x92>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2202      	movs	r2, #2
 800f780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f784:	e00b      	b.n	800f79e <HAL_TIM_PWM_Start+0xaa>
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	2b08      	cmp	r3, #8
 800f78a:	d104      	bne.n	800f796 <HAL_TIM_PWM_Start+0xa2>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2202      	movs	r2, #2
 800f790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f794:	e003      	b.n	800f79e <HAL_TIM_PWM_Start+0xaa>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2202      	movs	r2, #2
 800f79a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	6839      	ldr	r1, [r7, #0]
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f001 f85f 	bl	801086a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	4a1e      	ldr	r2, [pc, #120]	; (800f82c <HAL_TIM_PWM_Start+0x138>)
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d107      	bne.n	800f7c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f7c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a18      	ldr	r2, [pc, #96]	; (800f82c <HAL_TIM_PWM_Start+0x138>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d00e      	beq.n	800f7ee <HAL_TIM_PWM_Start+0xfa>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7d8:	d009      	beq.n	800f7ee <HAL_TIM_PWM_Start+0xfa>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4a14      	ldr	r2, [pc, #80]	; (800f830 <HAL_TIM_PWM_Start+0x13c>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d004      	beq.n	800f7ee <HAL_TIM_PWM_Start+0xfa>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a12      	ldr	r2, [pc, #72]	; (800f834 <HAL_TIM_PWM_Start+0x140>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d111      	bne.n	800f812 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	f003 0307 	and.w	r3, r3, #7
 800f7f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2b06      	cmp	r3, #6
 800f7fe:	d010      	beq.n	800f822 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f042 0201 	orr.w	r2, r2, #1
 800f80e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f810:	e007      	b.n	800f822 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f042 0201 	orr.w	r2, r2, #1
 800f820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f822:	2300      	movs	r3, #0
}
 800f824:	4618      	mov	r0, r3
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	40012c00 	.word	0x40012c00
 800f830:	40000400 	.word	0x40000400
 800f834:	40000800 	.word	0x40000800

0800f838 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d101      	bne.n	800f84a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f846:	2301      	movs	r3, #1
 800f848:	e041      	b.n	800f8ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f850:	b2db      	uxtb	r3, r3
 800f852:	2b00      	cmp	r3, #0
 800f854:	d106      	bne.n	800f864 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f7fc f9c4 	bl	800bbec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2202      	movs	r2, #2
 800f868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	3304      	adds	r3, #4
 800f874:	4619      	mov	r1, r3
 800f876:	4610      	mov	r0, r2
 800f878:	f000 fc6a 	bl	8010150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2201      	movs	r2, #1
 800f880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2201      	movs	r2, #1
 800f890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2201      	movs	r2, #1
 800f8c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
	...

0800f8d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d104      	bne.n	800f8f2 <HAL_TIM_IC_Start_IT+0x1a>
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	e013      	b.n	800f91a <HAL_TIM_IC_Start_IT+0x42>
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2b04      	cmp	r3, #4
 800f8f6:	d104      	bne.n	800f902 <HAL_TIM_IC_Start_IT+0x2a>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	e00b      	b.n	800f91a <HAL_TIM_IC_Start_IT+0x42>
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	2b08      	cmp	r3, #8
 800f906:	d104      	bne.n	800f912 <HAL_TIM_IC_Start_IT+0x3a>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	e003      	b.n	800f91a <HAL_TIM_IC_Start_IT+0x42>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d104      	bne.n	800f92c <HAL_TIM_IC_Start_IT+0x54>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	e013      	b.n	800f954 <HAL_TIM_IC_Start_IT+0x7c>
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	2b04      	cmp	r3, #4
 800f930:	d104      	bne.n	800f93c <HAL_TIM_IC_Start_IT+0x64>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f938:	b2db      	uxtb	r3, r3
 800f93a:	e00b      	b.n	800f954 <HAL_TIM_IC_Start_IT+0x7c>
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	2b08      	cmp	r3, #8
 800f940:	d104      	bne.n	800f94c <HAL_TIM_IC_Start_IT+0x74>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f948:	b2db      	uxtb	r3, r3
 800f94a:	e003      	b.n	800f954 <HAL_TIM_IC_Start_IT+0x7c>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f952:	b2db      	uxtb	r3, r3
 800f954:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800f956:	7bfb      	ldrb	r3, [r7, #15]
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d102      	bne.n	800f962 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800f95c:	7bbb      	ldrb	r3, [r7, #14]
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d001      	beq.n	800f966 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800f962:	2301      	movs	r3, #1
 800f964:	e0b3      	b.n	800face <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d104      	bne.n	800f976 <HAL_TIM_IC_Start_IT+0x9e>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2202      	movs	r2, #2
 800f970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f974:	e013      	b.n	800f99e <HAL_TIM_IC_Start_IT+0xc6>
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	2b04      	cmp	r3, #4
 800f97a:	d104      	bne.n	800f986 <HAL_TIM_IC_Start_IT+0xae>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2202      	movs	r2, #2
 800f980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f984:	e00b      	b.n	800f99e <HAL_TIM_IC_Start_IT+0xc6>
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	2b08      	cmp	r3, #8
 800f98a:	d104      	bne.n	800f996 <HAL_TIM_IC_Start_IT+0xbe>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2202      	movs	r2, #2
 800f990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f994:	e003      	b.n	800f99e <HAL_TIM_IC_Start_IT+0xc6>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2202      	movs	r2, #2
 800f99a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d104      	bne.n	800f9ae <HAL_TIM_IC_Start_IT+0xd6>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2202      	movs	r2, #2
 800f9a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9ac:	e013      	b.n	800f9d6 <HAL_TIM_IC_Start_IT+0xfe>
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	2b04      	cmp	r3, #4
 800f9b2:	d104      	bne.n	800f9be <HAL_TIM_IC_Start_IT+0xe6>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2202      	movs	r2, #2
 800f9b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f9bc:	e00b      	b.n	800f9d6 <HAL_TIM_IC_Start_IT+0xfe>
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	2b08      	cmp	r3, #8
 800f9c2:	d104      	bne.n	800f9ce <HAL_TIM_IC_Start_IT+0xf6>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2202      	movs	r2, #2
 800f9c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9cc:	e003      	b.n	800f9d6 <HAL_TIM_IC_Start_IT+0xfe>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2202      	movs	r2, #2
 800f9d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	2b0c      	cmp	r3, #12
 800f9da:	d841      	bhi.n	800fa60 <HAL_TIM_IC_Start_IT+0x188>
 800f9dc:	a201      	add	r2, pc, #4	; (adr r2, 800f9e4 <HAL_TIM_IC_Start_IT+0x10c>)
 800f9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e2:	bf00      	nop
 800f9e4:	0800fa19 	.word	0x0800fa19
 800f9e8:	0800fa61 	.word	0x0800fa61
 800f9ec:	0800fa61 	.word	0x0800fa61
 800f9f0:	0800fa61 	.word	0x0800fa61
 800f9f4:	0800fa2b 	.word	0x0800fa2b
 800f9f8:	0800fa61 	.word	0x0800fa61
 800f9fc:	0800fa61 	.word	0x0800fa61
 800fa00:	0800fa61 	.word	0x0800fa61
 800fa04:	0800fa3d 	.word	0x0800fa3d
 800fa08:	0800fa61 	.word	0x0800fa61
 800fa0c:	0800fa61 	.word	0x0800fa61
 800fa10:	0800fa61 	.word	0x0800fa61
 800fa14:	0800fa4f 	.word	0x0800fa4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68da      	ldr	r2, [r3, #12]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f042 0202 	orr.w	r2, r2, #2
 800fa26:	60da      	str	r2, [r3, #12]
      break;
 800fa28:	e01b      	b.n	800fa62 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	68da      	ldr	r2, [r3, #12]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f042 0204 	orr.w	r2, r2, #4
 800fa38:	60da      	str	r2, [r3, #12]
      break;
 800fa3a:	e012      	b.n	800fa62 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	68da      	ldr	r2, [r3, #12]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f042 0208 	orr.w	r2, r2, #8
 800fa4a:	60da      	str	r2, [r3, #12]
      break;
 800fa4c:	e009      	b.n	800fa62 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	68da      	ldr	r2, [r3, #12]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f042 0210 	orr.w	r2, r2, #16
 800fa5c:	60da      	str	r2, [r3, #12]
      break;
 800fa5e:	e000      	b.n	800fa62 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800fa60:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2201      	movs	r2, #1
 800fa68:	6839      	ldr	r1, [r7, #0]
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f000 fefd 	bl	801086a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a18      	ldr	r2, [pc, #96]	; (800fad8 <HAL_TIM_IC_Start_IT+0x200>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d00e      	beq.n	800fa98 <HAL_TIM_IC_Start_IT+0x1c0>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa82:	d009      	beq.n	800fa98 <HAL_TIM_IC_Start_IT+0x1c0>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	4a14      	ldr	r2, [pc, #80]	; (800fadc <HAL_TIM_IC_Start_IT+0x204>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d004      	beq.n	800fa98 <HAL_TIM_IC_Start_IT+0x1c0>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	4a13      	ldr	r2, [pc, #76]	; (800fae0 <HAL_TIM_IC_Start_IT+0x208>)
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d111      	bne.n	800fabc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	f003 0307 	and.w	r3, r3, #7
 800faa2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	2b06      	cmp	r3, #6
 800faa8:	d010      	beq.n	800facc <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f042 0201 	orr.w	r2, r2, #1
 800fab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800faba:	e007      	b.n	800facc <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f042 0201 	orr.w	r2, r2, #1
 800faca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	40012c00 	.word	0x40012c00
 800fadc:	40000400 	.word	0x40000400
 800fae0:	40000800 	.word	0x40000800

0800fae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	691b      	ldr	r3, [r3, #16]
 800faf2:	f003 0302 	and.w	r3, r3, #2
 800faf6:	2b02      	cmp	r3, #2
 800faf8:	d122      	bne.n	800fb40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	f003 0302 	and.w	r3, r3, #2
 800fb04:	2b02      	cmp	r3, #2
 800fb06:	d11b      	bne.n	800fb40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f06f 0202 	mvn.w	r2, #2
 800fb10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2201      	movs	r2, #1
 800fb16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	699b      	ldr	r3, [r3, #24]
 800fb1e:	f003 0303 	and.w	r3, r3, #3
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d003      	beq.n	800fb2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7f5 fe7a 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 800fb2c:	e005      	b.n	800fb3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 faf2 	bl	8010118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 faf8 	bl	801012a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	f003 0304 	and.w	r3, r3, #4
 800fb4a:	2b04      	cmp	r3, #4
 800fb4c:	d122      	bne.n	800fb94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	f003 0304 	and.w	r3, r3, #4
 800fb58:	2b04      	cmp	r3, #4
 800fb5a:	d11b      	bne.n	800fb94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f06f 0204 	mvn.w	r2, #4
 800fb64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2202      	movs	r2, #2
 800fb6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	699b      	ldr	r3, [r3, #24]
 800fb72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d003      	beq.n	800fb82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f7f5 fe50 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 800fb80:	e005      	b.n	800fb8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 fac8 	bl	8010118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f000 face 	bl	801012a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	691b      	ldr	r3, [r3, #16]
 800fb9a:	f003 0308 	and.w	r3, r3, #8
 800fb9e:	2b08      	cmp	r3, #8
 800fba0:	d122      	bne.n	800fbe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	f003 0308 	and.w	r3, r3, #8
 800fbac:	2b08      	cmp	r3, #8
 800fbae:	d11b      	bne.n	800fbe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f06f 0208 	mvn.w	r2, #8
 800fbb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2204      	movs	r2, #4
 800fbbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	69db      	ldr	r3, [r3, #28]
 800fbc6:	f003 0303 	and.w	r3, r3, #3
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d003      	beq.n	800fbd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f7f5 fe26 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 800fbd4:	e005      	b.n	800fbe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f000 fa9e 	bl	8010118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 faa4 	bl	801012a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	691b      	ldr	r3, [r3, #16]
 800fbee:	f003 0310 	and.w	r3, r3, #16
 800fbf2:	2b10      	cmp	r3, #16
 800fbf4:	d122      	bne.n	800fc3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	f003 0310 	and.w	r3, r3, #16
 800fc00:	2b10      	cmp	r3, #16
 800fc02:	d11b      	bne.n	800fc3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	f06f 0210 	mvn.w	r2, #16
 800fc0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2208      	movs	r2, #8
 800fc12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	69db      	ldr	r3, [r3, #28]
 800fc1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d003      	beq.n	800fc2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f7f5 fdfc 	bl	8005820 <HAL_TIM_IC_CaptureCallback>
 800fc28:	e005      	b.n	800fc36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 fa74 	bl	8010118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 fa7a 	bl	801012a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	691b      	ldr	r3, [r3, #16]
 800fc42:	f003 0301 	and.w	r3, r3, #1
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d10e      	bne.n	800fc68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	f003 0301 	and.w	r3, r3, #1
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	d107      	bne.n	800fc68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f06f 0201 	mvn.w	r2, #1
 800fc60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 fa4f 	bl	8010106 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	691b      	ldr	r3, [r3, #16]
 800fc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc72:	2b80      	cmp	r3, #128	; 0x80
 800fc74:	d10e      	bne.n	800fc94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc80:	2b80      	cmp	r3, #128	; 0x80
 800fc82:	d107      	bne.n	800fc94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fc8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 fe77 	bl	8010982 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc9e:	2b40      	cmp	r3, #64	; 0x40
 800fca0:	d10e      	bne.n	800fcc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcac:	2b40      	cmp	r3, #64	; 0x40
 800fcae:	d107      	bne.n	800fcc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fcb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 fa3e 	bl	801013c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	691b      	ldr	r3, [r3, #16]
 800fcc6:	f003 0320 	and.w	r3, r3, #32
 800fcca:	2b20      	cmp	r3, #32
 800fccc:	d10e      	bne.n	800fcec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	f003 0320 	and.w	r3, r3, #32
 800fcd8:	2b20      	cmp	r3, #32
 800fcda:	d107      	bne.n	800fcec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f06f 0220 	mvn.w	r2, #32
 800fce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 fe42 	bl	8010970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fcec:	bf00      	nop
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d101      	bne.n	800fd0e <HAL_TIM_IC_ConfigChannel+0x1a>
 800fd0a:	2302      	movs	r3, #2
 800fd0c:	e082      	b.n	800fe14 <HAL_TIM_IC_ConfigChannel+0x120>
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2201      	movs	r2, #1
 800fd12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d11b      	bne.n	800fd54 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	6818      	ldr	r0, [r3, #0]
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	6819      	ldr	r1, [r3, #0]
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	685a      	ldr	r2, [r3, #4]
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	68db      	ldr	r3, [r3, #12]
 800fd2c:	f000 fbfa 	bl	8010524 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	699a      	ldr	r2, [r3, #24]
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f022 020c 	bic.w	r2, r2, #12
 800fd3e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	6999      	ldr	r1, [r3, #24]
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	689a      	ldr	r2, [r3, #8]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	430a      	orrs	r2, r1
 800fd50:	619a      	str	r2, [r3, #24]
 800fd52:	e05a      	b.n	800fe0a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2b04      	cmp	r3, #4
 800fd58:	d11c      	bne.n	800fd94 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	6818      	ldr	r0, [r3, #0]
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	6819      	ldr	r1, [r3, #0]
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	685a      	ldr	r2, [r3, #4]
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	f000 fc63 	bl	8010634 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	699a      	ldr	r2, [r3, #24]
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fd7c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	6999      	ldr	r1, [r3, #24]
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	689b      	ldr	r3, [r3, #8]
 800fd88:	021a      	lsls	r2, r3, #8
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	430a      	orrs	r2, r1
 800fd90:	619a      	str	r2, [r3, #24]
 800fd92:	e03a      	b.n	800fe0a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2b08      	cmp	r3, #8
 800fd98:	d11b      	bne.n	800fdd2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	6818      	ldr	r0, [r3, #0]
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	6819      	ldr	r1, [r3, #0]
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	685a      	ldr	r2, [r3, #4]
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	68db      	ldr	r3, [r3, #12]
 800fdaa:	f000 fcae 	bl	801070a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	69da      	ldr	r2, [r3, #28]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f022 020c 	bic.w	r2, r2, #12
 800fdbc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	69d9      	ldr	r1, [r3, #28]
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	689a      	ldr	r2, [r3, #8]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	430a      	orrs	r2, r1
 800fdce:	61da      	str	r2, [r3, #28]
 800fdd0:	e01b      	b.n	800fe0a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	6818      	ldr	r0, [r3, #0]
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	6819      	ldr	r1, [r3, #0]
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	685a      	ldr	r2, [r3, #4]
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	f000 fccd 	bl	8010780 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	69da      	ldr	r2, [r3, #28]
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fdf4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	69d9      	ldr	r1, [r3, #28]
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	689b      	ldr	r3, [r3, #8]
 800fe00:	021a      	lsls	r2, r3, #8
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	430a      	orrs	r2, r1
 800fe08:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe12:	2300      	movs	r3, #0
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3710      	adds	r7, #16
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60f8      	str	r0, [r7, #12]
 800fe24:	60b9      	str	r1, [r7, #8]
 800fe26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d101      	bne.n	800fe36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800fe32:	2302      	movs	r3, #2
 800fe34:	e0ac      	b.n	800ff90 <HAL_TIM_PWM_ConfigChannel+0x174>
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2201      	movs	r2, #1
 800fe3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2b0c      	cmp	r3, #12
 800fe42:	f200 809f 	bhi.w	800ff84 <HAL_TIM_PWM_ConfigChannel+0x168>
 800fe46:	a201      	add	r2, pc, #4	; (adr r2, 800fe4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800fe48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe4c:	0800fe81 	.word	0x0800fe81
 800fe50:	0800ff85 	.word	0x0800ff85
 800fe54:	0800ff85 	.word	0x0800ff85
 800fe58:	0800ff85 	.word	0x0800ff85
 800fe5c:	0800fec1 	.word	0x0800fec1
 800fe60:	0800ff85 	.word	0x0800ff85
 800fe64:	0800ff85 	.word	0x0800ff85
 800fe68:	0800ff85 	.word	0x0800ff85
 800fe6c:	0800ff03 	.word	0x0800ff03
 800fe70:	0800ff85 	.word	0x0800ff85
 800fe74:	0800ff85 	.word	0x0800ff85
 800fe78:	0800ff85 	.word	0x0800ff85
 800fe7c:	0800ff43 	.word	0x0800ff43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68b9      	ldr	r1, [r7, #8]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f000 f9c4 	bl	8010214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	699a      	ldr	r2, [r3, #24]
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f042 0208 	orr.w	r2, r2, #8
 800fe9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	699a      	ldr	r2, [r3, #24]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f022 0204 	bic.w	r2, r2, #4
 800feaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	6999      	ldr	r1, [r3, #24]
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	691a      	ldr	r2, [r3, #16]
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	430a      	orrs	r2, r1
 800febc:	619a      	str	r2, [r3, #24]
      break;
 800febe:	e062      	b.n	800ff86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	68b9      	ldr	r1, [r7, #8]
 800fec6:	4618      	mov	r0, r3
 800fec8:	f000 fa0a 	bl	80102e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	699a      	ldr	r2, [r3, #24]
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800feda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	699a      	ldr	r2, [r3, #24]
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800feea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	6999      	ldr	r1, [r3, #24]
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	691b      	ldr	r3, [r3, #16]
 800fef6:	021a      	lsls	r2, r3, #8
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	430a      	orrs	r2, r1
 800fefe:	619a      	str	r2, [r3, #24]
      break;
 800ff00:	e041      	b.n	800ff86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	68b9      	ldr	r1, [r7, #8]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f000 fa53 	bl	80103b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	69da      	ldr	r2, [r3, #28]
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f042 0208 	orr.w	r2, r2, #8
 800ff1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	69da      	ldr	r2, [r3, #28]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	f022 0204 	bic.w	r2, r2, #4
 800ff2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	69d9      	ldr	r1, [r3, #28]
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	691a      	ldr	r2, [r3, #16]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	430a      	orrs	r2, r1
 800ff3e:	61da      	str	r2, [r3, #28]
      break;
 800ff40:	e021      	b.n	800ff86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	68b9      	ldr	r1, [r7, #8]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f000 fa9d 	bl	8010488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	69da      	ldr	r2, [r3, #28]
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	69da      	ldr	r2, [r3, #28]
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	69d9      	ldr	r1, [r3, #28]
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	691b      	ldr	r3, [r3, #16]
 800ff78:	021a      	lsls	r2, r3, #8
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	430a      	orrs	r2, r1
 800ff80:	61da      	str	r2, [r3, #28]
      break;
 800ff82:	e000      	b.n	800ff86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800ff84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff8e:	2300      	movs	r3, #0
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d101      	bne.n	800ffb0 <HAL_TIM_ConfigClockSource+0x18>
 800ffac:	2302      	movs	r3, #2
 800ffae:	e0a6      	b.n	80100fe <HAL_TIM_ConfigClockSource+0x166>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2202      	movs	r2, #2
 800ffbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ffce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ffd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	2b40      	cmp	r3, #64	; 0x40
 800ffe6:	d067      	beq.n	80100b8 <HAL_TIM_ConfigClockSource+0x120>
 800ffe8:	2b40      	cmp	r3, #64	; 0x40
 800ffea:	d80b      	bhi.n	8010004 <HAL_TIM_ConfigClockSource+0x6c>
 800ffec:	2b10      	cmp	r3, #16
 800ffee:	d073      	beq.n	80100d8 <HAL_TIM_ConfigClockSource+0x140>
 800fff0:	2b10      	cmp	r3, #16
 800fff2:	d802      	bhi.n	800fffa <HAL_TIM_ConfigClockSource+0x62>
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d06f      	beq.n	80100d8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800fff8:	e078      	b.n	80100ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fffa:	2b20      	cmp	r3, #32
 800fffc:	d06c      	beq.n	80100d8 <HAL_TIM_ConfigClockSource+0x140>
 800fffe:	2b30      	cmp	r3, #48	; 0x30
 8010000:	d06a      	beq.n	80100d8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8010002:	e073      	b.n	80100ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010004:	2b70      	cmp	r3, #112	; 0x70
 8010006:	d00d      	beq.n	8010024 <HAL_TIM_ConfigClockSource+0x8c>
 8010008:	2b70      	cmp	r3, #112	; 0x70
 801000a:	d804      	bhi.n	8010016 <HAL_TIM_ConfigClockSource+0x7e>
 801000c:	2b50      	cmp	r3, #80	; 0x50
 801000e:	d033      	beq.n	8010078 <HAL_TIM_ConfigClockSource+0xe0>
 8010010:	2b60      	cmp	r3, #96	; 0x60
 8010012:	d041      	beq.n	8010098 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8010014:	e06a      	b.n	80100ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801001a:	d066      	beq.n	80100ea <HAL_TIM_ConfigClockSource+0x152>
 801001c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010020:	d017      	beq.n	8010052 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8010022:	e063      	b.n	80100ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6818      	ldr	r0, [r3, #0]
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	6899      	ldr	r1, [r3, #8]
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	685a      	ldr	r2, [r3, #4]
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	f000 fbfa 	bl	801082c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010046:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	68fa      	ldr	r2, [r7, #12]
 801004e:	609a      	str	r2, [r3, #8]
      break;
 8010050:	e04c      	b.n	80100ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6818      	ldr	r0, [r3, #0]
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	6899      	ldr	r1, [r3, #8]
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	685a      	ldr	r2, [r3, #4]
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	f000 fbe3 	bl	801082c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	689a      	ldr	r2, [r3, #8]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010074:	609a      	str	r2, [r3, #8]
      break;
 8010076:	e039      	b.n	80100ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6818      	ldr	r0, [r3, #0]
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	6859      	ldr	r1, [r3, #4]
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	461a      	mov	r2, r3
 8010086:	f000 faa7 	bl	80105d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	2150      	movs	r1, #80	; 0x50
 8010090:	4618      	mov	r0, r3
 8010092:	f000 fbb1 	bl	80107f8 <TIM_ITRx_SetConfig>
      break;
 8010096:	e029      	b.n	80100ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6818      	ldr	r0, [r3, #0]
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	6859      	ldr	r1, [r3, #4]
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	461a      	mov	r2, r3
 80100a6:	f000 fb01 	bl	80106ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	2160      	movs	r1, #96	; 0x60
 80100b0:	4618      	mov	r0, r3
 80100b2:	f000 fba1 	bl	80107f8 <TIM_ITRx_SetConfig>
      break;
 80100b6:	e019      	b.n	80100ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6818      	ldr	r0, [r3, #0]
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	6859      	ldr	r1, [r3, #4]
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	461a      	mov	r2, r3
 80100c6:	f000 fa87 	bl	80105d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2140      	movs	r1, #64	; 0x40
 80100d0:	4618      	mov	r0, r3
 80100d2:	f000 fb91 	bl	80107f8 <TIM_ITRx_SetConfig>
      break;
 80100d6:	e009      	b.n	80100ec <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	4619      	mov	r1, r3
 80100e2:	4610      	mov	r0, r2
 80100e4:	f000 fb88 	bl	80107f8 <TIM_ITRx_SetConfig>
        break;
 80100e8:	e000      	b.n	80100ec <HAL_TIM_ConfigClockSource+0x154>
      break;
 80100ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2201      	movs	r2, #1
 80100f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100fc:	2300      	movs	r3, #0
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3710      	adds	r7, #16
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010106:	b480      	push	{r7}
 8010108:	b083      	sub	sp, #12
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801010e:	bf00      	nop
 8010110:	370c      	adds	r7, #12
 8010112:	46bd      	mov	sp, r7
 8010114:	bc80      	pop	{r7}
 8010116:	4770      	bx	lr

08010118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010120:	bf00      	nop
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	bc80      	pop	{r7}
 8010128:	4770      	bx	lr

0801012a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801012a:	b480      	push	{r7}
 801012c:	b083      	sub	sp, #12
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010132:	bf00      	nop
 8010134:	370c      	adds	r7, #12
 8010136:	46bd      	mov	sp, r7
 8010138:	bc80      	pop	{r7}
 801013a:	4770      	bx	lr

0801013c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010144:	bf00      	nop
 8010146:	370c      	adds	r7, #12
 8010148:	46bd      	mov	sp, r7
 801014a:	bc80      	pop	{r7}
 801014c:	4770      	bx	lr
	...

08010150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010150:	b480      	push	{r7}
 8010152:	b085      	sub	sp, #20
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	4a29      	ldr	r2, [pc, #164]	; (8010208 <TIM_Base_SetConfig+0xb8>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d00b      	beq.n	8010180 <TIM_Base_SetConfig+0x30>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801016e:	d007      	beq.n	8010180 <TIM_Base_SetConfig+0x30>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	4a26      	ldr	r2, [pc, #152]	; (801020c <TIM_Base_SetConfig+0xbc>)
 8010174:	4293      	cmp	r3, r2
 8010176:	d003      	beq.n	8010180 <TIM_Base_SetConfig+0x30>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	4a25      	ldr	r2, [pc, #148]	; (8010210 <TIM_Base_SetConfig+0xc0>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d108      	bne.n	8010192 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	4313      	orrs	r3, r2
 8010190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	4a1c      	ldr	r2, [pc, #112]	; (8010208 <TIM_Base_SetConfig+0xb8>)
 8010196:	4293      	cmp	r3, r2
 8010198:	d00b      	beq.n	80101b2 <TIM_Base_SetConfig+0x62>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101a0:	d007      	beq.n	80101b2 <TIM_Base_SetConfig+0x62>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4a19      	ldr	r2, [pc, #100]	; (801020c <TIM_Base_SetConfig+0xbc>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d003      	beq.n	80101b2 <TIM_Base_SetConfig+0x62>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4a18      	ldr	r2, [pc, #96]	; (8010210 <TIM_Base_SetConfig+0xc0>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d108      	bne.n	80101c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	68db      	ldr	r3, [r3, #12]
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	4313      	orrs	r3, r2
 80101c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	695b      	ldr	r3, [r3, #20]
 80101ce:	4313      	orrs	r3, r2
 80101d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	68fa      	ldr	r2, [r7, #12]
 80101d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	689a      	ldr	r2, [r3, #8]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	4a07      	ldr	r2, [pc, #28]	; (8010208 <TIM_Base_SetConfig+0xb8>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	d103      	bne.n	80101f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	691a      	ldr	r2, [r3, #16]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2201      	movs	r2, #1
 80101fc:	615a      	str	r2, [r3, #20]
}
 80101fe:	bf00      	nop
 8010200:	3714      	adds	r7, #20
 8010202:	46bd      	mov	sp, r7
 8010204:	bc80      	pop	{r7}
 8010206:	4770      	bx	lr
 8010208:	40012c00 	.word	0x40012c00
 801020c:	40000400 	.word	0x40000400
 8010210:	40000800 	.word	0x40000800

08010214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010214:	b480      	push	{r7}
 8010216:	b087      	sub	sp, #28
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6a1b      	ldr	r3, [r3, #32]
 8010222:	f023 0201 	bic.w	r2, r3, #1
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a1b      	ldr	r3, [r3, #32]
 801022e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	699b      	ldr	r3, [r3, #24]
 801023a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	f023 0303 	bic.w	r3, r3, #3
 801024a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	68fa      	ldr	r2, [r7, #12]
 8010252:	4313      	orrs	r3, r2
 8010254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	f023 0302 	bic.w	r3, r3, #2
 801025c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	689b      	ldr	r3, [r3, #8]
 8010262:	697a      	ldr	r2, [r7, #20]
 8010264:	4313      	orrs	r3, r2
 8010266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	4a1c      	ldr	r2, [pc, #112]	; (80102dc <TIM_OC1_SetConfig+0xc8>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d10c      	bne.n	801028a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	f023 0308 	bic.w	r3, r3, #8
 8010276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	68db      	ldr	r3, [r3, #12]
 801027c:	697a      	ldr	r2, [r7, #20]
 801027e:	4313      	orrs	r3, r2
 8010280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	f023 0304 	bic.w	r3, r3, #4
 8010288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4a13      	ldr	r2, [pc, #76]	; (80102dc <TIM_OC1_SetConfig+0xc8>)
 801028e:	4293      	cmp	r3, r2
 8010290:	d111      	bne.n	80102b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80102a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	695b      	ldr	r3, [r3, #20]
 80102a6:	693a      	ldr	r2, [r7, #16]
 80102a8:	4313      	orrs	r3, r2
 80102aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	699b      	ldr	r3, [r3, #24]
 80102b0:	693a      	ldr	r2, [r7, #16]
 80102b2:	4313      	orrs	r3, r2
 80102b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	693a      	ldr	r2, [r7, #16]
 80102ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	68fa      	ldr	r2, [r7, #12]
 80102c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	685a      	ldr	r2, [r3, #4]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	697a      	ldr	r2, [r7, #20]
 80102ce:	621a      	str	r2, [r3, #32]
}
 80102d0:	bf00      	nop
 80102d2:	371c      	adds	r7, #28
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bc80      	pop	{r7}
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	40012c00 	.word	0x40012c00

080102e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80102e0:	b480      	push	{r7}
 80102e2:	b087      	sub	sp, #28
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6a1b      	ldr	r3, [r3, #32]
 80102ee:	f023 0210 	bic.w	r2, r3, #16
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6a1b      	ldr	r3, [r3, #32]
 80102fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	699b      	ldr	r3, [r3, #24]
 8010306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801030e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	021b      	lsls	r3, r3, #8
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	4313      	orrs	r3, r2
 8010322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	f023 0320 	bic.w	r3, r3, #32
 801032a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	011b      	lsls	r3, r3, #4
 8010332:	697a      	ldr	r2, [r7, #20]
 8010334:	4313      	orrs	r3, r2
 8010336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	4a1d      	ldr	r2, [pc, #116]	; (80103b0 <TIM_OC2_SetConfig+0xd0>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d10d      	bne.n	801035c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	68db      	ldr	r3, [r3, #12]
 801034c:	011b      	lsls	r3, r3, #4
 801034e:	697a      	ldr	r2, [r7, #20]
 8010350:	4313      	orrs	r3, r2
 8010352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801035a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4a14      	ldr	r2, [pc, #80]	; (80103b0 <TIM_OC2_SetConfig+0xd0>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d113      	bne.n	801038c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801036a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	695b      	ldr	r3, [r3, #20]
 8010378:	009b      	lsls	r3, r3, #2
 801037a:	693a      	ldr	r2, [r7, #16]
 801037c:	4313      	orrs	r3, r2
 801037e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	699b      	ldr	r3, [r3, #24]
 8010384:	009b      	lsls	r3, r3, #2
 8010386:	693a      	ldr	r2, [r7, #16]
 8010388:	4313      	orrs	r3, r2
 801038a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	693a      	ldr	r2, [r7, #16]
 8010390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	68fa      	ldr	r2, [r7, #12]
 8010396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	685a      	ldr	r2, [r3, #4]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	697a      	ldr	r2, [r7, #20]
 80103a4:	621a      	str	r2, [r3, #32]
}
 80103a6:	bf00      	nop
 80103a8:	371c      	adds	r7, #28
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bc80      	pop	{r7}
 80103ae:	4770      	bx	lr
 80103b0:	40012c00 	.word	0x40012c00

080103b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b087      	sub	sp, #28
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6a1b      	ldr	r3, [r3, #32]
 80103c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6a1b      	ldr	r3, [r3, #32]
 80103ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	685b      	ldr	r3, [r3, #4]
 80103d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	69db      	ldr	r3, [r3, #28]
 80103da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f023 0303 	bic.w	r3, r3, #3
 80103ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	68fa      	ldr	r2, [r7, #12]
 80103f2:	4313      	orrs	r3, r2
 80103f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80103fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	689b      	ldr	r3, [r3, #8]
 8010402:	021b      	lsls	r3, r3, #8
 8010404:	697a      	ldr	r2, [r7, #20]
 8010406:	4313      	orrs	r3, r2
 8010408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4a1d      	ldr	r2, [pc, #116]	; (8010484 <TIM_OC3_SetConfig+0xd0>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d10d      	bne.n	801042e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	021b      	lsls	r3, r3, #8
 8010420:	697a      	ldr	r2, [r7, #20]
 8010422:	4313      	orrs	r3, r2
 8010424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801042c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4a14      	ldr	r2, [pc, #80]	; (8010484 <TIM_OC3_SetConfig+0xd0>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d113      	bne.n	801045e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801043c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	695b      	ldr	r3, [r3, #20]
 801044a:	011b      	lsls	r3, r3, #4
 801044c:	693a      	ldr	r2, [r7, #16]
 801044e:	4313      	orrs	r3, r2
 8010450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	699b      	ldr	r3, [r3, #24]
 8010456:	011b      	lsls	r3, r3, #4
 8010458:	693a      	ldr	r2, [r7, #16]
 801045a:	4313      	orrs	r3, r2
 801045c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	693a      	ldr	r2, [r7, #16]
 8010462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	68fa      	ldr	r2, [r7, #12]
 8010468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	685a      	ldr	r2, [r3, #4]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	697a      	ldr	r2, [r7, #20]
 8010476:	621a      	str	r2, [r3, #32]
}
 8010478:	bf00      	nop
 801047a:	371c      	adds	r7, #28
 801047c:	46bd      	mov	sp, r7
 801047e:	bc80      	pop	{r7}
 8010480:	4770      	bx	lr
 8010482:	bf00      	nop
 8010484:	40012c00 	.word	0x40012c00

08010488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010488:	b480      	push	{r7}
 801048a:	b087      	sub	sp, #28
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6a1b      	ldr	r3, [r3, #32]
 8010496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6a1b      	ldr	r3, [r3, #32]
 80104a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	69db      	ldr	r3, [r3, #28]
 80104ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80104be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	021b      	lsls	r3, r3, #8
 80104c6:	68fa      	ldr	r2, [r7, #12]
 80104c8:	4313      	orrs	r3, r2
 80104ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80104d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	689b      	ldr	r3, [r3, #8]
 80104d8:	031b      	lsls	r3, r3, #12
 80104da:	693a      	ldr	r2, [r7, #16]
 80104dc:	4313      	orrs	r3, r2
 80104de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a0f      	ldr	r2, [pc, #60]	; (8010520 <TIM_OC4_SetConfig+0x98>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d109      	bne.n	80104fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80104ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	695b      	ldr	r3, [r3, #20]
 80104f4:	019b      	lsls	r3, r3, #6
 80104f6:	697a      	ldr	r2, [r7, #20]
 80104f8:	4313      	orrs	r3, r2
 80104fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	697a      	ldr	r2, [r7, #20]
 8010500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	68fa      	ldr	r2, [r7, #12]
 8010506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	685a      	ldr	r2, [r3, #4]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	693a      	ldr	r2, [r7, #16]
 8010514:	621a      	str	r2, [r3, #32]
}
 8010516:	bf00      	nop
 8010518:	371c      	adds	r7, #28
 801051a:	46bd      	mov	sp, r7
 801051c:	bc80      	pop	{r7}
 801051e:	4770      	bx	lr
 8010520:	40012c00 	.word	0x40012c00

08010524 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010524:	b480      	push	{r7}
 8010526:	b087      	sub	sp, #28
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	60b9      	str	r1, [r7, #8]
 801052e:	607a      	str	r2, [r7, #4]
 8010530:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	6a1b      	ldr	r3, [r3, #32]
 8010536:	f023 0201 	bic.w	r2, r3, #1
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	699b      	ldr	r3, [r3, #24]
 8010542:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	6a1b      	ldr	r3, [r3, #32]
 8010548:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	4a1f      	ldr	r2, [pc, #124]	; (80105cc <TIM_TI1_SetConfig+0xa8>)
 801054e:	4293      	cmp	r3, r2
 8010550:	d00b      	beq.n	801056a <TIM_TI1_SetConfig+0x46>
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010558:	d007      	beq.n	801056a <TIM_TI1_SetConfig+0x46>
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	4a1c      	ldr	r2, [pc, #112]	; (80105d0 <TIM_TI1_SetConfig+0xac>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d003      	beq.n	801056a <TIM_TI1_SetConfig+0x46>
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	4a1b      	ldr	r2, [pc, #108]	; (80105d4 <TIM_TI1_SetConfig+0xb0>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d101      	bne.n	801056e <TIM_TI1_SetConfig+0x4a>
 801056a:	2301      	movs	r3, #1
 801056c:	e000      	b.n	8010570 <TIM_TI1_SetConfig+0x4c>
 801056e:	2300      	movs	r3, #0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d008      	beq.n	8010586 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	f023 0303 	bic.w	r3, r3, #3
 801057a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801057c:	697a      	ldr	r2, [r7, #20]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4313      	orrs	r3, r2
 8010582:	617b      	str	r3, [r7, #20]
 8010584:	e003      	b.n	801058e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	f043 0301 	orr.w	r3, r3, #1
 801058c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	011b      	lsls	r3, r3, #4
 801059a:	b2db      	uxtb	r3, r3
 801059c:	697a      	ldr	r2, [r7, #20]
 801059e:	4313      	orrs	r3, r2
 80105a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	f023 030a 	bic.w	r3, r3, #10
 80105a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	f003 030a 	and.w	r3, r3, #10
 80105b0:	693a      	ldr	r2, [r7, #16]
 80105b2:	4313      	orrs	r3, r2
 80105b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	697a      	ldr	r2, [r7, #20]
 80105ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	693a      	ldr	r2, [r7, #16]
 80105c0:	621a      	str	r2, [r3, #32]
}
 80105c2:	bf00      	nop
 80105c4:	371c      	adds	r7, #28
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bc80      	pop	{r7}
 80105ca:	4770      	bx	lr
 80105cc:	40012c00 	.word	0x40012c00
 80105d0:	40000400 	.word	0x40000400
 80105d4:	40000800 	.word	0x40000800

080105d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80105d8:	b480      	push	{r7}
 80105da:	b087      	sub	sp, #28
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6a1b      	ldr	r3, [r3, #32]
 80105e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	6a1b      	ldr	r3, [r3, #32]
 80105ee:	f023 0201 	bic.w	r2, r3, #1
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	699b      	ldr	r3, [r3, #24]
 80105fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	011b      	lsls	r3, r3, #4
 8010608:	693a      	ldr	r2, [r7, #16]
 801060a:	4313      	orrs	r3, r2
 801060c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	f023 030a 	bic.w	r3, r3, #10
 8010614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010616:	697a      	ldr	r2, [r7, #20]
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	4313      	orrs	r3, r2
 801061c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	693a      	ldr	r2, [r7, #16]
 8010622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	697a      	ldr	r2, [r7, #20]
 8010628:	621a      	str	r2, [r3, #32]
}
 801062a:	bf00      	nop
 801062c:	371c      	adds	r7, #28
 801062e:	46bd      	mov	sp, r7
 8010630:	bc80      	pop	{r7}
 8010632:	4770      	bx	lr

08010634 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010634:	b480      	push	{r7}
 8010636:	b087      	sub	sp, #28
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	60b9      	str	r1, [r7, #8]
 801063e:	607a      	str	r2, [r7, #4]
 8010640:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	6a1b      	ldr	r3, [r3, #32]
 8010646:	f023 0210 	bic.w	r2, r3, #16
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	699b      	ldr	r3, [r3, #24]
 8010652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	6a1b      	ldr	r3, [r3, #32]
 8010658:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010660:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	021b      	lsls	r3, r3, #8
 8010666:	697a      	ldr	r2, [r7, #20]
 8010668:	4313      	orrs	r3, r2
 801066a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010672:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	031b      	lsls	r3, r3, #12
 8010678:	b29b      	uxth	r3, r3
 801067a:	697a      	ldr	r2, [r7, #20]
 801067c:	4313      	orrs	r3, r2
 801067e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010686:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	011b      	lsls	r3, r3, #4
 801068c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010690:	693a      	ldr	r2, [r7, #16]
 8010692:	4313      	orrs	r3, r2
 8010694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	697a      	ldr	r2, [r7, #20]
 801069a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	693a      	ldr	r2, [r7, #16]
 80106a0:	621a      	str	r2, [r3, #32]
}
 80106a2:	bf00      	nop
 80106a4:	371c      	adds	r7, #28
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bc80      	pop	{r7}
 80106aa:	4770      	bx	lr

080106ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b087      	sub	sp, #28
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	6a1b      	ldr	r3, [r3, #32]
 80106bc:	f023 0210 	bic.w	r2, r3, #16
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	699b      	ldr	r3, [r3, #24]
 80106c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	6a1b      	ldr	r3, [r3, #32]
 80106ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80106d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	031b      	lsls	r3, r3, #12
 80106dc:	697a      	ldr	r2, [r7, #20]
 80106de:	4313      	orrs	r3, r2
 80106e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80106e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	011b      	lsls	r3, r3, #4
 80106ee:	693a      	ldr	r2, [r7, #16]
 80106f0:	4313      	orrs	r3, r2
 80106f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	697a      	ldr	r2, [r7, #20]
 80106f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	693a      	ldr	r2, [r7, #16]
 80106fe:	621a      	str	r2, [r3, #32]
}
 8010700:	bf00      	nop
 8010702:	371c      	adds	r7, #28
 8010704:	46bd      	mov	sp, r7
 8010706:	bc80      	pop	{r7}
 8010708:	4770      	bx	lr

0801070a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801070a:	b480      	push	{r7}
 801070c:	b087      	sub	sp, #28
 801070e:	af00      	add	r7, sp, #0
 8010710:	60f8      	str	r0, [r7, #12]
 8010712:	60b9      	str	r1, [r7, #8]
 8010714:	607a      	str	r2, [r7, #4]
 8010716:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	6a1b      	ldr	r3, [r3, #32]
 801071c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	69db      	ldr	r3, [r3, #28]
 8010728:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6a1b      	ldr	r3, [r3, #32]
 801072e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	f023 0303 	bic.w	r3, r3, #3
 8010736:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8010738:	697a      	ldr	r2, [r7, #20]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	4313      	orrs	r3, r2
 801073e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010746:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	011b      	lsls	r3, r3, #4
 801074c:	b2db      	uxtb	r3, r3
 801074e:	697a      	ldr	r2, [r7, #20]
 8010750:	4313      	orrs	r3, r2
 8010752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801075a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	021b      	lsls	r3, r3, #8
 8010760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010764:	693a      	ldr	r2, [r7, #16]
 8010766:	4313      	orrs	r3, r2
 8010768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	697a      	ldr	r2, [r7, #20]
 801076e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	693a      	ldr	r2, [r7, #16]
 8010774:	621a      	str	r2, [r3, #32]
}
 8010776:	bf00      	nop
 8010778:	371c      	adds	r7, #28
 801077a:	46bd      	mov	sp, r7
 801077c:	bc80      	pop	{r7}
 801077e:	4770      	bx	lr

08010780 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010780:	b480      	push	{r7}
 8010782:	b087      	sub	sp, #28
 8010784:	af00      	add	r7, sp, #0
 8010786:	60f8      	str	r0, [r7, #12]
 8010788:	60b9      	str	r1, [r7, #8]
 801078a:	607a      	str	r2, [r7, #4]
 801078c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	6a1b      	ldr	r3, [r3, #32]
 8010792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	69db      	ldr	r3, [r3, #28]
 801079e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	6a1b      	ldr	r3, [r3, #32]
 80107a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	021b      	lsls	r3, r3, #8
 80107b2:	697a      	ldr	r2, [r7, #20]
 80107b4:	4313      	orrs	r3, r2
 80107b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80107be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	031b      	lsls	r3, r3, #12
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	697a      	ldr	r2, [r7, #20]
 80107c8:	4313      	orrs	r3, r2
 80107ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80107d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	031b      	lsls	r3, r3, #12
 80107d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80107dc:	693a      	ldr	r2, [r7, #16]
 80107de:	4313      	orrs	r3, r2
 80107e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	697a      	ldr	r2, [r7, #20]
 80107e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	693a      	ldr	r2, [r7, #16]
 80107ec:	621a      	str	r2, [r3, #32]
}
 80107ee:	bf00      	nop
 80107f0:	371c      	adds	r7, #28
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bc80      	pop	{r7}
 80107f6:	4770      	bx	lr

080107f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	689b      	ldr	r3, [r3, #8]
 8010806:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801080e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010810:	683a      	ldr	r2, [r7, #0]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	4313      	orrs	r3, r2
 8010816:	f043 0307 	orr.w	r3, r3, #7
 801081a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	609a      	str	r2, [r3, #8]
}
 8010822:	bf00      	nop
 8010824:	3714      	adds	r7, #20
 8010826:	46bd      	mov	sp, r7
 8010828:	bc80      	pop	{r7}
 801082a:	4770      	bx	lr

0801082c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801082c:	b480      	push	{r7}
 801082e:	b087      	sub	sp, #28
 8010830:	af00      	add	r7, sp, #0
 8010832:	60f8      	str	r0, [r7, #12]
 8010834:	60b9      	str	r1, [r7, #8]
 8010836:	607a      	str	r2, [r7, #4]
 8010838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	021a      	lsls	r2, r3, #8
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	431a      	orrs	r2, r3
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	4313      	orrs	r3, r2
 8010854:	697a      	ldr	r2, [r7, #20]
 8010856:	4313      	orrs	r3, r2
 8010858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	697a      	ldr	r2, [r7, #20]
 801085e:	609a      	str	r2, [r3, #8]
}
 8010860:	bf00      	nop
 8010862:	371c      	adds	r7, #28
 8010864:	46bd      	mov	sp, r7
 8010866:	bc80      	pop	{r7}
 8010868:	4770      	bx	lr

0801086a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801086a:	b480      	push	{r7}
 801086c:	b087      	sub	sp, #28
 801086e:	af00      	add	r7, sp, #0
 8010870:	60f8      	str	r0, [r7, #12]
 8010872:	60b9      	str	r1, [r7, #8]
 8010874:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	f003 031f 	and.w	r3, r3, #31
 801087c:	2201      	movs	r2, #1
 801087e:	fa02 f303 	lsl.w	r3, r2, r3
 8010882:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	6a1a      	ldr	r2, [r3, #32]
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	43db      	mvns	r3, r3
 801088c:	401a      	ands	r2, r3
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	6a1a      	ldr	r2, [r3, #32]
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	f003 031f 	and.w	r3, r3, #31
 801089c:	6879      	ldr	r1, [r7, #4]
 801089e:	fa01 f303 	lsl.w	r3, r1, r3
 80108a2:	431a      	orrs	r2, r3
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	621a      	str	r2, [r3, #32]
}
 80108a8:	bf00      	nop
 80108aa:	371c      	adds	r7, #28
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bc80      	pop	{r7}
 80108b0:	4770      	bx	lr
	...

080108b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b085      	sub	sp, #20
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108c4:	2b01      	cmp	r3, #1
 80108c6:	d101      	bne.n	80108cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80108c8:	2302      	movs	r3, #2
 80108ca:	e046      	b.n	801095a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2201      	movs	r2, #1
 80108d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2202      	movs	r2, #2
 80108d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	689b      	ldr	r3, [r3, #8]
 80108ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	68fa      	ldr	r2, [r7, #12]
 80108fa:	4313      	orrs	r3, r2
 80108fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	68fa      	ldr	r2, [r7, #12]
 8010904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	4a16      	ldr	r2, [pc, #88]	; (8010964 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d00e      	beq.n	801092e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010918:	d009      	beq.n	801092e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	4a12      	ldr	r2, [pc, #72]	; (8010968 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8010920:	4293      	cmp	r3, r2
 8010922:	d004      	beq.n	801092e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	4a10      	ldr	r2, [pc, #64]	; (801096c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801092a:	4293      	cmp	r3, r2
 801092c:	d10c      	bne.n	8010948 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	68ba      	ldr	r2, [r7, #8]
 801093c:	4313      	orrs	r3, r2
 801093e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	68ba      	ldr	r2, [r7, #8]
 8010946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2201      	movs	r2, #1
 801094c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010958:	2300      	movs	r3, #0
}
 801095a:	4618      	mov	r0, r3
 801095c:	3714      	adds	r7, #20
 801095e:	46bd      	mov	sp, r7
 8010960:	bc80      	pop	{r7}
 8010962:	4770      	bx	lr
 8010964:	40012c00 	.word	0x40012c00
 8010968:	40000400 	.word	0x40000400
 801096c:	40000800 	.word	0x40000800

08010970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010970:	b480      	push	{r7}
 8010972:	b083      	sub	sp, #12
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010978:	bf00      	nop
 801097a:	370c      	adds	r7, #12
 801097c:	46bd      	mov	sp, r7
 801097e:	bc80      	pop	{r7}
 8010980:	4770      	bx	lr

08010982 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010982:	b480      	push	{r7}
 8010984:	b083      	sub	sp, #12
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801098a:	bf00      	nop
 801098c:	370c      	adds	r7, #12
 801098e:	46bd      	mov	sp, r7
 8010990:	bc80      	pop	{r7}
 8010992:	4770      	bx	lr

08010994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d101      	bne.n	80109a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109a2:	2301      	movs	r3, #1
 80109a4:	e03f      	b.n	8010a26 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80109ac:	b2db      	uxtb	r3, r3
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d106      	bne.n	80109c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f7fb fcd4 	bl	800c368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2224      	movs	r2, #36	; 0x24
 80109c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	68da      	ldr	r2, [r3, #12]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80109d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f000 fc95 	bl	8011308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	691a      	ldr	r2, [r3, #16]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80109ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	695a      	ldr	r2, [r3, #20]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80109fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	68da      	ldr	r2, [r3, #12]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2200      	movs	r2, #0
 8010a12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2220      	movs	r2, #32
 8010a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2220      	movs	r2, #32
 8010a20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010a24:	2300      	movs	r3, #0
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3708      	adds	r7, #8
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}

08010a2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a2e:	b580      	push	{r7, lr}
 8010a30:	b08a      	sub	sp, #40	; 0x28
 8010a32:	af02      	add	r7, sp, #8
 8010a34:	60f8      	str	r0, [r7, #12]
 8010a36:	60b9      	str	r1, [r7, #8]
 8010a38:	603b      	str	r3, [r7, #0]
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	2b20      	cmp	r3, #32
 8010a4c:	d17c      	bne.n	8010b48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d002      	beq.n	8010a5a <HAL_UART_Transmit+0x2c>
 8010a54:	88fb      	ldrh	r3, [r7, #6]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d101      	bne.n	8010a5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e075      	b.n	8010b4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d101      	bne.n	8010a6c <HAL_UART_Transmit+0x3e>
 8010a68:	2302      	movs	r3, #2
 8010a6a:	e06e      	b.n	8010b4a <HAL_UART_Transmit+0x11c>
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2201      	movs	r2, #1
 8010a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2200      	movs	r2, #0
 8010a78:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	2221      	movs	r2, #33	; 0x21
 8010a7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010a82:	f7fb fe71 	bl	800c768 <HAL_GetTick>
 8010a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	88fa      	ldrh	r2, [r7, #6]
 8010a8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	88fa      	ldrh	r2, [r7, #6]
 8010a92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a9c:	d108      	bne.n	8010ab0 <HAL_UART_Transmit+0x82>
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	691b      	ldr	r3, [r3, #16]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d104      	bne.n	8010ab0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	61bb      	str	r3, [r7, #24]
 8010aae:	e003      	b.n	8010ab8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2200      	movs	r2, #0
 8010abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8010ac0:	e02a      	b.n	8010b18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	2180      	movs	r1, #128	; 0x80
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f000 faa3 	bl	8011018 <UART_WaitOnFlagUntilTimeout>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d001      	beq.n	8010adc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8010ad8:	2303      	movs	r3, #3
 8010ada:	e036      	b.n	8010b4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d10b      	bne.n	8010afa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010ae2:	69bb      	ldr	r3, [r7, #24]
 8010ae4:	881b      	ldrh	r3, [r3, #0]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010af0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010af2:	69bb      	ldr	r3, [r7, #24]
 8010af4:	3302      	adds	r3, #2
 8010af6:	61bb      	str	r3, [r7, #24]
 8010af8:	e007      	b.n	8010b0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	781a      	ldrb	r2, [r3, #0]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	3301      	adds	r3, #1
 8010b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	3b01      	subs	r3, #1
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d1cf      	bne.n	8010ac2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	9300      	str	r3, [sp, #0]
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	2140      	movs	r1, #64	; 0x40
 8010b2c:	68f8      	ldr	r0, [r7, #12]
 8010b2e:	f000 fa73 	bl	8011018 <UART_WaitOnFlagUntilTimeout>
 8010b32:	4603      	mov	r3, r0
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d001      	beq.n	8010b3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010b38:	2303      	movs	r3, #3
 8010b3a:	e006      	b.n	8010b4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2220      	movs	r2, #32
 8010b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8010b44:	2300      	movs	r3, #0
 8010b46:	e000      	b.n	8010b4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010b48:	2302      	movs	r3, #2
  }
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3720      	adds	r7, #32
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}

08010b52 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b52:	b480      	push	{r7}
 8010b54:	b085      	sub	sp, #20
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	60f8      	str	r0, [r7, #12]
 8010b5a:	60b9      	str	r1, [r7, #8]
 8010b5c:	4613      	mov	r3, r2
 8010b5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010b66:	b2db      	uxtb	r3, r3
 8010b68:	2b20      	cmp	r3, #32
 8010b6a:	d130      	bne.n	8010bce <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d002      	beq.n	8010b78 <HAL_UART_Transmit_IT+0x26>
 8010b72:	88fb      	ldrh	r3, [r7, #6]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d101      	bne.n	8010b7c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	e029      	b.n	8010bd0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d101      	bne.n	8010b8a <HAL_UART_Transmit_IT+0x38>
 8010b86:	2302      	movs	r3, #2
 8010b88:	e022      	b.n	8010bd0 <HAL_UART_Transmit_IT+0x7e>
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	68ba      	ldr	r2, [r7, #8]
 8010b96:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	88fa      	ldrh	r2, [r7, #6]
 8010b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	88fa      	ldrh	r2, [r7, #6]
 8010ba2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2221      	movs	r2, #33	; 0x21
 8010bae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	68da      	ldr	r2, [r3, #12]
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010bc8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	e000      	b.n	8010bd0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8010bce:	2302      	movs	r3, #2
  }
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3714      	adds	r7, #20
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bc80      	pop	{r7}
 8010bd8:	4770      	bx	lr
	...

08010bdc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b086      	sub	sp, #24
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	60f8      	str	r0, [r7, #12]
 8010be4:	60b9      	str	r1, [r7, #8]
 8010be6:	4613      	mov	r3, r2
 8010be8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010bf0:	b2db      	uxtb	r3, r3
 8010bf2:	2b20      	cmp	r3, #32
 8010bf4:	d166      	bne.n	8010cc4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d002      	beq.n	8010c02 <HAL_UART_Receive_DMA+0x26>
 8010bfc:	88fb      	ldrh	r3, [r7, #6]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d101      	bne.n	8010c06 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010c02:	2301      	movs	r3, #1
 8010c04:	e05f      	b.n	8010cc6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d101      	bne.n	8010c14 <HAL_UART_Receive_DMA+0x38>
 8010c10:	2302      	movs	r3, #2
 8010c12:	e058      	b.n	8010cc6 <HAL_UART_Receive_DMA+0xea>
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2201      	movs	r2, #1
 8010c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8010c1c:	68ba      	ldr	r2, [r7, #8]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	88fa      	ldrh	r2, [r7, #6]
 8010c26:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2222      	movs	r2, #34	; 0x22
 8010c32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c3a:	4a25      	ldr	r2, [pc, #148]	; (8010cd0 <HAL_UART_Receive_DMA+0xf4>)
 8010c3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c42:	4a24      	ldr	r2, [pc, #144]	; (8010cd4 <HAL_UART_Receive_DMA+0xf8>)
 8010c44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c4a:	4a23      	ldr	r2, [pc, #140]	; (8010cd8 <HAL_UART_Receive_DMA+0xfc>)
 8010c4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c52:	2200      	movs	r2, #0
 8010c54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8010c56:	f107 0308 	add.w	r3, r7, #8
 8010c5a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	3304      	adds	r3, #4
 8010c66:	4619      	mov	r1, r3
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	681a      	ldr	r2, [r3, #0]
 8010c6c:	88fb      	ldrh	r3, [r7, #6]
 8010c6e:	f7fb ff15 	bl	800ca9c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8010c72:	2300      	movs	r3, #0
 8010c74:	613b      	str	r3, [r7, #16]
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	613b      	str	r3, [r7, #16]
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	613b      	str	r3, [r7, #16]
 8010c86:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	68da      	ldr	r2, [r3, #12]
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c9e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	695a      	ldr	r2, [r3, #20]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f042 0201 	orr.w	r2, r2, #1
 8010cae:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	695a      	ldr	r2, [r3, #20]
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010cbe:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	e000      	b.n	8010cc6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010cc4:	2302      	movs	r3, #2
  }
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3718      	adds	r7, #24
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	08010f01 	.word	0x08010f01
 8010cd4:	08010f69 	.word	0x08010f69
 8010cd8:	08010f85 	.word	0x08010f85

08010cdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b088      	sub	sp, #32
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	695b      	ldr	r3, [r3, #20]
 8010cfa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010d00:	2300      	movs	r3, #0
 8010d02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010d04:	69fb      	ldr	r3, [r7, #28]
 8010d06:	f003 030f 	and.w	r3, r3, #15
 8010d0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d10d      	bne.n	8010d2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	f003 0320 	and.w	r3, r3, #32
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d008      	beq.n	8010d2e <HAL_UART_IRQHandler+0x52>
 8010d1c:	69bb      	ldr	r3, [r7, #24]
 8010d1e:	f003 0320 	and.w	r3, r3, #32
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d003      	beq.n	8010d2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f000 fa6d 	bl	8011206 <UART_Receive_IT>
      return;
 8010d2c:	e0d1      	b.n	8010ed2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f000 80b0 	beq.w	8010e96 <HAL_UART_IRQHandler+0x1ba>
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	f003 0301 	and.w	r3, r3, #1
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d105      	bne.n	8010d4c <HAL_UART_IRQHandler+0x70>
 8010d40:	69bb      	ldr	r3, [r7, #24]
 8010d42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	f000 80a5 	beq.w	8010e96 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010d4c:	69fb      	ldr	r3, [r7, #28]
 8010d4e:	f003 0301 	and.w	r3, r3, #1
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d00a      	beq.n	8010d6c <HAL_UART_IRQHandler+0x90>
 8010d56:	69bb      	ldr	r3, [r7, #24]
 8010d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d005      	beq.n	8010d6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d64:	f043 0201 	orr.w	r2, r3, #1
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	f003 0304 	and.w	r3, r3, #4
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d00a      	beq.n	8010d8c <HAL_UART_IRQHandler+0xb0>
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	f003 0301 	and.w	r3, r3, #1
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d005      	beq.n	8010d8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d84:	f043 0202 	orr.w	r2, r3, #2
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010d8c:	69fb      	ldr	r3, [r7, #28]
 8010d8e:	f003 0302 	and.w	r3, r3, #2
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d00a      	beq.n	8010dac <HAL_UART_IRQHandler+0xd0>
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	f003 0301 	and.w	r3, r3, #1
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d005      	beq.n	8010dac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010da4:	f043 0204 	orr.w	r2, r3, #4
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	f003 0308 	and.w	r3, r3, #8
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d00f      	beq.n	8010dd6 <HAL_UART_IRQHandler+0xfa>
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	f003 0320 	and.w	r3, r3, #32
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d104      	bne.n	8010dca <HAL_UART_IRQHandler+0xee>
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	f003 0301 	and.w	r3, r3, #1
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d005      	beq.n	8010dd6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dce:	f043 0208 	orr.w	r2, r3, #8
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d078      	beq.n	8010ed0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	f003 0320 	and.w	r3, r3, #32
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d007      	beq.n	8010df8 <HAL_UART_IRQHandler+0x11c>
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	f003 0320 	and.w	r3, r3, #32
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d002      	beq.n	8010df8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 fa07 	bl	8011206 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	695b      	ldr	r3, [r3, #20]
 8010dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	bf14      	ite	ne
 8010e06:	2301      	movne	r3, #1
 8010e08:	2300      	moveq	r3, #0
 8010e0a:	b2db      	uxtb	r3, r3
 8010e0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e12:	f003 0308 	and.w	r3, r3, #8
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d102      	bne.n	8010e20 <HAL_UART_IRQHandler+0x144>
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d031      	beq.n	8010e84 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f000 f958 	bl	80110d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	695b      	ldr	r3, [r3, #20]
 8010e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d023      	beq.n	8010e7c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	695a      	ldr	r2, [r3, #20]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d013      	beq.n	8010e74 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e50:	4a21      	ldr	r2, [pc, #132]	; (8010ed8 <HAL_UART_IRQHandler+0x1fc>)
 8010e52:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7fb fe7f 	bl	800cb5c <HAL_DMA_Abort_IT>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d016      	beq.n	8010e92 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010e6e:	4610      	mov	r0, r2
 8010e70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e72:	e00e      	b.n	8010e92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f7fb fa41 	bl	800c2fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e7a:	e00a      	b.n	8010e92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7fb fa3d 	bl	800c2fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e82:	e006      	b.n	8010e92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f7fb fa39 	bl	800c2fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010e90:	e01e      	b.n	8010ed0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e92:	bf00      	nop
    return;
 8010e94:	e01c      	b.n	8010ed0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d008      	beq.n	8010eb2 <HAL_UART_IRQHandler+0x1d6>
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d003      	beq.n	8010eb2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f000 f944 	bl	8011138 <UART_Transmit_IT>
    return;
 8010eb0:	e00f      	b.n	8010ed2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d00a      	beq.n	8010ed2 <HAL_UART_IRQHandler+0x1f6>
 8010ebc:	69bb      	ldr	r3, [r7, #24]
 8010ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d005      	beq.n	8010ed2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f000 f985 	bl	80111d6 <UART_EndTransmit_IT>
    return;
 8010ecc:	bf00      	nop
 8010ece:	e000      	b.n	8010ed2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8010ed0:	bf00      	nop
  }
}
 8010ed2:	3720      	adds	r7, #32
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}
 8010ed8:	08011111 	.word	0x08011111

08010edc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010ee4:	bf00      	nop
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bc80      	pop	{r7}
 8010eec:	4770      	bx	lr

08010eee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010eee:	b480      	push	{r7}
 8010ef0:	b083      	sub	sp, #12
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010ef6:	bf00      	nop
 8010ef8:	370c      	adds	r7, #12
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bc80      	pop	{r7}
 8010efe:	4770      	bx	lr

08010f00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b084      	sub	sp, #16
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f0c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f003 0320 	and.w	r3, r3, #32
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d11e      	bne.n	8010f5a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	68da      	ldr	r2, [r3, #12]
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010f30:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	695a      	ldr	r2, [r3, #20]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	f022 0201 	bic.w	r2, r2, #1
 8010f40:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	695a      	ldr	r2, [r3, #20]
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f50:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2220      	movs	r2, #32
 8010f56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010f5a:	68f8      	ldr	r0, [r7, #12]
 8010f5c:	f7fb f9fa 	bl	800c354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f60:	bf00      	nop
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f74:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f7ff ffb9 	bl	8010eee <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f7c:	bf00      	nop
 8010f7e:	3710      	adds	r7, #16
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}

08010f84 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b084      	sub	sp, #16
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f94:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	695b      	ldr	r3, [r3, #20]
 8010f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	bf14      	ite	ne
 8010fa4:	2301      	movne	r3, #1
 8010fa6:	2300      	moveq	r3, #0
 8010fa8:	b2db      	uxtb	r3, r3
 8010faa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	2b21      	cmp	r3, #33	; 0x21
 8010fb6:	d108      	bne.n	8010fca <UART_DMAError+0x46>
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d005      	beq.n	8010fca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010fc4:	68b8      	ldr	r0, [r7, #8]
 8010fc6:	f000 f871 	bl	80110ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	695b      	ldr	r3, [r3, #20]
 8010fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	bf14      	ite	ne
 8010fd8:	2301      	movne	r3, #1
 8010fda:	2300      	moveq	r3, #0
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	2b22      	cmp	r3, #34	; 0x22
 8010fea:	d108      	bne.n	8010ffe <UART_DMAError+0x7a>
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d005      	beq.n	8010ffe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010ff8:	68b8      	ldr	r0, [r7, #8]
 8010ffa:	f000 f86c 	bl	80110d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011002:	f043 0210 	orr.w	r2, r3, #16
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801100a:	68b8      	ldr	r0, [r7, #8]
 801100c:	f7fb f976 	bl	800c2fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011010:	bf00      	nop
 8011012:	3710      	adds	r7, #16
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
 801101e:	60f8      	str	r0, [r7, #12]
 8011020:	60b9      	str	r1, [r7, #8]
 8011022:	603b      	str	r3, [r7, #0]
 8011024:	4613      	mov	r3, r2
 8011026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011028:	e02c      	b.n	8011084 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801102a:	69bb      	ldr	r3, [r7, #24]
 801102c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011030:	d028      	beq.n	8011084 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011032:	69bb      	ldr	r3, [r7, #24]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d007      	beq.n	8011048 <UART_WaitOnFlagUntilTimeout+0x30>
 8011038:	f7fb fb96 	bl	800c768 <HAL_GetTick>
 801103c:	4602      	mov	r2, r0
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	1ad3      	subs	r3, r2, r3
 8011042:	69ba      	ldr	r2, [r7, #24]
 8011044:	429a      	cmp	r2, r3
 8011046:	d21d      	bcs.n	8011084 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	68da      	ldr	r2, [r3, #12]
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011056:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	695a      	ldr	r2, [r3, #20]
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	f022 0201 	bic.w	r2, r2, #1
 8011066:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2220      	movs	r2, #32
 801106c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2220      	movs	r2, #32
 8011074:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	2200      	movs	r2, #0
 801107c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8011080:	2303      	movs	r3, #3
 8011082:	e00f      	b.n	80110a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	4013      	ands	r3, r2
 801108e:	68ba      	ldr	r2, [r7, #8]
 8011090:	429a      	cmp	r2, r3
 8011092:	bf0c      	ite	eq
 8011094:	2301      	moveq	r3, #1
 8011096:	2300      	movne	r3, #0
 8011098:	b2db      	uxtb	r3, r3
 801109a:	461a      	mov	r2, r3
 801109c:	79fb      	ldrb	r3, [r7, #7]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d0c3      	beq.n	801102a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80110a2:	2300      	movs	r3, #0
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3710      	adds	r7, #16
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}

080110ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	68da      	ldr	r2, [r3, #12]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80110c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2220      	movs	r2, #32
 80110c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80110cc:	bf00      	nop
 80110ce:	370c      	adds	r7, #12
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bc80      	pop	{r7}
 80110d4:	4770      	bx	lr

080110d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80110d6:	b480      	push	{r7}
 80110d8:	b083      	sub	sp, #12
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	68da      	ldr	r2, [r3, #12]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80110ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	695a      	ldr	r2, [r3, #20]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	f022 0201 	bic.w	r2, r2, #1
 80110fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2220      	movs	r2, #32
 8011102:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8011106:	bf00      	nop
 8011108:	370c      	adds	r7, #12
 801110a:	46bd      	mov	sp, r7
 801110c:	bc80      	pop	{r7}
 801110e:	4770      	bx	lr

08011110 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801111c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2200      	movs	r2, #0
 8011122:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2200      	movs	r2, #0
 8011128:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801112a:	68f8      	ldr	r0, [r7, #12]
 801112c:	f7fb f8e6 	bl	800c2fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011130:	bf00      	nop
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011138:	b480      	push	{r7}
 801113a:	b085      	sub	sp, #20
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011146:	b2db      	uxtb	r3, r3
 8011148:	2b21      	cmp	r3, #33	; 0x21
 801114a:	d13e      	bne.n	80111ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	689b      	ldr	r3, [r3, #8]
 8011150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011154:	d114      	bne.n	8011180 <UART_Transmit_IT+0x48>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	691b      	ldr	r3, [r3, #16]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d110      	bne.n	8011180 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6a1b      	ldr	r3, [r3, #32]
 8011162:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	881b      	ldrh	r3, [r3, #0]
 8011168:	461a      	mov	r2, r3
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011172:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6a1b      	ldr	r3, [r3, #32]
 8011178:	1c9a      	adds	r2, r3, #2
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	621a      	str	r2, [r3, #32]
 801117e:	e008      	b.n	8011192 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6a1b      	ldr	r3, [r3, #32]
 8011184:	1c59      	adds	r1, r3, #1
 8011186:	687a      	ldr	r2, [r7, #4]
 8011188:	6211      	str	r1, [r2, #32]
 801118a:	781a      	ldrb	r2, [r3, #0]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011196:	b29b      	uxth	r3, r3
 8011198:	3b01      	subs	r3, #1
 801119a:	b29b      	uxth	r3, r3
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	4619      	mov	r1, r3
 80111a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d10f      	bne.n	80111c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	68da      	ldr	r2, [r3, #12]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80111b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	68da      	ldr	r2, [r3, #12]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80111c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80111c6:	2300      	movs	r3, #0
 80111c8:	e000      	b.n	80111cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80111ca:	2302      	movs	r3, #2
  }
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3714      	adds	r7, #20
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bc80      	pop	{r7}
 80111d4:	4770      	bx	lr

080111d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80111d6:	b580      	push	{r7, lr}
 80111d8:	b082      	sub	sp, #8
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	68da      	ldr	r2, [r3, #12]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80111ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2220      	movs	r2, #32
 80111f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f7ff fe70 	bl	8010edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80111fc:	2300      	movs	r3, #0
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3708      	adds	r7, #8
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}

08011206 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011206:	b580      	push	{r7, lr}
 8011208:	b084      	sub	sp, #16
 801120a:	af00      	add	r7, sp, #0
 801120c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011214:	b2db      	uxtb	r3, r3
 8011216:	2b22      	cmp	r3, #34	; 0x22
 8011218:	d170      	bne.n	80112fc <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	689b      	ldr	r3, [r3, #8]
 801121e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011222:	d117      	bne.n	8011254 <UART_Receive_IT+0x4e>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	691b      	ldr	r3, [r3, #16]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d113      	bne.n	8011254 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 801122c:	2300      	movs	r3, #0
 801122e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011234:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	b29b      	uxth	r3, r3
 801123e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011242:	b29a      	uxth	r2, r3
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801124c:	1c9a      	adds	r2, r3, #2
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	629a      	str	r2, [r3, #40]	; 0x28
 8011252:	e026      	b.n	80112a2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011258:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 801125a:	2300      	movs	r3, #0
 801125c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	689b      	ldr	r3, [r3, #8]
 8011262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011266:	d007      	beq.n	8011278 <UART_Receive_IT+0x72>
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	689b      	ldr	r3, [r3, #8]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d10a      	bne.n	8011286 <UART_Receive_IT+0x80>
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	691b      	ldr	r3, [r3, #16]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d106      	bne.n	8011286 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	b2da      	uxtb	r2, r3
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	701a      	strb	r2, [r3, #0]
 8011284:	e008      	b.n	8011298 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	685b      	ldr	r3, [r3, #4]
 801128c:	b2db      	uxtb	r3, r3
 801128e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011292:	b2da      	uxtb	r2, r3
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801129c:	1c5a      	adds	r2, r3, #1
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	3b01      	subs	r3, #1
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	4619      	mov	r1, r3
 80112b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d120      	bne.n	80112f8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	68da      	ldr	r2, [r3, #12]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	f022 0220 	bic.w	r2, r2, #32
 80112c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	68da      	ldr	r2, [r3, #12]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80112d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	695a      	ldr	r2, [r3, #20]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f022 0201 	bic.w	r2, r2, #1
 80112e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2220      	movs	r2, #32
 80112ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f7fb f830 	bl	800c354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80112f4:	2300      	movs	r3, #0
 80112f6:	e002      	b.n	80112fe <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80112f8:	2300      	movs	r3, #0
 80112fa:	e000      	b.n	80112fe <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80112fc:	2302      	movs	r3, #2
  }
}
 80112fe:	4618      	mov	r0, r3
 8011300:	3710      	adds	r7, #16
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}
	...

08011308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	691b      	ldr	r3, [r3, #16]
 8011316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	68da      	ldr	r2, [r3, #12]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	430a      	orrs	r2, r1
 8011324:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	689a      	ldr	r2, [r3, #8]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	691b      	ldr	r3, [r3, #16]
 801132e:	431a      	orrs	r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	695b      	ldr	r3, [r3, #20]
 8011334:	4313      	orrs	r3, r2
 8011336:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	68db      	ldr	r3, [r3, #12]
 801133e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8011342:	f023 030c 	bic.w	r3, r3, #12
 8011346:	687a      	ldr	r2, [r7, #4]
 8011348:	6812      	ldr	r2, [r2, #0]
 801134a:	68b9      	ldr	r1, [r7, #8]
 801134c:	430b      	orrs	r3, r1
 801134e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	695b      	ldr	r3, [r3, #20]
 8011356:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	699a      	ldr	r2, [r3, #24]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	430a      	orrs	r2, r1
 8011364:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	4a2c      	ldr	r2, [pc, #176]	; (801141c <UART_SetConfig+0x114>)
 801136c:	4293      	cmp	r3, r2
 801136e:	d103      	bne.n	8011378 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8011370:	f7fe f8e6 	bl	800f540 <HAL_RCC_GetPCLK2Freq>
 8011374:	60f8      	str	r0, [r7, #12]
 8011376:	e002      	b.n	801137e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8011378:	f7fe f8ce 	bl	800f518 <HAL_RCC_GetPCLK1Freq>
 801137c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801137e:	68fa      	ldr	r2, [r7, #12]
 8011380:	4613      	mov	r3, r2
 8011382:	009b      	lsls	r3, r3, #2
 8011384:	4413      	add	r3, r2
 8011386:	009a      	lsls	r2, r3, #2
 8011388:	441a      	add	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	009b      	lsls	r3, r3, #2
 8011390:	fbb2 f3f3 	udiv	r3, r2, r3
 8011394:	4a22      	ldr	r2, [pc, #136]	; (8011420 <UART_SetConfig+0x118>)
 8011396:	fba2 2303 	umull	r2, r3, r2, r3
 801139a:	095b      	lsrs	r3, r3, #5
 801139c:	0119      	lsls	r1, r3, #4
 801139e:	68fa      	ldr	r2, [r7, #12]
 80113a0:	4613      	mov	r3, r2
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	4413      	add	r3, r2
 80113a6:	009a      	lsls	r2, r3, #2
 80113a8:	441a      	add	r2, r3
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	009b      	lsls	r3, r3, #2
 80113b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80113b4:	4b1a      	ldr	r3, [pc, #104]	; (8011420 <UART_SetConfig+0x118>)
 80113b6:	fba3 0302 	umull	r0, r3, r3, r2
 80113ba:	095b      	lsrs	r3, r3, #5
 80113bc:	2064      	movs	r0, #100	; 0x64
 80113be:	fb00 f303 	mul.w	r3, r0, r3
 80113c2:	1ad3      	subs	r3, r2, r3
 80113c4:	011b      	lsls	r3, r3, #4
 80113c6:	3332      	adds	r3, #50	; 0x32
 80113c8:	4a15      	ldr	r2, [pc, #84]	; (8011420 <UART_SetConfig+0x118>)
 80113ca:	fba2 2303 	umull	r2, r3, r2, r3
 80113ce:	095b      	lsrs	r3, r3, #5
 80113d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113d4:	4419      	add	r1, r3
 80113d6:	68fa      	ldr	r2, [r7, #12]
 80113d8:	4613      	mov	r3, r2
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	4413      	add	r3, r2
 80113de:	009a      	lsls	r2, r3, #2
 80113e0:	441a      	add	r2, r3
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	009b      	lsls	r3, r3, #2
 80113e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80113ec:	4b0c      	ldr	r3, [pc, #48]	; (8011420 <UART_SetConfig+0x118>)
 80113ee:	fba3 0302 	umull	r0, r3, r3, r2
 80113f2:	095b      	lsrs	r3, r3, #5
 80113f4:	2064      	movs	r0, #100	; 0x64
 80113f6:	fb00 f303 	mul.w	r3, r0, r3
 80113fa:	1ad3      	subs	r3, r2, r3
 80113fc:	011b      	lsls	r3, r3, #4
 80113fe:	3332      	adds	r3, #50	; 0x32
 8011400:	4a07      	ldr	r2, [pc, #28]	; (8011420 <UART_SetConfig+0x118>)
 8011402:	fba2 2303 	umull	r2, r3, r2, r3
 8011406:	095b      	lsrs	r3, r3, #5
 8011408:	f003 020f 	and.w	r2, r3, #15
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	440a      	add	r2, r1
 8011412:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8011414:	bf00      	nop
 8011416:	3710      	adds	r7, #16
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}
 801141c:	40013800 	.word	0x40013800
 8011420:	51eb851f 	.word	0x51eb851f

08011424 <main>:




int main(void)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	af00      	add	r7, sp, #0
  hwInit();
 8011428:	f7fb f912 	bl	800c650 <hwInit>
  apInit();
 801142c:	f7ef fee6 	bl	80011fc <apInit>

  apMain();
 8011430:	f7ef ff10 	bl	8001254 <apMain>

  return 0;
 8011434:	2300      	movs	r3, #0
}
 8011436:	4618      	mov	r0, r3
 8011438:	bd80      	pop	{r7, pc}

0801143a <atof>:
 801143a:	2100      	movs	r1, #0
 801143c:	f001 baf4 	b.w	8012a28 <strtod>

08011440 <__errno>:
 8011440:	4b01      	ldr	r3, [pc, #4]	; (8011448 <__errno+0x8>)
 8011442:	6818      	ldr	r0, [r3, #0]
 8011444:	4770      	bx	lr
 8011446:	bf00      	nop
 8011448:	20000060 	.word	0x20000060

0801144c <__libc_init_array>:
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	2500      	movs	r5, #0
 8011450:	4e0c      	ldr	r6, [pc, #48]	; (8011484 <__libc_init_array+0x38>)
 8011452:	4c0d      	ldr	r4, [pc, #52]	; (8011488 <__libc_init_array+0x3c>)
 8011454:	1ba4      	subs	r4, r4, r6
 8011456:	10a4      	asrs	r4, r4, #2
 8011458:	42a5      	cmp	r5, r4
 801145a:	d109      	bne.n	8011470 <__libc_init_array+0x24>
 801145c:	f008 fb72 	bl	8019b44 <_init>
 8011460:	2500      	movs	r5, #0
 8011462:	4e0a      	ldr	r6, [pc, #40]	; (801148c <__libc_init_array+0x40>)
 8011464:	4c0a      	ldr	r4, [pc, #40]	; (8011490 <__libc_init_array+0x44>)
 8011466:	1ba4      	subs	r4, r4, r6
 8011468:	10a4      	asrs	r4, r4, #2
 801146a:	42a5      	cmp	r5, r4
 801146c:	d105      	bne.n	801147a <__libc_init_array+0x2e>
 801146e:	bd70      	pop	{r4, r5, r6, pc}
 8011470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011474:	4798      	blx	r3
 8011476:	3501      	adds	r5, #1
 8011478:	e7ee      	b.n	8011458 <__libc_init_array+0xc>
 801147a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801147e:	4798      	blx	r3
 8011480:	3501      	adds	r5, #1
 8011482:	e7f2      	b.n	801146a <__libc_init_array+0x1e>
 8011484:	0801a9a8 	.word	0x0801a9a8
 8011488:	0801a9a8 	.word	0x0801a9a8
 801148c:	0801a9a8 	.word	0x0801a9a8
 8011490:	0801a9ac 	.word	0x0801a9ac

08011494 <__locale_ctype_ptr_l>:
 8011494:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011498:	4770      	bx	lr
	...

0801149c <__locale_ctype_ptr>:
 801149c:	4b04      	ldr	r3, [pc, #16]	; (80114b0 <__locale_ctype_ptr+0x14>)
 801149e:	4a05      	ldr	r2, [pc, #20]	; (80114b4 <__locale_ctype_ptr+0x18>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	6a1b      	ldr	r3, [r3, #32]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	bf08      	it	eq
 80114a8:	4613      	moveq	r3, r2
 80114aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80114ae:	4770      	bx	lr
 80114b0:	20000060 	.word	0x20000060
 80114b4:	200000c4 	.word	0x200000c4

080114b8 <__ascii_mbtowc>:
 80114b8:	b082      	sub	sp, #8
 80114ba:	b901      	cbnz	r1, 80114be <__ascii_mbtowc+0x6>
 80114bc:	a901      	add	r1, sp, #4
 80114be:	b142      	cbz	r2, 80114d2 <__ascii_mbtowc+0x1a>
 80114c0:	b14b      	cbz	r3, 80114d6 <__ascii_mbtowc+0x1e>
 80114c2:	7813      	ldrb	r3, [r2, #0]
 80114c4:	600b      	str	r3, [r1, #0]
 80114c6:	7812      	ldrb	r2, [r2, #0]
 80114c8:	1c10      	adds	r0, r2, #0
 80114ca:	bf18      	it	ne
 80114cc:	2001      	movne	r0, #1
 80114ce:	b002      	add	sp, #8
 80114d0:	4770      	bx	lr
 80114d2:	4610      	mov	r0, r2
 80114d4:	e7fb      	b.n	80114ce <__ascii_mbtowc+0x16>
 80114d6:	f06f 0001 	mvn.w	r0, #1
 80114da:	e7f8      	b.n	80114ce <__ascii_mbtowc+0x16>

080114dc <memcpy>:
 80114dc:	b510      	push	{r4, lr}
 80114de:	1e43      	subs	r3, r0, #1
 80114e0:	440a      	add	r2, r1
 80114e2:	4291      	cmp	r1, r2
 80114e4:	d100      	bne.n	80114e8 <memcpy+0xc>
 80114e6:	bd10      	pop	{r4, pc}
 80114e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114f0:	e7f7      	b.n	80114e2 <memcpy+0x6>

080114f2 <memset>:
 80114f2:	4603      	mov	r3, r0
 80114f4:	4402      	add	r2, r0
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d100      	bne.n	80114fc <memset+0xa>
 80114fa:	4770      	bx	lr
 80114fc:	f803 1b01 	strb.w	r1, [r3], #1
 8011500:	e7f9      	b.n	80114f6 <memset+0x4>

08011502 <__cvt>:
 8011502:	2b00      	cmp	r3, #0
 8011504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011508:	461e      	mov	r6, r3
 801150a:	bfbb      	ittet	lt
 801150c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011510:	461e      	movlt	r6, r3
 8011512:	2300      	movge	r3, #0
 8011514:	232d      	movlt	r3, #45	; 0x2d
 8011516:	b088      	sub	sp, #32
 8011518:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801151a:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 801151e:	f027 0720 	bic.w	r7, r7, #32
 8011522:	2f46      	cmp	r7, #70	; 0x46
 8011524:	4614      	mov	r4, r2
 8011526:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011528:	700b      	strb	r3, [r1, #0]
 801152a:	d004      	beq.n	8011536 <__cvt+0x34>
 801152c:	2f45      	cmp	r7, #69	; 0x45
 801152e:	d100      	bne.n	8011532 <__cvt+0x30>
 8011530:	3501      	adds	r5, #1
 8011532:	2302      	movs	r3, #2
 8011534:	e000      	b.n	8011538 <__cvt+0x36>
 8011536:	2303      	movs	r3, #3
 8011538:	aa07      	add	r2, sp, #28
 801153a:	9204      	str	r2, [sp, #16]
 801153c:	aa06      	add	r2, sp, #24
 801153e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011542:	e9cd 3500 	strd	r3, r5, [sp]
 8011546:	4622      	mov	r2, r4
 8011548:	4633      	mov	r3, r6
 801154a:	f001 fc61 	bl	8012e10 <_dtoa_r>
 801154e:	2f47      	cmp	r7, #71	; 0x47
 8011550:	4680      	mov	r8, r0
 8011552:	d102      	bne.n	801155a <__cvt+0x58>
 8011554:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011556:	07db      	lsls	r3, r3, #31
 8011558:	d526      	bpl.n	80115a8 <__cvt+0xa6>
 801155a:	2f46      	cmp	r7, #70	; 0x46
 801155c:	eb08 0905 	add.w	r9, r8, r5
 8011560:	d111      	bne.n	8011586 <__cvt+0x84>
 8011562:	f898 3000 	ldrb.w	r3, [r8]
 8011566:	2b30      	cmp	r3, #48	; 0x30
 8011568:	d10a      	bne.n	8011580 <__cvt+0x7e>
 801156a:	2200      	movs	r2, #0
 801156c:	2300      	movs	r3, #0
 801156e:	4620      	mov	r0, r4
 8011570:	4631      	mov	r1, r6
 8011572:	f7ef fa33 	bl	80009dc <__aeabi_dcmpeq>
 8011576:	b918      	cbnz	r0, 8011580 <__cvt+0x7e>
 8011578:	f1c5 0501 	rsb	r5, r5, #1
 801157c:	f8ca 5000 	str.w	r5, [sl]
 8011580:	f8da 3000 	ldr.w	r3, [sl]
 8011584:	4499      	add	r9, r3
 8011586:	2200      	movs	r2, #0
 8011588:	2300      	movs	r3, #0
 801158a:	4620      	mov	r0, r4
 801158c:	4631      	mov	r1, r6
 801158e:	f7ef fa25 	bl	80009dc <__aeabi_dcmpeq>
 8011592:	b938      	cbnz	r0, 80115a4 <__cvt+0xa2>
 8011594:	2230      	movs	r2, #48	; 0x30
 8011596:	9b07      	ldr	r3, [sp, #28]
 8011598:	454b      	cmp	r3, r9
 801159a:	d205      	bcs.n	80115a8 <__cvt+0xa6>
 801159c:	1c59      	adds	r1, r3, #1
 801159e:	9107      	str	r1, [sp, #28]
 80115a0:	701a      	strb	r2, [r3, #0]
 80115a2:	e7f8      	b.n	8011596 <__cvt+0x94>
 80115a4:	f8cd 901c 	str.w	r9, [sp, #28]
 80115a8:	4640      	mov	r0, r8
 80115aa:	9b07      	ldr	r3, [sp, #28]
 80115ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80115ae:	eba3 0308 	sub.w	r3, r3, r8
 80115b2:	6013      	str	r3, [r2, #0]
 80115b4:	b008      	add	sp, #32
 80115b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080115ba <__exponent>:
 80115ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115bc:	2900      	cmp	r1, #0
 80115be:	bfb4      	ite	lt
 80115c0:	232d      	movlt	r3, #45	; 0x2d
 80115c2:	232b      	movge	r3, #43	; 0x2b
 80115c4:	4604      	mov	r4, r0
 80115c6:	bfb8      	it	lt
 80115c8:	4249      	neglt	r1, r1
 80115ca:	2909      	cmp	r1, #9
 80115cc:	f804 2b02 	strb.w	r2, [r4], #2
 80115d0:	7043      	strb	r3, [r0, #1]
 80115d2:	dd21      	ble.n	8011618 <__exponent+0x5e>
 80115d4:	f10d 0307 	add.w	r3, sp, #7
 80115d8:	461f      	mov	r7, r3
 80115da:	260a      	movs	r6, #10
 80115dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80115e0:	fb06 1115 	mls	r1, r6, r5, r1
 80115e4:	2d09      	cmp	r5, #9
 80115e6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80115ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80115ee:	f103 32ff 	add.w	r2, r3, #4294967295
 80115f2:	4629      	mov	r1, r5
 80115f4:	dc09      	bgt.n	801160a <__exponent+0x50>
 80115f6:	3130      	adds	r1, #48	; 0x30
 80115f8:	3b02      	subs	r3, #2
 80115fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80115fe:	42bb      	cmp	r3, r7
 8011600:	4622      	mov	r2, r4
 8011602:	d304      	bcc.n	801160e <__exponent+0x54>
 8011604:	1a10      	subs	r0, r2, r0
 8011606:	b003      	add	sp, #12
 8011608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801160a:	4613      	mov	r3, r2
 801160c:	e7e6      	b.n	80115dc <__exponent+0x22>
 801160e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011612:	f804 2b01 	strb.w	r2, [r4], #1
 8011616:	e7f2      	b.n	80115fe <__exponent+0x44>
 8011618:	2330      	movs	r3, #48	; 0x30
 801161a:	4419      	add	r1, r3
 801161c:	7083      	strb	r3, [r0, #2]
 801161e:	1d02      	adds	r2, r0, #4
 8011620:	70c1      	strb	r1, [r0, #3]
 8011622:	e7ef      	b.n	8011604 <__exponent+0x4a>

08011624 <_printf_float>:
 8011624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011628:	b091      	sub	sp, #68	; 0x44
 801162a:	460c      	mov	r4, r1
 801162c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801162e:	4693      	mov	fp, r2
 8011630:	461e      	mov	r6, r3
 8011632:	4605      	mov	r5, r0
 8011634:	f002 fd94 	bl	8014160 <_localeconv_r>
 8011638:	6803      	ldr	r3, [r0, #0]
 801163a:	4618      	mov	r0, r3
 801163c:	9309      	str	r3, [sp, #36]	; 0x24
 801163e:	f7ee fda1 	bl	8000184 <strlen>
 8011642:	2300      	movs	r3, #0
 8011644:	930e      	str	r3, [sp, #56]	; 0x38
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	900a      	str	r0, [sp, #40]	; 0x28
 801164a:	3307      	adds	r3, #7
 801164c:	f023 0307 	bic.w	r3, r3, #7
 8011650:	f103 0208 	add.w	r2, r3, #8
 8011654:	f894 8018 	ldrb.w	r8, [r4, #24]
 8011658:	f8d4 a000 	ldr.w	sl, [r4]
 801165c:	603a      	str	r2, [r7, #0]
 801165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011662:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011666:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 801166a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801166e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011670:	f04f 32ff 	mov.w	r2, #4294967295
 8011674:	4ba6      	ldr	r3, [pc, #664]	; (8011910 <_printf_float+0x2ec>)
 8011676:	4638      	mov	r0, r7
 8011678:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801167a:	f7ef f9e1 	bl	8000a40 <__aeabi_dcmpun>
 801167e:	bb68      	cbnz	r0, 80116dc <_printf_float+0xb8>
 8011680:	f04f 32ff 	mov.w	r2, #4294967295
 8011684:	4ba2      	ldr	r3, [pc, #648]	; (8011910 <_printf_float+0x2ec>)
 8011686:	4638      	mov	r0, r7
 8011688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801168a:	f7ef f9bb 	bl	8000a04 <__aeabi_dcmple>
 801168e:	bb28      	cbnz	r0, 80116dc <_printf_float+0xb8>
 8011690:	2200      	movs	r2, #0
 8011692:	2300      	movs	r3, #0
 8011694:	4638      	mov	r0, r7
 8011696:	4649      	mov	r1, r9
 8011698:	f7ef f9aa 	bl	80009f0 <__aeabi_dcmplt>
 801169c:	b110      	cbz	r0, 80116a4 <_printf_float+0x80>
 801169e:	232d      	movs	r3, #45	; 0x2d
 80116a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116a4:	4f9b      	ldr	r7, [pc, #620]	; (8011914 <_printf_float+0x2f0>)
 80116a6:	4b9c      	ldr	r3, [pc, #624]	; (8011918 <_printf_float+0x2f4>)
 80116a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80116ac:	bf98      	it	ls
 80116ae:	461f      	movls	r7, r3
 80116b0:	2303      	movs	r3, #3
 80116b2:	f04f 0900 	mov.w	r9, #0
 80116b6:	6123      	str	r3, [r4, #16]
 80116b8:	f02a 0304 	bic.w	r3, sl, #4
 80116bc:	6023      	str	r3, [r4, #0]
 80116be:	9600      	str	r6, [sp, #0]
 80116c0:	465b      	mov	r3, fp
 80116c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80116c4:	4621      	mov	r1, r4
 80116c6:	4628      	mov	r0, r5
 80116c8:	f000 f9e2 	bl	8011a90 <_printf_common>
 80116cc:	3001      	adds	r0, #1
 80116ce:	f040 8090 	bne.w	80117f2 <_printf_float+0x1ce>
 80116d2:	f04f 30ff 	mov.w	r0, #4294967295
 80116d6:	b011      	add	sp, #68	; 0x44
 80116d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116dc:	463a      	mov	r2, r7
 80116de:	464b      	mov	r3, r9
 80116e0:	4638      	mov	r0, r7
 80116e2:	4649      	mov	r1, r9
 80116e4:	f7ef f9ac 	bl	8000a40 <__aeabi_dcmpun>
 80116e8:	b110      	cbz	r0, 80116f0 <_printf_float+0xcc>
 80116ea:	4f8c      	ldr	r7, [pc, #560]	; (801191c <_printf_float+0x2f8>)
 80116ec:	4b8c      	ldr	r3, [pc, #560]	; (8011920 <_printf_float+0x2fc>)
 80116ee:	e7db      	b.n	80116a8 <_printf_float+0x84>
 80116f0:	6863      	ldr	r3, [r4, #4]
 80116f2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80116f6:	1c59      	adds	r1, r3, #1
 80116f8:	a80d      	add	r0, sp, #52	; 0x34
 80116fa:	a90e      	add	r1, sp, #56	; 0x38
 80116fc:	d140      	bne.n	8011780 <_printf_float+0x15c>
 80116fe:	2306      	movs	r3, #6
 8011700:	6063      	str	r3, [r4, #4]
 8011702:	f04f 0c00 	mov.w	ip, #0
 8011706:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 801170a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801170e:	6863      	ldr	r3, [r4, #4]
 8011710:	6022      	str	r2, [r4, #0]
 8011712:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	463a      	mov	r2, r7
 801171a:	464b      	mov	r3, r9
 801171c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8011720:	4628      	mov	r0, r5
 8011722:	f7ff feee 	bl	8011502 <__cvt>
 8011726:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 801172a:	2b47      	cmp	r3, #71	; 0x47
 801172c:	4607      	mov	r7, r0
 801172e:	d109      	bne.n	8011744 <_printf_float+0x120>
 8011730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011732:	1cd8      	adds	r0, r3, #3
 8011734:	db02      	blt.n	801173c <_printf_float+0x118>
 8011736:	6862      	ldr	r2, [r4, #4]
 8011738:	4293      	cmp	r3, r2
 801173a:	dd47      	ble.n	80117cc <_printf_float+0x1a8>
 801173c:	f1a8 0802 	sub.w	r8, r8, #2
 8011740:	fa5f f888 	uxtb.w	r8, r8
 8011744:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8011748:	990d      	ldr	r1, [sp, #52]	; 0x34
 801174a:	d824      	bhi.n	8011796 <_printf_float+0x172>
 801174c:	3901      	subs	r1, #1
 801174e:	4642      	mov	r2, r8
 8011750:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011754:	910d      	str	r1, [sp, #52]	; 0x34
 8011756:	f7ff ff30 	bl	80115ba <__exponent>
 801175a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801175c:	4681      	mov	r9, r0
 801175e:	1813      	adds	r3, r2, r0
 8011760:	2a01      	cmp	r2, #1
 8011762:	6123      	str	r3, [r4, #16]
 8011764:	dc02      	bgt.n	801176c <_printf_float+0x148>
 8011766:	6822      	ldr	r2, [r4, #0]
 8011768:	07d1      	lsls	r1, r2, #31
 801176a:	d501      	bpl.n	8011770 <_printf_float+0x14c>
 801176c:	3301      	adds	r3, #1
 801176e:	6123      	str	r3, [r4, #16]
 8011770:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011774:	2b00      	cmp	r3, #0
 8011776:	d0a2      	beq.n	80116be <_printf_float+0x9a>
 8011778:	232d      	movs	r3, #45	; 0x2d
 801177a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801177e:	e79e      	b.n	80116be <_printf_float+0x9a>
 8011780:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8011784:	f000 816e 	beq.w	8011a64 <_printf_float+0x440>
 8011788:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801178c:	d1b9      	bne.n	8011702 <_printf_float+0xde>
 801178e:	2b00      	cmp	r3, #0
 8011790:	d1b7      	bne.n	8011702 <_printf_float+0xde>
 8011792:	2301      	movs	r3, #1
 8011794:	e7b4      	b.n	8011700 <_printf_float+0xdc>
 8011796:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 801179a:	d119      	bne.n	80117d0 <_printf_float+0x1ac>
 801179c:	2900      	cmp	r1, #0
 801179e:	6863      	ldr	r3, [r4, #4]
 80117a0:	dd0c      	ble.n	80117bc <_printf_float+0x198>
 80117a2:	6121      	str	r1, [r4, #16]
 80117a4:	b913      	cbnz	r3, 80117ac <_printf_float+0x188>
 80117a6:	6822      	ldr	r2, [r4, #0]
 80117a8:	07d2      	lsls	r2, r2, #31
 80117aa:	d502      	bpl.n	80117b2 <_printf_float+0x18e>
 80117ac:	3301      	adds	r3, #1
 80117ae:	440b      	add	r3, r1
 80117b0:	6123      	str	r3, [r4, #16]
 80117b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117b4:	f04f 0900 	mov.w	r9, #0
 80117b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80117ba:	e7d9      	b.n	8011770 <_printf_float+0x14c>
 80117bc:	b913      	cbnz	r3, 80117c4 <_printf_float+0x1a0>
 80117be:	6822      	ldr	r2, [r4, #0]
 80117c0:	07d0      	lsls	r0, r2, #31
 80117c2:	d501      	bpl.n	80117c8 <_printf_float+0x1a4>
 80117c4:	3302      	adds	r3, #2
 80117c6:	e7f3      	b.n	80117b0 <_printf_float+0x18c>
 80117c8:	2301      	movs	r3, #1
 80117ca:	e7f1      	b.n	80117b0 <_printf_float+0x18c>
 80117cc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80117d0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80117d4:	4293      	cmp	r3, r2
 80117d6:	db05      	blt.n	80117e4 <_printf_float+0x1c0>
 80117d8:	6822      	ldr	r2, [r4, #0]
 80117da:	6123      	str	r3, [r4, #16]
 80117dc:	07d1      	lsls	r1, r2, #31
 80117de:	d5e8      	bpl.n	80117b2 <_printf_float+0x18e>
 80117e0:	3301      	adds	r3, #1
 80117e2:	e7e5      	b.n	80117b0 <_printf_float+0x18c>
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	bfcc      	ite	gt
 80117e8:	2301      	movgt	r3, #1
 80117ea:	f1c3 0302 	rsble	r3, r3, #2
 80117ee:	4413      	add	r3, r2
 80117f0:	e7de      	b.n	80117b0 <_printf_float+0x18c>
 80117f2:	6823      	ldr	r3, [r4, #0]
 80117f4:	055a      	lsls	r2, r3, #21
 80117f6:	d407      	bmi.n	8011808 <_printf_float+0x1e4>
 80117f8:	6923      	ldr	r3, [r4, #16]
 80117fa:	463a      	mov	r2, r7
 80117fc:	4659      	mov	r1, fp
 80117fe:	4628      	mov	r0, r5
 8011800:	47b0      	blx	r6
 8011802:	3001      	adds	r0, #1
 8011804:	d129      	bne.n	801185a <_printf_float+0x236>
 8011806:	e764      	b.n	80116d2 <_printf_float+0xae>
 8011808:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 801180c:	f240 80d7 	bls.w	80119be <_printf_float+0x39a>
 8011810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011814:	2200      	movs	r2, #0
 8011816:	2300      	movs	r3, #0
 8011818:	f7ef f8e0 	bl	80009dc <__aeabi_dcmpeq>
 801181c:	b388      	cbz	r0, 8011882 <_printf_float+0x25e>
 801181e:	2301      	movs	r3, #1
 8011820:	4a40      	ldr	r2, [pc, #256]	; (8011924 <_printf_float+0x300>)
 8011822:	4659      	mov	r1, fp
 8011824:	4628      	mov	r0, r5
 8011826:	47b0      	blx	r6
 8011828:	3001      	adds	r0, #1
 801182a:	f43f af52 	beq.w	80116d2 <_printf_float+0xae>
 801182e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011832:	429a      	cmp	r2, r3
 8011834:	db02      	blt.n	801183c <_printf_float+0x218>
 8011836:	6823      	ldr	r3, [r4, #0]
 8011838:	07d8      	lsls	r0, r3, #31
 801183a:	d50e      	bpl.n	801185a <_printf_float+0x236>
 801183c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011840:	4659      	mov	r1, fp
 8011842:	4628      	mov	r0, r5
 8011844:	47b0      	blx	r6
 8011846:	3001      	adds	r0, #1
 8011848:	f43f af43 	beq.w	80116d2 <_printf_float+0xae>
 801184c:	2700      	movs	r7, #0
 801184e:	f104 081a 	add.w	r8, r4, #26
 8011852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011854:	3b01      	subs	r3, #1
 8011856:	42bb      	cmp	r3, r7
 8011858:	dc09      	bgt.n	801186e <_printf_float+0x24a>
 801185a:	6823      	ldr	r3, [r4, #0]
 801185c:	079f      	lsls	r7, r3, #30
 801185e:	f100 80fd 	bmi.w	8011a5c <_printf_float+0x438>
 8011862:	68e0      	ldr	r0, [r4, #12]
 8011864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011866:	4298      	cmp	r0, r3
 8011868:	bfb8      	it	lt
 801186a:	4618      	movlt	r0, r3
 801186c:	e733      	b.n	80116d6 <_printf_float+0xb2>
 801186e:	2301      	movs	r3, #1
 8011870:	4642      	mov	r2, r8
 8011872:	4659      	mov	r1, fp
 8011874:	4628      	mov	r0, r5
 8011876:	47b0      	blx	r6
 8011878:	3001      	adds	r0, #1
 801187a:	f43f af2a 	beq.w	80116d2 <_printf_float+0xae>
 801187e:	3701      	adds	r7, #1
 8011880:	e7e7      	b.n	8011852 <_printf_float+0x22e>
 8011882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011884:	2b00      	cmp	r3, #0
 8011886:	dc2b      	bgt.n	80118e0 <_printf_float+0x2bc>
 8011888:	2301      	movs	r3, #1
 801188a:	4a26      	ldr	r2, [pc, #152]	; (8011924 <_printf_float+0x300>)
 801188c:	4659      	mov	r1, fp
 801188e:	4628      	mov	r0, r5
 8011890:	47b0      	blx	r6
 8011892:	3001      	adds	r0, #1
 8011894:	f43f af1d 	beq.w	80116d2 <_printf_float+0xae>
 8011898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801189a:	b923      	cbnz	r3, 80118a6 <_printf_float+0x282>
 801189c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801189e:	b913      	cbnz	r3, 80118a6 <_printf_float+0x282>
 80118a0:	6823      	ldr	r3, [r4, #0]
 80118a2:	07d9      	lsls	r1, r3, #31
 80118a4:	d5d9      	bpl.n	801185a <_printf_float+0x236>
 80118a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118aa:	4659      	mov	r1, fp
 80118ac:	4628      	mov	r0, r5
 80118ae:	47b0      	blx	r6
 80118b0:	3001      	adds	r0, #1
 80118b2:	f43f af0e 	beq.w	80116d2 <_printf_float+0xae>
 80118b6:	f04f 0800 	mov.w	r8, #0
 80118ba:	f104 091a 	add.w	r9, r4, #26
 80118be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118c0:	425b      	negs	r3, r3
 80118c2:	4543      	cmp	r3, r8
 80118c4:	dc01      	bgt.n	80118ca <_printf_float+0x2a6>
 80118c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118c8:	e797      	b.n	80117fa <_printf_float+0x1d6>
 80118ca:	2301      	movs	r3, #1
 80118cc:	464a      	mov	r2, r9
 80118ce:	4659      	mov	r1, fp
 80118d0:	4628      	mov	r0, r5
 80118d2:	47b0      	blx	r6
 80118d4:	3001      	adds	r0, #1
 80118d6:	f43f aefc 	beq.w	80116d2 <_printf_float+0xae>
 80118da:	f108 0801 	add.w	r8, r8, #1
 80118de:	e7ee      	b.n	80118be <_printf_float+0x29a>
 80118e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80118e4:	429a      	cmp	r2, r3
 80118e6:	bfa8      	it	ge
 80118e8:	461a      	movge	r2, r3
 80118ea:	2a00      	cmp	r2, #0
 80118ec:	4690      	mov	r8, r2
 80118ee:	dd07      	ble.n	8011900 <_printf_float+0x2dc>
 80118f0:	4613      	mov	r3, r2
 80118f2:	4659      	mov	r1, fp
 80118f4:	463a      	mov	r2, r7
 80118f6:	4628      	mov	r0, r5
 80118f8:	47b0      	blx	r6
 80118fa:	3001      	adds	r0, #1
 80118fc:	f43f aee9 	beq.w	80116d2 <_printf_float+0xae>
 8011900:	f104 031a 	add.w	r3, r4, #26
 8011904:	f04f 0a00 	mov.w	sl, #0
 8011908:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 801190c:	930b      	str	r3, [sp, #44]	; 0x2c
 801190e:	e015      	b.n	801193c <_printf_float+0x318>
 8011910:	7fefffff 	.word	0x7fefffff
 8011914:	0801a320 	.word	0x0801a320
 8011918:	0801a002 	.word	0x0801a002
 801191c:	0801a00a 	.word	0x0801a00a
 8011920:	0801a006 	.word	0x0801a006
 8011924:	0801a00e 	.word	0x0801a00e
 8011928:	2301      	movs	r3, #1
 801192a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801192c:	4659      	mov	r1, fp
 801192e:	4628      	mov	r0, r5
 8011930:	47b0      	blx	r6
 8011932:	3001      	adds	r0, #1
 8011934:	f43f aecd 	beq.w	80116d2 <_printf_float+0xae>
 8011938:	f10a 0a01 	add.w	sl, sl, #1
 801193c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011940:	eba9 0308 	sub.w	r3, r9, r8
 8011944:	4553      	cmp	r3, sl
 8011946:	dcef      	bgt.n	8011928 <_printf_float+0x304>
 8011948:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801194c:	429a      	cmp	r2, r3
 801194e:	444f      	add	r7, r9
 8011950:	db14      	blt.n	801197c <_printf_float+0x358>
 8011952:	6823      	ldr	r3, [r4, #0]
 8011954:	07da      	lsls	r2, r3, #31
 8011956:	d411      	bmi.n	801197c <_printf_float+0x358>
 8011958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801195a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801195c:	eba3 0209 	sub.w	r2, r3, r9
 8011960:	eba3 0901 	sub.w	r9, r3, r1
 8011964:	4591      	cmp	r9, r2
 8011966:	bfa8      	it	ge
 8011968:	4691      	movge	r9, r2
 801196a:	f1b9 0f00 	cmp.w	r9, #0
 801196e:	dc0d      	bgt.n	801198c <_printf_float+0x368>
 8011970:	2700      	movs	r7, #0
 8011972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011976:	f104 081a 	add.w	r8, r4, #26
 801197a:	e018      	b.n	80119ae <_printf_float+0x38a>
 801197c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011980:	4659      	mov	r1, fp
 8011982:	4628      	mov	r0, r5
 8011984:	47b0      	blx	r6
 8011986:	3001      	adds	r0, #1
 8011988:	d1e6      	bne.n	8011958 <_printf_float+0x334>
 801198a:	e6a2      	b.n	80116d2 <_printf_float+0xae>
 801198c:	464b      	mov	r3, r9
 801198e:	463a      	mov	r2, r7
 8011990:	4659      	mov	r1, fp
 8011992:	4628      	mov	r0, r5
 8011994:	47b0      	blx	r6
 8011996:	3001      	adds	r0, #1
 8011998:	d1ea      	bne.n	8011970 <_printf_float+0x34c>
 801199a:	e69a      	b.n	80116d2 <_printf_float+0xae>
 801199c:	2301      	movs	r3, #1
 801199e:	4642      	mov	r2, r8
 80119a0:	4659      	mov	r1, fp
 80119a2:	4628      	mov	r0, r5
 80119a4:	47b0      	blx	r6
 80119a6:	3001      	adds	r0, #1
 80119a8:	f43f ae93 	beq.w	80116d2 <_printf_float+0xae>
 80119ac:	3701      	adds	r7, #1
 80119ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80119b2:	1a9b      	subs	r3, r3, r2
 80119b4:	eba3 0309 	sub.w	r3, r3, r9
 80119b8:	42bb      	cmp	r3, r7
 80119ba:	dcef      	bgt.n	801199c <_printf_float+0x378>
 80119bc:	e74d      	b.n	801185a <_printf_float+0x236>
 80119be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119c0:	2a01      	cmp	r2, #1
 80119c2:	dc01      	bgt.n	80119c8 <_printf_float+0x3a4>
 80119c4:	07db      	lsls	r3, r3, #31
 80119c6:	d538      	bpl.n	8011a3a <_printf_float+0x416>
 80119c8:	2301      	movs	r3, #1
 80119ca:	463a      	mov	r2, r7
 80119cc:	4659      	mov	r1, fp
 80119ce:	4628      	mov	r0, r5
 80119d0:	47b0      	blx	r6
 80119d2:	3001      	adds	r0, #1
 80119d4:	f43f ae7d 	beq.w	80116d2 <_printf_float+0xae>
 80119d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119dc:	4659      	mov	r1, fp
 80119de:	4628      	mov	r0, r5
 80119e0:	47b0      	blx	r6
 80119e2:	3001      	adds	r0, #1
 80119e4:	f107 0701 	add.w	r7, r7, #1
 80119e8:	f43f ae73 	beq.w	80116d2 <_printf_float+0xae>
 80119ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119f2:	2200      	movs	r2, #0
 80119f4:	f103 38ff 	add.w	r8, r3, #4294967295
 80119f8:	2300      	movs	r3, #0
 80119fa:	f7ee ffef 	bl	80009dc <__aeabi_dcmpeq>
 80119fe:	b9c0      	cbnz	r0, 8011a32 <_printf_float+0x40e>
 8011a00:	4643      	mov	r3, r8
 8011a02:	463a      	mov	r2, r7
 8011a04:	4659      	mov	r1, fp
 8011a06:	4628      	mov	r0, r5
 8011a08:	47b0      	blx	r6
 8011a0a:	3001      	adds	r0, #1
 8011a0c:	d10d      	bne.n	8011a2a <_printf_float+0x406>
 8011a0e:	e660      	b.n	80116d2 <_printf_float+0xae>
 8011a10:	2301      	movs	r3, #1
 8011a12:	4642      	mov	r2, r8
 8011a14:	4659      	mov	r1, fp
 8011a16:	4628      	mov	r0, r5
 8011a18:	47b0      	blx	r6
 8011a1a:	3001      	adds	r0, #1
 8011a1c:	f43f ae59 	beq.w	80116d2 <_printf_float+0xae>
 8011a20:	3701      	adds	r7, #1
 8011a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a24:	3b01      	subs	r3, #1
 8011a26:	42bb      	cmp	r3, r7
 8011a28:	dcf2      	bgt.n	8011a10 <_printf_float+0x3ec>
 8011a2a:	464b      	mov	r3, r9
 8011a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011a30:	e6e4      	b.n	80117fc <_printf_float+0x1d8>
 8011a32:	2700      	movs	r7, #0
 8011a34:	f104 081a 	add.w	r8, r4, #26
 8011a38:	e7f3      	b.n	8011a22 <_printf_float+0x3fe>
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	e7e1      	b.n	8011a02 <_printf_float+0x3de>
 8011a3e:	2301      	movs	r3, #1
 8011a40:	4642      	mov	r2, r8
 8011a42:	4659      	mov	r1, fp
 8011a44:	4628      	mov	r0, r5
 8011a46:	47b0      	blx	r6
 8011a48:	3001      	adds	r0, #1
 8011a4a:	f43f ae42 	beq.w	80116d2 <_printf_float+0xae>
 8011a4e:	3701      	adds	r7, #1
 8011a50:	68e3      	ldr	r3, [r4, #12]
 8011a52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a54:	1a9b      	subs	r3, r3, r2
 8011a56:	42bb      	cmp	r3, r7
 8011a58:	dcf1      	bgt.n	8011a3e <_printf_float+0x41a>
 8011a5a:	e702      	b.n	8011862 <_printf_float+0x23e>
 8011a5c:	2700      	movs	r7, #0
 8011a5e:	f104 0819 	add.w	r8, r4, #25
 8011a62:	e7f5      	b.n	8011a50 <_printf_float+0x42c>
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	f43f ae94 	beq.w	8011792 <_printf_float+0x16e>
 8011a6a:	f04f 0c00 	mov.w	ip, #0
 8011a6e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8011a72:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8011a76:	6022      	str	r2, [r4, #0]
 8011a78:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8011a7c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011a80:	9300      	str	r3, [sp, #0]
 8011a82:	463a      	mov	r2, r7
 8011a84:	464b      	mov	r3, r9
 8011a86:	4628      	mov	r0, r5
 8011a88:	f7ff fd3b 	bl	8011502 <__cvt>
 8011a8c:	4607      	mov	r7, r0
 8011a8e:	e64f      	b.n	8011730 <_printf_float+0x10c>

08011a90 <_printf_common>:
 8011a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a94:	4691      	mov	r9, r2
 8011a96:	461f      	mov	r7, r3
 8011a98:	688a      	ldr	r2, [r1, #8]
 8011a9a:	690b      	ldr	r3, [r1, #16]
 8011a9c:	4606      	mov	r6, r0
 8011a9e:	4293      	cmp	r3, r2
 8011aa0:	bfb8      	it	lt
 8011aa2:	4613      	movlt	r3, r2
 8011aa4:	f8c9 3000 	str.w	r3, [r9]
 8011aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011aac:	460c      	mov	r4, r1
 8011aae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ab2:	b112      	cbz	r2, 8011aba <_printf_common+0x2a>
 8011ab4:	3301      	adds	r3, #1
 8011ab6:	f8c9 3000 	str.w	r3, [r9]
 8011aba:	6823      	ldr	r3, [r4, #0]
 8011abc:	0699      	lsls	r1, r3, #26
 8011abe:	bf42      	ittt	mi
 8011ac0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011ac4:	3302      	addmi	r3, #2
 8011ac6:	f8c9 3000 	strmi.w	r3, [r9]
 8011aca:	6825      	ldr	r5, [r4, #0]
 8011acc:	f015 0506 	ands.w	r5, r5, #6
 8011ad0:	d107      	bne.n	8011ae2 <_printf_common+0x52>
 8011ad2:	f104 0a19 	add.w	sl, r4, #25
 8011ad6:	68e3      	ldr	r3, [r4, #12]
 8011ad8:	f8d9 2000 	ldr.w	r2, [r9]
 8011adc:	1a9b      	subs	r3, r3, r2
 8011ade:	42ab      	cmp	r3, r5
 8011ae0:	dc29      	bgt.n	8011b36 <_printf_common+0xa6>
 8011ae2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011ae6:	6822      	ldr	r2, [r4, #0]
 8011ae8:	3300      	adds	r3, #0
 8011aea:	bf18      	it	ne
 8011aec:	2301      	movne	r3, #1
 8011aee:	0692      	lsls	r2, r2, #26
 8011af0:	d42e      	bmi.n	8011b50 <_printf_common+0xc0>
 8011af2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011af6:	4639      	mov	r1, r7
 8011af8:	4630      	mov	r0, r6
 8011afa:	47c0      	blx	r8
 8011afc:	3001      	adds	r0, #1
 8011afe:	d021      	beq.n	8011b44 <_printf_common+0xb4>
 8011b00:	6823      	ldr	r3, [r4, #0]
 8011b02:	68e5      	ldr	r5, [r4, #12]
 8011b04:	f003 0306 	and.w	r3, r3, #6
 8011b08:	2b04      	cmp	r3, #4
 8011b0a:	bf18      	it	ne
 8011b0c:	2500      	movne	r5, #0
 8011b0e:	f8d9 2000 	ldr.w	r2, [r9]
 8011b12:	f04f 0900 	mov.w	r9, #0
 8011b16:	bf08      	it	eq
 8011b18:	1aad      	subeq	r5, r5, r2
 8011b1a:	68a3      	ldr	r3, [r4, #8]
 8011b1c:	6922      	ldr	r2, [r4, #16]
 8011b1e:	bf08      	it	eq
 8011b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b24:	4293      	cmp	r3, r2
 8011b26:	bfc4      	itt	gt
 8011b28:	1a9b      	subgt	r3, r3, r2
 8011b2a:	18ed      	addgt	r5, r5, r3
 8011b2c:	341a      	adds	r4, #26
 8011b2e:	454d      	cmp	r5, r9
 8011b30:	d11a      	bne.n	8011b68 <_printf_common+0xd8>
 8011b32:	2000      	movs	r0, #0
 8011b34:	e008      	b.n	8011b48 <_printf_common+0xb8>
 8011b36:	2301      	movs	r3, #1
 8011b38:	4652      	mov	r2, sl
 8011b3a:	4639      	mov	r1, r7
 8011b3c:	4630      	mov	r0, r6
 8011b3e:	47c0      	blx	r8
 8011b40:	3001      	adds	r0, #1
 8011b42:	d103      	bne.n	8011b4c <_printf_common+0xbc>
 8011b44:	f04f 30ff 	mov.w	r0, #4294967295
 8011b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b4c:	3501      	adds	r5, #1
 8011b4e:	e7c2      	b.n	8011ad6 <_printf_common+0x46>
 8011b50:	2030      	movs	r0, #48	; 0x30
 8011b52:	18e1      	adds	r1, r4, r3
 8011b54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b58:	1c5a      	adds	r2, r3, #1
 8011b5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b5e:	4422      	add	r2, r4
 8011b60:	3302      	adds	r3, #2
 8011b62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b66:	e7c4      	b.n	8011af2 <_printf_common+0x62>
 8011b68:	2301      	movs	r3, #1
 8011b6a:	4622      	mov	r2, r4
 8011b6c:	4639      	mov	r1, r7
 8011b6e:	4630      	mov	r0, r6
 8011b70:	47c0      	blx	r8
 8011b72:	3001      	adds	r0, #1
 8011b74:	d0e6      	beq.n	8011b44 <_printf_common+0xb4>
 8011b76:	f109 0901 	add.w	r9, r9, #1
 8011b7a:	e7d8      	b.n	8011b2e <_printf_common+0x9e>

08011b7c <_printf_i>:
 8011b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011b84:	460c      	mov	r4, r1
 8011b86:	7e09      	ldrb	r1, [r1, #24]
 8011b88:	b085      	sub	sp, #20
 8011b8a:	296e      	cmp	r1, #110	; 0x6e
 8011b8c:	4617      	mov	r7, r2
 8011b8e:	4606      	mov	r6, r0
 8011b90:	4698      	mov	r8, r3
 8011b92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b94:	f000 80b3 	beq.w	8011cfe <_printf_i+0x182>
 8011b98:	d822      	bhi.n	8011be0 <_printf_i+0x64>
 8011b9a:	2963      	cmp	r1, #99	; 0x63
 8011b9c:	d036      	beq.n	8011c0c <_printf_i+0x90>
 8011b9e:	d80a      	bhi.n	8011bb6 <_printf_i+0x3a>
 8011ba0:	2900      	cmp	r1, #0
 8011ba2:	f000 80b9 	beq.w	8011d18 <_printf_i+0x19c>
 8011ba6:	2958      	cmp	r1, #88	; 0x58
 8011ba8:	f000 8083 	beq.w	8011cb2 <_printf_i+0x136>
 8011bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011bb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011bb4:	e032      	b.n	8011c1c <_printf_i+0xa0>
 8011bb6:	2964      	cmp	r1, #100	; 0x64
 8011bb8:	d001      	beq.n	8011bbe <_printf_i+0x42>
 8011bba:	2969      	cmp	r1, #105	; 0x69
 8011bbc:	d1f6      	bne.n	8011bac <_printf_i+0x30>
 8011bbe:	6820      	ldr	r0, [r4, #0]
 8011bc0:	6813      	ldr	r3, [r2, #0]
 8011bc2:	0605      	lsls	r5, r0, #24
 8011bc4:	f103 0104 	add.w	r1, r3, #4
 8011bc8:	d52a      	bpl.n	8011c20 <_printf_i+0xa4>
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	6011      	str	r1, [r2, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	da03      	bge.n	8011bda <_printf_i+0x5e>
 8011bd2:	222d      	movs	r2, #45	; 0x2d
 8011bd4:	425b      	negs	r3, r3
 8011bd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011bda:	486f      	ldr	r0, [pc, #444]	; (8011d98 <_printf_i+0x21c>)
 8011bdc:	220a      	movs	r2, #10
 8011bde:	e039      	b.n	8011c54 <_printf_i+0xd8>
 8011be0:	2973      	cmp	r1, #115	; 0x73
 8011be2:	f000 809d 	beq.w	8011d20 <_printf_i+0x1a4>
 8011be6:	d808      	bhi.n	8011bfa <_printf_i+0x7e>
 8011be8:	296f      	cmp	r1, #111	; 0x6f
 8011bea:	d020      	beq.n	8011c2e <_printf_i+0xb2>
 8011bec:	2970      	cmp	r1, #112	; 0x70
 8011bee:	d1dd      	bne.n	8011bac <_printf_i+0x30>
 8011bf0:	6823      	ldr	r3, [r4, #0]
 8011bf2:	f043 0320 	orr.w	r3, r3, #32
 8011bf6:	6023      	str	r3, [r4, #0]
 8011bf8:	e003      	b.n	8011c02 <_printf_i+0x86>
 8011bfa:	2975      	cmp	r1, #117	; 0x75
 8011bfc:	d017      	beq.n	8011c2e <_printf_i+0xb2>
 8011bfe:	2978      	cmp	r1, #120	; 0x78
 8011c00:	d1d4      	bne.n	8011bac <_printf_i+0x30>
 8011c02:	2378      	movs	r3, #120	; 0x78
 8011c04:	4865      	ldr	r0, [pc, #404]	; (8011d9c <_printf_i+0x220>)
 8011c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c0a:	e055      	b.n	8011cb8 <_printf_i+0x13c>
 8011c0c:	6813      	ldr	r3, [r2, #0]
 8011c0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c12:	1d19      	adds	r1, r3, #4
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	6011      	str	r1, [r2, #0]
 8011c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	e08c      	b.n	8011d3a <_printf_i+0x1be>
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c26:	6011      	str	r1, [r2, #0]
 8011c28:	bf18      	it	ne
 8011c2a:	b21b      	sxthne	r3, r3
 8011c2c:	e7cf      	b.n	8011bce <_printf_i+0x52>
 8011c2e:	6813      	ldr	r3, [r2, #0]
 8011c30:	6825      	ldr	r5, [r4, #0]
 8011c32:	1d18      	adds	r0, r3, #4
 8011c34:	6010      	str	r0, [r2, #0]
 8011c36:	0628      	lsls	r0, r5, #24
 8011c38:	d501      	bpl.n	8011c3e <_printf_i+0xc2>
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	e002      	b.n	8011c44 <_printf_i+0xc8>
 8011c3e:	0668      	lsls	r0, r5, #25
 8011c40:	d5fb      	bpl.n	8011c3a <_printf_i+0xbe>
 8011c42:	881b      	ldrh	r3, [r3, #0]
 8011c44:	296f      	cmp	r1, #111	; 0x6f
 8011c46:	bf14      	ite	ne
 8011c48:	220a      	movne	r2, #10
 8011c4a:	2208      	moveq	r2, #8
 8011c4c:	4852      	ldr	r0, [pc, #328]	; (8011d98 <_printf_i+0x21c>)
 8011c4e:	2100      	movs	r1, #0
 8011c50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c54:	6865      	ldr	r5, [r4, #4]
 8011c56:	2d00      	cmp	r5, #0
 8011c58:	60a5      	str	r5, [r4, #8]
 8011c5a:	f2c0 8095 	blt.w	8011d88 <_printf_i+0x20c>
 8011c5e:	6821      	ldr	r1, [r4, #0]
 8011c60:	f021 0104 	bic.w	r1, r1, #4
 8011c64:	6021      	str	r1, [r4, #0]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d13d      	bne.n	8011ce6 <_printf_i+0x16a>
 8011c6a:	2d00      	cmp	r5, #0
 8011c6c:	f040 808e 	bne.w	8011d8c <_printf_i+0x210>
 8011c70:	4665      	mov	r5, ip
 8011c72:	2a08      	cmp	r2, #8
 8011c74:	d10b      	bne.n	8011c8e <_printf_i+0x112>
 8011c76:	6823      	ldr	r3, [r4, #0]
 8011c78:	07db      	lsls	r3, r3, #31
 8011c7a:	d508      	bpl.n	8011c8e <_printf_i+0x112>
 8011c7c:	6923      	ldr	r3, [r4, #16]
 8011c7e:	6862      	ldr	r2, [r4, #4]
 8011c80:	429a      	cmp	r2, r3
 8011c82:	bfde      	ittt	le
 8011c84:	2330      	movle	r3, #48	; 0x30
 8011c86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011c8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011c8e:	ebac 0305 	sub.w	r3, ip, r5
 8011c92:	6123      	str	r3, [r4, #16]
 8011c94:	f8cd 8000 	str.w	r8, [sp]
 8011c98:	463b      	mov	r3, r7
 8011c9a:	aa03      	add	r2, sp, #12
 8011c9c:	4621      	mov	r1, r4
 8011c9e:	4630      	mov	r0, r6
 8011ca0:	f7ff fef6 	bl	8011a90 <_printf_common>
 8011ca4:	3001      	adds	r0, #1
 8011ca6:	d14d      	bne.n	8011d44 <_printf_i+0x1c8>
 8011ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cac:	b005      	add	sp, #20
 8011cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cb2:	4839      	ldr	r0, [pc, #228]	; (8011d98 <_printf_i+0x21c>)
 8011cb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011cb8:	6813      	ldr	r3, [r2, #0]
 8011cba:	6821      	ldr	r1, [r4, #0]
 8011cbc:	1d1d      	adds	r5, r3, #4
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	6015      	str	r5, [r2, #0]
 8011cc2:	060a      	lsls	r2, r1, #24
 8011cc4:	d50b      	bpl.n	8011cde <_printf_i+0x162>
 8011cc6:	07ca      	lsls	r2, r1, #31
 8011cc8:	bf44      	itt	mi
 8011cca:	f041 0120 	orrmi.w	r1, r1, #32
 8011cce:	6021      	strmi	r1, [r4, #0]
 8011cd0:	b91b      	cbnz	r3, 8011cda <_printf_i+0x15e>
 8011cd2:	6822      	ldr	r2, [r4, #0]
 8011cd4:	f022 0220 	bic.w	r2, r2, #32
 8011cd8:	6022      	str	r2, [r4, #0]
 8011cda:	2210      	movs	r2, #16
 8011cdc:	e7b7      	b.n	8011c4e <_printf_i+0xd2>
 8011cde:	064d      	lsls	r5, r1, #25
 8011ce0:	bf48      	it	mi
 8011ce2:	b29b      	uxthmi	r3, r3
 8011ce4:	e7ef      	b.n	8011cc6 <_printf_i+0x14a>
 8011ce6:	4665      	mov	r5, ip
 8011ce8:	fbb3 f1f2 	udiv	r1, r3, r2
 8011cec:	fb02 3311 	mls	r3, r2, r1, r3
 8011cf0:	5cc3      	ldrb	r3, [r0, r3]
 8011cf2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011cf6:	460b      	mov	r3, r1
 8011cf8:	2900      	cmp	r1, #0
 8011cfa:	d1f5      	bne.n	8011ce8 <_printf_i+0x16c>
 8011cfc:	e7b9      	b.n	8011c72 <_printf_i+0xf6>
 8011cfe:	6813      	ldr	r3, [r2, #0]
 8011d00:	6825      	ldr	r5, [r4, #0]
 8011d02:	1d18      	adds	r0, r3, #4
 8011d04:	6961      	ldr	r1, [r4, #20]
 8011d06:	6010      	str	r0, [r2, #0]
 8011d08:	0628      	lsls	r0, r5, #24
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	d501      	bpl.n	8011d12 <_printf_i+0x196>
 8011d0e:	6019      	str	r1, [r3, #0]
 8011d10:	e002      	b.n	8011d18 <_printf_i+0x19c>
 8011d12:	066a      	lsls	r2, r5, #25
 8011d14:	d5fb      	bpl.n	8011d0e <_printf_i+0x192>
 8011d16:	8019      	strh	r1, [r3, #0]
 8011d18:	2300      	movs	r3, #0
 8011d1a:	4665      	mov	r5, ip
 8011d1c:	6123      	str	r3, [r4, #16]
 8011d1e:	e7b9      	b.n	8011c94 <_printf_i+0x118>
 8011d20:	6813      	ldr	r3, [r2, #0]
 8011d22:	1d19      	adds	r1, r3, #4
 8011d24:	6011      	str	r1, [r2, #0]
 8011d26:	681d      	ldr	r5, [r3, #0]
 8011d28:	6862      	ldr	r2, [r4, #4]
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	f002 fa2d 	bl	801418c <memchr>
 8011d32:	b108      	cbz	r0, 8011d38 <_printf_i+0x1bc>
 8011d34:	1b40      	subs	r0, r0, r5
 8011d36:	6060      	str	r0, [r4, #4]
 8011d38:	6863      	ldr	r3, [r4, #4]
 8011d3a:	6123      	str	r3, [r4, #16]
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d42:	e7a7      	b.n	8011c94 <_printf_i+0x118>
 8011d44:	6923      	ldr	r3, [r4, #16]
 8011d46:	462a      	mov	r2, r5
 8011d48:	4639      	mov	r1, r7
 8011d4a:	4630      	mov	r0, r6
 8011d4c:	47c0      	blx	r8
 8011d4e:	3001      	adds	r0, #1
 8011d50:	d0aa      	beq.n	8011ca8 <_printf_i+0x12c>
 8011d52:	6823      	ldr	r3, [r4, #0]
 8011d54:	079b      	lsls	r3, r3, #30
 8011d56:	d413      	bmi.n	8011d80 <_printf_i+0x204>
 8011d58:	68e0      	ldr	r0, [r4, #12]
 8011d5a:	9b03      	ldr	r3, [sp, #12]
 8011d5c:	4298      	cmp	r0, r3
 8011d5e:	bfb8      	it	lt
 8011d60:	4618      	movlt	r0, r3
 8011d62:	e7a3      	b.n	8011cac <_printf_i+0x130>
 8011d64:	2301      	movs	r3, #1
 8011d66:	464a      	mov	r2, r9
 8011d68:	4639      	mov	r1, r7
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	47c0      	blx	r8
 8011d6e:	3001      	adds	r0, #1
 8011d70:	d09a      	beq.n	8011ca8 <_printf_i+0x12c>
 8011d72:	3501      	adds	r5, #1
 8011d74:	68e3      	ldr	r3, [r4, #12]
 8011d76:	9a03      	ldr	r2, [sp, #12]
 8011d78:	1a9b      	subs	r3, r3, r2
 8011d7a:	42ab      	cmp	r3, r5
 8011d7c:	dcf2      	bgt.n	8011d64 <_printf_i+0x1e8>
 8011d7e:	e7eb      	b.n	8011d58 <_printf_i+0x1dc>
 8011d80:	2500      	movs	r5, #0
 8011d82:	f104 0919 	add.w	r9, r4, #25
 8011d86:	e7f5      	b.n	8011d74 <_printf_i+0x1f8>
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d1ac      	bne.n	8011ce6 <_printf_i+0x16a>
 8011d8c:	7803      	ldrb	r3, [r0, #0]
 8011d8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d96:	e76c      	b.n	8011c72 <_printf_i+0xf6>
 8011d98:	0801a010 	.word	0x0801a010
 8011d9c:	0801a021 	.word	0x0801a021

08011da0 <iprintf>:
 8011da0:	b40f      	push	{r0, r1, r2, r3}
 8011da2:	4b0a      	ldr	r3, [pc, #40]	; (8011dcc <iprintf+0x2c>)
 8011da4:	b513      	push	{r0, r1, r4, lr}
 8011da6:	681c      	ldr	r4, [r3, #0]
 8011da8:	b124      	cbz	r4, 8011db4 <iprintf+0x14>
 8011daa:	69a3      	ldr	r3, [r4, #24]
 8011dac:	b913      	cbnz	r3, 8011db4 <iprintf+0x14>
 8011dae:	4620      	mov	r0, r4
 8011db0:	f001 fe22 	bl	80139f8 <__sinit>
 8011db4:	ab05      	add	r3, sp, #20
 8011db6:	9a04      	ldr	r2, [sp, #16]
 8011db8:	68a1      	ldr	r1, [r4, #8]
 8011dba:	4620      	mov	r0, r4
 8011dbc:	9301      	str	r3, [sp, #4]
 8011dbe:	f003 f819 	bl	8014df4 <_vfiprintf_r>
 8011dc2:	b002      	add	sp, #8
 8011dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dc8:	b004      	add	sp, #16
 8011dca:	4770      	bx	lr
 8011dcc:	20000060 	.word	0x20000060

08011dd0 <strcpy>:
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011dd6:	f803 2b01 	strb.w	r2, [r3], #1
 8011dda:	2a00      	cmp	r2, #0
 8011ddc:	d1f9      	bne.n	8011dd2 <strcpy+0x2>
 8011dde:	4770      	bx	lr

08011de0 <sulp>:
 8011de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de4:	460f      	mov	r7, r1
 8011de6:	4690      	mov	r8, r2
 8011de8:	f002 fca8 	bl	801473c <__ulp>
 8011dec:	4604      	mov	r4, r0
 8011dee:	460d      	mov	r5, r1
 8011df0:	f1b8 0f00 	cmp.w	r8, #0
 8011df4:	d011      	beq.n	8011e1a <sulp+0x3a>
 8011df6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8011dfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	dd0b      	ble.n	8011e1a <sulp+0x3a>
 8011e02:	2400      	movs	r4, #0
 8011e04:	051b      	lsls	r3, r3, #20
 8011e06:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011e0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011e0e:	4622      	mov	r2, r4
 8011e10:	462b      	mov	r3, r5
 8011e12:	f7ee fb7b 	bl	800050c <__aeabi_dmul>
 8011e16:	4604      	mov	r4, r0
 8011e18:	460d      	mov	r5, r1
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	4629      	mov	r1, r5
 8011e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e22:	0000      	movs	r0, r0
 8011e24:	0000      	movs	r0, r0
	...

08011e28 <_strtod_l>:
 8011e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e2c:	461f      	mov	r7, r3
 8011e2e:	2300      	movs	r3, #0
 8011e30:	b0a1      	sub	sp, #132	; 0x84
 8011e32:	4683      	mov	fp, r0
 8011e34:	4638      	mov	r0, r7
 8011e36:	460e      	mov	r6, r1
 8011e38:	9217      	str	r2, [sp, #92]	; 0x5c
 8011e3a:	931c      	str	r3, [sp, #112]	; 0x70
 8011e3c:	f002 f98e 	bl	801415c <__localeconv_l>
 8011e40:	4680      	mov	r8, r0
 8011e42:	6800      	ldr	r0, [r0, #0]
 8011e44:	f7ee f99e 	bl	8000184 <strlen>
 8011e48:	f04f 0900 	mov.w	r9, #0
 8011e4c:	4604      	mov	r4, r0
 8011e4e:	f04f 0a00 	mov.w	sl, #0
 8011e52:	961b      	str	r6, [sp, #108]	; 0x6c
 8011e54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011e56:	781a      	ldrb	r2, [r3, #0]
 8011e58:	2a0d      	cmp	r2, #13
 8011e5a:	d832      	bhi.n	8011ec2 <_strtod_l+0x9a>
 8011e5c:	2a09      	cmp	r2, #9
 8011e5e:	d236      	bcs.n	8011ece <_strtod_l+0xa6>
 8011e60:	2a00      	cmp	r2, #0
 8011e62:	d03e      	beq.n	8011ee2 <_strtod_l+0xba>
 8011e64:	2300      	movs	r3, #0
 8011e66:	930d      	str	r3, [sp, #52]	; 0x34
 8011e68:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011e6a:	782b      	ldrb	r3, [r5, #0]
 8011e6c:	2b30      	cmp	r3, #48	; 0x30
 8011e6e:	f040 80ac 	bne.w	8011fca <_strtod_l+0x1a2>
 8011e72:	786b      	ldrb	r3, [r5, #1]
 8011e74:	2b58      	cmp	r3, #88	; 0x58
 8011e76:	d001      	beq.n	8011e7c <_strtod_l+0x54>
 8011e78:	2b78      	cmp	r3, #120	; 0x78
 8011e7a:	d167      	bne.n	8011f4c <_strtod_l+0x124>
 8011e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e7e:	9702      	str	r7, [sp, #8]
 8011e80:	9301      	str	r3, [sp, #4]
 8011e82:	ab1c      	add	r3, sp, #112	; 0x70
 8011e84:	9300      	str	r3, [sp, #0]
 8011e86:	4a89      	ldr	r2, [pc, #548]	; (80120ac <_strtod_l+0x284>)
 8011e88:	ab1d      	add	r3, sp, #116	; 0x74
 8011e8a:	a91b      	add	r1, sp, #108	; 0x6c
 8011e8c:	4658      	mov	r0, fp
 8011e8e:	f001 fe8d 	bl	8013bac <__gethex>
 8011e92:	f010 0407 	ands.w	r4, r0, #7
 8011e96:	4606      	mov	r6, r0
 8011e98:	d005      	beq.n	8011ea6 <_strtod_l+0x7e>
 8011e9a:	2c06      	cmp	r4, #6
 8011e9c:	d12b      	bne.n	8011ef6 <_strtod_l+0xce>
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	3501      	adds	r5, #1
 8011ea2:	951b      	str	r5, [sp, #108]	; 0x6c
 8011ea4:	930d      	str	r3, [sp, #52]	; 0x34
 8011ea6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	f040 85a6 	bne.w	80129fa <_strtod_l+0xbd2>
 8011eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011eb0:	b1e3      	cbz	r3, 8011eec <_strtod_l+0xc4>
 8011eb2:	464a      	mov	r2, r9
 8011eb4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8011eb8:	4610      	mov	r0, r2
 8011eba:	4619      	mov	r1, r3
 8011ebc:	b021      	add	sp, #132	; 0x84
 8011ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec2:	2a2b      	cmp	r2, #43	; 0x2b
 8011ec4:	d015      	beq.n	8011ef2 <_strtod_l+0xca>
 8011ec6:	2a2d      	cmp	r2, #45	; 0x2d
 8011ec8:	d004      	beq.n	8011ed4 <_strtod_l+0xac>
 8011eca:	2a20      	cmp	r2, #32
 8011ecc:	d1ca      	bne.n	8011e64 <_strtod_l+0x3c>
 8011ece:	3301      	adds	r3, #1
 8011ed0:	931b      	str	r3, [sp, #108]	; 0x6c
 8011ed2:	e7bf      	b.n	8011e54 <_strtod_l+0x2c>
 8011ed4:	2201      	movs	r2, #1
 8011ed6:	920d      	str	r2, [sp, #52]	; 0x34
 8011ed8:	1c5a      	adds	r2, r3, #1
 8011eda:	921b      	str	r2, [sp, #108]	; 0x6c
 8011edc:	785b      	ldrb	r3, [r3, #1]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d1c2      	bne.n	8011e68 <_strtod_l+0x40>
 8011ee2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ee4:	961b      	str	r6, [sp, #108]	; 0x6c
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	f040 8585 	bne.w	80129f6 <_strtod_l+0xbce>
 8011eec:	464a      	mov	r2, r9
 8011eee:	4653      	mov	r3, sl
 8011ef0:	e7e2      	b.n	8011eb8 <_strtod_l+0x90>
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	e7ef      	b.n	8011ed6 <_strtod_l+0xae>
 8011ef6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011ef8:	b13a      	cbz	r2, 8011f0a <_strtod_l+0xe2>
 8011efa:	2135      	movs	r1, #53	; 0x35
 8011efc:	a81e      	add	r0, sp, #120	; 0x78
 8011efe:	f002 fd10 	bl	8014922 <__copybits>
 8011f02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011f04:	4658      	mov	r0, fp
 8011f06:	f002 f983 	bl	8014210 <_Bfree>
 8011f0a:	3c01      	subs	r4, #1
 8011f0c:	2c04      	cmp	r4, #4
 8011f0e:	d806      	bhi.n	8011f1e <_strtod_l+0xf6>
 8011f10:	e8df f004 	tbb	[pc, r4]
 8011f14:	1714030a 	.word	0x1714030a
 8011f18:	0a          	.byte	0x0a
 8011f19:	00          	.byte	0x00
 8011f1a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8011f1e:	0731      	lsls	r1, r6, #28
 8011f20:	d5c1      	bpl.n	8011ea6 <_strtod_l+0x7e>
 8011f22:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8011f26:	e7be      	b.n	8011ea6 <_strtod_l+0x7e>
 8011f28:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011f2a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8011f2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011f32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011f36:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8011f3a:	e7f0      	b.n	8011f1e <_strtod_l+0xf6>
 8011f3c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80120b0 <_strtod_l+0x288>
 8011f40:	e7ed      	b.n	8011f1e <_strtod_l+0xf6>
 8011f42:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8011f46:	f04f 39ff 	mov.w	r9, #4294967295
 8011f4a:	e7e8      	b.n	8011f1e <_strtod_l+0xf6>
 8011f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f4e:	1c5a      	adds	r2, r3, #1
 8011f50:	921b      	str	r2, [sp, #108]	; 0x6c
 8011f52:	785b      	ldrb	r3, [r3, #1]
 8011f54:	2b30      	cmp	r3, #48	; 0x30
 8011f56:	d0f9      	beq.n	8011f4c <_strtod_l+0x124>
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d0a4      	beq.n	8011ea6 <_strtod_l+0x7e>
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	2500      	movs	r5, #0
 8011f60:	220a      	movs	r2, #10
 8011f62:	9307      	str	r3, [sp, #28]
 8011f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f66:	9506      	str	r5, [sp, #24]
 8011f68:	9308      	str	r3, [sp, #32]
 8011f6a:	9504      	str	r5, [sp, #16]
 8011f6c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011f6e:	7807      	ldrb	r7, [r0, #0]
 8011f70:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011f74:	b2d9      	uxtb	r1, r3
 8011f76:	2909      	cmp	r1, #9
 8011f78:	d929      	bls.n	8011fce <_strtod_l+0x1a6>
 8011f7a:	4622      	mov	r2, r4
 8011f7c:	f8d8 1000 	ldr.w	r1, [r8]
 8011f80:	f003 f8a5 	bl	80150ce <strncmp>
 8011f84:	2800      	cmp	r0, #0
 8011f86:	d031      	beq.n	8011fec <_strtod_l+0x1c4>
 8011f88:	2000      	movs	r0, #0
 8011f8a:	463b      	mov	r3, r7
 8011f8c:	4602      	mov	r2, r0
 8011f8e:	9c04      	ldr	r4, [sp, #16]
 8011f90:	9005      	str	r0, [sp, #20]
 8011f92:	2b65      	cmp	r3, #101	; 0x65
 8011f94:	d001      	beq.n	8011f9a <_strtod_l+0x172>
 8011f96:	2b45      	cmp	r3, #69	; 0x45
 8011f98:	d114      	bne.n	8011fc4 <_strtod_l+0x19c>
 8011f9a:	b924      	cbnz	r4, 8011fa6 <_strtod_l+0x17e>
 8011f9c:	b910      	cbnz	r0, 8011fa4 <_strtod_l+0x17c>
 8011f9e:	9b07      	ldr	r3, [sp, #28]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d09e      	beq.n	8011ee2 <_strtod_l+0xba>
 8011fa4:	2400      	movs	r4, #0
 8011fa6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011fa8:	1c73      	adds	r3, r6, #1
 8011faa:	931b      	str	r3, [sp, #108]	; 0x6c
 8011fac:	7873      	ldrb	r3, [r6, #1]
 8011fae:	2b2b      	cmp	r3, #43	; 0x2b
 8011fb0:	d078      	beq.n	80120a4 <_strtod_l+0x27c>
 8011fb2:	2b2d      	cmp	r3, #45	; 0x2d
 8011fb4:	d070      	beq.n	8012098 <_strtod_l+0x270>
 8011fb6:	f04f 0c00 	mov.w	ip, #0
 8011fba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8011fbe:	2f09      	cmp	r7, #9
 8011fc0:	d97c      	bls.n	80120bc <_strtod_l+0x294>
 8011fc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8011fc4:	f04f 0e00 	mov.w	lr, #0
 8011fc8:	e09a      	b.n	8012100 <_strtod_l+0x2d8>
 8011fca:	2300      	movs	r3, #0
 8011fcc:	e7c7      	b.n	8011f5e <_strtod_l+0x136>
 8011fce:	9904      	ldr	r1, [sp, #16]
 8011fd0:	3001      	adds	r0, #1
 8011fd2:	2908      	cmp	r1, #8
 8011fd4:	bfd7      	itett	le
 8011fd6:	9906      	ldrle	r1, [sp, #24]
 8011fd8:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011fdc:	fb02 3301 	mlale	r3, r2, r1, r3
 8011fe0:	9306      	strle	r3, [sp, #24]
 8011fe2:	9b04      	ldr	r3, [sp, #16]
 8011fe4:	901b      	str	r0, [sp, #108]	; 0x6c
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	9304      	str	r3, [sp, #16]
 8011fea:	e7bf      	b.n	8011f6c <_strtod_l+0x144>
 8011fec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011fee:	191a      	adds	r2, r3, r4
 8011ff0:	921b      	str	r2, [sp, #108]	; 0x6c
 8011ff2:	9a04      	ldr	r2, [sp, #16]
 8011ff4:	5d1b      	ldrb	r3, [r3, r4]
 8011ff6:	2a00      	cmp	r2, #0
 8011ff8:	d037      	beq.n	801206a <_strtod_l+0x242>
 8011ffa:	4602      	mov	r2, r0
 8011ffc:	9c04      	ldr	r4, [sp, #16]
 8011ffe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012002:	2909      	cmp	r1, #9
 8012004:	d913      	bls.n	801202e <_strtod_l+0x206>
 8012006:	2101      	movs	r1, #1
 8012008:	9105      	str	r1, [sp, #20]
 801200a:	e7c2      	b.n	8011f92 <_strtod_l+0x16a>
 801200c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801200e:	3001      	adds	r0, #1
 8012010:	1c5a      	adds	r2, r3, #1
 8012012:	921b      	str	r2, [sp, #108]	; 0x6c
 8012014:	785b      	ldrb	r3, [r3, #1]
 8012016:	2b30      	cmp	r3, #48	; 0x30
 8012018:	d0f8      	beq.n	801200c <_strtod_l+0x1e4>
 801201a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801201e:	2a08      	cmp	r2, #8
 8012020:	f200 84f0 	bhi.w	8012a04 <_strtod_l+0xbdc>
 8012024:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012026:	9208      	str	r2, [sp, #32]
 8012028:	4602      	mov	r2, r0
 801202a:	2000      	movs	r0, #0
 801202c:	4604      	mov	r4, r0
 801202e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8012032:	f100 0101 	add.w	r1, r0, #1
 8012036:	d012      	beq.n	801205e <_strtod_l+0x236>
 8012038:	440a      	add	r2, r1
 801203a:	270a      	movs	r7, #10
 801203c:	4621      	mov	r1, r4
 801203e:	eb00 0c04 	add.w	ip, r0, r4
 8012042:	458c      	cmp	ip, r1
 8012044:	d113      	bne.n	801206e <_strtod_l+0x246>
 8012046:	1821      	adds	r1, r4, r0
 8012048:	2908      	cmp	r1, #8
 801204a:	f104 0401 	add.w	r4, r4, #1
 801204e:	4404      	add	r4, r0
 8012050:	dc19      	bgt.n	8012086 <_strtod_l+0x25e>
 8012052:	210a      	movs	r1, #10
 8012054:	9b06      	ldr	r3, [sp, #24]
 8012056:	fb01 e303 	mla	r3, r1, r3, lr
 801205a:	9306      	str	r3, [sp, #24]
 801205c:	2100      	movs	r1, #0
 801205e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012060:	1c58      	adds	r0, r3, #1
 8012062:	901b      	str	r0, [sp, #108]	; 0x6c
 8012064:	785b      	ldrb	r3, [r3, #1]
 8012066:	4608      	mov	r0, r1
 8012068:	e7c9      	b.n	8011ffe <_strtod_l+0x1d6>
 801206a:	9804      	ldr	r0, [sp, #16]
 801206c:	e7d3      	b.n	8012016 <_strtod_l+0x1ee>
 801206e:	2908      	cmp	r1, #8
 8012070:	f101 0101 	add.w	r1, r1, #1
 8012074:	dc03      	bgt.n	801207e <_strtod_l+0x256>
 8012076:	9b06      	ldr	r3, [sp, #24]
 8012078:	437b      	muls	r3, r7
 801207a:	9306      	str	r3, [sp, #24]
 801207c:	e7e1      	b.n	8012042 <_strtod_l+0x21a>
 801207e:	2910      	cmp	r1, #16
 8012080:	bfd8      	it	le
 8012082:	437d      	mulle	r5, r7
 8012084:	e7dd      	b.n	8012042 <_strtod_l+0x21a>
 8012086:	2c10      	cmp	r4, #16
 8012088:	bfdc      	itt	le
 801208a:	210a      	movle	r1, #10
 801208c:	fb01 e505 	mlale	r5, r1, r5, lr
 8012090:	e7e4      	b.n	801205c <_strtod_l+0x234>
 8012092:	2301      	movs	r3, #1
 8012094:	9305      	str	r3, [sp, #20]
 8012096:	e781      	b.n	8011f9c <_strtod_l+0x174>
 8012098:	f04f 0c01 	mov.w	ip, #1
 801209c:	1cb3      	adds	r3, r6, #2
 801209e:	931b      	str	r3, [sp, #108]	; 0x6c
 80120a0:	78b3      	ldrb	r3, [r6, #2]
 80120a2:	e78a      	b.n	8011fba <_strtod_l+0x192>
 80120a4:	f04f 0c00 	mov.w	ip, #0
 80120a8:	e7f8      	b.n	801209c <_strtod_l+0x274>
 80120aa:	bf00      	nop
 80120ac:	0801a034 	.word	0x0801a034
 80120b0:	7ff00000 	.word	0x7ff00000
 80120b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80120b6:	1c5f      	adds	r7, r3, #1
 80120b8:	971b      	str	r7, [sp, #108]	; 0x6c
 80120ba:	785b      	ldrb	r3, [r3, #1]
 80120bc:	2b30      	cmp	r3, #48	; 0x30
 80120be:	d0f9      	beq.n	80120b4 <_strtod_l+0x28c>
 80120c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80120c4:	2f08      	cmp	r7, #8
 80120c6:	f63f af7d 	bhi.w	8011fc4 <_strtod_l+0x19c>
 80120ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80120ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80120d0:	9309      	str	r3, [sp, #36]	; 0x24
 80120d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80120d4:	1c5f      	adds	r7, r3, #1
 80120d6:	971b      	str	r7, [sp, #108]	; 0x6c
 80120d8:	785b      	ldrb	r3, [r3, #1]
 80120da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80120de:	f1b8 0f09 	cmp.w	r8, #9
 80120e2:	d937      	bls.n	8012154 <_strtod_l+0x32c>
 80120e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80120e6:	1a7f      	subs	r7, r7, r1
 80120e8:	2f08      	cmp	r7, #8
 80120ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80120ee:	dc37      	bgt.n	8012160 <_strtod_l+0x338>
 80120f0:	45be      	cmp	lr, r7
 80120f2:	bfa8      	it	ge
 80120f4:	46be      	movge	lr, r7
 80120f6:	f1bc 0f00 	cmp.w	ip, #0
 80120fa:	d001      	beq.n	8012100 <_strtod_l+0x2d8>
 80120fc:	f1ce 0e00 	rsb	lr, lr, #0
 8012100:	2c00      	cmp	r4, #0
 8012102:	d151      	bne.n	80121a8 <_strtod_l+0x380>
 8012104:	2800      	cmp	r0, #0
 8012106:	f47f aece 	bne.w	8011ea6 <_strtod_l+0x7e>
 801210a:	9a07      	ldr	r2, [sp, #28]
 801210c:	2a00      	cmp	r2, #0
 801210e:	f47f aeca 	bne.w	8011ea6 <_strtod_l+0x7e>
 8012112:	9a05      	ldr	r2, [sp, #20]
 8012114:	2a00      	cmp	r2, #0
 8012116:	f47f aee4 	bne.w	8011ee2 <_strtod_l+0xba>
 801211a:	2b4e      	cmp	r3, #78	; 0x4e
 801211c:	d027      	beq.n	801216e <_strtod_l+0x346>
 801211e:	dc21      	bgt.n	8012164 <_strtod_l+0x33c>
 8012120:	2b49      	cmp	r3, #73	; 0x49
 8012122:	f47f aede 	bne.w	8011ee2 <_strtod_l+0xba>
 8012126:	49a4      	ldr	r1, [pc, #656]	; (80123b8 <_strtod_l+0x590>)
 8012128:	a81b      	add	r0, sp, #108	; 0x6c
 801212a:	f001 ff73 	bl	8014014 <__match>
 801212e:	2800      	cmp	r0, #0
 8012130:	f43f aed7 	beq.w	8011ee2 <_strtod_l+0xba>
 8012134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012136:	49a1      	ldr	r1, [pc, #644]	; (80123bc <_strtod_l+0x594>)
 8012138:	3b01      	subs	r3, #1
 801213a:	a81b      	add	r0, sp, #108	; 0x6c
 801213c:	931b      	str	r3, [sp, #108]	; 0x6c
 801213e:	f001 ff69 	bl	8014014 <__match>
 8012142:	b910      	cbnz	r0, 801214a <_strtod_l+0x322>
 8012144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012146:	3301      	adds	r3, #1
 8012148:	931b      	str	r3, [sp, #108]	; 0x6c
 801214a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80123d0 <_strtod_l+0x5a8>
 801214e:	f04f 0900 	mov.w	r9, #0
 8012152:	e6a8      	b.n	8011ea6 <_strtod_l+0x7e>
 8012154:	210a      	movs	r1, #10
 8012156:	fb01 3e0e 	mla	lr, r1, lr, r3
 801215a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801215e:	e7b8      	b.n	80120d2 <_strtod_l+0x2aa>
 8012160:	46be      	mov	lr, r7
 8012162:	e7c8      	b.n	80120f6 <_strtod_l+0x2ce>
 8012164:	2b69      	cmp	r3, #105	; 0x69
 8012166:	d0de      	beq.n	8012126 <_strtod_l+0x2fe>
 8012168:	2b6e      	cmp	r3, #110	; 0x6e
 801216a:	f47f aeba 	bne.w	8011ee2 <_strtod_l+0xba>
 801216e:	4994      	ldr	r1, [pc, #592]	; (80123c0 <_strtod_l+0x598>)
 8012170:	a81b      	add	r0, sp, #108	; 0x6c
 8012172:	f001 ff4f 	bl	8014014 <__match>
 8012176:	2800      	cmp	r0, #0
 8012178:	f43f aeb3 	beq.w	8011ee2 <_strtod_l+0xba>
 801217c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	2b28      	cmp	r3, #40	; 0x28
 8012182:	d10e      	bne.n	80121a2 <_strtod_l+0x37a>
 8012184:	aa1e      	add	r2, sp, #120	; 0x78
 8012186:	498f      	ldr	r1, [pc, #572]	; (80123c4 <_strtod_l+0x59c>)
 8012188:	a81b      	add	r0, sp, #108	; 0x6c
 801218a:	f001 ff57 	bl	801403c <__hexnan>
 801218e:	2805      	cmp	r0, #5
 8012190:	d107      	bne.n	80121a2 <_strtod_l+0x37a>
 8012192:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012194:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8012198:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 801219c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80121a0:	e681      	b.n	8011ea6 <_strtod_l+0x7e>
 80121a2:	f8df a234 	ldr.w	sl, [pc, #564]	; 80123d8 <_strtod_l+0x5b0>
 80121a6:	e7d2      	b.n	801214e <_strtod_l+0x326>
 80121a8:	ebae 0302 	sub.w	r3, lr, r2
 80121ac:	9307      	str	r3, [sp, #28]
 80121ae:	9b04      	ldr	r3, [sp, #16]
 80121b0:	9806      	ldr	r0, [sp, #24]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	bf08      	it	eq
 80121b6:	4623      	moveq	r3, r4
 80121b8:	2c10      	cmp	r4, #16
 80121ba:	9304      	str	r3, [sp, #16]
 80121bc:	46a0      	mov	r8, r4
 80121be:	bfa8      	it	ge
 80121c0:	f04f 0810 	movge.w	r8, #16
 80121c4:	f7ee f928 	bl	8000418 <__aeabi_ui2d>
 80121c8:	2c09      	cmp	r4, #9
 80121ca:	4681      	mov	r9, r0
 80121cc:	468a      	mov	sl, r1
 80121ce:	dc13      	bgt.n	80121f8 <_strtod_l+0x3d0>
 80121d0:	9b07      	ldr	r3, [sp, #28]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	f43f ae67 	beq.w	8011ea6 <_strtod_l+0x7e>
 80121d8:	9b07      	ldr	r3, [sp, #28]
 80121da:	dd7e      	ble.n	80122da <_strtod_l+0x4b2>
 80121dc:	2b16      	cmp	r3, #22
 80121de:	dc65      	bgt.n	80122ac <_strtod_l+0x484>
 80121e0:	4a79      	ldr	r2, [pc, #484]	; (80123c8 <_strtod_l+0x5a0>)
 80121e2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80121e6:	464a      	mov	r2, r9
 80121e8:	e9de 0100 	ldrd	r0, r1, [lr]
 80121ec:	4653      	mov	r3, sl
 80121ee:	f7ee f98d 	bl	800050c <__aeabi_dmul>
 80121f2:	4681      	mov	r9, r0
 80121f4:	468a      	mov	sl, r1
 80121f6:	e656      	b.n	8011ea6 <_strtod_l+0x7e>
 80121f8:	4b73      	ldr	r3, [pc, #460]	; (80123c8 <_strtod_l+0x5a0>)
 80121fa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80121fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012202:	f7ee f983 	bl	800050c <__aeabi_dmul>
 8012206:	4606      	mov	r6, r0
 8012208:	4628      	mov	r0, r5
 801220a:	460f      	mov	r7, r1
 801220c:	f7ee f904 	bl	8000418 <__aeabi_ui2d>
 8012210:	4602      	mov	r2, r0
 8012212:	460b      	mov	r3, r1
 8012214:	4630      	mov	r0, r6
 8012216:	4639      	mov	r1, r7
 8012218:	f7ed ffc2 	bl	80001a0 <__adddf3>
 801221c:	2c0f      	cmp	r4, #15
 801221e:	4681      	mov	r9, r0
 8012220:	468a      	mov	sl, r1
 8012222:	ddd5      	ble.n	80121d0 <_strtod_l+0x3a8>
 8012224:	9b07      	ldr	r3, [sp, #28]
 8012226:	eba4 0808 	sub.w	r8, r4, r8
 801222a:	4498      	add	r8, r3
 801222c:	f1b8 0f00 	cmp.w	r8, #0
 8012230:	f340 809a 	ble.w	8012368 <_strtod_l+0x540>
 8012234:	f018 030f 	ands.w	r3, r8, #15
 8012238:	d00a      	beq.n	8012250 <_strtod_l+0x428>
 801223a:	4963      	ldr	r1, [pc, #396]	; (80123c8 <_strtod_l+0x5a0>)
 801223c:	464a      	mov	r2, r9
 801223e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012246:	4653      	mov	r3, sl
 8012248:	f7ee f960 	bl	800050c <__aeabi_dmul>
 801224c:	4681      	mov	r9, r0
 801224e:	468a      	mov	sl, r1
 8012250:	f038 080f 	bics.w	r8, r8, #15
 8012254:	d077      	beq.n	8012346 <_strtod_l+0x51e>
 8012256:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801225a:	dd4b      	ble.n	80122f4 <_strtod_l+0x4cc>
 801225c:	f04f 0800 	mov.w	r8, #0
 8012260:	f8cd 8010 	str.w	r8, [sp, #16]
 8012264:	f8cd 8020 	str.w	r8, [sp, #32]
 8012268:	f8cd 8018 	str.w	r8, [sp, #24]
 801226c:	2322      	movs	r3, #34	; 0x22
 801226e:	f04f 0900 	mov.w	r9, #0
 8012272:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80123d0 <_strtod_l+0x5a8>
 8012276:	f8cb 3000 	str.w	r3, [fp]
 801227a:	9b08      	ldr	r3, [sp, #32]
 801227c:	2b00      	cmp	r3, #0
 801227e:	f43f ae12 	beq.w	8011ea6 <_strtod_l+0x7e>
 8012282:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012284:	4658      	mov	r0, fp
 8012286:	f001 ffc3 	bl	8014210 <_Bfree>
 801228a:	9906      	ldr	r1, [sp, #24]
 801228c:	4658      	mov	r0, fp
 801228e:	f001 ffbf 	bl	8014210 <_Bfree>
 8012292:	9904      	ldr	r1, [sp, #16]
 8012294:	4658      	mov	r0, fp
 8012296:	f001 ffbb 	bl	8014210 <_Bfree>
 801229a:	9908      	ldr	r1, [sp, #32]
 801229c:	4658      	mov	r0, fp
 801229e:	f001 ffb7 	bl	8014210 <_Bfree>
 80122a2:	4641      	mov	r1, r8
 80122a4:	4658      	mov	r0, fp
 80122a6:	f001 ffb3 	bl	8014210 <_Bfree>
 80122aa:	e5fc      	b.n	8011ea6 <_strtod_l+0x7e>
 80122ac:	9a07      	ldr	r2, [sp, #28]
 80122ae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80122b2:	4293      	cmp	r3, r2
 80122b4:	dbb6      	blt.n	8012224 <_strtod_l+0x3fc>
 80122b6:	4d44      	ldr	r5, [pc, #272]	; (80123c8 <_strtod_l+0x5a0>)
 80122b8:	f1c4 040f 	rsb	r4, r4, #15
 80122bc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80122c0:	464a      	mov	r2, r9
 80122c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122c6:	4653      	mov	r3, sl
 80122c8:	f7ee f920 	bl	800050c <__aeabi_dmul>
 80122cc:	9b07      	ldr	r3, [sp, #28]
 80122ce:	1b1c      	subs	r4, r3, r4
 80122d0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80122d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80122d8:	e789      	b.n	80121ee <_strtod_l+0x3c6>
 80122da:	f113 0f16 	cmn.w	r3, #22
 80122de:	dba1      	blt.n	8012224 <_strtod_l+0x3fc>
 80122e0:	4a39      	ldr	r2, [pc, #228]	; (80123c8 <_strtod_l+0x5a0>)
 80122e2:	4648      	mov	r0, r9
 80122e4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80122e8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80122ec:	4651      	mov	r1, sl
 80122ee:	f7ee fa37 	bl	8000760 <__aeabi_ddiv>
 80122f2:	e77e      	b.n	80121f2 <_strtod_l+0x3ca>
 80122f4:	2300      	movs	r3, #0
 80122f6:	4648      	mov	r0, r9
 80122f8:	4651      	mov	r1, sl
 80122fa:	461d      	mov	r5, r3
 80122fc:	4e33      	ldr	r6, [pc, #204]	; (80123cc <_strtod_l+0x5a4>)
 80122fe:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012302:	f1b8 0f01 	cmp.w	r8, #1
 8012306:	dc21      	bgt.n	801234c <_strtod_l+0x524>
 8012308:	b10b      	cbz	r3, 801230e <_strtod_l+0x4e6>
 801230a:	4681      	mov	r9, r0
 801230c:	468a      	mov	sl, r1
 801230e:	4b2f      	ldr	r3, [pc, #188]	; (80123cc <_strtod_l+0x5a4>)
 8012310:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8012314:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012318:	464a      	mov	r2, r9
 801231a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801231e:	4653      	mov	r3, sl
 8012320:	f7ee f8f4 	bl	800050c <__aeabi_dmul>
 8012324:	4b2a      	ldr	r3, [pc, #168]	; (80123d0 <_strtod_l+0x5a8>)
 8012326:	460a      	mov	r2, r1
 8012328:	400b      	ands	r3, r1
 801232a:	492a      	ldr	r1, [pc, #168]	; (80123d4 <_strtod_l+0x5ac>)
 801232c:	4681      	mov	r9, r0
 801232e:	428b      	cmp	r3, r1
 8012330:	d894      	bhi.n	801225c <_strtod_l+0x434>
 8012332:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012336:	428b      	cmp	r3, r1
 8012338:	bf86      	itte	hi
 801233a:	f04f 39ff 	movhi.w	r9, #4294967295
 801233e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80123dc <_strtod_l+0x5b4>
 8012342:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8012346:	2300      	movs	r3, #0
 8012348:	9305      	str	r3, [sp, #20]
 801234a:	e07b      	b.n	8012444 <_strtod_l+0x61c>
 801234c:	f018 0f01 	tst.w	r8, #1
 8012350:	d006      	beq.n	8012360 <_strtod_l+0x538>
 8012352:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8012356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235a:	f7ee f8d7 	bl	800050c <__aeabi_dmul>
 801235e:	2301      	movs	r3, #1
 8012360:	3501      	adds	r5, #1
 8012362:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012366:	e7cc      	b.n	8012302 <_strtod_l+0x4da>
 8012368:	d0ed      	beq.n	8012346 <_strtod_l+0x51e>
 801236a:	f1c8 0800 	rsb	r8, r8, #0
 801236e:	f018 020f 	ands.w	r2, r8, #15
 8012372:	d00a      	beq.n	801238a <_strtod_l+0x562>
 8012374:	4b14      	ldr	r3, [pc, #80]	; (80123c8 <_strtod_l+0x5a0>)
 8012376:	4648      	mov	r0, r9
 8012378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801237c:	4651      	mov	r1, sl
 801237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012382:	f7ee f9ed 	bl	8000760 <__aeabi_ddiv>
 8012386:	4681      	mov	r9, r0
 8012388:	468a      	mov	sl, r1
 801238a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801238e:	d0da      	beq.n	8012346 <_strtod_l+0x51e>
 8012390:	f1b8 0f1f 	cmp.w	r8, #31
 8012394:	dd24      	ble.n	80123e0 <_strtod_l+0x5b8>
 8012396:	f04f 0800 	mov.w	r8, #0
 801239a:	f8cd 8010 	str.w	r8, [sp, #16]
 801239e:	f8cd 8020 	str.w	r8, [sp, #32]
 80123a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80123a6:	2322      	movs	r3, #34	; 0x22
 80123a8:	f04f 0900 	mov.w	r9, #0
 80123ac:	f04f 0a00 	mov.w	sl, #0
 80123b0:	f8cb 3000 	str.w	r3, [fp]
 80123b4:	e761      	b.n	801227a <_strtod_l+0x452>
 80123b6:	bf00      	nop
 80123b8:	0801a321 	.word	0x0801a321
 80123bc:	0801a18c 	.word	0x0801a18c
 80123c0:	0801a00b 	.word	0x0801a00b
 80123c4:	0801a048 	.word	0x0801a048
 80123c8:	0801a220 	.word	0x0801a220
 80123cc:	0801a1f8 	.word	0x0801a1f8
 80123d0:	7ff00000 	.word	0x7ff00000
 80123d4:	7ca00000 	.word	0x7ca00000
 80123d8:	fff80000 	.word	0xfff80000
 80123dc:	7fefffff 	.word	0x7fefffff
 80123e0:	f018 0310 	ands.w	r3, r8, #16
 80123e4:	bf18      	it	ne
 80123e6:	236a      	movne	r3, #106	; 0x6a
 80123e8:	4648      	mov	r0, r9
 80123ea:	9305      	str	r3, [sp, #20]
 80123ec:	4651      	mov	r1, sl
 80123ee:	2300      	movs	r3, #0
 80123f0:	4da1      	ldr	r5, [pc, #644]	; (8012678 <_strtod_l+0x850>)
 80123f2:	f1b8 0f00 	cmp.w	r8, #0
 80123f6:	f300 8113 	bgt.w	8012620 <_strtod_l+0x7f8>
 80123fa:	b10b      	cbz	r3, 8012400 <_strtod_l+0x5d8>
 80123fc:	4681      	mov	r9, r0
 80123fe:	468a      	mov	sl, r1
 8012400:	9b05      	ldr	r3, [sp, #20]
 8012402:	b1bb      	cbz	r3, 8012434 <_strtod_l+0x60c>
 8012404:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8012408:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801240c:	2b00      	cmp	r3, #0
 801240e:	4651      	mov	r1, sl
 8012410:	dd10      	ble.n	8012434 <_strtod_l+0x60c>
 8012412:	2b1f      	cmp	r3, #31
 8012414:	f340 8110 	ble.w	8012638 <_strtod_l+0x810>
 8012418:	2b34      	cmp	r3, #52	; 0x34
 801241a:	bfd8      	it	le
 801241c:	f04f 32ff 	movle.w	r2, #4294967295
 8012420:	f04f 0900 	mov.w	r9, #0
 8012424:	bfcf      	iteee	gt
 8012426:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 801242a:	3b20      	suble	r3, #32
 801242c:	fa02 f303 	lslle.w	r3, r2, r3
 8012430:	ea03 0a01 	andle.w	sl, r3, r1
 8012434:	2200      	movs	r2, #0
 8012436:	2300      	movs	r3, #0
 8012438:	4648      	mov	r0, r9
 801243a:	4651      	mov	r1, sl
 801243c:	f7ee face 	bl	80009dc <__aeabi_dcmpeq>
 8012440:	2800      	cmp	r0, #0
 8012442:	d1a8      	bne.n	8012396 <_strtod_l+0x56e>
 8012444:	9b06      	ldr	r3, [sp, #24]
 8012446:	9a04      	ldr	r2, [sp, #16]
 8012448:	9300      	str	r3, [sp, #0]
 801244a:	9908      	ldr	r1, [sp, #32]
 801244c:	4623      	mov	r3, r4
 801244e:	4658      	mov	r0, fp
 8012450:	f001 ff30 	bl	80142b4 <__s2b>
 8012454:	9008      	str	r0, [sp, #32]
 8012456:	2800      	cmp	r0, #0
 8012458:	f43f af00 	beq.w	801225c <_strtod_l+0x434>
 801245c:	9a07      	ldr	r2, [sp, #28]
 801245e:	9b07      	ldr	r3, [sp, #28]
 8012460:	2a00      	cmp	r2, #0
 8012462:	f1c3 0300 	rsb	r3, r3, #0
 8012466:	bfa8      	it	ge
 8012468:	2300      	movge	r3, #0
 801246a:	f04f 0800 	mov.w	r8, #0
 801246e:	930e      	str	r3, [sp, #56]	; 0x38
 8012470:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012474:	9316      	str	r3, [sp, #88]	; 0x58
 8012476:	f8cd 8010 	str.w	r8, [sp, #16]
 801247a:	9b08      	ldr	r3, [sp, #32]
 801247c:	4658      	mov	r0, fp
 801247e:	6859      	ldr	r1, [r3, #4]
 8012480:	f001 fe92 	bl	80141a8 <_Balloc>
 8012484:	9006      	str	r0, [sp, #24]
 8012486:	2800      	cmp	r0, #0
 8012488:	f43f aef0 	beq.w	801226c <_strtod_l+0x444>
 801248c:	9b08      	ldr	r3, [sp, #32]
 801248e:	300c      	adds	r0, #12
 8012490:	691a      	ldr	r2, [r3, #16]
 8012492:	f103 010c 	add.w	r1, r3, #12
 8012496:	3202      	adds	r2, #2
 8012498:	0092      	lsls	r2, r2, #2
 801249a:	f7ff f81f 	bl	80114dc <memcpy>
 801249e:	ab1e      	add	r3, sp, #120	; 0x78
 80124a0:	9301      	str	r3, [sp, #4]
 80124a2:	ab1d      	add	r3, sp, #116	; 0x74
 80124a4:	9300      	str	r3, [sp, #0]
 80124a6:	464a      	mov	r2, r9
 80124a8:	4653      	mov	r3, sl
 80124aa:	4658      	mov	r0, fp
 80124ac:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80124b0:	f002 f9ba 	bl	8014828 <__d2b>
 80124b4:	901c      	str	r0, [sp, #112]	; 0x70
 80124b6:	2800      	cmp	r0, #0
 80124b8:	f43f aed8 	beq.w	801226c <_strtod_l+0x444>
 80124bc:	2101      	movs	r1, #1
 80124be:	4658      	mov	r0, fp
 80124c0:	f001 ff84 	bl	80143cc <__i2b>
 80124c4:	9004      	str	r0, [sp, #16]
 80124c6:	4603      	mov	r3, r0
 80124c8:	2800      	cmp	r0, #0
 80124ca:	f43f aecf 	beq.w	801226c <_strtod_l+0x444>
 80124ce:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80124d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80124d2:	2d00      	cmp	r5, #0
 80124d4:	bfab      	itete	ge
 80124d6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80124d8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80124da:	18ee      	addge	r6, r5, r3
 80124dc:	1b5c      	sublt	r4, r3, r5
 80124de:	9b05      	ldr	r3, [sp, #20]
 80124e0:	bfa8      	it	ge
 80124e2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80124e4:	eba5 0503 	sub.w	r5, r5, r3
 80124e8:	4415      	add	r5, r2
 80124ea:	4b64      	ldr	r3, [pc, #400]	; (801267c <_strtod_l+0x854>)
 80124ec:	f105 35ff 	add.w	r5, r5, #4294967295
 80124f0:	bfb8      	it	lt
 80124f2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80124f4:	429d      	cmp	r5, r3
 80124f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80124fa:	f280 80af 	bge.w	801265c <_strtod_l+0x834>
 80124fe:	1b5b      	subs	r3, r3, r5
 8012500:	2b1f      	cmp	r3, #31
 8012502:	eba2 0203 	sub.w	r2, r2, r3
 8012506:	f04f 0701 	mov.w	r7, #1
 801250a:	f300 809c 	bgt.w	8012646 <_strtod_l+0x81e>
 801250e:	2500      	movs	r5, #0
 8012510:	fa07 f303 	lsl.w	r3, r7, r3
 8012514:	930f      	str	r3, [sp, #60]	; 0x3c
 8012516:	18b7      	adds	r7, r6, r2
 8012518:	9b05      	ldr	r3, [sp, #20]
 801251a:	42be      	cmp	r6, r7
 801251c:	4414      	add	r4, r2
 801251e:	441c      	add	r4, r3
 8012520:	4633      	mov	r3, r6
 8012522:	bfa8      	it	ge
 8012524:	463b      	movge	r3, r7
 8012526:	42a3      	cmp	r3, r4
 8012528:	bfa8      	it	ge
 801252a:	4623      	movge	r3, r4
 801252c:	2b00      	cmp	r3, #0
 801252e:	bfc2      	ittt	gt
 8012530:	1aff      	subgt	r7, r7, r3
 8012532:	1ae4      	subgt	r4, r4, r3
 8012534:	1af6      	subgt	r6, r6, r3
 8012536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012538:	b1bb      	cbz	r3, 801256a <_strtod_l+0x742>
 801253a:	461a      	mov	r2, r3
 801253c:	9904      	ldr	r1, [sp, #16]
 801253e:	4658      	mov	r0, fp
 8012540:	f001 ffe2 	bl	8014508 <__pow5mult>
 8012544:	9004      	str	r0, [sp, #16]
 8012546:	2800      	cmp	r0, #0
 8012548:	f43f ae90 	beq.w	801226c <_strtod_l+0x444>
 801254c:	4601      	mov	r1, r0
 801254e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012550:	4658      	mov	r0, fp
 8012552:	f001 ff44 	bl	80143de <__multiply>
 8012556:	9009      	str	r0, [sp, #36]	; 0x24
 8012558:	2800      	cmp	r0, #0
 801255a:	f43f ae87 	beq.w	801226c <_strtod_l+0x444>
 801255e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012560:	4658      	mov	r0, fp
 8012562:	f001 fe55 	bl	8014210 <_Bfree>
 8012566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012568:	931c      	str	r3, [sp, #112]	; 0x70
 801256a:	2f00      	cmp	r7, #0
 801256c:	dc7a      	bgt.n	8012664 <_strtod_l+0x83c>
 801256e:	9b07      	ldr	r3, [sp, #28]
 8012570:	2b00      	cmp	r3, #0
 8012572:	dd08      	ble.n	8012586 <_strtod_l+0x75e>
 8012574:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012576:	9906      	ldr	r1, [sp, #24]
 8012578:	4658      	mov	r0, fp
 801257a:	f001 ffc5 	bl	8014508 <__pow5mult>
 801257e:	9006      	str	r0, [sp, #24]
 8012580:	2800      	cmp	r0, #0
 8012582:	f43f ae73 	beq.w	801226c <_strtod_l+0x444>
 8012586:	2c00      	cmp	r4, #0
 8012588:	dd08      	ble.n	801259c <_strtod_l+0x774>
 801258a:	4622      	mov	r2, r4
 801258c:	9906      	ldr	r1, [sp, #24]
 801258e:	4658      	mov	r0, fp
 8012590:	f002 f808 	bl	80145a4 <__lshift>
 8012594:	9006      	str	r0, [sp, #24]
 8012596:	2800      	cmp	r0, #0
 8012598:	f43f ae68 	beq.w	801226c <_strtod_l+0x444>
 801259c:	2e00      	cmp	r6, #0
 801259e:	dd08      	ble.n	80125b2 <_strtod_l+0x78a>
 80125a0:	4632      	mov	r2, r6
 80125a2:	9904      	ldr	r1, [sp, #16]
 80125a4:	4658      	mov	r0, fp
 80125a6:	f001 fffd 	bl	80145a4 <__lshift>
 80125aa:	9004      	str	r0, [sp, #16]
 80125ac:	2800      	cmp	r0, #0
 80125ae:	f43f ae5d 	beq.w	801226c <_strtod_l+0x444>
 80125b2:	9a06      	ldr	r2, [sp, #24]
 80125b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80125b6:	4658      	mov	r0, fp
 80125b8:	f002 f862 	bl	8014680 <__mdiff>
 80125bc:	4680      	mov	r8, r0
 80125be:	2800      	cmp	r0, #0
 80125c0:	f43f ae54 	beq.w	801226c <_strtod_l+0x444>
 80125c4:	2400      	movs	r4, #0
 80125c6:	68c3      	ldr	r3, [r0, #12]
 80125c8:	9904      	ldr	r1, [sp, #16]
 80125ca:	60c4      	str	r4, [r0, #12]
 80125cc:	930c      	str	r3, [sp, #48]	; 0x30
 80125ce:	f002 f83d 	bl	801464c <__mcmp>
 80125d2:	42a0      	cmp	r0, r4
 80125d4:	da54      	bge.n	8012680 <_strtod_l+0x858>
 80125d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125d8:	b9f3      	cbnz	r3, 8012618 <_strtod_l+0x7f0>
 80125da:	f1b9 0f00 	cmp.w	r9, #0
 80125de:	d11b      	bne.n	8012618 <_strtod_l+0x7f0>
 80125e0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80125e4:	b9c3      	cbnz	r3, 8012618 <_strtod_l+0x7f0>
 80125e6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80125ea:	0d1b      	lsrs	r3, r3, #20
 80125ec:	051b      	lsls	r3, r3, #20
 80125ee:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80125f2:	d911      	bls.n	8012618 <_strtod_l+0x7f0>
 80125f4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80125f8:	b91b      	cbnz	r3, 8012602 <_strtod_l+0x7da>
 80125fa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80125fe:	2b01      	cmp	r3, #1
 8012600:	dd0a      	ble.n	8012618 <_strtod_l+0x7f0>
 8012602:	4641      	mov	r1, r8
 8012604:	2201      	movs	r2, #1
 8012606:	4658      	mov	r0, fp
 8012608:	f001 ffcc 	bl	80145a4 <__lshift>
 801260c:	9904      	ldr	r1, [sp, #16]
 801260e:	4680      	mov	r8, r0
 8012610:	f002 f81c 	bl	801464c <__mcmp>
 8012614:	2800      	cmp	r0, #0
 8012616:	dc68      	bgt.n	80126ea <_strtod_l+0x8c2>
 8012618:	9b05      	ldr	r3, [sp, #20]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d172      	bne.n	8012704 <_strtod_l+0x8dc>
 801261e:	e630      	b.n	8012282 <_strtod_l+0x45a>
 8012620:	f018 0f01 	tst.w	r8, #1
 8012624:	d004      	beq.n	8012630 <_strtod_l+0x808>
 8012626:	e9d5 2300 	ldrd	r2, r3, [r5]
 801262a:	f7ed ff6f 	bl	800050c <__aeabi_dmul>
 801262e:	2301      	movs	r3, #1
 8012630:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012634:	3508      	adds	r5, #8
 8012636:	e6dc      	b.n	80123f2 <_strtod_l+0x5ca>
 8012638:	f04f 32ff 	mov.w	r2, #4294967295
 801263c:	fa02 f303 	lsl.w	r3, r2, r3
 8012640:	ea03 0909 	and.w	r9, r3, r9
 8012644:	e6f6      	b.n	8012434 <_strtod_l+0x60c>
 8012646:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 801264a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 801264e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8012652:	35e2      	adds	r5, #226	; 0xe2
 8012654:	fa07 f505 	lsl.w	r5, r7, r5
 8012658:	970f      	str	r7, [sp, #60]	; 0x3c
 801265a:	e75c      	b.n	8012516 <_strtod_l+0x6ee>
 801265c:	2301      	movs	r3, #1
 801265e:	2500      	movs	r5, #0
 8012660:	930f      	str	r3, [sp, #60]	; 0x3c
 8012662:	e758      	b.n	8012516 <_strtod_l+0x6ee>
 8012664:	463a      	mov	r2, r7
 8012666:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012668:	4658      	mov	r0, fp
 801266a:	f001 ff9b 	bl	80145a4 <__lshift>
 801266e:	901c      	str	r0, [sp, #112]	; 0x70
 8012670:	2800      	cmp	r0, #0
 8012672:	f47f af7c 	bne.w	801256e <_strtod_l+0x746>
 8012676:	e5f9      	b.n	801226c <_strtod_l+0x444>
 8012678:	0801a060 	.word	0x0801a060
 801267c:	fffffc02 	.word	0xfffffc02
 8012680:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012684:	f040 8089 	bne.w	801279a <_strtod_l+0x972>
 8012688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801268a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 801268e:	b342      	cbz	r2, 80126e2 <_strtod_l+0x8ba>
 8012690:	4aaf      	ldr	r2, [pc, #700]	; (8012950 <_strtod_l+0xb28>)
 8012692:	4293      	cmp	r3, r2
 8012694:	d156      	bne.n	8012744 <_strtod_l+0x91c>
 8012696:	9b05      	ldr	r3, [sp, #20]
 8012698:	4648      	mov	r0, r9
 801269a:	b1eb      	cbz	r3, 80126d8 <_strtod_l+0x8b0>
 801269c:	4653      	mov	r3, sl
 801269e:	4aad      	ldr	r2, [pc, #692]	; (8012954 <_strtod_l+0xb2c>)
 80126a0:	f04f 31ff 	mov.w	r1, #4294967295
 80126a4:	401a      	ands	r2, r3
 80126a6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80126aa:	d818      	bhi.n	80126de <_strtod_l+0x8b6>
 80126ac:	0d12      	lsrs	r2, r2, #20
 80126ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80126b2:	fa01 f303 	lsl.w	r3, r1, r3
 80126b6:	4298      	cmp	r0, r3
 80126b8:	d144      	bne.n	8012744 <_strtod_l+0x91c>
 80126ba:	4ba7      	ldr	r3, [pc, #668]	; (8012958 <_strtod_l+0xb30>)
 80126bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126be:	429a      	cmp	r2, r3
 80126c0:	d102      	bne.n	80126c8 <_strtod_l+0x8a0>
 80126c2:	3001      	adds	r0, #1
 80126c4:	f43f add2 	beq.w	801226c <_strtod_l+0x444>
 80126c8:	4ba2      	ldr	r3, [pc, #648]	; (8012954 <_strtod_l+0xb2c>)
 80126ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126cc:	f04f 0900 	mov.w	r9, #0
 80126d0:	401a      	ands	r2, r3
 80126d2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80126d6:	e79f      	b.n	8012618 <_strtod_l+0x7f0>
 80126d8:	f04f 33ff 	mov.w	r3, #4294967295
 80126dc:	e7eb      	b.n	80126b6 <_strtod_l+0x88e>
 80126de:	460b      	mov	r3, r1
 80126e0:	e7e9      	b.n	80126b6 <_strtod_l+0x88e>
 80126e2:	bb7b      	cbnz	r3, 8012744 <_strtod_l+0x91c>
 80126e4:	f1b9 0f00 	cmp.w	r9, #0
 80126e8:	d12c      	bne.n	8012744 <_strtod_l+0x91c>
 80126ea:	9905      	ldr	r1, [sp, #20]
 80126ec:	4653      	mov	r3, sl
 80126ee:	4a99      	ldr	r2, [pc, #612]	; (8012954 <_strtod_l+0xb2c>)
 80126f0:	b1f1      	cbz	r1, 8012730 <_strtod_l+0x908>
 80126f2:	ea02 010a 	and.w	r1, r2, sl
 80126f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80126fa:	dc19      	bgt.n	8012730 <_strtod_l+0x908>
 80126fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012700:	f77f ae51 	ble.w	80123a6 <_strtod_l+0x57e>
 8012704:	2300      	movs	r3, #0
 8012706:	4a95      	ldr	r2, [pc, #596]	; (801295c <_strtod_l+0xb34>)
 8012708:	4648      	mov	r0, r9
 801270a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801270e:	4651      	mov	r1, sl
 8012710:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012714:	f7ed fefa 	bl	800050c <__aeabi_dmul>
 8012718:	4681      	mov	r9, r0
 801271a:	468a      	mov	sl, r1
 801271c:	2900      	cmp	r1, #0
 801271e:	f47f adb0 	bne.w	8012282 <_strtod_l+0x45a>
 8012722:	2800      	cmp	r0, #0
 8012724:	f47f adad 	bne.w	8012282 <_strtod_l+0x45a>
 8012728:	2322      	movs	r3, #34	; 0x22
 801272a:	f8cb 3000 	str.w	r3, [fp]
 801272e:	e5a8      	b.n	8012282 <_strtod_l+0x45a>
 8012730:	4013      	ands	r3, r2
 8012732:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012736:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 801273a:	f04f 39ff 	mov.w	r9, #4294967295
 801273e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8012742:	e769      	b.n	8012618 <_strtod_l+0x7f0>
 8012744:	b19d      	cbz	r5, 801276e <_strtod_l+0x946>
 8012746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012748:	421d      	tst	r5, r3
 801274a:	f43f af65 	beq.w	8012618 <_strtod_l+0x7f0>
 801274e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012750:	9a05      	ldr	r2, [sp, #20]
 8012752:	4648      	mov	r0, r9
 8012754:	4651      	mov	r1, sl
 8012756:	b173      	cbz	r3, 8012776 <_strtod_l+0x94e>
 8012758:	f7ff fb42 	bl	8011de0 <sulp>
 801275c:	4602      	mov	r2, r0
 801275e:	460b      	mov	r3, r1
 8012760:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012764:	f7ed fd1c 	bl	80001a0 <__adddf3>
 8012768:	4681      	mov	r9, r0
 801276a:	468a      	mov	sl, r1
 801276c:	e754      	b.n	8012618 <_strtod_l+0x7f0>
 801276e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012770:	ea13 0f09 	tst.w	r3, r9
 8012774:	e7e9      	b.n	801274a <_strtod_l+0x922>
 8012776:	f7ff fb33 	bl	8011de0 <sulp>
 801277a:	4602      	mov	r2, r0
 801277c:	460b      	mov	r3, r1
 801277e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012782:	f7ed fd0b 	bl	800019c <__aeabi_dsub>
 8012786:	2200      	movs	r2, #0
 8012788:	2300      	movs	r3, #0
 801278a:	4681      	mov	r9, r0
 801278c:	468a      	mov	sl, r1
 801278e:	f7ee f925 	bl	80009dc <__aeabi_dcmpeq>
 8012792:	2800      	cmp	r0, #0
 8012794:	f47f ae07 	bne.w	80123a6 <_strtod_l+0x57e>
 8012798:	e73e      	b.n	8012618 <_strtod_l+0x7f0>
 801279a:	9904      	ldr	r1, [sp, #16]
 801279c:	4640      	mov	r0, r8
 801279e:	f002 f892 	bl	80148c6 <__ratio>
 80127a2:	2200      	movs	r2, #0
 80127a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80127a8:	4606      	mov	r6, r0
 80127aa:	460f      	mov	r7, r1
 80127ac:	f7ee f92a 	bl	8000a04 <__aeabi_dcmple>
 80127b0:	2800      	cmp	r0, #0
 80127b2:	d075      	beq.n	80128a0 <_strtod_l+0xa78>
 80127b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d047      	beq.n	801284a <_strtod_l+0xa22>
 80127ba:	2600      	movs	r6, #0
 80127bc:	4f68      	ldr	r7, [pc, #416]	; (8012960 <_strtod_l+0xb38>)
 80127be:	4d68      	ldr	r5, [pc, #416]	; (8012960 <_strtod_l+0xb38>)
 80127c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127c6:	0d1b      	lsrs	r3, r3, #20
 80127c8:	051b      	lsls	r3, r3, #20
 80127ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80127cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80127ce:	4b65      	ldr	r3, [pc, #404]	; (8012964 <_strtod_l+0xb3c>)
 80127d0:	429a      	cmp	r2, r3
 80127d2:	f040 80cf 	bne.w	8012974 <_strtod_l+0xb4c>
 80127d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80127da:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80127de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127e0:	4648      	mov	r0, r9
 80127e2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80127e6:	4651      	mov	r1, sl
 80127e8:	f001 ffa8 	bl	801473c <__ulp>
 80127ec:	4602      	mov	r2, r0
 80127ee:	460b      	mov	r3, r1
 80127f0:	4630      	mov	r0, r6
 80127f2:	4639      	mov	r1, r7
 80127f4:	f7ed fe8a 	bl	800050c <__aeabi_dmul>
 80127f8:	464a      	mov	r2, r9
 80127fa:	4653      	mov	r3, sl
 80127fc:	f7ed fcd0 	bl	80001a0 <__adddf3>
 8012800:	460b      	mov	r3, r1
 8012802:	4954      	ldr	r1, [pc, #336]	; (8012954 <_strtod_l+0xb2c>)
 8012804:	4a58      	ldr	r2, [pc, #352]	; (8012968 <_strtod_l+0xb40>)
 8012806:	4019      	ands	r1, r3
 8012808:	4291      	cmp	r1, r2
 801280a:	4681      	mov	r9, r0
 801280c:	d95e      	bls.n	80128cc <_strtod_l+0xaa4>
 801280e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012810:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012814:	4293      	cmp	r3, r2
 8012816:	d103      	bne.n	8012820 <_strtod_l+0x9f8>
 8012818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801281a:	3301      	adds	r3, #1
 801281c:	f43f ad26 	beq.w	801226c <_strtod_l+0x444>
 8012820:	f04f 39ff 	mov.w	r9, #4294967295
 8012824:	f8df a130 	ldr.w	sl, [pc, #304]	; 8012958 <_strtod_l+0xb30>
 8012828:	991c      	ldr	r1, [sp, #112]	; 0x70
 801282a:	4658      	mov	r0, fp
 801282c:	f001 fcf0 	bl	8014210 <_Bfree>
 8012830:	9906      	ldr	r1, [sp, #24]
 8012832:	4658      	mov	r0, fp
 8012834:	f001 fcec 	bl	8014210 <_Bfree>
 8012838:	9904      	ldr	r1, [sp, #16]
 801283a:	4658      	mov	r0, fp
 801283c:	f001 fce8 	bl	8014210 <_Bfree>
 8012840:	4641      	mov	r1, r8
 8012842:	4658      	mov	r0, fp
 8012844:	f001 fce4 	bl	8014210 <_Bfree>
 8012848:	e617      	b.n	801247a <_strtod_l+0x652>
 801284a:	f1b9 0f00 	cmp.w	r9, #0
 801284e:	d119      	bne.n	8012884 <_strtod_l+0xa5c>
 8012850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012856:	b9e3      	cbnz	r3, 8012892 <_strtod_l+0xa6a>
 8012858:	2200      	movs	r2, #0
 801285a:	4b41      	ldr	r3, [pc, #260]	; (8012960 <_strtod_l+0xb38>)
 801285c:	4630      	mov	r0, r6
 801285e:	4639      	mov	r1, r7
 8012860:	f7ee f8c6 	bl	80009f0 <__aeabi_dcmplt>
 8012864:	b9c8      	cbnz	r0, 801289a <_strtod_l+0xa72>
 8012866:	2200      	movs	r2, #0
 8012868:	4b40      	ldr	r3, [pc, #256]	; (801296c <_strtod_l+0xb44>)
 801286a:	4630      	mov	r0, r6
 801286c:	4639      	mov	r1, r7
 801286e:	f7ed fe4d 	bl	800050c <__aeabi_dmul>
 8012872:	4604      	mov	r4, r0
 8012874:	460d      	mov	r5, r1
 8012876:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801287a:	9418      	str	r4, [sp, #96]	; 0x60
 801287c:	9319      	str	r3, [sp, #100]	; 0x64
 801287e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8012882:	e79d      	b.n	80127c0 <_strtod_l+0x998>
 8012884:	f1b9 0f01 	cmp.w	r9, #1
 8012888:	d103      	bne.n	8012892 <_strtod_l+0xa6a>
 801288a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801288c:	2b00      	cmp	r3, #0
 801288e:	f43f ad8a 	beq.w	80123a6 <_strtod_l+0x57e>
 8012892:	2600      	movs	r6, #0
 8012894:	4f36      	ldr	r7, [pc, #216]	; (8012970 <_strtod_l+0xb48>)
 8012896:	2400      	movs	r4, #0
 8012898:	e791      	b.n	80127be <_strtod_l+0x996>
 801289a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801289c:	4d33      	ldr	r5, [pc, #204]	; (801296c <_strtod_l+0xb44>)
 801289e:	e7ea      	b.n	8012876 <_strtod_l+0xa4e>
 80128a0:	4b32      	ldr	r3, [pc, #200]	; (801296c <_strtod_l+0xb44>)
 80128a2:	2200      	movs	r2, #0
 80128a4:	4630      	mov	r0, r6
 80128a6:	4639      	mov	r1, r7
 80128a8:	f7ed fe30 	bl	800050c <__aeabi_dmul>
 80128ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128ae:	4604      	mov	r4, r0
 80128b0:	460d      	mov	r5, r1
 80128b2:	b933      	cbnz	r3, 80128c2 <_strtod_l+0xa9a>
 80128b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128b8:	9010      	str	r0, [sp, #64]	; 0x40
 80128ba:	9311      	str	r3, [sp, #68]	; 0x44
 80128bc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80128c0:	e77e      	b.n	80127c0 <_strtod_l+0x998>
 80128c2:	4602      	mov	r2, r0
 80128c4:	460b      	mov	r3, r1
 80128c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80128ca:	e7f7      	b.n	80128bc <_strtod_l+0xa94>
 80128cc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80128d0:	9b05      	ldr	r3, [sp, #20]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d1a8      	bne.n	8012828 <_strtod_l+0xa00>
 80128d6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80128da:	0d1b      	lsrs	r3, r3, #20
 80128dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80128de:	051b      	lsls	r3, r3, #20
 80128e0:	429a      	cmp	r2, r3
 80128e2:	4656      	mov	r6, sl
 80128e4:	d1a0      	bne.n	8012828 <_strtod_l+0xa00>
 80128e6:	4629      	mov	r1, r5
 80128e8:	4620      	mov	r0, r4
 80128ea:	f7ee f8bf 	bl	8000a6c <__aeabi_d2iz>
 80128ee:	f7ed fda3 	bl	8000438 <__aeabi_i2d>
 80128f2:	460b      	mov	r3, r1
 80128f4:	4602      	mov	r2, r0
 80128f6:	4629      	mov	r1, r5
 80128f8:	4620      	mov	r0, r4
 80128fa:	f7ed fc4f 	bl	800019c <__aeabi_dsub>
 80128fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012900:	4604      	mov	r4, r0
 8012902:	460d      	mov	r5, r1
 8012904:	b933      	cbnz	r3, 8012914 <_strtod_l+0xaec>
 8012906:	f1b9 0f00 	cmp.w	r9, #0
 801290a:	d103      	bne.n	8012914 <_strtod_l+0xaec>
 801290c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8012910:	2e00      	cmp	r6, #0
 8012912:	d06a      	beq.n	80129ea <_strtod_l+0xbc2>
 8012914:	a30a      	add	r3, pc, #40	; (adr r3, 8012940 <_strtod_l+0xb18>)
 8012916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291a:	4620      	mov	r0, r4
 801291c:	4629      	mov	r1, r5
 801291e:	f7ee f867 	bl	80009f0 <__aeabi_dcmplt>
 8012922:	2800      	cmp	r0, #0
 8012924:	f47f acad 	bne.w	8012282 <_strtod_l+0x45a>
 8012928:	a307      	add	r3, pc, #28	; (adr r3, 8012948 <_strtod_l+0xb20>)
 801292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801292e:	4620      	mov	r0, r4
 8012930:	4629      	mov	r1, r5
 8012932:	f7ee f87b 	bl	8000a2c <__aeabi_dcmpgt>
 8012936:	2800      	cmp	r0, #0
 8012938:	f43f af76 	beq.w	8012828 <_strtod_l+0xa00>
 801293c:	e4a1      	b.n	8012282 <_strtod_l+0x45a>
 801293e:	bf00      	nop
 8012940:	94a03595 	.word	0x94a03595
 8012944:	3fdfffff 	.word	0x3fdfffff
 8012948:	35afe535 	.word	0x35afe535
 801294c:	3fe00000 	.word	0x3fe00000
 8012950:	000fffff 	.word	0x000fffff
 8012954:	7ff00000 	.word	0x7ff00000
 8012958:	7fefffff 	.word	0x7fefffff
 801295c:	39500000 	.word	0x39500000
 8012960:	3ff00000 	.word	0x3ff00000
 8012964:	7fe00000 	.word	0x7fe00000
 8012968:	7c9fffff 	.word	0x7c9fffff
 801296c:	3fe00000 	.word	0x3fe00000
 8012970:	bff00000 	.word	0xbff00000
 8012974:	9b05      	ldr	r3, [sp, #20]
 8012976:	b313      	cbz	r3, 80129be <_strtod_l+0xb96>
 8012978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801297a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801297e:	d81e      	bhi.n	80129be <_strtod_l+0xb96>
 8012980:	a325      	add	r3, pc, #148	; (adr r3, 8012a18 <_strtod_l+0xbf0>)
 8012982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012986:	4620      	mov	r0, r4
 8012988:	4629      	mov	r1, r5
 801298a:	f7ee f83b 	bl	8000a04 <__aeabi_dcmple>
 801298e:	b190      	cbz	r0, 80129b6 <_strtod_l+0xb8e>
 8012990:	4629      	mov	r1, r5
 8012992:	4620      	mov	r0, r4
 8012994:	f7ee f892 	bl	8000abc <__aeabi_d2uiz>
 8012998:	2800      	cmp	r0, #0
 801299a:	bf08      	it	eq
 801299c:	2001      	moveq	r0, #1
 801299e:	f7ed fd3b 	bl	8000418 <__aeabi_ui2d>
 80129a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129a4:	4604      	mov	r4, r0
 80129a6:	460d      	mov	r5, r1
 80129a8:	b9d3      	cbnz	r3, 80129e0 <_strtod_l+0xbb8>
 80129aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129ae:	9012      	str	r0, [sp, #72]	; 0x48
 80129b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80129b2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80129b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80129b8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80129bc:	1a9f      	subs	r7, r3, r2
 80129be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80129c2:	f001 febb 	bl	801473c <__ulp>
 80129c6:	4602      	mov	r2, r0
 80129c8:	460b      	mov	r3, r1
 80129ca:	4630      	mov	r0, r6
 80129cc:	4639      	mov	r1, r7
 80129ce:	f7ed fd9d 	bl	800050c <__aeabi_dmul>
 80129d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80129d6:	f7ed fbe3 	bl	80001a0 <__adddf3>
 80129da:	4681      	mov	r9, r0
 80129dc:	468a      	mov	sl, r1
 80129de:	e777      	b.n	80128d0 <_strtod_l+0xaa8>
 80129e0:	4602      	mov	r2, r0
 80129e2:	460b      	mov	r3, r1
 80129e4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80129e8:	e7e3      	b.n	80129b2 <_strtod_l+0xb8a>
 80129ea:	a30d      	add	r3, pc, #52	; (adr r3, 8012a20 <_strtod_l+0xbf8>)
 80129ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129f0:	f7ed fffe 	bl	80009f0 <__aeabi_dcmplt>
 80129f4:	e79f      	b.n	8012936 <_strtod_l+0xb0e>
 80129f6:	2300      	movs	r3, #0
 80129f8:	930d      	str	r3, [sp, #52]	; 0x34
 80129fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80129fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80129fe:	6013      	str	r3, [r2, #0]
 8012a00:	f7ff ba55 	b.w	8011eae <_strtod_l+0x86>
 8012a04:	2b65      	cmp	r3, #101	; 0x65
 8012a06:	f04f 0200 	mov.w	r2, #0
 8012a0a:	f43f ab42 	beq.w	8012092 <_strtod_l+0x26a>
 8012a0e:	2101      	movs	r1, #1
 8012a10:	4614      	mov	r4, r2
 8012a12:	9105      	str	r1, [sp, #20]
 8012a14:	f7ff babf 	b.w	8011f96 <_strtod_l+0x16e>
 8012a18:	ffc00000 	.word	0xffc00000
 8012a1c:	41dfffff 	.word	0x41dfffff
 8012a20:	94a03595 	.word	0x94a03595
 8012a24:	3fcfffff 	.word	0x3fcfffff

08012a28 <strtod>:
 8012a28:	4b06      	ldr	r3, [pc, #24]	; (8012a44 <strtod+0x1c>)
 8012a2a:	b410      	push	{r4}
 8012a2c:	681c      	ldr	r4, [r3, #0]
 8012a2e:	4a06      	ldr	r2, [pc, #24]	; (8012a48 <strtod+0x20>)
 8012a30:	6a23      	ldr	r3, [r4, #32]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	bf08      	it	eq
 8012a36:	4613      	moveq	r3, r2
 8012a38:	460a      	mov	r2, r1
 8012a3a:	4601      	mov	r1, r0
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	bc10      	pop	{r4}
 8012a40:	f7ff b9f2 	b.w	8011e28 <_strtod_l>
 8012a44:	20000060 	.word	0x20000060
 8012a48:	200000c4 	.word	0x200000c4

08012a4c <strtof>:
 8012a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a50:	4e21      	ldr	r6, [pc, #132]	; (8012ad8 <strtof+0x8c>)
 8012a52:	4a22      	ldr	r2, [pc, #136]	; (8012adc <strtof+0x90>)
 8012a54:	6834      	ldr	r4, [r6, #0]
 8012a56:	6a23      	ldr	r3, [r4, #32]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	bf08      	it	eq
 8012a5c:	4613      	moveq	r3, r2
 8012a5e:	460a      	mov	r2, r1
 8012a60:	4601      	mov	r1, r0
 8012a62:	4620      	mov	r0, r4
 8012a64:	f7ff f9e0 	bl	8011e28 <_strtod_l>
 8012a68:	4605      	mov	r5, r0
 8012a6a:	460c      	mov	r4, r1
 8012a6c:	4602      	mov	r2, r0
 8012a6e:	460b      	mov	r3, r1
 8012a70:	4628      	mov	r0, r5
 8012a72:	4621      	mov	r1, r4
 8012a74:	f7ed ffe4 	bl	8000a40 <__aeabi_dcmpun>
 8012a78:	b120      	cbz	r0, 8012a84 <strtof+0x38>
 8012a7a:	2000      	movs	r0, #0
 8012a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a80:	f002 bade 	b.w	8015040 <nanf>
 8012a84:	4621      	mov	r1, r4
 8012a86:	4628      	mov	r0, r5
 8012a88:	f7ee f838 	bl	8000afc <__aeabi_d2f>
 8012a8c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8012a90:	4607      	mov	r7, r0
 8012a92:	4913      	ldr	r1, [pc, #76]	; (8012ae0 <strtof+0x94>)
 8012a94:	4640      	mov	r0, r8
 8012a96:	f7ee fb55 	bl	8001144 <__aeabi_fcmpun>
 8012a9a:	b9c8      	cbnz	r0, 8012ad0 <strtof+0x84>
 8012a9c:	4910      	ldr	r1, [pc, #64]	; (8012ae0 <strtof+0x94>)
 8012a9e:	4640      	mov	r0, r8
 8012aa0:	f7ee fb32 	bl	8001108 <__aeabi_fcmple>
 8012aa4:	b9a0      	cbnz	r0, 8012ad0 <strtof+0x84>
 8012aa6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8012aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8012aae:	4b0d      	ldr	r3, [pc, #52]	; (8012ae4 <strtof+0x98>)
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	4621      	mov	r1, r4
 8012ab4:	f7ed ffc4 	bl	8000a40 <__aeabi_dcmpun>
 8012ab8:	b938      	cbnz	r0, 8012aca <strtof+0x7e>
 8012aba:	f04f 32ff 	mov.w	r2, #4294967295
 8012abe:	4b09      	ldr	r3, [pc, #36]	; (8012ae4 <strtof+0x98>)
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	4621      	mov	r1, r4
 8012ac4:	f7ed ff9e 	bl	8000a04 <__aeabi_dcmple>
 8012ac8:	b110      	cbz	r0, 8012ad0 <strtof+0x84>
 8012aca:	2222      	movs	r2, #34	; 0x22
 8012acc:	6833      	ldr	r3, [r6, #0]
 8012ace:	601a      	str	r2, [r3, #0]
 8012ad0:	4638      	mov	r0, r7
 8012ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad6:	bf00      	nop
 8012ad8:	20000060 	.word	0x20000060
 8012adc:	200000c4 	.word	0x200000c4
 8012ae0:	7f7fffff 	.word	0x7f7fffff
 8012ae4:	7fefffff 	.word	0x7fefffff

08012ae8 <__strtok_r>:
 8012ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012aea:	b918      	cbnz	r0, 8012af4 <__strtok_r+0xc>
 8012aec:	6810      	ldr	r0, [r2, #0]
 8012aee:	b908      	cbnz	r0, 8012af4 <__strtok_r+0xc>
 8012af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012af2:	4620      	mov	r0, r4
 8012af4:	4604      	mov	r4, r0
 8012af6:	460f      	mov	r7, r1
 8012af8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012afc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012b00:	b91e      	cbnz	r6, 8012b0a <__strtok_r+0x22>
 8012b02:	b96d      	cbnz	r5, 8012b20 <__strtok_r+0x38>
 8012b04:	6015      	str	r5, [r2, #0]
 8012b06:	4628      	mov	r0, r5
 8012b08:	e7f2      	b.n	8012af0 <__strtok_r+0x8>
 8012b0a:	42b5      	cmp	r5, r6
 8012b0c:	d1f6      	bne.n	8012afc <__strtok_r+0x14>
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1ef      	bne.n	8012af2 <__strtok_r+0xa>
 8012b12:	6014      	str	r4, [r2, #0]
 8012b14:	7003      	strb	r3, [r0, #0]
 8012b16:	e7eb      	b.n	8012af0 <__strtok_r+0x8>
 8012b18:	462b      	mov	r3, r5
 8012b1a:	e00d      	b.n	8012b38 <__strtok_r+0x50>
 8012b1c:	b926      	cbnz	r6, 8012b28 <__strtok_r+0x40>
 8012b1e:	461c      	mov	r4, r3
 8012b20:	4623      	mov	r3, r4
 8012b22:	460f      	mov	r7, r1
 8012b24:	f813 5b01 	ldrb.w	r5, [r3], #1
 8012b28:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012b2c:	42b5      	cmp	r5, r6
 8012b2e:	d1f5      	bne.n	8012b1c <__strtok_r+0x34>
 8012b30:	2d00      	cmp	r5, #0
 8012b32:	d0f1      	beq.n	8012b18 <__strtok_r+0x30>
 8012b34:	2100      	movs	r1, #0
 8012b36:	7021      	strb	r1, [r4, #0]
 8012b38:	6013      	str	r3, [r2, #0]
 8012b3a:	e7d9      	b.n	8012af0 <__strtok_r+0x8>

08012b3c <strtok_r>:
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	f7ff bfd3 	b.w	8012ae8 <__strtok_r>

08012b42 <_strtoul_l.isra.0>:
 8012b42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b46:	4680      	mov	r8, r0
 8012b48:	4689      	mov	r9, r1
 8012b4a:	4692      	mov	sl, r2
 8012b4c:	461e      	mov	r6, r3
 8012b4e:	460f      	mov	r7, r1
 8012b50:	463d      	mov	r5, r7
 8012b52:	9808      	ldr	r0, [sp, #32]
 8012b54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b58:	f7fe fc9c 	bl	8011494 <__locale_ctype_ptr_l>
 8012b5c:	4420      	add	r0, r4
 8012b5e:	7843      	ldrb	r3, [r0, #1]
 8012b60:	f013 0308 	ands.w	r3, r3, #8
 8012b64:	d130      	bne.n	8012bc8 <_strtoul_l.isra.0+0x86>
 8012b66:	2c2d      	cmp	r4, #45	; 0x2d
 8012b68:	d130      	bne.n	8012bcc <_strtoul_l.isra.0+0x8a>
 8012b6a:	2101      	movs	r1, #1
 8012b6c:	787c      	ldrb	r4, [r7, #1]
 8012b6e:	1cbd      	adds	r5, r7, #2
 8012b70:	2e00      	cmp	r6, #0
 8012b72:	d05c      	beq.n	8012c2e <_strtoul_l.isra.0+0xec>
 8012b74:	2e10      	cmp	r6, #16
 8012b76:	d109      	bne.n	8012b8c <_strtoul_l.isra.0+0x4a>
 8012b78:	2c30      	cmp	r4, #48	; 0x30
 8012b7a:	d107      	bne.n	8012b8c <_strtoul_l.isra.0+0x4a>
 8012b7c:	782b      	ldrb	r3, [r5, #0]
 8012b7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012b82:	2b58      	cmp	r3, #88	; 0x58
 8012b84:	d14e      	bne.n	8012c24 <_strtoul_l.isra.0+0xe2>
 8012b86:	2610      	movs	r6, #16
 8012b88:	786c      	ldrb	r4, [r5, #1]
 8012b8a:	3502      	adds	r5, #2
 8012b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b90:	fbb2 f2f6 	udiv	r2, r2, r6
 8012b94:	2300      	movs	r3, #0
 8012b96:	fb06 fc02 	mul.w	ip, r6, r2
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	ea6f 0c0c 	mvn.w	ip, ip
 8012ba0:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012ba4:	2f09      	cmp	r7, #9
 8012ba6:	d817      	bhi.n	8012bd8 <_strtoul_l.isra.0+0x96>
 8012ba8:	463c      	mov	r4, r7
 8012baa:	42a6      	cmp	r6, r4
 8012bac:	dd23      	ble.n	8012bf6 <_strtoul_l.isra.0+0xb4>
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	db1e      	blt.n	8012bf0 <_strtoul_l.isra.0+0xae>
 8012bb2:	4282      	cmp	r2, r0
 8012bb4:	d31c      	bcc.n	8012bf0 <_strtoul_l.isra.0+0xae>
 8012bb6:	d101      	bne.n	8012bbc <_strtoul_l.isra.0+0x7a>
 8012bb8:	45a4      	cmp	ip, r4
 8012bba:	db19      	blt.n	8012bf0 <_strtoul_l.isra.0+0xae>
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	fb00 4006 	mla	r0, r0, r6, r4
 8012bc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012bc6:	e7eb      	b.n	8012ba0 <_strtoul_l.isra.0+0x5e>
 8012bc8:	462f      	mov	r7, r5
 8012bca:	e7c1      	b.n	8012b50 <_strtoul_l.isra.0+0xe>
 8012bcc:	2c2b      	cmp	r4, #43	; 0x2b
 8012bce:	bf04      	itt	eq
 8012bd0:	1cbd      	addeq	r5, r7, #2
 8012bd2:	787c      	ldrbeq	r4, [r7, #1]
 8012bd4:	4619      	mov	r1, r3
 8012bd6:	e7cb      	b.n	8012b70 <_strtoul_l.isra.0+0x2e>
 8012bd8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012bdc:	2f19      	cmp	r7, #25
 8012bde:	d801      	bhi.n	8012be4 <_strtoul_l.isra.0+0xa2>
 8012be0:	3c37      	subs	r4, #55	; 0x37
 8012be2:	e7e2      	b.n	8012baa <_strtoul_l.isra.0+0x68>
 8012be4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012be8:	2f19      	cmp	r7, #25
 8012bea:	d804      	bhi.n	8012bf6 <_strtoul_l.isra.0+0xb4>
 8012bec:	3c57      	subs	r4, #87	; 0x57
 8012bee:	e7dc      	b.n	8012baa <_strtoul_l.isra.0+0x68>
 8012bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8012bf4:	e7e5      	b.n	8012bc2 <_strtoul_l.isra.0+0x80>
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	da09      	bge.n	8012c0e <_strtoul_l.isra.0+0xcc>
 8012bfa:	2322      	movs	r3, #34	; 0x22
 8012bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8012c00:	f8c8 3000 	str.w	r3, [r8]
 8012c04:	f1ba 0f00 	cmp.w	sl, #0
 8012c08:	d107      	bne.n	8012c1a <_strtoul_l.isra.0+0xd8>
 8012c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0e:	b101      	cbz	r1, 8012c12 <_strtoul_l.isra.0+0xd0>
 8012c10:	4240      	negs	r0, r0
 8012c12:	f1ba 0f00 	cmp.w	sl, #0
 8012c16:	d0f8      	beq.n	8012c0a <_strtoul_l.isra.0+0xc8>
 8012c18:	b10b      	cbz	r3, 8012c1e <_strtoul_l.isra.0+0xdc>
 8012c1a:	f105 39ff 	add.w	r9, r5, #4294967295
 8012c1e:	f8ca 9000 	str.w	r9, [sl]
 8012c22:	e7f2      	b.n	8012c0a <_strtoul_l.isra.0+0xc8>
 8012c24:	2430      	movs	r4, #48	; 0x30
 8012c26:	2e00      	cmp	r6, #0
 8012c28:	d1b0      	bne.n	8012b8c <_strtoul_l.isra.0+0x4a>
 8012c2a:	2608      	movs	r6, #8
 8012c2c:	e7ae      	b.n	8012b8c <_strtoul_l.isra.0+0x4a>
 8012c2e:	2c30      	cmp	r4, #48	; 0x30
 8012c30:	d0a4      	beq.n	8012b7c <_strtoul_l.isra.0+0x3a>
 8012c32:	260a      	movs	r6, #10
 8012c34:	e7aa      	b.n	8012b8c <_strtoul_l.isra.0+0x4a>
	...

08012c38 <strtoul>:
 8012c38:	4b08      	ldr	r3, [pc, #32]	; (8012c5c <strtoul+0x24>)
 8012c3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c3c:	681c      	ldr	r4, [r3, #0]
 8012c3e:	4d08      	ldr	r5, [pc, #32]	; (8012c60 <strtoul+0x28>)
 8012c40:	6a23      	ldr	r3, [r4, #32]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	bf08      	it	eq
 8012c46:	462b      	moveq	r3, r5
 8012c48:	9300      	str	r3, [sp, #0]
 8012c4a:	4613      	mov	r3, r2
 8012c4c:	460a      	mov	r2, r1
 8012c4e:	4601      	mov	r1, r0
 8012c50:	4620      	mov	r0, r4
 8012c52:	f7ff ff76 	bl	8012b42 <_strtoul_l.isra.0>
 8012c56:	b003      	add	sp, #12
 8012c58:	bd30      	pop	{r4, r5, pc}
 8012c5a:	bf00      	nop
 8012c5c:	20000060 	.word	0x20000060
 8012c60:	200000c4 	.word	0x200000c4

08012c64 <_vsniprintf_r>:
 8012c64:	b530      	push	{r4, r5, lr}
 8012c66:	1e14      	subs	r4, r2, #0
 8012c68:	4605      	mov	r5, r0
 8012c6a:	b09b      	sub	sp, #108	; 0x6c
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	da05      	bge.n	8012c7c <_vsniprintf_r+0x18>
 8012c70:	238b      	movs	r3, #139	; 0x8b
 8012c72:	f04f 30ff 	mov.w	r0, #4294967295
 8012c76:	602b      	str	r3, [r5, #0]
 8012c78:	b01b      	add	sp, #108	; 0x6c
 8012c7a:	bd30      	pop	{r4, r5, pc}
 8012c7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012c80:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012c84:	bf0c      	ite	eq
 8012c86:	4623      	moveq	r3, r4
 8012c88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012c8c:	9302      	str	r3, [sp, #8]
 8012c8e:	9305      	str	r3, [sp, #20]
 8012c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c94:	9100      	str	r1, [sp, #0]
 8012c96:	9104      	str	r1, [sp, #16]
 8012c98:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012c9c:	4602      	mov	r2, r0
 8012c9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012ca0:	4669      	mov	r1, sp
 8012ca2:	4628      	mov	r0, r5
 8012ca4:	f001 ff86 	bl	8014bb4 <_svfiprintf_r>
 8012ca8:	1c43      	adds	r3, r0, #1
 8012caa:	bfbc      	itt	lt
 8012cac:	238b      	movlt	r3, #139	; 0x8b
 8012cae:	602b      	strlt	r3, [r5, #0]
 8012cb0:	2c00      	cmp	r4, #0
 8012cb2:	d0e1      	beq.n	8012c78 <_vsniprintf_r+0x14>
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	9b00      	ldr	r3, [sp, #0]
 8012cb8:	701a      	strb	r2, [r3, #0]
 8012cba:	e7dd      	b.n	8012c78 <_vsniprintf_r+0x14>

08012cbc <vsniprintf>:
 8012cbc:	b507      	push	{r0, r1, r2, lr}
 8012cbe:	9300      	str	r3, [sp, #0]
 8012cc0:	4613      	mov	r3, r2
 8012cc2:	460a      	mov	r2, r1
 8012cc4:	4601      	mov	r1, r0
 8012cc6:	4803      	ldr	r0, [pc, #12]	; (8012cd4 <vsniprintf+0x18>)
 8012cc8:	6800      	ldr	r0, [r0, #0]
 8012cca:	f7ff ffcb 	bl	8012c64 <_vsniprintf_r>
 8012cce:	b003      	add	sp, #12
 8012cd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8012cd4:	20000060 	.word	0x20000060

08012cd8 <__ascii_wctomb>:
 8012cd8:	b149      	cbz	r1, 8012cee <__ascii_wctomb+0x16>
 8012cda:	2aff      	cmp	r2, #255	; 0xff
 8012cdc:	bf8b      	itete	hi
 8012cde:	238a      	movhi	r3, #138	; 0x8a
 8012ce0:	700a      	strbls	r2, [r1, #0]
 8012ce2:	6003      	strhi	r3, [r0, #0]
 8012ce4:	2001      	movls	r0, #1
 8012ce6:	bf88      	it	hi
 8012ce8:	f04f 30ff 	movhi.w	r0, #4294967295
 8012cec:	4770      	bx	lr
 8012cee:	4608      	mov	r0, r1
 8012cf0:	4770      	bx	lr

08012cf2 <quorem>:
 8012cf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf6:	6903      	ldr	r3, [r0, #16]
 8012cf8:	690c      	ldr	r4, [r1, #16]
 8012cfa:	4680      	mov	r8, r0
 8012cfc:	42a3      	cmp	r3, r4
 8012cfe:	f2c0 8084 	blt.w	8012e0a <quorem+0x118>
 8012d02:	3c01      	subs	r4, #1
 8012d04:	f101 0714 	add.w	r7, r1, #20
 8012d08:	f100 0614 	add.w	r6, r0, #20
 8012d0c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012d10:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012d14:	3501      	adds	r5, #1
 8012d16:	fbb0 f5f5 	udiv	r5, r0, r5
 8012d1a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012d1e:	eb06 030c 	add.w	r3, r6, ip
 8012d22:	eb07 090c 	add.w	r9, r7, ip
 8012d26:	9301      	str	r3, [sp, #4]
 8012d28:	b39d      	cbz	r5, 8012d92 <quorem+0xa0>
 8012d2a:	f04f 0a00 	mov.w	sl, #0
 8012d2e:	4638      	mov	r0, r7
 8012d30:	46b6      	mov	lr, r6
 8012d32:	46d3      	mov	fp, sl
 8012d34:	f850 2b04 	ldr.w	r2, [r0], #4
 8012d38:	b293      	uxth	r3, r2
 8012d3a:	fb05 a303 	mla	r3, r5, r3, sl
 8012d3e:	0c12      	lsrs	r2, r2, #16
 8012d40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012d44:	fb05 a202 	mla	r2, r5, r2, sl
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	ebab 0303 	sub.w	r3, fp, r3
 8012d4e:	f8de b000 	ldr.w	fp, [lr]
 8012d52:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012d56:	fa1f fb8b 	uxth.w	fp, fp
 8012d5a:	445b      	add	r3, fp
 8012d5c:	fa1f fb82 	uxth.w	fp, r2
 8012d60:	f8de 2000 	ldr.w	r2, [lr]
 8012d64:	4581      	cmp	r9, r0
 8012d66:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012d6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d6e:	b29b      	uxth	r3, r3
 8012d70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d74:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012d78:	f84e 3b04 	str.w	r3, [lr], #4
 8012d7c:	d2da      	bcs.n	8012d34 <quorem+0x42>
 8012d7e:	f856 300c 	ldr.w	r3, [r6, ip]
 8012d82:	b933      	cbnz	r3, 8012d92 <quorem+0xa0>
 8012d84:	9b01      	ldr	r3, [sp, #4]
 8012d86:	3b04      	subs	r3, #4
 8012d88:	429e      	cmp	r6, r3
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	d331      	bcc.n	8012df2 <quorem+0x100>
 8012d8e:	f8c8 4010 	str.w	r4, [r8, #16]
 8012d92:	4640      	mov	r0, r8
 8012d94:	f001 fc5a 	bl	801464c <__mcmp>
 8012d98:	2800      	cmp	r0, #0
 8012d9a:	db26      	blt.n	8012dea <quorem+0xf8>
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	f04f 0c00 	mov.w	ip, #0
 8012da2:	3501      	adds	r5, #1
 8012da4:	f857 1b04 	ldr.w	r1, [r7], #4
 8012da8:	f8d0 e000 	ldr.w	lr, [r0]
 8012dac:	b28b      	uxth	r3, r1
 8012dae:	ebac 0303 	sub.w	r3, ip, r3
 8012db2:	fa1f f28e 	uxth.w	r2, lr
 8012db6:	4413      	add	r3, r2
 8012db8:	0c0a      	lsrs	r2, r1, #16
 8012dba:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012dbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012dc8:	45b9      	cmp	r9, r7
 8012dca:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012dce:	f840 3b04 	str.w	r3, [r0], #4
 8012dd2:	d2e7      	bcs.n	8012da4 <quorem+0xb2>
 8012dd4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012dd8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012ddc:	b92a      	cbnz	r2, 8012dea <quorem+0xf8>
 8012dde:	3b04      	subs	r3, #4
 8012de0:	429e      	cmp	r6, r3
 8012de2:	461a      	mov	r2, r3
 8012de4:	d30b      	bcc.n	8012dfe <quorem+0x10c>
 8012de6:	f8c8 4010 	str.w	r4, [r8, #16]
 8012dea:	4628      	mov	r0, r5
 8012dec:	b003      	add	sp, #12
 8012dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df2:	6812      	ldr	r2, [r2, #0]
 8012df4:	3b04      	subs	r3, #4
 8012df6:	2a00      	cmp	r2, #0
 8012df8:	d1c9      	bne.n	8012d8e <quorem+0x9c>
 8012dfa:	3c01      	subs	r4, #1
 8012dfc:	e7c4      	b.n	8012d88 <quorem+0x96>
 8012dfe:	6812      	ldr	r2, [r2, #0]
 8012e00:	3b04      	subs	r3, #4
 8012e02:	2a00      	cmp	r2, #0
 8012e04:	d1ef      	bne.n	8012de6 <quorem+0xf4>
 8012e06:	3c01      	subs	r4, #1
 8012e08:	e7ea      	b.n	8012de0 <quorem+0xee>
 8012e0a:	2000      	movs	r0, #0
 8012e0c:	e7ee      	b.n	8012dec <quorem+0xfa>
	...

08012e10 <_dtoa_r>:
 8012e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e14:	4616      	mov	r6, r2
 8012e16:	461f      	mov	r7, r3
 8012e18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012e1a:	b095      	sub	sp, #84	; 0x54
 8012e1c:	4604      	mov	r4, r0
 8012e1e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8012e22:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012e26:	b93d      	cbnz	r5, 8012e38 <_dtoa_r+0x28>
 8012e28:	2010      	movs	r0, #16
 8012e2a:	f001 f9a7 	bl	801417c <malloc>
 8012e2e:	6260      	str	r0, [r4, #36]	; 0x24
 8012e30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012e34:	6005      	str	r5, [r0, #0]
 8012e36:	60c5      	str	r5, [r0, #12]
 8012e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e3a:	6819      	ldr	r1, [r3, #0]
 8012e3c:	b151      	cbz	r1, 8012e54 <_dtoa_r+0x44>
 8012e3e:	685a      	ldr	r2, [r3, #4]
 8012e40:	2301      	movs	r3, #1
 8012e42:	4093      	lsls	r3, r2
 8012e44:	604a      	str	r2, [r1, #4]
 8012e46:	608b      	str	r3, [r1, #8]
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f001 f9e1 	bl	8014210 <_Bfree>
 8012e4e:	2200      	movs	r2, #0
 8012e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e52:	601a      	str	r2, [r3, #0]
 8012e54:	1e3b      	subs	r3, r7, #0
 8012e56:	bfaf      	iteee	ge
 8012e58:	2300      	movge	r3, #0
 8012e5a:	2201      	movlt	r2, #1
 8012e5c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012e60:	9303      	strlt	r3, [sp, #12]
 8012e62:	bfac      	ite	ge
 8012e64:	f8c8 3000 	strge.w	r3, [r8]
 8012e68:	f8c8 2000 	strlt.w	r2, [r8]
 8012e6c:	4bae      	ldr	r3, [pc, #696]	; (8013128 <_dtoa_r+0x318>)
 8012e6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012e72:	ea33 0308 	bics.w	r3, r3, r8
 8012e76:	d11b      	bne.n	8012eb0 <_dtoa_r+0xa0>
 8012e78:	f242 730f 	movw	r3, #9999	; 0x270f
 8012e7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012e7e:	6013      	str	r3, [r2, #0]
 8012e80:	9b02      	ldr	r3, [sp, #8]
 8012e82:	b923      	cbnz	r3, 8012e8e <_dtoa_r+0x7e>
 8012e84:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	f000 8545 	beq.w	8013918 <_dtoa_r+0xb08>
 8012e8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012e90:	b953      	cbnz	r3, 8012ea8 <_dtoa_r+0x98>
 8012e92:	4ba6      	ldr	r3, [pc, #664]	; (801312c <_dtoa_r+0x31c>)
 8012e94:	e021      	b.n	8012eda <_dtoa_r+0xca>
 8012e96:	4ba6      	ldr	r3, [pc, #664]	; (8013130 <_dtoa_r+0x320>)
 8012e98:	9306      	str	r3, [sp, #24]
 8012e9a:	3308      	adds	r3, #8
 8012e9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012e9e:	6013      	str	r3, [r2, #0]
 8012ea0:	9806      	ldr	r0, [sp, #24]
 8012ea2:	b015      	add	sp, #84	; 0x54
 8012ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea8:	4ba0      	ldr	r3, [pc, #640]	; (801312c <_dtoa_r+0x31c>)
 8012eaa:	9306      	str	r3, [sp, #24]
 8012eac:	3303      	adds	r3, #3
 8012eae:	e7f5      	b.n	8012e9c <_dtoa_r+0x8c>
 8012eb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	4630      	mov	r0, r6
 8012eba:	4639      	mov	r1, r7
 8012ebc:	f7ed fd8e 	bl	80009dc <__aeabi_dcmpeq>
 8012ec0:	4682      	mov	sl, r0
 8012ec2:	b160      	cbz	r0, 8012ede <_dtoa_r+0xce>
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012ec8:	6013      	str	r3, [r2, #0]
 8012eca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	f000 8520 	beq.w	8013912 <_dtoa_r+0xb02>
 8012ed2:	4b98      	ldr	r3, [pc, #608]	; (8013134 <_dtoa_r+0x324>)
 8012ed4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012ed6:	6013      	str	r3, [r2, #0]
 8012ed8:	3b01      	subs	r3, #1
 8012eda:	9306      	str	r3, [sp, #24]
 8012edc:	e7e0      	b.n	8012ea0 <_dtoa_r+0x90>
 8012ede:	ab12      	add	r3, sp, #72	; 0x48
 8012ee0:	9301      	str	r3, [sp, #4]
 8012ee2:	ab13      	add	r3, sp, #76	; 0x4c
 8012ee4:	9300      	str	r3, [sp, #0]
 8012ee6:	4632      	mov	r2, r6
 8012ee8:	463b      	mov	r3, r7
 8012eea:	4620      	mov	r0, r4
 8012eec:	f001 fc9c 	bl	8014828 <__d2b>
 8012ef0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012ef4:	4683      	mov	fp, r0
 8012ef6:	2d00      	cmp	r5, #0
 8012ef8:	d07d      	beq.n	8012ff6 <_dtoa_r+0x1e6>
 8012efa:	46b0      	mov	r8, r6
 8012efc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012f00:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8012f04:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8012f08:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012f0c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8012f10:	2200      	movs	r2, #0
 8012f12:	4b89      	ldr	r3, [pc, #548]	; (8013138 <_dtoa_r+0x328>)
 8012f14:	4640      	mov	r0, r8
 8012f16:	4649      	mov	r1, r9
 8012f18:	f7ed f940 	bl	800019c <__aeabi_dsub>
 8012f1c:	a37c      	add	r3, pc, #496	; (adr r3, 8013110 <_dtoa_r+0x300>)
 8012f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f22:	f7ed faf3 	bl	800050c <__aeabi_dmul>
 8012f26:	a37c      	add	r3, pc, #496	; (adr r3, 8013118 <_dtoa_r+0x308>)
 8012f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2c:	f7ed f938 	bl	80001a0 <__adddf3>
 8012f30:	4606      	mov	r6, r0
 8012f32:	4628      	mov	r0, r5
 8012f34:	460f      	mov	r7, r1
 8012f36:	f7ed fa7f 	bl	8000438 <__aeabi_i2d>
 8012f3a:	a379      	add	r3, pc, #484	; (adr r3, 8013120 <_dtoa_r+0x310>)
 8012f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f40:	f7ed fae4 	bl	800050c <__aeabi_dmul>
 8012f44:	4602      	mov	r2, r0
 8012f46:	460b      	mov	r3, r1
 8012f48:	4630      	mov	r0, r6
 8012f4a:	4639      	mov	r1, r7
 8012f4c:	f7ed f928 	bl	80001a0 <__adddf3>
 8012f50:	4606      	mov	r6, r0
 8012f52:	460f      	mov	r7, r1
 8012f54:	f7ed fd8a 	bl	8000a6c <__aeabi_d2iz>
 8012f58:	2200      	movs	r2, #0
 8012f5a:	4682      	mov	sl, r0
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	4630      	mov	r0, r6
 8012f60:	4639      	mov	r1, r7
 8012f62:	f7ed fd45 	bl	80009f0 <__aeabi_dcmplt>
 8012f66:	b148      	cbz	r0, 8012f7c <_dtoa_r+0x16c>
 8012f68:	4650      	mov	r0, sl
 8012f6a:	f7ed fa65 	bl	8000438 <__aeabi_i2d>
 8012f6e:	4632      	mov	r2, r6
 8012f70:	463b      	mov	r3, r7
 8012f72:	f7ed fd33 	bl	80009dc <__aeabi_dcmpeq>
 8012f76:	b908      	cbnz	r0, 8012f7c <_dtoa_r+0x16c>
 8012f78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f7c:	f1ba 0f16 	cmp.w	sl, #22
 8012f80:	d85a      	bhi.n	8013038 <_dtoa_r+0x228>
 8012f82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012f86:	496d      	ldr	r1, [pc, #436]	; (801313c <_dtoa_r+0x32c>)
 8012f88:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f90:	f7ed fd4c 	bl	8000a2c <__aeabi_dcmpgt>
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d051      	beq.n	801303c <_dtoa_r+0x22c>
 8012f98:	2300      	movs	r3, #0
 8012f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f9e:	930d      	str	r3, [sp, #52]	; 0x34
 8012fa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012fa2:	1b5d      	subs	r5, r3, r5
 8012fa4:	1e6b      	subs	r3, r5, #1
 8012fa6:	9307      	str	r3, [sp, #28]
 8012fa8:	bf43      	ittte	mi
 8012faa:	2300      	movmi	r3, #0
 8012fac:	f1c5 0901 	rsbmi	r9, r5, #1
 8012fb0:	9307      	strmi	r3, [sp, #28]
 8012fb2:	f04f 0900 	movpl.w	r9, #0
 8012fb6:	f1ba 0f00 	cmp.w	sl, #0
 8012fba:	db41      	blt.n	8013040 <_dtoa_r+0x230>
 8012fbc:	9b07      	ldr	r3, [sp, #28]
 8012fbe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8012fc2:	4453      	add	r3, sl
 8012fc4:	9307      	str	r3, [sp, #28]
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	9308      	str	r3, [sp, #32]
 8012fca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012fcc:	2b09      	cmp	r3, #9
 8012fce:	f200 808f 	bhi.w	80130f0 <_dtoa_r+0x2e0>
 8012fd2:	2b05      	cmp	r3, #5
 8012fd4:	bfc4      	itt	gt
 8012fd6:	3b04      	subgt	r3, #4
 8012fd8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8012fda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012fdc:	bfc8      	it	gt
 8012fde:	2500      	movgt	r5, #0
 8012fe0:	f1a3 0302 	sub.w	r3, r3, #2
 8012fe4:	bfd8      	it	le
 8012fe6:	2501      	movle	r5, #1
 8012fe8:	2b03      	cmp	r3, #3
 8012fea:	f200 808d 	bhi.w	8013108 <_dtoa_r+0x2f8>
 8012fee:	e8df f003 	tbb	[pc, r3]
 8012ff2:	7d7b      	.short	0x7d7b
 8012ff4:	6f2f      	.short	0x6f2f
 8012ff6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012ffa:	441d      	add	r5, r3
 8012ffc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013000:	2820      	cmp	r0, #32
 8013002:	dd13      	ble.n	801302c <_dtoa_r+0x21c>
 8013004:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013008:	9b02      	ldr	r3, [sp, #8]
 801300a:	fa08 f800 	lsl.w	r8, r8, r0
 801300e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013012:	fa23 f000 	lsr.w	r0, r3, r0
 8013016:	ea48 0000 	orr.w	r0, r8, r0
 801301a:	f7ed f9fd 	bl	8000418 <__aeabi_ui2d>
 801301e:	2301      	movs	r3, #1
 8013020:	4680      	mov	r8, r0
 8013022:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8013026:	3d01      	subs	r5, #1
 8013028:	9310      	str	r3, [sp, #64]	; 0x40
 801302a:	e771      	b.n	8012f10 <_dtoa_r+0x100>
 801302c:	9b02      	ldr	r3, [sp, #8]
 801302e:	f1c0 0020 	rsb	r0, r0, #32
 8013032:	fa03 f000 	lsl.w	r0, r3, r0
 8013036:	e7f0      	b.n	801301a <_dtoa_r+0x20a>
 8013038:	2301      	movs	r3, #1
 801303a:	e7b0      	b.n	8012f9e <_dtoa_r+0x18e>
 801303c:	900d      	str	r0, [sp, #52]	; 0x34
 801303e:	e7af      	b.n	8012fa0 <_dtoa_r+0x190>
 8013040:	f1ca 0300 	rsb	r3, sl, #0
 8013044:	9308      	str	r3, [sp, #32]
 8013046:	2300      	movs	r3, #0
 8013048:	eba9 090a 	sub.w	r9, r9, sl
 801304c:	930c      	str	r3, [sp, #48]	; 0x30
 801304e:	e7bc      	b.n	8012fca <_dtoa_r+0x1ba>
 8013050:	2301      	movs	r3, #1
 8013052:	9309      	str	r3, [sp, #36]	; 0x24
 8013054:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013056:	2b00      	cmp	r3, #0
 8013058:	dd74      	ble.n	8013144 <_dtoa_r+0x334>
 801305a:	4698      	mov	r8, r3
 801305c:	9304      	str	r3, [sp, #16]
 801305e:	2200      	movs	r2, #0
 8013060:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013062:	6072      	str	r2, [r6, #4]
 8013064:	2204      	movs	r2, #4
 8013066:	f102 0014 	add.w	r0, r2, #20
 801306a:	4298      	cmp	r0, r3
 801306c:	6871      	ldr	r1, [r6, #4]
 801306e:	d96e      	bls.n	801314e <_dtoa_r+0x33e>
 8013070:	4620      	mov	r0, r4
 8013072:	f001 f899 	bl	80141a8 <_Balloc>
 8013076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013078:	6030      	str	r0, [r6, #0]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	f1b8 0f0e 	cmp.w	r8, #14
 8013080:	9306      	str	r3, [sp, #24]
 8013082:	f200 80ed 	bhi.w	8013260 <_dtoa_r+0x450>
 8013086:	2d00      	cmp	r5, #0
 8013088:	f000 80ea 	beq.w	8013260 <_dtoa_r+0x450>
 801308c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013090:	f1ba 0f00 	cmp.w	sl, #0
 8013094:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013098:	dd77      	ble.n	801318a <_dtoa_r+0x37a>
 801309a:	4a28      	ldr	r2, [pc, #160]	; (801313c <_dtoa_r+0x32c>)
 801309c:	f00a 030f 	and.w	r3, sl, #15
 80130a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80130a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80130a8:	06f0      	lsls	r0, r6, #27
 80130aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80130b2:	d568      	bpl.n	8013186 <_dtoa_r+0x376>
 80130b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80130b8:	4b21      	ldr	r3, [pc, #132]	; (8013140 <_dtoa_r+0x330>)
 80130ba:	2503      	movs	r5, #3
 80130bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80130c0:	f7ed fb4e 	bl	8000760 <__aeabi_ddiv>
 80130c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130c8:	f006 060f 	and.w	r6, r6, #15
 80130cc:	4f1c      	ldr	r7, [pc, #112]	; (8013140 <_dtoa_r+0x330>)
 80130ce:	e04f      	b.n	8013170 <_dtoa_r+0x360>
 80130d0:	2301      	movs	r3, #1
 80130d2:	9309      	str	r3, [sp, #36]	; 0x24
 80130d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80130d6:	4453      	add	r3, sl
 80130d8:	f103 0801 	add.w	r8, r3, #1
 80130dc:	9304      	str	r3, [sp, #16]
 80130de:	4643      	mov	r3, r8
 80130e0:	2b01      	cmp	r3, #1
 80130e2:	bfb8      	it	lt
 80130e4:	2301      	movlt	r3, #1
 80130e6:	e7ba      	b.n	801305e <_dtoa_r+0x24e>
 80130e8:	2300      	movs	r3, #0
 80130ea:	e7b2      	b.n	8013052 <_dtoa_r+0x242>
 80130ec:	2300      	movs	r3, #0
 80130ee:	e7f0      	b.n	80130d2 <_dtoa_r+0x2c2>
 80130f0:	2501      	movs	r5, #1
 80130f2:	2300      	movs	r3, #0
 80130f4:	9509      	str	r5, [sp, #36]	; 0x24
 80130f6:	931e      	str	r3, [sp, #120]	; 0x78
 80130f8:	f04f 33ff 	mov.w	r3, #4294967295
 80130fc:	2200      	movs	r2, #0
 80130fe:	9304      	str	r3, [sp, #16]
 8013100:	4698      	mov	r8, r3
 8013102:	2312      	movs	r3, #18
 8013104:	921f      	str	r2, [sp, #124]	; 0x7c
 8013106:	e7aa      	b.n	801305e <_dtoa_r+0x24e>
 8013108:	2301      	movs	r3, #1
 801310a:	9309      	str	r3, [sp, #36]	; 0x24
 801310c:	e7f4      	b.n	80130f8 <_dtoa_r+0x2e8>
 801310e:	bf00      	nop
 8013110:	636f4361 	.word	0x636f4361
 8013114:	3fd287a7 	.word	0x3fd287a7
 8013118:	8b60c8b3 	.word	0x8b60c8b3
 801311c:	3fc68a28 	.word	0x3fc68a28
 8013120:	509f79fb 	.word	0x509f79fb
 8013124:	3fd34413 	.word	0x3fd34413
 8013128:	7ff00000 	.word	0x7ff00000
 801312c:	0801a192 	.word	0x0801a192
 8013130:	0801a189 	.word	0x0801a189
 8013134:	0801a00f 	.word	0x0801a00f
 8013138:	3ff80000 	.word	0x3ff80000
 801313c:	0801a220 	.word	0x0801a220
 8013140:	0801a1f8 	.word	0x0801a1f8
 8013144:	2301      	movs	r3, #1
 8013146:	9304      	str	r3, [sp, #16]
 8013148:	4698      	mov	r8, r3
 801314a:	461a      	mov	r2, r3
 801314c:	e7da      	b.n	8013104 <_dtoa_r+0x2f4>
 801314e:	3101      	adds	r1, #1
 8013150:	6071      	str	r1, [r6, #4]
 8013152:	0052      	lsls	r2, r2, #1
 8013154:	e787      	b.n	8013066 <_dtoa_r+0x256>
 8013156:	07f1      	lsls	r1, r6, #31
 8013158:	d508      	bpl.n	801316c <_dtoa_r+0x35c>
 801315a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801315e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013162:	f7ed f9d3 	bl	800050c <__aeabi_dmul>
 8013166:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801316a:	3501      	adds	r5, #1
 801316c:	1076      	asrs	r6, r6, #1
 801316e:	3708      	adds	r7, #8
 8013170:	2e00      	cmp	r6, #0
 8013172:	d1f0      	bne.n	8013156 <_dtoa_r+0x346>
 8013174:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801317c:	f7ed faf0 	bl	8000760 <__aeabi_ddiv>
 8013180:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013184:	e01b      	b.n	80131be <_dtoa_r+0x3ae>
 8013186:	2502      	movs	r5, #2
 8013188:	e7a0      	b.n	80130cc <_dtoa_r+0x2bc>
 801318a:	f000 80a4 	beq.w	80132d6 <_dtoa_r+0x4c6>
 801318e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013192:	f1ca 0600 	rsb	r6, sl, #0
 8013196:	4ba0      	ldr	r3, [pc, #640]	; (8013418 <_dtoa_r+0x608>)
 8013198:	f006 020f 	and.w	r2, r6, #15
 801319c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a4:	f7ed f9b2 	bl	800050c <__aeabi_dmul>
 80131a8:	2502      	movs	r5, #2
 80131aa:	2300      	movs	r3, #0
 80131ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131b0:	4f9a      	ldr	r7, [pc, #616]	; (801341c <_dtoa_r+0x60c>)
 80131b2:	1136      	asrs	r6, r6, #4
 80131b4:	2e00      	cmp	r6, #0
 80131b6:	f040 8083 	bne.w	80132c0 <_dtoa_r+0x4b0>
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d1e0      	bne.n	8013180 <_dtoa_r+0x370>
 80131be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	f000 808a 	beq.w	80132da <_dtoa_r+0x4ca>
 80131c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80131ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80131ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80131d2:	2200      	movs	r2, #0
 80131d4:	4b92      	ldr	r3, [pc, #584]	; (8013420 <_dtoa_r+0x610>)
 80131d6:	f7ed fc0b 	bl	80009f0 <__aeabi_dcmplt>
 80131da:	2800      	cmp	r0, #0
 80131dc:	d07d      	beq.n	80132da <_dtoa_r+0x4ca>
 80131de:	f1b8 0f00 	cmp.w	r8, #0
 80131e2:	d07a      	beq.n	80132da <_dtoa_r+0x4ca>
 80131e4:	9b04      	ldr	r3, [sp, #16]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	dd36      	ble.n	8013258 <_dtoa_r+0x448>
 80131ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80131ee:	2200      	movs	r2, #0
 80131f0:	4b8c      	ldr	r3, [pc, #560]	; (8013424 <_dtoa_r+0x614>)
 80131f2:	f7ed f98b 	bl	800050c <__aeabi_dmul>
 80131f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131fa:	9e04      	ldr	r6, [sp, #16]
 80131fc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8013200:	3501      	adds	r5, #1
 8013202:	4628      	mov	r0, r5
 8013204:	f7ed f918 	bl	8000438 <__aeabi_i2d>
 8013208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801320c:	f7ed f97e 	bl	800050c <__aeabi_dmul>
 8013210:	2200      	movs	r2, #0
 8013212:	4b85      	ldr	r3, [pc, #532]	; (8013428 <_dtoa_r+0x618>)
 8013214:	f7ec ffc4 	bl	80001a0 <__adddf3>
 8013218:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801321c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013220:	950b      	str	r5, [sp, #44]	; 0x2c
 8013222:	2e00      	cmp	r6, #0
 8013224:	d15c      	bne.n	80132e0 <_dtoa_r+0x4d0>
 8013226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801322a:	2200      	movs	r2, #0
 801322c:	4b7f      	ldr	r3, [pc, #508]	; (801342c <_dtoa_r+0x61c>)
 801322e:	f7ec ffb5 	bl	800019c <__aeabi_dsub>
 8013232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013234:	462b      	mov	r3, r5
 8013236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801323a:	f7ed fbf7 	bl	8000a2c <__aeabi_dcmpgt>
 801323e:	2800      	cmp	r0, #0
 8013240:	f040 8281 	bne.w	8013746 <_dtoa_r+0x936>
 8013244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801324a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801324e:	f7ed fbcf 	bl	80009f0 <__aeabi_dcmplt>
 8013252:	2800      	cmp	r0, #0
 8013254:	f040 8275 	bne.w	8013742 <_dtoa_r+0x932>
 8013258:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801325c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013260:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013262:	2b00      	cmp	r3, #0
 8013264:	f2c0 814b 	blt.w	80134fe <_dtoa_r+0x6ee>
 8013268:	f1ba 0f0e 	cmp.w	sl, #14
 801326c:	f300 8147 	bgt.w	80134fe <_dtoa_r+0x6ee>
 8013270:	4b69      	ldr	r3, [pc, #420]	; (8013418 <_dtoa_r+0x608>)
 8013272:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801327e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013280:	2b00      	cmp	r3, #0
 8013282:	f280 80d7 	bge.w	8013434 <_dtoa_r+0x624>
 8013286:	f1b8 0f00 	cmp.w	r8, #0
 801328a:	f300 80d3 	bgt.w	8013434 <_dtoa_r+0x624>
 801328e:	f040 8257 	bne.w	8013740 <_dtoa_r+0x930>
 8013292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013296:	2200      	movs	r2, #0
 8013298:	4b64      	ldr	r3, [pc, #400]	; (801342c <_dtoa_r+0x61c>)
 801329a:	f7ed f937 	bl	800050c <__aeabi_dmul>
 801329e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132a2:	f7ed fbb9 	bl	8000a18 <__aeabi_dcmpge>
 80132a6:	4646      	mov	r6, r8
 80132a8:	4647      	mov	r7, r8
 80132aa:	2800      	cmp	r0, #0
 80132ac:	f040 822d 	bne.w	801370a <_dtoa_r+0x8fa>
 80132b0:	9b06      	ldr	r3, [sp, #24]
 80132b2:	9a06      	ldr	r2, [sp, #24]
 80132b4:	1c5d      	adds	r5, r3, #1
 80132b6:	2331      	movs	r3, #49	; 0x31
 80132b8:	f10a 0a01 	add.w	sl, sl, #1
 80132bc:	7013      	strb	r3, [r2, #0]
 80132be:	e228      	b.n	8013712 <_dtoa_r+0x902>
 80132c0:	07f2      	lsls	r2, r6, #31
 80132c2:	d505      	bpl.n	80132d0 <_dtoa_r+0x4c0>
 80132c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80132c8:	f7ed f920 	bl	800050c <__aeabi_dmul>
 80132cc:	2301      	movs	r3, #1
 80132ce:	3501      	adds	r5, #1
 80132d0:	1076      	asrs	r6, r6, #1
 80132d2:	3708      	adds	r7, #8
 80132d4:	e76e      	b.n	80131b4 <_dtoa_r+0x3a4>
 80132d6:	2502      	movs	r5, #2
 80132d8:	e771      	b.n	80131be <_dtoa_r+0x3ae>
 80132da:	4657      	mov	r7, sl
 80132dc:	4646      	mov	r6, r8
 80132de:	e790      	b.n	8013202 <_dtoa_r+0x3f2>
 80132e0:	4b4d      	ldr	r3, [pc, #308]	; (8013418 <_dtoa_r+0x608>)
 80132e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80132e6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80132ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d048      	beq.n	8013382 <_dtoa_r+0x572>
 80132f0:	4602      	mov	r2, r0
 80132f2:	460b      	mov	r3, r1
 80132f4:	2000      	movs	r0, #0
 80132f6:	494e      	ldr	r1, [pc, #312]	; (8013430 <_dtoa_r+0x620>)
 80132f8:	f7ed fa32 	bl	8000760 <__aeabi_ddiv>
 80132fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013300:	f7ec ff4c 	bl	800019c <__aeabi_dsub>
 8013304:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013308:	9d06      	ldr	r5, [sp, #24]
 801330a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801330e:	f7ed fbad 	bl	8000a6c <__aeabi_d2iz>
 8013312:	9011      	str	r0, [sp, #68]	; 0x44
 8013314:	f7ed f890 	bl	8000438 <__aeabi_i2d>
 8013318:	4602      	mov	r2, r0
 801331a:	460b      	mov	r3, r1
 801331c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013320:	f7ec ff3c 	bl	800019c <__aeabi_dsub>
 8013324:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801332a:	3330      	adds	r3, #48	; 0x30
 801332c:	f805 3b01 	strb.w	r3, [r5], #1
 8013330:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013334:	f7ed fb5c 	bl	80009f0 <__aeabi_dcmplt>
 8013338:	2800      	cmp	r0, #0
 801333a:	d163      	bne.n	8013404 <_dtoa_r+0x5f4>
 801333c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013340:	2000      	movs	r0, #0
 8013342:	4937      	ldr	r1, [pc, #220]	; (8013420 <_dtoa_r+0x610>)
 8013344:	f7ec ff2a 	bl	800019c <__aeabi_dsub>
 8013348:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801334c:	f7ed fb50 	bl	80009f0 <__aeabi_dcmplt>
 8013350:	2800      	cmp	r0, #0
 8013352:	f040 80b5 	bne.w	80134c0 <_dtoa_r+0x6b0>
 8013356:	9b06      	ldr	r3, [sp, #24]
 8013358:	1aeb      	subs	r3, r5, r3
 801335a:	429e      	cmp	r6, r3
 801335c:	f77f af7c 	ble.w	8013258 <_dtoa_r+0x448>
 8013360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013364:	2200      	movs	r2, #0
 8013366:	4b2f      	ldr	r3, [pc, #188]	; (8013424 <_dtoa_r+0x614>)
 8013368:	f7ed f8d0 	bl	800050c <__aeabi_dmul>
 801336c:	2200      	movs	r2, #0
 801336e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013376:	4b2b      	ldr	r3, [pc, #172]	; (8013424 <_dtoa_r+0x614>)
 8013378:	f7ed f8c8 	bl	800050c <__aeabi_dmul>
 801337c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013380:	e7c3      	b.n	801330a <_dtoa_r+0x4fa>
 8013382:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013386:	f7ed f8c1 	bl	800050c <__aeabi_dmul>
 801338a:	9b06      	ldr	r3, [sp, #24]
 801338c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013390:	199d      	adds	r5, r3, r6
 8013392:	461e      	mov	r6, r3
 8013394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013398:	f7ed fb68 	bl	8000a6c <__aeabi_d2iz>
 801339c:	9011      	str	r0, [sp, #68]	; 0x44
 801339e:	f7ed f84b 	bl	8000438 <__aeabi_i2d>
 80133a2:	4602      	mov	r2, r0
 80133a4:	460b      	mov	r3, r1
 80133a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133aa:	f7ec fef7 	bl	800019c <__aeabi_dsub>
 80133ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80133b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133b4:	3330      	adds	r3, #48	; 0x30
 80133b6:	f806 3b01 	strb.w	r3, [r6], #1
 80133ba:	42ae      	cmp	r6, r5
 80133bc:	f04f 0200 	mov.w	r2, #0
 80133c0:	d124      	bne.n	801340c <_dtoa_r+0x5fc>
 80133c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80133c6:	4b1a      	ldr	r3, [pc, #104]	; (8013430 <_dtoa_r+0x620>)
 80133c8:	f7ec feea 	bl	80001a0 <__adddf3>
 80133cc:	4602      	mov	r2, r0
 80133ce:	460b      	mov	r3, r1
 80133d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133d4:	f7ed fb2a 	bl	8000a2c <__aeabi_dcmpgt>
 80133d8:	2800      	cmp	r0, #0
 80133da:	d171      	bne.n	80134c0 <_dtoa_r+0x6b0>
 80133dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80133e0:	2000      	movs	r0, #0
 80133e2:	4913      	ldr	r1, [pc, #76]	; (8013430 <_dtoa_r+0x620>)
 80133e4:	f7ec feda 	bl	800019c <__aeabi_dsub>
 80133e8:	4602      	mov	r2, r0
 80133ea:	460b      	mov	r3, r1
 80133ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133f0:	f7ed fafe 	bl	80009f0 <__aeabi_dcmplt>
 80133f4:	2800      	cmp	r0, #0
 80133f6:	f43f af2f 	beq.w	8013258 <_dtoa_r+0x448>
 80133fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80133fe:	1e6a      	subs	r2, r5, #1
 8013400:	2b30      	cmp	r3, #48	; 0x30
 8013402:	d001      	beq.n	8013408 <_dtoa_r+0x5f8>
 8013404:	46ba      	mov	sl, r7
 8013406:	e04a      	b.n	801349e <_dtoa_r+0x68e>
 8013408:	4615      	mov	r5, r2
 801340a:	e7f6      	b.n	80133fa <_dtoa_r+0x5ea>
 801340c:	4b05      	ldr	r3, [pc, #20]	; (8013424 <_dtoa_r+0x614>)
 801340e:	f7ed f87d 	bl	800050c <__aeabi_dmul>
 8013412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013416:	e7bd      	b.n	8013394 <_dtoa_r+0x584>
 8013418:	0801a220 	.word	0x0801a220
 801341c:	0801a1f8 	.word	0x0801a1f8
 8013420:	3ff00000 	.word	0x3ff00000
 8013424:	40240000 	.word	0x40240000
 8013428:	401c0000 	.word	0x401c0000
 801342c:	40140000 	.word	0x40140000
 8013430:	3fe00000 	.word	0x3fe00000
 8013434:	9d06      	ldr	r5, [sp, #24]
 8013436:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801343a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801343e:	4630      	mov	r0, r6
 8013440:	4639      	mov	r1, r7
 8013442:	f7ed f98d 	bl	8000760 <__aeabi_ddiv>
 8013446:	f7ed fb11 	bl	8000a6c <__aeabi_d2iz>
 801344a:	4681      	mov	r9, r0
 801344c:	f7ec fff4 	bl	8000438 <__aeabi_i2d>
 8013450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013454:	f7ed f85a 	bl	800050c <__aeabi_dmul>
 8013458:	4602      	mov	r2, r0
 801345a:	460b      	mov	r3, r1
 801345c:	4630      	mov	r0, r6
 801345e:	4639      	mov	r1, r7
 8013460:	f7ec fe9c 	bl	800019c <__aeabi_dsub>
 8013464:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8013468:	f805 6b01 	strb.w	r6, [r5], #1
 801346c:	9e06      	ldr	r6, [sp, #24]
 801346e:	4602      	mov	r2, r0
 8013470:	1bae      	subs	r6, r5, r6
 8013472:	45b0      	cmp	r8, r6
 8013474:	460b      	mov	r3, r1
 8013476:	d135      	bne.n	80134e4 <_dtoa_r+0x6d4>
 8013478:	f7ec fe92 	bl	80001a0 <__adddf3>
 801347c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013480:	4606      	mov	r6, r0
 8013482:	460f      	mov	r7, r1
 8013484:	f7ed fad2 	bl	8000a2c <__aeabi_dcmpgt>
 8013488:	b9c8      	cbnz	r0, 80134be <_dtoa_r+0x6ae>
 801348a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801348e:	4630      	mov	r0, r6
 8013490:	4639      	mov	r1, r7
 8013492:	f7ed faa3 	bl	80009dc <__aeabi_dcmpeq>
 8013496:	b110      	cbz	r0, 801349e <_dtoa_r+0x68e>
 8013498:	f019 0f01 	tst.w	r9, #1
 801349c:	d10f      	bne.n	80134be <_dtoa_r+0x6ae>
 801349e:	4659      	mov	r1, fp
 80134a0:	4620      	mov	r0, r4
 80134a2:	f000 feb5 	bl	8014210 <_Bfree>
 80134a6:	2300      	movs	r3, #0
 80134a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80134aa:	702b      	strb	r3, [r5, #0]
 80134ac:	f10a 0301 	add.w	r3, sl, #1
 80134b0:	6013      	str	r3, [r2, #0]
 80134b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	f43f acf3 	beq.w	8012ea0 <_dtoa_r+0x90>
 80134ba:	601d      	str	r5, [r3, #0]
 80134bc:	e4f0      	b.n	8012ea0 <_dtoa_r+0x90>
 80134be:	4657      	mov	r7, sl
 80134c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80134c4:	1e6b      	subs	r3, r5, #1
 80134c6:	2a39      	cmp	r2, #57	; 0x39
 80134c8:	d106      	bne.n	80134d8 <_dtoa_r+0x6c8>
 80134ca:	9a06      	ldr	r2, [sp, #24]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d107      	bne.n	80134e0 <_dtoa_r+0x6d0>
 80134d0:	2330      	movs	r3, #48	; 0x30
 80134d2:	7013      	strb	r3, [r2, #0]
 80134d4:	4613      	mov	r3, r2
 80134d6:	3701      	adds	r7, #1
 80134d8:	781a      	ldrb	r2, [r3, #0]
 80134da:	3201      	adds	r2, #1
 80134dc:	701a      	strb	r2, [r3, #0]
 80134de:	e791      	b.n	8013404 <_dtoa_r+0x5f4>
 80134e0:	461d      	mov	r5, r3
 80134e2:	e7ed      	b.n	80134c0 <_dtoa_r+0x6b0>
 80134e4:	2200      	movs	r2, #0
 80134e6:	4b99      	ldr	r3, [pc, #612]	; (801374c <_dtoa_r+0x93c>)
 80134e8:	f7ed f810 	bl	800050c <__aeabi_dmul>
 80134ec:	2200      	movs	r2, #0
 80134ee:	2300      	movs	r3, #0
 80134f0:	4606      	mov	r6, r0
 80134f2:	460f      	mov	r7, r1
 80134f4:	f7ed fa72 	bl	80009dc <__aeabi_dcmpeq>
 80134f8:	2800      	cmp	r0, #0
 80134fa:	d09e      	beq.n	801343a <_dtoa_r+0x62a>
 80134fc:	e7cf      	b.n	801349e <_dtoa_r+0x68e>
 80134fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013500:	2a00      	cmp	r2, #0
 8013502:	f000 8088 	beq.w	8013616 <_dtoa_r+0x806>
 8013506:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013508:	2a01      	cmp	r2, #1
 801350a:	dc6d      	bgt.n	80135e8 <_dtoa_r+0x7d8>
 801350c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801350e:	2a00      	cmp	r2, #0
 8013510:	d066      	beq.n	80135e0 <_dtoa_r+0x7d0>
 8013512:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013516:	464d      	mov	r5, r9
 8013518:	9e08      	ldr	r6, [sp, #32]
 801351a:	9a07      	ldr	r2, [sp, #28]
 801351c:	2101      	movs	r1, #1
 801351e:	441a      	add	r2, r3
 8013520:	4620      	mov	r0, r4
 8013522:	4499      	add	r9, r3
 8013524:	9207      	str	r2, [sp, #28]
 8013526:	f000 ff51 	bl	80143cc <__i2b>
 801352a:	4607      	mov	r7, r0
 801352c:	2d00      	cmp	r5, #0
 801352e:	dd0b      	ble.n	8013548 <_dtoa_r+0x738>
 8013530:	9b07      	ldr	r3, [sp, #28]
 8013532:	2b00      	cmp	r3, #0
 8013534:	dd08      	ble.n	8013548 <_dtoa_r+0x738>
 8013536:	42ab      	cmp	r3, r5
 8013538:	bfa8      	it	ge
 801353a:	462b      	movge	r3, r5
 801353c:	9a07      	ldr	r2, [sp, #28]
 801353e:	eba9 0903 	sub.w	r9, r9, r3
 8013542:	1aed      	subs	r5, r5, r3
 8013544:	1ad3      	subs	r3, r2, r3
 8013546:	9307      	str	r3, [sp, #28]
 8013548:	9b08      	ldr	r3, [sp, #32]
 801354a:	b1eb      	cbz	r3, 8013588 <_dtoa_r+0x778>
 801354c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801354e:	2b00      	cmp	r3, #0
 8013550:	d065      	beq.n	801361e <_dtoa_r+0x80e>
 8013552:	b18e      	cbz	r6, 8013578 <_dtoa_r+0x768>
 8013554:	4639      	mov	r1, r7
 8013556:	4632      	mov	r2, r6
 8013558:	4620      	mov	r0, r4
 801355a:	f000 ffd5 	bl	8014508 <__pow5mult>
 801355e:	465a      	mov	r2, fp
 8013560:	4601      	mov	r1, r0
 8013562:	4607      	mov	r7, r0
 8013564:	4620      	mov	r0, r4
 8013566:	f000 ff3a 	bl	80143de <__multiply>
 801356a:	4659      	mov	r1, fp
 801356c:	900a      	str	r0, [sp, #40]	; 0x28
 801356e:	4620      	mov	r0, r4
 8013570:	f000 fe4e 	bl	8014210 <_Bfree>
 8013574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013576:	469b      	mov	fp, r3
 8013578:	9b08      	ldr	r3, [sp, #32]
 801357a:	1b9a      	subs	r2, r3, r6
 801357c:	d004      	beq.n	8013588 <_dtoa_r+0x778>
 801357e:	4659      	mov	r1, fp
 8013580:	4620      	mov	r0, r4
 8013582:	f000 ffc1 	bl	8014508 <__pow5mult>
 8013586:	4683      	mov	fp, r0
 8013588:	2101      	movs	r1, #1
 801358a:	4620      	mov	r0, r4
 801358c:	f000 ff1e 	bl	80143cc <__i2b>
 8013590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013592:	4606      	mov	r6, r0
 8013594:	2b00      	cmp	r3, #0
 8013596:	f000 81c6 	beq.w	8013926 <_dtoa_r+0xb16>
 801359a:	461a      	mov	r2, r3
 801359c:	4601      	mov	r1, r0
 801359e:	4620      	mov	r0, r4
 80135a0:	f000 ffb2 	bl	8014508 <__pow5mult>
 80135a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80135a6:	4606      	mov	r6, r0
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	dc3e      	bgt.n	801362a <_dtoa_r+0x81a>
 80135ac:	9b02      	ldr	r3, [sp, #8]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d137      	bne.n	8013622 <_dtoa_r+0x812>
 80135b2:	9b03      	ldr	r3, [sp, #12]
 80135b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d134      	bne.n	8013626 <_dtoa_r+0x816>
 80135bc:	9b03      	ldr	r3, [sp, #12]
 80135be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80135c2:	0d1b      	lsrs	r3, r3, #20
 80135c4:	051b      	lsls	r3, r3, #20
 80135c6:	b12b      	cbz	r3, 80135d4 <_dtoa_r+0x7c4>
 80135c8:	9b07      	ldr	r3, [sp, #28]
 80135ca:	f109 0901 	add.w	r9, r9, #1
 80135ce:	3301      	adds	r3, #1
 80135d0:	9307      	str	r3, [sp, #28]
 80135d2:	2301      	movs	r3, #1
 80135d4:	9308      	str	r3, [sp, #32]
 80135d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d128      	bne.n	801362e <_dtoa_r+0x81e>
 80135dc:	2001      	movs	r0, #1
 80135de:	e02e      	b.n	801363e <_dtoa_r+0x82e>
 80135e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80135e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80135e6:	e796      	b.n	8013516 <_dtoa_r+0x706>
 80135e8:	9b08      	ldr	r3, [sp, #32]
 80135ea:	f108 36ff 	add.w	r6, r8, #4294967295
 80135ee:	42b3      	cmp	r3, r6
 80135f0:	bfb7      	itett	lt
 80135f2:	9b08      	ldrlt	r3, [sp, #32]
 80135f4:	1b9e      	subge	r6, r3, r6
 80135f6:	1af2      	sublt	r2, r6, r3
 80135f8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80135fa:	bfbf      	itttt	lt
 80135fc:	9608      	strlt	r6, [sp, #32]
 80135fe:	189b      	addlt	r3, r3, r2
 8013600:	930c      	strlt	r3, [sp, #48]	; 0x30
 8013602:	2600      	movlt	r6, #0
 8013604:	f1b8 0f00 	cmp.w	r8, #0
 8013608:	bfb9      	ittee	lt
 801360a:	eba9 0508 	sublt.w	r5, r9, r8
 801360e:	2300      	movlt	r3, #0
 8013610:	464d      	movge	r5, r9
 8013612:	4643      	movge	r3, r8
 8013614:	e781      	b.n	801351a <_dtoa_r+0x70a>
 8013616:	9e08      	ldr	r6, [sp, #32]
 8013618:	464d      	mov	r5, r9
 801361a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801361c:	e786      	b.n	801352c <_dtoa_r+0x71c>
 801361e:	9a08      	ldr	r2, [sp, #32]
 8013620:	e7ad      	b.n	801357e <_dtoa_r+0x76e>
 8013622:	2300      	movs	r3, #0
 8013624:	e7d6      	b.n	80135d4 <_dtoa_r+0x7c4>
 8013626:	9b02      	ldr	r3, [sp, #8]
 8013628:	e7d4      	b.n	80135d4 <_dtoa_r+0x7c4>
 801362a:	2300      	movs	r3, #0
 801362c:	9308      	str	r3, [sp, #32]
 801362e:	6933      	ldr	r3, [r6, #16]
 8013630:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013634:	6918      	ldr	r0, [r3, #16]
 8013636:	f000 fe7b 	bl	8014330 <__hi0bits>
 801363a:	f1c0 0020 	rsb	r0, r0, #32
 801363e:	9b07      	ldr	r3, [sp, #28]
 8013640:	4418      	add	r0, r3
 8013642:	f010 001f 	ands.w	r0, r0, #31
 8013646:	d047      	beq.n	80136d8 <_dtoa_r+0x8c8>
 8013648:	f1c0 0320 	rsb	r3, r0, #32
 801364c:	2b04      	cmp	r3, #4
 801364e:	dd3b      	ble.n	80136c8 <_dtoa_r+0x8b8>
 8013650:	9b07      	ldr	r3, [sp, #28]
 8013652:	f1c0 001c 	rsb	r0, r0, #28
 8013656:	4481      	add	r9, r0
 8013658:	4405      	add	r5, r0
 801365a:	4403      	add	r3, r0
 801365c:	9307      	str	r3, [sp, #28]
 801365e:	f1b9 0f00 	cmp.w	r9, #0
 8013662:	dd05      	ble.n	8013670 <_dtoa_r+0x860>
 8013664:	4659      	mov	r1, fp
 8013666:	464a      	mov	r2, r9
 8013668:	4620      	mov	r0, r4
 801366a:	f000 ff9b 	bl	80145a4 <__lshift>
 801366e:	4683      	mov	fp, r0
 8013670:	9b07      	ldr	r3, [sp, #28]
 8013672:	2b00      	cmp	r3, #0
 8013674:	dd05      	ble.n	8013682 <_dtoa_r+0x872>
 8013676:	4631      	mov	r1, r6
 8013678:	461a      	mov	r2, r3
 801367a:	4620      	mov	r0, r4
 801367c:	f000 ff92 	bl	80145a4 <__lshift>
 8013680:	4606      	mov	r6, r0
 8013682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013684:	b353      	cbz	r3, 80136dc <_dtoa_r+0x8cc>
 8013686:	4631      	mov	r1, r6
 8013688:	4658      	mov	r0, fp
 801368a:	f000 ffdf 	bl	801464c <__mcmp>
 801368e:	2800      	cmp	r0, #0
 8013690:	da24      	bge.n	80136dc <_dtoa_r+0x8cc>
 8013692:	2300      	movs	r3, #0
 8013694:	4659      	mov	r1, fp
 8013696:	220a      	movs	r2, #10
 8013698:	4620      	mov	r0, r4
 801369a:	f000 fdd0 	bl	801423e <__multadd>
 801369e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80136a4:	4683      	mov	fp, r0
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	f000 8144 	beq.w	8013934 <_dtoa_r+0xb24>
 80136ac:	2300      	movs	r3, #0
 80136ae:	4639      	mov	r1, r7
 80136b0:	220a      	movs	r2, #10
 80136b2:	4620      	mov	r0, r4
 80136b4:	f000 fdc3 	bl	801423e <__multadd>
 80136b8:	9b04      	ldr	r3, [sp, #16]
 80136ba:	4607      	mov	r7, r0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	dc4d      	bgt.n	801375c <_dtoa_r+0x94c>
 80136c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80136c2:	2b02      	cmp	r3, #2
 80136c4:	dd4a      	ble.n	801375c <_dtoa_r+0x94c>
 80136c6:	e011      	b.n	80136ec <_dtoa_r+0x8dc>
 80136c8:	d0c9      	beq.n	801365e <_dtoa_r+0x84e>
 80136ca:	9a07      	ldr	r2, [sp, #28]
 80136cc:	331c      	adds	r3, #28
 80136ce:	441a      	add	r2, r3
 80136d0:	4499      	add	r9, r3
 80136d2:	441d      	add	r5, r3
 80136d4:	4613      	mov	r3, r2
 80136d6:	e7c1      	b.n	801365c <_dtoa_r+0x84c>
 80136d8:	4603      	mov	r3, r0
 80136da:	e7f6      	b.n	80136ca <_dtoa_r+0x8ba>
 80136dc:	f1b8 0f00 	cmp.w	r8, #0
 80136e0:	dc36      	bgt.n	8013750 <_dtoa_r+0x940>
 80136e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80136e4:	2b02      	cmp	r3, #2
 80136e6:	dd33      	ble.n	8013750 <_dtoa_r+0x940>
 80136e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80136ec:	9b04      	ldr	r3, [sp, #16]
 80136ee:	b963      	cbnz	r3, 801370a <_dtoa_r+0x8fa>
 80136f0:	4631      	mov	r1, r6
 80136f2:	2205      	movs	r2, #5
 80136f4:	4620      	mov	r0, r4
 80136f6:	f000 fda2 	bl	801423e <__multadd>
 80136fa:	4601      	mov	r1, r0
 80136fc:	4606      	mov	r6, r0
 80136fe:	4658      	mov	r0, fp
 8013700:	f000 ffa4 	bl	801464c <__mcmp>
 8013704:	2800      	cmp	r0, #0
 8013706:	f73f add3 	bgt.w	80132b0 <_dtoa_r+0x4a0>
 801370a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801370c:	9d06      	ldr	r5, [sp, #24]
 801370e:	ea6f 0a03 	mvn.w	sl, r3
 8013712:	f04f 0900 	mov.w	r9, #0
 8013716:	4631      	mov	r1, r6
 8013718:	4620      	mov	r0, r4
 801371a:	f000 fd79 	bl	8014210 <_Bfree>
 801371e:	2f00      	cmp	r7, #0
 8013720:	f43f aebd 	beq.w	801349e <_dtoa_r+0x68e>
 8013724:	f1b9 0f00 	cmp.w	r9, #0
 8013728:	d005      	beq.n	8013736 <_dtoa_r+0x926>
 801372a:	45b9      	cmp	r9, r7
 801372c:	d003      	beq.n	8013736 <_dtoa_r+0x926>
 801372e:	4649      	mov	r1, r9
 8013730:	4620      	mov	r0, r4
 8013732:	f000 fd6d 	bl	8014210 <_Bfree>
 8013736:	4639      	mov	r1, r7
 8013738:	4620      	mov	r0, r4
 801373a:	f000 fd69 	bl	8014210 <_Bfree>
 801373e:	e6ae      	b.n	801349e <_dtoa_r+0x68e>
 8013740:	2600      	movs	r6, #0
 8013742:	4637      	mov	r7, r6
 8013744:	e7e1      	b.n	801370a <_dtoa_r+0x8fa>
 8013746:	46ba      	mov	sl, r7
 8013748:	4637      	mov	r7, r6
 801374a:	e5b1      	b.n	80132b0 <_dtoa_r+0x4a0>
 801374c:	40240000 	.word	0x40240000
 8013750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013752:	f8cd 8010 	str.w	r8, [sp, #16]
 8013756:	2b00      	cmp	r3, #0
 8013758:	f000 80f3 	beq.w	8013942 <_dtoa_r+0xb32>
 801375c:	2d00      	cmp	r5, #0
 801375e:	dd05      	ble.n	801376c <_dtoa_r+0x95c>
 8013760:	4639      	mov	r1, r7
 8013762:	462a      	mov	r2, r5
 8013764:	4620      	mov	r0, r4
 8013766:	f000 ff1d 	bl	80145a4 <__lshift>
 801376a:	4607      	mov	r7, r0
 801376c:	9b08      	ldr	r3, [sp, #32]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d04c      	beq.n	801380c <_dtoa_r+0x9fc>
 8013772:	6879      	ldr	r1, [r7, #4]
 8013774:	4620      	mov	r0, r4
 8013776:	f000 fd17 	bl	80141a8 <_Balloc>
 801377a:	4605      	mov	r5, r0
 801377c:	693a      	ldr	r2, [r7, #16]
 801377e:	f107 010c 	add.w	r1, r7, #12
 8013782:	3202      	adds	r2, #2
 8013784:	0092      	lsls	r2, r2, #2
 8013786:	300c      	adds	r0, #12
 8013788:	f7fd fea8 	bl	80114dc <memcpy>
 801378c:	2201      	movs	r2, #1
 801378e:	4629      	mov	r1, r5
 8013790:	4620      	mov	r0, r4
 8013792:	f000 ff07 	bl	80145a4 <__lshift>
 8013796:	46b9      	mov	r9, r7
 8013798:	4607      	mov	r7, r0
 801379a:	9b06      	ldr	r3, [sp, #24]
 801379c:	9307      	str	r3, [sp, #28]
 801379e:	9b02      	ldr	r3, [sp, #8]
 80137a0:	f003 0301 	and.w	r3, r3, #1
 80137a4:	9308      	str	r3, [sp, #32]
 80137a6:	4631      	mov	r1, r6
 80137a8:	4658      	mov	r0, fp
 80137aa:	f7ff faa2 	bl	8012cf2 <quorem>
 80137ae:	4649      	mov	r1, r9
 80137b0:	4605      	mov	r5, r0
 80137b2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80137b6:	4658      	mov	r0, fp
 80137b8:	f000 ff48 	bl	801464c <__mcmp>
 80137bc:	463a      	mov	r2, r7
 80137be:	9002      	str	r0, [sp, #8]
 80137c0:	4631      	mov	r1, r6
 80137c2:	4620      	mov	r0, r4
 80137c4:	f000 ff5c 	bl	8014680 <__mdiff>
 80137c8:	68c3      	ldr	r3, [r0, #12]
 80137ca:	4602      	mov	r2, r0
 80137cc:	bb03      	cbnz	r3, 8013810 <_dtoa_r+0xa00>
 80137ce:	4601      	mov	r1, r0
 80137d0:	9009      	str	r0, [sp, #36]	; 0x24
 80137d2:	4658      	mov	r0, fp
 80137d4:	f000 ff3a 	bl	801464c <__mcmp>
 80137d8:	4603      	mov	r3, r0
 80137da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137dc:	4611      	mov	r1, r2
 80137de:	4620      	mov	r0, r4
 80137e0:	9309      	str	r3, [sp, #36]	; 0x24
 80137e2:	f000 fd15 	bl	8014210 <_Bfree>
 80137e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137e8:	b9a3      	cbnz	r3, 8013814 <_dtoa_r+0xa04>
 80137ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80137ec:	b992      	cbnz	r2, 8013814 <_dtoa_r+0xa04>
 80137ee:	9a08      	ldr	r2, [sp, #32]
 80137f0:	b982      	cbnz	r2, 8013814 <_dtoa_r+0xa04>
 80137f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80137f6:	d029      	beq.n	801384c <_dtoa_r+0xa3c>
 80137f8:	9b02      	ldr	r3, [sp, #8]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	dd01      	ble.n	8013802 <_dtoa_r+0x9f2>
 80137fe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013802:	9b07      	ldr	r3, [sp, #28]
 8013804:	1c5d      	adds	r5, r3, #1
 8013806:	f883 8000 	strb.w	r8, [r3]
 801380a:	e784      	b.n	8013716 <_dtoa_r+0x906>
 801380c:	4638      	mov	r0, r7
 801380e:	e7c2      	b.n	8013796 <_dtoa_r+0x986>
 8013810:	2301      	movs	r3, #1
 8013812:	e7e3      	b.n	80137dc <_dtoa_r+0x9cc>
 8013814:	9a02      	ldr	r2, [sp, #8]
 8013816:	2a00      	cmp	r2, #0
 8013818:	db04      	blt.n	8013824 <_dtoa_r+0xa14>
 801381a:	d123      	bne.n	8013864 <_dtoa_r+0xa54>
 801381c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801381e:	bb0a      	cbnz	r2, 8013864 <_dtoa_r+0xa54>
 8013820:	9a08      	ldr	r2, [sp, #32]
 8013822:	b9fa      	cbnz	r2, 8013864 <_dtoa_r+0xa54>
 8013824:	2b00      	cmp	r3, #0
 8013826:	ddec      	ble.n	8013802 <_dtoa_r+0x9f2>
 8013828:	4659      	mov	r1, fp
 801382a:	2201      	movs	r2, #1
 801382c:	4620      	mov	r0, r4
 801382e:	f000 feb9 	bl	80145a4 <__lshift>
 8013832:	4631      	mov	r1, r6
 8013834:	4683      	mov	fp, r0
 8013836:	f000 ff09 	bl	801464c <__mcmp>
 801383a:	2800      	cmp	r0, #0
 801383c:	dc03      	bgt.n	8013846 <_dtoa_r+0xa36>
 801383e:	d1e0      	bne.n	8013802 <_dtoa_r+0x9f2>
 8013840:	f018 0f01 	tst.w	r8, #1
 8013844:	d0dd      	beq.n	8013802 <_dtoa_r+0x9f2>
 8013846:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801384a:	d1d8      	bne.n	80137fe <_dtoa_r+0x9ee>
 801384c:	9b07      	ldr	r3, [sp, #28]
 801384e:	9a07      	ldr	r2, [sp, #28]
 8013850:	1c5d      	adds	r5, r3, #1
 8013852:	2339      	movs	r3, #57	; 0x39
 8013854:	7013      	strb	r3, [r2, #0]
 8013856:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801385a:	1e6a      	subs	r2, r5, #1
 801385c:	2b39      	cmp	r3, #57	; 0x39
 801385e:	d04d      	beq.n	80138fc <_dtoa_r+0xaec>
 8013860:	3301      	adds	r3, #1
 8013862:	e052      	b.n	801390a <_dtoa_r+0xafa>
 8013864:	9a07      	ldr	r2, [sp, #28]
 8013866:	2b00      	cmp	r3, #0
 8013868:	f102 0501 	add.w	r5, r2, #1
 801386c:	dd06      	ble.n	801387c <_dtoa_r+0xa6c>
 801386e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013872:	d0eb      	beq.n	801384c <_dtoa_r+0xa3c>
 8013874:	f108 0801 	add.w	r8, r8, #1
 8013878:	9b07      	ldr	r3, [sp, #28]
 801387a:	e7c4      	b.n	8013806 <_dtoa_r+0x9f6>
 801387c:	9b06      	ldr	r3, [sp, #24]
 801387e:	9a04      	ldr	r2, [sp, #16]
 8013880:	1aeb      	subs	r3, r5, r3
 8013882:	4293      	cmp	r3, r2
 8013884:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013888:	d021      	beq.n	80138ce <_dtoa_r+0xabe>
 801388a:	4659      	mov	r1, fp
 801388c:	2300      	movs	r3, #0
 801388e:	220a      	movs	r2, #10
 8013890:	4620      	mov	r0, r4
 8013892:	f000 fcd4 	bl	801423e <__multadd>
 8013896:	45b9      	cmp	r9, r7
 8013898:	4683      	mov	fp, r0
 801389a:	f04f 0300 	mov.w	r3, #0
 801389e:	f04f 020a 	mov.w	r2, #10
 80138a2:	4649      	mov	r1, r9
 80138a4:	4620      	mov	r0, r4
 80138a6:	d105      	bne.n	80138b4 <_dtoa_r+0xaa4>
 80138a8:	f000 fcc9 	bl	801423e <__multadd>
 80138ac:	4681      	mov	r9, r0
 80138ae:	4607      	mov	r7, r0
 80138b0:	9507      	str	r5, [sp, #28]
 80138b2:	e778      	b.n	80137a6 <_dtoa_r+0x996>
 80138b4:	f000 fcc3 	bl	801423e <__multadd>
 80138b8:	4639      	mov	r1, r7
 80138ba:	4681      	mov	r9, r0
 80138bc:	2300      	movs	r3, #0
 80138be:	220a      	movs	r2, #10
 80138c0:	4620      	mov	r0, r4
 80138c2:	f000 fcbc 	bl	801423e <__multadd>
 80138c6:	4607      	mov	r7, r0
 80138c8:	e7f2      	b.n	80138b0 <_dtoa_r+0xaa0>
 80138ca:	f04f 0900 	mov.w	r9, #0
 80138ce:	4659      	mov	r1, fp
 80138d0:	2201      	movs	r2, #1
 80138d2:	4620      	mov	r0, r4
 80138d4:	f000 fe66 	bl	80145a4 <__lshift>
 80138d8:	4631      	mov	r1, r6
 80138da:	4683      	mov	fp, r0
 80138dc:	f000 feb6 	bl	801464c <__mcmp>
 80138e0:	2800      	cmp	r0, #0
 80138e2:	dcb8      	bgt.n	8013856 <_dtoa_r+0xa46>
 80138e4:	d102      	bne.n	80138ec <_dtoa_r+0xadc>
 80138e6:	f018 0f01 	tst.w	r8, #1
 80138ea:	d1b4      	bne.n	8013856 <_dtoa_r+0xa46>
 80138ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80138f0:	1e6a      	subs	r2, r5, #1
 80138f2:	2b30      	cmp	r3, #48	; 0x30
 80138f4:	f47f af0f 	bne.w	8013716 <_dtoa_r+0x906>
 80138f8:	4615      	mov	r5, r2
 80138fa:	e7f7      	b.n	80138ec <_dtoa_r+0xadc>
 80138fc:	9b06      	ldr	r3, [sp, #24]
 80138fe:	4293      	cmp	r3, r2
 8013900:	d105      	bne.n	801390e <_dtoa_r+0xafe>
 8013902:	2331      	movs	r3, #49	; 0x31
 8013904:	9a06      	ldr	r2, [sp, #24]
 8013906:	f10a 0a01 	add.w	sl, sl, #1
 801390a:	7013      	strb	r3, [r2, #0]
 801390c:	e703      	b.n	8013716 <_dtoa_r+0x906>
 801390e:	4615      	mov	r5, r2
 8013910:	e7a1      	b.n	8013856 <_dtoa_r+0xa46>
 8013912:	4b17      	ldr	r3, [pc, #92]	; (8013970 <_dtoa_r+0xb60>)
 8013914:	f7ff bae1 	b.w	8012eda <_dtoa_r+0xca>
 8013918:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801391a:	2b00      	cmp	r3, #0
 801391c:	f47f aabb 	bne.w	8012e96 <_dtoa_r+0x86>
 8013920:	4b14      	ldr	r3, [pc, #80]	; (8013974 <_dtoa_r+0xb64>)
 8013922:	f7ff bada 	b.w	8012eda <_dtoa_r+0xca>
 8013926:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013928:	2b01      	cmp	r3, #1
 801392a:	f77f ae3f 	ble.w	80135ac <_dtoa_r+0x79c>
 801392e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013930:	9308      	str	r3, [sp, #32]
 8013932:	e653      	b.n	80135dc <_dtoa_r+0x7cc>
 8013934:	9b04      	ldr	r3, [sp, #16]
 8013936:	2b00      	cmp	r3, #0
 8013938:	dc03      	bgt.n	8013942 <_dtoa_r+0xb32>
 801393a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801393c:	2b02      	cmp	r3, #2
 801393e:	f73f aed5 	bgt.w	80136ec <_dtoa_r+0x8dc>
 8013942:	9d06      	ldr	r5, [sp, #24]
 8013944:	4631      	mov	r1, r6
 8013946:	4658      	mov	r0, fp
 8013948:	f7ff f9d3 	bl	8012cf2 <quorem>
 801394c:	9b06      	ldr	r3, [sp, #24]
 801394e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013952:	f805 8b01 	strb.w	r8, [r5], #1
 8013956:	9a04      	ldr	r2, [sp, #16]
 8013958:	1aeb      	subs	r3, r5, r3
 801395a:	429a      	cmp	r2, r3
 801395c:	ddb5      	ble.n	80138ca <_dtoa_r+0xaba>
 801395e:	4659      	mov	r1, fp
 8013960:	2300      	movs	r3, #0
 8013962:	220a      	movs	r2, #10
 8013964:	4620      	mov	r0, r4
 8013966:	f000 fc6a 	bl	801423e <__multadd>
 801396a:	4683      	mov	fp, r0
 801396c:	e7ea      	b.n	8013944 <_dtoa_r+0xb34>
 801396e:	bf00      	nop
 8013970:	0801a00e 	.word	0x0801a00e
 8013974:	0801a189 	.word	0x0801a189

08013978 <std>:
 8013978:	2300      	movs	r3, #0
 801397a:	b510      	push	{r4, lr}
 801397c:	4604      	mov	r4, r0
 801397e:	e9c0 3300 	strd	r3, r3, [r0]
 8013982:	6083      	str	r3, [r0, #8]
 8013984:	8181      	strh	r1, [r0, #12]
 8013986:	6643      	str	r3, [r0, #100]	; 0x64
 8013988:	81c2      	strh	r2, [r0, #14]
 801398a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801398e:	6183      	str	r3, [r0, #24]
 8013990:	4619      	mov	r1, r3
 8013992:	2208      	movs	r2, #8
 8013994:	305c      	adds	r0, #92	; 0x5c
 8013996:	f7fd fdac 	bl	80114f2 <memset>
 801399a:	4b05      	ldr	r3, [pc, #20]	; (80139b0 <std+0x38>)
 801399c:	6224      	str	r4, [r4, #32]
 801399e:	6263      	str	r3, [r4, #36]	; 0x24
 80139a0:	4b04      	ldr	r3, [pc, #16]	; (80139b4 <std+0x3c>)
 80139a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80139a4:	4b04      	ldr	r3, [pc, #16]	; (80139b8 <std+0x40>)
 80139a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80139a8:	4b04      	ldr	r3, [pc, #16]	; (80139bc <std+0x44>)
 80139aa:	6323      	str	r3, [r4, #48]	; 0x30
 80139ac:	bd10      	pop	{r4, pc}
 80139ae:	bf00      	nop
 80139b0:	08015049 	.word	0x08015049
 80139b4:	0801506b 	.word	0x0801506b
 80139b8:	080150a3 	.word	0x080150a3
 80139bc:	080150c7 	.word	0x080150c7

080139c0 <_cleanup_r>:
 80139c0:	4901      	ldr	r1, [pc, #4]	; (80139c8 <_cleanup_r+0x8>)
 80139c2:	f000 b885 	b.w	8013ad0 <_fwalk_reent>
 80139c6:	bf00      	nop
 80139c8:	080153c5 	.word	0x080153c5

080139cc <__sfmoreglue>:
 80139cc:	b570      	push	{r4, r5, r6, lr}
 80139ce:	2568      	movs	r5, #104	; 0x68
 80139d0:	1e4a      	subs	r2, r1, #1
 80139d2:	4355      	muls	r5, r2
 80139d4:	460e      	mov	r6, r1
 80139d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80139da:	f001 f837 	bl	8014a4c <_malloc_r>
 80139de:	4604      	mov	r4, r0
 80139e0:	b140      	cbz	r0, 80139f4 <__sfmoreglue+0x28>
 80139e2:	2100      	movs	r1, #0
 80139e4:	e9c0 1600 	strd	r1, r6, [r0]
 80139e8:	300c      	adds	r0, #12
 80139ea:	60a0      	str	r0, [r4, #8]
 80139ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80139f0:	f7fd fd7f 	bl	80114f2 <memset>
 80139f4:	4620      	mov	r0, r4
 80139f6:	bd70      	pop	{r4, r5, r6, pc}

080139f8 <__sinit>:
 80139f8:	6983      	ldr	r3, [r0, #24]
 80139fa:	b510      	push	{r4, lr}
 80139fc:	4604      	mov	r4, r0
 80139fe:	bb33      	cbnz	r3, 8013a4e <__sinit+0x56>
 8013a00:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013a04:	6503      	str	r3, [r0, #80]	; 0x50
 8013a06:	4b12      	ldr	r3, [pc, #72]	; (8013a50 <__sinit+0x58>)
 8013a08:	4a12      	ldr	r2, [pc, #72]	; (8013a54 <__sinit+0x5c>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	6282      	str	r2, [r0, #40]	; 0x28
 8013a0e:	4298      	cmp	r0, r3
 8013a10:	bf04      	itt	eq
 8013a12:	2301      	moveq	r3, #1
 8013a14:	6183      	streq	r3, [r0, #24]
 8013a16:	f000 f81f 	bl	8013a58 <__sfp>
 8013a1a:	6060      	str	r0, [r4, #4]
 8013a1c:	4620      	mov	r0, r4
 8013a1e:	f000 f81b 	bl	8013a58 <__sfp>
 8013a22:	60a0      	str	r0, [r4, #8]
 8013a24:	4620      	mov	r0, r4
 8013a26:	f000 f817 	bl	8013a58 <__sfp>
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	60e0      	str	r0, [r4, #12]
 8013a2e:	2104      	movs	r1, #4
 8013a30:	6860      	ldr	r0, [r4, #4]
 8013a32:	f7ff ffa1 	bl	8013978 <std>
 8013a36:	2201      	movs	r2, #1
 8013a38:	2109      	movs	r1, #9
 8013a3a:	68a0      	ldr	r0, [r4, #8]
 8013a3c:	f7ff ff9c 	bl	8013978 <std>
 8013a40:	2202      	movs	r2, #2
 8013a42:	2112      	movs	r1, #18
 8013a44:	68e0      	ldr	r0, [r4, #12]
 8013a46:	f7ff ff97 	bl	8013978 <std>
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	61a3      	str	r3, [r4, #24]
 8013a4e:	bd10      	pop	{r4, pc}
 8013a50:	08019ff4 	.word	0x08019ff4
 8013a54:	080139c1 	.word	0x080139c1

08013a58 <__sfp>:
 8013a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a5a:	4b1b      	ldr	r3, [pc, #108]	; (8013ac8 <__sfp+0x70>)
 8013a5c:	4607      	mov	r7, r0
 8013a5e:	681e      	ldr	r6, [r3, #0]
 8013a60:	69b3      	ldr	r3, [r6, #24]
 8013a62:	b913      	cbnz	r3, 8013a6a <__sfp+0x12>
 8013a64:	4630      	mov	r0, r6
 8013a66:	f7ff ffc7 	bl	80139f8 <__sinit>
 8013a6a:	3648      	adds	r6, #72	; 0x48
 8013a6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013a70:	3b01      	subs	r3, #1
 8013a72:	d503      	bpl.n	8013a7c <__sfp+0x24>
 8013a74:	6833      	ldr	r3, [r6, #0]
 8013a76:	b133      	cbz	r3, 8013a86 <__sfp+0x2e>
 8013a78:	6836      	ldr	r6, [r6, #0]
 8013a7a:	e7f7      	b.n	8013a6c <__sfp+0x14>
 8013a7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013a80:	b16d      	cbz	r5, 8013a9e <__sfp+0x46>
 8013a82:	3468      	adds	r4, #104	; 0x68
 8013a84:	e7f4      	b.n	8013a70 <__sfp+0x18>
 8013a86:	2104      	movs	r1, #4
 8013a88:	4638      	mov	r0, r7
 8013a8a:	f7ff ff9f 	bl	80139cc <__sfmoreglue>
 8013a8e:	6030      	str	r0, [r6, #0]
 8013a90:	2800      	cmp	r0, #0
 8013a92:	d1f1      	bne.n	8013a78 <__sfp+0x20>
 8013a94:	230c      	movs	r3, #12
 8013a96:	4604      	mov	r4, r0
 8013a98:	603b      	str	r3, [r7, #0]
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a9e:	4b0b      	ldr	r3, [pc, #44]	; (8013acc <__sfp+0x74>)
 8013aa0:	6665      	str	r5, [r4, #100]	; 0x64
 8013aa2:	e9c4 5500 	strd	r5, r5, [r4]
 8013aa6:	60a5      	str	r5, [r4, #8]
 8013aa8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013aac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013ab0:	2208      	movs	r2, #8
 8013ab2:	4629      	mov	r1, r5
 8013ab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013ab8:	f7fd fd1b 	bl	80114f2 <memset>
 8013abc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013ac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013ac4:	e7e9      	b.n	8013a9a <__sfp+0x42>
 8013ac6:	bf00      	nop
 8013ac8:	08019ff4 	.word	0x08019ff4
 8013acc:	ffff0001 	.word	0xffff0001

08013ad0 <_fwalk_reent>:
 8013ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ad4:	4680      	mov	r8, r0
 8013ad6:	4689      	mov	r9, r1
 8013ad8:	2600      	movs	r6, #0
 8013ada:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013ade:	b914      	cbnz	r4, 8013ae6 <_fwalk_reent+0x16>
 8013ae0:	4630      	mov	r0, r6
 8013ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ae6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013aea:	3f01      	subs	r7, #1
 8013aec:	d501      	bpl.n	8013af2 <_fwalk_reent+0x22>
 8013aee:	6824      	ldr	r4, [r4, #0]
 8013af0:	e7f5      	b.n	8013ade <_fwalk_reent+0xe>
 8013af2:	89ab      	ldrh	r3, [r5, #12]
 8013af4:	2b01      	cmp	r3, #1
 8013af6:	d907      	bls.n	8013b08 <_fwalk_reent+0x38>
 8013af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013afc:	3301      	adds	r3, #1
 8013afe:	d003      	beq.n	8013b08 <_fwalk_reent+0x38>
 8013b00:	4629      	mov	r1, r5
 8013b02:	4640      	mov	r0, r8
 8013b04:	47c8      	blx	r9
 8013b06:	4306      	orrs	r6, r0
 8013b08:	3568      	adds	r5, #104	; 0x68
 8013b0a:	e7ee      	b.n	8013aea <_fwalk_reent+0x1a>

08013b0c <rshift>:
 8013b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b0e:	6906      	ldr	r6, [r0, #16]
 8013b10:	114b      	asrs	r3, r1, #5
 8013b12:	429e      	cmp	r6, r3
 8013b14:	f100 0414 	add.w	r4, r0, #20
 8013b18:	dd31      	ble.n	8013b7e <rshift+0x72>
 8013b1a:	f011 011f 	ands.w	r1, r1, #31
 8013b1e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8013b22:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8013b26:	d108      	bne.n	8013b3a <rshift+0x2e>
 8013b28:	4621      	mov	r1, r4
 8013b2a:	42b2      	cmp	r2, r6
 8013b2c:	460b      	mov	r3, r1
 8013b2e:	d211      	bcs.n	8013b54 <rshift+0x48>
 8013b30:	f852 3b04 	ldr.w	r3, [r2], #4
 8013b34:	f841 3b04 	str.w	r3, [r1], #4
 8013b38:	e7f7      	b.n	8013b2a <rshift+0x1e>
 8013b3a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013b3e:	4623      	mov	r3, r4
 8013b40:	f1c1 0c20 	rsb	ip, r1, #32
 8013b44:	40cd      	lsrs	r5, r1
 8013b46:	3204      	adds	r2, #4
 8013b48:	42b2      	cmp	r2, r6
 8013b4a:	4617      	mov	r7, r2
 8013b4c:	d30d      	bcc.n	8013b6a <rshift+0x5e>
 8013b4e:	601d      	str	r5, [r3, #0]
 8013b50:	b105      	cbz	r5, 8013b54 <rshift+0x48>
 8013b52:	3304      	adds	r3, #4
 8013b54:	42a3      	cmp	r3, r4
 8013b56:	eba3 0204 	sub.w	r2, r3, r4
 8013b5a:	bf08      	it	eq
 8013b5c:	2300      	moveq	r3, #0
 8013b5e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013b62:	6102      	str	r2, [r0, #16]
 8013b64:	bf08      	it	eq
 8013b66:	6143      	streq	r3, [r0, #20]
 8013b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b6a:	683f      	ldr	r7, [r7, #0]
 8013b6c:	fa07 f70c 	lsl.w	r7, r7, ip
 8013b70:	433d      	orrs	r5, r7
 8013b72:	f843 5b04 	str.w	r5, [r3], #4
 8013b76:	f852 5b04 	ldr.w	r5, [r2], #4
 8013b7a:	40cd      	lsrs	r5, r1
 8013b7c:	e7e4      	b.n	8013b48 <rshift+0x3c>
 8013b7e:	4623      	mov	r3, r4
 8013b80:	e7e8      	b.n	8013b54 <rshift+0x48>

08013b82 <__hexdig_fun>:
 8013b82:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013b86:	2b09      	cmp	r3, #9
 8013b88:	d802      	bhi.n	8013b90 <__hexdig_fun+0xe>
 8013b8a:	3820      	subs	r0, #32
 8013b8c:	b2c0      	uxtb	r0, r0
 8013b8e:	4770      	bx	lr
 8013b90:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013b94:	2b05      	cmp	r3, #5
 8013b96:	d801      	bhi.n	8013b9c <__hexdig_fun+0x1a>
 8013b98:	3847      	subs	r0, #71	; 0x47
 8013b9a:	e7f7      	b.n	8013b8c <__hexdig_fun+0xa>
 8013b9c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013ba0:	2b05      	cmp	r3, #5
 8013ba2:	d801      	bhi.n	8013ba8 <__hexdig_fun+0x26>
 8013ba4:	3827      	subs	r0, #39	; 0x27
 8013ba6:	e7f1      	b.n	8013b8c <__hexdig_fun+0xa>
 8013ba8:	2000      	movs	r0, #0
 8013baa:	4770      	bx	lr

08013bac <__gethex>:
 8013bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb0:	b08b      	sub	sp, #44	; 0x2c
 8013bb2:	9002      	str	r0, [sp, #8]
 8013bb4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013bb6:	468a      	mov	sl, r1
 8013bb8:	4690      	mov	r8, r2
 8013bba:	9306      	str	r3, [sp, #24]
 8013bbc:	f000 face 	bl	801415c <__localeconv_l>
 8013bc0:	6803      	ldr	r3, [r0, #0]
 8013bc2:	f04f 0b00 	mov.w	fp, #0
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	9303      	str	r3, [sp, #12]
 8013bca:	f7ec fadb 	bl	8000184 <strlen>
 8013bce:	9b03      	ldr	r3, [sp, #12]
 8013bd0:	9001      	str	r0, [sp, #4]
 8013bd2:	4403      	add	r3, r0
 8013bd4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013bd8:	9307      	str	r3, [sp, #28]
 8013bda:	f8da 3000 	ldr.w	r3, [sl]
 8013bde:	3302      	adds	r3, #2
 8013be0:	461f      	mov	r7, r3
 8013be2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013be6:	2830      	cmp	r0, #48	; 0x30
 8013be8:	d06c      	beq.n	8013cc4 <__gethex+0x118>
 8013bea:	f7ff ffca 	bl	8013b82 <__hexdig_fun>
 8013bee:	4604      	mov	r4, r0
 8013bf0:	2800      	cmp	r0, #0
 8013bf2:	d16a      	bne.n	8013cca <__gethex+0x11e>
 8013bf4:	9a01      	ldr	r2, [sp, #4]
 8013bf6:	9903      	ldr	r1, [sp, #12]
 8013bf8:	4638      	mov	r0, r7
 8013bfa:	f001 fa68 	bl	80150ce <strncmp>
 8013bfe:	2800      	cmp	r0, #0
 8013c00:	d166      	bne.n	8013cd0 <__gethex+0x124>
 8013c02:	9b01      	ldr	r3, [sp, #4]
 8013c04:	5cf8      	ldrb	r0, [r7, r3]
 8013c06:	18fe      	adds	r6, r7, r3
 8013c08:	f7ff ffbb 	bl	8013b82 <__hexdig_fun>
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	d062      	beq.n	8013cd6 <__gethex+0x12a>
 8013c10:	4633      	mov	r3, r6
 8013c12:	7818      	ldrb	r0, [r3, #0]
 8013c14:	461f      	mov	r7, r3
 8013c16:	2830      	cmp	r0, #48	; 0x30
 8013c18:	f103 0301 	add.w	r3, r3, #1
 8013c1c:	d0f9      	beq.n	8013c12 <__gethex+0x66>
 8013c1e:	f7ff ffb0 	bl	8013b82 <__hexdig_fun>
 8013c22:	fab0 f580 	clz	r5, r0
 8013c26:	4634      	mov	r4, r6
 8013c28:	f04f 0b01 	mov.w	fp, #1
 8013c2c:	096d      	lsrs	r5, r5, #5
 8013c2e:	463a      	mov	r2, r7
 8013c30:	4616      	mov	r6, r2
 8013c32:	7830      	ldrb	r0, [r6, #0]
 8013c34:	3201      	adds	r2, #1
 8013c36:	f7ff ffa4 	bl	8013b82 <__hexdig_fun>
 8013c3a:	2800      	cmp	r0, #0
 8013c3c:	d1f8      	bne.n	8013c30 <__gethex+0x84>
 8013c3e:	9a01      	ldr	r2, [sp, #4]
 8013c40:	9903      	ldr	r1, [sp, #12]
 8013c42:	4630      	mov	r0, r6
 8013c44:	f001 fa43 	bl	80150ce <strncmp>
 8013c48:	b950      	cbnz	r0, 8013c60 <__gethex+0xb4>
 8013c4a:	b954      	cbnz	r4, 8013c62 <__gethex+0xb6>
 8013c4c:	9b01      	ldr	r3, [sp, #4]
 8013c4e:	18f4      	adds	r4, r6, r3
 8013c50:	4622      	mov	r2, r4
 8013c52:	4616      	mov	r6, r2
 8013c54:	7830      	ldrb	r0, [r6, #0]
 8013c56:	3201      	adds	r2, #1
 8013c58:	f7ff ff93 	bl	8013b82 <__hexdig_fun>
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	d1f8      	bne.n	8013c52 <__gethex+0xa6>
 8013c60:	b10c      	cbz	r4, 8013c66 <__gethex+0xba>
 8013c62:	1ba4      	subs	r4, r4, r6
 8013c64:	00a4      	lsls	r4, r4, #2
 8013c66:	7833      	ldrb	r3, [r6, #0]
 8013c68:	2b50      	cmp	r3, #80	; 0x50
 8013c6a:	d001      	beq.n	8013c70 <__gethex+0xc4>
 8013c6c:	2b70      	cmp	r3, #112	; 0x70
 8013c6e:	d140      	bne.n	8013cf2 <__gethex+0x146>
 8013c70:	7873      	ldrb	r3, [r6, #1]
 8013c72:	2b2b      	cmp	r3, #43	; 0x2b
 8013c74:	d031      	beq.n	8013cda <__gethex+0x12e>
 8013c76:	2b2d      	cmp	r3, #45	; 0x2d
 8013c78:	d033      	beq.n	8013ce2 <__gethex+0x136>
 8013c7a:	f04f 0900 	mov.w	r9, #0
 8013c7e:	1c71      	adds	r1, r6, #1
 8013c80:	7808      	ldrb	r0, [r1, #0]
 8013c82:	f7ff ff7e 	bl	8013b82 <__hexdig_fun>
 8013c86:	1e43      	subs	r3, r0, #1
 8013c88:	b2db      	uxtb	r3, r3
 8013c8a:	2b18      	cmp	r3, #24
 8013c8c:	d831      	bhi.n	8013cf2 <__gethex+0x146>
 8013c8e:	f1a0 0210 	sub.w	r2, r0, #16
 8013c92:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013c96:	f7ff ff74 	bl	8013b82 <__hexdig_fun>
 8013c9a:	1e43      	subs	r3, r0, #1
 8013c9c:	b2db      	uxtb	r3, r3
 8013c9e:	2b18      	cmp	r3, #24
 8013ca0:	d922      	bls.n	8013ce8 <__gethex+0x13c>
 8013ca2:	f1b9 0f00 	cmp.w	r9, #0
 8013ca6:	d000      	beq.n	8013caa <__gethex+0xfe>
 8013ca8:	4252      	negs	r2, r2
 8013caa:	4414      	add	r4, r2
 8013cac:	f8ca 1000 	str.w	r1, [sl]
 8013cb0:	b30d      	cbz	r5, 8013cf6 <__gethex+0x14a>
 8013cb2:	f1bb 0f00 	cmp.w	fp, #0
 8013cb6:	bf0c      	ite	eq
 8013cb8:	2706      	moveq	r7, #6
 8013cba:	2700      	movne	r7, #0
 8013cbc:	4638      	mov	r0, r7
 8013cbe:	b00b      	add	sp, #44	; 0x2c
 8013cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc4:	f10b 0b01 	add.w	fp, fp, #1
 8013cc8:	e78a      	b.n	8013be0 <__gethex+0x34>
 8013cca:	2500      	movs	r5, #0
 8013ccc:	462c      	mov	r4, r5
 8013cce:	e7ae      	b.n	8013c2e <__gethex+0x82>
 8013cd0:	463e      	mov	r6, r7
 8013cd2:	2501      	movs	r5, #1
 8013cd4:	e7c7      	b.n	8013c66 <__gethex+0xba>
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	e7fb      	b.n	8013cd2 <__gethex+0x126>
 8013cda:	f04f 0900 	mov.w	r9, #0
 8013cde:	1cb1      	adds	r1, r6, #2
 8013ce0:	e7ce      	b.n	8013c80 <__gethex+0xd4>
 8013ce2:	f04f 0901 	mov.w	r9, #1
 8013ce6:	e7fa      	b.n	8013cde <__gethex+0x132>
 8013ce8:	230a      	movs	r3, #10
 8013cea:	fb03 0202 	mla	r2, r3, r2, r0
 8013cee:	3a10      	subs	r2, #16
 8013cf0:	e7cf      	b.n	8013c92 <__gethex+0xe6>
 8013cf2:	4631      	mov	r1, r6
 8013cf4:	e7da      	b.n	8013cac <__gethex+0x100>
 8013cf6:	4629      	mov	r1, r5
 8013cf8:	1bf3      	subs	r3, r6, r7
 8013cfa:	3b01      	subs	r3, #1
 8013cfc:	2b07      	cmp	r3, #7
 8013cfe:	dc49      	bgt.n	8013d94 <__gethex+0x1e8>
 8013d00:	9802      	ldr	r0, [sp, #8]
 8013d02:	f000 fa51 	bl	80141a8 <_Balloc>
 8013d06:	f04f 0b00 	mov.w	fp, #0
 8013d0a:	4605      	mov	r5, r0
 8013d0c:	46da      	mov	sl, fp
 8013d0e:	9b01      	ldr	r3, [sp, #4]
 8013d10:	f100 0914 	add.w	r9, r0, #20
 8013d14:	f1c3 0301 	rsb	r3, r3, #1
 8013d18:	f8cd 9010 	str.w	r9, [sp, #16]
 8013d1c:	9308      	str	r3, [sp, #32]
 8013d1e:	42b7      	cmp	r7, r6
 8013d20:	d33b      	bcc.n	8013d9a <__gethex+0x1ee>
 8013d22:	9804      	ldr	r0, [sp, #16]
 8013d24:	f840 ab04 	str.w	sl, [r0], #4
 8013d28:	eba0 0009 	sub.w	r0, r0, r9
 8013d2c:	1080      	asrs	r0, r0, #2
 8013d2e:	6128      	str	r0, [r5, #16]
 8013d30:	0147      	lsls	r7, r0, #5
 8013d32:	4650      	mov	r0, sl
 8013d34:	f000 fafc 	bl	8014330 <__hi0bits>
 8013d38:	f8d8 6000 	ldr.w	r6, [r8]
 8013d3c:	1a3f      	subs	r7, r7, r0
 8013d3e:	42b7      	cmp	r7, r6
 8013d40:	dd64      	ble.n	8013e0c <__gethex+0x260>
 8013d42:	1bbf      	subs	r7, r7, r6
 8013d44:	4639      	mov	r1, r7
 8013d46:	4628      	mov	r0, r5
 8013d48:	f000 fe05 	bl	8014956 <__any_on>
 8013d4c:	4682      	mov	sl, r0
 8013d4e:	b178      	cbz	r0, 8013d70 <__gethex+0x1c4>
 8013d50:	f04f 0a01 	mov.w	sl, #1
 8013d54:	1e7b      	subs	r3, r7, #1
 8013d56:	1159      	asrs	r1, r3, #5
 8013d58:	f003 021f 	and.w	r2, r3, #31
 8013d5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013d60:	fa0a f202 	lsl.w	r2, sl, r2
 8013d64:	420a      	tst	r2, r1
 8013d66:	d003      	beq.n	8013d70 <__gethex+0x1c4>
 8013d68:	4553      	cmp	r3, sl
 8013d6a:	dc46      	bgt.n	8013dfa <__gethex+0x24e>
 8013d6c:	f04f 0a02 	mov.w	sl, #2
 8013d70:	4639      	mov	r1, r7
 8013d72:	4628      	mov	r0, r5
 8013d74:	f7ff feca 	bl	8013b0c <rshift>
 8013d78:	443c      	add	r4, r7
 8013d7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d7e:	42a3      	cmp	r3, r4
 8013d80:	da52      	bge.n	8013e28 <__gethex+0x27c>
 8013d82:	4629      	mov	r1, r5
 8013d84:	9802      	ldr	r0, [sp, #8]
 8013d86:	f000 fa43 	bl	8014210 <_Bfree>
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013d8e:	27a3      	movs	r7, #163	; 0xa3
 8013d90:	6013      	str	r3, [r2, #0]
 8013d92:	e793      	b.n	8013cbc <__gethex+0x110>
 8013d94:	3101      	adds	r1, #1
 8013d96:	105b      	asrs	r3, r3, #1
 8013d98:	e7b0      	b.n	8013cfc <__gethex+0x150>
 8013d9a:	1e73      	subs	r3, r6, #1
 8013d9c:	9305      	str	r3, [sp, #20]
 8013d9e:	9a07      	ldr	r2, [sp, #28]
 8013da0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013da4:	4293      	cmp	r3, r2
 8013da6:	d018      	beq.n	8013dda <__gethex+0x22e>
 8013da8:	f1bb 0f20 	cmp.w	fp, #32
 8013dac:	d107      	bne.n	8013dbe <__gethex+0x212>
 8013dae:	9b04      	ldr	r3, [sp, #16]
 8013db0:	f8c3 a000 	str.w	sl, [r3]
 8013db4:	f04f 0a00 	mov.w	sl, #0
 8013db8:	46d3      	mov	fp, sl
 8013dba:	3304      	adds	r3, #4
 8013dbc:	9304      	str	r3, [sp, #16]
 8013dbe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013dc2:	f7ff fede 	bl	8013b82 <__hexdig_fun>
 8013dc6:	f000 000f 	and.w	r0, r0, #15
 8013dca:	fa00 f00b 	lsl.w	r0, r0, fp
 8013dce:	ea4a 0a00 	orr.w	sl, sl, r0
 8013dd2:	f10b 0b04 	add.w	fp, fp, #4
 8013dd6:	9b05      	ldr	r3, [sp, #20]
 8013dd8:	e00d      	b.n	8013df6 <__gethex+0x24a>
 8013dda:	9b05      	ldr	r3, [sp, #20]
 8013ddc:	9a08      	ldr	r2, [sp, #32]
 8013dde:	4413      	add	r3, r2
 8013de0:	42bb      	cmp	r3, r7
 8013de2:	d3e1      	bcc.n	8013da8 <__gethex+0x1fc>
 8013de4:	4618      	mov	r0, r3
 8013de6:	9a01      	ldr	r2, [sp, #4]
 8013de8:	9903      	ldr	r1, [sp, #12]
 8013dea:	9309      	str	r3, [sp, #36]	; 0x24
 8013dec:	f001 f96f 	bl	80150ce <strncmp>
 8013df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013df2:	2800      	cmp	r0, #0
 8013df4:	d1d8      	bne.n	8013da8 <__gethex+0x1fc>
 8013df6:	461e      	mov	r6, r3
 8013df8:	e791      	b.n	8013d1e <__gethex+0x172>
 8013dfa:	1eb9      	subs	r1, r7, #2
 8013dfc:	4628      	mov	r0, r5
 8013dfe:	f000 fdaa 	bl	8014956 <__any_on>
 8013e02:	2800      	cmp	r0, #0
 8013e04:	d0b2      	beq.n	8013d6c <__gethex+0x1c0>
 8013e06:	f04f 0a03 	mov.w	sl, #3
 8013e0a:	e7b1      	b.n	8013d70 <__gethex+0x1c4>
 8013e0c:	da09      	bge.n	8013e22 <__gethex+0x276>
 8013e0e:	1bf7      	subs	r7, r6, r7
 8013e10:	4629      	mov	r1, r5
 8013e12:	463a      	mov	r2, r7
 8013e14:	9802      	ldr	r0, [sp, #8]
 8013e16:	f000 fbc5 	bl	80145a4 <__lshift>
 8013e1a:	4605      	mov	r5, r0
 8013e1c:	1be4      	subs	r4, r4, r7
 8013e1e:	f100 0914 	add.w	r9, r0, #20
 8013e22:	f04f 0a00 	mov.w	sl, #0
 8013e26:	e7a8      	b.n	8013d7a <__gethex+0x1ce>
 8013e28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013e2c:	42a0      	cmp	r0, r4
 8013e2e:	dd6b      	ble.n	8013f08 <__gethex+0x35c>
 8013e30:	1b04      	subs	r4, r0, r4
 8013e32:	42a6      	cmp	r6, r4
 8013e34:	dc2e      	bgt.n	8013e94 <__gethex+0x2e8>
 8013e36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013e3a:	2b02      	cmp	r3, #2
 8013e3c:	d022      	beq.n	8013e84 <__gethex+0x2d8>
 8013e3e:	2b03      	cmp	r3, #3
 8013e40:	d024      	beq.n	8013e8c <__gethex+0x2e0>
 8013e42:	2b01      	cmp	r3, #1
 8013e44:	d115      	bne.n	8013e72 <__gethex+0x2c6>
 8013e46:	42a6      	cmp	r6, r4
 8013e48:	d113      	bne.n	8013e72 <__gethex+0x2c6>
 8013e4a:	2e01      	cmp	r6, #1
 8013e4c:	dc0b      	bgt.n	8013e66 <__gethex+0x2ba>
 8013e4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013e52:	9a06      	ldr	r2, [sp, #24]
 8013e54:	2762      	movs	r7, #98	; 0x62
 8013e56:	6013      	str	r3, [r2, #0]
 8013e58:	2301      	movs	r3, #1
 8013e5a:	612b      	str	r3, [r5, #16]
 8013e5c:	f8c9 3000 	str.w	r3, [r9]
 8013e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e62:	601d      	str	r5, [r3, #0]
 8013e64:	e72a      	b.n	8013cbc <__gethex+0x110>
 8013e66:	1e71      	subs	r1, r6, #1
 8013e68:	4628      	mov	r0, r5
 8013e6a:	f000 fd74 	bl	8014956 <__any_on>
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	d1ed      	bne.n	8013e4e <__gethex+0x2a2>
 8013e72:	4629      	mov	r1, r5
 8013e74:	9802      	ldr	r0, [sp, #8]
 8013e76:	f000 f9cb 	bl	8014210 <_Bfree>
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e7e:	2750      	movs	r7, #80	; 0x50
 8013e80:	6013      	str	r3, [r2, #0]
 8013e82:	e71b      	b.n	8013cbc <__gethex+0x110>
 8013e84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d0e1      	beq.n	8013e4e <__gethex+0x2a2>
 8013e8a:	e7f2      	b.n	8013e72 <__gethex+0x2c6>
 8013e8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d1dd      	bne.n	8013e4e <__gethex+0x2a2>
 8013e92:	e7ee      	b.n	8013e72 <__gethex+0x2c6>
 8013e94:	1e67      	subs	r7, r4, #1
 8013e96:	f1ba 0f00 	cmp.w	sl, #0
 8013e9a:	d132      	bne.n	8013f02 <__gethex+0x356>
 8013e9c:	b127      	cbz	r7, 8013ea8 <__gethex+0x2fc>
 8013e9e:	4639      	mov	r1, r7
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	f000 fd58 	bl	8014956 <__any_on>
 8013ea6:	4682      	mov	sl, r0
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	117a      	asrs	r2, r7, #5
 8013eac:	f007 071f 	and.w	r7, r7, #31
 8013eb0:	fa03 f707 	lsl.w	r7, r3, r7
 8013eb4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013eb8:	4621      	mov	r1, r4
 8013eba:	421f      	tst	r7, r3
 8013ebc:	f04f 0702 	mov.w	r7, #2
 8013ec0:	4628      	mov	r0, r5
 8013ec2:	bf18      	it	ne
 8013ec4:	f04a 0a02 	orrne.w	sl, sl, #2
 8013ec8:	1b36      	subs	r6, r6, r4
 8013eca:	f7ff fe1f 	bl	8013b0c <rshift>
 8013ece:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013ed2:	f1ba 0f00 	cmp.w	sl, #0
 8013ed6:	d048      	beq.n	8013f6a <__gethex+0x3be>
 8013ed8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013edc:	2b02      	cmp	r3, #2
 8013ede:	d015      	beq.n	8013f0c <__gethex+0x360>
 8013ee0:	2b03      	cmp	r3, #3
 8013ee2:	d017      	beq.n	8013f14 <__gethex+0x368>
 8013ee4:	2b01      	cmp	r3, #1
 8013ee6:	d109      	bne.n	8013efc <__gethex+0x350>
 8013ee8:	f01a 0f02 	tst.w	sl, #2
 8013eec:	d006      	beq.n	8013efc <__gethex+0x350>
 8013eee:	f8d9 3000 	ldr.w	r3, [r9]
 8013ef2:	ea4a 0a03 	orr.w	sl, sl, r3
 8013ef6:	f01a 0f01 	tst.w	sl, #1
 8013efa:	d10e      	bne.n	8013f1a <__gethex+0x36e>
 8013efc:	f047 0710 	orr.w	r7, r7, #16
 8013f00:	e033      	b.n	8013f6a <__gethex+0x3be>
 8013f02:	f04f 0a01 	mov.w	sl, #1
 8013f06:	e7cf      	b.n	8013ea8 <__gethex+0x2fc>
 8013f08:	2701      	movs	r7, #1
 8013f0a:	e7e2      	b.n	8013ed2 <__gethex+0x326>
 8013f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f0e:	f1c3 0301 	rsb	r3, r3, #1
 8013f12:	9315      	str	r3, [sp, #84]	; 0x54
 8013f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d0f0      	beq.n	8013efc <__gethex+0x350>
 8013f1a:	f04f 0c00 	mov.w	ip, #0
 8013f1e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013f22:	f105 0314 	add.w	r3, r5, #20
 8013f26:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8013f2a:	eb03 010a 	add.w	r1, r3, sl
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f34:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013f38:	d01c      	beq.n	8013f74 <__gethex+0x3c8>
 8013f3a:	3201      	adds	r2, #1
 8013f3c:	6002      	str	r2, [r0, #0]
 8013f3e:	2f02      	cmp	r7, #2
 8013f40:	f105 0314 	add.w	r3, r5, #20
 8013f44:	d138      	bne.n	8013fb8 <__gethex+0x40c>
 8013f46:	f8d8 2000 	ldr.w	r2, [r8]
 8013f4a:	3a01      	subs	r2, #1
 8013f4c:	42b2      	cmp	r2, r6
 8013f4e:	d10a      	bne.n	8013f66 <__gethex+0x3ba>
 8013f50:	2201      	movs	r2, #1
 8013f52:	1171      	asrs	r1, r6, #5
 8013f54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013f58:	f006 061f 	and.w	r6, r6, #31
 8013f5c:	fa02 f606 	lsl.w	r6, r2, r6
 8013f60:	421e      	tst	r6, r3
 8013f62:	bf18      	it	ne
 8013f64:	4617      	movne	r7, r2
 8013f66:	f047 0720 	orr.w	r7, r7, #32
 8013f6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013f6c:	601d      	str	r5, [r3, #0]
 8013f6e:	9b06      	ldr	r3, [sp, #24]
 8013f70:	601c      	str	r4, [r3, #0]
 8013f72:	e6a3      	b.n	8013cbc <__gethex+0x110>
 8013f74:	4299      	cmp	r1, r3
 8013f76:	f843 cc04 	str.w	ip, [r3, #-4]
 8013f7a:	d8d8      	bhi.n	8013f2e <__gethex+0x382>
 8013f7c:	68ab      	ldr	r3, [r5, #8]
 8013f7e:	4599      	cmp	r9, r3
 8013f80:	db12      	blt.n	8013fa8 <__gethex+0x3fc>
 8013f82:	6869      	ldr	r1, [r5, #4]
 8013f84:	9802      	ldr	r0, [sp, #8]
 8013f86:	3101      	adds	r1, #1
 8013f88:	f000 f90e 	bl	80141a8 <_Balloc>
 8013f8c:	4683      	mov	fp, r0
 8013f8e:	692a      	ldr	r2, [r5, #16]
 8013f90:	f105 010c 	add.w	r1, r5, #12
 8013f94:	3202      	adds	r2, #2
 8013f96:	0092      	lsls	r2, r2, #2
 8013f98:	300c      	adds	r0, #12
 8013f9a:	f7fd fa9f 	bl	80114dc <memcpy>
 8013f9e:	4629      	mov	r1, r5
 8013fa0:	9802      	ldr	r0, [sp, #8]
 8013fa2:	f000 f935 	bl	8014210 <_Bfree>
 8013fa6:	465d      	mov	r5, fp
 8013fa8:	692b      	ldr	r3, [r5, #16]
 8013faa:	1c5a      	adds	r2, r3, #1
 8013fac:	612a      	str	r2, [r5, #16]
 8013fae:	2201      	movs	r2, #1
 8013fb0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013fb4:	615a      	str	r2, [r3, #20]
 8013fb6:	e7c2      	b.n	8013f3e <__gethex+0x392>
 8013fb8:	692a      	ldr	r2, [r5, #16]
 8013fba:	454a      	cmp	r2, r9
 8013fbc:	dd0b      	ble.n	8013fd6 <__gethex+0x42a>
 8013fbe:	2101      	movs	r1, #1
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	f7ff fda3 	bl	8013b0c <rshift>
 8013fc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013fca:	3401      	adds	r4, #1
 8013fcc:	42a3      	cmp	r3, r4
 8013fce:	f6ff aed8 	blt.w	8013d82 <__gethex+0x1d6>
 8013fd2:	2701      	movs	r7, #1
 8013fd4:	e7c7      	b.n	8013f66 <__gethex+0x3ba>
 8013fd6:	f016 061f 	ands.w	r6, r6, #31
 8013fda:	d0fa      	beq.n	8013fd2 <__gethex+0x426>
 8013fdc:	449a      	add	sl, r3
 8013fde:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013fe2:	f000 f9a5 	bl	8014330 <__hi0bits>
 8013fe6:	f1c6 0620 	rsb	r6, r6, #32
 8013fea:	42b0      	cmp	r0, r6
 8013fec:	dbe7      	blt.n	8013fbe <__gethex+0x412>
 8013fee:	e7f0      	b.n	8013fd2 <__gethex+0x426>

08013ff0 <L_shift>:
 8013ff0:	f1c2 0208 	rsb	r2, r2, #8
 8013ff4:	0092      	lsls	r2, r2, #2
 8013ff6:	b570      	push	{r4, r5, r6, lr}
 8013ff8:	f1c2 0620 	rsb	r6, r2, #32
 8013ffc:	6843      	ldr	r3, [r0, #4]
 8013ffe:	6804      	ldr	r4, [r0, #0]
 8014000:	fa03 f506 	lsl.w	r5, r3, r6
 8014004:	432c      	orrs	r4, r5
 8014006:	40d3      	lsrs	r3, r2
 8014008:	6004      	str	r4, [r0, #0]
 801400a:	f840 3f04 	str.w	r3, [r0, #4]!
 801400e:	4288      	cmp	r0, r1
 8014010:	d3f4      	bcc.n	8013ffc <L_shift+0xc>
 8014012:	bd70      	pop	{r4, r5, r6, pc}

08014014 <__match>:
 8014014:	b530      	push	{r4, r5, lr}
 8014016:	6803      	ldr	r3, [r0, #0]
 8014018:	3301      	adds	r3, #1
 801401a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801401e:	b914      	cbnz	r4, 8014026 <__match+0x12>
 8014020:	6003      	str	r3, [r0, #0]
 8014022:	2001      	movs	r0, #1
 8014024:	bd30      	pop	{r4, r5, pc}
 8014026:	f813 2b01 	ldrb.w	r2, [r3], #1
 801402a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801402e:	2d19      	cmp	r5, #25
 8014030:	bf98      	it	ls
 8014032:	3220      	addls	r2, #32
 8014034:	42a2      	cmp	r2, r4
 8014036:	d0f0      	beq.n	801401a <__match+0x6>
 8014038:	2000      	movs	r0, #0
 801403a:	e7f3      	b.n	8014024 <__match+0x10>

0801403c <__hexnan>:
 801403c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014040:	2500      	movs	r5, #0
 8014042:	680b      	ldr	r3, [r1, #0]
 8014044:	4682      	mov	sl, r0
 8014046:	115f      	asrs	r7, r3, #5
 8014048:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801404c:	f013 031f 	ands.w	r3, r3, #31
 8014050:	bf18      	it	ne
 8014052:	3704      	addne	r7, #4
 8014054:	1f3e      	subs	r6, r7, #4
 8014056:	4690      	mov	r8, r2
 8014058:	46b1      	mov	r9, r6
 801405a:	4634      	mov	r4, r6
 801405c:	46ab      	mov	fp, r5
 801405e:	b087      	sub	sp, #28
 8014060:	6801      	ldr	r1, [r0, #0]
 8014062:	9301      	str	r3, [sp, #4]
 8014064:	f847 5c04 	str.w	r5, [r7, #-4]
 8014068:	9502      	str	r5, [sp, #8]
 801406a:	784a      	ldrb	r2, [r1, #1]
 801406c:	1c4b      	adds	r3, r1, #1
 801406e:	9303      	str	r3, [sp, #12]
 8014070:	b342      	cbz	r2, 80140c4 <__hexnan+0x88>
 8014072:	4610      	mov	r0, r2
 8014074:	9105      	str	r1, [sp, #20]
 8014076:	9204      	str	r2, [sp, #16]
 8014078:	f7ff fd83 	bl	8013b82 <__hexdig_fun>
 801407c:	2800      	cmp	r0, #0
 801407e:	d143      	bne.n	8014108 <__hexnan+0xcc>
 8014080:	9a04      	ldr	r2, [sp, #16]
 8014082:	9905      	ldr	r1, [sp, #20]
 8014084:	2a20      	cmp	r2, #32
 8014086:	d818      	bhi.n	80140ba <__hexnan+0x7e>
 8014088:	9b02      	ldr	r3, [sp, #8]
 801408a:	459b      	cmp	fp, r3
 801408c:	dd13      	ble.n	80140b6 <__hexnan+0x7a>
 801408e:	454c      	cmp	r4, r9
 8014090:	d206      	bcs.n	80140a0 <__hexnan+0x64>
 8014092:	2d07      	cmp	r5, #7
 8014094:	dc04      	bgt.n	80140a0 <__hexnan+0x64>
 8014096:	462a      	mov	r2, r5
 8014098:	4649      	mov	r1, r9
 801409a:	4620      	mov	r0, r4
 801409c:	f7ff ffa8 	bl	8013ff0 <L_shift>
 80140a0:	4544      	cmp	r4, r8
 80140a2:	d944      	bls.n	801412e <__hexnan+0xf2>
 80140a4:	2300      	movs	r3, #0
 80140a6:	f1a4 0904 	sub.w	r9, r4, #4
 80140aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80140ae:	461d      	mov	r5, r3
 80140b0:	464c      	mov	r4, r9
 80140b2:	f8cd b008 	str.w	fp, [sp, #8]
 80140b6:	9903      	ldr	r1, [sp, #12]
 80140b8:	e7d7      	b.n	801406a <__hexnan+0x2e>
 80140ba:	2a29      	cmp	r2, #41	; 0x29
 80140bc:	d14a      	bne.n	8014154 <__hexnan+0x118>
 80140be:	3102      	adds	r1, #2
 80140c0:	f8ca 1000 	str.w	r1, [sl]
 80140c4:	f1bb 0f00 	cmp.w	fp, #0
 80140c8:	d044      	beq.n	8014154 <__hexnan+0x118>
 80140ca:	454c      	cmp	r4, r9
 80140cc:	d206      	bcs.n	80140dc <__hexnan+0xa0>
 80140ce:	2d07      	cmp	r5, #7
 80140d0:	dc04      	bgt.n	80140dc <__hexnan+0xa0>
 80140d2:	462a      	mov	r2, r5
 80140d4:	4649      	mov	r1, r9
 80140d6:	4620      	mov	r0, r4
 80140d8:	f7ff ff8a 	bl	8013ff0 <L_shift>
 80140dc:	4544      	cmp	r4, r8
 80140de:	d928      	bls.n	8014132 <__hexnan+0xf6>
 80140e0:	4643      	mov	r3, r8
 80140e2:	f854 2b04 	ldr.w	r2, [r4], #4
 80140e6:	42a6      	cmp	r6, r4
 80140e8:	f843 2b04 	str.w	r2, [r3], #4
 80140ec:	d2f9      	bcs.n	80140e2 <__hexnan+0xa6>
 80140ee:	2200      	movs	r2, #0
 80140f0:	f843 2b04 	str.w	r2, [r3], #4
 80140f4:	429e      	cmp	r6, r3
 80140f6:	d2fb      	bcs.n	80140f0 <__hexnan+0xb4>
 80140f8:	6833      	ldr	r3, [r6, #0]
 80140fa:	b91b      	cbnz	r3, 8014104 <__hexnan+0xc8>
 80140fc:	4546      	cmp	r6, r8
 80140fe:	d127      	bne.n	8014150 <__hexnan+0x114>
 8014100:	2301      	movs	r3, #1
 8014102:	6033      	str	r3, [r6, #0]
 8014104:	2005      	movs	r0, #5
 8014106:	e026      	b.n	8014156 <__hexnan+0x11a>
 8014108:	3501      	adds	r5, #1
 801410a:	2d08      	cmp	r5, #8
 801410c:	f10b 0b01 	add.w	fp, fp, #1
 8014110:	dd06      	ble.n	8014120 <__hexnan+0xe4>
 8014112:	4544      	cmp	r4, r8
 8014114:	d9cf      	bls.n	80140b6 <__hexnan+0x7a>
 8014116:	2300      	movs	r3, #0
 8014118:	2501      	movs	r5, #1
 801411a:	f844 3c04 	str.w	r3, [r4, #-4]
 801411e:	3c04      	subs	r4, #4
 8014120:	6822      	ldr	r2, [r4, #0]
 8014122:	f000 000f 	and.w	r0, r0, #15
 8014126:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801412a:	6020      	str	r0, [r4, #0]
 801412c:	e7c3      	b.n	80140b6 <__hexnan+0x7a>
 801412e:	2508      	movs	r5, #8
 8014130:	e7c1      	b.n	80140b6 <__hexnan+0x7a>
 8014132:	9b01      	ldr	r3, [sp, #4]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d0df      	beq.n	80140f8 <__hexnan+0xbc>
 8014138:	f04f 32ff 	mov.w	r2, #4294967295
 801413c:	f1c3 0320 	rsb	r3, r3, #32
 8014140:	fa22 f303 	lsr.w	r3, r2, r3
 8014144:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014148:	401a      	ands	r2, r3
 801414a:	f847 2c04 	str.w	r2, [r7, #-4]
 801414e:	e7d3      	b.n	80140f8 <__hexnan+0xbc>
 8014150:	3e04      	subs	r6, #4
 8014152:	e7d1      	b.n	80140f8 <__hexnan+0xbc>
 8014154:	2004      	movs	r0, #4
 8014156:	b007      	add	sp, #28
 8014158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801415c <__localeconv_l>:
 801415c:	30f0      	adds	r0, #240	; 0xf0
 801415e:	4770      	bx	lr

08014160 <_localeconv_r>:
 8014160:	4b04      	ldr	r3, [pc, #16]	; (8014174 <_localeconv_r+0x14>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	6a18      	ldr	r0, [r3, #32]
 8014166:	4b04      	ldr	r3, [pc, #16]	; (8014178 <_localeconv_r+0x18>)
 8014168:	2800      	cmp	r0, #0
 801416a:	bf08      	it	eq
 801416c:	4618      	moveq	r0, r3
 801416e:	30f0      	adds	r0, #240	; 0xf0
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	20000060 	.word	0x20000060
 8014178:	200000c4 	.word	0x200000c4

0801417c <malloc>:
 801417c:	4b02      	ldr	r3, [pc, #8]	; (8014188 <malloc+0xc>)
 801417e:	4601      	mov	r1, r0
 8014180:	6818      	ldr	r0, [r3, #0]
 8014182:	f000 bc63 	b.w	8014a4c <_malloc_r>
 8014186:	bf00      	nop
 8014188:	20000060 	.word	0x20000060

0801418c <memchr>:
 801418c:	b510      	push	{r4, lr}
 801418e:	b2c9      	uxtb	r1, r1
 8014190:	4402      	add	r2, r0
 8014192:	4290      	cmp	r0, r2
 8014194:	4603      	mov	r3, r0
 8014196:	d101      	bne.n	801419c <memchr+0x10>
 8014198:	2300      	movs	r3, #0
 801419a:	e003      	b.n	80141a4 <memchr+0x18>
 801419c:	781c      	ldrb	r4, [r3, #0]
 801419e:	3001      	adds	r0, #1
 80141a0:	428c      	cmp	r4, r1
 80141a2:	d1f6      	bne.n	8014192 <memchr+0x6>
 80141a4:	4618      	mov	r0, r3
 80141a6:	bd10      	pop	{r4, pc}

080141a8 <_Balloc>:
 80141a8:	b570      	push	{r4, r5, r6, lr}
 80141aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80141ac:	4604      	mov	r4, r0
 80141ae:	460e      	mov	r6, r1
 80141b0:	b93d      	cbnz	r5, 80141c2 <_Balloc+0x1a>
 80141b2:	2010      	movs	r0, #16
 80141b4:	f7ff ffe2 	bl	801417c <malloc>
 80141b8:	6260      	str	r0, [r4, #36]	; 0x24
 80141ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80141be:	6005      	str	r5, [r0, #0]
 80141c0:	60c5      	str	r5, [r0, #12]
 80141c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80141c4:	68eb      	ldr	r3, [r5, #12]
 80141c6:	b183      	cbz	r3, 80141ea <_Balloc+0x42>
 80141c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80141d0:	b9b8      	cbnz	r0, 8014202 <_Balloc+0x5a>
 80141d2:	2101      	movs	r1, #1
 80141d4:	fa01 f506 	lsl.w	r5, r1, r6
 80141d8:	1d6a      	adds	r2, r5, #5
 80141da:	0092      	lsls	r2, r2, #2
 80141dc:	4620      	mov	r0, r4
 80141de:	f000 fbdb 	bl	8014998 <_calloc_r>
 80141e2:	b160      	cbz	r0, 80141fe <_Balloc+0x56>
 80141e4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80141e8:	e00e      	b.n	8014208 <_Balloc+0x60>
 80141ea:	2221      	movs	r2, #33	; 0x21
 80141ec:	2104      	movs	r1, #4
 80141ee:	4620      	mov	r0, r4
 80141f0:	f000 fbd2 	bl	8014998 <_calloc_r>
 80141f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141f6:	60e8      	str	r0, [r5, #12]
 80141f8:	68db      	ldr	r3, [r3, #12]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d1e4      	bne.n	80141c8 <_Balloc+0x20>
 80141fe:	2000      	movs	r0, #0
 8014200:	bd70      	pop	{r4, r5, r6, pc}
 8014202:	6802      	ldr	r2, [r0, #0]
 8014204:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014208:	2300      	movs	r3, #0
 801420a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801420e:	e7f7      	b.n	8014200 <_Balloc+0x58>

08014210 <_Bfree>:
 8014210:	b570      	push	{r4, r5, r6, lr}
 8014212:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014214:	4606      	mov	r6, r0
 8014216:	460d      	mov	r5, r1
 8014218:	b93c      	cbnz	r4, 801422a <_Bfree+0x1a>
 801421a:	2010      	movs	r0, #16
 801421c:	f7ff ffae 	bl	801417c <malloc>
 8014220:	6270      	str	r0, [r6, #36]	; 0x24
 8014222:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014226:	6004      	str	r4, [r0, #0]
 8014228:	60c4      	str	r4, [r0, #12]
 801422a:	b13d      	cbz	r5, 801423c <_Bfree+0x2c>
 801422c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801422e:	686a      	ldr	r2, [r5, #4]
 8014230:	68db      	ldr	r3, [r3, #12]
 8014232:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014236:	6029      	str	r1, [r5, #0]
 8014238:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801423c:	bd70      	pop	{r4, r5, r6, pc}

0801423e <__multadd>:
 801423e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014242:	461f      	mov	r7, r3
 8014244:	4606      	mov	r6, r0
 8014246:	460c      	mov	r4, r1
 8014248:	2300      	movs	r3, #0
 801424a:	690d      	ldr	r5, [r1, #16]
 801424c:	f101 0c14 	add.w	ip, r1, #20
 8014250:	f8dc 0000 	ldr.w	r0, [ip]
 8014254:	3301      	adds	r3, #1
 8014256:	b281      	uxth	r1, r0
 8014258:	fb02 7101 	mla	r1, r2, r1, r7
 801425c:	0c00      	lsrs	r0, r0, #16
 801425e:	0c0f      	lsrs	r7, r1, #16
 8014260:	fb02 7000 	mla	r0, r2, r0, r7
 8014264:	b289      	uxth	r1, r1
 8014266:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801426a:	429d      	cmp	r5, r3
 801426c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014270:	f84c 1b04 	str.w	r1, [ip], #4
 8014274:	dcec      	bgt.n	8014250 <__multadd+0x12>
 8014276:	b1d7      	cbz	r7, 80142ae <__multadd+0x70>
 8014278:	68a3      	ldr	r3, [r4, #8]
 801427a:	42ab      	cmp	r3, r5
 801427c:	dc12      	bgt.n	80142a4 <__multadd+0x66>
 801427e:	6861      	ldr	r1, [r4, #4]
 8014280:	4630      	mov	r0, r6
 8014282:	3101      	adds	r1, #1
 8014284:	f7ff ff90 	bl	80141a8 <_Balloc>
 8014288:	4680      	mov	r8, r0
 801428a:	6922      	ldr	r2, [r4, #16]
 801428c:	f104 010c 	add.w	r1, r4, #12
 8014290:	3202      	adds	r2, #2
 8014292:	0092      	lsls	r2, r2, #2
 8014294:	300c      	adds	r0, #12
 8014296:	f7fd f921 	bl	80114dc <memcpy>
 801429a:	4621      	mov	r1, r4
 801429c:	4630      	mov	r0, r6
 801429e:	f7ff ffb7 	bl	8014210 <_Bfree>
 80142a2:	4644      	mov	r4, r8
 80142a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80142a8:	3501      	adds	r5, #1
 80142aa:	615f      	str	r7, [r3, #20]
 80142ac:	6125      	str	r5, [r4, #16]
 80142ae:	4620      	mov	r0, r4
 80142b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142b4 <__s2b>:
 80142b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142b8:	4615      	mov	r5, r2
 80142ba:	2209      	movs	r2, #9
 80142bc:	461f      	mov	r7, r3
 80142be:	3308      	adds	r3, #8
 80142c0:	460c      	mov	r4, r1
 80142c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80142c6:	4606      	mov	r6, r0
 80142c8:	2201      	movs	r2, #1
 80142ca:	2100      	movs	r1, #0
 80142cc:	429a      	cmp	r2, r3
 80142ce:	db20      	blt.n	8014312 <__s2b+0x5e>
 80142d0:	4630      	mov	r0, r6
 80142d2:	f7ff ff69 	bl	80141a8 <_Balloc>
 80142d6:	9b08      	ldr	r3, [sp, #32]
 80142d8:	2d09      	cmp	r5, #9
 80142da:	6143      	str	r3, [r0, #20]
 80142dc:	f04f 0301 	mov.w	r3, #1
 80142e0:	6103      	str	r3, [r0, #16]
 80142e2:	dd19      	ble.n	8014318 <__s2b+0x64>
 80142e4:	f104 0809 	add.w	r8, r4, #9
 80142e8:	46c1      	mov	r9, r8
 80142ea:	442c      	add	r4, r5
 80142ec:	f819 3b01 	ldrb.w	r3, [r9], #1
 80142f0:	4601      	mov	r1, r0
 80142f2:	3b30      	subs	r3, #48	; 0x30
 80142f4:	220a      	movs	r2, #10
 80142f6:	4630      	mov	r0, r6
 80142f8:	f7ff ffa1 	bl	801423e <__multadd>
 80142fc:	45a1      	cmp	r9, r4
 80142fe:	d1f5      	bne.n	80142ec <__s2b+0x38>
 8014300:	eb08 0405 	add.w	r4, r8, r5
 8014304:	3c08      	subs	r4, #8
 8014306:	1b2d      	subs	r5, r5, r4
 8014308:	1963      	adds	r3, r4, r5
 801430a:	42bb      	cmp	r3, r7
 801430c:	db07      	blt.n	801431e <__s2b+0x6a>
 801430e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014312:	0052      	lsls	r2, r2, #1
 8014314:	3101      	adds	r1, #1
 8014316:	e7d9      	b.n	80142cc <__s2b+0x18>
 8014318:	340a      	adds	r4, #10
 801431a:	2509      	movs	r5, #9
 801431c:	e7f3      	b.n	8014306 <__s2b+0x52>
 801431e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014322:	4601      	mov	r1, r0
 8014324:	3b30      	subs	r3, #48	; 0x30
 8014326:	220a      	movs	r2, #10
 8014328:	4630      	mov	r0, r6
 801432a:	f7ff ff88 	bl	801423e <__multadd>
 801432e:	e7eb      	b.n	8014308 <__s2b+0x54>

08014330 <__hi0bits>:
 8014330:	0c02      	lsrs	r2, r0, #16
 8014332:	0412      	lsls	r2, r2, #16
 8014334:	4603      	mov	r3, r0
 8014336:	b9b2      	cbnz	r2, 8014366 <__hi0bits+0x36>
 8014338:	0403      	lsls	r3, r0, #16
 801433a:	2010      	movs	r0, #16
 801433c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014340:	bf04      	itt	eq
 8014342:	021b      	lsleq	r3, r3, #8
 8014344:	3008      	addeq	r0, #8
 8014346:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801434a:	bf04      	itt	eq
 801434c:	011b      	lsleq	r3, r3, #4
 801434e:	3004      	addeq	r0, #4
 8014350:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014354:	bf04      	itt	eq
 8014356:	009b      	lsleq	r3, r3, #2
 8014358:	3002      	addeq	r0, #2
 801435a:	2b00      	cmp	r3, #0
 801435c:	db06      	blt.n	801436c <__hi0bits+0x3c>
 801435e:	005b      	lsls	r3, r3, #1
 8014360:	d503      	bpl.n	801436a <__hi0bits+0x3a>
 8014362:	3001      	adds	r0, #1
 8014364:	4770      	bx	lr
 8014366:	2000      	movs	r0, #0
 8014368:	e7e8      	b.n	801433c <__hi0bits+0xc>
 801436a:	2020      	movs	r0, #32
 801436c:	4770      	bx	lr

0801436e <__lo0bits>:
 801436e:	6803      	ldr	r3, [r0, #0]
 8014370:	4601      	mov	r1, r0
 8014372:	f013 0207 	ands.w	r2, r3, #7
 8014376:	d00b      	beq.n	8014390 <__lo0bits+0x22>
 8014378:	07da      	lsls	r2, r3, #31
 801437a:	d423      	bmi.n	80143c4 <__lo0bits+0x56>
 801437c:	0798      	lsls	r0, r3, #30
 801437e:	bf49      	itett	mi
 8014380:	085b      	lsrmi	r3, r3, #1
 8014382:	089b      	lsrpl	r3, r3, #2
 8014384:	2001      	movmi	r0, #1
 8014386:	600b      	strmi	r3, [r1, #0]
 8014388:	bf5c      	itt	pl
 801438a:	600b      	strpl	r3, [r1, #0]
 801438c:	2002      	movpl	r0, #2
 801438e:	4770      	bx	lr
 8014390:	b298      	uxth	r0, r3
 8014392:	b9a8      	cbnz	r0, 80143c0 <__lo0bits+0x52>
 8014394:	2010      	movs	r0, #16
 8014396:	0c1b      	lsrs	r3, r3, #16
 8014398:	f013 0fff 	tst.w	r3, #255	; 0xff
 801439c:	bf04      	itt	eq
 801439e:	0a1b      	lsreq	r3, r3, #8
 80143a0:	3008      	addeq	r0, #8
 80143a2:	071a      	lsls	r2, r3, #28
 80143a4:	bf04      	itt	eq
 80143a6:	091b      	lsreq	r3, r3, #4
 80143a8:	3004      	addeq	r0, #4
 80143aa:	079a      	lsls	r2, r3, #30
 80143ac:	bf04      	itt	eq
 80143ae:	089b      	lsreq	r3, r3, #2
 80143b0:	3002      	addeq	r0, #2
 80143b2:	07da      	lsls	r2, r3, #31
 80143b4:	d402      	bmi.n	80143bc <__lo0bits+0x4e>
 80143b6:	085b      	lsrs	r3, r3, #1
 80143b8:	d006      	beq.n	80143c8 <__lo0bits+0x5a>
 80143ba:	3001      	adds	r0, #1
 80143bc:	600b      	str	r3, [r1, #0]
 80143be:	4770      	bx	lr
 80143c0:	4610      	mov	r0, r2
 80143c2:	e7e9      	b.n	8014398 <__lo0bits+0x2a>
 80143c4:	2000      	movs	r0, #0
 80143c6:	4770      	bx	lr
 80143c8:	2020      	movs	r0, #32
 80143ca:	4770      	bx	lr

080143cc <__i2b>:
 80143cc:	b510      	push	{r4, lr}
 80143ce:	460c      	mov	r4, r1
 80143d0:	2101      	movs	r1, #1
 80143d2:	f7ff fee9 	bl	80141a8 <_Balloc>
 80143d6:	2201      	movs	r2, #1
 80143d8:	6144      	str	r4, [r0, #20]
 80143da:	6102      	str	r2, [r0, #16]
 80143dc:	bd10      	pop	{r4, pc}

080143de <__multiply>:
 80143de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143e2:	4614      	mov	r4, r2
 80143e4:	690a      	ldr	r2, [r1, #16]
 80143e6:	6923      	ldr	r3, [r4, #16]
 80143e8:	4688      	mov	r8, r1
 80143ea:	429a      	cmp	r2, r3
 80143ec:	bfbe      	ittt	lt
 80143ee:	460b      	movlt	r3, r1
 80143f0:	46a0      	movlt	r8, r4
 80143f2:	461c      	movlt	r4, r3
 80143f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80143f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80143fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014400:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014404:	eb07 0609 	add.w	r6, r7, r9
 8014408:	42b3      	cmp	r3, r6
 801440a:	bfb8      	it	lt
 801440c:	3101      	addlt	r1, #1
 801440e:	f7ff fecb 	bl	80141a8 <_Balloc>
 8014412:	f100 0514 	add.w	r5, r0, #20
 8014416:	462b      	mov	r3, r5
 8014418:	2200      	movs	r2, #0
 801441a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801441e:	4573      	cmp	r3, lr
 8014420:	d316      	bcc.n	8014450 <__multiply+0x72>
 8014422:	f104 0214 	add.w	r2, r4, #20
 8014426:	f108 0114 	add.w	r1, r8, #20
 801442a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801442e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014432:	9300      	str	r3, [sp, #0]
 8014434:	9b00      	ldr	r3, [sp, #0]
 8014436:	9201      	str	r2, [sp, #4]
 8014438:	4293      	cmp	r3, r2
 801443a:	d80c      	bhi.n	8014456 <__multiply+0x78>
 801443c:	2e00      	cmp	r6, #0
 801443e:	dd03      	ble.n	8014448 <__multiply+0x6a>
 8014440:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014444:	2b00      	cmp	r3, #0
 8014446:	d05d      	beq.n	8014504 <__multiply+0x126>
 8014448:	6106      	str	r6, [r0, #16]
 801444a:	b003      	add	sp, #12
 801444c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014450:	f843 2b04 	str.w	r2, [r3], #4
 8014454:	e7e3      	b.n	801441e <__multiply+0x40>
 8014456:	f8b2 b000 	ldrh.w	fp, [r2]
 801445a:	f1bb 0f00 	cmp.w	fp, #0
 801445e:	d023      	beq.n	80144a8 <__multiply+0xca>
 8014460:	4689      	mov	r9, r1
 8014462:	46ac      	mov	ip, r5
 8014464:	f04f 0800 	mov.w	r8, #0
 8014468:	f859 4b04 	ldr.w	r4, [r9], #4
 801446c:	f8dc a000 	ldr.w	sl, [ip]
 8014470:	b2a3      	uxth	r3, r4
 8014472:	fa1f fa8a 	uxth.w	sl, sl
 8014476:	fb0b a303 	mla	r3, fp, r3, sl
 801447a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801447e:	f8dc 4000 	ldr.w	r4, [ip]
 8014482:	4443      	add	r3, r8
 8014484:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014488:	fb0b 840a 	mla	r4, fp, sl, r8
 801448c:	46e2      	mov	sl, ip
 801448e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014492:	b29b      	uxth	r3, r3
 8014494:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014498:	454f      	cmp	r7, r9
 801449a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801449e:	f84a 3b04 	str.w	r3, [sl], #4
 80144a2:	d82b      	bhi.n	80144fc <__multiply+0x11e>
 80144a4:	f8cc 8004 	str.w	r8, [ip, #4]
 80144a8:	9b01      	ldr	r3, [sp, #4]
 80144aa:	3204      	adds	r2, #4
 80144ac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80144b0:	f1ba 0f00 	cmp.w	sl, #0
 80144b4:	d020      	beq.n	80144f8 <__multiply+0x11a>
 80144b6:	4689      	mov	r9, r1
 80144b8:	46a8      	mov	r8, r5
 80144ba:	f04f 0b00 	mov.w	fp, #0
 80144be:	682b      	ldr	r3, [r5, #0]
 80144c0:	f8b9 c000 	ldrh.w	ip, [r9]
 80144c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80144c8:	b29b      	uxth	r3, r3
 80144ca:	fb0a 440c 	mla	r4, sl, ip, r4
 80144ce:	46c4      	mov	ip, r8
 80144d0:	445c      	add	r4, fp
 80144d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80144d6:	f84c 3b04 	str.w	r3, [ip], #4
 80144da:	f859 3b04 	ldr.w	r3, [r9], #4
 80144de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80144e2:	0c1b      	lsrs	r3, r3, #16
 80144e4:	fb0a b303 	mla	r3, sl, r3, fp
 80144e8:	454f      	cmp	r7, r9
 80144ea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80144ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80144f2:	d805      	bhi.n	8014500 <__multiply+0x122>
 80144f4:	f8c8 3004 	str.w	r3, [r8, #4]
 80144f8:	3504      	adds	r5, #4
 80144fa:	e79b      	b.n	8014434 <__multiply+0x56>
 80144fc:	46d4      	mov	ip, sl
 80144fe:	e7b3      	b.n	8014468 <__multiply+0x8a>
 8014500:	46e0      	mov	r8, ip
 8014502:	e7dd      	b.n	80144c0 <__multiply+0xe2>
 8014504:	3e01      	subs	r6, #1
 8014506:	e799      	b.n	801443c <__multiply+0x5e>

08014508 <__pow5mult>:
 8014508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801450c:	4615      	mov	r5, r2
 801450e:	f012 0203 	ands.w	r2, r2, #3
 8014512:	4606      	mov	r6, r0
 8014514:	460f      	mov	r7, r1
 8014516:	d007      	beq.n	8014528 <__pow5mult+0x20>
 8014518:	4c21      	ldr	r4, [pc, #132]	; (80145a0 <__pow5mult+0x98>)
 801451a:	3a01      	subs	r2, #1
 801451c:	2300      	movs	r3, #0
 801451e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014522:	f7ff fe8c 	bl	801423e <__multadd>
 8014526:	4607      	mov	r7, r0
 8014528:	10ad      	asrs	r5, r5, #2
 801452a:	d035      	beq.n	8014598 <__pow5mult+0x90>
 801452c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801452e:	b93c      	cbnz	r4, 8014540 <__pow5mult+0x38>
 8014530:	2010      	movs	r0, #16
 8014532:	f7ff fe23 	bl	801417c <malloc>
 8014536:	6270      	str	r0, [r6, #36]	; 0x24
 8014538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801453c:	6004      	str	r4, [r0, #0]
 801453e:	60c4      	str	r4, [r0, #12]
 8014540:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014548:	b94c      	cbnz	r4, 801455e <__pow5mult+0x56>
 801454a:	f240 2171 	movw	r1, #625	; 0x271
 801454e:	4630      	mov	r0, r6
 8014550:	f7ff ff3c 	bl	80143cc <__i2b>
 8014554:	2300      	movs	r3, #0
 8014556:	4604      	mov	r4, r0
 8014558:	f8c8 0008 	str.w	r0, [r8, #8]
 801455c:	6003      	str	r3, [r0, #0]
 801455e:	f04f 0800 	mov.w	r8, #0
 8014562:	07eb      	lsls	r3, r5, #31
 8014564:	d50a      	bpl.n	801457c <__pow5mult+0x74>
 8014566:	4639      	mov	r1, r7
 8014568:	4622      	mov	r2, r4
 801456a:	4630      	mov	r0, r6
 801456c:	f7ff ff37 	bl	80143de <__multiply>
 8014570:	4681      	mov	r9, r0
 8014572:	4639      	mov	r1, r7
 8014574:	4630      	mov	r0, r6
 8014576:	f7ff fe4b 	bl	8014210 <_Bfree>
 801457a:	464f      	mov	r7, r9
 801457c:	106d      	asrs	r5, r5, #1
 801457e:	d00b      	beq.n	8014598 <__pow5mult+0x90>
 8014580:	6820      	ldr	r0, [r4, #0]
 8014582:	b938      	cbnz	r0, 8014594 <__pow5mult+0x8c>
 8014584:	4622      	mov	r2, r4
 8014586:	4621      	mov	r1, r4
 8014588:	4630      	mov	r0, r6
 801458a:	f7ff ff28 	bl	80143de <__multiply>
 801458e:	6020      	str	r0, [r4, #0]
 8014590:	f8c0 8000 	str.w	r8, [r0]
 8014594:	4604      	mov	r4, r0
 8014596:	e7e4      	b.n	8014562 <__pow5mult+0x5a>
 8014598:	4638      	mov	r0, r7
 801459a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801459e:	bf00      	nop
 80145a0:	0801a2e8 	.word	0x0801a2e8

080145a4 <__lshift>:
 80145a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145a8:	460c      	mov	r4, r1
 80145aa:	4607      	mov	r7, r0
 80145ac:	4616      	mov	r6, r2
 80145ae:	6923      	ldr	r3, [r4, #16]
 80145b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80145b4:	eb0a 0903 	add.w	r9, sl, r3
 80145b8:	6849      	ldr	r1, [r1, #4]
 80145ba:	68a3      	ldr	r3, [r4, #8]
 80145bc:	f109 0501 	add.w	r5, r9, #1
 80145c0:	42ab      	cmp	r3, r5
 80145c2:	db32      	blt.n	801462a <__lshift+0x86>
 80145c4:	4638      	mov	r0, r7
 80145c6:	f7ff fdef 	bl	80141a8 <_Balloc>
 80145ca:	2300      	movs	r3, #0
 80145cc:	4680      	mov	r8, r0
 80145ce:	461a      	mov	r2, r3
 80145d0:	f100 0114 	add.w	r1, r0, #20
 80145d4:	4553      	cmp	r3, sl
 80145d6:	db2b      	blt.n	8014630 <__lshift+0x8c>
 80145d8:	6920      	ldr	r0, [r4, #16]
 80145da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80145de:	f104 0314 	add.w	r3, r4, #20
 80145e2:	f016 021f 	ands.w	r2, r6, #31
 80145e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80145ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80145ee:	d025      	beq.n	801463c <__lshift+0x98>
 80145f0:	2000      	movs	r0, #0
 80145f2:	f1c2 0e20 	rsb	lr, r2, #32
 80145f6:	468a      	mov	sl, r1
 80145f8:	681e      	ldr	r6, [r3, #0]
 80145fa:	4096      	lsls	r6, r2
 80145fc:	4330      	orrs	r0, r6
 80145fe:	f84a 0b04 	str.w	r0, [sl], #4
 8014602:	f853 0b04 	ldr.w	r0, [r3], #4
 8014606:	459c      	cmp	ip, r3
 8014608:	fa20 f00e 	lsr.w	r0, r0, lr
 801460c:	d814      	bhi.n	8014638 <__lshift+0x94>
 801460e:	6048      	str	r0, [r1, #4]
 8014610:	b108      	cbz	r0, 8014616 <__lshift+0x72>
 8014612:	f109 0502 	add.w	r5, r9, #2
 8014616:	3d01      	subs	r5, #1
 8014618:	4638      	mov	r0, r7
 801461a:	f8c8 5010 	str.w	r5, [r8, #16]
 801461e:	4621      	mov	r1, r4
 8014620:	f7ff fdf6 	bl	8014210 <_Bfree>
 8014624:	4640      	mov	r0, r8
 8014626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801462a:	3101      	adds	r1, #1
 801462c:	005b      	lsls	r3, r3, #1
 801462e:	e7c7      	b.n	80145c0 <__lshift+0x1c>
 8014630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014634:	3301      	adds	r3, #1
 8014636:	e7cd      	b.n	80145d4 <__lshift+0x30>
 8014638:	4651      	mov	r1, sl
 801463a:	e7dc      	b.n	80145f6 <__lshift+0x52>
 801463c:	3904      	subs	r1, #4
 801463e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014642:	459c      	cmp	ip, r3
 8014644:	f841 2f04 	str.w	r2, [r1, #4]!
 8014648:	d8f9      	bhi.n	801463e <__lshift+0x9a>
 801464a:	e7e4      	b.n	8014616 <__lshift+0x72>

0801464c <__mcmp>:
 801464c:	6903      	ldr	r3, [r0, #16]
 801464e:	690a      	ldr	r2, [r1, #16]
 8014650:	b530      	push	{r4, r5, lr}
 8014652:	1a9b      	subs	r3, r3, r2
 8014654:	d10c      	bne.n	8014670 <__mcmp+0x24>
 8014656:	0092      	lsls	r2, r2, #2
 8014658:	3014      	adds	r0, #20
 801465a:	3114      	adds	r1, #20
 801465c:	1884      	adds	r4, r0, r2
 801465e:	4411      	add	r1, r2
 8014660:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014664:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014668:	4295      	cmp	r5, r2
 801466a:	d003      	beq.n	8014674 <__mcmp+0x28>
 801466c:	d305      	bcc.n	801467a <__mcmp+0x2e>
 801466e:	2301      	movs	r3, #1
 8014670:	4618      	mov	r0, r3
 8014672:	bd30      	pop	{r4, r5, pc}
 8014674:	42a0      	cmp	r0, r4
 8014676:	d3f3      	bcc.n	8014660 <__mcmp+0x14>
 8014678:	e7fa      	b.n	8014670 <__mcmp+0x24>
 801467a:	f04f 33ff 	mov.w	r3, #4294967295
 801467e:	e7f7      	b.n	8014670 <__mcmp+0x24>

08014680 <__mdiff>:
 8014680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014684:	460d      	mov	r5, r1
 8014686:	4607      	mov	r7, r0
 8014688:	4611      	mov	r1, r2
 801468a:	4628      	mov	r0, r5
 801468c:	4614      	mov	r4, r2
 801468e:	f7ff ffdd 	bl	801464c <__mcmp>
 8014692:	1e06      	subs	r6, r0, #0
 8014694:	d108      	bne.n	80146a8 <__mdiff+0x28>
 8014696:	4631      	mov	r1, r6
 8014698:	4638      	mov	r0, r7
 801469a:	f7ff fd85 	bl	80141a8 <_Balloc>
 801469e:	2301      	movs	r3, #1
 80146a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80146a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146a8:	bfa4      	itt	ge
 80146aa:	4623      	movge	r3, r4
 80146ac:	462c      	movge	r4, r5
 80146ae:	4638      	mov	r0, r7
 80146b0:	6861      	ldr	r1, [r4, #4]
 80146b2:	bfa6      	itte	ge
 80146b4:	461d      	movge	r5, r3
 80146b6:	2600      	movge	r6, #0
 80146b8:	2601      	movlt	r6, #1
 80146ba:	f7ff fd75 	bl	80141a8 <_Balloc>
 80146be:	f04f 0e00 	mov.w	lr, #0
 80146c2:	60c6      	str	r6, [r0, #12]
 80146c4:	692b      	ldr	r3, [r5, #16]
 80146c6:	6926      	ldr	r6, [r4, #16]
 80146c8:	f104 0214 	add.w	r2, r4, #20
 80146cc:	f105 0914 	add.w	r9, r5, #20
 80146d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80146d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80146d8:	f100 0114 	add.w	r1, r0, #20
 80146dc:	f852 ab04 	ldr.w	sl, [r2], #4
 80146e0:	f859 5b04 	ldr.w	r5, [r9], #4
 80146e4:	fa1f f38a 	uxth.w	r3, sl
 80146e8:	4473      	add	r3, lr
 80146ea:	b2ac      	uxth	r4, r5
 80146ec:	1b1b      	subs	r3, r3, r4
 80146ee:	0c2c      	lsrs	r4, r5, #16
 80146f0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80146f4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80146f8:	b29b      	uxth	r3, r3
 80146fa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80146fe:	45c8      	cmp	r8, r9
 8014700:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8014704:	4694      	mov	ip, r2
 8014706:	f841 4b04 	str.w	r4, [r1], #4
 801470a:	d8e7      	bhi.n	80146dc <__mdiff+0x5c>
 801470c:	45bc      	cmp	ip, r7
 801470e:	d304      	bcc.n	801471a <__mdiff+0x9a>
 8014710:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8014714:	b183      	cbz	r3, 8014738 <__mdiff+0xb8>
 8014716:	6106      	str	r6, [r0, #16]
 8014718:	e7c4      	b.n	80146a4 <__mdiff+0x24>
 801471a:	f85c 4b04 	ldr.w	r4, [ip], #4
 801471e:	b2a2      	uxth	r2, r4
 8014720:	4472      	add	r2, lr
 8014722:	1413      	asrs	r3, r2, #16
 8014724:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014728:	b292      	uxth	r2, r2
 801472a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801472e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014732:	f841 2b04 	str.w	r2, [r1], #4
 8014736:	e7e9      	b.n	801470c <__mdiff+0x8c>
 8014738:	3e01      	subs	r6, #1
 801473a:	e7e9      	b.n	8014710 <__mdiff+0x90>

0801473c <__ulp>:
 801473c:	4b10      	ldr	r3, [pc, #64]	; (8014780 <__ulp+0x44>)
 801473e:	400b      	ands	r3, r1
 8014740:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014744:	2b00      	cmp	r3, #0
 8014746:	dd02      	ble.n	801474e <__ulp+0x12>
 8014748:	2000      	movs	r0, #0
 801474a:	4619      	mov	r1, r3
 801474c:	4770      	bx	lr
 801474e:	425b      	negs	r3, r3
 8014750:	151b      	asrs	r3, r3, #20
 8014752:	2b13      	cmp	r3, #19
 8014754:	f04f 0000 	mov.w	r0, #0
 8014758:	f04f 0100 	mov.w	r1, #0
 801475c:	dc04      	bgt.n	8014768 <__ulp+0x2c>
 801475e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014762:	fa42 f103 	asr.w	r1, r2, r3
 8014766:	4770      	bx	lr
 8014768:	2201      	movs	r2, #1
 801476a:	3b14      	subs	r3, #20
 801476c:	2b1e      	cmp	r3, #30
 801476e:	bfce      	itee	gt
 8014770:	4613      	movgt	r3, r2
 8014772:	f1c3 031f 	rsble	r3, r3, #31
 8014776:	fa02 f303 	lslle.w	r3, r2, r3
 801477a:	4618      	mov	r0, r3
 801477c:	4770      	bx	lr
 801477e:	bf00      	nop
 8014780:	7ff00000 	.word	0x7ff00000

08014784 <__b2d>:
 8014784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014788:	6907      	ldr	r7, [r0, #16]
 801478a:	f100 0914 	add.w	r9, r0, #20
 801478e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8014792:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8014796:	f1a7 0804 	sub.w	r8, r7, #4
 801479a:	4630      	mov	r0, r6
 801479c:	f7ff fdc8 	bl	8014330 <__hi0bits>
 80147a0:	f1c0 0320 	rsb	r3, r0, #32
 80147a4:	280a      	cmp	r0, #10
 80147a6:	600b      	str	r3, [r1, #0]
 80147a8:	491e      	ldr	r1, [pc, #120]	; (8014824 <__b2d+0xa0>)
 80147aa:	dc17      	bgt.n	80147dc <__b2d+0x58>
 80147ac:	45c1      	cmp	r9, r8
 80147ae:	bf28      	it	cs
 80147b0:	2200      	movcs	r2, #0
 80147b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80147b6:	fa26 f30c 	lsr.w	r3, r6, ip
 80147ba:	bf38      	it	cc
 80147bc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80147c0:	ea43 0501 	orr.w	r5, r3, r1
 80147c4:	f100 0315 	add.w	r3, r0, #21
 80147c8:	fa06 f303 	lsl.w	r3, r6, r3
 80147cc:	fa22 f20c 	lsr.w	r2, r2, ip
 80147d0:	ea43 0402 	orr.w	r4, r3, r2
 80147d4:	4620      	mov	r0, r4
 80147d6:	4629      	mov	r1, r5
 80147d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147dc:	45c1      	cmp	r9, r8
 80147de:	bf3a      	itte	cc
 80147e0:	f1a7 0808 	subcc.w	r8, r7, #8
 80147e4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80147e8:	2200      	movcs	r2, #0
 80147ea:	f1b0 030b 	subs.w	r3, r0, #11
 80147ee:	d015      	beq.n	801481c <__b2d+0x98>
 80147f0:	409e      	lsls	r6, r3
 80147f2:	f1c3 0720 	rsb	r7, r3, #32
 80147f6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80147fa:	fa22 f107 	lsr.w	r1, r2, r7
 80147fe:	45c8      	cmp	r8, r9
 8014800:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8014804:	ea46 0501 	orr.w	r5, r6, r1
 8014808:	bf94      	ite	ls
 801480a:	2100      	movls	r1, #0
 801480c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8014810:	fa02 f003 	lsl.w	r0, r2, r3
 8014814:	40f9      	lsrs	r1, r7
 8014816:	ea40 0401 	orr.w	r4, r0, r1
 801481a:	e7db      	b.n	80147d4 <__b2d+0x50>
 801481c:	ea46 0501 	orr.w	r5, r6, r1
 8014820:	4614      	mov	r4, r2
 8014822:	e7d7      	b.n	80147d4 <__b2d+0x50>
 8014824:	3ff00000 	.word	0x3ff00000

08014828 <__d2b>:
 8014828:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801482c:	461c      	mov	r4, r3
 801482e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8014832:	2101      	movs	r1, #1
 8014834:	4690      	mov	r8, r2
 8014836:	f7ff fcb7 	bl	80141a8 <_Balloc>
 801483a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 801483e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8014842:	4607      	mov	r7, r0
 8014844:	bb34      	cbnz	r4, 8014894 <__d2b+0x6c>
 8014846:	9201      	str	r2, [sp, #4]
 8014848:	f1b8 0200 	subs.w	r2, r8, #0
 801484c:	d027      	beq.n	801489e <__d2b+0x76>
 801484e:	a802      	add	r0, sp, #8
 8014850:	f840 2d08 	str.w	r2, [r0, #-8]!
 8014854:	f7ff fd8b 	bl	801436e <__lo0bits>
 8014858:	9900      	ldr	r1, [sp, #0]
 801485a:	b1f0      	cbz	r0, 801489a <__d2b+0x72>
 801485c:	9a01      	ldr	r2, [sp, #4]
 801485e:	f1c0 0320 	rsb	r3, r0, #32
 8014862:	fa02 f303 	lsl.w	r3, r2, r3
 8014866:	430b      	orrs	r3, r1
 8014868:	40c2      	lsrs	r2, r0
 801486a:	617b      	str	r3, [r7, #20]
 801486c:	9201      	str	r2, [sp, #4]
 801486e:	9b01      	ldr	r3, [sp, #4]
 8014870:	2b00      	cmp	r3, #0
 8014872:	bf14      	ite	ne
 8014874:	2102      	movne	r1, #2
 8014876:	2101      	moveq	r1, #1
 8014878:	61bb      	str	r3, [r7, #24]
 801487a:	6139      	str	r1, [r7, #16]
 801487c:	b1c4      	cbz	r4, 80148b0 <__d2b+0x88>
 801487e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014882:	4404      	add	r4, r0
 8014884:	6034      	str	r4, [r6, #0]
 8014886:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801488a:	6028      	str	r0, [r5, #0]
 801488c:	4638      	mov	r0, r7
 801488e:	b002      	add	sp, #8
 8014890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014894:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014898:	e7d5      	b.n	8014846 <__d2b+0x1e>
 801489a:	6179      	str	r1, [r7, #20]
 801489c:	e7e7      	b.n	801486e <__d2b+0x46>
 801489e:	a801      	add	r0, sp, #4
 80148a0:	f7ff fd65 	bl	801436e <__lo0bits>
 80148a4:	2101      	movs	r1, #1
 80148a6:	9b01      	ldr	r3, [sp, #4]
 80148a8:	6139      	str	r1, [r7, #16]
 80148aa:	617b      	str	r3, [r7, #20]
 80148ac:	3020      	adds	r0, #32
 80148ae:	e7e5      	b.n	801487c <__d2b+0x54>
 80148b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80148b4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80148b8:	6030      	str	r0, [r6, #0]
 80148ba:	6918      	ldr	r0, [r3, #16]
 80148bc:	f7ff fd38 	bl	8014330 <__hi0bits>
 80148c0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80148c4:	e7e1      	b.n	801488a <__d2b+0x62>

080148c6 <__ratio>:
 80148c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ca:	4688      	mov	r8, r1
 80148cc:	4669      	mov	r1, sp
 80148ce:	4681      	mov	r9, r0
 80148d0:	f7ff ff58 	bl	8014784 <__b2d>
 80148d4:	468b      	mov	fp, r1
 80148d6:	4606      	mov	r6, r0
 80148d8:	460f      	mov	r7, r1
 80148da:	4640      	mov	r0, r8
 80148dc:	a901      	add	r1, sp, #4
 80148de:	f7ff ff51 	bl	8014784 <__b2d>
 80148e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80148e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80148ea:	460d      	mov	r5, r1
 80148ec:	eba3 0c02 	sub.w	ip, r3, r2
 80148f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80148f4:	1a9b      	subs	r3, r3, r2
 80148f6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	bfd5      	itete	le
 80148fe:	460a      	movle	r2, r1
 8014900:	463a      	movgt	r2, r7
 8014902:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014906:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801490a:	bfd8      	it	le
 801490c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8014910:	462b      	mov	r3, r5
 8014912:	4602      	mov	r2, r0
 8014914:	4659      	mov	r1, fp
 8014916:	4630      	mov	r0, r6
 8014918:	f7eb ff22 	bl	8000760 <__aeabi_ddiv>
 801491c:	b003      	add	sp, #12
 801491e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014922 <__copybits>:
 8014922:	3901      	subs	r1, #1
 8014924:	b510      	push	{r4, lr}
 8014926:	1149      	asrs	r1, r1, #5
 8014928:	6914      	ldr	r4, [r2, #16]
 801492a:	3101      	adds	r1, #1
 801492c:	f102 0314 	add.w	r3, r2, #20
 8014930:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014934:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014938:	42a3      	cmp	r3, r4
 801493a:	4602      	mov	r2, r0
 801493c:	d303      	bcc.n	8014946 <__copybits+0x24>
 801493e:	2300      	movs	r3, #0
 8014940:	428a      	cmp	r2, r1
 8014942:	d305      	bcc.n	8014950 <__copybits+0x2e>
 8014944:	bd10      	pop	{r4, pc}
 8014946:	f853 2b04 	ldr.w	r2, [r3], #4
 801494a:	f840 2b04 	str.w	r2, [r0], #4
 801494e:	e7f3      	b.n	8014938 <__copybits+0x16>
 8014950:	f842 3b04 	str.w	r3, [r2], #4
 8014954:	e7f4      	b.n	8014940 <__copybits+0x1e>

08014956 <__any_on>:
 8014956:	f100 0214 	add.w	r2, r0, #20
 801495a:	6900      	ldr	r0, [r0, #16]
 801495c:	114b      	asrs	r3, r1, #5
 801495e:	4298      	cmp	r0, r3
 8014960:	b510      	push	{r4, lr}
 8014962:	db11      	blt.n	8014988 <__any_on+0x32>
 8014964:	dd0a      	ble.n	801497c <__any_on+0x26>
 8014966:	f011 011f 	ands.w	r1, r1, #31
 801496a:	d007      	beq.n	801497c <__any_on+0x26>
 801496c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014970:	fa24 f001 	lsr.w	r0, r4, r1
 8014974:	fa00 f101 	lsl.w	r1, r0, r1
 8014978:	428c      	cmp	r4, r1
 801497a:	d10b      	bne.n	8014994 <__any_on+0x3e>
 801497c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014980:	4293      	cmp	r3, r2
 8014982:	d803      	bhi.n	801498c <__any_on+0x36>
 8014984:	2000      	movs	r0, #0
 8014986:	bd10      	pop	{r4, pc}
 8014988:	4603      	mov	r3, r0
 801498a:	e7f7      	b.n	801497c <__any_on+0x26>
 801498c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014990:	2900      	cmp	r1, #0
 8014992:	d0f5      	beq.n	8014980 <__any_on+0x2a>
 8014994:	2001      	movs	r0, #1
 8014996:	e7f6      	b.n	8014986 <__any_on+0x30>

08014998 <_calloc_r>:
 8014998:	b538      	push	{r3, r4, r5, lr}
 801499a:	fb02 f401 	mul.w	r4, r2, r1
 801499e:	4621      	mov	r1, r4
 80149a0:	f000 f854 	bl	8014a4c <_malloc_r>
 80149a4:	4605      	mov	r5, r0
 80149a6:	b118      	cbz	r0, 80149b0 <_calloc_r+0x18>
 80149a8:	4622      	mov	r2, r4
 80149aa:	2100      	movs	r1, #0
 80149ac:	f7fc fda1 	bl	80114f2 <memset>
 80149b0:	4628      	mov	r0, r5
 80149b2:	bd38      	pop	{r3, r4, r5, pc}

080149b4 <_free_r>:
 80149b4:	b538      	push	{r3, r4, r5, lr}
 80149b6:	4605      	mov	r5, r0
 80149b8:	2900      	cmp	r1, #0
 80149ba:	d043      	beq.n	8014a44 <_free_r+0x90>
 80149bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149c0:	1f0c      	subs	r4, r1, #4
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	bfb8      	it	lt
 80149c6:	18e4      	addlt	r4, r4, r3
 80149c8:	f000 fdb5 	bl	8015536 <__malloc_lock>
 80149cc:	4a1e      	ldr	r2, [pc, #120]	; (8014a48 <_free_r+0x94>)
 80149ce:	6813      	ldr	r3, [r2, #0]
 80149d0:	4610      	mov	r0, r2
 80149d2:	b933      	cbnz	r3, 80149e2 <_free_r+0x2e>
 80149d4:	6063      	str	r3, [r4, #4]
 80149d6:	6014      	str	r4, [r2, #0]
 80149d8:	4628      	mov	r0, r5
 80149da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149de:	f000 bdab 	b.w	8015538 <__malloc_unlock>
 80149e2:	42a3      	cmp	r3, r4
 80149e4:	d90b      	bls.n	80149fe <_free_r+0x4a>
 80149e6:	6821      	ldr	r1, [r4, #0]
 80149e8:	1862      	adds	r2, r4, r1
 80149ea:	4293      	cmp	r3, r2
 80149ec:	bf01      	itttt	eq
 80149ee:	681a      	ldreq	r2, [r3, #0]
 80149f0:	685b      	ldreq	r3, [r3, #4]
 80149f2:	1852      	addeq	r2, r2, r1
 80149f4:	6022      	streq	r2, [r4, #0]
 80149f6:	6063      	str	r3, [r4, #4]
 80149f8:	6004      	str	r4, [r0, #0]
 80149fa:	e7ed      	b.n	80149d8 <_free_r+0x24>
 80149fc:	4613      	mov	r3, r2
 80149fe:	685a      	ldr	r2, [r3, #4]
 8014a00:	b10a      	cbz	r2, 8014a06 <_free_r+0x52>
 8014a02:	42a2      	cmp	r2, r4
 8014a04:	d9fa      	bls.n	80149fc <_free_r+0x48>
 8014a06:	6819      	ldr	r1, [r3, #0]
 8014a08:	1858      	adds	r0, r3, r1
 8014a0a:	42a0      	cmp	r0, r4
 8014a0c:	d10b      	bne.n	8014a26 <_free_r+0x72>
 8014a0e:	6820      	ldr	r0, [r4, #0]
 8014a10:	4401      	add	r1, r0
 8014a12:	1858      	adds	r0, r3, r1
 8014a14:	4282      	cmp	r2, r0
 8014a16:	6019      	str	r1, [r3, #0]
 8014a18:	d1de      	bne.n	80149d8 <_free_r+0x24>
 8014a1a:	6810      	ldr	r0, [r2, #0]
 8014a1c:	6852      	ldr	r2, [r2, #4]
 8014a1e:	4401      	add	r1, r0
 8014a20:	6019      	str	r1, [r3, #0]
 8014a22:	605a      	str	r2, [r3, #4]
 8014a24:	e7d8      	b.n	80149d8 <_free_r+0x24>
 8014a26:	d902      	bls.n	8014a2e <_free_r+0x7a>
 8014a28:	230c      	movs	r3, #12
 8014a2a:	602b      	str	r3, [r5, #0]
 8014a2c:	e7d4      	b.n	80149d8 <_free_r+0x24>
 8014a2e:	6820      	ldr	r0, [r4, #0]
 8014a30:	1821      	adds	r1, r4, r0
 8014a32:	428a      	cmp	r2, r1
 8014a34:	bf01      	itttt	eq
 8014a36:	6811      	ldreq	r1, [r2, #0]
 8014a38:	6852      	ldreq	r2, [r2, #4]
 8014a3a:	1809      	addeq	r1, r1, r0
 8014a3c:	6021      	streq	r1, [r4, #0]
 8014a3e:	6062      	str	r2, [r4, #4]
 8014a40:	605c      	str	r4, [r3, #4]
 8014a42:	e7c9      	b.n	80149d8 <_free_r+0x24>
 8014a44:	bd38      	pop	{r3, r4, r5, pc}
 8014a46:	bf00      	nop
 8014a48:	200009a8 	.word	0x200009a8

08014a4c <_malloc_r>:
 8014a4c:	b570      	push	{r4, r5, r6, lr}
 8014a4e:	1ccd      	adds	r5, r1, #3
 8014a50:	f025 0503 	bic.w	r5, r5, #3
 8014a54:	3508      	adds	r5, #8
 8014a56:	2d0c      	cmp	r5, #12
 8014a58:	bf38      	it	cc
 8014a5a:	250c      	movcc	r5, #12
 8014a5c:	2d00      	cmp	r5, #0
 8014a5e:	4606      	mov	r6, r0
 8014a60:	db01      	blt.n	8014a66 <_malloc_r+0x1a>
 8014a62:	42a9      	cmp	r1, r5
 8014a64:	d903      	bls.n	8014a6e <_malloc_r+0x22>
 8014a66:	230c      	movs	r3, #12
 8014a68:	6033      	str	r3, [r6, #0]
 8014a6a:	2000      	movs	r0, #0
 8014a6c:	bd70      	pop	{r4, r5, r6, pc}
 8014a6e:	f000 fd62 	bl	8015536 <__malloc_lock>
 8014a72:	4a21      	ldr	r2, [pc, #132]	; (8014af8 <_malloc_r+0xac>)
 8014a74:	6814      	ldr	r4, [r2, #0]
 8014a76:	4621      	mov	r1, r4
 8014a78:	b991      	cbnz	r1, 8014aa0 <_malloc_r+0x54>
 8014a7a:	4c20      	ldr	r4, [pc, #128]	; (8014afc <_malloc_r+0xb0>)
 8014a7c:	6823      	ldr	r3, [r4, #0]
 8014a7e:	b91b      	cbnz	r3, 8014a88 <_malloc_r+0x3c>
 8014a80:	4630      	mov	r0, r6
 8014a82:	f000 facd 	bl	8015020 <_sbrk_r>
 8014a86:	6020      	str	r0, [r4, #0]
 8014a88:	4629      	mov	r1, r5
 8014a8a:	4630      	mov	r0, r6
 8014a8c:	f000 fac8 	bl	8015020 <_sbrk_r>
 8014a90:	1c43      	adds	r3, r0, #1
 8014a92:	d124      	bne.n	8014ade <_malloc_r+0x92>
 8014a94:	230c      	movs	r3, #12
 8014a96:	4630      	mov	r0, r6
 8014a98:	6033      	str	r3, [r6, #0]
 8014a9a:	f000 fd4d 	bl	8015538 <__malloc_unlock>
 8014a9e:	e7e4      	b.n	8014a6a <_malloc_r+0x1e>
 8014aa0:	680b      	ldr	r3, [r1, #0]
 8014aa2:	1b5b      	subs	r3, r3, r5
 8014aa4:	d418      	bmi.n	8014ad8 <_malloc_r+0x8c>
 8014aa6:	2b0b      	cmp	r3, #11
 8014aa8:	d90f      	bls.n	8014aca <_malloc_r+0x7e>
 8014aaa:	600b      	str	r3, [r1, #0]
 8014aac:	18cc      	adds	r4, r1, r3
 8014aae:	50cd      	str	r5, [r1, r3]
 8014ab0:	4630      	mov	r0, r6
 8014ab2:	f000 fd41 	bl	8015538 <__malloc_unlock>
 8014ab6:	f104 000b 	add.w	r0, r4, #11
 8014aba:	1d23      	adds	r3, r4, #4
 8014abc:	f020 0007 	bic.w	r0, r0, #7
 8014ac0:	1ac3      	subs	r3, r0, r3
 8014ac2:	d0d3      	beq.n	8014a6c <_malloc_r+0x20>
 8014ac4:	425a      	negs	r2, r3
 8014ac6:	50e2      	str	r2, [r4, r3]
 8014ac8:	e7d0      	b.n	8014a6c <_malloc_r+0x20>
 8014aca:	684b      	ldr	r3, [r1, #4]
 8014acc:	428c      	cmp	r4, r1
 8014ace:	bf16      	itet	ne
 8014ad0:	6063      	strne	r3, [r4, #4]
 8014ad2:	6013      	streq	r3, [r2, #0]
 8014ad4:	460c      	movne	r4, r1
 8014ad6:	e7eb      	b.n	8014ab0 <_malloc_r+0x64>
 8014ad8:	460c      	mov	r4, r1
 8014ada:	6849      	ldr	r1, [r1, #4]
 8014adc:	e7cc      	b.n	8014a78 <_malloc_r+0x2c>
 8014ade:	1cc4      	adds	r4, r0, #3
 8014ae0:	f024 0403 	bic.w	r4, r4, #3
 8014ae4:	42a0      	cmp	r0, r4
 8014ae6:	d005      	beq.n	8014af4 <_malloc_r+0xa8>
 8014ae8:	1a21      	subs	r1, r4, r0
 8014aea:	4630      	mov	r0, r6
 8014aec:	f000 fa98 	bl	8015020 <_sbrk_r>
 8014af0:	3001      	adds	r0, #1
 8014af2:	d0cf      	beq.n	8014a94 <_malloc_r+0x48>
 8014af4:	6025      	str	r5, [r4, #0]
 8014af6:	e7db      	b.n	8014ab0 <_malloc_r+0x64>
 8014af8:	200009a8 	.word	0x200009a8
 8014afc:	200009ac 	.word	0x200009ac

08014b00 <__ssputs_r>:
 8014b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b04:	688e      	ldr	r6, [r1, #8]
 8014b06:	4682      	mov	sl, r0
 8014b08:	429e      	cmp	r6, r3
 8014b0a:	460c      	mov	r4, r1
 8014b0c:	4690      	mov	r8, r2
 8014b0e:	4699      	mov	r9, r3
 8014b10:	d837      	bhi.n	8014b82 <__ssputs_r+0x82>
 8014b12:	898a      	ldrh	r2, [r1, #12]
 8014b14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014b18:	d031      	beq.n	8014b7e <__ssputs_r+0x7e>
 8014b1a:	2302      	movs	r3, #2
 8014b1c:	6825      	ldr	r5, [r4, #0]
 8014b1e:	6909      	ldr	r1, [r1, #16]
 8014b20:	1a6f      	subs	r7, r5, r1
 8014b22:	6965      	ldr	r5, [r4, #20]
 8014b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b28:	fb95 f5f3 	sdiv	r5, r5, r3
 8014b2c:	f109 0301 	add.w	r3, r9, #1
 8014b30:	443b      	add	r3, r7
 8014b32:	429d      	cmp	r5, r3
 8014b34:	bf38      	it	cc
 8014b36:	461d      	movcc	r5, r3
 8014b38:	0553      	lsls	r3, r2, #21
 8014b3a:	d530      	bpl.n	8014b9e <__ssputs_r+0x9e>
 8014b3c:	4629      	mov	r1, r5
 8014b3e:	f7ff ff85 	bl	8014a4c <_malloc_r>
 8014b42:	4606      	mov	r6, r0
 8014b44:	b950      	cbnz	r0, 8014b5c <__ssputs_r+0x5c>
 8014b46:	230c      	movs	r3, #12
 8014b48:	f04f 30ff 	mov.w	r0, #4294967295
 8014b4c:	f8ca 3000 	str.w	r3, [sl]
 8014b50:	89a3      	ldrh	r3, [r4, #12]
 8014b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b56:	81a3      	strh	r3, [r4, #12]
 8014b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b5c:	463a      	mov	r2, r7
 8014b5e:	6921      	ldr	r1, [r4, #16]
 8014b60:	f7fc fcbc 	bl	80114dc <memcpy>
 8014b64:	89a3      	ldrh	r3, [r4, #12]
 8014b66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b6e:	81a3      	strh	r3, [r4, #12]
 8014b70:	6126      	str	r6, [r4, #16]
 8014b72:	443e      	add	r6, r7
 8014b74:	6026      	str	r6, [r4, #0]
 8014b76:	464e      	mov	r6, r9
 8014b78:	6165      	str	r5, [r4, #20]
 8014b7a:	1bed      	subs	r5, r5, r7
 8014b7c:	60a5      	str	r5, [r4, #8]
 8014b7e:	454e      	cmp	r6, r9
 8014b80:	d900      	bls.n	8014b84 <__ssputs_r+0x84>
 8014b82:	464e      	mov	r6, r9
 8014b84:	4632      	mov	r2, r6
 8014b86:	4641      	mov	r1, r8
 8014b88:	6820      	ldr	r0, [r4, #0]
 8014b8a:	f000 fcbb 	bl	8015504 <memmove>
 8014b8e:	68a3      	ldr	r3, [r4, #8]
 8014b90:	2000      	movs	r0, #0
 8014b92:	1b9b      	subs	r3, r3, r6
 8014b94:	60a3      	str	r3, [r4, #8]
 8014b96:	6823      	ldr	r3, [r4, #0]
 8014b98:	441e      	add	r6, r3
 8014b9a:	6026      	str	r6, [r4, #0]
 8014b9c:	e7dc      	b.n	8014b58 <__ssputs_r+0x58>
 8014b9e:	462a      	mov	r2, r5
 8014ba0:	f000 fccb 	bl	801553a <_realloc_r>
 8014ba4:	4606      	mov	r6, r0
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	d1e2      	bne.n	8014b70 <__ssputs_r+0x70>
 8014baa:	6921      	ldr	r1, [r4, #16]
 8014bac:	4650      	mov	r0, sl
 8014bae:	f7ff ff01 	bl	80149b4 <_free_r>
 8014bb2:	e7c8      	b.n	8014b46 <__ssputs_r+0x46>

08014bb4 <_svfiprintf_r>:
 8014bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb8:	461d      	mov	r5, r3
 8014bba:	898b      	ldrh	r3, [r1, #12]
 8014bbc:	b09d      	sub	sp, #116	; 0x74
 8014bbe:	061f      	lsls	r7, r3, #24
 8014bc0:	4680      	mov	r8, r0
 8014bc2:	460c      	mov	r4, r1
 8014bc4:	4616      	mov	r6, r2
 8014bc6:	d50f      	bpl.n	8014be8 <_svfiprintf_r+0x34>
 8014bc8:	690b      	ldr	r3, [r1, #16]
 8014bca:	b96b      	cbnz	r3, 8014be8 <_svfiprintf_r+0x34>
 8014bcc:	2140      	movs	r1, #64	; 0x40
 8014bce:	f7ff ff3d 	bl	8014a4c <_malloc_r>
 8014bd2:	6020      	str	r0, [r4, #0]
 8014bd4:	6120      	str	r0, [r4, #16]
 8014bd6:	b928      	cbnz	r0, 8014be4 <_svfiprintf_r+0x30>
 8014bd8:	230c      	movs	r3, #12
 8014bda:	f8c8 3000 	str.w	r3, [r8]
 8014bde:	f04f 30ff 	mov.w	r0, #4294967295
 8014be2:	e0c8      	b.n	8014d76 <_svfiprintf_r+0x1c2>
 8014be4:	2340      	movs	r3, #64	; 0x40
 8014be6:	6163      	str	r3, [r4, #20]
 8014be8:	2300      	movs	r3, #0
 8014bea:	9309      	str	r3, [sp, #36]	; 0x24
 8014bec:	2320      	movs	r3, #32
 8014bee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014bf2:	2330      	movs	r3, #48	; 0x30
 8014bf4:	f04f 0b01 	mov.w	fp, #1
 8014bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014bfc:	9503      	str	r5, [sp, #12]
 8014bfe:	4637      	mov	r7, r6
 8014c00:	463d      	mov	r5, r7
 8014c02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014c06:	b10b      	cbz	r3, 8014c0c <_svfiprintf_r+0x58>
 8014c08:	2b25      	cmp	r3, #37	; 0x25
 8014c0a:	d13e      	bne.n	8014c8a <_svfiprintf_r+0xd6>
 8014c0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8014c10:	d00b      	beq.n	8014c2a <_svfiprintf_r+0x76>
 8014c12:	4653      	mov	r3, sl
 8014c14:	4632      	mov	r2, r6
 8014c16:	4621      	mov	r1, r4
 8014c18:	4640      	mov	r0, r8
 8014c1a:	f7ff ff71 	bl	8014b00 <__ssputs_r>
 8014c1e:	3001      	adds	r0, #1
 8014c20:	f000 80a4 	beq.w	8014d6c <_svfiprintf_r+0x1b8>
 8014c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c26:	4453      	add	r3, sl
 8014c28:	9309      	str	r3, [sp, #36]	; 0x24
 8014c2a:	783b      	ldrb	r3, [r7, #0]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	f000 809d 	beq.w	8014d6c <_svfiprintf_r+0x1b8>
 8014c32:	2300      	movs	r3, #0
 8014c34:	f04f 32ff 	mov.w	r2, #4294967295
 8014c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c3c:	9304      	str	r3, [sp, #16]
 8014c3e:	9307      	str	r3, [sp, #28]
 8014c40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c44:	931a      	str	r3, [sp, #104]	; 0x68
 8014c46:	462f      	mov	r7, r5
 8014c48:	2205      	movs	r2, #5
 8014c4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014c4e:	4850      	ldr	r0, [pc, #320]	; (8014d90 <_svfiprintf_r+0x1dc>)
 8014c50:	f7ff fa9c 	bl	801418c <memchr>
 8014c54:	9b04      	ldr	r3, [sp, #16]
 8014c56:	b9d0      	cbnz	r0, 8014c8e <_svfiprintf_r+0xda>
 8014c58:	06d9      	lsls	r1, r3, #27
 8014c5a:	bf44      	itt	mi
 8014c5c:	2220      	movmi	r2, #32
 8014c5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014c62:	071a      	lsls	r2, r3, #28
 8014c64:	bf44      	itt	mi
 8014c66:	222b      	movmi	r2, #43	; 0x2b
 8014c68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014c6c:	782a      	ldrb	r2, [r5, #0]
 8014c6e:	2a2a      	cmp	r2, #42	; 0x2a
 8014c70:	d015      	beq.n	8014c9e <_svfiprintf_r+0xea>
 8014c72:	462f      	mov	r7, r5
 8014c74:	2000      	movs	r0, #0
 8014c76:	250a      	movs	r5, #10
 8014c78:	9a07      	ldr	r2, [sp, #28]
 8014c7a:	4639      	mov	r1, r7
 8014c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c80:	3b30      	subs	r3, #48	; 0x30
 8014c82:	2b09      	cmp	r3, #9
 8014c84:	d94d      	bls.n	8014d22 <_svfiprintf_r+0x16e>
 8014c86:	b1b8      	cbz	r0, 8014cb8 <_svfiprintf_r+0x104>
 8014c88:	e00f      	b.n	8014caa <_svfiprintf_r+0xf6>
 8014c8a:	462f      	mov	r7, r5
 8014c8c:	e7b8      	b.n	8014c00 <_svfiprintf_r+0x4c>
 8014c8e:	4a40      	ldr	r2, [pc, #256]	; (8014d90 <_svfiprintf_r+0x1dc>)
 8014c90:	463d      	mov	r5, r7
 8014c92:	1a80      	subs	r0, r0, r2
 8014c94:	fa0b f000 	lsl.w	r0, fp, r0
 8014c98:	4318      	orrs	r0, r3
 8014c9a:	9004      	str	r0, [sp, #16]
 8014c9c:	e7d3      	b.n	8014c46 <_svfiprintf_r+0x92>
 8014c9e:	9a03      	ldr	r2, [sp, #12]
 8014ca0:	1d11      	adds	r1, r2, #4
 8014ca2:	6812      	ldr	r2, [r2, #0]
 8014ca4:	9103      	str	r1, [sp, #12]
 8014ca6:	2a00      	cmp	r2, #0
 8014ca8:	db01      	blt.n	8014cae <_svfiprintf_r+0xfa>
 8014caa:	9207      	str	r2, [sp, #28]
 8014cac:	e004      	b.n	8014cb8 <_svfiprintf_r+0x104>
 8014cae:	4252      	negs	r2, r2
 8014cb0:	f043 0302 	orr.w	r3, r3, #2
 8014cb4:	9207      	str	r2, [sp, #28]
 8014cb6:	9304      	str	r3, [sp, #16]
 8014cb8:	783b      	ldrb	r3, [r7, #0]
 8014cba:	2b2e      	cmp	r3, #46	; 0x2e
 8014cbc:	d10c      	bne.n	8014cd8 <_svfiprintf_r+0x124>
 8014cbe:	787b      	ldrb	r3, [r7, #1]
 8014cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8014cc2:	d133      	bne.n	8014d2c <_svfiprintf_r+0x178>
 8014cc4:	9b03      	ldr	r3, [sp, #12]
 8014cc6:	3702      	adds	r7, #2
 8014cc8:	1d1a      	adds	r2, r3, #4
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	9203      	str	r2, [sp, #12]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	bfb8      	it	lt
 8014cd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8014cd6:	9305      	str	r3, [sp, #20]
 8014cd8:	4d2e      	ldr	r5, [pc, #184]	; (8014d94 <_svfiprintf_r+0x1e0>)
 8014cda:	2203      	movs	r2, #3
 8014cdc:	7839      	ldrb	r1, [r7, #0]
 8014cde:	4628      	mov	r0, r5
 8014ce0:	f7ff fa54 	bl	801418c <memchr>
 8014ce4:	b138      	cbz	r0, 8014cf6 <_svfiprintf_r+0x142>
 8014ce6:	2340      	movs	r3, #64	; 0x40
 8014ce8:	1b40      	subs	r0, r0, r5
 8014cea:	fa03 f000 	lsl.w	r0, r3, r0
 8014cee:	9b04      	ldr	r3, [sp, #16]
 8014cf0:	3701      	adds	r7, #1
 8014cf2:	4303      	orrs	r3, r0
 8014cf4:	9304      	str	r3, [sp, #16]
 8014cf6:	7839      	ldrb	r1, [r7, #0]
 8014cf8:	2206      	movs	r2, #6
 8014cfa:	4827      	ldr	r0, [pc, #156]	; (8014d98 <_svfiprintf_r+0x1e4>)
 8014cfc:	1c7e      	adds	r6, r7, #1
 8014cfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d02:	f7ff fa43 	bl	801418c <memchr>
 8014d06:	2800      	cmp	r0, #0
 8014d08:	d038      	beq.n	8014d7c <_svfiprintf_r+0x1c8>
 8014d0a:	4b24      	ldr	r3, [pc, #144]	; (8014d9c <_svfiprintf_r+0x1e8>)
 8014d0c:	bb13      	cbnz	r3, 8014d54 <_svfiprintf_r+0x1a0>
 8014d0e:	9b03      	ldr	r3, [sp, #12]
 8014d10:	3307      	adds	r3, #7
 8014d12:	f023 0307 	bic.w	r3, r3, #7
 8014d16:	3308      	adds	r3, #8
 8014d18:	9303      	str	r3, [sp, #12]
 8014d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d1c:	444b      	add	r3, r9
 8014d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8014d20:	e76d      	b.n	8014bfe <_svfiprintf_r+0x4a>
 8014d22:	fb05 3202 	mla	r2, r5, r2, r3
 8014d26:	2001      	movs	r0, #1
 8014d28:	460f      	mov	r7, r1
 8014d2a:	e7a6      	b.n	8014c7a <_svfiprintf_r+0xc6>
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	250a      	movs	r5, #10
 8014d30:	4619      	mov	r1, r3
 8014d32:	3701      	adds	r7, #1
 8014d34:	9305      	str	r3, [sp, #20]
 8014d36:	4638      	mov	r0, r7
 8014d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d3c:	3a30      	subs	r2, #48	; 0x30
 8014d3e:	2a09      	cmp	r2, #9
 8014d40:	d903      	bls.n	8014d4a <_svfiprintf_r+0x196>
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d0c8      	beq.n	8014cd8 <_svfiprintf_r+0x124>
 8014d46:	9105      	str	r1, [sp, #20]
 8014d48:	e7c6      	b.n	8014cd8 <_svfiprintf_r+0x124>
 8014d4a:	fb05 2101 	mla	r1, r5, r1, r2
 8014d4e:	2301      	movs	r3, #1
 8014d50:	4607      	mov	r7, r0
 8014d52:	e7f0      	b.n	8014d36 <_svfiprintf_r+0x182>
 8014d54:	ab03      	add	r3, sp, #12
 8014d56:	9300      	str	r3, [sp, #0]
 8014d58:	4622      	mov	r2, r4
 8014d5a:	4b11      	ldr	r3, [pc, #68]	; (8014da0 <_svfiprintf_r+0x1ec>)
 8014d5c:	a904      	add	r1, sp, #16
 8014d5e:	4640      	mov	r0, r8
 8014d60:	f7fc fc60 	bl	8011624 <_printf_float>
 8014d64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014d68:	4681      	mov	r9, r0
 8014d6a:	d1d6      	bne.n	8014d1a <_svfiprintf_r+0x166>
 8014d6c:	89a3      	ldrh	r3, [r4, #12]
 8014d6e:	065b      	lsls	r3, r3, #25
 8014d70:	f53f af35 	bmi.w	8014bde <_svfiprintf_r+0x2a>
 8014d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d76:	b01d      	add	sp, #116	; 0x74
 8014d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d7c:	ab03      	add	r3, sp, #12
 8014d7e:	9300      	str	r3, [sp, #0]
 8014d80:	4622      	mov	r2, r4
 8014d82:	4b07      	ldr	r3, [pc, #28]	; (8014da0 <_svfiprintf_r+0x1ec>)
 8014d84:	a904      	add	r1, sp, #16
 8014d86:	4640      	mov	r0, r8
 8014d88:	f7fc fef8 	bl	8011b7c <_printf_i>
 8014d8c:	e7ea      	b.n	8014d64 <_svfiprintf_r+0x1b0>
 8014d8e:	bf00      	nop
 8014d90:	0801a2f4 	.word	0x0801a2f4
 8014d94:	0801a2fa 	.word	0x0801a2fa
 8014d98:	0801a2fe 	.word	0x0801a2fe
 8014d9c:	08011625 	.word	0x08011625
 8014da0:	08014b01 	.word	0x08014b01

08014da4 <__sfputc_r>:
 8014da4:	6893      	ldr	r3, [r2, #8]
 8014da6:	b410      	push	{r4}
 8014da8:	3b01      	subs	r3, #1
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	6093      	str	r3, [r2, #8]
 8014dae:	da07      	bge.n	8014dc0 <__sfputc_r+0x1c>
 8014db0:	6994      	ldr	r4, [r2, #24]
 8014db2:	42a3      	cmp	r3, r4
 8014db4:	db01      	blt.n	8014dba <__sfputc_r+0x16>
 8014db6:	290a      	cmp	r1, #10
 8014db8:	d102      	bne.n	8014dc0 <__sfputc_r+0x1c>
 8014dba:	bc10      	pop	{r4}
 8014dbc:	f000 b99a 	b.w	80150f4 <__swbuf_r>
 8014dc0:	6813      	ldr	r3, [r2, #0]
 8014dc2:	1c58      	adds	r0, r3, #1
 8014dc4:	6010      	str	r0, [r2, #0]
 8014dc6:	7019      	strb	r1, [r3, #0]
 8014dc8:	4608      	mov	r0, r1
 8014dca:	bc10      	pop	{r4}
 8014dcc:	4770      	bx	lr

08014dce <__sfputs_r>:
 8014dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dd0:	4606      	mov	r6, r0
 8014dd2:	460f      	mov	r7, r1
 8014dd4:	4614      	mov	r4, r2
 8014dd6:	18d5      	adds	r5, r2, r3
 8014dd8:	42ac      	cmp	r4, r5
 8014dda:	d101      	bne.n	8014de0 <__sfputs_r+0x12>
 8014ddc:	2000      	movs	r0, #0
 8014dde:	e007      	b.n	8014df0 <__sfputs_r+0x22>
 8014de0:	463a      	mov	r2, r7
 8014de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014de6:	4630      	mov	r0, r6
 8014de8:	f7ff ffdc 	bl	8014da4 <__sfputc_r>
 8014dec:	1c43      	adds	r3, r0, #1
 8014dee:	d1f3      	bne.n	8014dd8 <__sfputs_r+0xa>
 8014df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014df4 <_vfiprintf_r>:
 8014df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df8:	460c      	mov	r4, r1
 8014dfa:	b09d      	sub	sp, #116	; 0x74
 8014dfc:	4617      	mov	r7, r2
 8014dfe:	461d      	mov	r5, r3
 8014e00:	4606      	mov	r6, r0
 8014e02:	b118      	cbz	r0, 8014e0c <_vfiprintf_r+0x18>
 8014e04:	6983      	ldr	r3, [r0, #24]
 8014e06:	b90b      	cbnz	r3, 8014e0c <_vfiprintf_r+0x18>
 8014e08:	f7fe fdf6 	bl	80139f8 <__sinit>
 8014e0c:	4b7c      	ldr	r3, [pc, #496]	; (8015000 <_vfiprintf_r+0x20c>)
 8014e0e:	429c      	cmp	r4, r3
 8014e10:	d158      	bne.n	8014ec4 <_vfiprintf_r+0xd0>
 8014e12:	6874      	ldr	r4, [r6, #4]
 8014e14:	89a3      	ldrh	r3, [r4, #12]
 8014e16:	0718      	lsls	r0, r3, #28
 8014e18:	d55e      	bpl.n	8014ed8 <_vfiprintf_r+0xe4>
 8014e1a:	6923      	ldr	r3, [r4, #16]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d05b      	beq.n	8014ed8 <_vfiprintf_r+0xe4>
 8014e20:	2300      	movs	r3, #0
 8014e22:	9309      	str	r3, [sp, #36]	; 0x24
 8014e24:	2320      	movs	r3, #32
 8014e26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e2a:	2330      	movs	r3, #48	; 0x30
 8014e2c:	f04f 0b01 	mov.w	fp, #1
 8014e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e34:	9503      	str	r5, [sp, #12]
 8014e36:	46b8      	mov	r8, r7
 8014e38:	4645      	mov	r5, r8
 8014e3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014e3e:	b10b      	cbz	r3, 8014e44 <_vfiprintf_r+0x50>
 8014e40:	2b25      	cmp	r3, #37	; 0x25
 8014e42:	d154      	bne.n	8014eee <_vfiprintf_r+0xfa>
 8014e44:	ebb8 0a07 	subs.w	sl, r8, r7
 8014e48:	d00b      	beq.n	8014e62 <_vfiprintf_r+0x6e>
 8014e4a:	4653      	mov	r3, sl
 8014e4c:	463a      	mov	r2, r7
 8014e4e:	4621      	mov	r1, r4
 8014e50:	4630      	mov	r0, r6
 8014e52:	f7ff ffbc 	bl	8014dce <__sfputs_r>
 8014e56:	3001      	adds	r0, #1
 8014e58:	f000 80c2 	beq.w	8014fe0 <_vfiprintf_r+0x1ec>
 8014e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e5e:	4453      	add	r3, sl
 8014e60:	9309      	str	r3, [sp, #36]	; 0x24
 8014e62:	f898 3000 	ldrb.w	r3, [r8]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	f000 80ba 	beq.w	8014fe0 <_vfiprintf_r+0x1ec>
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8014e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e76:	9304      	str	r3, [sp, #16]
 8014e78:	9307      	str	r3, [sp, #28]
 8014e7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e7e:	931a      	str	r3, [sp, #104]	; 0x68
 8014e80:	46a8      	mov	r8, r5
 8014e82:	2205      	movs	r2, #5
 8014e84:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014e88:	485e      	ldr	r0, [pc, #376]	; (8015004 <_vfiprintf_r+0x210>)
 8014e8a:	f7ff f97f 	bl	801418c <memchr>
 8014e8e:	9b04      	ldr	r3, [sp, #16]
 8014e90:	bb78      	cbnz	r0, 8014ef2 <_vfiprintf_r+0xfe>
 8014e92:	06d9      	lsls	r1, r3, #27
 8014e94:	bf44      	itt	mi
 8014e96:	2220      	movmi	r2, #32
 8014e98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014e9c:	071a      	lsls	r2, r3, #28
 8014e9e:	bf44      	itt	mi
 8014ea0:	222b      	movmi	r2, #43	; 0x2b
 8014ea2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014ea6:	782a      	ldrb	r2, [r5, #0]
 8014ea8:	2a2a      	cmp	r2, #42	; 0x2a
 8014eaa:	d02a      	beq.n	8014f02 <_vfiprintf_r+0x10e>
 8014eac:	46a8      	mov	r8, r5
 8014eae:	2000      	movs	r0, #0
 8014eb0:	250a      	movs	r5, #10
 8014eb2:	9a07      	ldr	r2, [sp, #28]
 8014eb4:	4641      	mov	r1, r8
 8014eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014eba:	3b30      	subs	r3, #48	; 0x30
 8014ebc:	2b09      	cmp	r3, #9
 8014ebe:	d969      	bls.n	8014f94 <_vfiprintf_r+0x1a0>
 8014ec0:	b360      	cbz	r0, 8014f1c <_vfiprintf_r+0x128>
 8014ec2:	e024      	b.n	8014f0e <_vfiprintf_r+0x11a>
 8014ec4:	4b50      	ldr	r3, [pc, #320]	; (8015008 <_vfiprintf_r+0x214>)
 8014ec6:	429c      	cmp	r4, r3
 8014ec8:	d101      	bne.n	8014ece <_vfiprintf_r+0xda>
 8014eca:	68b4      	ldr	r4, [r6, #8]
 8014ecc:	e7a2      	b.n	8014e14 <_vfiprintf_r+0x20>
 8014ece:	4b4f      	ldr	r3, [pc, #316]	; (801500c <_vfiprintf_r+0x218>)
 8014ed0:	429c      	cmp	r4, r3
 8014ed2:	bf08      	it	eq
 8014ed4:	68f4      	ldreq	r4, [r6, #12]
 8014ed6:	e79d      	b.n	8014e14 <_vfiprintf_r+0x20>
 8014ed8:	4621      	mov	r1, r4
 8014eda:	4630      	mov	r0, r6
 8014edc:	f000 f96e 	bl	80151bc <__swsetup_r>
 8014ee0:	2800      	cmp	r0, #0
 8014ee2:	d09d      	beq.n	8014e20 <_vfiprintf_r+0x2c>
 8014ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ee8:	b01d      	add	sp, #116	; 0x74
 8014eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eee:	46a8      	mov	r8, r5
 8014ef0:	e7a2      	b.n	8014e38 <_vfiprintf_r+0x44>
 8014ef2:	4a44      	ldr	r2, [pc, #272]	; (8015004 <_vfiprintf_r+0x210>)
 8014ef4:	4645      	mov	r5, r8
 8014ef6:	1a80      	subs	r0, r0, r2
 8014ef8:	fa0b f000 	lsl.w	r0, fp, r0
 8014efc:	4318      	orrs	r0, r3
 8014efe:	9004      	str	r0, [sp, #16]
 8014f00:	e7be      	b.n	8014e80 <_vfiprintf_r+0x8c>
 8014f02:	9a03      	ldr	r2, [sp, #12]
 8014f04:	1d11      	adds	r1, r2, #4
 8014f06:	6812      	ldr	r2, [r2, #0]
 8014f08:	9103      	str	r1, [sp, #12]
 8014f0a:	2a00      	cmp	r2, #0
 8014f0c:	db01      	blt.n	8014f12 <_vfiprintf_r+0x11e>
 8014f0e:	9207      	str	r2, [sp, #28]
 8014f10:	e004      	b.n	8014f1c <_vfiprintf_r+0x128>
 8014f12:	4252      	negs	r2, r2
 8014f14:	f043 0302 	orr.w	r3, r3, #2
 8014f18:	9207      	str	r2, [sp, #28]
 8014f1a:	9304      	str	r3, [sp, #16]
 8014f1c:	f898 3000 	ldrb.w	r3, [r8]
 8014f20:	2b2e      	cmp	r3, #46	; 0x2e
 8014f22:	d10e      	bne.n	8014f42 <_vfiprintf_r+0x14e>
 8014f24:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014f28:	2b2a      	cmp	r3, #42	; 0x2a
 8014f2a:	d138      	bne.n	8014f9e <_vfiprintf_r+0x1aa>
 8014f2c:	9b03      	ldr	r3, [sp, #12]
 8014f2e:	f108 0802 	add.w	r8, r8, #2
 8014f32:	1d1a      	adds	r2, r3, #4
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	9203      	str	r2, [sp, #12]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	bfb8      	it	lt
 8014f3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f40:	9305      	str	r3, [sp, #20]
 8014f42:	4d33      	ldr	r5, [pc, #204]	; (8015010 <_vfiprintf_r+0x21c>)
 8014f44:	2203      	movs	r2, #3
 8014f46:	f898 1000 	ldrb.w	r1, [r8]
 8014f4a:	4628      	mov	r0, r5
 8014f4c:	f7ff f91e 	bl	801418c <memchr>
 8014f50:	b140      	cbz	r0, 8014f64 <_vfiprintf_r+0x170>
 8014f52:	2340      	movs	r3, #64	; 0x40
 8014f54:	1b40      	subs	r0, r0, r5
 8014f56:	fa03 f000 	lsl.w	r0, r3, r0
 8014f5a:	9b04      	ldr	r3, [sp, #16]
 8014f5c:	f108 0801 	add.w	r8, r8, #1
 8014f60:	4303      	orrs	r3, r0
 8014f62:	9304      	str	r3, [sp, #16]
 8014f64:	f898 1000 	ldrb.w	r1, [r8]
 8014f68:	2206      	movs	r2, #6
 8014f6a:	482a      	ldr	r0, [pc, #168]	; (8015014 <_vfiprintf_r+0x220>)
 8014f6c:	f108 0701 	add.w	r7, r8, #1
 8014f70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f74:	f7ff f90a 	bl	801418c <memchr>
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	d037      	beq.n	8014fec <_vfiprintf_r+0x1f8>
 8014f7c:	4b26      	ldr	r3, [pc, #152]	; (8015018 <_vfiprintf_r+0x224>)
 8014f7e:	bb1b      	cbnz	r3, 8014fc8 <_vfiprintf_r+0x1d4>
 8014f80:	9b03      	ldr	r3, [sp, #12]
 8014f82:	3307      	adds	r3, #7
 8014f84:	f023 0307 	bic.w	r3, r3, #7
 8014f88:	3308      	adds	r3, #8
 8014f8a:	9303      	str	r3, [sp, #12]
 8014f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f8e:	444b      	add	r3, r9
 8014f90:	9309      	str	r3, [sp, #36]	; 0x24
 8014f92:	e750      	b.n	8014e36 <_vfiprintf_r+0x42>
 8014f94:	fb05 3202 	mla	r2, r5, r2, r3
 8014f98:	2001      	movs	r0, #1
 8014f9a:	4688      	mov	r8, r1
 8014f9c:	e78a      	b.n	8014eb4 <_vfiprintf_r+0xc0>
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	250a      	movs	r5, #10
 8014fa2:	4619      	mov	r1, r3
 8014fa4:	f108 0801 	add.w	r8, r8, #1
 8014fa8:	9305      	str	r3, [sp, #20]
 8014faa:	4640      	mov	r0, r8
 8014fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fb0:	3a30      	subs	r2, #48	; 0x30
 8014fb2:	2a09      	cmp	r2, #9
 8014fb4:	d903      	bls.n	8014fbe <_vfiprintf_r+0x1ca>
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d0c3      	beq.n	8014f42 <_vfiprintf_r+0x14e>
 8014fba:	9105      	str	r1, [sp, #20]
 8014fbc:	e7c1      	b.n	8014f42 <_vfiprintf_r+0x14e>
 8014fbe:	fb05 2101 	mla	r1, r5, r1, r2
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	4680      	mov	r8, r0
 8014fc6:	e7f0      	b.n	8014faa <_vfiprintf_r+0x1b6>
 8014fc8:	ab03      	add	r3, sp, #12
 8014fca:	9300      	str	r3, [sp, #0]
 8014fcc:	4622      	mov	r2, r4
 8014fce:	4b13      	ldr	r3, [pc, #76]	; (801501c <_vfiprintf_r+0x228>)
 8014fd0:	a904      	add	r1, sp, #16
 8014fd2:	4630      	mov	r0, r6
 8014fd4:	f7fc fb26 	bl	8011624 <_printf_float>
 8014fd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014fdc:	4681      	mov	r9, r0
 8014fde:	d1d5      	bne.n	8014f8c <_vfiprintf_r+0x198>
 8014fe0:	89a3      	ldrh	r3, [r4, #12]
 8014fe2:	065b      	lsls	r3, r3, #25
 8014fe4:	f53f af7e 	bmi.w	8014ee4 <_vfiprintf_r+0xf0>
 8014fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fea:	e77d      	b.n	8014ee8 <_vfiprintf_r+0xf4>
 8014fec:	ab03      	add	r3, sp, #12
 8014fee:	9300      	str	r3, [sp, #0]
 8014ff0:	4622      	mov	r2, r4
 8014ff2:	4b0a      	ldr	r3, [pc, #40]	; (801501c <_vfiprintf_r+0x228>)
 8014ff4:	a904      	add	r1, sp, #16
 8014ff6:	4630      	mov	r0, r6
 8014ff8:	f7fc fdc0 	bl	8011b7c <_printf_i>
 8014ffc:	e7ec      	b.n	8014fd8 <_vfiprintf_r+0x1e4>
 8014ffe:	bf00      	nop
 8015000:	0801a1b8 	.word	0x0801a1b8
 8015004:	0801a2f4 	.word	0x0801a2f4
 8015008:	0801a1d8 	.word	0x0801a1d8
 801500c:	0801a198 	.word	0x0801a198
 8015010:	0801a2fa 	.word	0x0801a2fa
 8015014:	0801a2fe 	.word	0x0801a2fe
 8015018:	08011625 	.word	0x08011625
 801501c:	08014dcf 	.word	0x08014dcf

08015020 <_sbrk_r>:
 8015020:	b538      	push	{r3, r4, r5, lr}
 8015022:	2300      	movs	r3, #0
 8015024:	4c05      	ldr	r4, [pc, #20]	; (801503c <_sbrk_r+0x1c>)
 8015026:	4605      	mov	r5, r0
 8015028:	4608      	mov	r0, r1
 801502a:	6023      	str	r3, [r4, #0]
 801502c:	f7ec fbea 	bl	8001804 <_sbrk>
 8015030:	1c43      	adds	r3, r0, #1
 8015032:	d102      	bne.n	801503a <_sbrk_r+0x1a>
 8015034:	6823      	ldr	r3, [r4, #0]
 8015036:	b103      	cbz	r3, 801503a <_sbrk_r+0x1a>
 8015038:	602b      	str	r3, [r5, #0]
 801503a:	bd38      	pop	{r3, r4, r5, pc}
 801503c:	2000157c 	.word	0x2000157c

08015040 <nanf>:
 8015040:	4800      	ldr	r0, [pc, #0]	; (8015044 <nanf+0x4>)
 8015042:	4770      	bx	lr
 8015044:	7fc00000 	.word	0x7fc00000

08015048 <__sread>:
 8015048:	b510      	push	{r4, lr}
 801504a:	460c      	mov	r4, r1
 801504c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015050:	f000 fa9a 	bl	8015588 <_read_r>
 8015054:	2800      	cmp	r0, #0
 8015056:	bfab      	itete	ge
 8015058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801505a:	89a3      	ldrhlt	r3, [r4, #12]
 801505c:	181b      	addge	r3, r3, r0
 801505e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015062:	bfac      	ite	ge
 8015064:	6563      	strge	r3, [r4, #84]	; 0x54
 8015066:	81a3      	strhlt	r3, [r4, #12]
 8015068:	bd10      	pop	{r4, pc}

0801506a <__swrite>:
 801506a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801506e:	461f      	mov	r7, r3
 8015070:	898b      	ldrh	r3, [r1, #12]
 8015072:	4605      	mov	r5, r0
 8015074:	05db      	lsls	r3, r3, #23
 8015076:	460c      	mov	r4, r1
 8015078:	4616      	mov	r6, r2
 801507a:	d505      	bpl.n	8015088 <__swrite+0x1e>
 801507c:	2302      	movs	r3, #2
 801507e:	2200      	movs	r2, #0
 8015080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015084:	f000 f9c8 	bl	8015418 <_lseek_r>
 8015088:	89a3      	ldrh	r3, [r4, #12]
 801508a:	4632      	mov	r2, r6
 801508c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015090:	81a3      	strh	r3, [r4, #12]
 8015092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015096:	463b      	mov	r3, r7
 8015098:	4628      	mov	r0, r5
 801509a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801509e:	f000 b87b 	b.w	8015198 <_write_r>

080150a2 <__sseek>:
 80150a2:	b510      	push	{r4, lr}
 80150a4:	460c      	mov	r4, r1
 80150a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150aa:	f000 f9b5 	bl	8015418 <_lseek_r>
 80150ae:	1c43      	adds	r3, r0, #1
 80150b0:	89a3      	ldrh	r3, [r4, #12]
 80150b2:	bf15      	itete	ne
 80150b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80150b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80150ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80150be:	81a3      	strheq	r3, [r4, #12]
 80150c0:	bf18      	it	ne
 80150c2:	81a3      	strhne	r3, [r4, #12]
 80150c4:	bd10      	pop	{r4, pc}

080150c6 <__sclose>:
 80150c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150ca:	f000 b8e5 	b.w	8015298 <_close_r>

080150ce <strncmp>:
 80150ce:	b510      	push	{r4, lr}
 80150d0:	b16a      	cbz	r2, 80150ee <strncmp+0x20>
 80150d2:	3901      	subs	r1, #1
 80150d4:	1884      	adds	r4, r0, r2
 80150d6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80150da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80150de:	4293      	cmp	r3, r2
 80150e0:	d103      	bne.n	80150ea <strncmp+0x1c>
 80150e2:	42a0      	cmp	r0, r4
 80150e4:	d001      	beq.n	80150ea <strncmp+0x1c>
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d1f5      	bne.n	80150d6 <strncmp+0x8>
 80150ea:	1a98      	subs	r0, r3, r2
 80150ec:	bd10      	pop	{r4, pc}
 80150ee:	4610      	mov	r0, r2
 80150f0:	e7fc      	b.n	80150ec <strncmp+0x1e>
	...

080150f4 <__swbuf_r>:
 80150f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150f6:	460e      	mov	r6, r1
 80150f8:	4614      	mov	r4, r2
 80150fa:	4605      	mov	r5, r0
 80150fc:	b118      	cbz	r0, 8015106 <__swbuf_r+0x12>
 80150fe:	6983      	ldr	r3, [r0, #24]
 8015100:	b90b      	cbnz	r3, 8015106 <__swbuf_r+0x12>
 8015102:	f7fe fc79 	bl	80139f8 <__sinit>
 8015106:	4b21      	ldr	r3, [pc, #132]	; (801518c <__swbuf_r+0x98>)
 8015108:	429c      	cmp	r4, r3
 801510a:	d12a      	bne.n	8015162 <__swbuf_r+0x6e>
 801510c:	686c      	ldr	r4, [r5, #4]
 801510e:	69a3      	ldr	r3, [r4, #24]
 8015110:	60a3      	str	r3, [r4, #8]
 8015112:	89a3      	ldrh	r3, [r4, #12]
 8015114:	071a      	lsls	r2, r3, #28
 8015116:	d52e      	bpl.n	8015176 <__swbuf_r+0x82>
 8015118:	6923      	ldr	r3, [r4, #16]
 801511a:	b363      	cbz	r3, 8015176 <__swbuf_r+0x82>
 801511c:	6923      	ldr	r3, [r4, #16]
 801511e:	6820      	ldr	r0, [r4, #0]
 8015120:	b2f6      	uxtb	r6, r6
 8015122:	1ac0      	subs	r0, r0, r3
 8015124:	6963      	ldr	r3, [r4, #20]
 8015126:	4637      	mov	r7, r6
 8015128:	4283      	cmp	r3, r0
 801512a:	dc04      	bgt.n	8015136 <__swbuf_r+0x42>
 801512c:	4621      	mov	r1, r4
 801512e:	4628      	mov	r0, r5
 8015130:	f000 f948 	bl	80153c4 <_fflush_r>
 8015134:	bb28      	cbnz	r0, 8015182 <__swbuf_r+0x8e>
 8015136:	68a3      	ldr	r3, [r4, #8]
 8015138:	3001      	adds	r0, #1
 801513a:	3b01      	subs	r3, #1
 801513c:	60a3      	str	r3, [r4, #8]
 801513e:	6823      	ldr	r3, [r4, #0]
 8015140:	1c5a      	adds	r2, r3, #1
 8015142:	6022      	str	r2, [r4, #0]
 8015144:	701e      	strb	r6, [r3, #0]
 8015146:	6963      	ldr	r3, [r4, #20]
 8015148:	4283      	cmp	r3, r0
 801514a:	d004      	beq.n	8015156 <__swbuf_r+0x62>
 801514c:	89a3      	ldrh	r3, [r4, #12]
 801514e:	07db      	lsls	r3, r3, #31
 8015150:	d519      	bpl.n	8015186 <__swbuf_r+0x92>
 8015152:	2e0a      	cmp	r6, #10
 8015154:	d117      	bne.n	8015186 <__swbuf_r+0x92>
 8015156:	4621      	mov	r1, r4
 8015158:	4628      	mov	r0, r5
 801515a:	f000 f933 	bl	80153c4 <_fflush_r>
 801515e:	b190      	cbz	r0, 8015186 <__swbuf_r+0x92>
 8015160:	e00f      	b.n	8015182 <__swbuf_r+0x8e>
 8015162:	4b0b      	ldr	r3, [pc, #44]	; (8015190 <__swbuf_r+0x9c>)
 8015164:	429c      	cmp	r4, r3
 8015166:	d101      	bne.n	801516c <__swbuf_r+0x78>
 8015168:	68ac      	ldr	r4, [r5, #8]
 801516a:	e7d0      	b.n	801510e <__swbuf_r+0x1a>
 801516c:	4b09      	ldr	r3, [pc, #36]	; (8015194 <__swbuf_r+0xa0>)
 801516e:	429c      	cmp	r4, r3
 8015170:	bf08      	it	eq
 8015172:	68ec      	ldreq	r4, [r5, #12]
 8015174:	e7cb      	b.n	801510e <__swbuf_r+0x1a>
 8015176:	4621      	mov	r1, r4
 8015178:	4628      	mov	r0, r5
 801517a:	f000 f81f 	bl	80151bc <__swsetup_r>
 801517e:	2800      	cmp	r0, #0
 8015180:	d0cc      	beq.n	801511c <__swbuf_r+0x28>
 8015182:	f04f 37ff 	mov.w	r7, #4294967295
 8015186:	4638      	mov	r0, r7
 8015188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801518a:	bf00      	nop
 801518c:	0801a1b8 	.word	0x0801a1b8
 8015190:	0801a1d8 	.word	0x0801a1d8
 8015194:	0801a198 	.word	0x0801a198

08015198 <_write_r>:
 8015198:	b538      	push	{r3, r4, r5, lr}
 801519a:	4605      	mov	r5, r0
 801519c:	4608      	mov	r0, r1
 801519e:	4611      	mov	r1, r2
 80151a0:	2200      	movs	r2, #0
 80151a2:	4c05      	ldr	r4, [pc, #20]	; (80151b8 <_write_r+0x20>)
 80151a4:	6022      	str	r2, [r4, #0]
 80151a6:	461a      	mov	r2, r3
 80151a8:	f7ec fadf 	bl	800176a <_write>
 80151ac:	1c43      	adds	r3, r0, #1
 80151ae:	d102      	bne.n	80151b6 <_write_r+0x1e>
 80151b0:	6823      	ldr	r3, [r4, #0]
 80151b2:	b103      	cbz	r3, 80151b6 <_write_r+0x1e>
 80151b4:	602b      	str	r3, [r5, #0]
 80151b6:	bd38      	pop	{r3, r4, r5, pc}
 80151b8:	2000157c 	.word	0x2000157c

080151bc <__swsetup_r>:
 80151bc:	4b32      	ldr	r3, [pc, #200]	; (8015288 <__swsetup_r+0xcc>)
 80151be:	b570      	push	{r4, r5, r6, lr}
 80151c0:	681d      	ldr	r5, [r3, #0]
 80151c2:	4606      	mov	r6, r0
 80151c4:	460c      	mov	r4, r1
 80151c6:	b125      	cbz	r5, 80151d2 <__swsetup_r+0x16>
 80151c8:	69ab      	ldr	r3, [r5, #24]
 80151ca:	b913      	cbnz	r3, 80151d2 <__swsetup_r+0x16>
 80151cc:	4628      	mov	r0, r5
 80151ce:	f7fe fc13 	bl	80139f8 <__sinit>
 80151d2:	4b2e      	ldr	r3, [pc, #184]	; (801528c <__swsetup_r+0xd0>)
 80151d4:	429c      	cmp	r4, r3
 80151d6:	d10f      	bne.n	80151f8 <__swsetup_r+0x3c>
 80151d8:	686c      	ldr	r4, [r5, #4]
 80151da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151de:	b29a      	uxth	r2, r3
 80151e0:	0715      	lsls	r5, r2, #28
 80151e2:	d42c      	bmi.n	801523e <__swsetup_r+0x82>
 80151e4:	06d0      	lsls	r0, r2, #27
 80151e6:	d411      	bmi.n	801520c <__swsetup_r+0x50>
 80151e8:	2209      	movs	r2, #9
 80151ea:	6032      	str	r2, [r6, #0]
 80151ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151f0:	81a3      	strh	r3, [r4, #12]
 80151f2:	f04f 30ff 	mov.w	r0, #4294967295
 80151f6:	e03e      	b.n	8015276 <__swsetup_r+0xba>
 80151f8:	4b25      	ldr	r3, [pc, #148]	; (8015290 <__swsetup_r+0xd4>)
 80151fa:	429c      	cmp	r4, r3
 80151fc:	d101      	bne.n	8015202 <__swsetup_r+0x46>
 80151fe:	68ac      	ldr	r4, [r5, #8]
 8015200:	e7eb      	b.n	80151da <__swsetup_r+0x1e>
 8015202:	4b24      	ldr	r3, [pc, #144]	; (8015294 <__swsetup_r+0xd8>)
 8015204:	429c      	cmp	r4, r3
 8015206:	bf08      	it	eq
 8015208:	68ec      	ldreq	r4, [r5, #12]
 801520a:	e7e6      	b.n	80151da <__swsetup_r+0x1e>
 801520c:	0751      	lsls	r1, r2, #29
 801520e:	d512      	bpl.n	8015236 <__swsetup_r+0x7a>
 8015210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015212:	b141      	cbz	r1, 8015226 <__swsetup_r+0x6a>
 8015214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015218:	4299      	cmp	r1, r3
 801521a:	d002      	beq.n	8015222 <__swsetup_r+0x66>
 801521c:	4630      	mov	r0, r6
 801521e:	f7ff fbc9 	bl	80149b4 <_free_r>
 8015222:	2300      	movs	r3, #0
 8015224:	6363      	str	r3, [r4, #52]	; 0x34
 8015226:	89a3      	ldrh	r3, [r4, #12]
 8015228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801522c:	81a3      	strh	r3, [r4, #12]
 801522e:	2300      	movs	r3, #0
 8015230:	6063      	str	r3, [r4, #4]
 8015232:	6923      	ldr	r3, [r4, #16]
 8015234:	6023      	str	r3, [r4, #0]
 8015236:	89a3      	ldrh	r3, [r4, #12]
 8015238:	f043 0308 	orr.w	r3, r3, #8
 801523c:	81a3      	strh	r3, [r4, #12]
 801523e:	6923      	ldr	r3, [r4, #16]
 8015240:	b94b      	cbnz	r3, 8015256 <__swsetup_r+0x9a>
 8015242:	89a3      	ldrh	r3, [r4, #12]
 8015244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801524c:	d003      	beq.n	8015256 <__swsetup_r+0x9a>
 801524e:	4621      	mov	r1, r4
 8015250:	4630      	mov	r0, r6
 8015252:	f000 f917 	bl	8015484 <__smakebuf_r>
 8015256:	89a2      	ldrh	r2, [r4, #12]
 8015258:	f012 0301 	ands.w	r3, r2, #1
 801525c:	d00c      	beq.n	8015278 <__swsetup_r+0xbc>
 801525e:	2300      	movs	r3, #0
 8015260:	60a3      	str	r3, [r4, #8]
 8015262:	6963      	ldr	r3, [r4, #20]
 8015264:	425b      	negs	r3, r3
 8015266:	61a3      	str	r3, [r4, #24]
 8015268:	6923      	ldr	r3, [r4, #16]
 801526a:	b953      	cbnz	r3, 8015282 <__swsetup_r+0xc6>
 801526c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015270:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015274:	d1ba      	bne.n	80151ec <__swsetup_r+0x30>
 8015276:	bd70      	pop	{r4, r5, r6, pc}
 8015278:	0792      	lsls	r2, r2, #30
 801527a:	bf58      	it	pl
 801527c:	6963      	ldrpl	r3, [r4, #20]
 801527e:	60a3      	str	r3, [r4, #8]
 8015280:	e7f2      	b.n	8015268 <__swsetup_r+0xac>
 8015282:	2000      	movs	r0, #0
 8015284:	e7f7      	b.n	8015276 <__swsetup_r+0xba>
 8015286:	bf00      	nop
 8015288:	20000060 	.word	0x20000060
 801528c:	0801a1b8 	.word	0x0801a1b8
 8015290:	0801a1d8 	.word	0x0801a1d8
 8015294:	0801a198 	.word	0x0801a198

08015298 <_close_r>:
 8015298:	b538      	push	{r3, r4, r5, lr}
 801529a:	2300      	movs	r3, #0
 801529c:	4c05      	ldr	r4, [pc, #20]	; (80152b4 <_close_r+0x1c>)
 801529e:	4605      	mov	r5, r0
 80152a0:	4608      	mov	r0, r1
 80152a2:	6023      	str	r3, [r4, #0]
 80152a4:	f7ec fa7d 	bl	80017a2 <_close>
 80152a8:	1c43      	adds	r3, r0, #1
 80152aa:	d102      	bne.n	80152b2 <_close_r+0x1a>
 80152ac:	6823      	ldr	r3, [r4, #0]
 80152ae:	b103      	cbz	r3, 80152b2 <_close_r+0x1a>
 80152b0:	602b      	str	r3, [r5, #0]
 80152b2:	bd38      	pop	{r3, r4, r5, pc}
 80152b4:	2000157c 	.word	0x2000157c

080152b8 <__sflush_r>:
 80152b8:	898a      	ldrh	r2, [r1, #12]
 80152ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152be:	4605      	mov	r5, r0
 80152c0:	0710      	lsls	r0, r2, #28
 80152c2:	460c      	mov	r4, r1
 80152c4:	d458      	bmi.n	8015378 <__sflush_r+0xc0>
 80152c6:	684b      	ldr	r3, [r1, #4]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	dc05      	bgt.n	80152d8 <__sflush_r+0x20>
 80152cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	dc02      	bgt.n	80152d8 <__sflush_r+0x20>
 80152d2:	2000      	movs	r0, #0
 80152d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80152da:	2e00      	cmp	r6, #0
 80152dc:	d0f9      	beq.n	80152d2 <__sflush_r+0x1a>
 80152de:	2300      	movs	r3, #0
 80152e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80152e4:	682f      	ldr	r7, [r5, #0]
 80152e6:	6a21      	ldr	r1, [r4, #32]
 80152e8:	602b      	str	r3, [r5, #0]
 80152ea:	d032      	beq.n	8015352 <__sflush_r+0x9a>
 80152ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80152ee:	89a3      	ldrh	r3, [r4, #12]
 80152f0:	075a      	lsls	r2, r3, #29
 80152f2:	d505      	bpl.n	8015300 <__sflush_r+0x48>
 80152f4:	6863      	ldr	r3, [r4, #4]
 80152f6:	1ac0      	subs	r0, r0, r3
 80152f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80152fa:	b10b      	cbz	r3, 8015300 <__sflush_r+0x48>
 80152fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80152fe:	1ac0      	subs	r0, r0, r3
 8015300:	2300      	movs	r3, #0
 8015302:	4602      	mov	r2, r0
 8015304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015306:	6a21      	ldr	r1, [r4, #32]
 8015308:	4628      	mov	r0, r5
 801530a:	47b0      	blx	r6
 801530c:	1c43      	adds	r3, r0, #1
 801530e:	89a3      	ldrh	r3, [r4, #12]
 8015310:	d106      	bne.n	8015320 <__sflush_r+0x68>
 8015312:	6829      	ldr	r1, [r5, #0]
 8015314:	291d      	cmp	r1, #29
 8015316:	d848      	bhi.n	80153aa <__sflush_r+0xf2>
 8015318:	4a29      	ldr	r2, [pc, #164]	; (80153c0 <__sflush_r+0x108>)
 801531a:	40ca      	lsrs	r2, r1
 801531c:	07d6      	lsls	r6, r2, #31
 801531e:	d544      	bpl.n	80153aa <__sflush_r+0xf2>
 8015320:	2200      	movs	r2, #0
 8015322:	6062      	str	r2, [r4, #4]
 8015324:	6922      	ldr	r2, [r4, #16]
 8015326:	04d9      	lsls	r1, r3, #19
 8015328:	6022      	str	r2, [r4, #0]
 801532a:	d504      	bpl.n	8015336 <__sflush_r+0x7e>
 801532c:	1c42      	adds	r2, r0, #1
 801532e:	d101      	bne.n	8015334 <__sflush_r+0x7c>
 8015330:	682b      	ldr	r3, [r5, #0]
 8015332:	b903      	cbnz	r3, 8015336 <__sflush_r+0x7e>
 8015334:	6560      	str	r0, [r4, #84]	; 0x54
 8015336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015338:	602f      	str	r7, [r5, #0]
 801533a:	2900      	cmp	r1, #0
 801533c:	d0c9      	beq.n	80152d2 <__sflush_r+0x1a>
 801533e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015342:	4299      	cmp	r1, r3
 8015344:	d002      	beq.n	801534c <__sflush_r+0x94>
 8015346:	4628      	mov	r0, r5
 8015348:	f7ff fb34 	bl	80149b4 <_free_r>
 801534c:	2000      	movs	r0, #0
 801534e:	6360      	str	r0, [r4, #52]	; 0x34
 8015350:	e7c0      	b.n	80152d4 <__sflush_r+0x1c>
 8015352:	2301      	movs	r3, #1
 8015354:	4628      	mov	r0, r5
 8015356:	47b0      	blx	r6
 8015358:	1c41      	adds	r1, r0, #1
 801535a:	d1c8      	bne.n	80152ee <__sflush_r+0x36>
 801535c:	682b      	ldr	r3, [r5, #0]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d0c5      	beq.n	80152ee <__sflush_r+0x36>
 8015362:	2b1d      	cmp	r3, #29
 8015364:	d001      	beq.n	801536a <__sflush_r+0xb2>
 8015366:	2b16      	cmp	r3, #22
 8015368:	d101      	bne.n	801536e <__sflush_r+0xb6>
 801536a:	602f      	str	r7, [r5, #0]
 801536c:	e7b1      	b.n	80152d2 <__sflush_r+0x1a>
 801536e:	89a3      	ldrh	r3, [r4, #12]
 8015370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015374:	81a3      	strh	r3, [r4, #12]
 8015376:	e7ad      	b.n	80152d4 <__sflush_r+0x1c>
 8015378:	690f      	ldr	r7, [r1, #16]
 801537a:	2f00      	cmp	r7, #0
 801537c:	d0a9      	beq.n	80152d2 <__sflush_r+0x1a>
 801537e:	0793      	lsls	r3, r2, #30
 8015380:	bf18      	it	ne
 8015382:	2300      	movne	r3, #0
 8015384:	680e      	ldr	r6, [r1, #0]
 8015386:	bf08      	it	eq
 8015388:	694b      	ldreq	r3, [r1, #20]
 801538a:	eba6 0807 	sub.w	r8, r6, r7
 801538e:	600f      	str	r7, [r1, #0]
 8015390:	608b      	str	r3, [r1, #8]
 8015392:	f1b8 0f00 	cmp.w	r8, #0
 8015396:	dd9c      	ble.n	80152d2 <__sflush_r+0x1a>
 8015398:	4643      	mov	r3, r8
 801539a:	463a      	mov	r2, r7
 801539c:	6a21      	ldr	r1, [r4, #32]
 801539e:	4628      	mov	r0, r5
 80153a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80153a2:	47b0      	blx	r6
 80153a4:	2800      	cmp	r0, #0
 80153a6:	dc06      	bgt.n	80153b6 <__sflush_r+0xfe>
 80153a8:	89a3      	ldrh	r3, [r4, #12]
 80153aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153ae:	81a3      	strh	r3, [r4, #12]
 80153b0:	f04f 30ff 	mov.w	r0, #4294967295
 80153b4:	e78e      	b.n	80152d4 <__sflush_r+0x1c>
 80153b6:	4407      	add	r7, r0
 80153b8:	eba8 0800 	sub.w	r8, r8, r0
 80153bc:	e7e9      	b.n	8015392 <__sflush_r+0xda>
 80153be:	bf00      	nop
 80153c0:	20400001 	.word	0x20400001

080153c4 <_fflush_r>:
 80153c4:	b538      	push	{r3, r4, r5, lr}
 80153c6:	690b      	ldr	r3, [r1, #16]
 80153c8:	4605      	mov	r5, r0
 80153ca:	460c      	mov	r4, r1
 80153cc:	b1db      	cbz	r3, 8015406 <_fflush_r+0x42>
 80153ce:	b118      	cbz	r0, 80153d8 <_fflush_r+0x14>
 80153d0:	6983      	ldr	r3, [r0, #24]
 80153d2:	b90b      	cbnz	r3, 80153d8 <_fflush_r+0x14>
 80153d4:	f7fe fb10 	bl	80139f8 <__sinit>
 80153d8:	4b0c      	ldr	r3, [pc, #48]	; (801540c <_fflush_r+0x48>)
 80153da:	429c      	cmp	r4, r3
 80153dc:	d109      	bne.n	80153f2 <_fflush_r+0x2e>
 80153de:	686c      	ldr	r4, [r5, #4]
 80153e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153e4:	b17b      	cbz	r3, 8015406 <_fflush_r+0x42>
 80153e6:	4621      	mov	r1, r4
 80153e8:	4628      	mov	r0, r5
 80153ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153ee:	f7ff bf63 	b.w	80152b8 <__sflush_r>
 80153f2:	4b07      	ldr	r3, [pc, #28]	; (8015410 <_fflush_r+0x4c>)
 80153f4:	429c      	cmp	r4, r3
 80153f6:	d101      	bne.n	80153fc <_fflush_r+0x38>
 80153f8:	68ac      	ldr	r4, [r5, #8]
 80153fa:	e7f1      	b.n	80153e0 <_fflush_r+0x1c>
 80153fc:	4b05      	ldr	r3, [pc, #20]	; (8015414 <_fflush_r+0x50>)
 80153fe:	429c      	cmp	r4, r3
 8015400:	bf08      	it	eq
 8015402:	68ec      	ldreq	r4, [r5, #12]
 8015404:	e7ec      	b.n	80153e0 <_fflush_r+0x1c>
 8015406:	2000      	movs	r0, #0
 8015408:	bd38      	pop	{r3, r4, r5, pc}
 801540a:	bf00      	nop
 801540c:	0801a1b8 	.word	0x0801a1b8
 8015410:	0801a1d8 	.word	0x0801a1d8
 8015414:	0801a198 	.word	0x0801a198

08015418 <_lseek_r>:
 8015418:	b538      	push	{r3, r4, r5, lr}
 801541a:	4605      	mov	r5, r0
 801541c:	4608      	mov	r0, r1
 801541e:	4611      	mov	r1, r2
 8015420:	2200      	movs	r2, #0
 8015422:	4c05      	ldr	r4, [pc, #20]	; (8015438 <_lseek_r+0x20>)
 8015424:	6022      	str	r2, [r4, #0]
 8015426:	461a      	mov	r2, r3
 8015428:	f7ec f9df 	bl	80017ea <_lseek>
 801542c:	1c43      	adds	r3, r0, #1
 801542e:	d102      	bne.n	8015436 <_lseek_r+0x1e>
 8015430:	6823      	ldr	r3, [r4, #0]
 8015432:	b103      	cbz	r3, 8015436 <_lseek_r+0x1e>
 8015434:	602b      	str	r3, [r5, #0]
 8015436:	bd38      	pop	{r3, r4, r5, pc}
 8015438:	2000157c 	.word	0x2000157c

0801543c <__swhatbuf_r>:
 801543c:	b570      	push	{r4, r5, r6, lr}
 801543e:	460e      	mov	r6, r1
 8015440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015444:	b096      	sub	sp, #88	; 0x58
 8015446:	2900      	cmp	r1, #0
 8015448:	4614      	mov	r4, r2
 801544a:	461d      	mov	r5, r3
 801544c:	da07      	bge.n	801545e <__swhatbuf_r+0x22>
 801544e:	2300      	movs	r3, #0
 8015450:	602b      	str	r3, [r5, #0]
 8015452:	89b3      	ldrh	r3, [r6, #12]
 8015454:	061a      	lsls	r2, r3, #24
 8015456:	d410      	bmi.n	801547a <__swhatbuf_r+0x3e>
 8015458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801545c:	e00e      	b.n	801547c <__swhatbuf_r+0x40>
 801545e:	466a      	mov	r2, sp
 8015460:	f000 f8a4 	bl	80155ac <_fstat_r>
 8015464:	2800      	cmp	r0, #0
 8015466:	dbf2      	blt.n	801544e <__swhatbuf_r+0x12>
 8015468:	9a01      	ldr	r2, [sp, #4]
 801546a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801546e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015472:	425a      	negs	r2, r3
 8015474:	415a      	adcs	r2, r3
 8015476:	602a      	str	r2, [r5, #0]
 8015478:	e7ee      	b.n	8015458 <__swhatbuf_r+0x1c>
 801547a:	2340      	movs	r3, #64	; 0x40
 801547c:	2000      	movs	r0, #0
 801547e:	6023      	str	r3, [r4, #0]
 8015480:	b016      	add	sp, #88	; 0x58
 8015482:	bd70      	pop	{r4, r5, r6, pc}

08015484 <__smakebuf_r>:
 8015484:	898b      	ldrh	r3, [r1, #12]
 8015486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015488:	079d      	lsls	r5, r3, #30
 801548a:	4606      	mov	r6, r0
 801548c:	460c      	mov	r4, r1
 801548e:	d507      	bpl.n	80154a0 <__smakebuf_r+0x1c>
 8015490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015494:	6023      	str	r3, [r4, #0]
 8015496:	6123      	str	r3, [r4, #16]
 8015498:	2301      	movs	r3, #1
 801549a:	6163      	str	r3, [r4, #20]
 801549c:	b002      	add	sp, #8
 801549e:	bd70      	pop	{r4, r5, r6, pc}
 80154a0:	ab01      	add	r3, sp, #4
 80154a2:	466a      	mov	r2, sp
 80154a4:	f7ff ffca 	bl	801543c <__swhatbuf_r>
 80154a8:	9900      	ldr	r1, [sp, #0]
 80154aa:	4605      	mov	r5, r0
 80154ac:	4630      	mov	r0, r6
 80154ae:	f7ff facd 	bl	8014a4c <_malloc_r>
 80154b2:	b948      	cbnz	r0, 80154c8 <__smakebuf_r+0x44>
 80154b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154b8:	059a      	lsls	r2, r3, #22
 80154ba:	d4ef      	bmi.n	801549c <__smakebuf_r+0x18>
 80154bc:	f023 0303 	bic.w	r3, r3, #3
 80154c0:	f043 0302 	orr.w	r3, r3, #2
 80154c4:	81a3      	strh	r3, [r4, #12]
 80154c6:	e7e3      	b.n	8015490 <__smakebuf_r+0xc>
 80154c8:	4b0d      	ldr	r3, [pc, #52]	; (8015500 <__smakebuf_r+0x7c>)
 80154ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80154cc:	89a3      	ldrh	r3, [r4, #12]
 80154ce:	6020      	str	r0, [r4, #0]
 80154d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154d4:	81a3      	strh	r3, [r4, #12]
 80154d6:	9b00      	ldr	r3, [sp, #0]
 80154d8:	6120      	str	r0, [r4, #16]
 80154da:	6163      	str	r3, [r4, #20]
 80154dc:	9b01      	ldr	r3, [sp, #4]
 80154de:	b15b      	cbz	r3, 80154f8 <__smakebuf_r+0x74>
 80154e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154e4:	4630      	mov	r0, r6
 80154e6:	f000 f873 	bl	80155d0 <_isatty_r>
 80154ea:	b128      	cbz	r0, 80154f8 <__smakebuf_r+0x74>
 80154ec:	89a3      	ldrh	r3, [r4, #12]
 80154ee:	f023 0303 	bic.w	r3, r3, #3
 80154f2:	f043 0301 	orr.w	r3, r3, #1
 80154f6:	81a3      	strh	r3, [r4, #12]
 80154f8:	89a3      	ldrh	r3, [r4, #12]
 80154fa:	431d      	orrs	r5, r3
 80154fc:	81a5      	strh	r5, [r4, #12]
 80154fe:	e7cd      	b.n	801549c <__smakebuf_r+0x18>
 8015500:	080139c1 	.word	0x080139c1

08015504 <memmove>:
 8015504:	4288      	cmp	r0, r1
 8015506:	b510      	push	{r4, lr}
 8015508:	eb01 0302 	add.w	r3, r1, r2
 801550c:	d807      	bhi.n	801551e <memmove+0x1a>
 801550e:	1e42      	subs	r2, r0, #1
 8015510:	4299      	cmp	r1, r3
 8015512:	d00a      	beq.n	801552a <memmove+0x26>
 8015514:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015518:	f802 4f01 	strb.w	r4, [r2, #1]!
 801551c:	e7f8      	b.n	8015510 <memmove+0xc>
 801551e:	4283      	cmp	r3, r0
 8015520:	d9f5      	bls.n	801550e <memmove+0xa>
 8015522:	1881      	adds	r1, r0, r2
 8015524:	1ad2      	subs	r2, r2, r3
 8015526:	42d3      	cmn	r3, r2
 8015528:	d100      	bne.n	801552c <memmove+0x28>
 801552a:	bd10      	pop	{r4, pc}
 801552c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015530:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015534:	e7f7      	b.n	8015526 <memmove+0x22>

08015536 <__malloc_lock>:
 8015536:	4770      	bx	lr

08015538 <__malloc_unlock>:
 8015538:	4770      	bx	lr

0801553a <_realloc_r>:
 801553a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801553c:	4607      	mov	r7, r0
 801553e:	4614      	mov	r4, r2
 8015540:	460e      	mov	r6, r1
 8015542:	b921      	cbnz	r1, 801554e <_realloc_r+0x14>
 8015544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015548:	4611      	mov	r1, r2
 801554a:	f7ff ba7f 	b.w	8014a4c <_malloc_r>
 801554e:	b922      	cbnz	r2, 801555a <_realloc_r+0x20>
 8015550:	f7ff fa30 	bl	80149b4 <_free_r>
 8015554:	4625      	mov	r5, r4
 8015556:	4628      	mov	r0, r5
 8015558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801555a:	f000 f849 	bl	80155f0 <_malloc_usable_size_r>
 801555e:	42a0      	cmp	r0, r4
 8015560:	d20f      	bcs.n	8015582 <_realloc_r+0x48>
 8015562:	4621      	mov	r1, r4
 8015564:	4638      	mov	r0, r7
 8015566:	f7ff fa71 	bl	8014a4c <_malloc_r>
 801556a:	4605      	mov	r5, r0
 801556c:	2800      	cmp	r0, #0
 801556e:	d0f2      	beq.n	8015556 <_realloc_r+0x1c>
 8015570:	4631      	mov	r1, r6
 8015572:	4622      	mov	r2, r4
 8015574:	f7fb ffb2 	bl	80114dc <memcpy>
 8015578:	4631      	mov	r1, r6
 801557a:	4638      	mov	r0, r7
 801557c:	f7ff fa1a 	bl	80149b4 <_free_r>
 8015580:	e7e9      	b.n	8015556 <_realloc_r+0x1c>
 8015582:	4635      	mov	r5, r6
 8015584:	e7e7      	b.n	8015556 <_realloc_r+0x1c>
	...

08015588 <_read_r>:
 8015588:	b538      	push	{r3, r4, r5, lr}
 801558a:	4605      	mov	r5, r0
 801558c:	4608      	mov	r0, r1
 801558e:	4611      	mov	r1, r2
 8015590:	2200      	movs	r2, #0
 8015592:	4c05      	ldr	r4, [pc, #20]	; (80155a8 <_read_r+0x20>)
 8015594:	6022      	str	r2, [r4, #0]
 8015596:	461a      	mov	r2, r3
 8015598:	f7ec f8ca 	bl	8001730 <_read>
 801559c:	1c43      	adds	r3, r0, #1
 801559e:	d102      	bne.n	80155a6 <_read_r+0x1e>
 80155a0:	6823      	ldr	r3, [r4, #0]
 80155a2:	b103      	cbz	r3, 80155a6 <_read_r+0x1e>
 80155a4:	602b      	str	r3, [r5, #0]
 80155a6:	bd38      	pop	{r3, r4, r5, pc}
 80155a8:	2000157c 	.word	0x2000157c

080155ac <_fstat_r>:
 80155ac:	b538      	push	{r3, r4, r5, lr}
 80155ae:	2300      	movs	r3, #0
 80155b0:	4c06      	ldr	r4, [pc, #24]	; (80155cc <_fstat_r+0x20>)
 80155b2:	4605      	mov	r5, r0
 80155b4:	4608      	mov	r0, r1
 80155b6:	4611      	mov	r1, r2
 80155b8:	6023      	str	r3, [r4, #0]
 80155ba:	f7ec f8fd 	bl	80017b8 <_fstat>
 80155be:	1c43      	adds	r3, r0, #1
 80155c0:	d102      	bne.n	80155c8 <_fstat_r+0x1c>
 80155c2:	6823      	ldr	r3, [r4, #0]
 80155c4:	b103      	cbz	r3, 80155c8 <_fstat_r+0x1c>
 80155c6:	602b      	str	r3, [r5, #0]
 80155c8:	bd38      	pop	{r3, r4, r5, pc}
 80155ca:	bf00      	nop
 80155cc:	2000157c 	.word	0x2000157c

080155d0 <_isatty_r>:
 80155d0:	b538      	push	{r3, r4, r5, lr}
 80155d2:	2300      	movs	r3, #0
 80155d4:	4c05      	ldr	r4, [pc, #20]	; (80155ec <_isatty_r+0x1c>)
 80155d6:	4605      	mov	r5, r0
 80155d8:	4608      	mov	r0, r1
 80155da:	6023      	str	r3, [r4, #0]
 80155dc:	f7ec f8fb 	bl	80017d6 <_isatty>
 80155e0:	1c43      	adds	r3, r0, #1
 80155e2:	d102      	bne.n	80155ea <_isatty_r+0x1a>
 80155e4:	6823      	ldr	r3, [r4, #0]
 80155e6:	b103      	cbz	r3, 80155ea <_isatty_r+0x1a>
 80155e8:	602b      	str	r3, [r5, #0]
 80155ea:	bd38      	pop	{r3, r4, r5, pc}
 80155ec:	2000157c 	.word	0x2000157c

080155f0 <_malloc_usable_size_r>:
 80155f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80155f4:	1f18      	subs	r0, r3, #4
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	bfbc      	itt	lt
 80155fa:	580b      	ldrlt	r3, [r1, r0]
 80155fc:	18c0      	addlt	r0, r0, r3
 80155fe:	4770      	bx	lr

08015600 <cos>:
 8015600:	b530      	push	{r4, r5, lr}
 8015602:	4a18      	ldr	r2, [pc, #96]	; (8015664 <cos+0x64>)
 8015604:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015608:	4293      	cmp	r3, r2
 801560a:	b087      	sub	sp, #28
 801560c:	dc04      	bgt.n	8015618 <cos+0x18>
 801560e:	2200      	movs	r2, #0
 8015610:	2300      	movs	r3, #0
 8015612:	f002 fd25 	bl	8018060 <__kernel_cos>
 8015616:	e006      	b.n	8015626 <cos+0x26>
 8015618:	4a13      	ldr	r2, [pc, #76]	; (8015668 <cos+0x68>)
 801561a:	4293      	cmp	r3, r2
 801561c:	dd05      	ble.n	801562a <cos+0x2a>
 801561e:	4602      	mov	r2, r0
 8015620:	460b      	mov	r3, r1
 8015622:	f7ea fdbb 	bl	800019c <__aeabi_dsub>
 8015626:	b007      	add	sp, #28
 8015628:	bd30      	pop	{r4, r5, pc}
 801562a:	aa02      	add	r2, sp, #8
 801562c:	f001 fbb0 	bl	8016d90 <__ieee754_rem_pio2>
 8015630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015634:	f000 0403 	and.w	r4, r0, #3
 8015638:	2c01      	cmp	r4, #1
 801563a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801563e:	d008      	beq.n	8015652 <cos+0x52>
 8015640:	2c02      	cmp	r4, #2
 8015642:	d00c      	beq.n	801565e <cos+0x5e>
 8015644:	2c00      	cmp	r4, #0
 8015646:	d0e4      	beq.n	8015612 <cos+0x12>
 8015648:	2401      	movs	r4, #1
 801564a:	9400      	str	r4, [sp, #0]
 801564c:	f003 f910 	bl	8018870 <__kernel_sin>
 8015650:	e7e9      	b.n	8015626 <cos+0x26>
 8015652:	9400      	str	r4, [sp, #0]
 8015654:	f003 f90c 	bl	8018870 <__kernel_sin>
 8015658:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801565c:	e7e3      	b.n	8015626 <cos+0x26>
 801565e:	f002 fcff 	bl	8018060 <__kernel_cos>
 8015662:	e7f9      	b.n	8015658 <cos+0x58>
 8015664:	3fe921fb 	.word	0x3fe921fb
 8015668:	7fefffff 	.word	0x7fefffff

0801566c <sin>:
 801566c:	b530      	push	{r4, r5, lr}
 801566e:	4a1a      	ldr	r2, [pc, #104]	; (80156d8 <sin+0x6c>)
 8015670:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015674:	4293      	cmp	r3, r2
 8015676:	b087      	sub	sp, #28
 8015678:	dc06      	bgt.n	8015688 <sin+0x1c>
 801567a:	2300      	movs	r3, #0
 801567c:	2200      	movs	r2, #0
 801567e:	9300      	str	r3, [sp, #0]
 8015680:	2300      	movs	r3, #0
 8015682:	f003 f8f5 	bl	8018870 <__kernel_sin>
 8015686:	e006      	b.n	8015696 <sin+0x2a>
 8015688:	4a14      	ldr	r2, [pc, #80]	; (80156dc <sin+0x70>)
 801568a:	4293      	cmp	r3, r2
 801568c:	dd05      	ble.n	801569a <sin+0x2e>
 801568e:	4602      	mov	r2, r0
 8015690:	460b      	mov	r3, r1
 8015692:	f7ea fd83 	bl	800019c <__aeabi_dsub>
 8015696:	b007      	add	sp, #28
 8015698:	bd30      	pop	{r4, r5, pc}
 801569a:	aa02      	add	r2, sp, #8
 801569c:	f001 fb78 	bl	8016d90 <__ieee754_rem_pio2>
 80156a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156a4:	f000 0403 	and.w	r4, r0, #3
 80156a8:	2c01      	cmp	r4, #1
 80156aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156ae:	d005      	beq.n	80156bc <sin+0x50>
 80156b0:	2c02      	cmp	r4, #2
 80156b2:	d006      	beq.n	80156c2 <sin+0x56>
 80156b4:	b964      	cbnz	r4, 80156d0 <sin+0x64>
 80156b6:	2401      	movs	r4, #1
 80156b8:	9400      	str	r4, [sp, #0]
 80156ba:	e7e2      	b.n	8015682 <sin+0x16>
 80156bc:	f002 fcd0 	bl	8018060 <__kernel_cos>
 80156c0:	e7e9      	b.n	8015696 <sin+0x2a>
 80156c2:	2401      	movs	r4, #1
 80156c4:	9400      	str	r4, [sp, #0]
 80156c6:	f003 f8d3 	bl	8018870 <__kernel_sin>
 80156ca:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80156ce:	e7e2      	b.n	8015696 <sin+0x2a>
 80156d0:	f002 fcc6 	bl	8018060 <__kernel_cos>
 80156d4:	e7f9      	b.n	80156ca <sin+0x5e>
 80156d6:	bf00      	nop
 80156d8:	3fe921fb 	.word	0x3fe921fb
 80156dc:	7fefffff 	.word	0x7fefffff

080156e0 <cosf>:
 80156e0:	b507      	push	{r0, r1, r2, lr}
 80156e2:	4a18      	ldr	r2, [pc, #96]	; (8015744 <cosf+0x64>)
 80156e4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80156e8:	4293      	cmp	r3, r2
 80156ea:	4601      	mov	r1, r0
 80156ec:	dc03      	bgt.n	80156f6 <cosf+0x16>
 80156ee:	2100      	movs	r1, #0
 80156f0:	f003 f974 	bl	80189dc <__kernel_cosf>
 80156f4:	e004      	b.n	8015700 <cosf+0x20>
 80156f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80156fa:	db04      	blt.n	8015706 <cosf+0x26>
 80156fc:	f7eb fa52 	bl	8000ba4 <__aeabi_fsub>
 8015700:	b003      	add	sp, #12
 8015702:	f85d fb04 	ldr.w	pc, [sp], #4
 8015706:	4669      	mov	r1, sp
 8015708:	f002 fafc 	bl	8017d04 <__ieee754_rem_pio2f>
 801570c:	f000 0203 	and.w	r2, r0, #3
 8015710:	2a01      	cmp	r2, #1
 8015712:	d005      	beq.n	8015720 <cosf+0x40>
 8015714:	2a02      	cmp	r2, #2
 8015716:	d00a      	beq.n	801572e <cosf+0x4e>
 8015718:	b972      	cbnz	r2, 8015738 <cosf+0x58>
 801571a:	9901      	ldr	r1, [sp, #4]
 801571c:	9800      	ldr	r0, [sp, #0]
 801571e:	e7e7      	b.n	80156f0 <cosf+0x10>
 8015720:	9901      	ldr	r1, [sp, #4]
 8015722:	9800      	ldr	r0, [sp, #0]
 8015724:	f003 fc78 	bl	8019018 <__kernel_sinf>
 8015728:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801572c:	e7e8      	b.n	8015700 <cosf+0x20>
 801572e:	9901      	ldr	r1, [sp, #4]
 8015730:	9800      	ldr	r0, [sp, #0]
 8015732:	f003 f953 	bl	80189dc <__kernel_cosf>
 8015736:	e7f7      	b.n	8015728 <cosf+0x48>
 8015738:	2201      	movs	r2, #1
 801573a:	9901      	ldr	r1, [sp, #4]
 801573c:	9800      	ldr	r0, [sp, #0]
 801573e:	f003 fc6b 	bl	8019018 <__kernel_sinf>
 8015742:	e7dd      	b.n	8015700 <cosf+0x20>
 8015744:	3f490fd8 	.word	0x3f490fd8

08015748 <lrintf>:
 8015748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801574a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801574e:	f1a2 057f 	sub.w	r5, r2, #127	; 0x7f
 8015752:	2d1e      	cmp	r5, #30
 8015754:	4601      	mov	r1, r0
 8015756:	dc2b      	bgt.n	80157b0 <lrintf+0x68>
 8015758:	1c68      	adds	r0, r5, #1
 801575a:	da02      	bge.n	8015762 <lrintf+0x1a>
 801575c:	2000      	movs	r0, #0
 801575e:	b003      	add	sp, #12
 8015760:	bd30      	pop	{r4, r5, pc}
 8015762:	2d16      	cmp	r5, #22
 8015764:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 8015768:	dd09      	ble.n	801577e <lrintf+0x36>
 801576a:	f3c1 0016 	ubfx	r0, r1, #0, #23
 801576e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015772:	3a96      	subs	r2, #150	; 0x96
 8015774:	4090      	lsls	r0, r2
 8015776:	2c00      	cmp	r4, #0
 8015778:	d0f1      	beq.n	801575e <lrintf+0x16>
 801577a:	4240      	negs	r0, r0
 801577c:	e7ef      	b.n	801575e <lrintf+0x16>
 801577e:	4b0e      	ldr	r3, [pc, #56]	; (80157b8 <lrintf+0x70>)
 8015780:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8015784:	4628      	mov	r0, r5
 8015786:	f7eb fa0f 	bl	8000ba8 <__addsf3>
 801578a:	9001      	str	r0, [sp, #4]
 801578c:	9801      	ldr	r0, [sp, #4]
 801578e:	4629      	mov	r1, r5
 8015790:	f7eb fa08 	bl	8000ba4 <__aeabi_fsub>
 8015794:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8015798:	d0e0      	beq.n	801575c <lrintf+0x14>
 801579a:	f3c0 0316 	ubfx	r3, r0, #0, #23
 801579e:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 80157a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80157a6:	f1c0 0096 	rsb	r0, r0, #150	; 0x96
 80157aa:	fa23 f000 	lsr.w	r0, r3, r0
 80157ae:	e7e2      	b.n	8015776 <lrintf+0x2e>
 80157b0:	f7eb fcde 	bl	8001170 <__aeabi_f2iz>
 80157b4:	e7d3      	b.n	801575e <lrintf+0x16>
 80157b6:	bf00      	nop
 80157b8:	0801a308 	.word	0x0801a308

080157bc <sinf>:
 80157bc:	b507      	push	{r0, r1, r2, lr}
 80157be:	4a19      	ldr	r2, [pc, #100]	; (8015824 <sinf+0x68>)
 80157c0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80157c4:	4293      	cmp	r3, r2
 80157c6:	4601      	mov	r1, r0
 80157c8:	dc04      	bgt.n	80157d4 <sinf+0x18>
 80157ca:	2200      	movs	r2, #0
 80157cc:	2100      	movs	r1, #0
 80157ce:	f003 fc23 	bl	8019018 <__kernel_sinf>
 80157d2:	e004      	b.n	80157de <sinf+0x22>
 80157d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80157d8:	db04      	blt.n	80157e4 <sinf+0x28>
 80157da:	f7eb f9e3 	bl	8000ba4 <__aeabi_fsub>
 80157de:	b003      	add	sp, #12
 80157e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80157e4:	4669      	mov	r1, sp
 80157e6:	f002 fa8d 	bl	8017d04 <__ieee754_rem_pio2f>
 80157ea:	f000 0003 	and.w	r0, r0, #3
 80157ee:	2801      	cmp	r0, #1
 80157f0:	d006      	beq.n	8015800 <sinf+0x44>
 80157f2:	2802      	cmp	r0, #2
 80157f4:	d009      	beq.n	801580a <sinf+0x4e>
 80157f6:	b980      	cbnz	r0, 801581a <sinf+0x5e>
 80157f8:	2201      	movs	r2, #1
 80157fa:	9901      	ldr	r1, [sp, #4]
 80157fc:	9800      	ldr	r0, [sp, #0]
 80157fe:	e7e6      	b.n	80157ce <sinf+0x12>
 8015800:	9901      	ldr	r1, [sp, #4]
 8015802:	9800      	ldr	r0, [sp, #0]
 8015804:	f003 f8ea 	bl	80189dc <__kernel_cosf>
 8015808:	e7e9      	b.n	80157de <sinf+0x22>
 801580a:	2201      	movs	r2, #1
 801580c:	9901      	ldr	r1, [sp, #4]
 801580e:	9800      	ldr	r0, [sp, #0]
 8015810:	f003 fc02 	bl	8019018 <__kernel_sinf>
 8015814:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015818:	e7e1      	b.n	80157de <sinf+0x22>
 801581a:	9901      	ldr	r1, [sp, #4]
 801581c:	9800      	ldr	r0, [sp, #0]
 801581e:	f003 f8dd 	bl	80189dc <__kernel_cosf>
 8015822:	e7f7      	b.n	8015814 <sinf+0x58>
 8015824:	3f490fd8 	.word	0x3f490fd8

08015828 <atan2>:
 8015828:	f000 bbbe 	b.w	8015fa8 <__ieee754_atan2>

0801582c <fmod>:
 801582c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015830:	b08b      	sub	sp, #44	; 0x2c
 8015832:	461f      	mov	r7, r3
 8015834:	4604      	mov	r4, r0
 8015836:	460d      	mov	r5, r1
 8015838:	4616      	mov	r6, r2
 801583a:	f000 fc93 	bl	8016164 <__ieee754_fmod>
 801583e:	4b27      	ldr	r3, [pc, #156]	; (80158dc <fmod+0xb0>)
 8015840:	4680      	mov	r8, r0
 8015842:	f993 a000 	ldrsb.w	sl, [r3]
 8015846:	4689      	mov	r9, r1
 8015848:	f1ba 3fff 	cmp.w	sl, #4294967295
 801584c:	d030      	beq.n	80158b0 <fmod+0x84>
 801584e:	4632      	mov	r2, r6
 8015850:	463b      	mov	r3, r7
 8015852:	4630      	mov	r0, r6
 8015854:	4639      	mov	r1, r7
 8015856:	f7eb f8f3 	bl	8000a40 <__aeabi_dcmpun>
 801585a:	bb48      	cbnz	r0, 80158b0 <fmod+0x84>
 801585c:	4622      	mov	r2, r4
 801585e:	462b      	mov	r3, r5
 8015860:	4620      	mov	r0, r4
 8015862:	4629      	mov	r1, r5
 8015864:	f7eb f8ec 	bl	8000a40 <__aeabi_dcmpun>
 8015868:	4683      	mov	fp, r0
 801586a:	bb08      	cbnz	r0, 80158b0 <fmod+0x84>
 801586c:	2200      	movs	r2, #0
 801586e:	2300      	movs	r3, #0
 8015870:	4630      	mov	r0, r6
 8015872:	4639      	mov	r1, r7
 8015874:	f7eb f8b2 	bl	80009dc <__aeabi_dcmpeq>
 8015878:	b1d0      	cbz	r0, 80158b0 <fmod+0x84>
 801587a:	2301      	movs	r3, #1
 801587c:	9300      	str	r3, [sp, #0]
 801587e:	4b18      	ldr	r3, [pc, #96]	; (80158e0 <fmod+0xb4>)
 8015880:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015884:	9301      	str	r3, [sp, #4]
 8015886:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801588a:	f8cd b020 	str.w	fp, [sp, #32]
 801588e:	f1ba 0f00 	cmp.w	sl, #0
 8015892:	d112      	bne.n	80158ba <fmod+0x8e>
 8015894:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015898:	4668      	mov	r0, sp
 801589a:	f003 fe4d 	bl	8019538 <matherr>
 801589e:	b1b8      	cbz	r0, 80158d0 <fmod+0xa4>
 80158a0:	9b08      	ldr	r3, [sp, #32]
 80158a2:	b11b      	cbz	r3, 80158ac <fmod+0x80>
 80158a4:	f7fb fdcc 	bl	8011440 <__errno>
 80158a8:	9b08      	ldr	r3, [sp, #32]
 80158aa:	6003      	str	r3, [r0, #0]
 80158ac:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80158b0:	4640      	mov	r0, r8
 80158b2:	4649      	mov	r1, r9
 80158b4:	b00b      	add	sp, #44	; 0x2c
 80158b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ba:	2200      	movs	r2, #0
 80158bc:	2300      	movs	r3, #0
 80158be:	4610      	mov	r0, r2
 80158c0:	4619      	mov	r1, r3
 80158c2:	f7ea ff4d 	bl	8000760 <__aeabi_ddiv>
 80158c6:	f1ba 0f02 	cmp.w	sl, #2
 80158ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80158ce:	d1e3      	bne.n	8015898 <fmod+0x6c>
 80158d0:	f7fb fdb6 	bl	8011440 <__errno>
 80158d4:	2321      	movs	r3, #33	; 0x21
 80158d6:	6003      	str	r3, [r0, #0]
 80158d8:	e7e2      	b.n	80158a0 <fmod+0x74>
 80158da:	bf00      	nop
 80158dc:	20000230 	.word	0x20000230
 80158e0:	0801a310 	.word	0x0801a310

080158e4 <pow>:
 80158e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e8:	b08f      	sub	sp, #60	; 0x3c
 80158ea:	461d      	mov	r5, r3
 80158ec:	4680      	mov	r8, r0
 80158ee:	4689      	mov	r9, r1
 80158f0:	4614      	mov	r4, r2
 80158f2:	f000 fd41 	bl	8016378 <__ieee754_pow>
 80158f6:	4fa1      	ldr	r7, [pc, #644]	; (8015b7c <pow+0x298>)
 80158f8:	e9cd 0100 	strd	r0, r1, [sp]
 80158fc:	f997 3000 	ldrsb.w	r3, [r7]
 8015900:	463e      	mov	r6, r7
 8015902:	9302      	str	r3, [sp, #8]
 8015904:	3301      	adds	r3, #1
 8015906:	d05f      	beq.n	80159c8 <pow+0xe4>
 8015908:	4622      	mov	r2, r4
 801590a:	462b      	mov	r3, r5
 801590c:	4620      	mov	r0, r4
 801590e:	4629      	mov	r1, r5
 8015910:	f7eb f896 	bl	8000a40 <__aeabi_dcmpun>
 8015914:	4682      	mov	sl, r0
 8015916:	2800      	cmp	r0, #0
 8015918:	d156      	bne.n	80159c8 <pow+0xe4>
 801591a:	4642      	mov	r2, r8
 801591c:	464b      	mov	r3, r9
 801591e:	4640      	mov	r0, r8
 8015920:	4649      	mov	r1, r9
 8015922:	f7eb f88d 	bl	8000a40 <__aeabi_dcmpun>
 8015926:	9003      	str	r0, [sp, #12]
 8015928:	b1e8      	cbz	r0, 8015966 <pow+0x82>
 801592a:	2200      	movs	r2, #0
 801592c:	2300      	movs	r3, #0
 801592e:	4620      	mov	r0, r4
 8015930:	4629      	mov	r1, r5
 8015932:	f7eb f853 	bl	80009dc <__aeabi_dcmpeq>
 8015936:	2800      	cmp	r0, #0
 8015938:	d046      	beq.n	80159c8 <pow+0xe4>
 801593a:	2301      	movs	r3, #1
 801593c:	2200      	movs	r2, #0
 801593e:	9304      	str	r3, [sp, #16]
 8015940:	4b8f      	ldr	r3, [pc, #572]	; (8015b80 <pow+0x29c>)
 8015942:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8015946:	9305      	str	r3, [sp, #20]
 8015948:	4b8e      	ldr	r3, [pc, #568]	; (8015b84 <pow+0x2a0>)
 801594a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801594e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015952:	9b02      	ldr	r3, [sp, #8]
 8015954:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015958:	2b02      	cmp	r3, #2
 801595a:	d031      	beq.n	80159c0 <pow+0xdc>
 801595c:	a804      	add	r0, sp, #16
 801595e:	f003 fdeb 	bl	8019538 <matherr>
 8015962:	bb38      	cbnz	r0, 80159b4 <pow+0xd0>
 8015964:	e058      	b.n	8015a18 <pow+0x134>
 8015966:	f04f 0a00 	mov.w	sl, #0
 801596a:	f04f 0b00 	mov.w	fp, #0
 801596e:	4652      	mov	r2, sl
 8015970:	465b      	mov	r3, fp
 8015972:	4640      	mov	r0, r8
 8015974:	4649      	mov	r1, r9
 8015976:	f7eb f831 	bl	80009dc <__aeabi_dcmpeq>
 801597a:	2800      	cmp	r0, #0
 801597c:	d051      	beq.n	8015a22 <pow+0x13e>
 801597e:	4652      	mov	r2, sl
 8015980:	465b      	mov	r3, fp
 8015982:	4620      	mov	r0, r4
 8015984:	4629      	mov	r1, r5
 8015986:	f7eb f829 	bl	80009dc <__aeabi_dcmpeq>
 801598a:	4606      	mov	r6, r0
 801598c:	b308      	cbz	r0, 80159d2 <pow+0xee>
 801598e:	2301      	movs	r3, #1
 8015990:	9304      	str	r3, [sp, #16]
 8015992:	4b7b      	ldr	r3, [pc, #492]	; (8015b80 <pow+0x29c>)
 8015994:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015998:	9305      	str	r3, [sp, #20]
 801599a:	9b03      	ldr	r3, [sp, #12]
 801599c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80159a0:	930c      	str	r3, [sp, #48]	; 0x30
 80159a2:	9b02      	ldr	r3, [sp, #8]
 80159a4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d0d7      	beq.n	801595c <pow+0x78>
 80159ac:	2200      	movs	r2, #0
 80159ae:	4b75      	ldr	r3, [pc, #468]	; (8015b84 <pow+0x2a0>)
 80159b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80159b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159b6:	b11b      	cbz	r3, 80159c0 <pow+0xdc>
 80159b8:	f7fb fd42 	bl	8011440 <__errno>
 80159bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159be:	6003      	str	r3, [r0, #0]
 80159c0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80159c4:	e9cd 3400 	strd	r3, r4, [sp]
 80159c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80159cc:	b00f      	add	sp, #60	; 0x3c
 80159ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d2:	4620      	mov	r0, r4
 80159d4:	4629      	mov	r1, r5
 80159d6:	f003 fd25 	bl	8019424 <finite>
 80159da:	2800      	cmp	r0, #0
 80159dc:	d0f4      	beq.n	80159c8 <pow+0xe4>
 80159de:	4652      	mov	r2, sl
 80159e0:	465b      	mov	r3, fp
 80159e2:	4620      	mov	r0, r4
 80159e4:	4629      	mov	r1, r5
 80159e6:	f7eb f803 	bl	80009f0 <__aeabi_dcmplt>
 80159ea:	2800      	cmp	r0, #0
 80159ec:	d0ec      	beq.n	80159c8 <pow+0xe4>
 80159ee:	2301      	movs	r3, #1
 80159f0:	9304      	str	r3, [sp, #16]
 80159f2:	4b63      	ldr	r3, [pc, #396]	; (8015b80 <pow+0x29c>)
 80159f4:	960c      	str	r6, [sp, #48]	; 0x30
 80159f6:	9305      	str	r3, [sp, #20]
 80159f8:	f997 3000 	ldrsb.w	r3, [r7]
 80159fc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015a00:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015a04:	b913      	cbnz	r3, 8015a0c <pow+0x128>
 8015a06:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015a0a:	e7a7      	b.n	801595c <pow+0x78>
 8015a0c:	2000      	movs	r0, #0
 8015a0e:	495e      	ldr	r1, [pc, #376]	; (8015b88 <pow+0x2a4>)
 8015a10:	2b02      	cmp	r3, #2
 8015a12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015a16:	d1a1      	bne.n	801595c <pow+0x78>
 8015a18:	f7fb fd12 	bl	8011440 <__errno>
 8015a1c:	2321      	movs	r3, #33	; 0x21
 8015a1e:	6003      	str	r3, [r0, #0]
 8015a20:	e7c8      	b.n	80159b4 <pow+0xd0>
 8015a22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a26:	f003 fcfd 	bl	8019424 <finite>
 8015a2a:	9002      	str	r0, [sp, #8]
 8015a2c:	2800      	cmp	r0, #0
 8015a2e:	d177      	bne.n	8015b20 <pow+0x23c>
 8015a30:	4640      	mov	r0, r8
 8015a32:	4649      	mov	r1, r9
 8015a34:	f003 fcf6 	bl	8019424 <finite>
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	d071      	beq.n	8015b20 <pow+0x23c>
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	4629      	mov	r1, r5
 8015a40:	f003 fcf0 	bl	8019424 <finite>
 8015a44:	2800      	cmp	r0, #0
 8015a46:	d06b      	beq.n	8015b20 <pow+0x23c>
 8015a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a4c:	4619      	mov	r1, r3
 8015a4e:	4610      	mov	r0, r2
 8015a50:	f7ea fff6 	bl	8000a40 <__aeabi_dcmpun>
 8015a54:	f997 7000 	ldrsb.w	r7, [r7]
 8015a58:	4b49      	ldr	r3, [pc, #292]	; (8015b80 <pow+0x29c>)
 8015a5a:	b1a0      	cbz	r0, 8015a86 <pow+0x1a2>
 8015a5c:	2201      	movs	r2, #1
 8015a5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015a62:	9b02      	ldr	r3, [sp, #8]
 8015a64:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015a68:	930c      	str	r3, [sp, #48]	; 0x30
 8015a6a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015a6e:	2f00      	cmp	r7, #0
 8015a70:	d0c9      	beq.n	8015a06 <pow+0x122>
 8015a72:	4652      	mov	r2, sl
 8015a74:	465b      	mov	r3, fp
 8015a76:	4650      	mov	r0, sl
 8015a78:	4659      	mov	r1, fp
 8015a7a:	f7ea fe71 	bl	8000760 <__aeabi_ddiv>
 8015a7e:	2f02      	cmp	r7, #2
 8015a80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015a84:	e7c7      	b.n	8015a16 <pow+0x132>
 8015a86:	2203      	movs	r2, #3
 8015a88:	900c      	str	r0, [sp, #48]	; 0x30
 8015a8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015a8e:	4620      	mov	r0, r4
 8015a90:	4629      	mov	r1, r5
 8015a92:	2200      	movs	r2, #0
 8015a94:	4b3d      	ldr	r3, [pc, #244]	; (8015b8c <pow+0x2a8>)
 8015a96:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015a9a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015a9e:	f7ea fd35 	bl	800050c <__aeabi_dmul>
 8015aa2:	4604      	mov	r4, r0
 8015aa4:	460d      	mov	r5, r1
 8015aa6:	bb17      	cbnz	r7, 8015aee <pow+0x20a>
 8015aa8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015aac:	4b38      	ldr	r3, [pc, #224]	; (8015b90 <pow+0x2ac>)
 8015aae:	4640      	mov	r0, r8
 8015ab0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015ab4:	4649      	mov	r1, r9
 8015ab6:	4652      	mov	r2, sl
 8015ab8:	465b      	mov	r3, fp
 8015aba:	f7ea ff99 	bl	80009f0 <__aeabi_dcmplt>
 8015abe:	2800      	cmp	r0, #0
 8015ac0:	d054      	beq.n	8015b6c <pow+0x288>
 8015ac2:	4620      	mov	r0, r4
 8015ac4:	4629      	mov	r1, r5
 8015ac6:	f003 fd3f 	bl	8019548 <rint>
 8015aca:	4622      	mov	r2, r4
 8015acc:	462b      	mov	r3, r5
 8015ace:	f7ea ff85 	bl	80009dc <__aeabi_dcmpeq>
 8015ad2:	b920      	cbnz	r0, 8015ade <pow+0x1fa>
 8015ad4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015ad8:	4b2e      	ldr	r3, [pc, #184]	; (8015b94 <pow+0x2b0>)
 8015ada:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015ade:	f996 3000 	ldrsb.w	r3, [r6]
 8015ae2:	2b02      	cmp	r3, #2
 8015ae4:	d142      	bne.n	8015b6c <pow+0x288>
 8015ae6:	f7fb fcab 	bl	8011440 <__errno>
 8015aea:	2322      	movs	r3, #34	; 0x22
 8015aec:	e797      	b.n	8015a1e <pow+0x13a>
 8015aee:	2200      	movs	r2, #0
 8015af0:	4b29      	ldr	r3, [pc, #164]	; (8015b98 <pow+0x2b4>)
 8015af2:	4640      	mov	r0, r8
 8015af4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015af8:	4649      	mov	r1, r9
 8015afa:	4652      	mov	r2, sl
 8015afc:	465b      	mov	r3, fp
 8015afe:	f7ea ff77 	bl	80009f0 <__aeabi_dcmplt>
 8015b02:	2800      	cmp	r0, #0
 8015b04:	d0eb      	beq.n	8015ade <pow+0x1fa>
 8015b06:	4620      	mov	r0, r4
 8015b08:	4629      	mov	r1, r5
 8015b0a:	f003 fd1d 	bl	8019548 <rint>
 8015b0e:	4622      	mov	r2, r4
 8015b10:	462b      	mov	r3, r5
 8015b12:	f7ea ff63 	bl	80009dc <__aeabi_dcmpeq>
 8015b16:	2800      	cmp	r0, #0
 8015b18:	d1e1      	bne.n	8015ade <pow+0x1fa>
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	4b1a      	ldr	r3, [pc, #104]	; (8015b88 <pow+0x2a4>)
 8015b1e:	e7dc      	b.n	8015ada <pow+0x1f6>
 8015b20:	2200      	movs	r2, #0
 8015b22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b26:	2300      	movs	r3, #0
 8015b28:	f7ea ff58 	bl	80009dc <__aeabi_dcmpeq>
 8015b2c:	2800      	cmp	r0, #0
 8015b2e:	f43f af4b 	beq.w	80159c8 <pow+0xe4>
 8015b32:	4640      	mov	r0, r8
 8015b34:	4649      	mov	r1, r9
 8015b36:	f003 fc75 	bl	8019424 <finite>
 8015b3a:	2800      	cmp	r0, #0
 8015b3c:	f43f af44 	beq.w	80159c8 <pow+0xe4>
 8015b40:	4620      	mov	r0, r4
 8015b42:	4629      	mov	r1, r5
 8015b44:	f003 fc6e 	bl	8019424 <finite>
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	f43f af3d 	beq.w	80159c8 <pow+0xe4>
 8015b4e:	2304      	movs	r3, #4
 8015b50:	9304      	str	r3, [sp, #16]
 8015b52:	4b0b      	ldr	r3, [pc, #44]	; (8015b80 <pow+0x29c>)
 8015b54:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015b58:	9305      	str	r3, [sp, #20]
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	2400      	movs	r4, #0
 8015b5e:	930c      	str	r3, [sp, #48]	; 0x30
 8015b60:	2300      	movs	r3, #0
 8015b62:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015b66:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8015b6a:	e7b8      	b.n	8015ade <pow+0x1fa>
 8015b6c:	a804      	add	r0, sp, #16
 8015b6e:	f003 fce3 	bl	8019538 <matherr>
 8015b72:	2800      	cmp	r0, #0
 8015b74:	f47f af1e 	bne.w	80159b4 <pow+0xd0>
 8015b78:	e7b5      	b.n	8015ae6 <pow+0x202>
 8015b7a:	bf00      	nop
 8015b7c:	20000230 	.word	0x20000230
 8015b80:	0801a315 	.word	0x0801a315
 8015b84:	3ff00000 	.word	0x3ff00000
 8015b88:	fff00000 	.word	0xfff00000
 8015b8c:	3fe00000 	.word	0x3fe00000
 8015b90:	47efffff 	.word	0x47efffff
 8015b94:	c7efffff 	.word	0xc7efffff
 8015b98:	7ff00000 	.word	0x7ff00000

08015b9c <sqrt>:
 8015b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ba0:	b08b      	sub	sp, #44	; 0x2c
 8015ba2:	4604      	mov	r4, r0
 8015ba4:	460d      	mov	r5, r1
 8015ba6:	f001 fae3 	bl	8017170 <__ieee754_sqrt>
 8015baa:	4b24      	ldr	r3, [pc, #144]	; (8015c3c <sqrt+0xa0>)
 8015bac:	4680      	mov	r8, r0
 8015bae:	f993 a000 	ldrsb.w	sl, [r3]
 8015bb2:	4689      	mov	r9, r1
 8015bb4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8015bb8:	d02b      	beq.n	8015c12 <sqrt+0x76>
 8015bba:	4622      	mov	r2, r4
 8015bbc:	462b      	mov	r3, r5
 8015bbe:	4620      	mov	r0, r4
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	f7ea ff3d 	bl	8000a40 <__aeabi_dcmpun>
 8015bc6:	4683      	mov	fp, r0
 8015bc8:	bb18      	cbnz	r0, 8015c12 <sqrt+0x76>
 8015bca:	2600      	movs	r6, #0
 8015bcc:	2700      	movs	r7, #0
 8015bce:	4632      	mov	r2, r6
 8015bd0:	463b      	mov	r3, r7
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	4629      	mov	r1, r5
 8015bd6:	f7ea ff0b 	bl	80009f0 <__aeabi_dcmplt>
 8015bda:	b1d0      	cbz	r0, 8015c12 <sqrt+0x76>
 8015bdc:	2301      	movs	r3, #1
 8015bde:	9300      	str	r3, [sp, #0]
 8015be0:	4b17      	ldr	r3, [pc, #92]	; (8015c40 <sqrt+0xa4>)
 8015be2:	f8cd b020 	str.w	fp, [sp, #32]
 8015be6:	9301      	str	r3, [sp, #4]
 8015be8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015bec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015bf0:	f1ba 0f00 	cmp.w	sl, #0
 8015bf4:	d112      	bne.n	8015c1c <sqrt+0x80>
 8015bf6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015bfa:	4668      	mov	r0, sp
 8015bfc:	f003 fc9c 	bl	8019538 <matherr>
 8015c00:	b1b8      	cbz	r0, 8015c32 <sqrt+0x96>
 8015c02:	9b08      	ldr	r3, [sp, #32]
 8015c04:	b11b      	cbz	r3, 8015c0e <sqrt+0x72>
 8015c06:	f7fb fc1b 	bl	8011440 <__errno>
 8015c0a:	9b08      	ldr	r3, [sp, #32]
 8015c0c:	6003      	str	r3, [r0, #0]
 8015c0e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8015c12:	4640      	mov	r0, r8
 8015c14:	4649      	mov	r1, r9
 8015c16:	b00b      	add	sp, #44	; 0x2c
 8015c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c1c:	4632      	mov	r2, r6
 8015c1e:	463b      	mov	r3, r7
 8015c20:	4630      	mov	r0, r6
 8015c22:	4639      	mov	r1, r7
 8015c24:	f7ea fd9c 	bl	8000760 <__aeabi_ddiv>
 8015c28:	f1ba 0f02 	cmp.w	sl, #2
 8015c2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015c30:	d1e3      	bne.n	8015bfa <sqrt+0x5e>
 8015c32:	f7fb fc05 	bl	8011440 <__errno>
 8015c36:	2321      	movs	r3, #33	; 0x21
 8015c38:	6003      	str	r3, [r0, #0]
 8015c3a:	e7e2      	b.n	8015c02 <sqrt+0x66>
 8015c3c:	20000230 	.word	0x20000230
 8015c40:	0801a319 	.word	0x0801a319

08015c44 <asinf>:
 8015c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c46:	b08b      	sub	sp, #44	; 0x2c
 8015c48:	4604      	mov	r4, r0
 8015c4a:	f001 fb3d 	bl	80172c8 <__ieee754_asinf>
 8015c4e:	4e21      	ldr	r6, [pc, #132]	; (8015cd4 <asinf+0x90>)
 8015c50:	4605      	mov	r5, r0
 8015c52:	f996 3000 	ldrsb.w	r3, [r6]
 8015c56:	3301      	adds	r3, #1
 8015c58:	d038      	beq.n	8015ccc <asinf+0x88>
 8015c5a:	4621      	mov	r1, r4
 8015c5c:	4620      	mov	r0, r4
 8015c5e:	f7eb fa71 	bl	8001144 <__aeabi_fcmpun>
 8015c62:	4607      	mov	r7, r0
 8015c64:	2800      	cmp	r0, #0
 8015c66:	d131      	bne.n	8015ccc <asinf+0x88>
 8015c68:	4620      	mov	r0, r4
 8015c6a:	f003 fe73 	bl	8019954 <fabsf>
 8015c6e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015c72:	f7eb fa5d 	bl	8001130 <__aeabi_fcmpgt>
 8015c76:	b348      	cbz	r0, 8015ccc <asinf+0x88>
 8015c78:	2301      	movs	r3, #1
 8015c7a:	9300      	str	r3, [sp, #0]
 8015c7c:	4b16      	ldr	r3, [pc, #88]	; (8015cd8 <asinf+0x94>)
 8015c7e:	4620      	mov	r0, r4
 8015c80:	9301      	str	r3, [sp, #4]
 8015c82:	9708      	str	r7, [sp, #32]
 8015c84:	f7ea fbea 	bl	800045c <__aeabi_f2d>
 8015c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c90:	4812      	ldr	r0, [pc, #72]	; (8015cdc <asinf+0x98>)
 8015c92:	f003 fc53 	bl	801953c <nan>
 8015c96:	f996 3000 	ldrsb.w	r3, [r6]
 8015c9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015c9e:	2b02      	cmp	r3, #2
 8015ca0:	d104      	bne.n	8015cac <asinf+0x68>
 8015ca2:	f7fb fbcd 	bl	8011440 <__errno>
 8015ca6:	2321      	movs	r3, #33	; 0x21
 8015ca8:	6003      	str	r3, [r0, #0]
 8015caa:	e004      	b.n	8015cb6 <asinf+0x72>
 8015cac:	4668      	mov	r0, sp
 8015cae:	f003 fc43 	bl	8019538 <matherr>
 8015cb2:	2800      	cmp	r0, #0
 8015cb4:	d0f5      	beq.n	8015ca2 <asinf+0x5e>
 8015cb6:	9b08      	ldr	r3, [sp, #32]
 8015cb8:	b11b      	cbz	r3, 8015cc2 <asinf+0x7e>
 8015cba:	f7fb fbc1 	bl	8011440 <__errno>
 8015cbe:	9b08      	ldr	r3, [sp, #32]
 8015cc0:	6003      	str	r3, [r0, #0]
 8015cc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015cc6:	f7ea ff19 	bl	8000afc <__aeabi_d2f>
 8015cca:	4605      	mov	r5, r0
 8015ccc:	4628      	mov	r0, r5
 8015cce:	b00b      	add	sp, #44	; 0x2c
 8015cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cd2:	bf00      	nop
 8015cd4:	20000230 	.word	0x20000230
 8015cd8:	0801a31e 	.word	0x0801a31e
 8015cdc:	0801a2f9 	.word	0x0801a2f9

08015ce0 <atan2f>:
 8015ce0:	f001 bc34 	b.w	801754c <__ieee754_atan2f>

08015ce4 <powf>:
 8015ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce8:	b08d      	sub	sp, #52	; 0x34
 8015cea:	4605      	mov	r5, r0
 8015cec:	460c      	mov	r4, r1
 8015cee:	f001 fcbd 	bl	801766c <__ieee754_powf>
 8015cf2:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8015fa0 <powf+0x2bc>
 8015cf6:	4606      	mov	r6, r0
 8015cf8:	f998 9000 	ldrsb.w	r9, [r8]
 8015cfc:	4647      	mov	r7, r8
 8015cfe:	f1b9 3fff 	cmp.w	r9, #4294967295
 8015d02:	d060      	beq.n	8015dc6 <powf+0xe2>
 8015d04:	4621      	mov	r1, r4
 8015d06:	4620      	mov	r0, r4
 8015d08:	f7eb fa1c 	bl	8001144 <__aeabi_fcmpun>
 8015d0c:	4683      	mov	fp, r0
 8015d0e:	2800      	cmp	r0, #0
 8015d10:	d159      	bne.n	8015dc6 <powf+0xe2>
 8015d12:	4629      	mov	r1, r5
 8015d14:	4628      	mov	r0, r5
 8015d16:	f7eb fa15 	bl	8001144 <__aeabi_fcmpun>
 8015d1a:	2100      	movs	r1, #0
 8015d1c:	4682      	mov	sl, r0
 8015d1e:	b300      	cbz	r0, 8015d62 <powf+0x7e>
 8015d20:	4620      	mov	r0, r4
 8015d22:	f7eb f9dd 	bl	80010e0 <__aeabi_fcmpeq>
 8015d26:	2800      	cmp	r0, #0
 8015d28:	d04d      	beq.n	8015dc6 <powf+0xe2>
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	9302      	str	r3, [sp, #8]
 8015d2e:	4b96      	ldr	r3, [pc, #600]	; (8015f88 <powf+0x2a4>)
 8015d30:	4628      	mov	r0, r5
 8015d32:	9303      	str	r3, [sp, #12]
 8015d34:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015d38:	f7ea fb90 	bl	800045c <__aeabi_f2d>
 8015d3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d40:	4620      	mov	r0, r4
 8015d42:	f7ea fb8b 	bl	800045c <__aeabi_f2d>
 8015d46:	2200      	movs	r2, #0
 8015d48:	4b90      	ldr	r3, [pc, #576]	; (8015f8c <powf+0x2a8>)
 8015d4a:	f1b9 0f02 	cmp.w	r9, #2
 8015d4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015d52:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015d56:	d031      	beq.n	8015dbc <powf+0xd8>
 8015d58:	a802      	add	r0, sp, #8
 8015d5a:	f003 fbed 	bl	8019538 <matherr>
 8015d5e:	bb38      	cbnz	r0, 8015db0 <powf+0xcc>
 8015d60:	e05d      	b.n	8015e1e <powf+0x13a>
 8015d62:	4628      	mov	r0, r5
 8015d64:	f7eb f9bc 	bl	80010e0 <__aeabi_fcmpeq>
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	d05d      	beq.n	8015e28 <powf+0x144>
 8015d6c:	2100      	movs	r1, #0
 8015d6e:	4620      	mov	r0, r4
 8015d70:	f7eb f9b6 	bl	80010e0 <__aeabi_fcmpeq>
 8015d74:	4607      	mov	r7, r0
 8015d76:	2800      	cmp	r0, #0
 8015d78:	d029      	beq.n	8015dce <powf+0xea>
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	9302      	str	r3, [sp, #8]
 8015d7e:	4b82      	ldr	r3, [pc, #520]	; (8015f88 <powf+0x2a4>)
 8015d80:	4628      	mov	r0, r5
 8015d82:	9303      	str	r3, [sp, #12]
 8015d84:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8015d88:	f7ea fb68 	bl	800045c <__aeabi_f2d>
 8015d8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d90:	4620      	mov	r0, r4
 8015d92:	f7ea fb63 	bl	800045c <__aeabi_f2d>
 8015d96:	2200      	movs	r2, #0
 8015d98:	2300      	movs	r3, #0
 8015d9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015d9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015da2:	f1b9 0f00 	cmp.w	r9, #0
 8015da6:	d0d7      	beq.n	8015d58 <powf+0x74>
 8015da8:	2200      	movs	r2, #0
 8015daa:	4b78      	ldr	r3, [pc, #480]	; (8015f8c <powf+0x2a8>)
 8015dac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015db2:	b11b      	cbz	r3, 8015dbc <powf+0xd8>
 8015db4:	f7fb fb44 	bl	8011440 <__errno>
 8015db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dba:	6003      	str	r3, [r0, #0]
 8015dbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015dc0:	f7ea fe9c 	bl	8000afc <__aeabi_d2f>
 8015dc4:	4606      	mov	r6, r0
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	b00d      	add	sp, #52	; 0x34
 8015dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dce:	4620      	mov	r0, r4
 8015dd0:	f003 fdc3 	bl	801995a <finitef>
 8015dd4:	2800      	cmp	r0, #0
 8015dd6:	d0f6      	beq.n	8015dc6 <powf+0xe2>
 8015dd8:	2100      	movs	r1, #0
 8015dda:	4620      	mov	r0, r4
 8015ddc:	f7eb f98a 	bl	80010f4 <__aeabi_fcmplt>
 8015de0:	2800      	cmp	r0, #0
 8015de2:	d0f0      	beq.n	8015dc6 <powf+0xe2>
 8015de4:	2301      	movs	r3, #1
 8015de6:	9302      	str	r3, [sp, #8]
 8015de8:	4b67      	ldr	r3, [pc, #412]	; (8015f88 <powf+0x2a4>)
 8015dea:	4628      	mov	r0, r5
 8015dec:	9303      	str	r3, [sp, #12]
 8015dee:	970a      	str	r7, [sp, #40]	; 0x28
 8015df0:	f7ea fb34 	bl	800045c <__aeabi_f2d>
 8015df4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015df8:	4620      	mov	r0, r4
 8015dfa:	f7ea fb2f 	bl	800045c <__aeabi_f2d>
 8015dfe:	f998 3000 	ldrsb.w	r3, [r8]
 8015e02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015e06:	b923      	cbnz	r3, 8015e12 <powf+0x12e>
 8015e08:	2200      	movs	r2, #0
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015e10:	e7a2      	b.n	8015d58 <powf+0x74>
 8015e12:	2000      	movs	r0, #0
 8015e14:	495e      	ldr	r1, [pc, #376]	; (8015f90 <powf+0x2ac>)
 8015e16:	2b02      	cmp	r3, #2
 8015e18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015e1c:	d19c      	bne.n	8015d58 <powf+0x74>
 8015e1e:	f7fb fb0f 	bl	8011440 <__errno>
 8015e22:	2321      	movs	r3, #33	; 0x21
 8015e24:	6003      	str	r3, [r0, #0]
 8015e26:	e7c3      	b.n	8015db0 <powf+0xcc>
 8015e28:	4630      	mov	r0, r6
 8015e2a:	f003 fd96 	bl	801995a <finitef>
 8015e2e:	4681      	mov	r9, r0
 8015e30:	2800      	cmp	r0, #0
 8015e32:	d17b      	bne.n	8015f2c <powf+0x248>
 8015e34:	4628      	mov	r0, r5
 8015e36:	f003 fd90 	bl	801995a <finitef>
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	d076      	beq.n	8015f2c <powf+0x248>
 8015e3e:	4620      	mov	r0, r4
 8015e40:	f003 fd8b 	bl	801995a <finitef>
 8015e44:	2800      	cmp	r0, #0
 8015e46:	d071      	beq.n	8015f2c <powf+0x248>
 8015e48:	4628      	mov	r0, r5
 8015e4a:	f7ea fb07 	bl	800045c <__aeabi_f2d>
 8015e4e:	4682      	mov	sl, r0
 8015e50:	4620      	mov	r0, r4
 8015e52:	468b      	mov	fp, r1
 8015e54:	f7ea fb02 	bl	800045c <__aeabi_f2d>
 8015e58:	4602      	mov	r2, r0
 8015e5a:	460b      	mov	r3, r1
 8015e5c:	4630      	mov	r0, r6
 8015e5e:	4631      	mov	r1, r6
 8015e60:	e9cd 2300 	strd	r2, r3, [sp]
 8015e64:	f7eb f96e 	bl	8001144 <__aeabi_fcmpun>
 8015e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e6c:	f998 8000 	ldrsb.w	r8, [r8]
 8015e70:	4945      	ldr	r1, [pc, #276]	; (8015f88 <powf+0x2a4>)
 8015e72:	b1b0      	cbz	r0, 8015ea2 <powf+0x1be>
 8015e74:	2001      	movs	r0, #1
 8015e76:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8015e7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015e7e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015e82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015e86:	f1b8 0f00 	cmp.w	r8, #0
 8015e8a:	d0bd      	beq.n	8015e08 <powf+0x124>
 8015e8c:	2100      	movs	r1, #0
 8015e8e:	4608      	mov	r0, r1
 8015e90:	f7eb f846 	bl	8000f20 <__aeabi_fdiv>
 8015e94:	f7ea fae2 	bl	800045c <__aeabi_f2d>
 8015e98:	f1b8 0f02 	cmp.w	r8, #2
 8015e9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015ea0:	e7bc      	b.n	8015e1c <powf+0x138>
 8015ea2:	2603      	movs	r6, #3
 8015ea4:	900a      	str	r0, [sp, #40]	; 0x28
 8015ea6:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8015eaa:	4620      	mov	r0, r4
 8015eac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015eb0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015eb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015eb8:	f7ea ff7e 	bl	8000db8 <__aeabi_fmul>
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	f1b8 0f00 	cmp.w	r8, #0
 8015ec2:	d11e      	bne.n	8015f02 <powf+0x21e>
 8015ec4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015ec8:	4b32      	ldr	r3, [pc, #200]	; (8015f94 <powf+0x2b0>)
 8015eca:	2100      	movs	r1, #0
 8015ecc:	4628      	mov	r0, r5
 8015ece:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015ed2:	f7eb f90f 	bl	80010f4 <__aeabi_fcmplt>
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	d04e      	beq.n	8015f78 <powf+0x294>
 8015eda:	4620      	mov	r0, r4
 8015edc:	f003 fd86 	bl	80199ec <rintf>
 8015ee0:	4621      	mov	r1, r4
 8015ee2:	f7eb f8fd 	bl	80010e0 <__aeabi_fcmpeq>
 8015ee6:	b920      	cbnz	r0, 8015ef2 <powf+0x20e>
 8015ee8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015eec:	4b2a      	ldr	r3, [pc, #168]	; (8015f98 <powf+0x2b4>)
 8015eee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015ef2:	f997 3000 	ldrsb.w	r3, [r7]
 8015ef6:	2b02      	cmp	r3, #2
 8015ef8:	d13e      	bne.n	8015f78 <powf+0x294>
 8015efa:	f7fb faa1 	bl	8011440 <__errno>
 8015efe:	2322      	movs	r3, #34	; 0x22
 8015f00:	e790      	b.n	8015e24 <powf+0x140>
 8015f02:	2200      	movs	r2, #0
 8015f04:	4b25      	ldr	r3, [pc, #148]	; (8015f9c <powf+0x2b8>)
 8015f06:	2100      	movs	r1, #0
 8015f08:	4628      	mov	r0, r5
 8015f0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015f0e:	f7eb f8f1 	bl	80010f4 <__aeabi_fcmplt>
 8015f12:	2800      	cmp	r0, #0
 8015f14:	d0ed      	beq.n	8015ef2 <powf+0x20e>
 8015f16:	4620      	mov	r0, r4
 8015f18:	f003 fd68 	bl	80199ec <rintf>
 8015f1c:	4621      	mov	r1, r4
 8015f1e:	f7eb f8df 	bl	80010e0 <__aeabi_fcmpeq>
 8015f22:	2800      	cmp	r0, #0
 8015f24:	d1e5      	bne.n	8015ef2 <powf+0x20e>
 8015f26:	2200      	movs	r2, #0
 8015f28:	4b19      	ldr	r3, [pc, #100]	; (8015f90 <powf+0x2ac>)
 8015f2a:	e7e0      	b.n	8015eee <powf+0x20a>
 8015f2c:	2100      	movs	r1, #0
 8015f2e:	4630      	mov	r0, r6
 8015f30:	f7eb f8d6 	bl	80010e0 <__aeabi_fcmpeq>
 8015f34:	2800      	cmp	r0, #0
 8015f36:	f43f af46 	beq.w	8015dc6 <powf+0xe2>
 8015f3a:	4628      	mov	r0, r5
 8015f3c:	f003 fd0d 	bl	801995a <finitef>
 8015f40:	2800      	cmp	r0, #0
 8015f42:	f43f af40 	beq.w	8015dc6 <powf+0xe2>
 8015f46:	4620      	mov	r0, r4
 8015f48:	f003 fd07 	bl	801995a <finitef>
 8015f4c:	2800      	cmp	r0, #0
 8015f4e:	f43f af3a 	beq.w	8015dc6 <powf+0xe2>
 8015f52:	2304      	movs	r3, #4
 8015f54:	9302      	str	r3, [sp, #8]
 8015f56:	4b0c      	ldr	r3, [pc, #48]	; (8015f88 <powf+0x2a4>)
 8015f58:	4628      	mov	r0, r5
 8015f5a:	9303      	str	r3, [sp, #12]
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8015f60:	f7ea fa7c 	bl	800045c <__aeabi_f2d>
 8015f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015f68:	4620      	mov	r0, r4
 8015f6a:	f7ea fa77 	bl	800045c <__aeabi_f2d>
 8015f6e:	2200      	movs	r2, #0
 8015f70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015f74:	2300      	movs	r3, #0
 8015f76:	e7ba      	b.n	8015eee <powf+0x20a>
 8015f78:	a802      	add	r0, sp, #8
 8015f7a:	f003 fadd 	bl	8019538 <matherr>
 8015f7e:	2800      	cmp	r0, #0
 8015f80:	f47f af16 	bne.w	8015db0 <powf+0xcc>
 8015f84:	e7b9      	b.n	8015efa <powf+0x216>
 8015f86:	bf00      	nop
 8015f88:	0801a324 	.word	0x0801a324
 8015f8c:	3ff00000 	.word	0x3ff00000
 8015f90:	fff00000 	.word	0xfff00000
 8015f94:	47efffff 	.word	0x47efffff
 8015f98:	c7efffff 	.word	0xc7efffff
 8015f9c:	7ff00000 	.word	0x7ff00000
 8015fa0:	20000230 	.word	0x20000230
 8015fa4:	00000000 	.word	0x00000000

08015fa8 <__ieee754_atan2>:
 8015fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fac:	4256      	negs	r6, r2
 8015fae:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8015fb2:	4316      	orrs	r6, r2
 8015fb4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8016160 <__ieee754_atan2+0x1b8>
 8015fb8:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8015fbc:	454e      	cmp	r6, r9
 8015fbe:	4604      	mov	r4, r0
 8015fc0:	460d      	mov	r5, r1
 8015fc2:	469e      	mov	lr, r3
 8015fc4:	d808      	bhi.n	8015fd8 <__ieee754_atan2+0x30>
 8015fc6:	4246      	negs	r6, r0
 8015fc8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8015fcc:	4306      	orrs	r6, r0
 8015fce:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8015fd2:	454e      	cmp	r6, r9
 8015fd4:	4688      	mov	r8, r1
 8015fd6:	d906      	bls.n	8015fe6 <__ieee754_atan2+0x3e>
 8015fd8:	4620      	mov	r0, r4
 8015fda:	4629      	mov	r1, r5
 8015fdc:	f7ea f8e0 	bl	80001a0 <__adddf3>
 8015fe0:	4604      	mov	r4, r0
 8015fe2:	460d      	mov	r5, r1
 8015fe4:	e030      	b.n	8016048 <__ieee754_atan2+0xa0>
 8015fe6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8015fea:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8015fee:	4316      	orrs	r6, r2
 8015ff0:	d103      	bne.n	8015ffa <__ieee754_atan2+0x52>
 8015ff2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff6:	f003 b887 	b.w	8019108 <atan>
 8015ffa:	179e      	asrs	r6, r3, #30
 8015ffc:	f006 0602 	and.w	r6, r6, #2
 8016000:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8016004:	ea57 0100 	orrs.w	r1, r7, r0
 8016008:	d107      	bne.n	801601a <__ieee754_atan2+0x72>
 801600a:	2e02      	cmp	r6, #2
 801600c:	d079      	beq.n	8016102 <__ieee754_atan2+0x15a>
 801600e:	2e03      	cmp	r6, #3
 8016010:	d11a      	bne.n	8016048 <__ieee754_atan2+0xa0>
 8016012:	a541      	add	r5, pc, #260	; (adr r5, 8016118 <__ieee754_atan2+0x170>)
 8016014:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016018:	e016      	b.n	8016048 <__ieee754_atan2+0xa0>
 801601a:	ea5c 0102 	orrs.w	r1, ip, r2
 801601e:	d106      	bne.n	801602e <__ieee754_atan2+0x86>
 8016020:	f1b8 0f00 	cmp.w	r8, #0
 8016024:	da71      	bge.n	801610a <__ieee754_atan2+0x162>
 8016026:	a53e      	add	r5, pc, #248	; (adr r5, 8016120 <__ieee754_atan2+0x178>)
 8016028:	e9d5 4500 	ldrd	r4, r5, [r5]
 801602c:	e00c      	b.n	8016048 <__ieee754_atan2+0xa0>
 801602e:	45cc      	cmp	ip, r9
 8016030:	d123      	bne.n	801607a <__ieee754_atan2+0xd2>
 8016032:	4567      	cmp	r7, ip
 8016034:	d114      	bne.n	8016060 <__ieee754_atan2+0xb8>
 8016036:	2e02      	cmp	r6, #2
 8016038:	d00a      	beq.n	8016050 <__ieee754_atan2+0xa8>
 801603a:	2e03      	cmp	r6, #3
 801603c:	d00c      	beq.n	8016058 <__ieee754_atan2+0xb0>
 801603e:	2e01      	cmp	r6, #1
 8016040:	d15b      	bne.n	80160fa <__ieee754_atan2+0x152>
 8016042:	a539      	add	r5, pc, #228	; (adr r5, 8016128 <__ieee754_atan2+0x180>)
 8016044:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016048:	4620      	mov	r0, r4
 801604a:	4629      	mov	r1, r5
 801604c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016050:	a537      	add	r5, pc, #220	; (adr r5, 8016130 <__ieee754_atan2+0x188>)
 8016052:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016056:	e7f7      	b.n	8016048 <__ieee754_atan2+0xa0>
 8016058:	a537      	add	r5, pc, #220	; (adr r5, 8016138 <__ieee754_atan2+0x190>)
 801605a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801605e:	e7f3      	b.n	8016048 <__ieee754_atan2+0xa0>
 8016060:	2e02      	cmp	r6, #2
 8016062:	d04e      	beq.n	8016102 <__ieee754_atan2+0x15a>
 8016064:	2e03      	cmp	r6, #3
 8016066:	d0d4      	beq.n	8016012 <__ieee754_atan2+0x6a>
 8016068:	2e01      	cmp	r6, #1
 801606a:	f04f 0400 	mov.w	r4, #0
 801606e:	d102      	bne.n	8016076 <__ieee754_atan2+0xce>
 8016070:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8016074:	e7e8      	b.n	8016048 <__ieee754_atan2+0xa0>
 8016076:	2500      	movs	r5, #0
 8016078:	e7e6      	b.n	8016048 <__ieee754_atan2+0xa0>
 801607a:	454f      	cmp	r7, r9
 801607c:	d0d0      	beq.n	8016020 <__ieee754_atan2+0x78>
 801607e:	eba7 070c 	sub.w	r7, r7, ip
 8016082:	153f      	asrs	r7, r7, #20
 8016084:	2f3c      	cmp	r7, #60	; 0x3c
 8016086:	dc1e      	bgt.n	80160c6 <__ieee754_atan2+0x11e>
 8016088:	2b00      	cmp	r3, #0
 801608a:	da01      	bge.n	8016090 <__ieee754_atan2+0xe8>
 801608c:	373c      	adds	r7, #60	; 0x3c
 801608e:	db1e      	blt.n	80160ce <__ieee754_atan2+0x126>
 8016090:	4620      	mov	r0, r4
 8016092:	4629      	mov	r1, r5
 8016094:	f7ea fb64 	bl	8000760 <__aeabi_ddiv>
 8016098:	f003 f9c0 	bl	801941c <fabs>
 801609c:	f003 f834 	bl	8019108 <atan>
 80160a0:	4604      	mov	r4, r0
 80160a2:	460d      	mov	r5, r1
 80160a4:	2e01      	cmp	r6, #1
 80160a6:	d015      	beq.n	80160d4 <__ieee754_atan2+0x12c>
 80160a8:	2e02      	cmp	r6, #2
 80160aa:	d017      	beq.n	80160dc <__ieee754_atan2+0x134>
 80160ac:	2e00      	cmp	r6, #0
 80160ae:	d0cb      	beq.n	8016048 <__ieee754_atan2+0xa0>
 80160b0:	a323      	add	r3, pc, #140	; (adr r3, 8016140 <__ieee754_atan2+0x198>)
 80160b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160b6:	4620      	mov	r0, r4
 80160b8:	4629      	mov	r1, r5
 80160ba:	f7ea f86f 	bl	800019c <__aeabi_dsub>
 80160be:	a322      	add	r3, pc, #136	; (adr r3, 8016148 <__ieee754_atan2+0x1a0>)
 80160c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c4:	e016      	b.n	80160f4 <__ieee754_atan2+0x14c>
 80160c6:	a522      	add	r5, pc, #136	; (adr r5, 8016150 <__ieee754_atan2+0x1a8>)
 80160c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80160cc:	e7ea      	b.n	80160a4 <__ieee754_atan2+0xfc>
 80160ce:	2400      	movs	r4, #0
 80160d0:	2500      	movs	r5, #0
 80160d2:	e7e7      	b.n	80160a4 <__ieee754_atan2+0xfc>
 80160d4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80160d8:	461d      	mov	r5, r3
 80160da:	e7b5      	b.n	8016048 <__ieee754_atan2+0xa0>
 80160dc:	a318      	add	r3, pc, #96	; (adr r3, 8016140 <__ieee754_atan2+0x198>)
 80160de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e2:	4620      	mov	r0, r4
 80160e4:	4629      	mov	r1, r5
 80160e6:	f7ea f859 	bl	800019c <__aeabi_dsub>
 80160ea:	4602      	mov	r2, r0
 80160ec:	460b      	mov	r3, r1
 80160ee:	a116      	add	r1, pc, #88	; (adr r1, 8016148 <__ieee754_atan2+0x1a0>)
 80160f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160f4:	f7ea f852 	bl	800019c <__aeabi_dsub>
 80160f8:	e772      	b.n	8015fe0 <__ieee754_atan2+0x38>
 80160fa:	a517      	add	r5, pc, #92	; (adr r5, 8016158 <__ieee754_atan2+0x1b0>)
 80160fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016100:	e7a2      	b.n	8016048 <__ieee754_atan2+0xa0>
 8016102:	a511      	add	r5, pc, #68	; (adr r5, 8016148 <__ieee754_atan2+0x1a0>)
 8016104:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016108:	e79e      	b.n	8016048 <__ieee754_atan2+0xa0>
 801610a:	a511      	add	r5, pc, #68	; (adr r5, 8016150 <__ieee754_atan2+0x1a8>)
 801610c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016110:	e79a      	b.n	8016048 <__ieee754_atan2+0xa0>
 8016112:	bf00      	nop
 8016114:	f3af 8000 	nop.w
 8016118:	54442d18 	.word	0x54442d18
 801611c:	c00921fb 	.word	0xc00921fb
 8016120:	54442d18 	.word	0x54442d18
 8016124:	bff921fb 	.word	0xbff921fb
 8016128:	54442d18 	.word	0x54442d18
 801612c:	bfe921fb 	.word	0xbfe921fb
 8016130:	7f3321d2 	.word	0x7f3321d2
 8016134:	4002d97c 	.word	0x4002d97c
 8016138:	7f3321d2 	.word	0x7f3321d2
 801613c:	c002d97c 	.word	0xc002d97c
 8016140:	33145c07 	.word	0x33145c07
 8016144:	3ca1a626 	.word	0x3ca1a626
 8016148:	54442d18 	.word	0x54442d18
 801614c:	400921fb 	.word	0x400921fb
 8016150:	54442d18 	.word	0x54442d18
 8016154:	3ff921fb 	.word	0x3ff921fb
 8016158:	54442d18 	.word	0x54442d18
 801615c:	3fe921fb 	.word	0x3fe921fb
 8016160:	7ff00000 	.word	0x7ff00000

08016164 <__ieee754_fmod>:
 8016164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016168:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801616c:	4682      	mov	sl, r0
 801616e:	ea54 0002 	orrs.w	r0, r4, r2
 8016172:	461e      	mov	r6, r3
 8016174:	4694      	mov	ip, r2
 8016176:	4696      	mov	lr, r2
 8016178:	d00c      	beq.n	8016194 <__ieee754_fmod+0x30>
 801617a:	4d78      	ldr	r5, [pc, #480]	; (801635c <__ieee754_fmod+0x1f8>)
 801617c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8016180:	45a8      	cmp	r8, r5
 8016182:	4689      	mov	r9, r1
 8016184:	dc06      	bgt.n	8016194 <__ieee754_fmod+0x30>
 8016186:	4255      	negs	r5, r2
 8016188:	4315      	orrs	r5, r2
 801618a:	4f75      	ldr	r7, [pc, #468]	; (8016360 <__ieee754_fmod+0x1fc>)
 801618c:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 8016190:	42bd      	cmp	r5, r7
 8016192:	d908      	bls.n	80161a6 <__ieee754_fmod+0x42>
 8016194:	4650      	mov	r0, sl
 8016196:	f7ea f9b9 	bl	800050c <__aeabi_dmul>
 801619a:	4602      	mov	r2, r0
 801619c:	460b      	mov	r3, r1
 801619e:	f7ea fadf 	bl	8000760 <__aeabi_ddiv>
 80161a2:	4682      	mov	sl, r0
 80161a4:	e00f      	b.n	80161c6 <__ieee754_fmod+0x62>
 80161a6:	45a0      	cmp	r8, r4
 80161a8:	4652      	mov	r2, sl
 80161aa:	4657      	mov	r7, sl
 80161ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80161b0:	dc0c      	bgt.n	80161cc <__ieee754_fmod+0x68>
 80161b2:	db08      	blt.n	80161c6 <__ieee754_fmod+0x62>
 80161b4:	45e2      	cmp	sl, ip
 80161b6:	d306      	bcc.n	80161c6 <__ieee754_fmod+0x62>
 80161b8:	d108      	bne.n	80161cc <__ieee754_fmod+0x68>
 80161ba:	496a      	ldr	r1, [pc, #424]	; (8016364 <__ieee754_fmod+0x200>)
 80161bc:	0fed      	lsrs	r5, r5, #31
 80161be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80161c2:	e9d5 a100 	ldrd	sl, r1, [r5]
 80161c6:	4650      	mov	r0, sl
 80161c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161cc:	4b66      	ldr	r3, [pc, #408]	; (8016368 <__ieee754_fmod+0x204>)
 80161ce:	4598      	cmp	r8, r3
 80161d0:	dc48      	bgt.n	8016264 <__ieee754_fmod+0x100>
 80161d2:	f1b8 0f00 	cmp.w	r8, #0
 80161d6:	d13c      	bne.n	8016252 <__ieee754_fmod+0xee>
 80161d8:	4611      	mov	r1, r2
 80161da:	4864      	ldr	r0, [pc, #400]	; (801636c <__ieee754_fmod+0x208>)
 80161dc:	2900      	cmp	r1, #0
 80161de:	dc35      	bgt.n	801624c <__ieee754_fmod+0xe8>
 80161e0:	429c      	cmp	r4, r3
 80161e2:	dc4f      	bgt.n	8016284 <__ieee754_fmod+0x120>
 80161e4:	2c00      	cmp	r4, #0
 80161e6:	d145      	bne.n	8016274 <__ieee754_fmod+0x110>
 80161e8:	4661      	mov	r1, ip
 80161ea:	4b60      	ldr	r3, [pc, #384]	; (801636c <__ieee754_fmod+0x208>)
 80161ec:	2900      	cmp	r1, #0
 80161ee:	dc3e      	bgt.n	801626e <__ieee754_fmod+0x10a>
 80161f0:	495f      	ldr	r1, [pc, #380]	; (8016370 <__ieee754_fmod+0x20c>)
 80161f2:	4288      	cmp	r0, r1
 80161f4:	db4a      	blt.n	801628c <__ieee754_fmod+0x128>
 80161f6:	f3c9 0113 	ubfx	r1, r9, #0, #20
 80161fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80161fe:	4a5c      	ldr	r2, [pc, #368]	; (8016370 <__ieee754_fmod+0x20c>)
 8016200:	4293      	cmp	r3, r2
 8016202:	db57      	blt.n	80162b4 <__ieee754_fmod+0x150>
 8016204:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8016208:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801620c:	1ac0      	subs	r0, r0, r3
 801620e:	1b8a      	subs	r2, r1, r6
 8016210:	eba7 040e 	sub.w	r4, r7, lr
 8016214:	2800      	cmp	r0, #0
 8016216:	d163      	bne.n	80162e0 <__ieee754_fmod+0x17c>
 8016218:	4577      	cmp	r7, lr
 801621a:	bf38      	it	cc
 801621c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8016220:	2a00      	cmp	r2, #0
 8016222:	bfbc      	itt	lt
 8016224:	463c      	movlt	r4, r7
 8016226:	460a      	movlt	r2, r1
 8016228:	ea52 0104 	orrs.w	r1, r2, r4
 801622c:	d0c5      	beq.n	80161ba <__ieee754_fmod+0x56>
 801622e:	494e      	ldr	r1, [pc, #312]	; (8016368 <__ieee754_fmod+0x204>)
 8016230:	428a      	cmp	r2, r1
 8016232:	dd6a      	ble.n	801630a <__ieee754_fmod+0x1a6>
 8016234:	494e      	ldr	r1, [pc, #312]	; (8016370 <__ieee754_fmod+0x20c>)
 8016236:	428b      	cmp	r3, r1
 8016238:	db6d      	blt.n	8016316 <__ieee754_fmod+0x1b2>
 801623a:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 801623e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8016242:	4315      	orrs	r5, r2
 8016244:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8016248:	4620      	mov	r0, r4
 801624a:	e7aa      	b.n	80161a2 <__ieee754_fmod+0x3e>
 801624c:	3801      	subs	r0, #1
 801624e:	0049      	lsls	r1, r1, #1
 8016250:	e7c4      	b.n	80161dc <__ieee754_fmod+0x78>
 8016252:	4847      	ldr	r0, [pc, #284]	; (8016370 <__ieee754_fmod+0x20c>)
 8016254:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8016258:	0049      	lsls	r1, r1, #1
 801625a:	2900      	cmp	r1, #0
 801625c:	f100 30ff 	add.w	r0, r0, #4294967295
 8016260:	dcfa      	bgt.n	8016258 <__ieee754_fmod+0xf4>
 8016262:	e7bd      	b.n	80161e0 <__ieee754_fmod+0x7c>
 8016264:	ea4f 5028 	mov.w	r0, r8, asr #20
 8016268:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801626c:	e7b8      	b.n	80161e0 <__ieee754_fmod+0x7c>
 801626e:	3b01      	subs	r3, #1
 8016270:	0049      	lsls	r1, r1, #1
 8016272:	e7bb      	b.n	80161ec <__ieee754_fmod+0x88>
 8016274:	4b3e      	ldr	r3, [pc, #248]	; (8016370 <__ieee754_fmod+0x20c>)
 8016276:	02e1      	lsls	r1, r4, #11
 8016278:	0049      	lsls	r1, r1, #1
 801627a:	2900      	cmp	r1, #0
 801627c:	f103 33ff 	add.w	r3, r3, #4294967295
 8016280:	dcfa      	bgt.n	8016278 <__ieee754_fmod+0x114>
 8016282:	e7b5      	b.n	80161f0 <__ieee754_fmod+0x8c>
 8016284:	1523      	asrs	r3, r4, #20
 8016286:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801628a:	e7b1      	b.n	80161f0 <__ieee754_fmod+0x8c>
 801628c:	1a0f      	subs	r7, r1, r0
 801628e:	2f1f      	cmp	r7, #31
 8016290:	dc0a      	bgt.n	80162a8 <__ieee754_fmod+0x144>
 8016292:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8016296:	fa08 f807 	lsl.w	r8, r8, r7
 801629a:	fa22 f101 	lsr.w	r1, r2, r1
 801629e:	ea41 0108 	orr.w	r1, r1, r8
 80162a2:	fa02 f707 	lsl.w	r7, r2, r7
 80162a6:	e7aa      	b.n	80161fe <__ieee754_fmod+0x9a>
 80162a8:	4932      	ldr	r1, [pc, #200]	; (8016374 <__ieee754_fmod+0x210>)
 80162aa:	2700      	movs	r7, #0
 80162ac:	1a09      	subs	r1, r1, r0
 80162ae:	fa02 f101 	lsl.w	r1, r2, r1
 80162b2:	e7a4      	b.n	80161fe <__ieee754_fmod+0x9a>
 80162b4:	eba2 0e03 	sub.w	lr, r2, r3
 80162b8:	f1be 0f1f 	cmp.w	lr, #31
 80162bc:	dc09      	bgt.n	80162d2 <__ieee754_fmod+0x16e>
 80162be:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 80162c2:	fa04 f40e 	lsl.w	r4, r4, lr
 80162c6:	fa2c f606 	lsr.w	r6, ip, r6
 80162ca:	4326      	orrs	r6, r4
 80162cc:	fa0c fe0e 	lsl.w	lr, ip, lr
 80162d0:	e79c      	b.n	801620c <__ieee754_fmod+0xa8>
 80162d2:	4e28      	ldr	r6, [pc, #160]	; (8016374 <__ieee754_fmod+0x210>)
 80162d4:	f04f 0e00 	mov.w	lr, #0
 80162d8:	1af6      	subs	r6, r6, r3
 80162da:	fa0c f606 	lsl.w	r6, ip, r6
 80162de:	e795      	b.n	801620c <__ieee754_fmod+0xa8>
 80162e0:	4577      	cmp	r7, lr
 80162e2:	bf38      	it	cc
 80162e4:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80162e8:	2a00      	cmp	r2, #0
 80162ea:	da05      	bge.n	80162f8 <__ieee754_fmod+0x194>
 80162ec:	0ffa      	lsrs	r2, r7, #31
 80162ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80162f2:	007f      	lsls	r7, r7, #1
 80162f4:	3801      	subs	r0, #1
 80162f6:	e78a      	b.n	801620e <__ieee754_fmod+0xaa>
 80162f8:	ea52 0104 	orrs.w	r1, r2, r4
 80162fc:	f43f af5d 	beq.w	80161ba <__ieee754_fmod+0x56>
 8016300:	0fe1      	lsrs	r1, r4, #31
 8016302:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8016306:	0067      	lsls	r7, r4, #1
 8016308:	e7f4      	b.n	80162f4 <__ieee754_fmod+0x190>
 801630a:	0fe0      	lsrs	r0, r4, #31
 801630c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8016310:	0064      	lsls	r4, r4, #1
 8016312:	3b01      	subs	r3, #1
 8016314:	e78c      	b.n	8016230 <__ieee754_fmod+0xcc>
 8016316:	1ac9      	subs	r1, r1, r3
 8016318:	2914      	cmp	r1, #20
 801631a:	dc0a      	bgt.n	8016332 <__ieee754_fmod+0x1ce>
 801631c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8016320:	fa02 f303 	lsl.w	r3, r2, r3
 8016324:	40cc      	lsrs	r4, r1
 8016326:	4323      	orrs	r3, r4
 8016328:	410a      	asrs	r2, r1
 801632a:	ea42 0105 	orr.w	r1, r2, r5
 801632e:	4618      	mov	r0, r3
 8016330:	e737      	b.n	80161a2 <__ieee754_fmod+0x3e>
 8016332:	291f      	cmp	r1, #31
 8016334:	dc07      	bgt.n	8016346 <__ieee754_fmod+0x1e2>
 8016336:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801633a:	40cc      	lsrs	r4, r1
 801633c:	fa02 f303 	lsl.w	r3, r2, r3
 8016340:	4323      	orrs	r3, r4
 8016342:	462a      	mov	r2, r5
 8016344:	e7f1      	b.n	801632a <__ieee754_fmod+0x1c6>
 8016346:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801634a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801634e:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8016352:	33e2      	adds	r3, #226	; 0xe2
 8016354:	fa42 f303 	asr.w	r3, r2, r3
 8016358:	e7f3      	b.n	8016342 <__ieee754_fmod+0x1de>
 801635a:	bf00      	nop
 801635c:	7fefffff 	.word	0x7fefffff
 8016360:	7ff00000 	.word	0x7ff00000
 8016364:	0801a330 	.word	0x0801a330
 8016368:	000fffff 	.word	0x000fffff
 801636c:	fffffbed 	.word	0xfffffbed
 8016370:	fffffc02 	.word	0xfffffc02
 8016374:	fffffbe2 	.word	0xfffffbe2

08016378 <__ieee754_pow>:
 8016378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801637c:	b091      	sub	sp, #68	; 0x44
 801637e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016382:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8016386:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801638a:	ea55 0302 	orrs.w	r3, r5, r2
 801638e:	4607      	mov	r7, r0
 8016390:	4688      	mov	r8, r1
 8016392:	f000 84b7 	beq.w	8016d04 <__ieee754_pow+0x98c>
 8016396:	4b80      	ldr	r3, [pc, #512]	; (8016598 <__ieee754_pow+0x220>)
 8016398:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 801639c:	429c      	cmp	r4, r3
 801639e:	4689      	mov	r9, r1
 80163a0:	4682      	mov	sl, r0
 80163a2:	dc09      	bgt.n	80163b8 <__ieee754_pow+0x40>
 80163a4:	d103      	bne.n	80163ae <__ieee754_pow+0x36>
 80163a6:	b938      	cbnz	r0, 80163b8 <__ieee754_pow+0x40>
 80163a8:	42a5      	cmp	r5, r4
 80163aa:	dc0d      	bgt.n	80163c8 <__ieee754_pow+0x50>
 80163ac:	e001      	b.n	80163b2 <__ieee754_pow+0x3a>
 80163ae:	429d      	cmp	r5, r3
 80163b0:	dc02      	bgt.n	80163b8 <__ieee754_pow+0x40>
 80163b2:	429d      	cmp	r5, r3
 80163b4:	d10e      	bne.n	80163d4 <__ieee754_pow+0x5c>
 80163b6:	b16a      	cbz	r2, 80163d4 <__ieee754_pow+0x5c>
 80163b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80163bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80163c0:	ea54 030a 	orrs.w	r3, r4, sl
 80163c4:	f000 849e 	beq.w	8016d04 <__ieee754_pow+0x98c>
 80163c8:	4874      	ldr	r0, [pc, #464]	; (801659c <__ieee754_pow+0x224>)
 80163ca:	b011      	add	sp, #68	; 0x44
 80163cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163d0:	f003 b8b4 	b.w	801953c <nan>
 80163d4:	f1b9 0f00 	cmp.w	r9, #0
 80163d8:	da53      	bge.n	8016482 <__ieee754_pow+0x10a>
 80163da:	4b71      	ldr	r3, [pc, #452]	; (80165a0 <__ieee754_pow+0x228>)
 80163dc:	429d      	cmp	r5, r3
 80163de:	dc4e      	bgt.n	801647e <__ieee754_pow+0x106>
 80163e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80163e4:	429d      	cmp	r5, r3
 80163e6:	dd4c      	ble.n	8016482 <__ieee754_pow+0x10a>
 80163e8:	152b      	asrs	r3, r5, #20
 80163ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80163ee:	2b14      	cmp	r3, #20
 80163f0:	dd28      	ble.n	8016444 <__ieee754_pow+0xcc>
 80163f2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80163f6:	fa22 f103 	lsr.w	r1, r2, r3
 80163fa:	fa01 f303 	lsl.w	r3, r1, r3
 80163fe:	4293      	cmp	r3, r2
 8016400:	d13f      	bne.n	8016482 <__ieee754_pow+0x10a>
 8016402:	f001 0101 	and.w	r1, r1, #1
 8016406:	f1c1 0302 	rsb	r3, r1, #2
 801640a:	9300      	str	r3, [sp, #0]
 801640c:	2a00      	cmp	r2, #0
 801640e:	d15c      	bne.n	80164ca <__ieee754_pow+0x152>
 8016410:	4b61      	ldr	r3, [pc, #388]	; (8016598 <__ieee754_pow+0x220>)
 8016412:	429d      	cmp	r5, r3
 8016414:	d126      	bne.n	8016464 <__ieee754_pow+0xec>
 8016416:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801641a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801641e:	ea53 030a 	orrs.w	r3, r3, sl
 8016422:	f000 846f 	beq.w	8016d04 <__ieee754_pow+0x98c>
 8016426:	4b5f      	ldr	r3, [pc, #380]	; (80165a4 <__ieee754_pow+0x22c>)
 8016428:	429c      	cmp	r4, r3
 801642a:	dd2c      	ble.n	8016486 <__ieee754_pow+0x10e>
 801642c:	2e00      	cmp	r6, #0
 801642e:	f280 846f 	bge.w	8016d10 <__ieee754_pow+0x998>
 8016432:	f04f 0b00 	mov.w	fp, #0
 8016436:	f04f 0c00 	mov.w	ip, #0
 801643a:	4658      	mov	r0, fp
 801643c:	4661      	mov	r1, ip
 801643e:	b011      	add	sp, #68	; 0x44
 8016440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016444:	2a00      	cmp	r2, #0
 8016446:	d13e      	bne.n	80164c6 <__ieee754_pow+0x14e>
 8016448:	f1c3 0314 	rsb	r3, r3, #20
 801644c:	fa45 f103 	asr.w	r1, r5, r3
 8016450:	fa01 f303 	lsl.w	r3, r1, r3
 8016454:	42ab      	cmp	r3, r5
 8016456:	f040 8463 	bne.w	8016d20 <__ieee754_pow+0x9a8>
 801645a:	f001 0101 	and.w	r1, r1, #1
 801645e:	f1c1 0302 	rsb	r3, r1, #2
 8016462:	9300      	str	r3, [sp, #0]
 8016464:	4b50      	ldr	r3, [pc, #320]	; (80165a8 <__ieee754_pow+0x230>)
 8016466:	429d      	cmp	r5, r3
 8016468:	d114      	bne.n	8016494 <__ieee754_pow+0x11c>
 801646a:	2e00      	cmp	r6, #0
 801646c:	f280 8454 	bge.w	8016d18 <__ieee754_pow+0x9a0>
 8016470:	463a      	mov	r2, r7
 8016472:	4643      	mov	r3, r8
 8016474:	2000      	movs	r0, #0
 8016476:	494c      	ldr	r1, [pc, #304]	; (80165a8 <__ieee754_pow+0x230>)
 8016478:	f7ea f972 	bl	8000760 <__aeabi_ddiv>
 801647c:	e013      	b.n	80164a6 <__ieee754_pow+0x12e>
 801647e:	2302      	movs	r3, #2
 8016480:	e7c3      	b.n	801640a <__ieee754_pow+0x92>
 8016482:	2300      	movs	r3, #0
 8016484:	e7c1      	b.n	801640a <__ieee754_pow+0x92>
 8016486:	2e00      	cmp	r6, #0
 8016488:	dad3      	bge.n	8016432 <__ieee754_pow+0xba>
 801648a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801648e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8016492:	e7d2      	b.n	801643a <__ieee754_pow+0xc2>
 8016494:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8016498:	d108      	bne.n	80164ac <__ieee754_pow+0x134>
 801649a:	463a      	mov	r2, r7
 801649c:	4643      	mov	r3, r8
 801649e:	4638      	mov	r0, r7
 80164a0:	4641      	mov	r1, r8
 80164a2:	f7ea f833 	bl	800050c <__aeabi_dmul>
 80164a6:	4683      	mov	fp, r0
 80164a8:	468c      	mov	ip, r1
 80164aa:	e7c6      	b.n	801643a <__ieee754_pow+0xc2>
 80164ac:	4b3f      	ldr	r3, [pc, #252]	; (80165ac <__ieee754_pow+0x234>)
 80164ae:	429e      	cmp	r6, r3
 80164b0:	d10b      	bne.n	80164ca <__ieee754_pow+0x152>
 80164b2:	f1b9 0f00 	cmp.w	r9, #0
 80164b6:	db08      	blt.n	80164ca <__ieee754_pow+0x152>
 80164b8:	4638      	mov	r0, r7
 80164ba:	4641      	mov	r1, r8
 80164bc:	b011      	add	sp, #68	; 0x44
 80164be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c2:	f000 be55 	b.w	8017170 <__ieee754_sqrt>
 80164c6:	2300      	movs	r3, #0
 80164c8:	9300      	str	r3, [sp, #0]
 80164ca:	4638      	mov	r0, r7
 80164cc:	4641      	mov	r1, r8
 80164ce:	f002 ffa5 	bl	801941c <fabs>
 80164d2:	4683      	mov	fp, r0
 80164d4:	468c      	mov	ip, r1
 80164d6:	f1ba 0f00 	cmp.w	sl, #0
 80164da:	d12b      	bne.n	8016534 <__ieee754_pow+0x1bc>
 80164dc:	b124      	cbz	r4, 80164e8 <__ieee754_pow+0x170>
 80164de:	4b32      	ldr	r3, [pc, #200]	; (80165a8 <__ieee754_pow+0x230>)
 80164e0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d125      	bne.n	8016534 <__ieee754_pow+0x1bc>
 80164e8:	2e00      	cmp	r6, #0
 80164ea:	da07      	bge.n	80164fc <__ieee754_pow+0x184>
 80164ec:	465a      	mov	r2, fp
 80164ee:	4663      	mov	r3, ip
 80164f0:	2000      	movs	r0, #0
 80164f2:	492d      	ldr	r1, [pc, #180]	; (80165a8 <__ieee754_pow+0x230>)
 80164f4:	f7ea f934 	bl	8000760 <__aeabi_ddiv>
 80164f8:	4683      	mov	fp, r0
 80164fa:	468c      	mov	ip, r1
 80164fc:	f1b9 0f00 	cmp.w	r9, #0
 8016500:	da9b      	bge.n	801643a <__ieee754_pow+0xc2>
 8016502:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016506:	9b00      	ldr	r3, [sp, #0]
 8016508:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801650c:	4323      	orrs	r3, r4
 801650e:	d108      	bne.n	8016522 <__ieee754_pow+0x1aa>
 8016510:	465a      	mov	r2, fp
 8016512:	4663      	mov	r3, ip
 8016514:	4658      	mov	r0, fp
 8016516:	4661      	mov	r1, ip
 8016518:	f7e9 fe40 	bl	800019c <__aeabi_dsub>
 801651c:	4602      	mov	r2, r0
 801651e:	460b      	mov	r3, r1
 8016520:	e7aa      	b.n	8016478 <__ieee754_pow+0x100>
 8016522:	9b00      	ldr	r3, [sp, #0]
 8016524:	2b01      	cmp	r3, #1
 8016526:	d188      	bne.n	801643a <__ieee754_pow+0xc2>
 8016528:	4658      	mov	r0, fp
 801652a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 801652e:	4683      	mov	fp, r0
 8016530:	469c      	mov	ip, r3
 8016532:	e782      	b.n	801643a <__ieee754_pow+0xc2>
 8016534:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8016538:	f109 33ff 	add.w	r3, r9, #4294967295
 801653c:	930d      	str	r3, [sp, #52]	; 0x34
 801653e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016540:	9b00      	ldr	r3, [sp, #0]
 8016542:	4313      	orrs	r3, r2
 8016544:	d104      	bne.n	8016550 <__ieee754_pow+0x1d8>
 8016546:	463a      	mov	r2, r7
 8016548:	4643      	mov	r3, r8
 801654a:	4638      	mov	r0, r7
 801654c:	4641      	mov	r1, r8
 801654e:	e7e3      	b.n	8016518 <__ieee754_pow+0x1a0>
 8016550:	4b17      	ldr	r3, [pc, #92]	; (80165b0 <__ieee754_pow+0x238>)
 8016552:	429d      	cmp	r5, r3
 8016554:	f340 80fe 	ble.w	8016754 <__ieee754_pow+0x3dc>
 8016558:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801655c:	429d      	cmp	r5, r3
 801655e:	dd0b      	ble.n	8016578 <__ieee754_pow+0x200>
 8016560:	4b10      	ldr	r3, [pc, #64]	; (80165a4 <__ieee754_pow+0x22c>)
 8016562:	429c      	cmp	r4, r3
 8016564:	dc0e      	bgt.n	8016584 <__ieee754_pow+0x20c>
 8016566:	2e00      	cmp	r6, #0
 8016568:	f6bf af63 	bge.w	8016432 <__ieee754_pow+0xba>
 801656c:	a308      	add	r3, pc, #32	; (adr r3, 8016590 <__ieee754_pow+0x218>)
 801656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016572:	4610      	mov	r0, r2
 8016574:	4619      	mov	r1, r3
 8016576:	e794      	b.n	80164a2 <__ieee754_pow+0x12a>
 8016578:	4b0e      	ldr	r3, [pc, #56]	; (80165b4 <__ieee754_pow+0x23c>)
 801657a:	429c      	cmp	r4, r3
 801657c:	ddf3      	ble.n	8016566 <__ieee754_pow+0x1ee>
 801657e:	4b0a      	ldr	r3, [pc, #40]	; (80165a8 <__ieee754_pow+0x230>)
 8016580:	429c      	cmp	r4, r3
 8016582:	dd19      	ble.n	80165b8 <__ieee754_pow+0x240>
 8016584:	2e00      	cmp	r6, #0
 8016586:	dcf1      	bgt.n	801656c <__ieee754_pow+0x1f4>
 8016588:	e753      	b.n	8016432 <__ieee754_pow+0xba>
 801658a:	bf00      	nop
 801658c:	f3af 8000 	nop.w
 8016590:	8800759c 	.word	0x8800759c
 8016594:	7e37e43c 	.word	0x7e37e43c
 8016598:	7ff00000 	.word	0x7ff00000
 801659c:	0801a2f9 	.word	0x0801a2f9
 80165a0:	433fffff 	.word	0x433fffff
 80165a4:	3fefffff 	.word	0x3fefffff
 80165a8:	3ff00000 	.word	0x3ff00000
 80165ac:	3fe00000 	.word	0x3fe00000
 80165b0:	41e00000 	.word	0x41e00000
 80165b4:	3feffffe 	.word	0x3feffffe
 80165b8:	4661      	mov	r1, ip
 80165ba:	2200      	movs	r2, #0
 80165bc:	4b60      	ldr	r3, [pc, #384]	; (8016740 <__ieee754_pow+0x3c8>)
 80165be:	4658      	mov	r0, fp
 80165c0:	f7e9 fdec 	bl	800019c <__aeabi_dsub>
 80165c4:	a354      	add	r3, pc, #336	; (adr r3, 8016718 <__ieee754_pow+0x3a0>)
 80165c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ca:	4604      	mov	r4, r0
 80165cc:	460d      	mov	r5, r1
 80165ce:	f7e9 ff9d 	bl	800050c <__aeabi_dmul>
 80165d2:	a353      	add	r3, pc, #332	; (adr r3, 8016720 <__ieee754_pow+0x3a8>)
 80165d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d8:	4606      	mov	r6, r0
 80165da:	460f      	mov	r7, r1
 80165dc:	4620      	mov	r0, r4
 80165de:	4629      	mov	r1, r5
 80165e0:	f7e9 ff94 	bl	800050c <__aeabi_dmul>
 80165e4:	2200      	movs	r2, #0
 80165e6:	4682      	mov	sl, r0
 80165e8:	468b      	mov	fp, r1
 80165ea:	4b56      	ldr	r3, [pc, #344]	; (8016744 <__ieee754_pow+0x3cc>)
 80165ec:	4620      	mov	r0, r4
 80165ee:	4629      	mov	r1, r5
 80165f0:	f7e9 ff8c 	bl	800050c <__aeabi_dmul>
 80165f4:	4602      	mov	r2, r0
 80165f6:	460b      	mov	r3, r1
 80165f8:	a14b      	add	r1, pc, #300	; (adr r1, 8016728 <__ieee754_pow+0x3b0>)
 80165fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165fe:	f7e9 fdcd 	bl	800019c <__aeabi_dsub>
 8016602:	4622      	mov	r2, r4
 8016604:	462b      	mov	r3, r5
 8016606:	f7e9 ff81 	bl	800050c <__aeabi_dmul>
 801660a:	4602      	mov	r2, r0
 801660c:	460b      	mov	r3, r1
 801660e:	2000      	movs	r0, #0
 8016610:	494d      	ldr	r1, [pc, #308]	; (8016748 <__ieee754_pow+0x3d0>)
 8016612:	f7e9 fdc3 	bl	800019c <__aeabi_dsub>
 8016616:	4622      	mov	r2, r4
 8016618:	462b      	mov	r3, r5
 801661a:	4680      	mov	r8, r0
 801661c:	4689      	mov	r9, r1
 801661e:	4620      	mov	r0, r4
 8016620:	4629      	mov	r1, r5
 8016622:	f7e9 ff73 	bl	800050c <__aeabi_dmul>
 8016626:	4602      	mov	r2, r0
 8016628:	460b      	mov	r3, r1
 801662a:	4640      	mov	r0, r8
 801662c:	4649      	mov	r1, r9
 801662e:	f7e9 ff6d 	bl	800050c <__aeabi_dmul>
 8016632:	a33f      	add	r3, pc, #252	; (adr r3, 8016730 <__ieee754_pow+0x3b8>)
 8016634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016638:	f7e9 ff68 	bl	800050c <__aeabi_dmul>
 801663c:	4602      	mov	r2, r0
 801663e:	460b      	mov	r3, r1
 8016640:	4650      	mov	r0, sl
 8016642:	4659      	mov	r1, fp
 8016644:	f7e9 fdaa 	bl	800019c <__aeabi_dsub>
 8016648:	4602      	mov	r2, r0
 801664a:	460b      	mov	r3, r1
 801664c:	4604      	mov	r4, r0
 801664e:	460d      	mov	r5, r1
 8016650:	4630      	mov	r0, r6
 8016652:	4639      	mov	r1, r7
 8016654:	f7e9 fda4 	bl	80001a0 <__adddf3>
 8016658:	2000      	movs	r0, #0
 801665a:	468b      	mov	fp, r1
 801665c:	4682      	mov	sl, r0
 801665e:	4632      	mov	r2, r6
 8016660:	463b      	mov	r3, r7
 8016662:	f7e9 fd9b 	bl	800019c <__aeabi_dsub>
 8016666:	4602      	mov	r2, r0
 8016668:	460b      	mov	r3, r1
 801666a:	4620      	mov	r0, r4
 801666c:	4629      	mov	r1, r5
 801666e:	f7e9 fd95 	bl	800019c <__aeabi_dsub>
 8016672:	9b00      	ldr	r3, [sp, #0]
 8016674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016676:	3b01      	subs	r3, #1
 8016678:	4313      	orrs	r3, r2
 801667a:	f04f 0300 	mov.w	r3, #0
 801667e:	bf0c      	ite	eq
 8016680:	4c32      	ldreq	r4, [pc, #200]	; (801674c <__ieee754_pow+0x3d4>)
 8016682:	4c2f      	ldrne	r4, [pc, #188]	; (8016740 <__ieee754_pow+0x3c8>)
 8016684:	4606      	mov	r6, r0
 8016686:	e9cd 3400 	strd	r3, r4, [sp]
 801668a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801668e:	2400      	movs	r4, #0
 8016690:	460f      	mov	r7, r1
 8016692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016696:	4622      	mov	r2, r4
 8016698:	462b      	mov	r3, r5
 801669a:	f7e9 fd7f 	bl	800019c <__aeabi_dsub>
 801669e:	4652      	mov	r2, sl
 80166a0:	465b      	mov	r3, fp
 80166a2:	f7e9 ff33 	bl	800050c <__aeabi_dmul>
 80166a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80166aa:	4680      	mov	r8, r0
 80166ac:	4689      	mov	r9, r1
 80166ae:	4630      	mov	r0, r6
 80166b0:	4639      	mov	r1, r7
 80166b2:	f7e9 ff2b 	bl	800050c <__aeabi_dmul>
 80166b6:	4602      	mov	r2, r0
 80166b8:	460b      	mov	r3, r1
 80166ba:	4640      	mov	r0, r8
 80166bc:	4649      	mov	r1, r9
 80166be:	f7e9 fd6f 	bl	80001a0 <__adddf3>
 80166c2:	4622      	mov	r2, r4
 80166c4:	462b      	mov	r3, r5
 80166c6:	4680      	mov	r8, r0
 80166c8:	4689      	mov	r9, r1
 80166ca:	4650      	mov	r0, sl
 80166cc:	4659      	mov	r1, fp
 80166ce:	f7e9 ff1d 	bl	800050c <__aeabi_dmul>
 80166d2:	4604      	mov	r4, r0
 80166d4:	460d      	mov	r5, r1
 80166d6:	460b      	mov	r3, r1
 80166d8:	4602      	mov	r2, r0
 80166da:	4649      	mov	r1, r9
 80166dc:	4640      	mov	r0, r8
 80166de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80166e2:	f7e9 fd5d 	bl	80001a0 <__adddf3>
 80166e6:	4b1a      	ldr	r3, [pc, #104]	; (8016750 <__ieee754_pow+0x3d8>)
 80166e8:	4682      	mov	sl, r0
 80166ea:	4299      	cmp	r1, r3
 80166ec:	460f      	mov	r7, r1
 80166ee:	460e      	mov	r6, r1
 80166f0:	f340 82e1 	ble.w	8016cb6 <__ieee754_pow+0x93e>
 80166f4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80166f8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80166fc:	4303      	orrs	r3, r0
 80166fe:	f000 81db 	beq.w	8016ab8 <__ieee754_pow+0x740>
 8016702:	a30d      	add	r3, pc, #52	; (adr r3, 8016738 <__ieee754_pow+0x3c0>)
 8016704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016708:	e9dd 0100 	ldrd	r0, r1, [sp]
 801670c:	f7e9 fefe 	bl	800050c <__aeabi_dmul>
 8016710:	a309      	add	r3, pc, #36	; (adr r3, 8016738 <__ieee754_pow+0x3c0>)
 8016712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016716:	e6c4      	b.n	80164a2 <__ieee754_pow+0x12a>
 8016718:	60000000 	.word	0x60000000
 801671c:	3ff71547 	.word	0x3ff71547
 8016720:	f85ddf44 	.word	0xf85ddf44
 8016724:	3e54ae0b 	.word	0x3e54ae0b
 8016728:	55555555 	.word	0x55555555
 801672c:	3fd55555 	.word	0x3fd55555
 8016730:	652b82fe 	.word	0x652b82fe
 8016734:	3ff71547 	.word	0x3ff71547
 8016738:	8800759c 	.word	0x8800759c
 801673c:	7e37e43c 	.word	0x7e37e43c
 8016740:	3ff00000 	.word	0x3ff00000
 8016744:	3fd00000 	.word	0x3fd00000
 8016748:	3fe00000 	.word	0x3fe00000
 801674c:	bff00000 	.word	0xbff00000
 8016750:	408fffff 	.word	0x408fffff
 8016754:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016758:	f04f 0200 	mov.w	r2, #0
 801675c:	da08      	bge.n	8016770 <__ieee754_pow+0x3f8>
 801675e:	4658      	mov	r0, fp
 8016760:	4bcd      	ldr	r3, [pc, #820]	; (8016a98 <__ieee754_pow+0x720>)
 8016762:	4661      	mov	r1, ip
 8016764:	f7e9 fed2 	bl	800050c <__aeabi_dmul>
 8016768:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801676c:	4683      	mov	fp, r0
 801676e:	460c      	mov	r4, r1
 8016770:	1523      	asrs	r3, r4, #20
 8016772:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016776:	4413      	add	r3, r2
 8016778:	930c      	str	r3, [sp, #48]	; 0x30
 801677a:	4bc8      	ldr	r3, [pc, #800]	; (8016a9c <__ieee754_pow+0x724>)
 801677c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016780:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016784:	429c      	cmp	r4, r3
 8016786:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801678a:	dd08      	ble.n	801679e <__ieee754_pow+0x426>
 801678c:	4bc4      	ldr	r3, [pc, #784]	; (8016aa0 <__ieee754_pow+0x728>)
 801678e:	429c      	cmp	r4, r3
 8016790:	f340 815b 	ble.w	8016a4a <__ieee754_pow+0x6d2>
 8016794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016796:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801679a:	3301      	adds	r3, #1
 801679c:	930c      	str	r3, [sp, #48]	; 0x30
 801679e:	f04f 0800 	mov.w	r8, #0
 80167a2:	4658      	mov	r0, fp
 80167a4:	4629      	mov	r1, r5
 80167a6:	4bbf      	ldr	r3, [pc, #764]	; (8016aa4 <__ieee754_pow+0x72c>)
 80167a8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80167ac:	444b      	add	r3, r9
 80167ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80167b2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80167b6:	461a      	mov	r2, r3
 80167b8:	4623      	mov	r3, r4
 80167ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80167be:	f7e9 fced 	bl	800019c <__aeabi_dsub>
 80167c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80167c6:	4606      	mov	r6, r0
 80167c8:	460f      	mov	r7, r1
 80167ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80167ce:	f7e9 fce7 	bl	80001a0 <__adddf3>
 80167d2:	4602      	mov	r2, r0
 80167d4:	460b      	mov	r3, r1
 80167d6:	2000      	movs	r0, #0
 80167d8:	49b3      	ldr	r1, [pc, #716]	; (8016aa8 <__ieee754_pow+0x730>)
 80167da:	f7e9 ffc1 	bl	8000760 <__aeabi_ddiv>
 80167de:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80167e2:	4602      	mov	r2, r0
 80167e4:	460b      	mov	r3, r1
 80167e6:	4630      	mov	r0, r6
 80167e8:	4639      	mov	r1, r7
 80167ea:	f7e9 fe8f 	bl	800050c <__aeabi_dmul>
 80167ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80167f2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80167f6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80167fa:	2300      	movs	r3, #0
 80167fc:	2200      	movs	r2, #0
 80167fe:	106d      	asrs	r5, r5, #1
 8016800:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016804:	9304      	str	r3, [sp, #16]
 8016806:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801680a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801680e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8016812:	4650      	mov	r0, sl
 8016814:	4659      	mov	r1, fp
 8016816:	4614      	mov	r4, r2
 8016818:	461d      	mov	r5, r3
 801681a:	f7e9 fe77 	bl	800050c <__aeabi_dmul>
 801681e:	4602      	mov	r2, r0
 8016820:	460b      	mov	r3, r1
 8016822:	4630      	mov	r0, r6
 8016824:	4639      	mov	r1, r7
 8016826:	f7e9 fcb9 	bl	800019c <__aeabi_dsub>
 801682a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801682e:	4606      	mov	r6, r0
 8016830:	460f      	mov	r7, r1
 8016832:	4620      	mov	r0, r4
 8016834:	4629      	mov	r1, r5
 8016836:	f7e9 fcb1 	bl	800019c <__aeabi_dsub>
 801683a:	4602      	mov	r2, r0
 801683c:	460b      	mov	r3, r1
 801683e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016842:	f7e9 fcab 	bl	800019c <__aeabi_dsub>
 8016846:	4652      	mov	r2, sl
 8016848:	465b      	mov	r3, fp
 801684a:	f7e9 fe5f 	bl	800050c <__aeabi_dmul>
 801684e:	4602      	mov	r2, r0
 8016850:	460b      	mov	r3, r1
 8016852:	4630      	mov	r0, r6
 8016854:	4639      	mov	r1, r7
 8016856:	f7e9 fca1 	bl	800019c <__aeabi_dsub>
 801685a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801685e:	f7e9 fe55 	bl	800050c <__aeabi_dmul>
 8016862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016866:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801686a:	4610      	mov	r0, r2
 801686c:	4619      	mov	r1, r3
 801686e:	f7e9 fe4d 	bl	800050c <__aeabi_dmul>
 8016872:	a377      	add	r3, pc, #476	; (adr r3, 8016a50 <__ieee754_pow+0x6d8>)
 8016874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016878:	4604      	mov	r4, r0
 801687a:	460d      	mov	r5, r1
 801687c:	f7e9 fe46 	bl	800050c <__aeabi_dmul>
 8016880:	a375      	add	r3, pc, #468	; (adr r3, 8016a58 <__ieee754_pow+0x6e0>)
 8016882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016886:	f7e9 fc8b 	bl	80001a0 <__adddf3>
 801688a:	4622      	mov	r2, r4
 801688c:	462b      	mov	r3, r5
 801688e:	f7e9 fe3d 	bl	800050c <__aeabi_dmul>
 8016892:	a373      	add	r3, pc, #460	; (adr r3, 8016a60 <__ieee754_pow+0x6e8>)
 8016894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016898:	f7e9 fc82 	bl	80001a0 <__adddf3>
 801689c:	4622      	mov	r2, r4
 801689e:	462b      	mov	r3, r5
 80168a0:	f7e9 fe34 	bl	800050c <__aeabi_dmul>
 80168a4:	a370      	add	r3, pc, #448	; (adr r3, 8016a68 <__ieee754_pow+0x6f0>)
 80168a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168aa:	f7e9 fc79 	bl	80001a0 <__adddf3>
 80168ae:	4622      	mov	r2, r4
 80168b0:	462b      	mov	r3, r5
 80168b2:	f7e9 fe2b 	bl	800050c <__aeabi_dmul>
 80168b6:	a36e      	add	r3, pc, #440	; (adr r3, 8016a70 <__ieee754_pow+0x6f8>)
 80168b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168bc:	f7e9 fc70 	bl	80001a0 <__adddf3>
 80168c0:	4622      	mov	r2, r4
 80168c2:	462b      	mov	r3, r5
 80168c4:	f7e9 fe22 	bl	800050c <__aeabi_dmul>
 80168c8:	a36b      	add	r3, pc, #428	; (adr r3, 8016a78 <__ieee754_pow+0x700>)
 80168ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ce:	f7e9 fc67 	bl	80001a0 <__adddf3>
 80168d2:	4622      	mov	r2, r4
 80168d4:	4606      	mov	r6, r0
 80168d6:	460f      	mov	r7, r1
 80168d8:	462b      	mov	r3, r5
 80168da:	4620      	mov	r0, r4
 80168dc:	4629      	mov	r1, r5
 80168de:	f7e9 fe15 	bl	800050c <__aeabi_dmul>
 80168e2:	4602      	mov	r2, r0
 80168e4:	460b      	mov	r3, r1
 80168e6:	4630      	mov	r0, r6
 80168e8:	4639      	mov	r1, r7
 80168ea:	f7e9 fe0f 	bl	800050c <__aeabi_dmul>
 80168ee:	4604      	mov	r4, r0
 80168f0:	460d      	mov	r5, r1
 80168f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80168f6:	4652      	mov	r2, sl
 80168f8:	465b      	mov	r3, fp
 80168fa:	f7e9 fc51 	bl	80001a0 <__adddf3>
 80168fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016902:	f7e9 fe03 	bl	800050c <__aeabi_dmul>
 8016906:	4622      	mov	r2, r4
 8016908:	462b      	mov	r3, r5
 801690a:	f7e9 fc49 	bl	80001a0 <__adddf3>
 801690e:	4652      	mov	r2, sl
 8016910:	4606      	mov	r6, r0
 8016912:	460f      	mov	r7, r1
 8016914:	465b      	mov	r3, fp
 8016916:	4650      	mov	r0, sl
 8016918:	4659      	mov	r1, fp
 801691a:	f7e9 fdf7 	bl	800050c <__aeabi_dmul>
 801691e:	2200      	movs	r2, #0
 8016920:	4b62      	ldr	r3, [pc, #392]	; (8016aac <__ieee754_pow+0x734>)
 8016922:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016926:	f7e9 fc3b 	bl	80001a0 <__adddf3>
 801692a:	4632      	mov	r2, r6
 801692c:	463b      	mov	r3, r7
 801692e:	f7e9 fc37 	bl	80001a0 <__adddf3>
 8016932:	9804      	ldr	r0, [sp, #16]
 8016934:	460d      	mov	r5, r1
 8016936:	4604      	mov	r4, r0
 8016938:	4602      	mov	r2, r0
 801693a:	460b      	mov	r3, r1
 801693c:	4650      	mov	r0, sl
 801693e:	4659      	mov	r1, fp
 8016940:	f7e9 fde4 	bl	800050c <__aeabi_dmul>
 8016944:	2200      	movs	r2, #0
 8016946:	4682      	mov	sl, r0
 8016948:	468b      	mov	fp, r1
 801694a:	4b58      	ldr	r3, [pc, #352]	; (8016aac <__ieee754_pow+0x734>)
 801694c:	4620      	mov	r0, r4
 801694e:	4629      	mov	r1, r5
 8016950:	f7e9 fc24 	bl	800019c <__aeabi_dsub>
 8016954:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016958:	f7e9 fc20 	bl	800019c <__aeabi_dsub>
 801695c:	4602      	mov	r2, r0
 801695e:	460b      	mov	r3, r1
 8016960:	4630      	mov	r0, r6
 8016962:	4639      	mov	r1, r7
 8016964:	f7e9 fc1a 	bl	800019c <__aeabi_dsub>
 8016968:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801696c:	f7e9 fdce 	bl	800050c <__aeabi_dmul>
 8016970:	4622      	mov	r2, r4
 8016972:	4606      	mov	r6, r0
 8016974:	460f      	mov	r7, r1
 8016976:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801697a:	462b      	mov	r3, r5
 801697c:	f7e9 fdc6 	bl	800050c <__aeabi_dmul>
 8016980:	4602      	mov	r2, r0
 8016982:	460b      	mov	r3, r1
 8016984:	4630      	mov	r0, r6
 8016986:	4639      	mov	r1, r7
 8016988:	f7e9 fc0a 	bl	80001a0 <__adddf3>
 801698c:	4606      	mov	r6, r0
 801698e:	460f      	mov	r7, r1
 8016990:	4602      	mov	r2, r0
 8016992:	460b      	mov	r3, r1
 8016994:	4650      	mov	r0, sl
 8016996:	4659      	mov	r1, fp
 8016998:	f7e9 fc02 	bl	80001a0 <__adddf3>
 801699c:	a338      	add	r3, pc, #224	; (adr r3, 8016a80 <__ieee754_pow+0x708>)
 801699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a2:	9804      	ldr	r0, [sp, #16]
 80169a4:	460d      	mov	r5, r1
 80169a6:	4604      	mov	r4, r0
 80169a8:	f7e9 fdb0 	bl	800050c <__aeabi_dmul>
 80169ac:	4652      	mov	r2, sl
 80169ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80169b2:	465b      	mov	r3, fp
 80169b4:	4620      	mov	r0, r4
 80169b6:	4629      	mov	r1, r5
 80169b8:	f7e9 fbf0 	bl	800019c <__aeabi_dsub>
 80169bc:	4602      	mov	r2, r0
 80169be:	460b      	mov	r3, r1
 80169c0:	4630      	mov	r0, r6
 80169c2:	4639      	mov	r1, r7
 80169c4:	f7e9 fbea 	bl	800019c <__aeabi_dsub>
 80169c8:	a32f      	add	r3, pc, #188	; (adr r3, 8016a88 <__ieee754_pow+0x710>)
 80169ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ce:	f7e9 fd9d 	bl	800050c <__aeabi_dmul>
 80169d2:	a32f      	add	r3, pc, #188	; (adr r3, 8016a90 <__ieee754_pow+0x718>)
 80169d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d8:	4606      	mov	r6, r0
 80169da:	460f      	mov	r7, r1
 80169dc:	4620      	mov	r0, r4
 80169de:	4629      	mov	r1, r5
 80169e0:	f7e9 fd94 	bl	800050c <__aeabi_dmul>
 80169e4:	4602      	mov	r2, r0
 80169e6:	460b      	mov	r3, r1
 80169e8:	4630      	mov	r0, r6
 80169ea:	4639      	mov	r1, r7
 80169ec:	f7e9 fbd8 	bl	80001a0 <__adddf3>
 80169f0:	4b2f      	ldr	r3, [pc, #188]	; (8016ab0 <__ieee754_pow+0x738>)
 80169f2:	444b      	add	r3, r9
 80169f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169f8:	f7e9 fbd2 	bl	80001a0 <__adddf3>
 80169fc:	4604      	mov	r4, r0
 80169fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016a00:	460d      	mov	r5, r1
 8016a02:	f7e9 fd19 	bl	8000438 <__aeabi_i2d>
 8016a06:	4606      	mov	r6, r0
 8016a08:	460f      	mov	r7, r1
 8016a0a:	4b2a      	ldr	r3, [pc, #168]	; (8016ab4 <__ieee754_pow+0x73c>)
 8016a0c:	4622      	mov	r2, r4
 8016a0e:	444b      	add	r3, r9
 8016a10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016a14:	462b      	mov	r3, r5
 8016a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a1a:	f7e9 fbc1 	bl	80001a0 <__adddf3>
 8016a1e:	4642      	mov	r2, r8
 8016a20:	464b      	mov	r3, r9
 8016a22:	f7e9 fbbd 	bl	80001a0 <__adddf3>
 8016a26:	4632      	mov	r2, r6
 8016a28:	463b      	mov	r3, r7
 8016a2a:	f7e9 fbb9 	bl	80001a0 <__adddf3>
 8016a2e:	9804      	ldr	r0, [sp, #16]
 8016a30:	4632      	mov	r2, r6
 8016a32:	463b      	mov	r3, r7
 8016a34:	4682      	mov	sl, r0
 8016a36:	468b      	mov	fp, r1
 8016a38:	f7e9 fbb0 	bl	800019c <__aeabi_dsub>
 8016a3c:	4642      	mov	r2, r8
 8016a3e:	464b      	mov	r3, r9
 8016a40:	f7e9 fbac 	bl	800019c <__aeabi_dsub>
 8016a44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016a48:	e60b      	b.n	8016662 <__ieee754_pow+0x2ea>
 8016a4a:	f04f 0801 	mov.w	r8, #1
 8016a4e:	e6a8      	b.n	80167a2 <__ieee754_pow+0x42a>
 8016a50:	4a454eef 	.word	0x4a454eef
 8016a54:	3fca7e28 	.word	0x3fca7e28
 8016a58:	93c9db65 	.word	0x93c9db65
 8016a5c:	3fcd864a 	.word	0x3fcd864a
 8016a60:	a91d4101 	.word	0xa91d4101
 8016a64:	3fd17460 	.word	0x3fd17460
 8016a68:	518f264d 	.word	0x518f264d
 8016a6c:	3fd55555 	.word	0x3fd55555
 8016a70:	db6fabff 	.word	0xdb6fabff
 8016a74:	3fdb6db6 	.word	0x3fdb6db6
 8016a78:	33333303 	.word	0x33333303
 8016a7c:	3fe33333 	.word	0x3fe33333
 8016a80:	e0000000 	.word	0xe0000000
 8016a84:	3feec709 	.word	0x3feec709
 8016a88:	dc3a03fd 	.word	0xdc3a03fd
 8016a8c:	3feec709 	.word	0x3feec709
 8016a90:	145b01f5 	.word	0x145b01f5
 8016a94:	be3e2fe0 	.word	0xbe3e2fe0
 8016a98:	43400000 	.word	0x43400000
 8016a9c:	0003988e 	.word	0x0003988e
 8016aa0:	000bb679 	.word	0x000bb679
 8016aa4:	0801a340 	.word	0x0801a340
 8016aa8:	3ff00000 	.word	0x3ff00000
 8016aac:	40080000 	.word	0x40080000
 8016ab0:	0801a360 	.word	0x0801a360
 8016ab4:	0801a350 	.word	0x0801a350
 8016ab8:	a39b      	add	r3, pc, #620	; (adr r3, 8016d28 <__ieee754_pow+0x9b0>)
 8016aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016abe:	4640      	mov	r0, r8
 8016ac0:	4649      	mov	r1, r9
 8016ac2:	f7e9 fb6d 	bl	80001a0 <__adddf3>
 8016ac6:	4622      	mov	r2, r4
 8016ac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016acc:	462b      	mov	r3, r5
 8016ace:	4650      	mov	r0, sl
 8016ad0:	4639      	mov	r1, r7
 8016ad2:	f7e9 fb63 	bl	800019c <__aeabi_dsub>
 8016ad6:	4602      	mov	r2, r0
 8016ad8:	460b      	mov	r3, r1
 8016ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016ade:	f7e9 ffa5 	bl	8000a2c <__aeabi_dcmpgt>
 8016ae2:	2800      	cmp	r0, #0
 8016ae4:	f47f ae0d 	bne.w	8016702 <__ieee754_pow+0x38a>
 8016ae8:	4aa3      	ldr	r2, [pc, #652]	; (8016d78 <__ieee754_pow+0xa00>)
 8016aea:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8016aee:	4293      	cmp	r3, r2
 8016af0:	f340 8103 	ble.w	8016cfa <__ieee754_pow+0x982>
 8016af4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016af8:	2000      	movs	r0, #0
 8016afa:	151b      	asrs	r3, r3, #20
 8016afc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016b00:	fa4a f303 	asr.w	r3, sl, r3
 8016b04:	4433      	add	r3, r6
 8016b06:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016b0a:	4f9c      	ldr	r7, [pc, #624]	; (8016d7c <__ieee754_pow+0xa04>)
 8016b0c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016b10:	4117      	asrs	r7, r2
 8016b12:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016b16:	ea23 0107 	bic.w	r1, r3, r7
 8016b1a:	f1c2 0214 	rsb	r2, r2, #20
 8016b1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016b22:	fa4a fa02 	asr.w	sl, sl, r2
 8016b26:	2e00      	cmp	r6, #0
 8016b28:	4602      	mov	r2, r0
 8016b2a:	460b      	mov	r3, r1
 8016b2c:	4620      	mov	r0, r4
 8016b2e:	4629      	mov	r1, r5
 8016b30:	bfb8      	it	lt
 8016b32:	f1ca 0a00 	rsblt	sl, sl, #0
 8016b36:	f7e9 fb31 	bl	800019c <__aeabi_dsub>
 8016b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b42:	4642      	mov	r2, r8
 8016b44:	464b      	mov	r3, r9
 8016b46:	f7e9 fb2b 	bl	80001a0 <__adddf3>
 8016b4a:	a379      	add	r3, pc, #484	; (adr r3, 8016d30 <__ieee754_pow+0x9b8>)
 8016b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b50:	2000      	movs	r0, #0
 8016b52:	460d      	mov	r5, r1
 8016b54:	4604      	mov	r4, r0
 8016b56:	f7e9 fcd9 	bl	800050c <__aeabi_dmul>
 8016b5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016b5e:	4606      	mov	r6, r0
 8016b60:	460f      	mov	r7, r1
 8016b62:	4620      	mov	r0, r4
 8016b64:	4629      	mov	r1, r5
 8016b66:	f7e9 fb19 	bl	800019c <__aeabi_dsub>
 8016b6a:	4602      	mov	r2, r0
 8016b6c:	460b      	mov	r3, r1
 8016b6e:	4640      	mov	r0, r8
 8016b70:	4649      	mov	r1, r9
 8016b72:	f7e9 fb13 	bl	800019c <__aeabi_dsub>
 8016b76:	a370      	add	r3, pc, #448	; (adr r3, 8016d38 <__ieee754_pow+0x9c0>)
 8016b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7c:	f7e9 fcc6 	bl	800050c <__aeabi_dmul>
 8016b80:	a36f      	add	r3, pc, #444	; (adr r3, 8016d40 <__ieee754_pow+0x9c8>)
 8016b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b86:	4680      	mov	r8, r0
 8016b88:	4689      	mov	r9, r1
 8016b8a:	4620      	mov	r0, r4
 8016b8c:	4629      	mov	r1, r5
 8016b8e:	f7e9 fcbd 	bl	800050c <__aeabi_dmul>
 8016b92:	4602      	mov	r2, r0
 8016b94:	460b      	mov	r3, r1
 8016b96:	4640      	mov	r0, r8
 8016b98:	4649      	mov	r1, r9
 8016b9a:	f7e9 fb01 	bl	80001a0 <__adddf3>
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	460d      	mov	r5, r1
 8016ba2:	4602      	mov	r2, r0
 8016ba4:	460b      	mov	r3, r1
 8016ba6:	4630      	mov	r0, r6
 8016ba8:	4639      	mov	r1, r7
 8016baa:	f7e9 faf9 	bl	80001a0 <__adddf3>
 8016bae:	4632      	mov	r2, r6
 8016bb0:	463b      	mov	r3, r7
 8016bb2:	4680      	mov	r8, r0
 8016bb4:	4689      	mov	r9, r1
 8016bb6:	f7e9 faf1 	bl	800019c <__aeabi_dsub>
 8016bba:	4602      	mov	r2, r0
 8016bbc:	460b      	mov	r3, r1
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	4629      	mov	r1, r5
 8016bc2:	f7e9 faeb 	bl	800019c <__aeabi_dsub>
 8016bc6:	4642      	mov	r2, r8
 8016bc8:	4606      	mov	r6, r0
 8016bca:	460f      	mov	r7, r1
 8016bcc:	464b      	mov	r3, r9
 8016bce:	4640      	mov	r0, r8
 8016bd0:	4649      	mov	r1, r9
 8016bd2:	f7e9 fc9b 	bl	800050c <__aeabi_dmul>
 8016bd6:	a35c      	add	r3, pc, #368	; (adr r3, 8016d48 <__ieee754_pow+0x9d0>)
 8016bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bdc:	4604      	mov	r4, r0
 8016bde:	460d      	mov	r5, r1
 8016be0:	f7e9 fc94 	bl	800050c <__aeabi_dmul>
 8016be4:	a35a      	add	r3, pc, #360	; (adr r3, 8016d50 <__ieee754_pow+0x9d8>)
 8016be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bea:	f7e9 fad7 	bl	800019c <__aeabi_dsub>
 8016bee:	4622      	mov	r2, r4
 8016bf0:	462b      	mov	r3, r5
 8016bf2:	f7e9 fc8b 	bl	800050c <__aeabi_dmul>
 8016bf6:	a358      	add	r3, pc, #352	; (adr r3, 8016d58 <__ieee754_pow+0x9e0>)
 8016bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bfc:	f7e9 fad0 	bl	80001a0 <__adddf3>
 8016c00:	4622      	mov	r2, r4
 8016c02:	462b      	mov	r3, r5
 8016c04:	f7e9 fc82 	bl	800050c <__aeabi_dmul>
 8016c08:	a355      	add	r3, pc, #340	; (adr r3, 8016d60 <__ieee754_pow+0x9e8>)
 8016c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c0e:	f7e9 fac5 	bl	800019c <__aeabi_dsub>
 8016c12:	4622      	mov	r2, r4
 8016c14:	462b      	mov	r3, r5
 8016c16:	f7e9 fc79 	bl	800050c <__aeabi_dmul>
 8016c1a:	a353      	add	r3, pc, #332	; (adr r3, 8016d68 <__ieee754_pow+0x9f0>)
 8016c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c20:	f7e9 fabe 	bl	80001a0 <__adddf3>
 8016c24:	4622      	mov	r2, r4
 8016c26:	462b      	mov	r3, r5
 8016c28:	f7e9 fc70 	bl	800050c <__aeabi_dmul>
 8016c2c:	4602      	mov	r2, r0
 8016c2e:	460b      	mov	r3, r1
 8016c30:	4640      	mov	r0, r8
 8016c32:	4649      	mov	r1, r9
 8016c34:	f7e9 fab2 	bl	800019c <__aeabi_dsub>
 8016c38:	4604      	mov	r4, r0
 8016c3a:	460d      	mov	r5, r1
 8016c3c:	4602      	mov	r2, r0
 8016c3e:	460b      	mov	r3, r1
 8016c40:	4640      	mov	r0, r8
 8016c42:	4649      	mov	r1, r9
 8016c44:	f7e9 fc62 	bl	800050c <__aeabi_dmul>
 8016c48:	2200      	movs	r2, #0
 8016c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016c52:	4620      	mov	r0, r4
 8016c54:	4629      	mov	r1, r5
 8016c56:	f7e9 faa1 	bl	800019c <__aeabi_dsub>
 8016c5a:	4602      	mov	r2, r0
 8016c5c:	460b      	mov	r3, r1
 8016c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016c62:	f7e9 fd7d 	bl	8000760 <__aeabi_ddiv>
 8016c66:	4632      	mov	r2, r6
 8016c68:	4604      	mov	r4, r0
 8016c6a:	460d      	mov	r5, r1
 8016c6c:	463b      	mov	r3, r7
 8016c6e:	4640      	mov	r0, r8
 8016c70:	4649      	mov	r1, r9
 8016c72:	f7e9 fc4b 	bl	800050c <__aeabi_dmul>
 8016c76:	4632      	mov	r2, r6
 8016c78:	463b      	mov	r3, r7
 8016c7a:	f7e9 fa91 	bl	80001a0 <__adddf3>
 8016c7e:	4602      	mov	r2, r0
 8016c80:	460b      	mov	r3, r1
 8016c82:	4620      	mov	r0, r4
 8016c84:	4629      	mov	r1, r5
 8016c86:	f7e9 fa89 	bl	800019c <__aeabi_dsub>
 8016c8a:	4642      	mov	r2, r8
 8016c8c:	464b      	mov	r3, r9
 8016c8e:	f7e9 fa85 	bl	800019c <__aeabi_dsub>
 8016c92:	4602      	mov	r2, r0
 8016c94:	460b      	mov	r3, r1
 8016c96:	2000      	movs	r0, #0
 8016c98:	4939      	ldr	r1, [pc, #228]	; (8016d80 <__ieee754_pow+0xa08>)
 8016c9a:	f7e9 fa7f 	bl	800019c <__aeabi_dsub>
 8016c9e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016ca2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016ca6:	da2b      	bge.n	8016d00 <__ieee754_pow+0x988>
 8016ca8:	4652      	mov	r2, sl
 8016caa:	f002 fcd9 	bl	8019660 <scalbn>
 8016cae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016cb2:	f7ff bbf6 	b.w	80164a2 <__ieee754_pow+0x12a>
 8016cb6:	4b33      	ldr	r3, [pc, #204]	; (8016d84 <__ieee754_pow+0xa0c>)
 8016cb8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8016cbc:	429f      	cmp	r7, r3
 8016cbe:	f77f af13 	ble.w	8016ae8 <__ieee754_pow+0x770>
 8016cc2:	4b31      	ldr	r3, [pc, #196]	; (8016d88 <__ieee754_pow+0xa10>)
 8016cc4:	440b      	add	r3, r1
 8016cc6:	4303      	orrs	r3, r0
 8016cc8:	d00b      	beq.n	8016ce2 <__ieee754_pow+0x96a>
 8016cca:	a329      	add	r3, pc, #164	; (adr r3, 8016d70 <__ieee754_pow+0x9f8>)
 8016ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016cd4:	f7e9 fc1a 	bl	800050c <__aeabi_dmul>
 8016cd8:	a325      	add	r3, pc, #148	; (adr r3, 8016d70 <__ieee754_pow+0x9f8>)
 8016cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cde:	f7ff bbe0 	b.w	80164a2 <__ieee754_pow+0x12a>
 8016ce2:	4622      	mov	r2, r4
 8016ce4:	462b      	mov	r3, r5
 8016ce6:	f7e9 fa59 	bl	800019c <__aeabi_dsub>
 8016cea:	4642      	mov	r2, r8
 8016cec:	464b      	mov	r3, r9
 8016cee:	f7e9 fe93 	bl	8000a18 <__aeabi_dcmpge>
 8016cf2:	2800      	cmp	r0, #0
 8016cf4:	f43f aef8 	beq.w	8016ae8 <__ieee754_pow+0x770>
 8016cf8:	e7e7      	b.n	8016cca <__ieee754_pow+0x952>
 8016cfa:	f04f 0a00 	mov.w	sl, #0
 8016cfe:	e71e      	b.n	8016b3e <__ieee754_pow+0x7c6>
 8016d00:	4621      	mov	r1, r4
 8016d02:	e7d4      	b.n	8016cae <__ieee754_pow+0x936>
 8016d04:	f04f 0b00 	mov.w	fp, #0
 8016d08:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016d80 <__ieee754_pow+0xa08>
 8016d0c:	f7ff bb95 	b.w	801643a <__ieee754_pow+0xc2>
 8016d10:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8016d14:	f7ff bb91 	b.w	801643a <__ieee754_pow+0xc2>
 8016d18:	4638      	mov	r0, r7
 8016d1a:	4641      	mov	r1, r8
 8016d1c:	f7ff bbc3 	b.w	80164a6 <__ieee754_pow+0x12e>
 8016d20:	9200      	str	r2, [sp, #0]
 8016d22:	f7ff bb9f 	b.w	8016464 <__ieee754_pow+0xec>
 8016d26:	bf00      	nop
 8016d28:	652b82fe 	.word	0x652b82fe
 8016d2c:	3c971547 	.word	0x3c971547
 8016d30:	00000000 	.word	0x00000000
 8016d34:	3fe62e43 	.word	0x3fe62e43
 8016d38:	fefa39ef 	.word	0xfefa39ef
 8016d3c:	3fe62e42 	.word	0x3fe62e42
 8016d40:	0ca86c39 	.word	0x0ca86c39
 8016d44:	be205c61 	.word	0xbe205c61
 8016d48:	72bea4d0 	.word	0x72bea4d0
 8016d4c:	3e663769 	.word	0x3e663769
 8016d50:	c5d26bf1 	.word	0xc5d26bf1
 8016d54:	3ebbbd41 	.word	0x3ebbbd41
 8016d58:	af25de2c 	.word	0xaf25de2c
 8016d5c:	3f11566a 	.word	0x3f11566a
 8016d60:	16bebd93 	.word	0x16bebd93
 8016d64:	3f66c16c 	.word	0x3f66c16c
 8016d68:	5555553e 	.word	0x5555553e
 8016d6c:	3fc55555 	.word	0x3fc55555
 8016d70:	c2f8f359 	.word	0xc2f8f359
 8016d74:	01a56e1f 	.word	0x01a56e1f
 8016d78:	3fe00000 	.word	0x3fe00000
 8016d7c:	000fffff 	.word	0x000fffff
 8016d80:	3ff00000 	.word	0x3ff00000
 8016d84:	4090cbff 	.word	0x4090cbff
 8016d88:	3f6f3400 	.word	0x3f6f3400
 8016d8c:	00000000 	.word	0x00000000

08016d90 <__ieee754_rem_pio2>:
 8016d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d94:	4614      	mov	r4, r2
 8016d96:	4ac2      	ldr	r2, [pc, #776]	; (80170a0 <__ieee754_rem_pio2+0x310>)
 8016d98:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8016d9c:	4592      	cmp	sl, r2
 8016d9e:	b08d      	sub	sp, #52	; 0x34
 8016da0:	468b      	mov	fp, r1
 8016da2:	dc07      	bgt.n	8016db4 <__ieee754_rem_pio2+0x24>
 8016da4:	2200      	movs	r2, #0
 8016da6:	2300      	movs	r3, #0
 8016da8:	e9c4 0100 	strd	r0, r1, [r4]
 8016dac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8016db0:	2500      	movs	r5, #0
 8016db2:	e023      	b.n	8016dfc <__ieee754_rem_pio2+0x6c>
 8016db4:	4abb      	ldr	r2, [pc, #748]	; (80170a4 <__ieee754_rem_pio2+0x314>)
 8016db6:	4592      	cmp	sl, r2
 8016db8:	dc71      	bgt.n	8016e9e <__ieee754_rem_pio2+0x10e>
 8016dba:	a3ab      	add	r3, pc, #684	; (adr r3, 8017068 <__ieee754_rem_pio2+0x2d8>)
 8016dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dc0:	2900      	cmp	r1, #0
 8016dc2:	4db9      	ldr	r5, [pc, #740]	; (80170a8 <__ieee754_rem_pio2+0x318>)
 8016dc4:	dd36      	ble.n	8016e34 <__ieee754_rem_pio2+0xa4>
 8016dc6:	f7e9 f9e9 	bl	800019c <__aeabi_dsub>
 8016dca:	45aa      	cmp	sl, r5
 8016dcc:	4606      	mov	r6, r0
 8016dce:	460f      	mov	r7, r1
 8016dd0:	d018      	beq.n	8016e04 <__ieee754_rem_pio2+0x74>
 8016dd2:	a3a7      	add	r3, pc, #668	; (adr r3, 8017070 <__ieee754_rem_pio2+0x2e0>)
 8016dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd8:	f7e9 f9e0 	bl	800019c <__aeabi_dsub>
 8016ddc:	4602      	mov	r2, r0
 8016dde:	460b      	mov	r3, r1
 8016de0:	4630      	mov	r0, r6
 8016de2:	e9c4 2300 	strd	r2, r3, [r4]
 8016de6:	4639      	mov	r1, r7
 8016de8:	f7e9 f9d8 	bl	800019c <__aeabi_dsub>
 8016dec:	a3a0      	add	r3, pc, #640	; (adr r3, 8017070 <__ieee754_rem_pio2+0x2e0>)
 8016dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016df2:	f7e9 f9d3 	bl	800019c <__aeabi_dsub>
 8016df6:	2501      	movs	r5, #1
 8016df8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016dfc:	4628      	mov	r0, r5
 8016dfe:	b00d      	add	sp, #52	; 0x34
 8016e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e04:	a39c      	add	r3, pc, #624	; (adr r3, 8017078 <__ieee754_rem_pio2+0x2e8>)
 8016e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e0a:	f7e9 f9c7 	bl	800019c <__aeabi_dsub>
 8016e0e:	a39c      	add	r3, pc, #624	; (adr r3, 8017080 <__ieee754_rem_pio2+0x2f0>)
 8016e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e14:	4606      	mov	r6, r0
 8016e16:	460f      	mov	r7, r1
 8016e18:	f7e9 f9c0 	bl	800019c <__aeabi_dsub>
 8016e1c:	4602      	mov	r2, r0
 8016e1e:	460b      	mov	r3, r1
 8016e20:	4630      	mov	r0, r6
 8016e22:	e9c4 2300 	strd	r2, r3, [r4]
 8016e26:	4639      	mov	r1, r7
 8016e28:	f7e9 f9b8 	bl	800019c <__aeabi_dsub>
 8016e2c:	a394      	add	r3, pc, #592	; (adr r3, 8017080 <__ieee754_rem_pio2+0x2f0>)
 8016e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e32:	e7de      	b.n	8016df2 <__ieee754_rem_pio2+0x62>
 8016e34:	f7e9 f9b4 	bl	80001a0 <__adddf3>
 8016e38:	45aa      	cmp	sl, r5
 8016e3a:	4606      	mov	r6, r0
 8016e3c:	460f      	mov	r7, r1
 8016e3e:	d016      	beq.n	8016e6e <__ieee754_rem_pio2+0xde>
 8016e40:	a38b      	add	r3, pc, #556	; (adr r3, 8017070 <__ieee754_rem_pio2+0x2e0>)
 8016e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e46:	f7e9 f9ab 	bl	80001a0 <__adddf3>
 8016e4a:	4602      	mov	r2, r0
 8016e4c:	460b      	mov	r3, r1
 8016e4e:	4630      	mov	r0, r6
 8016e50:	e9c4 2300 	strd	r2, r3, [r4]
 8016e54:	4639      	mov	r1, r7
 8016e56:	f7e9 f9a1 	bl	800019c <__aeabi_dsub>
 8016e5a:	a385      	add	r3, pc, #532	; (adr r3, 8017070 <__ieee754_rem_pio2+0x2e0>)
 8016e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e60:	f7e9 f99e 	bl	80001a0 <__adddf3>
 8016e64:	f04f 35ff 	mov.w	r5, #4294967295
 8016e68:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016e6c:	e7c6      	b.n	8016dfc <__ieee754_rem_pio2+0x6c>
 8016e6e:	a382      	add	r3, pc, #520	; (adr r3, 8017078 <__ieee754_rem_pio2+0x2e8>)
 8016e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e74:	f7e9 f994 	bl	80001a0 <__adddf3>
 8016e78:	a381      	add	r3, pc, #516	; (adr r3, 8017080 <__ieee754_rem_pio2+0x2f0>)
 8016e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e7e:	4606      	mov	r6, r0
 8016e80:	460f      	mov	r7, r1
 8016e82:	f7e9 f98d 	bl	80001a0 <__adddf3>
 8016e86:	4602      	mov	r2, r0
 8016e88:	460b      	mov	r3, r1
 8016e8a:	4630      	mov	r0, r6
 8016e8c:	e9c4 2300 	strd	r2, r3, [r4]
 8016e90:	4639      	mov	r1, r7
 8016e92:	f7e9 f983 	bl	800019c <__aeabi_dsub>
 8016e96:	a37a      	add	r3, pc, #488	; (adr r3, 8017080 <__ieee754_rem_pio2+0x2f0>)
 8016e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e9c:	e7e0      	b.n	8016e60 <__ieee754_rem_pio2+0xd0>
 8016e9e:	4a83      	ldr	r2, [pc, #524]	; (80170ac <__ieee754_rem_pio2+0x31c>)
 8016ea0:	4592      	cmp	sl, r2
 8016ea2:	f300 80d2 	bgt.w	801704a <__ieee754_rem_pio2+0x2ba>
 8016ea6:	f002 fab9 	bl	801941c <fabs>
 8016eaa:	a377      	add	r3, pc, #476	; (adr r3, 8017088 <__ieee754_rem_pio2+0x2f8>)
 8016eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb0:	4606      	mov	r6, r0
 8016eb2:	460f      	mov	r7, r1
 8016eb4:	f7e9 fb2a 	bl	800050c <__aeabi_dmul>
 8016eb8:	2200      	movs	r2, #0
 8016eba:	4b7d      	ldr	r3, [pc, #500]	; (80170b0 <__ieee754_rem_pio2+0x320>)
 8016ebc:	f7e9 f970 	bl	80001a0 <__adddf3>
 8016ec0:	f7e9 fdd4 	bl	8000a6c <__aeabi_d2iz>
 8016ec4:	4605      	mov	r5, r0
 8016ec6:	f7e9 fab7 	bl	8000438 <__aeabi_i2d>
 8016eca:	a367      	add	r3, pc, #412	; (adr r3, 8017068 <__ieee754_rem_pio2+0x2d8>)
 8016ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ed4:	f7e9 fb1a 	bl	800050c <__aeabi_dmul>
 8016ed8:	4602      	mov	r2, r0
 8016eda:	460b      	mov	r3, r1
 8016edc:	4630      	mov	r0, r6
 8016ede:	4639      	mov	r1, r7
 8016ee0:	f7e9 f95c 	bl	800019c <__aeabi_dsub>
 8016ee4:	a362      	add	r3, pc, #392	; (adr r3, 8017070 <__ieee754_rem_pio2+0x2e0>)
 8016ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eea:	4606      	mov	r6, r0
 8016eec:	460f      	mov	r7, r1
 8016eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016ef2:	f7e9 fb0b 	bl	800050c <__aeabi_dmul>
 8016ef6:	2d1f      	cmp	r5, #31
 8016ef8:	4680      	mov	r8, r0
 8016efa:	4689      	mov	r9, r1
 8016efc:	dc0e      	bgt.n	8016f1c <__ieee754_rem_pio2+0x18c>
 8016efe:	4b6d      	ldr	r3, [pc, #436]	; (80170b4 <__ieee754_rem_pio2+0x324>)
 8016f00:	1e6a      	subs	r2, r5, #1
 8016f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f06:	4553      	cmp	r3, sl
 8016f08:	d008      	beq.n	8016f1c <__ieee754_rem_pio2+0x18c>
 8016f0a:	4642      	mov	r2, r8
 8016f0c:	464b      	mov	r3, r9
 8016f0e:	4630      	mov	r0, r6
 8016f10:	4639      	mov	r1, r7
 8016f12:	f7e9 f943 	bl	800019c <__aeabi_dsub>
 8016f16:	e9c4 0100 	strd	r0, r1, [r4]
 8016f1a:	e011      	b.n	8016f40 <__ieee754_rem_pio2+0x1b0>
 8016f1c:	464b      	mov	r3, r9
 8016f1e:	4642      	mov	r2, r8
 8016f20:	4630      	mov	r0, r6
 8016f22:	4639      	mov	r1, r7
 8016f24:	f7e9 f93a 	bl	800019c <__aeabi_dsub>
 8016f28:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8016f2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016f30:	ebaa 0303 	sub.w	r3, sl, r3
 8016f34:	2b10      	cmp	r3, #16
 8016f36:	dc1f      	bgt.n	8016f78 <__ieee754_rem_pio2+0x1e8>
 8016f38:	4602      	mov	r2, r0
 8016f3a:	460b      	mov	r3, r1
 8016f3c:	e9c4 2300 	strd	r2, r3, [r4]
 8016f40:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8016f44:	4630      	mov	r0, r6
 8016f46:	4653      	mov	r3, sl
 8016f48:	4639      	mov	r1, r7
 8016f4a:	f7e9 f927 	bl	800019c <__aeabi_dsub>
 8016f4e:	4642      	mov	r2, r8
 8016f50:	464b      	mov	r3, r9
 8016f52:	f7e9 f923 	bl	800019c <__aeabi_dsub>
 8016f56:	4602      	mov	r2, r0
 8016f58:	460b      	mov	r3, r1
 8016f5a:	f1bb 0f00 	cmp.w	fp, #0
 8016f5e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8016f62:	f6bf af4b 	bge.w	8016dfc <__ieee754_rem_pio2+0x6c>
 8016f66:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8016f6a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8016f6e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8016f72:	60e1      	str	r1, [r4, #12]
 8016f74:	426d      	negs	r5, r5
 8016f76:	e741      	b.n	8016dfc <__ieee754_rem_pio2+0x6c>
 8016f78:	a33f      	add	r3, pc, #252	; (adr r3, 8017078 <__ieee754_rem_pio2+0x2e8>)
 8016f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f82:	f7e9 fac3 	bl	800050c <__aeabi_dmul>
 8016f86:	4680      	mov	r8, r0
 8016f88:	4689      	mov	r9, r1
 8016f8a:	4602      	mov	r2, r0
 8016f8c:	460b      	mov	r3, r1
 8016f8e:	4630      	mov	r0, r6
 8016f90:	4639      	mov	r1, r7
 8016f92:	f7e9 f903 	bl	800019c <__aeabi_dsub>
 8016f96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016f9a:	4602      	mov	r2, r0
 8016f9c:	460b      	mov	r3, r1
 8016f9e:	4630      	mov	r0, r6
 8016fa0:	4639      	mov	r1, r7
 8016fa2:	f7e9 f8fb 	bl	800019c <__aeabi_dsub>
 8016fa6:	4642      	mov	r2, r8
 8016fa8:	464b      	mov	r3, r9
 8016faa:	f7e9 f8f7 	bl	800019c <__aeabi_dsub>
 8016fae:	a334      	add	r3, pc, #208	; (adr r3, 8017080 <__ieee754_rem_pio2+0x2f0>)
 8016fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb4:	4606      	mov	r6, r0
 8016fb6:	460f      	mov	r7, r1
 8016fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016fbc:	f7e9 faa6 	bl	800050c <__aeabi_dmul>
 8016fc0:	4632      	mov	r2, r6
 8016fc2:	463b      	mov	r3, r7
 8016fc4:	f7e9 f8ea 	bl	800019c <__aeabi_dsub>
 8016fc8:	460b      	mov	r3, r1
 8016fca:	4602      	mov	r2, r0
 8016fcc:	4680      	mov	r8, r0
 8016fce:	4689      	mov	r9, r1
 8016fd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016fd4:	f7e9 f8e2 	bl	800019c <__aeabi_dsub>
 8016fd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016fdc:	ebaa 0a03 	sub.w	sl, sl, r3
 8016fe0:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8016fe4:	dc06      	bgt.n	8016ff4 <__ieee754_rem_pio2+0x264>
 8016fe6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8016fea:	4602      	mov	r2, r0
 8016fec:	460b      	mov	r3, r1
 8016fee:	e9c4 2300 	strd	r2, r3, [r4]
 8016ff2:	e7a5      	b.n	8016f40 <__ieee754_rem_pio2+0x1b0>
 8016ff4:	a326      	add	r3, pc, #152	; (adr r3, 8017090 <__ieee754_rem_pio2+0x300>)
 8016ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016ffe:	f7e9 fa85 	bl	800050c <__aeabi_dmul>
 8017002:	4680      	mov	r8, r0
 8017004:	4689      	mov	r9, r1
 8017006:	4602      	mov	r2, r0
 8017008:	460b      	mov	r3, r1
 801700a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801700e:	f7e9 f8c5 	bl	800019c <__aeabi_dsub>
 8017012:	4602      	mov	r2, r0
 8017014:	460b      	mov	r3, r1
 8017016:	4606      	mov	r6, r0
 8017018:	460f      	mov	r7, r1
 801701a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801701e:	f7e9 f8bd 	bl	800019c <__aeabi_dsub>
 8017022:	4642      	mov	r2, r8
 8017024:	464b      	mov	r3, r9
 8017026:	f7e9 f8b9 	bl	800019c <__aeabi_dsub>
 801702a:	a31b      	add	r3, pc, #108	; (adr r3, 8017098 <__ieee754_rem_pio2+0x308>)
 801702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017030:	4680      	mov	r8, r0
 8017032:	4689      	mov	r9, r1
 8017034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017038:	f7e9 fa68 	bl	800050c <__aeabi_dmul>
 801703c:	4642      	mov	r2, r8
 801703e:	464b      	mov	r3, r9
 8017040:	f7e9 f8ac 	bl	800019c <__aeabi_dsub>
 8017044:	4680      	mov	r8, r0
 8017046:	4689      	mov	r9, r1
 8017048:	e75f      	b.n	8016f0a <__ieee754_rem_pio2+0x17a>
 801704a:	4a1b      	ldr	r2, [pc, #108]	; (80170b8 <__ieee754_rem_pio2+0x328>)
 801704c:	4592      	cmp	sl, r2
 801704e:	dd35      	ble.n	80170bc <__ieee754_rem_pio2+0x32c>
 8017050:	4602      	mov	r2, r0
 8017052:	460b      	mov	r3, r1
 8017054:	f7e9 f8a2 	bl	800019c <__aeabi_dsub>
 8017058:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801705c:	e9c4 0100 	strd	r0, r1, [r4]
 8017060:	e6a6      	b.n	8016db0 <__ieee754_rem_pio2+0x20>
 8017062:	bf00      	nop
 8017064:	f3af 8000 	nop.w
 8017068:	54400000 	.word	0x54400000
 801706c:	3ff921fb 	.word	0x3ff921fb
 8017070:	1a626331 	.word	0x1a626331
 8017074:	3dd0b461 	.word	0x3dd0b461
 8017078:	1a600000 	.word	0x1a600000
 801707c:	3dd0b461 	.word	0x3dd0b461
 8017080:	2e037073 	.word	0x2e037073
 8017084:	3ba3198a 	.word	0x3ba3198a
 8017088:	6dc9c883 	.word	0x6dc9c883
 801708c:	3fe45f30 	.word	0x3fe45f30
 8017090:	2e000000 	.word	0x2e000000
 8017094:	3ba3198a 	.word	0x3ba3198a
 8017098:	252049c1 	.word	0x252049c1
 801709c:	397b839a 	.word	0x397b839a
 80170a0:	3fe921fb 	.word	0x3fe921fb
 80170a4:	4002d97b 	.word	0x4002d97b
 80170a8:	3ff921fb 	.word	0x3ff921fb
 80170ac:	413921fb 	.word	0x413921fb
 80170b0:	3fe00000 	.word	0x3fe00000
 80170b4:	0801a370 	.word	0x0801a370
 80170b8:	7fefffff 	.word	0x7fefffff
 80170bc:	ea4f 552a 	mov.w	r5, sl, asr #20
 80170c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80170c4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80170c8:	460f      	mov	r7, r1
 80170ca:	4606      	mov	r6, r0
 80170cc:	f7e9 fcce 	bl	8000a6c <__aeabi_d2iz>
 80170d0:	f7e9 f9b2 	bl	8000438 <__aeabi_i2d>
 80170d4:	4602      	mov	r2, r0
 80170d6:	460b      	mov	r3, r1
 80170d8:	4630      	mov	r0, r6
 80170da:	4639      	mov	r1, r7
 80170dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80170e0:	f7e9 f85c 	bl	800019c <__aeabi_dsub>
 80170e4:	2200      	movs	r2, #0
 80170e6:	4b20      	ldr	r3, [pc, #128]	; (8017168 <__ieee754_rem_pio2+0x3d8>)
 80170e8:	f7e9 fa10 	bl	800050c <__aeabi_dmul>
 80170ec:	460f      	mov	r7, r1
 80170ee:	4606      	mov	r6, r0
 80170f0:	f7e9 fcbc 	bl	8000a6c <__aeabi_d2iz>
 80170f4:	f7e9 f9a0 	bl	8000438 <__aeabi_i2d>
 80170f8:	4602      	mov	r2, r0
 80170fa:	460b      	mov	r3, r1
 80170fc:	4630      	mov	r0, r6
 80170fe:	4639      	mov	r1, r7
 8017100:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017104:	f7e9 f84a 	bl	800019c <__aeabi_dsub>
 8017108:	2200      	movs	r2, #0
 801710a:	4b17      	ldr	r3, [pc, #92]	; (8017168 <__ieee754_rem_pio2+0x3d8>)
 801710c:	f7e9 f9fe 	bl	800050c <__aeabi_dmul>
 8017110:	f04f 0803 	mov.w	r8, #3
 8017114:	2600      	movs	r6, #0
 8017116:	2700      	movs	r7, #0
 8017118:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801711c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8017120:	4632      	mov	r2, r6
 8017122:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8017126:	463b      	mov	r3, r7
 8017128:	f108 3aff 	add.w	sl, r8, #4294967295
 801712c:	f7e9 fc56 	bl	80009dc <__aeabi_dcmpeq>
 8017130:	b9b8      	cbnz	r0, 8017162 <__ieee754_rem_pio2+0x3d2>
 8017132:	4b0e      	ldr	r3, [pc, #56]	; (801716c <__ieee754_rem_pio2+0x3dc>)
 8017134:	462a      	mov	r2, r5
 8017136:	9301      	str	r3, [sp, #4]
 8017138:	2302      	movs	r3, #2
 801713a:	4621      	mov	r1, r4
 801713c:	9300      	str	r3, [sp, #0]
 801713e:	a806      	add	r0, sp, #24
 8017140:	4643      	mov	r3, r8
 8017142:	f001 f84b 	bl	80181dc <__kernel_rem_pio2>
 8017146:	f1bb 0f00 	cmp.w	fp, #0
 801714a:	4605      	mov	r5, r0
 801714c:	f6bf ae56 	bge.w	8016dfc <__ieee754_rem_pio2+0x6c>
 8017150:	6863      	ldr	r3, [r4, #4]
 8017152:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017156:	6063      	str	r3, [r4, #4]
 8017158:	68e3      	ldr	r3, [r4, #12]
 801715a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801715e:	60e3      	str	r3, [r4, #12]
 8017160:	e708      	b.n	8016f74 <__ieee754_rem_pio2+0x1e4>
 8017162:	46d0      	mov	r8, sl
 8017164:	e7dc      	b.n	8017120 <__ieee754_rem_pio2+0x390>
 8017166:	bf00      	nop
 8017168:	41700000 	.word	0x41700000
 801716c:	0801a3f0 	.word	0x0801a3f0

08017170 <__ieee754_sqrt>:
 8017170:	4b54      	ldr	r3, [pc, #336]	; (80172c4 <__ieee754_sqrt+0x154>)
 8017172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017176:	438b      	bics	r3, r1
 8017178:	4606      	mov	r6, r0
 801717a:	460d      	mov	r5, r1
 801717c:	460a      	mov	r2, r1
 801717e:	460c      	mov	r4, r1
 8017180:	d10f      	bne.n	80171a2 <__ieee754_sqrt+0x32>
 8017182:	4602      	mov	r2, r0
 8017184:	460b      	mov	r3, r1
 8017186:	f7e9 f9c1 	bl	800050c <__aeabi_dmul>
 801718a:	4602      	mov	r2, r0
 801718c:	460b      	mov	r3, r1
 801718e:	4630      	mov	r0, r6
 8017190:	4629      	mov	r1, r5
 8017192:	f7e9 f805 	bl	80001a0 <__adddf3>
 8017196:	4606      	mov	r6, r0
 8017198:	460d      	mov	r5, r1
 801719a:	4630      	mov	r0, r6
 801719c:	4629      	mov	r1, r5
 801719e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171a2:	2900      	cmp	r1, #0
 80171a4:	4607      	mov	r7, r0
 80171a6:	4603      	mov	r3, r0
 80171a8:	dc0e      	bgt.n	80171c8 <__ieee754_sqrt+0x58>
 80171aa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80171ae:	ea5c 0707 	orrs.w	r7, ip, r7
 80171b2:	d0f2      	beq.n	801719a <__ieee754_sqrt+0x2a>
 80171b4:	b141      	cbz	r1, 80171c8 <__ieee754_sqrt+0x58>
 80171b6:	4602      	mov	r2, r0
 80171b8:	460b      	mov	r3, r1
 80171ba:	f7e8 ffef 	bl	800019c <__aeabi_dsub>
 80171be:	4602      	mov	r2, r0
 80171c0:	460b      	mov	r3, r1
 80171c2:	f7e9 facd 	bl	8000760 <__aeabi_ddiv>
 80171c6:	e7e6      	b.n	8017196 <__ieee754_sqrt+0x26>
 80171c8:	1512      	asrs	r2, r2, #20
 80171ca:	d074      	beq.n	80172b6 <__ieee754_sqrt+0x146>
 80171cc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80171d0:	07d5      	lsls	r5, r2, #31
 80171d2:	f04f 0500 	mov.w	r5, #0
 80171d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80171da:	bf48      	it	mi
 80171dc:	0fd9      	lsrmi	r1, r3, #31
 80171de:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80171e2:	bf44      	itt	mi
 80171e4:	005b      	lslmi	r3, r3, #1
 80171e6:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80171ea:	1051      	asrs	r1, r2, #1
 80171ec:	0fda      	lsrs	r2, r3, #31
 80171ee:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80171f2:	4628      	mov	r0, r5
 80171f4:	2216      	movs	r2, #22
 80171f6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80171fa:	005b      	lsls	r3, r3, #1
 80171fc:	1987      	adds	r7, r0, r6
 80171fe:	42a7      	cmp	r7, r4
 8017200:	bfde      	ittt	le
 8017202:	19b8      	addle	r0, r7, r6
 8017204:	1be4      	suble	r4, r4, r7
 8017206:	19ad      	addle	r5, r5, r6
 8017208:	0fdf      	lsrs	r7, r3, #31
 801720a:	3a01      	subs	r2, #1
 801720c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8017210:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017214:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017218:	d1f0      	bne.n	80171fc <__ieee754_sqrt+0x8c>
 801721a:	f04f 0c20 	mov.w	ip, #32
 801721e:	4696      	mov	lr, r2
 8017220:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8017224:	4284      	cmp	r4, r0
 8017226:	eb06 070e 	add.w	r7, r6, lr
 801722a:	dc02      	bgt.n	8017232 <__ieee754_sqrt+0xc2>
 801722c:	d112      	bne.n	8017254 <__ieee754_sqrt+0xe4>
 801722e:	429f      	cmp	r7, r3
 8017230:	d810      	bhi.n	8017254 <__ieee754_sqrt+0xe4>
 8017232:	2f00      	cmp	r7, #0
 8017234:	eb07 0e06 	add.w	lr, r7, r6
 8017238:	da42      	bge.n	80172c0 <__ieee754_sqrt+0x150>
 801723a:	f1be 0f00 	cmp.w	lr, #0
 801723e:	db3f      	blt.n	80172c0 <__ieee754_sqrt+0x150>
 8017240:	f100 0801 	add.w	r8, r0, #1
 8017244:	1a24      	subs	r4, r4, r0
 8017246:	4640      	mov	r0, r8
 8017248:	429f      	cmp	r7, r3
 801724a:	bf88      	it	hi
 801724c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8017250:	1bdb      	subs	r3, r3, r7
 8017252:	4432      	add	r2, r6
 8017254:	0064      	lsls	r4, r4, #1
 8017256:	f1bc 0c01 	subs.w	ip, ip, #1
 801725a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 801725e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017262:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017266:	d1dd      	bne.n	8017224 <__ieee754_sqrt+0xb4>
 8017268:	4323      	orrs	r3, r4
 801726a:	d006      	beq.n	801727a <__ieee754_sqrt+0x10a>
 801726c:	1c54      	adds	r4, r2, #1
 801726e:	bf0b      	itete	eq
 8017270:	4662      	moveq	r2, ip
 8017272:	3201      	addne	r2, #1
 8017274:	3501      	addeq	r5, #1
 8017276:	f022 0201 	bicne.w	r2, r2, #1
 801727a:	106b      	asrs	r3, r5, #1
 801727c:	0852      	lsrs	r2, r2, #1
 801727e:	07e8      	lsls	r0, r5, #31
 8017280:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8017284:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8017288:	bf48      	it	mi
 801728a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801728e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8017292:	4616      	mov	r6, r2
 8017294:	e781      	b.n	801719a <__ieee754_sqrt+0x2a>
 8017296:	0adc      	lsrs	r4, r3, #11
 8017298:	3915      	subs	r1, #21
 801729a:	055b      	lsls	r3, r3, #21
 801729c:	2c00      	cmp	r4, #0
 801729e:	d0fa      	beq.n	8017296 <__ieee754_sqrt+0x126>
 80172a0:	02e6      	lsls	r6, r4, #11
 80172a2:	d50a      	bpl.n	80172ba <__ieee754_sqrt+0x14a>
 80172a4:	f1c2 0020 	rsb	r0, r2, #32
 80172a8:	fa23 f000 	lsr.w	r0, r3, r0
 80172ac:	1e55      	subs	r5, r2, #1
 80172ae:	4093      	lsls	r3, r2
 80172b0:	4304      	orrs	r4, r0
 80172b2:	1b4a      	subs	r2, r1, r5
 80172b4:	e78a      	b.n	80171cc <__ieee754_sqrt+0x5c>
 80172b6:	4611      	mov	r1, r2
 80172b8:	e7f0      	b.n	801729c <__ieee754_sqrt+0x12c>
 80172ba:	0064      	lsls	r4, r4, #1
 80172bc:	3201      	adds	r2, #1
 80172be:	e7ef      	b.n	80172a0 <__ieee754_sqrt+0x130>
 80172c0:	4680      	mov	r8, r0
 80172c2:	e7bf      	b.n	8017244 <__ieee754_sqrt+0xd4>
 80172c4:	7ff00000 	.word	0x7ff00000

080172c8 <__ieee754_asinf>:
 80172c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172cc:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80172d0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80172d4:	4604      	mov	r4, r0
 80172d6:	4607      	mov	r7, r0
 80172d8:	d10c      	bne.n	80172f4 <__ieee754_asinf+0x2c>
 80172da:	498c      	ldr	r1, [pc, #560]	; (801750c <__ieee754_asinf+0x244>)
 80172dc:	f7e9 fd6c 	bl	8000db8 <__aeabi_fmul>
 80172e0:	498b      	ldr	r1, [pc, #556]	; (8017510 <__ieee754_asinf+0x248>)
 80172e2:	4605      	mov	r5, r0
 80172e4:	4620      	mov	r0, r4
 80172e6:	f7e9 fd67 	bl	8000db8 <__aeabi_fmul>
 80172ea:	4601      	mov	r1, r0
 80172ec:	4628      	mov	r0, r5
 80172ee:	f7e9 fc5b 	bl	8000ba8 <__addsf3>
 80172f2:	e006      	b.n	8017302 <__ieee754_asinf+0x3a>
 80172f4:	dd09      	ble.n	801730a <__ieee754_asinf+0x42>
 80172f6:	4601      	mov	r1, r0
 80172f8:	f7e9 fc54 	bl	8000ba4 <__aeabi_fsub>
 80172fc:	4601      	mov	r1, r0
 80172fe:	f7e9 fe0f 	bl	8000f20 <__aeabi_fdiv>
 8017302:	4604      	mov	r4, r0
 8017304:	4620      	mov	r0, r4
 8017306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801730a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801730e:	da0b      	bge.n	8017328 <__ieee754_asinf+0x60>
 8017310:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 8017314:	da73      	bge.n	80173fe <__ieee754_asinf+0x136>
 8017316:	497f      	ldr	r1, [pc, #508]	; (8017514 <__ieee754_asinf+0x24c>)
 8017318:	f7e9 fc46 	bl	8000ba8 <__addsf3>
 801731c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8017320:	f7e9 ff06 	bl	8001130 <__aeabi_fcmpgt>
 8017324:	2800      	cmp	r0, #0
 8017326:	d1ed      	bne.n	8017304 <__ieee754_asinf+0x3c>
 8017328:	4620      	mov	r0, r4
 801732a:	f002 fb13 	bl	8019954 <fabsf>
 801732e:	4601      	mov	r1, r0
 8017330:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017334:	f7e9 fc36 	bl	8000ba4 <__aeabi_fsub>
 8017338:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801733c:	f7e9 fd3c 	bl	8000db8 <__aeabi_fmul>
 8017340:	4604      	mov	r4, r0
 8017342:	4975      	ldr	r1, [pc, #468]	; (8017518 <__ieee754_asinf+0x250>)
 8017344:	f7e9 fd38 	bl	8000db8 <__aeabi_fmul>
 8017348:	4974      	ldr	r1, [pc, #464]	; (801751c <__ieee754_asinf+0x254>)
 801734a:	f7e9 fc2d 	bl	8000ba8 <__addsf3>
 801734e:	4621      	mov	r1, r4
 8017350:	f7e9 fd32 	bl	8000db8 <__aeabi_fmul>
 8017354:	4972      	ldr	r1, [pc, #456]	; (8017520 <__ieee754_asinf+0x258>)
 8017356:	f7e9 fc25 	bl	8000ba4 <__aeabi_fsub>
 801735a:	4621      	mov	r1, r4
 801735c:	f7e9 fd2c 	bl	8000db8 <__aeabi_fmul>
 8017360:	4970      	ldr	r1, [pc, #448]	; (8017524 <__ieee754_asinf+0x25c>)
 8017362:	f7e9 fc21 	bl	8000ba8 <__addsf3>
 8017366:	4621      	mov	r1, r4
 8017368:	f7e9 fd26 	bl	8000db8 <__aeabi_fmul>
 801736c:	496e      	ldr	r1, [pc, #440]	; (8017528 <__ieee754_asinf+0x260>)
 801736e:	f7e9 fc19 	bl	8000ba4 <__aeabi_fsub>
 8017372:	4621      	mov	r1, r4
 8017374:	f7e9 fd20 	bl	8000db8 <__aeabi_fmul>
 8017378:	496c      	ldr	r1, [pc, #432]	; (801752c <__ieee754_asinf+0x264>)
 801737a:	f7e9 fc15 	bl	8000ba8 <__addsf3>
 801737e:	4621      	mov	r1, r4
 8017380:	f7e9 fd1a 	bl	8000db8 <__aeabi_fmul>
 8017384:	496a      	ldr	r1, [pc, #424]	; (8017530 <__ieee754_asinf+0x268>)
 8017386:	4680      	mov	r8, r0
 8017388:	4620      	mov	r0, r4
 801738a:	f7e9 fd15 	bl	8000db8 <__aeabi_fmul>
 801738e:	4969      	ldr	r1, [pc, #420]	; (8017534 <__ieee754_asinf+0x26c>)
 8017390:	f7e9 fc08 	bl	8000ba4 <__aeabi_fsub>
 8017394:	4621      	mov	r1, r4
 8017396:	f7e9 fd0f 	bl	8000db8 <__aeabi_fmul>
 801739a:	4967      	ldr	r1, [pc, #412]	; (8017538 <__ieee754_asinf+0x270>)
 801739c:	f7e9 fc04 	bl	8000ba8 <__addsf3>
 80173a0:	4621      	mov	r1, r4
 80173a2:	f7e9 fd09 	bl	8000db8 <__aeabi_fmul>
 80173a6:	4965      	ldr	r1, [pc, #404]	; (801753c <__ieee754_asinf+0x274>)
 80173a8:	f7e9 fbfc 	bl	8000ba4 <__aeabi_fsub>
 80173ac:	4621      	mov	r1, r4
 80173ae:	f7e9 fd03 	bl	8000db8 <__aeabi_fmul>
 80173b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80173b6:	f7e9 fbf7 	bl	8000ba8 <__addsf3>
 80173ba:	4681      	mov	r9, r0
 80173bc:	4620      	mov	r0, r4
 80173be:	f000 fdf9 	bl	8017fb4 <__ieee754_sqrtf>
 80173c2:	4b5f      	ldr	r3, [pc, #380]	; (8017540 <__ieee754_asinf+0x278>)
 80173c4:	4606      	mov	r6, r0
 80173c6:	429d      	cmp	r5, r3
 80173c8:	dd63      	ble.n	8017492 <__ieee754_asinf+0x1ca>
 80173ca:	4649      	mov	r1, r9
 80173cc:	4640      	mov	r0, r8
 80173ce:	f7e9 fda7 	bl	8000f20 <__aeabi_fdiv>
 80173d2:	4631      	mov	r1, r6
 80173d4:	f7e9 fcf0 	bl	8000db8 <__aeabi_fmul>
 80173d8:	4631      	mov	r1, r6
 80173da:	f7e9 fbe5 	bl	8000ba8 <__addsf3>
 80173de:	4601      	mov	r1, r0
 80173e0:	f7e9 fbe2 	bl	8000ba8 <__addsf3>
 80173e4:	4957      	ldr	r1, [pc, #348]	; (8017544 <__ieee754_asinf+0x27c>)
 80173e6:	f7e9 fbdf 	bl	8000ba8 <__addsf3>
 80173ea:	4601      	mov	r1, r0
 80173ec:	4847      	ldr	r0, [pc, #284]	; (801750c <__ieee754_asinf+0x244>)
 80173ee:	f7e9 fbd9 	bl	8000ba4 <__aeabi_fsub>
 80173f2:	2f00      	cmp	r7, #0
 80173f4:	4604      	mov	r4, r0
 80173f6:	bfd8      	it	le
 80173f8:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 80173fc:	e782      	b.n	8017304 <__ieee754_asinf+0x3c>
 80173fe:	4601      	mov	r1, r0
 8017400:	f7e9 fcda 	bl	8000db8 <__aeabi_fmul>
 8017404:	4605      	mov	r5, r0
 8017406:	4944      	ldr	r1, [pc, #272]	; (8017518 <__ieee754_asinf+0x250>)
 8017408:	f7e9 fcd6 	bl	8000db8 <__aeabi_fmul>
 801740c:	4943      	ldr	r1, [pc, #268]	; (801751c <__ieee754_asinf+0x254>)
 801740e:	f7e9 fbcb 	bl	8000ba8 <__addsf3>
 8017412:	4629      	mov	r1, r5
 8017414:	f7e9 fcd0 	bl	8000db8 <__aeabi_fmul>
 8017418:	4941      	ldr	r1, [pc, #260]	; (8017520 <__ieee754_asinf+0x258>)
 801741a:	f7e9 fbc3 	bl	8000ba4 <__aeabi_fsub>
 801741e:	4629      	mov	r1, r5
 8017420:	f7e9 fcca 	bl	8000db8 <__aeabi_fmul>
 8017424:	493f      	ldr	r1, [pc, #252]	; (8017524 <__ieee754_asinf+0x25c>)
 8017426:	f7e9 fbbf 	bl	8000ba8 <__addsf3>
 801742a:	4629      	mov	r1, r5
 801742c:	f7e9 fcc4 	bl	8000db8 <__aeabi_fmul>
 8017430:	493d      	ldr	r1, [pc, #244]	; (8017528 <__ieee754_asinf+0x260>)
 8017432:	f7e9 fbb7 	bl	8000ba4 <__aeabi_fsub>
 8017436:	4629      	mov	r1, r5
 8017438:	f7e9 fcbe 	bl	8000db8 <__aeabi_fmul>
 801743c:	493b      	ldr	r1, [pc, #236]	; (801752c <__ieee754_asinf+0x264>)
 801743e:	f7e9 fbb3 	bl	8000ba8 <__addsf3>
 8017442:	4629      	mov	r1, r5
 8017444:	f7e9 fcb8 	bl	8000db8 <__aeabi_fmul>
 8017448:	4939      	ldr	r1, [pc, #228]	; (8017530 <__ieee754_asinf+0x268>)
 801744a:	4606      	mov	r6, r0
 801744c:	4628      	mov	r0, r5
 801744e:	f7e9 fcb3 	bl	8000db8 <__aeabi_fmul>
 8017452:	4938      	ldr	r1, [pc, #224]	; (8017534 <__ieee754_asinf+0x26c>)
 8017454:	f7e9 fba6 	bl	8000ba4 <__aeabi_fsub>
 8017458:	4629      	mov	r1, r5
 801745a:	f7e9 fcad 	bl	8000db8 <__aeabi_fmul>
 801745e:	4936      	ldr	r1, [pc, #216]	; (8017538 <__ieee754_asinf+0x270>)
 8017460:	f7e9 fba2 	bl	8000ba8 <__addsf3>
 8017464:	4629      	mov	r1, r5
 8017466:	f7e9 fca7 	bl	8000db8 <__aeabi_fmul>
 801746a:	4934      	ldr	r1, [pc, #208]	; (801753c <__ieee754_asinf+0x274>)
 801746c:	f7e9 fb9a 	bl	8000ba4 <__aeabi_fsub>
 8017470:	4629      	mov	r1, r5
 8017472:	f7e9 fca1 	bl	8000db8 <__aeabi_fmul>
 8017476:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801747a:	f7e9 fb95 	bl	8000ba8 <__addsf3>
 801747e:	4601      	mov	r1, r0
 8017480:	4630      	mov	r0, r6
 8017482:	f7e9 fd4d 	bl	8000f20 <__aeabi_fdiv>
 8017486:	4621      	mov	r1, r4
 8017488:	f7e9 fc96 	bl	8000db8 <__aeabi_fmul>
 801748c:	4601      	mov	r1, r0
 801748e:	4620      	mov	r0, r4
 8017490:	e72d      	b.n	80172ee <__ieee754_asinf+0x26>
 8017492:	4601      	mov	r1, r0
 8017494:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8017498:	f7e9 fb86 	bl	8000ba8 <__addsf3>
 801749c:	4649      	mov	r1, r9
 801749e:	4682      	mov	sl, r0
 80174a0:	4640      	mov	r0, r8
 80174a2:	f7e9 fd3d 	bl	8000f20 <__aeabi_fdiv>
 80174a6:	4601      	mov	r1, r0
 80174a8:	4650      	mov	r0, sl
 80174aa:	f7e9 fc85 	bl	8000db8 <__aeabi_fmul>
 80174ae:	f025 050f 	bic.w	r5, r5, #15
 80174b2:	4680      	mov	r8, r0
 80174b4:	4629      	mov	r1, r5
 80174b6:	4628      	mov	r0, r5
 80174b8:	f7e9 fc7e 	bl	8000db8 <__aeabi_fmul>
 80174bc:	4601      	mov	r1, r0
 80174be:	4620      	mov	r0, r4
 80174c0:	f7e9 fb70 	bl	8000ba4 <__aeabi_fsub>
 80174c4:	4631      	mov	r1, r6
 80174c6:	4604      	mov	r4, r0
 80174c8:	4628      	mov	r0, r5
 80174ca:	f7e9 fb6d 	bl	8000ba8 <__addsf3>
 80174ce:	4601      	mov	r1, r0
 80174d0:	4620      	mov	r0, r4
 80174d2:	f7e9 fd25 	bl	8000f20 <__aeabi_fdiv>
 80174d6:	4601      	mov	r1, r0
 80174d8:	f7e9 fb66 	bl	8000ba8 <__addsf3>
 80174dc:	4601      	mov	r1, r0
 80174de:	480c      	ldr	r0, [pc, #48]	; (8017510 <__ieee754_asinf+0x248>)
 80174e0:	f7e9 fb60 	bl	8000ba4 <__aeabi_fsub>
 80174e4:	4601      	mov	r1, r0
 80174e6:	4640      	mov	r0, r8
 80174e8:	f7e9 fb5c 	bl	8000ba4 <__aeabi_fsub>
 80174ec:	4629      	mov	r1, r5
 80174ee:	4604      	mov	r4, r0
 80174f0:	4628      	mov	r0, r5
 80174f2:	f7e9 fb59 	bl	8000ba8 <__addsf3>
 80174f6:	4601      	mov	r1, r0
 80174f8:	4813      	ldr	r0, [pc, #76]	; (8017548 <__ieee754_asinf+0x280>)
 80174fa:	f7e9 fb53 	bl	8000ba4 <__aeabi_fsub>
 80174fe:	4601      	mov	r1, r0
 8017500:	4620      	mov	r0, r4
 8017502:	f7e9 fb4f 	bl	8000ba4 <__aeabi_fsub>
 8017506:	4601      	mov	r1, r0
 8017508:	480f      	ldr	r0, [pc, #60]	; (8017548 <__ieee754_asinf+0x280>)
 801750a:	e770      	b.n	80173ee <__ieee754_asinf+0x126>
 801750c:	3fc90fdb 	.word	0x3fc90fdb
 8017510:	b33bbd2e 	.word	0xb33bbd2e
 8017514:	7149f2ca 	.word	0x7149f2ca
 8017518:	3811ef08 	.word	0x3811ef08
 801751c:	3a4f7f04 	.word	0x3a4f7f04
 8017520:	3d241146 	.word	0x3d241146
 8017524:	3e4e0aa8 	.word	0x3e4e0aa8
 8017528:	3ea6b090 	.word	0x3ea6b090
 801752c:	3e2aaaab 	.word	0x3e2aaaab
 8017530:	3d9dc62e 	.word	0x3d9dc62e
 8017534:	3f303361 	.word	0x3f303361
 8017538:	4001572d 	.word	0x4001572d
 801753c:	4019d139 	.word	0x4019d139
 8017540:	3f799999 	.word	0x3f799999
 8017544:	333bbd2e 	.word	0x333bbd2e
 8017548:	3f490fdb 	.word	0x3f490fdb

0801754c <__ieee754_atan2f>:
 801754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801754e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8017552:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8017556:	4603      	mov	r3, r0
 8017558:	dc05      	bgt.n	8017566 <__ieee754_atan2f+0x1a>
 801755a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801755e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017562:	4607      	mov	r7, r0
 8017564:	dd04      	ble.n	8017570 <__ieee754_atan2f+0x24>
 8017566:	4618      	mov	r0, r3
 8017568:	f7e9 fb1e 	bl	8000ba8 <__addsf3>
 801756c:	4603      	mov	r3, r0
 801756e:	e024      	b.n	80175ba <__ieee754_atan2f+0x6e>
 8017570:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8017574:	d103      	bne.n	801757e <__ieee754_atan2f+0x32>
 8017576:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801757a:	f002 b8df 	b.w	801973c <atanf>
 801757e:	178c      	asrs	r4, r1, #30
 8017580:	f004 0402 	and.w	r4, r4, #2
 8017584:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8017588:	b92a      	cbnz	r2, 8017596 <__ieee754_atan2f+0x4a>
 801758a:	2c02      	cmp	r4, #2
 801758c:	d057      	beq.n	801763e <__ieee754_atan2f+0xf2>
 801758e:	2c03      	cmp	r4, #3
 8017590:	d113      	bne.n	80175ba <__ieee754_atan2f+0x6e>
 8017592:	4b2d      	ldr	r3, [pc, #180]	; (8017648 <__ieee754_atan2f+0xfc>)
 8017594:	e011      	b.n	80175ba <__ieee754_atan2f+0x6e>
 8017596:	b91e      	cbnz	r6, 80175a0 <__ieee754_atan2f+0x54>
 8017598:	2f00      	cmp	r7, #0
 801759a:	da52      	bge.n	8017642 <__ieee754_atan2f+0xf6>
 801759c:	4b2b      	ldr	r3, [pc, #172]	; (801764c <__ieee754_atan2f+0x100>)
 801759e:	e00c      	b.n	80175ba <__ieee754_atan2f+0x6e>
 80175a0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80175a4:	d11a      	bne.n	80175dc <__ieee754_atan2f+0x90>
 80175a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80175aa:	d10c      	bne.n	80175c6 <__ieee754_atan2f+0x7a>
 80175ac:	2c02      	cmp	r4, #2
 80175ae:	d006      	beq.n	80175be <__ieee754_atan2f+0x72>
 80175b0:	2c03      	cmp	r4, #3
 80175b2:	d006      	beq.n	80175c2 <__ieee754_atan2f+0x76>
 80175b4:	2c01      	cmp	r4, #1
 80175b6:	d140      	bne.n	801763a <__ieee754_atan2f+0xee>
 80175b8:	4b25      	ldr	r3, [pc, #148]	; (8017650 <__ieee754_atan2f+0x104>)
 80175ba:	4618      	mov	r0, r3
 80175bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175be:	4b25      	ldr	r3, [pc, #148]	; (8017654 <__ieee754_atan2f+0x108>)
 80175c0:	e7fb      	b.n	80175ba <__ieee754_atan2f+0x6e>
 80175c2:	4b25      	ldr	r3, [pc, #148]	; (8017658 <__ieee754_atan2f+0x10c>)
 80175c4:	e7f9      	b.n	80175ba <__ieee754_atan2f+0x6e>
 80175c6:	2c02      	cmp	r4, #2
 80175c8:	d039      	beq.n	801763e <__ieee754_atan2f+0xf2>
 80175ca:	2c03      	cmp	r4, #3
 80175cc:	d0e1      	beq.n	8017592 <__ieee754_atan2f+0x46>
 80175ce:	2c01      	cmp	r4, #1
 80175d0:	d102      	bne.n	80175d8 <__ieee754_atan2f+0x8c>
 80175d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80175d6:	e7f0      	b.n	80175ba <__ieee754_atan2f+0x6e>
 80175d8:	2300      	movs	r3, #0
 80175da:	e7ee      	b.n	80175ba <__ieee754_atan2f+0x6e>
 80175dc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80175e0:	d0da      	beq.n	8017598 <__ieee754_atan2f+0x4c>
 80175e2:	1b92      	subs	r2, r2, r6
 80175e4:	15d2      	asrs	r2, r2, #23
 80175e6:	2a3c      	cmp	r2, #60	; 0x3c
 80175e8:	dc17      	bgt.n	801761a <__ieee754_atan2f+0xce>
 80175ea:	2900      	cmp	r1, #0
 80175ec:	da01      	bge.n	80175f2 <__ieee754_atan2f+0xa6>
 80175ee:	323c      	adds	r2, #60	; 0x3c
 80175f0:	db15      	blt.n	801761e <__ieee754_atan2f+0xd2>
 80175f2:	4618      	mov	r0, r3
 80175f4:	f7e9 fc94 	bl	8000f20 <__aeabi_fdiv>
 80175f8:	f002 f9ac 	bl	8019954 <fabsf>
 80175fc:	f002 f89e 	bl	801973c <atanf>
 8017600:	4603      	mov	r3, r0
 8017602:	2c01      	cmp	r4, #1
 8017604:	d00d      	beq.n	8017622 <__ieee754_atan2f+0xd6>
 8017606:	2c02      	cmp	r4, #2
 8017608:	d00e      	beq.n	8017628 <__ieee754_atan2f+0xdc>
 801760a:	2c00      	cmp	r4, #0
 801760c:	d0d5      	beq.n	80175ba <__ieee754_atan2f+0x6e>
 801760e:	4913      	ldr	r1, [pc, #76]	; (801765c <__ieee754_atan2f+0x110>)
 8017610:	4618      	mov	r0, r3
 8017612:	f7e9 fac9 	bl	8000ba8 <__addsf3>
 8017616:	4912      	ldr	r1, [pc, #72]	; (8017660 <__ieee754_atan2f+0x114>)
 8017618:	e00c      	b.n	8017634 <__ieee754_atan2f+0xe8>
 801761a:	4b12      	ldr	r3, [pc, #72]	; (8017664 <__ieee754_atan2f+0x118>)
 801761c:	e7f1      	b.n	8017602 <__ieee754_atan2f+0xb6>
 801761e:	2300      	movs	r3, #0
 8017620:	e7ef      	b.n	8017602 <__ieee754_atan2f+0xb6>
 8017622:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017626:	e7c8      	b.n	80175ba <__ieee754_atan2f+0x6e>
 8017628:	490c      	ldr	r1, [pc, #48]	; (801765c <__ieee754_atan2f+0x110>)
 801762a:	4618      	mov	r0, r3
 801762c:	f7e9 fabc 	bl	8000ba8 <__addsf3>
 8017630:	4601      	mov	r1, r0
 8017632:	480b      	ldr	r0, [pc, #44]	; (8017660 <__ieee754_atan2f+0x114>)
 8017634:	f7e9 fab6 	bl	8000ba4 <__aeabi_fsub>
 8017638:	e798      	b.n	801756c <__ieee754_atan2f+0x20>
 801763a:	4b0b      	ldr	r3, [pc, #44]	; (8017668 <__ieee754_atan2f+0x11c>)
 801763c:	e7bd      	b.n	80175ba <__ieee754_atan2f+0x6e>
 801763e:	4b08      	ldr	r3, [pc, #32]	; (8017660 <__ieee754_atan2f+0x114>)
 8017640:	e7bb      	b.n	80175ba <__ieee754_atan2f+0x6e>
 8017642:	4b08      	ldr	r3, [pc, #32]	; (8017664 <__ieee754_atan2f+0x118>)
 8017644:	e7b9      	b.n	80175ba <__ieee754_atan2f+0x6e>
 8017646:	bf00      	nop
 8017648:	c0490fdb 	.word	0xc0490fdb
 801764c:	bfc90fdb 	.word	0xbfc90fdb
 8017650:	bf490fdb 	.word	0xbf490fdb
 8017654:	4016cbe4 	.word	0x4016cbe4
 8017658:	c016cbe4 	.word	0xc016cbe4
 801765c:	33bbbd2e 	.word	0x33bbbd2e
 8017660:	40490fdb 	.word	0x40490fdb
 8017664:	3fc90fdb 	.word	0x3fc90fdb
 8017668:	3f490fdb 	.word	0x3f490fdb

0801766c <__ieee754_powf>:
 801766c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017670:	b087      	sub	sp, #28
 8017672:	9101      	str	r1, [sp, #4]
 8017674:	9c01      	ldr	r4, [sp, #4]
 8017676:	4681      	mov	r9, r0
 8017678:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 801767c:	f000 8324 	beq.w	8017cc8 <__ieee754_powf+0x65c>
 8017680:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8017684:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8017688:	4680      	mov	r8, r0
 801768a:	dc06      	bgt.n	801769a <__ieee754_powf+0x2e>
 801768c:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8017690:	dd09      	ble.n	80176a6 <__ieee754_powf+0x3a>
 8017692:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8017696:	f000 8317 	beq.w	8017cc8 <__ieee754_powf+0x65c>
 801769a:	4885      	ldr	r0, [pc, #532]	; (80178b0 <__ieee754_powf+0x244>)
 801769c:	b007      	add	sp, #28
 801769e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176a2:	f7fd bccd 	b.w	8015040 <nanf>
 80176a6:	2800      	cmp	r0, #0
 80176a8:	da1d      	bge.n	80176e6 <__ieee754_powf+0x7a>
 80176aa:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80176ae:	da2b      	bge.n	8017708 <__ieee754_powf+0x9c>
 80176b0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80176b4:	db30      	blt.n	8017718 <__ieee754_powf+0xac>
 80176b6:	15fb      	asrs	r3, r7, #23
 80176b8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80176bc:	fa47 f503 	asr.w	r5, r7, r3
 80176c0:	fa05 f303 	lsl.w	r3, r5, r3
 80176c4:	42bb      	cmp	r3, r7
 80176c6:	d127      	bne.n	8017718 <__ieee754_powf+0xac>
 80176c8:	f005 0501 	and.w	r5, r5, #1
 80176cc:	f1c5 0502 	rsb	r5, r5, #2
 80176d0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80176d4:	d122      	bne.n	801771c <__ieee754_powf+0xb0>
 80176d6:	2c00      	cmp	r4, #0
 80176d8:	4649      	mov	r1, r9
 80176da:	da11      	bge.n	8017700 <__ieee754_powf+0x94>
 80176dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80176e0:	f7e9 fc1e 	bl	8000f20 <__aeabi_fdiv>
 80176e4:	e021      	b.n	801772a <__ieee754_powf+0xbe>
 80176e6:	2500      	movs	r5, #0
 80176e8:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80176ec:	d1f0      	bne.n	80176d0 <__ieee754_powf+0x64>
 80176ee:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80176f2:	f000 82e9 	beq.w	8017cc8 <__ieee754_powf+0x65c>
 80176f6:	dd09      	ble.n	801770c <__ieee754_powf+0xa0>
 80176f8:	2c00      	cmp	r4, #0
 80176fa:	f280 82e8 	bge.w	8017cce <__ieee754_powf+0x662>
 80176fe:	2100      	movs	r1, #0
 8017700:	4608      	mov	r0, r1
 8017702:	b007      	add	sp, #28
 8017704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017708:	2502      	movs	r5, #2
 801770a:	e7ed      	b.n	80176e8 <__ieee754_powf+0x7c>
 801770c:	2c00      	cmp	r4, #0
 801770e:	daf6      	bge.n	80176fe <__ieee754_powf+0x92>
 8017710:	9b01      	ldr	r3, [sp, #4]
 8017712:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017716:	e7f3      	b.n	8017700 <__ieee754_powf+0x94>
 8017718:	2500      	movs	r5, #0
 801771a:	e7d9      	b.n	80176d0 <__ieee754_powf+0x64>
 801771c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8017720:	d105      	bne.n	801772e <__ieee754_powf+0xc2>
 8017722:	4649      	mov	r1, r9
 8017724:	4608      	mov	r0, r1
 8017726:	f7e9 fb47 	bl	8000db8 <__aeabi_fmul>
 801772a:	4601      	mov	r1, r0
 801772c:	e7e8      	b.n	8017700 <__ieee754_powf+0x94>
 801772e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8017732:	4648      	mov	r0, r9
 8017734:	d107      	bne.n	8017746 <__ieee754_powf+0xda>
 8017736:	f1b8 0f00 	cmp.w	r8, #0
 801773a:	db04      	blt.n	8017746 <__ieee754_powf+0xda>
 801773c:	b007      	add	sp, #28
 801773e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017742:	f000 bc37 	b.w	8017fb4 <__ieee754_sqrtf>
 8017746:	f002 f905 	bl	8019954 <fabsf>
 801774a:	4601      	mov	r1, r0
 801774c:	b126      	cbz	r6, 8017758 <__ieee754_powf+0xec>
 801774e:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8017752:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8017756:	d118      	bne.n	801778a <__ieee754_powf+0x11e>
 8017758:	2c00      	cmp	r4, #0
 801775a:	da04      	bge.n	8017766 <__ieee754_powf+0xfa>
 801775c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017760:	f7e9 fbde 	bl	8000f20 <__aeabi_fdiv>
 8017764:	4601      	mov	r1, r0
 8017766:	f1b8 0f00 	cmp.w	r8, #0
 801776a:	dac9      	bge.n	8017700 <__ieee754_powf+0x94>
 801776c:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 8017770:	ea50 0305 	orrs.w	r3, r0, r5
 8017774:	d104      	bne.n	8017780 <__ieee754_powf+0x114>
 8017776:	4608      	mov	r0, r1
 8017778:	f7e9 fa14 	bl	8000ba4 <__aeabi_fsub>
 801777c:	4601      	mov	r1, r0
 801777e:	e7af      	b.n	80176e0 <__ieee754_powf+0x74>
 8017780:	2d01      	cmp	r5, #1
 8017782:	d1bd      	bne.n	8017700 <__ieee754_powf+0x94>
 8017784:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8017788:	e7ba      	b.n	8017700 <__ieee754_powf+0x94>
 801778a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 801778e:	f108 33ff 	add.w	r3, r8, #4294967295
 8017792:	9303      	str	r3, [sp, #12]
 8017794:	432b      	orrs	r3, r5
 8017796:	d101      	bne.n	801779c <__ieee754_powf+0x130>
 8017798:	4649      	mov	r1, r9
 801779a:	e7ec      	b.n	8017776 <__ieee754_powf+0x10a>
 801779c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80177a0:	f340 8098 	ble.w	80178d4 <__ieee754_powf+0x268>
 80177a4:	4b43      	ldr	r3, [pc, #268]	; (80178b4 <__ieee754_powf+0x248>)
 80177a6:	429e      	cmp	r6, r3
 80177a8:	dc03      	bgt.n	80177b2 <__ieee754_powf+0x146>
 80177aa:	2c00      	cmp	r4, #0
 80177ac:	daa7      	bge.n	80176fe <__ieee754_powf+0x92>
 80177ae:	4942      	ldr	r1, [pc, #264]	; (80178b8 <__ieee754_powf+0x24c>)
 80177b0:	e7b8      	b.n	8017724 <__ieee754_powf+0xb8>
 80177b2:	4b42      	ldr	r3, [pc, #264]	; (80178bc <__ieee754_powf+0x250>)
 80177b4:	429e      	cmp	r6, r3
 80177b6:	dd02      	ble.n	80177be <__ieee754_powf+0x152>
 80177b8:	2c00      	cmp	r4, #0
 80177ba:	dcf8      	bgt.n	80177ae <__ieee754_powf+0x142>
 80177bc:	e79f      	b.n	80176fe <__ieee754_powf+0x92>
 80177be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80177c2:	f7e9 f9ef 	bl	8000ba4 <__aeabi_fsub>
 80177c6:	493e      	ldr	r1, [pc, #248]	; (80178c0 <__ieee754_powf+0x254>)
 80177c8:	4606      	mov	r6, r0
 80177ca:	f7e9 faf5 	bl	8000db8 <__aeabi_fmul>
 80177ce:	493d      	ldr	r1, [pc, #244]	; (80178c4 <__ieee754_powf+0x258>)
 80177d0:	4607      	mov	r7, r0
 80177d2:	4630      	mov	r0, r6
 80177d4:	f7e9 faf0 	bl	8000db8 <__aeabi_fmul>
 80177d8:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80177dc:	4680      	mov	r8, r0
 80177de:	4630      	mov	r0, r6
 80177e0:	f7e9 faea 	bl	8000db8 <__aeabi_fmul>
 80177e4:	4601      	mov	r1, r0
 80177e6:	4838      	ldr	r0, [pc, #224]	; (80178c8 <__ieee754_powf+0x25c>)
 80177e8:	f7e9 f9dc 	bl	8000ba4 <__aeabi_fsub>
 80177ec:	4631      	mov	r1, r6
 80177ee:	f7e9 fae3 	bl	8000db8 <__aeabi_fmul>
 80177f2:	4601      	mov	r1, r0
 80177f4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80177f8:	f7e9 f9d4 	bl	8000ba4 <__aeabi_fsub>
 80177fc:	4631      	mov	r1, r6
 80177fe:	4681      	mov	r9, r0
 8017800:	4630      	mov	r0, r6
 8017802:	f7e9 fad9 	bl	8000db8 <__aeabi_fmul>
 8017806:	4601      	mov	r1, r0
 8017808:	4648      	mov	r0, r9
 801780a:	f7e9 fad5 	bl	8000db8 <__aeabi_fmul>
 801780e:	492f      	ldr	r1, [pc, #188]	; (80178cc <__ieee754_powf+0x260>)
 8017810:	f7e9 fad2 	bl	8000db8 <__aeabi_fmul>
 8017814:	4601      	mov	r1, r0
 8017816:	4640      	mov	r0, r8
 8017818:	f7e9 f9c4 	bl	8000ba4 <__aeabi_fsub>
 801781c:	4601      	mov	r1, r0
 801781e:	4606      	mov	r6, r0
 8017820:	4638      	mov	r0, r7
 8017822:	f7e9 f9c1 	bl	8000ba8 <__addsf3>
 8017826:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 801782a:	f02a 0a0f 	bic.w	sl, sl, #15
 801782e:	4639      	mov	r1, r7
 8017830:	4650      	mov	r0, sl
 8017832:	f7e9 f9b7 	bl	8000ba4 <__aeabi_fsub>
 8017836:	4601      	mov	r1, r0
 8017838:	4630      	mov	r0, r6
 801783a:	f7e9 f9b3 	bl	8000ba4 <__aeabi_fsub>
 801783e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8017842:	9b03      	ldr	r3, [sp, #12]
 8017844:	3d01      	subs	r5, #1
 8017846:	f024 040f 	bic.w	r4, r4, #15
 801784a:	432b      	orrs	r3, r5
 801784c:	4606      	mov	r6, r0
 801784e:	4621      	mov	r1, r4
 8017850:	9801      	ldr	r0, [sp, #4]
 8017852:	bf0c      	ite	eq
 8017854:	4d1e      	ldreq	r5, [pc, #120]	; (80178d0 <__ieee754_powf+0x264>)
 8017856:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 801785a:	f7e9 f9a3 	bl	8000ba4 <__aeabi_fsub>
 801785e:	4651      	mov	r1, sl
 8017860:	f7e9 faaa 	bl	8000db8 <__aeabi_fmul>
 8017864:	9901      	ldr	r1, [sp, #4]
 8017866:	4607      	mov	r7, r0
 8017868:	4630      	mov	r0, r6
 801786a:	f7e9 faa5 	bl	8000db8 <__aeabi_fmul>
 801786e:	4601      	mov	r1, r0
 8017870:	4638      	mov	r0, r7
 8017872:	f7e9 f999 	bl	8000ba8 <__addsf3>
 8017876:	4621      	mov	r1, r4
 8017878:	4606      	mov	r6, r0
 801787a:	4650      	mov	r0, sl
 801787c:	f7e9 fa9c 	bl	8000db8 <__aeabi_fmul>
 8017880:	4601      	mov	r1, r0
 8017882:	4607      	mov	r7, r0
 8017884:	4681      	mov	r9, r0
 8017886:	4630      	mov	r0, r6
 8017888:	f7e9 f98e 	bl	8000ba8 <__addsf3>
 801788c:	2800      	cmp	r0, #0
 801788e:	4682      	mov	sl, r0
 8017890:	4680      	mov	r8, r0
 8017892:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8017896:	f340 81fb 	ble.w	8017c90 <__ieee754_powf+0x624>
 801789a:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 801789e:	f340 8149 	ble.w	8017b34 <__ieee754_powf+0x4c8>
 80178a2:	4905      	ldr	r1, [pc, #20]	; (80178b8 <__ieee754_powf+0x24c>)
 80178a4:	4628      	mov	r0, r5
 80178a6:	f7e9 fa87 	bl	8000db8 <__aeabi_fmul>
 80178aa:	4903      	ldr	r1, [pc, #12]	; (80178b8 <__ieee754_powf+0x24c>)
 80178ac:	e73b      	b.n	8017726 <__ieee754_powf+0xba>
 80178ae:	bf00      	nop
 80178b0:	0801a2f9 	.word	0x0801a2f9
 80178b4:	3f7ffff7 	.word	0x3f7ffff7
 80178b8:	7149f2ca 	.word	0x7149f2ca
 80178bc:	3f800007 	.word	0x3f800007
 80178c0:	3fb8aa00 	.word	0x3fb8aa00
 80178c4:	36eca570 	.word	0x36eca570
 80178c8:	3eaaaaab 	.word	0x3eaaaaab
 80178cc:	3fb8aa3b 	.word	0x3fb8aa3b
 80178d0:	bf800000 	.word	0xbf800000
 80178d4:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 80178d8:	f280 810a 	bge.w	8017af0 <__ieee754_powf+0x484>
 80178dc:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 80178e0:	f7e9 fa6a 	bl	8000db8 <__aeabi_fmul>
 80178e4:	f06f 0217 	mvn.w	r2, #23
 80178e8:	4606      	mov	r6, r0
 80178ea:	15f3      	asrs	r3, r6, #23
 80178ec:	3b7f      	subs	r3, #127	; 0x7f
 80178ee:	441a      	add	r2, r3
 80178f0:	4b81      	ldr	r3, [pc, #516]	; (8017af8 <__ieee754_powf+0x48c>)
 80178f2:	f3c6 0016 	ubfx	r0, r6, #0, #23
 80178f6:	4298      	cmp	r0, r3
 80178f8:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 80178fc:	dd06      	ble.n	801790c <__ieee754_powf+0x2a0>
 80178fe:	4b7f      	ldr	r3, [pc, #508]	; (8017afc <__ieee754_powf+0x490>)
 8017900:	4298      	cmp	r0, r3
 8017902:	f340 80f7 	ble.w	8017af4 <__ieee754_powf+0x488>
 8017906:	3201      	adds	r2, #1
 8017908:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 801790c:	2700      	movs	r7, #0
 801790e:	4b7c      	ldr	r3, [pc, #496]	; (8017b00 <__ieee754_powf+0x494>)
 8017910:	4630      	mov	r0, r6
 8017912:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8017916:	9205      	str	r2, [sp, #20]
 8017918:	4619      	mov	r1, r3
 801791a:	9302      	str	r3, [sp, #8]
 801791c:	f7e9 f942 	bl	8000ba4 <__aeabi_fsub>
 8017920:	4631      	mov	r1, r6
 8017922:	4683      	mov	fp, r0
 8017924:	9802      	ldr	r0, [sp, #8]
 8017926:	f7e9 f93f 	bl	8000ba8 <__addsf3>
 801792a:	4601      	mov	r1, r0
 801792c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017930:	f7e9 faf6 	bl	8000f20 <__aeabi_fdiv>
 8017934:	4601      	mov	r1, r0
 8017936:	9004      	str	r0, [sp, #16]
 8017938:	4658      	mov	r0, fp
 801793a:	f7e9 fa3d 	bl	8000db8 <__aeabi_fmul>
 801793e:	46b2      	mov	sl, r6
 8017940:	1076      	asrs	r6, r6, #1
 8017942:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8017946:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 801794a:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 801794e:	f028 080f 	bic.w	r8, r8, #15
 8017952:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 8017956:	4681      	mov	r9, r0
 8017958:	4631      	mov	r1, r6
 801795a:	4640      	mov	r0, r8
 801795c:	f7e9 fa2c 	bl	8000db8 <__aeabi_fmul>
 8017960:	4601      	mov	r1, r0
 8017962:	4658      	mov	r0, fp
 8017964:	f7e9 f91e 	bl	8000ba4 <__aeabi_fsub>
 8017968:	9902      	ldr	r1, [sp, #8]
 801796a:	4683      	mov	fp, r0
 801796c:	4630      	mov	r0, r6
 801796e:	f7e9 f919 	bl	8000ba4 <__aeabi_fsub>
 8017972:	4601      	mov	r1, r0
 8017974:	4650      	mov	r0, sl
 8017976:	f7e9 f915 	bl	8000ba4 <__aeabi_fsub>
 801797a:	4641      	mov	r1, r8
 801797c:	f7e9 fa1c 	bl	8000db8 <__aeabi_fmul>
 8017980:	4601      	mov	r1, r0
 8017982:	4658      	mov	r0, fp
 8017984:	f7e9 f90e 	bl	8000ba4 <__aeabi_fsub>
 8017988:	9b04      	ldr	r3, [sp, #16]
 801798a:	4619      	mov	r1, r3
 801798c:	f7e9 fa14 	bl	8000db8 <__aeabi_fmul>
 8017990:	4649      	mov	r1, r9
 8017992:	4683      	mov	fp, r0
 8017994:	4648      	mov	r0, r9
 8017996:	f7e9 fa0f 	bl	8000db8 <__aeabi_fmul>
 801799a:	4606      	mov	r6, r0
 801799c:	4959      	ldr	r1, [pc, #356]	; (8017b04 <__ieee754_powf+0x498>)
 801799e:	f7e9 fa0b 	bl	8000db8 <__aeabi_fmul>
 80179a2:	4959      	ldr	r1, [pc, #356]	; (8017b08 <__ieee754_powf+0x49c>)
 80179a4:	f7e9 f900 	bl	8000ba8 <__addsf3>
 80179a8:	4631      	mov	r1, r6
 80179aa:	f7e9 fa05 	bl	8000db8 <__aeabi_fmul>
 80179ae:	4957      	ldr	r1, [pc, #348]	; (8017b0c <__ieee754_powf+0x4a0>)
 80179b0:	f7e9 f8fa 	bl	8000ba8 <__addsf3>
 80179b4:	4631      	mov	r1, r6
 80179b6:	f7e9 f9ff 	bl	8000db8 <__aeabi_fmul>
 80179ba:	4955      	ldr	r1, [pc, #340]	; (8017b10 <__ieee754_powf+0x4a4>)
 80179bc:	f7e9 f8f4 	bl	8000ba8 <__addsf3>
 80179c0:	4631      	mov	r1, r6
 80179c2:	f7e9 f9f9 	bl	8000db8 <__aeabi_fmul>
 80179c6:	4953      	ldr	r1, [pc, #332]	; (8017b14 <__ieee754_powf+0x4a8>)
 80179c8:	f7e9 f8ee 	bl	8000ba8 <__addsf3>
 80179cc:	4631      	mov	r1, r6
 80179ce:	f7e9 f9f3 	bl	8000db8 <__aeabi_fmul>
 80179d2:	4951      	ldr	r1, [pc, #324]	; (8017b18 <__ieee754_powf+0x4ac>)
 80179d4:	f7e9 f8e8 	bl	8000ba8 <__addsf3>
 80179d8:	4631      	mov	r1, r6
 80179da:	4682      	mov	sl, r0
 80179dc:	4630      	mov	r0, r6
 80179de:	f7e9 f9eb 	bl	8000db8 <__aeabi_fmul>
 80179e2:	4601      	mov	r1, r0
 80179e4:	4650      	mov	r0, sl
 80179e6:	f7e9 f9e7 	bl	8000db8 <__aeabi_fmul>
 80179ea:	4606      	mov	r6, r0
 80179ec:	4649      	mov	r1, r9
 80179ee:	4640      	mov	r0, r8
 80179f0:	f7e9 f8da 	bl	8000ba8 <__addsf3>
 80179f4:	4659      	mov	r1, fp
 80179f6:	f7e9 f9df 	bl	8000db8 <__aeabi_fmul>
 80179fa:	4631      	mov	r1, r6
 80179fc:	f7e9 f8d4 	bl	8000ba8 <__addsf3>
 8017a00:	4641      	mov	r1, r8
 8017a02:	4682      	mov	sl, r0
 8017a04:	4640      	mov	r0, r8
 8017a06:	f7e9 f9d7 	bl	8000db8 <__aeabi_fmul>
 8017a0a:	4944      	ldr	r1, [pc, #272]	; (8017b1c <__ieee754_powf+0x4b0>)
 8017a0c:	9002      	str	r0, [sp, #8]
 8017a0e:	f7e9 f8cb 	bl	8000ba8 <__addsf3>
 8017a12:	4651      	mov	r1, sl
 8017a14:	f7e9 f8c8 	bl	8000ba8 <__addsf3>
 8017a18:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8017a1c:	f026 060f 	bic.w	r6, r6, #15
 8017a20:	4631      	mov	r1, r6
 8017a22:	4640      	mov	r0, r8
 8017a24:	f7e9 f9c8 	bl	8000db8 <__aeabi_fmul>
 8017a28:	493c      	ldr	r1, [pc, #240]	; (8017b1c <__ieee754_powf+0x4b0>)
 8017a2a:	4680      	mov	r8, r0
 8017a2c:	4630      	mov	r0, r6
 8017a2e:	f7e9 f8b9 	bl	8000ba4 <__aeabi_fsub>
 8017a32:	9b02      	ldr	r3, [sp, #8]
 8017a34:	4619      	mov	r1, r3
 8017a36:	f7e9 f8b5 	bl	8000ba4 <__aeabi_fsub>
 8017a3a:	4601      	mov	r1, r0
 8017a3c:	4650      	mov	r0, sl
 8017a3e:	f7e9 f8b1 	bl	8000ba4 <__aeabi_fsub>
 8017a42:	4649      	mov	r1, r9
 8017a44:	f7e9 f9b8 	bl	8000db8 <__aeabi_fmul>
 8017a48:	4659      	mov	r1, fp
 8017a4a:	4681      	mov	r9, r0
 8017a4c:	4630      	mov	r0, r6
 8017a4e:	f7e9 f9b3 	bl	8000db8 <__aeabi_fmul>
 8017a52:	4601      	mov	r1, r0
 8017a54:	4648      	mov	r0, r9
 8017a56:	f7e9 f8a7 	bl	8000ba8 <__addsf3>
 8017a5a:	4682      	mov	sl, r0
 8017a5c:	4601      	mov	r1, r0
 8017a5e:	4640      	mov	r0, r8
 8017a60:	f7e9 f8a2 	bl	8000ba8 <__addsf3>
 8017a64:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8017a68:	f029 090f 	bic.w	r9, r9, #15
 8017a6c:	492c      	ldr	r1, [pc, #176]	; (8017b20 <__ieee754_powf+0x4b4>)
 8017a6e:	4648      	mov	r0, r9
 8017a70:	f7e9 f9a2 	bl	8000db8 <__aeabi_fmul>
 8017a74:	4641      	mov	r1, r8
 8017a76:	4606      	mov	r6, r0
 8017a78:	4648      	mov	r0, r9
 8017a7a:	f7e9 f893 	bl	8000ba4 <__aeabi_fsub>
 8017a7e:	4601      	mov	r1, r0
 8017a80:	4650      	mov	r0, sl
 8017a82:	f7e9 f88f 	bl	8000ba4 <__aeabi_fsub>
 8017a86:	4927      	ldr	r1, [pc, #156]	; (8017b24 <__ieee754_powf+0x4b8>)
 8017a88:	f7e9 f996 	bl	8000db8 <__aeabi_fmul>
 8017a8c:	4926      	ldr	r1, [pc, #152]	; (8017b28 <__ieee754_powf+0x4bc>)
 8017a8e:	4680      	mov	r8, r0
 8017a90:	4648      	mov	r0, r9
 8017a92:	f7e9 f991 	bl	8000db8 <__aeabi_fmul>
 8017a96:	4601      	mov	r1, r0
 8017a98:	4640      	mov	r0, r8
 8017a9a:	f7e9 f885 	bl	8000ba8 <__addsf3>
 8017a9e:	4b23      	ldr	r3, [pc, #140]	; (8017b2c <__ieee754_powf+0x4c0>)
 8017aa0:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8017aa4:	f7e9 f880 	bl	8000ba8 <__addsf3>
 8017aa8:	9a05      	ldr	r2, [sp, #20]
 8017aaa:	4680      	mov	r8, r0
 8017aac:	4610      	mov	r0, r2
 8017aae:	f7e9 f92f 	bl	8000d10 <__aeabi_i2f>
 8017ab2:	4681      	mov	r9, r0
 8017ab4:	4b1e      	ldr	r3, [pc, #120]	; (8017b30 <__ieee754_powf+0x4c4>)
 8017ab6:	4641      	mov	r1, r8
 8017ab8:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8017abc:	4630      	mov	r0, r6
 8017abe:	f7e9 f873 	bl	8000ba8 <__addsf3>
 8017ac2:	4639      	mov	r1, r7
 8017ac4:	f7e9 f870 	bl	8000ba8 <__addsf3>
 8017ac8:	4649      	mov	r1, r9
 8017aca:	f7e9 f86d 	bl	8000ba8 <__addsf3>
 8017ace:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8017ad2:	f02a 0a0f 	bic.w	sl, sl, #15
 8017ad6:	4649      	mov	r1, r9
 8017ad8:	4650      	mov	r0, sl
 8017ada:	f7e9 f863 	bl	8000ba4 <__aeabi_fsub>
 8017ade:	4639      	mov	r1, r7
 8017ae0:	f7e9 f860 	bl	8000ba4 <__aeabi_fsub>
 8017ae4:	4631      	mov	r1, r6
 8017ae6:	f7e9 f85d 	bl	8000ba4 <__aeabi_fsub>
 8017aea:	4601      	mov	r1, r0
 8017aec:	4640      	mov	r0, r8
 8017aee:	e6a4      	b.n	801783a <__ieee754_powf+0x1ce>
 8017af0:	2200      	movs	r2, #0
 8017af2:	e6fa      	b.n	80178ea <__ieee754_powf+0x27e>
 8017af4:	2701      	movs	r7, #1
 8017af6:	e70a      	b.n	801790e <__ieee754_powf+0x2a2>
 8017af8:	001cc471 	.word	0x001cc471
 8017afc:	005db3d6 	.word	0x005db3d6
 8017b00:	0801a4f8 	.word	0x0801a4f8
 8017b04:	3e53f142 	.word	0x3e53f142
 8017b08:	3e6c3255 	.word	0x3e6c3255
 8017b0c:	3e8ba305 	.word	0x3e8ba305
 8017b10:	3eaaaaab 	.word	0x3eaaaaab
 8017b14:	3edb6db7 	.word	0x3edb6db7
 8017b18:	3f19999a 	.word	0x3f19999a
 8017b1c:	40400000 	.word	0x40400000
 8017b20:	3f763800 	.word	0x3f763800
 8017b24:	3f76384f 	.word	0x3f76384f
 8017b28:	369dc3a0 	.word	0x369dc3a0
 8017b2c:	0801a508 	.word	0x0801a508
 8017b30:	0801a500 	.word	0x0801a500
 8017b34:	f040 80c0 	bne.w	8017cb8 <__ieee754_powf+0x64c>
 8017b38:	4966      	ldr	r1, [pc, #408]	; (8017cd4 <__ieee754_powf+0x668>)
 8017b3a:	4630      	mov	r0, r6
 8017b3c:	f7e9 f834 	bl	8000ba8 <__addsf3>
 8017b40:	4639      	mov	r1, r7
 8017b42:	4681      	mov	r9, r0
 8017b44:	4650      	mov	r0, sl
 8017b46:	f7e9 f82d 	bl	8000ba4 <__aeabi_fsub>
 8017b4a:	4601      	mov	r1, r0
 8017b4c:	4648      	mov	r0, r9
 8017b4e:	f7e9 faef 	bl	8001130 <__aeabi_fcmpgt>
 8017b52:	2800      	cmp	r0, #0
 8017b54:	f47f aea5 	bne.w	80178a2 <__ieee754_powf+0x236>
 8017b58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8017b5c:	15e4      	asrs	r4, r4, #23
 8017b5e:	3c7e      	subs	r4, #126	; 0x7e
 8017b60:	4123      	asrs	r3, r4
 8017b62:	4443      	add	r3, r8
 8017b64:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017b68:	495b      	ldr	r1, [pc, #364]	; (8017cd8 <__ieee754_powf+0x66c>)
 8017b6a:	3a7f      	subs	r2, #127	; 0x7f
 8017b6c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8017b70:	4111      	asrs	r1, r2
 8017b72:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8017b76:	f1c2 0217 	rsb	r2, r2, #23
 8017b7a:	4114      	asrs	r4, r2
 8017b7c:	f1b8 0f00 	cmp.w	r8, #0
 8017b80:	ea23 0101 	bic.w	r1, r3, r1
 8017b84:	4638      	mov	r0, r7
 8017b86:	bfb8      	it	lt
 8017b88:	4264      	neglt	r4, r4
 8017b8a:	f7e9 f80b 	bl	8000ba4 <__aeabi_fsub>
 8017b8e:	4681      	mov	r9, r0
 8017b90:	4631      	mov	r1, r6
 8017b92:	4648      	mov	r0, r9
 8017b94:	f7e9 f808 	bl	8000ba8 <__addsf3>
 8017b98:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8017b9c:	f027 070f 	bic.w	r7, r7, #15
 8017ba0:	494e      	ldr	r1, [pc, #312]	; (8017cdc <__ieee754_powf+0x670>)
 8017ba2:	4638      	mov	r0, r7
 8017ba4:	f7e9 f908 	bl	8000db8 <__aeabi_fmul>
 8017ba8:	4649      	mov	r1, r9
 8017baa:	4680      	mov	r8, r0
 8017bac:	4638      	mov	r0, r7
 8017bae:	f7e8 fff9 	bl	8000ba4 <__aeabi_fsub>
 8017bb2:	4601      	mov	r1, r0
 8017bb4:	4630      	mov	r0, r6
 8017bb6:	f7e8 fff5 	bl	8000ba4 <__aeabi_fsub>
 8017bba:	4949      	ldr	r1, [pc, #292]	; (8017ce0 <__ieee754_powf+0x674>)
 8017bbc:	f7e9 f8fc 	bl	8000db8 <__aeabi_fmul>
 8017bc0:	4948      	ldr	r1, [pc, #288]	; (8017ce4 <__ieee754_powf+0x678>)
 8017bc2:	4606      	mov	r6, r0
 8017bc4:	4638      	mov	r0, r7
 8017bc6:	f7e9 f8f7 	bl	8000db8 <__aeabi_fmul>
 8017bca:	4601      	mov	r1, r0
 8017bcc:	4630      	mov	r0, r6
 8017bce:	f7e8 ffeb 	bl	8000ba8 <__addsf3>
 8017bd2:	4607      	mov	r7, r0
 8017bd4:	4601      	mov	r1, r0
 8017bd6:	4640      	mov	r0, r8
 8017bd8:	f7e8 ffe6 	bl	8000ba8 <__addsf3>
 8017bdc:	4641      	mov	r1, r8
 8017bde:	4606      	mov	r6, r0
 8017be0:	f7e8 ffe0 	bl	8000ba4 <__aeabi_fsub>
 8017be4:	4601      	mov	r1, r0
 8017be6:	4638      	mov	r0, r7
 8017be8:	f7e8 ffdc 	bl	8000ba4 <__aeabi_fsub>
 8017bec:	4631      	mov	r1, r6
 8017bee:	4680      	mov	r8, r0
 8017bf0:	4630      	mov	r0, r6
 8017bf2:	f7e9 f8e1 	bl	8000db8 <__aeabi_fmul>
 8017bf6:	4607      	mov	r7, r0
 8017bf8:	493b      	ldr	r1, [pc, #236]	; (8017ce8 <__ieee754_powf+0x67c>)
 8017bfa:	f7e9 f8dd 	bl	8000db8 <__aeabi_fmul>
 8017bfe:	493b      	ldr	r1, [pc, #236]	; (8017cec <__ieee754_powf+0x680>)
 8017c00:	f7e8 ffd0 	bl	8000ba4 <__aeabi_fsub>
 8017c04:	4639      	mov	r1, r7
 8017c06:	f7e9 f8d7 	bl	8000db8 <__aeabi_fmul>
 8017c0a:	4939      	ldr	r1, [pc, #228]	; (8017cf0 <__ieee754_powf+0x684>)
 8017c0c:	f7e8 ffcc 	bl	8000ba8 <__addsf3>
 8017c10:	4639      	mov	r1, r7
 8017c12:	f7e9 f8d1 	bl	8000db8 <__aeabi_fmul>
 8017c16:	4937      	ldr	r1, [pc, #220]	; (8017cf4 <__ieee754_powf+0x688>)
 8017c18:	f7e8 ffc4 	bl	8000ba4 <__aeabi_fsub>
 8017c1c:	4639      	mov	r1, r7
 8017c1e:	f7e9 f8cb 	bl	8000db8 <__aeabi_fmul>
 8017c22:	4935      	ldr	r1, [pc, #212]	; (8017cf8 <__ieee754_powf+0x68c>)
 8017c24:	f7e8 ffc0 	bl	8000ba8 <__addsf3>
 8017c28:	4639      	mov	r1, r7
 8017c2a:	f7e9 f8c5 	bl	8000db8 <__aeabi_fmul>
 8017c2e:	4601      	mov	r1, r0
 8017c30:	4630      	mov	r0, r6
 8017c32:	f7e8 ffb7 	bl	8000ba4 <__aeabi_fsub>
 8017c36:	4607      	mov	r7, r0
 8017c38:	4601      	mov	r1, r0
 8017c3a:	4630      	mov	r0, r6
 8017c3c:	f7e9 f8bc 	bl	8000db8 <__aeabi_fmul>
 8017c40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8017c44:	4681      	mov	r9, r0
 8017c46:	4638      	mov	r0, r7
 8017c48:	f7e8 ffac 	bl	8000ba4 <__aeabi_fsub>
 8017c4c:	4601      	mov	r1, r0
 8017c4e:	4648      	mov	r0, r9
 8017c50:	f7e9 f966 	bl	8000f20 <__aeabi_fdiv>
 8017c54:	4641      	mov	r1, r8
 8017c56:	4607      	mov	r7, r0
 8017c58:	4630      	mov	r0, r6
 8017c5a:	f7e9 f8ad 	bl	8000db8 <__aeabi_fmul>
 8017c5e:	4641      	mov	r1, r8
 8017c60:	f7e8 ffa2 	bl	8000ba8 <__addsf3>
 8017c64:	4601      	mov	r1, r0
 8017c66:	4638      	mov	r0, r7
 8017c68:	f7e8 ff9c 	bl	8000ba4 <__aeabi_fsub>
 8017c6c:	4631      	mov	r1, r6
 8017c6e:	f7e8 ff99 	bl	8000ba4 <__aeabi_fsub>
 8017c72:	4601      	mov	r1, r0
 8017c74:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017c78:	f7e8 ff94 	bl	8000ba4 <__aeabi_fsub>
 8017c7c:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8017c80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017c84:	da1e      	bge.n	8017cc4 <__ieee754_powf+0x658>
 8017c86:	4621      	mov	r1, r4
 8017c88:	f001 ff00 	bl	8019a8c <scalbnf>
 8017c8c:	4629      	mov	r1, r5
 8017c8e:	e54a      	b.n	8017726 <__ieee754_powf+0xba>
 8017c90:	4b1a      	ldr	r3, [pc, #104]	; (8017cfc <__ieee754_powf+0x690>)
 8017c92:	429c      	cmp	r4, r3
 8017c94:	dd05      	ble.n	8017ca2 <__ieee754_powf+0x636>
 8017c96:	491a      	ldr	r1, [pc, #104]	; (8017d00 <__ieee754_powf+0x694>)
 8017c98:	4628      	mov	r0, r5
 8017c9a:	f7e9 f88d 	bl	8000db8 <__aeabi_fmul>
 8017c9e:	4918      	ldr	r1, [pc, #96]	; (8017d00 <__ieee754_powf+0x694>)
 8017ca0:	e541      	b.n	8017726 <__ieee754_powf+0xba>
 8017ca2:	d109      	bne.n	8017cb8 <__ieee754_powf+0x64c>
 8017ca4:	4639      	mov	r1, r7
 8017ca6:	f7e8 ff7d 	bl	8000ba4 <__aeabi_fsub>
 8017caa:	4631      	mov	r1, r6
 8017cac:	f7e9 fa36 	bl	800111c <__aeabi_fcmpge>
 8017cb0:	2800      	cmp	r0, #0
 8017cb2:	f43f af51 	beq.w	8017b58 <__ieee754_powf+0x4ec>
 8017cb6:	e7ee      	b.n	8017c96 <__ieee754_powf+0x62a>
 8017cb8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8017cbc:	f73f af4c 	bgt.w	8017b58 <__ieee754_powf+0x4ec>
 8017cc0:	2400      	movs	r4, #0
 8017cc2:	e765      	b.n	8017b90 <__ieee754_powf+0x524>
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	e7e1      	b.n	8017c8c <__ieee754_powf+0x620>
 8017cc8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8017ccc:	e518      	b.n	8017700 <__ieee754_powf+0x94>
 8017cce:	9901      	ldr	r1, [sp, #4]
 8017cd0:	e516      	b.n	8017700 <__ieee754_powf+0x94>
 8017cd2:	bf00      	nop
 8017cd4:	3338aa3c 	.word	0x3338aa3c
 8017cd8:	007fffff 	.word	0x007fffff
 8017cdc:	3f317200 	.word	0x3f317200
 8017ce0:	3f317218 	.word	0x3f317218
 8017ce4:	35bfbe8c 	.word	0x35bfbe8c
 8017ce8:	3331bb4c 	.word	0x3331bb4c
 8017cec:	35ddea0e 	.word	0x35ddea0e
 8017cf0:	388ab355 	.word	0x388ab355
 8017cf4:	3b360b61 	.word	0x3b360b61
 8017cf8:	3e2aaaab 	.word	0x3e2aaaab
 8017cfc:	43160000 	.word	0x43160000
 8017d00:	0da24260 	.word	0x0da24260

08017d04 <__ieee754_rem_pio2f>:
 8017d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d08:	4a9d      	ldr	r2, [pc, #628]	; (8017f80 <__ieee754_rem_pio2f+0x27c>)
 8017d0a:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8017d0e:	4295      	cmp	r5, r2
 8017d10:	b087      	sub	sp, #28
 8017d12:	460c      	mov	r4, r1
 8017d14:	4607      	mov	r7, r0
 8017d16:	dc04      	bgt.n	8017d22 <__ieee754_rem_pio2f+0x1e>
 8017d18:	2300      	movs	r3, #0
 8017d1a:	6020      	str	r0, [r4, #0]
 8017d1c:	604b      	str	r3, [r1, #4]
 8017d1e:	2600      	movs	r6, #0
 8017d20:	e01a      	b.n	8017d58 <__ieee754_rem_pio2f+0x54>
 8017d22:	4a98      	ldr	r2, [pc, #608]	; (8017f84 <__ieee754_rem_pio2f+0x280>)
 8017d24:	4295      	cmp	r5, r2
 8017d26:	dc4b      	bgt.n	8017dc0 <__ieee754_rem_pio2f+0xbc>
 8017d28:	2800      	cmp	r0, #0
 8017d2a:	f025 050f 	bic.w	r5, r5, #15
 8017d2e:	4996      	ldr	r1, [pc, #600]	; (8017f88 <__ieee754_rem_pio2f+0x284>)
 8017d30:	4e96      	ldr	r6, [pc, #600]	; (8017f8c <__ieee754_rem_pio2f+0x288>)
 8017d32:	dd23      	ble.n	8017d7c <__ieee754_rem_pio2f+0x78>
 8017d34:	f7e8 ff36 	bl	8000ba4 <__aeabi_fsub>
 8017d38:	42b5      	cmp	r5, r6
 8017d3a:	4607      	mov	r7, r0
 8017d3c:	d010      	beq.n	8017d60 <__ieee754_rem_pio2f+0x5c>
 8017d3e:	4994      	ldr	r1, [pc, #592]	; (8017f90 <__ieee754_rem_pio2f+0x28c>)
 8017d40:	f7e8 ff30 	bl	8000ba4 <__aeabi_fsub>
 8017d44:	4601      	mov	r1, r0
 8017d46:	6020      	str	r0, [r4, #0]
 8017d48:	4638      	mov	r0, r7
 8017d4a:	f7e8 ff2b 	bl	8000ba4 <__aeabi_fsub>
 8017d4e:	4990      	ldr	r1, [pc, #576]	; (8017f90 <__ieee754_rem_pio2f+0x28c>)
 8017d50:	f7e8 ff28 	bl	8000ba4 <__aeabi_fsub>
 8017d54:	2601      	movs	r6, #1
 8017d56:	6060      	str	r0, [r4, #4]
 8017d58:	4630      	mov	r0, r6
 8017d5a:	b007      	add	sp, #28
 8017d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d60:	498c      	ldr	r1, [pc, #560]	; (8017f94 <__ieee754_rem_pio2f+0x290>)
 8017d62:	f7e8 ff1f 	bl	8000ba4 <__aeabi_fsub>
 8017d66:	498c      	ldr	r1, [pc, #560]	; (8017f98 <__ieee754_rem_pio2f+0x294>)
 8017d68:	4605      	mov	r5, r0
 8017d6a:	f7e8 ff1b 	bl	8000ba4 <__aeabi_fsub>
 8017d6e:	4601      	mov	r1, r0
 8017d70:	6020      	str	r0, [r4, #0]
 8017d72:	4628      	mov	r0, r5
 8017d74:	f7e8 ff16 	bl	8000ba4 <__aeabi_fsub>
 8017d78:	4987      	ldr	r1, [pc, #540]	; (8017f98 <__ieee754_rem_pio2f+0x294>)
 8017d7a:	e7e9      	b.n	8017d50 <__ieee754_rem_pio2f+0x4c>
 8017d7c:	f7e8 ff14 	bl	8000ba8 <__addsf3>
 8017d80:	42b5      	cmp	r5, r6
 8017d82:	4607      	mov	r7, r0
 8017d84:	d00e      	beq.n	8017da4 <__ieee754_rem_pio2f+0xa0>
 8017d86:	4982      	ldr	r1, [pc, #520]	; (8017f90 <__ieee754_rem_pio2f+0x28c>)
 8017d88:	f7e8 ff0e 	bl	8000ba8 <__addsf3>
 8017d8c:	4601      	mov	r1, r0
 8017d8e:	6020      	str	r0, [r4, #0]
 8017d90:	4638      	mov	r0, r7
 8017d92:	f7e8 ff07 	bl	8000ba4 <__aeabi_fsub>
 8017d96:	497e      	ldr	r1, [pc, #504]	; (8017f90 <__ieee754_rem_pio2f+0x28c>)
 8017d98:	f7e8 ff06 	bl	8000ba8 <__addsf3>
 8017d9c:	f04f 36ff 	mov.w	r6, #4294967295
 8017da0:	6060      	str	r0, [r4, #4]
 8017da2:	e7d9      	b.n	8017d58 <__ieee754_rem_pio2f+0x54>
 8017da4:	497b      	ldr	r1, [pc, #492]	; (8017f94 <__ieee754_rem_pio2f+0x290>)
 8017da6:	f7e8 feff 	bl	8000ba8 <__addsf3>
 8017daa:	497b      	ldr	r1, [pc, #492]	; (8017f98 <__ieee754_rem_pio2f+0x294>)
 8017dac:	4605      	mov	r5, r0
 8017dae:	f7e8 fefb 	bl	8000ba8 <__addsf3>
 8017db2:	4601      	mov	r1, r0
 8017db4:	6020      	str	r0, [r4, #0]
 8017db6:	4628      	mov	r0, r5
 8017db8:	f7e8 fef4 	bl	8000ba4 <__aeabi_fsub>
 8017dbc:	4976      	ldr	r1, [pc, #472]	; (8017f98 <__ieee754_rem_pio2f+0x294>)
 8017dbe:	e7eb      	b.n	8017d98 <__ieee754_rem_pio2f+0x94>
 8017dc0:	4a76      	ldr	r2, [pc, #472]	; (8017f9c <__ieee754_rem_pio2f+0x298>)
 8017dc2:	4295      	cmp	r5, r2
 8017dc4:	f300 808c 	bgt.w	8017ee0 <__ieee754_rem_pio2f+0x1dc>
 8017dc8:	f001 fdc4 	bl	8019954 <fabsf>
 8017dcc:	4974      	ldr	r1, [pc, #464]	; (8017fa0 <__ieee754_rem_pio2f+0x29c>)
 8017dce:	4680      	mov	r8, r0
 8017dd0:	f7e8 fff2 	bl	8000db8 <__aeabi_fmul>
 8017dd4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017dd8:	f7e8 fee6 	bl	8000ba8 <__addsf3>
 8017ddc:	f7e9 f9c8 	bl	8001170 <__aeabi_f2iz>
 8017de0:	4606      	mov	r6, r0
 8017de2:	f7e8 ff95 	bl	8000d10 <__aeabi_i2f>
 8017de6:	4968      	ldr	r1, [pc, #416]	; (8017f88 <__ieee754_rem_pio2f+0x284>)
 8017de8:	4682      	mov	sl, r0
 8017dea:	f7e8 ffe5 	bl	8000db8 <__aeabi_fmul>
 8017dee:	4601      	mov	r1, r0
 8017df0:	4640      	mov	r0, r8
 8017df2:	f7e8 fed7 	bl	8000ba4 <__aeabi_fsub>
 8017df6:	4966      	ldr	r1, [pc, #408]	; (8017f90 <__ieee754_rem_pio2f+0x28c>)
 8017df8:	4680      	mov	r8, r0
 8017dfa:	4650      	mov	r0, sl
 8017dfc:	f7e8 ffdc 	bl	8000db8 <__aeabi_fmul>
 8017e00:	2e1f      	cmp	r6, #31
 8017e02:	4681      	mov	r9, r0
 8017e04:	dc0c      	bgt.n	8017e20 <__ieee754_rem_pio2f+0x11c>
 8017e06:	4a67      	ldr	r2, [pc, #412]	; (8017fa4 <__ieee754_rem_pio2f+0x2a0>)
 8017e08:	1e71      	subs	r1, r6, #1
 8017e0a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8017e0e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8017e12:	4293      	cmp	r3, r2
 8017e14:	d004      	beq.n	8017e20 <__ieee754_rem_pio2f+0x11c>
 8017e16:	4649      	mov	r1, r9
 8017e18:	4640      	mov	r0, r8
 8017e1a:	f7e8 fec3 	bl	8000ba4 <__aeabi_fsub>
 8017e1e:	e009      	b.n	8017e34 <__ieee754_rem_pio2f+0x130>
 8017e20:	4649      	mov	r1, r9
 8017e22:	4640      	mov	r0, r8
 8017e24:	f7e8 febe 	bl	8000ba4 <__aeabi_fsub>
 8017e28:	15ed      	asrs	r5, r5, #23
 8017e2a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017e2e:	1aeb      	subs	r3, r5, r3
 8017e30:	2b08      	cmp	r3, #8
 8017e32:	dc01      	bgt.n	8017e38 <__ieee754_rem_pio2f+0x134>
 8017e34:	6020      	str	r0, [r4, #0]
 8017e36:	e024      	b.n	8017e82 <__ieee754_rem_pio2f+0x17e>
 8017e38:	4956      	ldr	r1, [pc, #344]	; (8017f94 <__ieee754_rem_pio2f+0x290>)
 8017e3a:	4650      	mov	r0, sl
 8017e3c:	f7e8 ffbc 	bl	8000db8 <__aeabi_fmul>
 8017e40:	4681      	mov	r9, r0
 8017e42:	4601      	mov	r1, r0
 8017e44:	4640      	mov	r0, r8
 8017e46:	f7e8 fead 	bl	8000ba4 <__aeabi_fsub>
 8017e4a:	4601      	mov	r1, r0
 8017e4c:	4683      	mov	fp, r0
 8017e4e:	4640      	mov	r0, r8
 8017e50:	f7e8 fea8 	bl	8000ba4 <__aeabi_fsub>
 8017e54:	4649      	mov	r1, r9
 8017e56:	f7e8 fea5 	bl	8000ba4 <__aeabi_fsub>
 8017e5a:	4680      	mov	r8, r0
 8017e5c:	494e      	ldr	r1, [pc, #312]	; (8017f98 <__ieee754_rem_pio2f+0x294>)
 8017e5e:	4650      	mov	r0, sl
 8017e60:	f7e8 ffaa 	bl	8000db8 <__aeabi_fmul>
 8017e64:	4641      	mov	r1, r8
 8017e66:	f7e8 fe9d 	bl	8000ba4 <__aeabi_fsub>
 8017e6a:	4601      	mov	r1, r0
 8017e6c:	4681      	mov	r9, r0
 8017e6e:	4658      	mov	r0, fp
 8017e70:	f7e8 fe98 	bl	8000ba4 <__aeabi_fsub>
 8017e74:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017e78:	1aed      	subs	r5, r5, r3
 8017e7a:	2d19      	cmp	r5, #25
 8017e7c:	dc15      	bgt.n	8017eaa <__ieee754_rem_pio2f+0x1a6>
 8017e7e:	46d8      	mov	r8, fp
 8017e80:	6020      	str	r0, [r4, #0]
 8017e82:	6825      	ldr	r5, [r4, #0]
 8017e84:	4640      	mov	r0, r8
 8017e86:	4629      	mov	r1, r5
 8017e88:	f7e8 fe8c 	bl	8000ba4 <__aeabi_fsub>
 8017e8c:	4649      	mov	r1, r9
 8017e8e:	f7e8 fe89 	bl	8000ba4 <__aeabi_fsub>
 8017e92:	2f00      	cmp	r7, #0
 8017e94:	6060      	str	r0, [r4, #4]
 8017e96:	f6bf af5f 	bge.w	8017d58 <__ieee754_rem_pio2f+0x54>
 8017e9a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8017e9e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8017ea2:	6025      	str	r5, [r4, #0]
 8017ea4:	6060      	str	r0, [r4, #4]
 8017ea6:	4276      	negs	r6, r6
 8017ea8:	e756      	b.n	8017d58 <__ieee754_rem_pio2f+0x54>
 8017eaa:	493f      	ldr	r1, [pc, #252]	; (8017fa8 <__ieee754_rem_pio2f+0x2a4>)
 8017eac:	4650      	mov	r0, sl
 8017eae:	f7e8 ff83 	bl	8000db8 <__aeabi_fmul>
 8017eb2:	4605      	mov	r5, r0
 8017eb4:	4601      	mov	r1, r0
 8017eb6:	4658      	mov	r0, fp
 8017eb8:	f7e8 fe74 	bl	8000ba4 <__aeabi_fsub>
 8017ebc:	4601      	mov	r1, r0
 8017ebe:	4680      	mov	r8, r0
 8017ec0:	4658      	mov	r0, fp
 8017ec2:	f7e8 fe6f 	bl	8000ba4 <__aeabi_fsub>
 8017ec6:	4629      	mov	r1, r5
 8017ec8:	f7e8 fe6c 	bl	8000ba4 <__aeabi_fsub>
 8017ecc:	4605      	mov	r5, r0
 8017ece:	4937      	ldr	r1, [pc, #220]	; (8017fac <__ieee754_rem_pio2f+0x2a8>)
 8017ed0:	4650      	mov	r0, sl
 8017ed2:	f7e8 ff71 	bl	8000db8 <__aeabi_fmul>
 8017ed6:	4629      	mov	r1, r5
 8017ed8:	f7e8 fe64 	bl	8000ba4 <__aeabi_fsub>
 8017edc:	4681      	mov	r9, r0
 8017ede:	e79a      	b.n	8017e16 <__ieee754_rem_pio2f+0x112>
 8017ee0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8017ee4:	db05      	blt.n	8017ef2 <__ieee754_rem_pio2f+0x1ee>
 8017ee6:	4601      	mov	r1, r0
 8017ee8:	f7e8 fe5c 	bl	8000ba4 <__aeabi_fsub>
 8017eec:	6060      	str	r0, [r4, #4]
 8017eee:	6020      	str	r0, [r4, #0]
 8017ef0:	e715      	b.n	8017d1e <__ieee754_rem_pio2f+0x1a>
 8017ef2:	15ee      	asrs	r6, r5, #23
 8017ef4:	3e86      	subs	r6, #134	; 0x86
 8017ef6:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8017efa:	4628      	mov	r0, r5
 8017efc:	f7e9 f938 	bl	8001170 <__aeabi_f2iz>
 8017f00:	f7e8 ff06 	bl	8000d10 <__aeabi_i2f>
 8017f04:	4601      	mov	r1, r0
 8017f06:	9003      	str	r0, [sp, #12]
 8017f08:	4628      	mov	r0, r5
 8017f0a:	f7e8 fe4b 	bl	8000ba4 <__aeabi_fsub>
 8017f0e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8017f12:	f7e8 ff51 	bl	8000db8 <__aeabi_fmul>
 8017f16:	4680      	mov	r8, r0
 8017f18:	f7e9 f92a 	bl	8001170 <__aeabi_f2iz>
 8017f1c:	f7e8 fef8 	bl	8000d10 <__aeabi_i2f>
 8017f20:	4601      	mov	r1, r0
 8017f22:	9004      	str	r0, [sp, #16]
 8017f24:	4605      	mov	r5, r0
 8017f26:	4640      	mov	r0, r8
 8017f28:	f7e8 fe3c 	bl	8000ba4 <__aeabi_fsub>
 8017f2c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8017f30:	f7e8 ff42 	bl	8000db8 <__aeabi_fmul>
 8017f34:	2100      	movs	r1, #0
 8017f36:	9005      	str	r0, [sp, #20]
 8017f38:	f7e9 f8d2 	bl	80010e0 <__aeabi_fcmpeq>
 8017f3c:	b1e8      	cbz	r0, 8017f7a <__ieee754_rem_pio2f+0x276>
 8017f3e:	2100      	movs	r1, #0
 8017f40:	4628      	mov	r0, r5
 8017f42:	f7e9 f8cd 	bl	80010e0 <__aeabi_fcmpeq>
 8017f46:	2800      	cmp	r0, #0
 8017f48:	bf14      	ite	ne
 8017f4a:	2301      	movne	r3, #1
 8017f4c:	2302      	moveq	r3, #2
 8017f4e:	4a18      	ldr	r2, [pc, #96]	; (8017fb0 <__ieee754_rem_pio2f+0x2ac>)
 8017f50:	4621      	mov	r1, r4
 8017f52:	9201      	str	r2, [sp, #4]
 8017f54:	2202      	movs	r2, #2
 8017f56:	a803      	add	r0, sp, #12
 8017f58:	9200      	str	r2, [sp, #0]
 8017f5a:	4632      	mov	r2, r6
 8017f5c:	f000 fdbe 	bl	8018adc <__kernel_rem_pio2f>
 8017f60:	2f00      	cmp	r7, #0
 8017f62:	4606      	mov	r6, r0
 8017f64:	f6bf aef8 	bge.w	8017d58 <__ieee754_rem_pio2f+0x54>
 8017f68:	6823      	ldr	r3, [r4, #0]
 8017f6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017f6e:	6023      	str	r3, [r4, #0]
 8017f70:	6863      	ldr	r3, [r4, #4]
 8017f72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017f76:	6063      	str	r3, [r4, #4]
 8017f78:	e795      	b.n	8017ea6 <__ieee754_rem_pio2f+0x1a2>
 8017f7a:	2303      	movs	r3, #3
 8017f7c:	e7e7      	b.n	8017f4e <__ieee754_rem_pio2f+0x24a>
 8017f7e:	bf00      	nop
 8017f80:	3f490fd8 	.word	0x3f490fd8
 8017f84:	4016cbe3 	.word	0x4016cbe3
 8017f88:	3fc90f80 	.word	0x3fc90f80
 8017f8c:	3fc90fd0 	.word	0x3fc90fd0
 8017f90:	37354443 	.word	0x37354443
 8017f94:	37354400 	.word	0x37354400
 8017f98:	2e85a308 	.word	0x2e85a308
 8017f9c:	43490f80 	.word	0x43490f80
 8017fa0:	3f22f984 	.word	0x3f22f984
 8017fa4:	0801a510 	.word	0x0801a510
 8017fa8:	2e85a300 	.word	0x2e85a300
 8017fac:	248d3132 	.word	0x248d3132
 8017fb0:	0801a590 	.word	0x0801a590

08017fb4 <__ieee754_sqrtf>:
 8017fb4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8017fb8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017fbc:	b570      	push	{r4, r5, r6, lr}
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	4604      	mov	r4, r0
 8017fc2:	d309      	bcc.n	8017fd8 <__ieee754_sqrtf+0x24>
 8017fc4:	4601      	mov	r1, r0
 8017fc6:	f7e8 fef7 	bl	8000db8 <__aeabi_fmul>
 8017fca:	4601      	mov	r1, r0
 8017fcc:	4620      	mov	r0, r4
 8017fce:	f7e8 fdeb 	bl	8000ba8 <__addsf3>
 8017fd2:	4604      	mov	r4, r0
 8017fd4:	4620      	mov	r0, r4
 8017fd6:	bd70      	pop	{r4, r5, r6, pc}
 8017fd8:	2a00      	cmp	r2, #0
 8017fda:	d0fb      	beq.n	8017fd4 <__ieee754_sqrtf+0x20>
 8017fdc:	2800      	cmp	r0, #0
 8017fde:	da06      	bge.n	8017fee <__ieee754_sqrtf+0x3a>
 8017fe0:	4601      	mov	r1, r0
 8017fe2:	f7e8 fddf 	bl	8000ba4 <__aeabi_fsub>
 8017fe6:	4601      	mov	r1, r0
 8017fe8:	f7e8 ff9a 	bl	8000f20 <__aeabi_fdiv>
 8017fec:	e7f1      	b.n	8017fd2 <__ieee754_sqrtf+0x1e>
 8017fee:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8017ff2:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8017ff6:	d32e      	bcc.n	8018056 <__ieee754_sqrtf+0xa2>
 8017ff8:	3c7f      	subs	r4, #127	; 0x7f
 8017ffa:	07e2      	lsls	r2, r4, #31
 8017ffc:	f04f 0200 	mov.w	r2, #0
 8018000:	ea4f 0164 	mov.w	r1, r4, asr #1
 8018004:	4616      	mov	r6, r2
 8018006:	f04f 0419 	mov.w	r4, #25
 801800a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801800e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018012:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8018016:	bf48      	it	mi
 8018018:	005b      	lslmi	r3, r3, #1
 801801a:	005b      	lsls	r3, r3, #1
 801801c:	1835      	adds	r5, r6, r0
 801801e:	429d      	cmp	r5, r3
 8018020:	bfde      	ittt	le
 8018022:	182e      	addle	r6, r5, r0
 8018024:	1b5b      	suble	r3, r3, r5
 8018026:	1812      	addle	r2, r2, r0
 8018028:	3c01      	subs	r4, #1
 801802a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801802e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8018032:	d1f3      	bne.n	801801c <__ieee754_sqrtf+0x68>
 8018034:	b113      	cbz	r3, 801803c <__ieee754_sqrtf+0x88>
 8018036:	3201      	adds	r2, #1
 8018038:	f022 0201 	bic.w	r2, r2, #1
 801803c:	1054      	asrs	r4, r2, #1
 801803e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8018042:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8018046:	e7c5      	b.n	8017fd4 <__ieee754_sqrtf+0x20>
 8018048:	005b      	lsls	r3, r3, #1
 801804a:	3201      	adds	r2, #1
 801804c:	0219      	lsls	r1, r3, #8
 801804e:	d5fb      	bpl.n	8018048 <__ieee754_sqrtf+0x94>
 8018050:	3a01      	subs	r2, #1
 8018052:	1aa4      	subs	r4, r4, r2
 8018054:	e7d0      	b.n	8017ff8 <__ieee754_sqrtf+0x44>
 8018056:	2200      	movs	r2, #0
 8018058:	e7f8      	b.n	801804c <__ieee754_sqrtf+0x98>
 801805a:	0000      	movs	r0, r0
 801805c:	0000      	movs	r0, r0
	...

08018060 <__kernel_cos>:
 8018060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018064:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018068:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801806c:	4680      	mov	r8, r0
 801806e:	460f      	mov	r7, r1
 8018070:	e9cd 2300 	strd	r2, r3, [sp]
 8018074:	da04      	bge.n	8018080 <__kernel_cos+0x20>
 8018076:	f7e8 fcf9 	bl	8000a6c <__aeabi_d2iz>
 801807a:	2800      	cmp	r0, #0
 801807c:	f000 8086 	beq.w	801818c <__kernel_cos+0x12c>
 8018080:	4642      	mov	r2, r8
 8018082:	463b      	mov	r3, r7
 8018084:	4640      	mov	r0, r8
 8018086:	4639      	mov	r1, r7
 8018088:	f7e8 fa40 	bl	800050c <__aeabi_dmul>
 801808c:	2200      	movs	r2, #0
 801808e:	4b4e      	ldr	r3, [pc, #312]	; (80181c8 <__kernel_cos+0x168>)
 8018090:	4604      	mov	r4, r0
 8018092:	460d      	mov	r5, r1
 8018094:	f7e8 fa3a 	bl	800050c <__aeabi_dmul>
 8018098:	a33f      	add	r3, pc, #252	; (adr r3, 8018198 <__kernel_cos+0x138>)
 801809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801809e:	4682      	mov	sl, r0
 80180a0:	468b      	mov	fp, r1
 80180a2:	4620      	mov	r0, r4
 80180a4:	4629      	mov	r1, r5
 80180a6:	f7e8 fa31 	bl	800050c <__aeabi_dmul>
 80180aa:	a33d      	add	r3, pc, #244	; (adr r3, 80181a0 <__kernel_cos+0x140>)
 80180ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b0:	f7e8 f876 	bl	80001a0 <__adddf3>
 80180b4:	4622      	mov	r2, r4
 80180b6:	462b      	mov	r3, r5
 80180b8:	f7e8 fa28 	bl	800050c <__aeabi_dmul>
 80180bc:	a33a      	add	r3, pc, #232	; (adr r3, 80181a8 <__kernel_cos+0x148>)
 80180be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180c2:	f7e8 f86b 	bl	800019c <__aeabi_dsub>
 80180c6:	4622      	mov	r2, r4
 80180c8:	462b      	mov	r3, r5
 80180ca:	f7e8 fa1f 	bl	800050c <__aeabi_dmul>
 80180ce:	a338      	add	r3, pc, #224	; (adr r3, 80181b0 <__kernel_cos+0x150>)
 80180d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d4:	f7e8 f864 	bl	80001a0 <__adddf3>
 80180d8:	4622      	mov	r2, r4
 80180da:	462b      	mov	r3, r5
 80180dc:	f7e8 fa16 	bl	800050c <__aeabi_dmul>
 80180e0:	a335      	add	r3, pc, #212	; (adr r3, 80181b8 <__kernel_cos+0x158>)
 80180e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180e6:	f7e8 f859 	bl	800019c <__aeabi_dsub>
 80180ea:	4622      	mov	r2, r4
 80180ec:	462b      	mov	r3, r5
 80180ee:	f7e8 fa0d 	bl	800050c <__aeabi_dmul>
 80180f2:	a333      	add	r3, pc, #204	; (adr r3, 80181c0 <__kernel_cos+0x160>)
 80180f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180f8:	f7e8 f852 	bl	80001a0 <__adddf3>
 80180fc:	4622      	mov	r2, r4
 80180fe:	462b      	mov	r3, r5
 8018100:	f7e8 fa04 	bl	800050c <__aeabi_dmul>
 8018104:	4622      	mov	r2, r4
 8018106:	462b      	mov	r3, r5
 8018108:	f7e8 fa00 	bl	800050c <__aeabi_dmul>
 801810c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018110:	4604      	mov	r4, r0
 8018112:	460d      	mov	r5, r1
 8018114:	4640      	mov	r0, r8
 8018116:	4639      	mov	r1, r7
 8018118:	f7e8 f9f8 	bl	800050c <__aeabi_dmul>
 801811c:	460b      	mov	r3, r1
 801811e:	4602      	mov	r2, r0
 8018120:	4629      	mov	r1, r5
 8018122:	4620      	mov	r0, r4
 8018124:	f7e8 f83a 	bl	800019c <__aeabi_dsub>
 8018128:	4b28      	ldr	r3, [pc, #160]	; (80181cc <__kernel_cos+0x16c>)
 801812a:	4680      	mov	r8, r0
 801812c:	429e      	cmp	r6, r3
 801812e:	4689      	mov	r9, r1
 8018130:	dc0e      	bgt.n	8018150 <__kernel_cos+0xf0>
 8018132:	4602      	mov	r2, r0
 8018134:	460b      	mov	r3, r1
 8018136:	4650      	mov	r0, sl
 8018138:	4659      	mov	r1, fp
 801813a:	f7e8 f82f 	bl	800019c <__aeabi_dsub>
 801813e:	4602      	mov	r2, r0
 8018140:	2000      	movs	r0, #0
 8018142:	460b      	mov	r3, r1
 8018144:	4922      	ldr	r1, [pc, #136]	; (80181d0 <__kernel_cos+0x170>)
 8018146:	f7e8 f829 	bl	800019c <__aeabi_dsub>
 801814a:	b003      	add	sp, #12
 801814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018150:	2400      	movs	r4, #0
 8018152:	4b20      	ldr	r3, [pc, #128]	; (80181d4 <__kernel_cos+0x174>)
 8018154:	4622      	mov	r2, r4
 8018156:	429e      	cmp	r6, r3
 8018158:	bfcc      	ite	gt
 801815a:	4d1f      	ldrgt	r5, [pc, #124]	; (80181d8 <__kernel_cos+0x178>)
 801815c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8018160:	462b      	mov	r3, r5
 8018162:	2000      	movs	r0, #0
 8018164:	491a      	ldr	r1, [pc, #104]	; (80181d0 <__kernel_cos+0x170>)
 8018166:	f7e8 f819 	bl	800019c <__aeabi_dsub>
 801816a:	4622      	mov	r2, r4
 801816c:	4606      	mov	r6, r0
 801816e:	460f      	mov	r7, r1
 8018170:	462b      	mov	r3, r5
 8018172:	4650      	mov	r0, sl
 8018174:	4659      	mov	r1, fp
 8018176:	f7e8 f811 	bl	800019c <__aeabi_dsub>
 801817a:	4642      	mov	r2, r8
 801817c:	464b      	mov	r3, r9
 801817e:	f7e8 f80d 	bl	800019c <__aeabi_dsub>
 8018182:	4602      	mov	r2, r0
 8018184:	460b      	mov	r3, r1
 8018186:	4630      	mov	r0, r6
 8018188:	4639      	mov	r1, r7
 801818a:	e7dc      	b.n	8018146 <__kernel_cos+0xe6>
 801818c:	2000      	movs	r0, #0
 801818e:	4910      	ldr	r1, [pc, #64]	; (80181d0 <__kernel_cos+0x170>)
 8018190:	e7db      	b.n	801814a <__kernel_cos+0xea>
 8018192:	bf00      	nop
 8018194:	f3af 8000 	nop.w
 8018198:	be8838d4 	.word	0xbe8838d4
 801819c:	bda8fae9 	.word	0xbda8fae9
 80181a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80181a4:	3e21ee9e 	.word	0x3e21ee9e
 80181a8:	809c52ad 	.word	0x809c52ad
 80181ac:	3e927e4f 	.word	0x3e927e4f
 80181b0:	19cb1590 	.word	0x19cb1590
 80181b4:	3efa01a0 	.word	0x3efa01a0
 80181b8:	16c15177 	.word	0x16c15177
 80181bc:	3f56c16c 	.word	0x3f56c16c
 80181c0:	5555554c 	.word	0x5555554c
 80181c4:	3fa55555 	.word	0x3fa55555
 80181c8:	3fe00000 	.word	0x3fe00000
 80181cc:	3fd33332 	.word	0x3fd33332
 80181d0:	3ff00000 	.word	0x3ff00000
 80181d4:	3fe90000 	.word	0x3fe90000
 80181d8:	3fd20000 	.word	0x3fd20000

080181dc <__kernel_rem_pio2>:
 80181dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80181e4:	9307      	str	r3, [sp, #28]
 80181e6:	9104      	str	r1, [sp, #16]
 80181e8:	4bbf      	ldr	r3, [pc, #764]	; (80184e8 <__kernel_rem_pio2+0x30c>)
 80181ea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80181ec:	1ed4      	subs	r4, r2, #3
 80181ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80181f2:	2500      	movs	r5, #0
 80181f4:	9302      	str	r3, [sp, #8]
 80181f6:	9b07      	ldr	r3, [sp, #28]
 80181f8:	9008      	str	r0, [sp, #32]
 80181fa:	3b01      	subs	r3, #1
 80181fc:	9306      	str	r3, [sp, #24]
 80181fe:	2318      	movs	r3, #24
 8018200:	fb94 f4f3 	sdiv	r4, r4, r3
 8018204:	f06f 0317 	mvn.w	r3, #23
 8018208:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801820c:	fb04 3303 	mla	r3, r4, r3, r3
 8018210:	eb03 0a02 	add.w	sl, r3, r2
 8018214:	9a06      	ldr	r2, [sp, #24]
 8018216:	9b02      	ldr	r3, [sp, #8]
 8018218:	1aa7      	subs	r7, r4, r2
 801821a:	eb03 0802 	add.w	r8, r3, r2
 801821e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8018220:	2200      	movs	r2, #0
 8018222:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018226:	2300      	movs	r3, #0
 8018228:	ae1e      	add	r6, sp, #120	; 0x78
 801822a:	4545      	cmp	r5, r8
 801822c:	dd14      	ble.n	8018258 <__kernel_rem_pio2+0x7c>
 801822e:	2600      	movs	r6, #0
 8018230:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8018234:	9b02      	ldr	r3, [sp, #8]
 8018236:	429e      	cmp	r6, r3
 8018238:	dc39      	bgt.n	80182ae <__kernel_rem_pio2+0xd2>
 801823a:	9b08      	ldr	r3, [sp, #32]
 801823c:	f04f 0800 	mov.w	r8, #0
 8018240:	3b08      	subs	r3, #8
 8018242:	9300      	str	r3, [sp, #0]
 8018244:	9b07      	ldr	r3, [sp, #28]
 8018246:	f04f 0900 	mov.w	r9, #0
 801824a:	199d      	adds	r5, r3, r6
 801824c:	ab20      	add	r3, sp, #128	; 0x80
 801824e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018252:	9305      	str	r3, [sp, #20]
 8018254:	2700      	movs	r7, #0
 8018256:	e023      	b.n	80182a0 <__kernel_rem_pio2+0xc4>
 8018258:	42ef      	cmn	r7, r5
 801825a:	d40b      	bmi.n	8018274 <__kernel_rem_pio2+0x98>
 801825c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8018260:	e9cd 2300 	strd	r2, r3, [sp]
 8018264:	f7e8 f8e8 	bl	8000438 <__aeabi_i2d>
 8018268:	e9dd 2300 	ldrd	r2, r3, [sp]
 801826c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8018270:	3501      	adds	r5, #1
 8018272:	e7da      	b.n	801822a <__kernel_rem_pio2+0x4e>
 8018274:	4610      	mov	r0, r2
 8018276:	4619      	mov	r1, r3
 8018278:	e7f8      	b.n	801826c <__kernel_rem_pio2+0x90>
 801827a:	9905      	ldr	r1, [sp, #20]
 801827c:	9d00      	ldr	r5, [sp, #0]
 801827e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8018282:	9105      	str	r1, [sp, #20]
 8018284:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8018288:	9500      	str	r5, [sp, #0]
 801828a:	f7e8 f93f 	bl	800050c <__aeabi_dmul>
 801828e:	4602      	mov	r2, r0
 8018290:	460b      	mov	r3, r1
 8018292:	4640      	mov	r0, r8
 8018294:	4649      	mov	r1, r9
 8018296:	f7e7 ff83 	bl	80001a0 <__adddf3>
 801829a:	4680      	mov	r8, r0
 801829c:	4689      	mov	r9, r1
 801829e:	3701      	adds	r7, #1
 80182a0:	9b06      	ldr	r3, [sp, #24]
 80182a2:	429f      	cmp	r7, r3
 80182a4:	dde9      	ble.n	801827a <__kernel_rem_pio2+0x9e>
 80182a6:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80182aa:	3601      	adds	r6, #1
 80182ac:	e7c2      	b.n	8018234 <__kernel_rem_pio2+0x58>
 80182ae:	9b02      	ldr	r3, [sp, #8]
 80182b0:	aa0c      	add	r2, sp, #48	; 0x30
 80182b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80182b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80182b8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80182ba:	9f02      	ldr	r7, [sp, #8]
 80182bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80182c0:	930a      	str	r3, [sp, #40]	; 0x28
 80182c2:	2600      	movs	r6, #0
 80182c4:	ab98      	add	r3, sp, #608	; 0x260
 80182c6:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 80182ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80182ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80182d2:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80182d6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80182da:	ab98      	add	r3, sp, #608	; 0x260
 80182dc:	445b      	add	r3, fp
 80182de:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 80182e2:	1bbb      	subs	r3, r7, r6
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	dc71      	bgt.n	80183cc <__kernel_rem_pio2+0x1f0>
 80182e8:	4652      	mov	r2, sl
 80182ea:	4640      	mov	r0, r8
 80182ec:	4649      	mov	r1, r9
 80182ee:	f001 f9b7 	bl	8019660 <scalbn>
 80182f2:	2200      	movs	r2, #0
 80182f4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80182f8:	4604      	mov	r4, r0
 80182fa:	460d      	mov	r5, r1
 80182fc:	f7e8 f906 	bl	800050c <__aeabi_dmul>
 8018300:	f001 f896 	bl	8019430 <floor>
 8018304:	2200      	movs	r2, #0
 8018306:	4b79      	ldr	r3, [pc, #484]	; (80184ec <__kernel_rem_pio2+0x310>)
 8018308:	f7e8 f900 	bl	800050c <__aeabi_dmul>
 801830c:	4602      	mov	r2, r0
 801830e:	460b      	mov	r3, r1
 8018310:	4620      	mov	r0, r4
 8018312:	4629      	mov	r1, r5
 8018314:	f7e7 ff42 	bl	800019c <__aeabi_dsub>
 8018318:	460d      	mov	r5, r1
 801831a:	4604      	mov	r4, r0
 801831c:	f7e8 fba6 	bl	8000a6c <__aeabi_d2iz>
 8018320:	9005      	str	r0, [sp, #20]
 8018322:	f7e8 f889 	bl	8000438 <__aeabi_i2d>
 8018326:	4602      	mov	r2, r0
 8018328:	460b      	mov	r3, r1
 801832a:	4620      	mov	r0, r4
 801832c:	4629      	mov	r1, r5
 801832e:	f7e7 ff35 	bl	800019c <__aeabi_dsub>
 8018332:	f1ba 0f00 	cmp.w	sl, #0
 8018336:	4680      	mov	r8, r0
 8018338:	4689      	mov	r9, r1
 801833a:	dd6c      	ble.n	8018416 <__kernel_rem_pio2+0x23a>
 801833c:	1e7a      	subs	r2, r7, #1
 801833e:	ab0c      	add	r3, sp, #48	; 0x30
 8018340:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018344:	f1ca 0118 	rsb	r1, sl, #24
 8018348:	9c05      	ldr	r4, [sp, #20]
 801834a:	fa40 f301 	asr.w	r3, r0, r1
 801834e:	441c      	add	r4, r3
 8018350:	408b      	lsls	r3, r1
 8018352:	1ac0      	subs	r0, r0, r3
 8018354:	ab0c      	add	r3, sp, #48	; 0x30
 8018356:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801835a:	f1ca 0317 	rsb	r3, sl, #23
 801835e:	9405      	str	r4, [sp, #20]
 8018360:	fa40 f303 	asr.w	r3, r0, r3
 8018364:	9300      	str	r3, [sp, #0]
 8018366:	9b00      	ldr	r3, [sp, #0]
 8018368:	2b00      	cmp	r3, #0
 801836a:	dd62      	ble.n	8018432 <__kernel_rem_pio2+0x256>
 801836c:	2200      	movs	r2, #0
 801836e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8018372:	4614      	mov	r4, r2
 8018374:	9b05      	ldr	r3, [sp, #20]
 8018376:	3301      	adds	r3, #1
 8018378:	9305      	str	r3, [sp, #20]
 801837a:	4297      	cmp	r7, r2
 801837c:	f300 809f 	bgt.w	80184be <__kernel_rem_pio2+0x2e2>
 8018380:	f1ba 0f00 	cmp.w	sl, #0
 8018384:	dd07      	ble.n	8018396 <__kernel_rem_pio2+0x1ba>
 8018386:	f1ba 0f01 	cmp.w	sl, #1
 801838a:	f000 80bb 	beq.w	8018504 <__kernel_rem_pio2+0x328>
 801838e:	f1ba 0f02 	cmp.w	sl, #2
 8018392:	f000 80c1 	beq.w	8018518 <__kernel_rem_pio2+0x33c>
 8018396:	9b00      	ldr	r3, [sp, #0]
 8018398:	2b02      	cmp	r3, #2
 801839a:	d14a      	bne.n	8018432 <__kernel_rem_pio2+0x256>
 801839c:	4642      	mov	r2, r8
 801839e:	464b      	mov	r3, r9
 80183a0:	2000      	movs	r0, #0
 80183a2:	4953      	ldr	r1, [pc, #332]	; (80184f0 <__kernel_rem_pio2+0x314>)
 80183a4:	f7e7 fefa 	bl	800019c <__aeabi_dsub>
 80183a8:	4680      	mov	r8, r0
 80183aa:	4689      	mov	r9, r1
 80183ac:	2c00      	cmp	r4, #0
 80183ae:	d040      	beq.n	8018432 <__kernel_rem_pio2+0x256>
 80183b0:	4652      	mov	r2, sl
 80183b2:	2000      	movs	r0, #0
 80183b4:	494e      	ldr	r1, [pc, #312]	; (80184f0 <__kernel_rem_pio2+0x314>)
 80183b6:	f001 f953 	bl	8019660 <scalbn>
 80183ba:	4602      	mov	r2, r0
 80183bc:	460b      	mov	r3, r1
 80183be:	4640      	mov	r0, r8
 80183c0:	4649      	mov	r1, r9
 80183c2:	f7e7 feeb 	bl	800019c <__aeabi_dsub>
 80183c6:	4680      	mov	r8, r0
 80183c8:	4689      	mov	r9, r1
 80183ca:	e032      	b.n	8018432 <__kernel_rem_pio2+0x256>
 80183cc:	2200      	movs	r2, #0
 80183ce:	4b49      	ldr	r3, [pc, #292]	; (80184f4 <__kernel_rem_pio2+0x318>)
 80183d0:	4640      	mov	r0, r8
 80183d2:	4649      	mov	r1, r9
 80183d4:	f7e8 f89a 	bl	800050c <__aeabi_dmul>
 80183d8:	f7e8 fb48 	bl	8000a6c <__aeabi_d2iz>
 80183dc:	f7e8 f82c 	bl	8000438 <__aeabi_i2d>
 80183e0:	2200      	movs	r2, #0
 80183e2:	4b45      	ldr	r3, [pc, #276]	; (80184f8 <__kernel_rem_pio2+0x31c>)
 80183e4:	e9cd 0100 	strd	r0, r1, [sp]
 80183e8:	f7e8 f890 	bl	800050c <__aeabi_dmul>
 80183ec:	4602      	mov	r2, r0
 80183ee:	460b      	mov	r3, r1
 80183f0:	4640      	mov	r0, r8
 80183f2:	4649      	mov	r1, r9
 80183f4:	f7e7 fed2 	bl	800019c <__aeabi_dsub>
 80183f8:	f7e8 fb38 	bl	8000a6c <__aeabi_d2iz>
 80183fc:	ab0c      	add	r3, sp, #48	; 0x30
 80183fe:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8018402:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018406:	e9dd 0100 	ldrd	r0, r1, [sp]
 801840a:	f7e7 fec9 	bl	80001a0 <__adddf3>
 801840e:	3601      	adds	r6, #1
 8018410:	4680      	mov	r8, r0
 8018412:	4689      	mov	r9, r1
 8018414:	e765      	b.n	80182e2 <__kernel_rem_pio2+0x106>
 8018416:	d105      	bne.n	8018424 <__kernel_rem_pio2+0x248>
 8018418:	1e7b      	subs	r3, r7, #1
 801841a:	aa0c      	add	r2, sp, #48	; 0x30
 801841c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018420:	15c3      	asrs	r3, r0, #23
 8018422:	e79f      	b.n	8018364 <__kernel_rem_pio2+0x188>
 8018424:	2200      	movs	r2, #0
 8018426:	4b35      	ldr	r3, [pc, #212]	; (80184fc <__kernel_rem_pio2+0x320>)
 8018428:	f7e8 faf6 	bl	8000a18 <__aeabi_dcmpge>
 801842c:	2800      	cmp	r0, #0
 801842e:	d143      	bne.n	80184b8 <__kernel_rem_pio2+0x2dc>
 8018430:	9000      	str	r0, [sp, #0]
 8018432:	2200      	movs	r2, #0
 8018434:	2300      	movs	r3, #0
 8018436:	4640      	mov	r0, r8
 8018438:	4649      	mov	r1, r9
 801843a:	f7e8 facf 	bl	80009dc <__aeabi_dcmpeq>
 801843e:	2800      	cmp	r0, #0
 8018440:	f000 80c3 	beq.w	80185ca <__kernel_rem_pio2+0x3ee>
 8018444:	1e7c      	subs	r4, r7, #1
 8018446:	4623      	mov	r3, r4
 8018448:	2200      	movs	r2, #0
 801844a:	9902      	ldr	r1, [sp, #8]
 801844c:	428b      	cmp	r3, r1
 801844e:	da6a      	bge.n	8018526 <__kernel_rem_pio2+0x34a>
 8018450:	2a00      	cmp	r2, #0
 8018452:	f000 8084 	beq.w	801855e <__kernel_rem_pio2+0x382>
 8018456:	ab0c      	add	r3, sp, #48	; 0x30
 8018458:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801845c:	f1aa 0a18 	sub.w	sl, sl, #24
 8018460:	2b00      	cmp	r3, #0
 8018462:	f000 80b0 	beq.w	80185c6 <__kernel_rem_pio2+0x3ea>
 8018466:	4652      	mov	r2, sl
 8018468:	2000      	movs	r0, #0
 801846a:	4921      	ldr	r1, [pc, #132]	; (80184f0 <__kernel_rem_pio2+0x314>)
 801846c:	f001 f8f8 	bl	8019660 <scalbn>
 8018470:	4625      	mov	r5, r4
 8018472:	4606      	mov	r6, r0
 8018474:	460f      	mov	r7, r1
 8018476:	f04f 0a00 	mov.w	sl, #0
 801847a:	00e3      	lsls	r3, r4, #3
 801847c:	aa98      	add	r2, sp, #608	; 0x260
 801847e:	eb02 0803 	add.w	r8, r2, r3
 8018482:	f8df b070 	ldr.w	fp, [pc, #112]	; 80184f4 <__kernel_rem_pio2+0x318>
 8018486:	9306      	str	r3, [sp, #24]
 8018488:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 801848c:	2d00      	cmp	r5, #0
 801848e:	f280 80d2 	bge.w	8018636 <__kernel_rem_pio2+0x45a>
 8018492:	2500      	movs	r5, #0
 8018494:	9a06      	ldr	r2, [sp, #24]
 8018496:	ab98      	add	r3, sp, #608	; 0x260
 8018498:	189e      	adds	r6, r3, r2
 801849a:	3ea8      	subs	r6, #168	; 0xa8
 801849c:	1b63      	subs	r3, r4, r5
 801849e:	2b00      	cmp	r3, #0
 80184a0:	f2c0 80f9 	blt.w	8018696 <__kernel_rem_pio2+0x4ba>
 80184a4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8018500 <__kernel_rem_pio2+0x324>
 80184a8:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 80184ac:	f04f 0a00 	mov.w	sl, #0
 80184b0:	f04f 0b00 	mov.w	fp, #0
 80184b4:	2700      	movs	r7, #0
 80184b6:	e0e2      	b.n	801867e <__kernel_rem_pio2+0x4a2>
 80184b8:	2302      	movs	r3, #2
 80184ba:	9300      	str	r3, [sp, #0]
 80184bc:	e756      	b.n	801836c <__kernel_rem_pio2+0x190>
 80184be:	ab0c      	add	r3, sp, #48	; 0x30
 80184c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80184c4:	b94c      	cbnz	r4, 80184da <__kernel_rem_pio2+0x2fe>
 80184c6:	b12b      	cbz	r3, 80184d4 <__kernel_rem_pio2+0x2f8>
 80184c8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80184cc:	a80c      	add	r0, sp, #48	; 0x30
 80184ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80184d2:	2301      	movs	r3, #1
 80184d4:	3201      	adds	r2, #1
 80184d6:	461c      	mov	r4, r3
 80184d8:	e74f      	b.n	801837a <__kernel_rem_pio2+0x19e>
 80184da:	1acb      	subs	r3, r1, r3
 80184dc:	a80c      	add	r0, sp, #48	; 0x30
 80184de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80184e2:	4623      	mov	r3, r4
 80184e4:	e7f6      	b.n	80184d4 <__kernel_rem_pio2+0x2f8>
 80184e6:	bf00      	nop
 80184e8:	0801a8e8 	.word	0x0801a8e8
 80184ec:	40200000 	.word	0x40200000
 80184f0:	3ff00000 	.word	0x3ff00000
 80184f4:	3e700000 	.word	0x3e700000
 80184f8:	41700000 	.word	0x41700000
 80184fc:	3fe00000 	.word	0x3fe00000
 8018500:	0801a8a0 	.word	0x0801a8a0
 8018504:	1e7a      	subs	r2, r7, #1
 8018506:	ab0c      	add	r3, sp, #48	; 0x30
 8018508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801850c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018510:	a90c      	add	r1, sp, #48	; 0x30
 8018512:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018516:	e73e      	b.n	8018396 <__kernel_rem_pio2+0x1ba>
 8018518:	1e7a      	subs	r2, r7, #1
 801851a:	ab0c      	add	r3, sp, #48	; 0x30
 801851c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018520:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018524:	e7f4      	b.n	8018510 <__kernel_rem_pio2+0x334>
 8018526:	a90c      	add	r1, sp, #48	; 0x30
 8018528:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801852c:	3b01      	subs	r3, #1
 801852e:	430a      	orrs	r2, r1
 8018530:	e78b      	b.n	801844a <__kernel_rem_pio2+0x26e>
 8018532:	3401      	adds	r4, #1
 8018534:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018538:	2a00      	cmp	r2, #0
 801853a:	d0fa      	beq.n	8018532 <__kernel_rem_pio2+0x356>
 801853c:	ab98      	add	r3, sp, #608	; 0x260
 801853e:	449b      	add	fp, r3
 8018540:	9b07      	ldr	r3, [sp, #28]
 8018542:	1c7e      	adds	r6, r7, #1
 8018544:	19dd      	adds	r5, r3, r7
 8018546:	ab98      	add	r3, sp, #608	; 0x260
 8018548:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801854c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8018550:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8018554:	443c      	add	r4, r7
 8018556:	42b4      	cmp	r4, r6
 8018558:	da04      	bge.n	8018564 <__kernel_rem_pio2+0x388>
 801855a:	4627      	mov	r7, r4
 801855c:	e6b1      	b.n	80182c2 <__kernel_rem_pio2+0xe6>
 801855e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018560:	2401      	movs	r4, #1
 8018562:	e7e7      	b.n	8018534 <__kernel_rem_pio2+0x358>
 8018564:	f105 0308 	add.w	r3, r5, #8
 8018568:	9309      	str	r3, [sp, #36]	; 0x24
 801856a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801856c:	2700      	movs	r7, #0
 801856e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018572:	f7e7 ff61 	bl	8000438 <__aeabi_i2d>
 8018576:	f04f 0800 	mov.w	r8, #0
 801857a:	f04f 0900 	mov.w	r9, #0
 801857e:	9b08      	ldr	r3, [sp, #32]
 8018580:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8018584:	3b08      	subs	r3, #8
 8018586:	9300      	str	r3, [sp, #0]
 8018588:	f105 0310 	add.w	r3, r5, #16
 801858c:	9305      	str	r3, [sp, #20]
 801858e:	9b06      	ldr	r3, [sp, #24]
 8018590:	429f      	cmp	r7, r3
 8018592:	dd04      	ble.n	801859e <__kernel_rem_pio2+0x3c2>
 8018594:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8018598:	3601      	adds	r6, #1
 801859a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801859c:	e7db      	b.n	8018556 <__kernel_rem_pio2+0x37a>
 801859e:	9905      	ldr	r1, [sp, #20]
 80185a0:	9d00      	ldr	r5, [sp, #0]
 80185a2:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80185a6:	9105      	str	r1, [sp, #20]
 80185a8:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80185ac:	9500      	str	r5, [sp, #0]
 80185ae:	f7e7 ffad 	bl	800050c <__aeabi_dmul>
 80185b2:	4602      	mov	r2, r0
 80185b4:	460b      	mov	r3, r1
 80185b6:	4640      	mov	r0, r8
 80185b8:	4649      	mov	r1, r9
 80185ba:	f7e7 fdf1 	bl	80001a0 <__adddf3>
 80185be:	3701      	adds	r7, #1
 80185c0:	4680      	mov	r8, r0
 80185c2:	4689      	mov	r9, r1
 80185c4:	e7e3      	b.n	801858e <__kernel_rem_pio2+0x3b2>
 80185c6:	3c01      	subs	r4, #1
 80185c8:	e745      	b.n	8018456 <__kernel_rem_pio2+0x27a>
 80185ca:	f1ca 0200 	rsb	r2, sl, #0
 80185ce:	4640      	mov	r0, r8
 80185d0:	4649      	mov	r1, r9
 80185d2:	f001 f845 	bl	8019660 <scalbn>
 80185d6:	2200      	movs	r2, #0
 80185d8:	4ba3      	ldr	r3, [pc, #652]	; (8018868 <__kernel_rem_pio2+0x68c>)
 80185da:	4604      	mov	r4, r0
 80185dc:	460d      	mov	r5, r1
 80185de:	f7e8 fa1b 	bl	8000a18 <__aeabi_dcmpge>
 80185e2:	b1f8      	cbz	r0, 8018624 <__kernel_rem_pio2+0x448>
 80185e4:	2200      	movs	r2, #0
 80185e6:	4ba1      	ldr	r3, [pc, #644]	; (801886c <__kernel_rem_pio2+0x690>)
 80185e8:	4620      	mov	r0, r4
 80185ea:	4629      	mov	r1, r5
 80185ec:	f7e7 ff8e 	bl	800050c <__aeabi_dmul>
 80185f0:	f7e8 fa3c 	bl	8000a6c <__aeabi_d2iz>
 80185f4:	4606      	mov	r6, r0
 80185f6:	f7e7 ff1f 	bl	8000438 <__aeabi_i2d>
 80185fa:	2200      	movs	r2, #0
 80185fc:	4b9a      	ldr	r3, [pc, #616]	; (8018868 <__kernel_rem_pio2+0x68c>)
 80185fe:	f7e7 ff85 	bl	800050c <__aeabi_dmul>
 8018602:	460b      	mov	r3, r1
 8018604:	4602      	mov	r2, r0
 8018606:	4629      	mov	r1, r5
 8018608:	4620      	mov	r0, r4
 801860a:	f7e7 fdc7 	bl	800019c <__aeabi_dsub>
 801860e:	f7e8 fa2d 	bl	8000a6c <__aeabi_d2iz>
 8018612:	1c7c      	adds	r4, r7, #1
 8018614:	ab0c      	add	r3, sp, #48	; 0x30
 8018616:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 801861a:	f10a 0a18 	add.w	sl, sl, #24
 801861e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8018622:	e720      	b.n	8018466 <__kernel_rem_pio2+0x28a>
 8018624:	4620      	mov	r0, r4
 8018626:	4629      	mov	r1, r5
 8018628:	f7e8 fa20 	bl	8000a6c <__aeabi_d2iz>
 801862c:	ab0c      	add	r3, sp, #48	; 0x30
 801862e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8018632:	463c      	mov	r4, r7
 8018634:	e717      	b.n	8018466 <__kernel_rem_pio2+0x28a>
 8018636:	ab0c      	add	r3, sp, #48	; 0x30
 8018638:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801863c:	f7e7 fefc 	bl	8000438 <__aeabi_i2d>
 8018640:	4632      	mov	r2, r6
 8018642:	463b      	mov	r3, r7
 8018644:	f7e7 ff62 	bl	800050c <__aeabi_dmul>
 8018648:	4652      	mov	r2, sl
 801864a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801864e:	465b      	mov	r3, fp
 8018650:	4630      	mov	r0, r6
 8018652:	4639      	mov	r1, r7
 8018654:	f7e7 ff5a 	bl	800050c <__aeabi_dmul>
 8018658:	3d01      	subs	r5, #1
 801865a:	4606      	mov	r6, r0
 801865c:	460f      	mov	r7, r1
 801865e:	e715      	b.n	801848c <__kernel_rem_pio2+0x2b0>
 8018660:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8018664:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8018668:	f7e7 ff50 	bl	800050c <__aeabi_dmul>
 801866c:	4602      	mov	r2, r0
 801866e:	460b      	mov	r3, r1
 8018670:	4650      	mov	r0, sl
 8018672:	4659      	mov	r1, fp
 8018674:	f7e7 fd94 	bl	80001a0 <__adddf3>
 8018678:	4682      	mov	sl, r0
 801867a:	468b      	mov	fp, r1
 801867c:	3701      	adds	r7, #1
 801867e:	9b02      	ldr	r3, [sp, #8]
 8018680:	429f      	cmp	r7, r3
 8018682:	dc01      	bgt.n	8018688 <__kernel_rem_pio2+0x4ac>
 8018684:	42bd      	cmp	r5, r7
 8018686:	daeb      	bge.n	8018660 <__kernel_rem_pio2+0x484>
 8018688:	ab48      	add	r3, sp, #288	; 0x120
 801868a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801868e:	e9c3 ab00 	strd	sl, fp, [r3]
 8018692:	3501      	adds	r5, #1
 8018694:	e702      	b.n	801849c <__kernel_rem_pio2+0x2c0>
 8018696:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8018698:	2b03      	cmp	r3, #3
 801869a:	d86c      	bhi.n	8018776 <__kernel_rem_pio2+0x59a>
 801869c:	e8df f003 	tbb	[pc, r3]
 80186a0:	022f2f59 	.word	0x022f2f59
 80186a4:	9a06      	ldr	r2, [sp, #24]
 80186a6:	ab48      	add	r3, sp, #288	; 0x120
 80186a8:	189d      	adds	r5, r3, r2
 80186aa:	46aa      	mov	sl, r5
 80186ac:	46a3      	mov	fp, r4
 80186ae:	f1bb 0f00 	cmp.w	fp, #0
 80186b2:	f300 8087 	bgt.w	80187c4 <__kernel_rem_pio2+0x5e8>
 80186b6:	46a2      	mov	sl, r4
 80186b8:	f1ba 0f01 	cmp.w	sl, #1
 80186bc:	f300 809f 	bgt.w	80187fe <__kernel_rem_pio2+0x622>
 80186c0:	2700      	movs	r7, #0
 80186c2:	463e      	mov	r6, r7
 80186c4:	9d06      	ldr	r5, [sp, #24]
 80186c6:	ab48      	add	r3, sp, #288	; 0x120
 80186c8:	3508      	adds	r5, #8
 80186ca:	441d      	add	r5, r3
 80186cc:	2c01      	cmp	r4, #1
 80186ce:	f300 80b3 	bgt.w	8018838 <__kernel_rem_pio2+0x65c>
 80186d2:	9b00      	ldr	r3, [sp, #0]
 80186d4:	9d48      	ldr	r5, [sp, #288]	; 0x120
 80186d6:	9849      	ldr	r0, [sp, #292]	; 0x124
 80186d8:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 80186da:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80186dc:	2b00      	cmp	r3, #0
 80186de:	f040 80b5 	bne.w	801884c <__kernel_rem_pio2+0x670>
 80186e2:	4603      	mov	r3, r0
 80186e4:	462a      	mov	r2, r5
 80186e6:	9804      	ldr	r0, [sp, #16]
 80186e8:	e9c0 2300 	strd	r2, r3, [r0]
 80186ec:	4622      	mov	r2, r4
 80186ee:	460b      	mov	r3, r1
 80186f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80186f4:	463a      	mov	r2, r7
 80186f6:	4633      	mov	r3, r6
 80186f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80186fc:	e03b      	b.n	8018776 <__kernel_rem_pio2+0x59a>
 80186fe:	f04f 0c00 	mov.w	ip, #0
 8018702:	4626      	mov	r6, r4
 8018704:	4667      	mov	r7, ip
 8018706:	9d06      	ldr	r5, [sp, #24]
 8018708:	ab48      	add	r3, sp, #288	; 0x120
 801870a:	3508      	adds	r5, #8
 801870c:	441d      	add	r5, r3
 801870e:	2e00      	cmp	r6, #0
 8018710:	da42      	bge.n	8018798 <__kernel_rem_pio2+0x5bc>
 8018712:	9b00      	ldr	r3, [sp, #0]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d049      	beq.n	80187ac <__kernel_rem_pio2+0x5d0>
 8018718:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 801871c:	4662      	mov	r2, ip
 801871e:	460b      	mov	r3, r1
 8018720:	9904      	ldr	r1, [sp, #16]
 8018722:	2601      	movs	r6, #1
 8018724:	e9c1 2300 	strd	r2, r3, [r1]
 8018728:	a948      	add	r1, sp, #288	; 0x120
 801872a:	463b      	mov	r3, r7
 801872c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018730:	f7e7 fd34 	bl	800019c <__aeabi_dsub>
 8018734:	4684      	mov	ip, r0
 8018736:	460f      	mov	r7, r1
 8018738:	ad48      	add	r5, sp, #288	; 0x120
 801873a:	42b4      	cmp	r4, r6
 801873c:	da38      	bge.n	80187b0 <__kernel_rem_pio2+0x5d4>
 801873e:	9b00      	ldr	r3, [sp, #0]
 8018740:	b10b      	cbz	r3, 8018746 <__kernel_rem_pio2+0x56a>
 8018742:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8018746:	4662      	mov	r2, ip
 8018748:	463b      	mov	r3, r7
 801874a:	9904      	ldr	r1, [sp, #16]
 801874c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8018750:	e011      	b.n	8018776 <__kernel_rem_pio2+0x59a>
 8018752:	2700      	movs	r7, #0
 8018754:	463d      	mov	r5, r7
 8018756:	9b06      	ldr	r3, [sp, #24]
 8018758:	aa98      	add	r2, sp, #608	; 0x260
 801875a:	4413      	add	r3, r2
 801875c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8018760:	2c00      	cmp	r4, #0
 8018762:	da0f      	bge.n	8018784 <__kernel_rem_pio2+0x5a8>
 8018764:	9b00      	ldr	r3, [sp, #0]
 8018766:	b10b      	cbz	r3, 801876c <__kernel_rem_pio2+0x590>
 8018768:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 801876c:	463a      	mov	r2, r7
 801876e:	462b      	mov	r3, r5
 8018770:	9904      	ldr	r1, [sp, #16]
 8018772:	e9c1 2300 	strd	r2, r3, [r1]
 8018776:	9b05      	ldr	r3, [sp, #20]
 8018778:	f003 0007 	and.w	r0, r3, #7
 801877c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8018780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018784:	4638      	mov	r0, r7
 8018786:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801878a:	4629      	mov	r1, r5
 801878c:	f7e7 fd08 	bl	80001a0 <__adddf3>
 8018790:	3c01      	subs	r4, #1
 8018792:	4607      	mov	r7, r0
 8018794:	460d      	mov	r5, r1
 8018796:	e7e3      	b.n	8018760 <__kernel_rem_pio2+0x584>
 8018798:	4660      	mov	r0, ip
 801879a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801879e:	4639      	mov	r1, r7
 80187a0:	f7e7 fcfe 	bl	80001a0 <__adddf3>
 80187a4:	3e01      	subs	r6, #1
 80187a6:	4684      	mov	ip, r0
 80187a8:	460f      	mov	r7, r1
 80187aa:	e7b0      	b.n	801870e <__kernel_rem_pio2+0x532>
 80187ac:	4639      	mov	r1, r7
 80187ae:	e7b5      	b.n	801871c <__kernel_rem_pio2+0x540>
 80187b0:	4660      	mov	r0, ip
 80187b2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80187b6:	4639      	mov	r1, r7
 80187b8:	f7e7 fcf2 	bl	80001a0 <__adddf3>
 80187bc:	3601      	adds	r6, #1
 80187be:	4684      	mov	ip, r0
 80187c0:	460f      	mov	r7, r1
 80187c2:	e7ba      	b.n	801873a <__kernel_rem_pio2+0x55e>
 80187c4:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 80187c8:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80187cc:	4640      	mov	r0, r8
 80187ce:	4649      	mov	r1, r9
 80187d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80187d4:	f7e7 fce4 	bl	80001a0 <__adddf3>
 80187d8:	4602      	mov	r2, r0
 80187da:	460b      	mov	r3, r1
 80187dc:	4606      	mov	r6, r0
 80187de:	460f      	mov	r7, r1
 80187e0:	4640      	mov	r0, r8
 80187e2:	4649      	mov	r1, r9
 80187e4:	f7e7 fcda 	bl	800019c <__aeabi_dsub>
 80187e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80187ec:	f7e7 fcd8 	bl	80001a0 <__adddf3>
 80187f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80187f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80187f8:	e9ca 6700 	strd	r6, r7, [sl]
 80187fc:	e757      	b.n	80186ae <__kernel_rem_pio2+0x4d2>
 80187fe:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 8018802:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8018806:	4630      	mov	r0, r6
 8018808:	4639      	mov	r1, r7
 801880a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801880e:	f7e7 fcc7 	bl	80001a0 <__adddf3>
 8018812:	4602      	mov	r2, r0
 8018814:	460b      	mov	r3, r1
 8018816:	4680      	mov	r8, r0
 8018818:	4689      	mov	r9, r1
 801881a:	4630      	mov	r0, r6
 801881c:	4639      	mov	r1, r7
 801881e:	f7e7 fcbd 	bl	800019c <__aeabi_dsub>
 8018822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018826:	f7e7 fcbb 	bl	80001a0 <__adddf3>
 801882a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801882e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8018832:	e9c5 8900 	strd	r8, r9, [r5]
 8018836:	e73f      	b.n	80186b8 <__kernel_rem_pio2+0x4dc>
 8018838:	4638      	mov	r0, r7
 801883a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801883e:	4631      	mov	r1, r6
 8018840:	f7e7 fcae 	bl	80001a0 <__adddf3>
 8018844:	3c01      	subs	r4, #1
 8018846:	4607      	mov	r7, r0
 8018848:	460e      	mov	r6, r1
 801884a:	e73f      	b.n	80186cc <__kernel_rem_pio2+0x4f0>
 801884c:	9b04      	ldr	r3, [sp, #16]
 801884e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8018852:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8018856:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801885a:	601d      	str	r5, [r3, #0]
 801885c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8018860:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8018864:	615e      	str	r6, [r3, #20]
 8018866:	e786      	b.n	8018776 <__kernel_rem_pio2+0x59a>
 8018868:	41700000 	.word	0x41700000
 801886c:	3e700000 	.word	0x3e700000

08018870 <__kernel_sin>:
 8018870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018874:	b086      	sub	sp, #24
 8018876:	e9cd 2300 	strd	r2, r3, [sp]
 801887a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801887e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8018882:	4682      	mov	sl, r0
 8018884:	460c      	mov	r4, r1
 8018886:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018888:	da03      	bge.n	8018892 <__kernel_sin+0x22>
 801888a:	f7e8 f8ef 	bl	8000a6c <__aeabi_d2iz>
 801888e:	2800      	cmp	r0, #0
 8018890:	d050      	beq.n	8018934 <__kernel_sin+0xc4>
 8018892:	4652      	mov	r2, sl
 8018894:	4623      	mov	r3, r4
 8018896:	4650      	mov	r0, sl
 8018898:	4621      	mov	r1, r4
 801889a:	f7e7 fe37 	bl	800050c <__aeabi_dmul>
 801889e:	4606      	mov	r6, r0
 80188a0:	460f      	mov	r7, r1
 80188a2:	4602      	mov	r2, r0
 80188a4:	460b      	mov	r3, r1
 80188a6:	4650      	mov	r0, sl
 80188a8:	4621      	mov	r1, r4
 80188aa:	f7e7 fe2f 	bl	800050c <__aeabi_dmul>
 80188ae:	a33e      	add	r3, pc, #248	; (adr r3, 80189a8 <__kernel_sin+0x138>)
 80188b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188b4:	4680      	mov	r8, r0
 80188b6:	4689      	mov	r9, r1
 80188b8:	4630      	mov	r0, r6
 80188ba:	4639      	mov	r1, r7
 80188bc:	f7e7 fe26 	bl	800050c <__aeabi_dmul>
 80188c0:	a33b      	add	r3, pc, #236	; (adr r3, 80189b0 <__kernel_sin+0x140>)
 80188c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188c6:	f7e7 fc69 	bl	800019c <__aeabi_dsub>
 80188ca:	4632      	mov	r2, r6
 80188cc:	463b      	mov	r3, r7
 80188ce:	f7e7 fe1d 	bl	800050c <__aeabi_dmul>
 80188d2:	a339      	add	r3, pc, #228	; (adr r3, 80189b8 <__kernel_sin+0x148>)
 80188d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188d8:	f7e7 fc62 	bl	80001a0 <__adddf3>
 80188dc:	4632      	mov	r2, r6
 80188de:	463b      	mov	r3, r7
 80188e0:	f7e7 fe14 	bl	800050c <__aeabi_dmul>
 80188e4:	a336      	add	r3, pc, #216	; (adr r3, 80189c0 <__kernel_sin+0x150>)
 80188e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ea:	f7e7 fc57 	bl	800019c <__aeabi_dsub>
 80188ee:	4632      	mov	r2, r6
 80188f0:	463b      	mov	r3, r7
 80188f2:	f7e7 fe0b 	bl	800050c <__aeabi_dmul>
 80188f6:	a334      	add	r3, pc, #208	; (adr r3, 80189c8 <__kernel_sin+0x158>)
 80188f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188fc:	f7e7 fc50 	bl	80001a0 <__adddf3>
 8018900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018904:	b9dd      	cbnz	r5, 801893e <__kernel_sin+0xce>
 8018906:	4602      	mov	r2, r0
 8018908:	460b      	mov	r3, r1
 801890a:	4630      	mov	r0, r6
 801890c:	4639      	mov	r1, r7
 801890e:	f7e7 fdfd 	bl	800050c <__aeabi_dmul>
 8018912:	a32f      	add	r3, pc, #188	; (adr r3, 80189d0 <__kernel_sin+0x160>)
 8018914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018918:	f7e7 fc40 	bl	800019c <__aeabi_dsub>
 801891c:	4642      	mov	r2, r8
 801891e:	464b      	mov	r3, r9
 8018920:	f7e7 fdf4 	bl	800050c <__aeabi_dmul>
 8018924:	4602      	mov	r2, r0
 8018926:	460b      	mov	r3, r1
 8018928:	4650      	mov	r0, sl
 801892a:	4621      	mov	r1, r4
 801892c:	f7e7 fc38 	bl	80001a0 <__adddf3>
 8018930:	4682      	mov	sl, r0
 8018932:	460c      	mov	r4, r1
 8018934:	4650      	mov	r0, sl
 8018936:	4621      	mov	r1, r4
 8018938:	b006      	add	sp, #24
 801893a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801893e:	2200      	movs	r2, #0
 8018940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018944:	4b24      	ldr	r3, [pc, #144]	; (80189d8 <__kernel_sin+0x168>)
 8018946:	f7e7 fde1 	bl	800050c <__aeabi_dmul>
 801894a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801894e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018952:	4640      	mov	r0, r8
 8018954:	4649      	mov	r1, r9
 8018956:	f7e7 fdd9 	bl	800050c <__aeabi_dmul>
 801895a:	4602      	mov	r2, r0
 801895c:	460b      	mov	r3, r1
 801895e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018962:	f7e7 fc1b 	bl	800019c <__aeabi_dsub>
 8018966:	4632      	mov	r2, r6
 8018968:	463b      	mov	r3, r7
 801896a:	f7e7 fdcf 	bl	800050c <__aeabi_dmul>
 801896e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018972:	f7e7 fc13 	bl	800019c <__aeabi_dsub>
 8018976:	a316      	add	r3, pc, #88	; (adr r3, 80189d0 <__kernel_sin+0x160>)
 8018978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801897c:	4606      	mov	r6, r0
 801897e:	460f      	mov	r7, r1
 8018980:	4640      	mov	r0, r8
 8018982:	4649      	mov	r1, r9
 8018984:	f7e7 fdc2 	bl	800050c <__aeabi_dmul>
 8018988:	4602      	mov	r2, r0
 801898a:	460b      	mov	r3, r1
 801898c:	4630      	mov	r0, r6
 801898e:	4639      	mov	r1, r7
 8018990:	f7e7 fc06 	bl	80001a0 <__adddf3>
 8018994:	4602      	mov	r2, r0
 8018996:	460b      	mov	r3, r1
 8018998:	4650      	mov	r0, sl
 801899a:	4621      	mov	r1, r4
 801899c:	f7e7 fbfe 	bl	800019c <__aeabi_dsub>
 80189a0:	e7c6      	b.n	8018930 <__kernel_sin+0xc0>
 80189a2:	bf00      	nop
 80189a4:	f3af 8000 	nop.w
 80189a8:	5acfd57c 	.word	0x5acfd57c
 80189ac:	3de5d93a 	.word	0x3de5d93a
 80189b0:	8a2b9ceb 	.word	0x8a2b9ceb
 80189b4:	3e5ae5e6 	.word	0x3e5ae5e6
 80189b8:	57b1fe7d 	.word	0x57b1fe7d
 80189bc:	3ec71de3 	.word	0x3ec71de3
 80189c0:	19c161d5 	.word	0x19c161d5
 80189c4:	3f2a01a0 	.word	0x3f2a01a0
 80189c8:	1110f8a6 	.word	0x1110f8a6
 80189cc:	3f811111 	.word	0x3f811111
 80189d0:	55555549 	.word	0x55555549
 80189d4:	3fc55555 	.word	0x3fc55555
 80189d8:	3fe00000 	.word	0x3fe00000

080189dc <__kernel_cosf>:
 80189dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189e0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80189e4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80189e8:	4606      	mov	r6, r0
 80189ea:	4688      	mov	r8, r1
 80189ec:	da03      	bge.n	80189f6 <__kernel_cosf+0x1a>
 80189ee:	f7e8 fbbf 	bl	8001170 <__aeabi_f2iz>
 80189f2:	2800      	cmp	r0, #0
 80189f4:	d05c      	beq.n	8018ab0 <__kernel_cosf+0xd4>
 80189f6:	4631      	mov	r1, r6
 80189f8:	4630      	mov	r0, r6
 80189fa:	f7e8 f9dd 	bl	8000db8 <__aeabi_fmul>
 80189fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8018a02:	4605      	mov	r5, r0
 8018a04:	f7e8 f9d8 	bl	8000db8 <__aeabi_fmul>
 8018a08:	492b      	ldr	r1, [pc, #172]	; (8018ab8 <__kernel_cosf+0xdc>)
 8018a0a:	4607      	mov	r7, r0
 8018a0c:	4628      	mov	r0, r5
 8018a0e:	f7e8 f9d3 	bl	8000db8 <__aeabi_fmul>
 8018a12:	492a      	ldr	r1, [pc, #168]	; (8018abc <__kernel_cosf+0xe0>)
 8018a14:	f7e8 f8c8 	bl	8000ba8 <__addsf3>
 8018a18:	4629      	mov	r1, r5
 8018a1a:	f7e8 f9cd 	bl	8000db8 <__aeabi_fmul>
 8018a1e:	4928      	ldr	r1, [pc, #160]	; (8018ac0 <__kernel_cosf+0xe4>)
 8018a20:	f7e8 f8c0 	bl	8000ba4 <__aeabi_fsub>
 8018a24:	4629      	mov	r1, r5
 8018a26:	f7e8 f9c7 	bl	8000db8 <__aeabi_fmul>
 8018a2a:	4926      	ldr	r1, [pc, #152]	; (8018ac4 <__kernel_cosf+0xe8>)
 8018a2c:	f7e8 f8bc 	bl	8000ba8 <__addsf3>
 8018a30:	4629      	mov	r1, r5
 8018a32:	f7e8 f9c1 	bl	8000db8 <__aeabi_fmul>
 8018a36:	4924      	ldr	r1, [pc, #144]	; (8018ac8 <__kernel_cosf+0xec>)
 8018a38:	f7e8 f8b4 	bl	8000ba4 <__aeabi_fsub>
 8018a3c:	4629      	mov	r1, r5
 8018a3e:	f7e8 f9bb 	bl	8000db8 <__aeabi_fmul>
 8018a42:	4922      	ldr	r1, [pc, #136]	; (8018acc <__kernel_cosf+0xf0>)
 8018a44:	f7e8 f8b0 	bl	8000ba8 <__addsf3>
 8018a48:	4629      	mov	r1, r5
 8018a4a:	f7e8 f9b5 	bl	8000db8 <__aeabi_fmul>
 8018a4e:	4629      	mov	r1, r5
 8018a50:	f7e8 f9b2 	bl	8000db8 <__aeabi_fmul>
 8018a54:	4641      	mov	r1, r8
 8018a56:	4605      	mov	r5, r0
 8018a58:	4630      	mov	r0, r6
 8018a5a:	f7e8 f9ad 	bl	8000db8 <__aeabi_fmul>
 8018a5e:	4601      	mov	r1, r0
 8018a60:	4628      	mov	r0, r5
 8018a62:	f7e8 f89f 	bl	8000ba4 <__aeabi_fsub>
 8018a66:	4b1a      	ldr	r3, [pc, #104]	; (8018ad0 <__kernel_cosf+0xf4>)
 8018a68:	4605      	mov	r5, r0
 8018a6a:	429c      	cmp	r4, r3
 8018a6c:	dc0a      	bgt.n	8018a84 <__kernel_cosf+0xa8>
 8018a6e:	4601      	mov	r1, r0
 8018a70:	4638      	mov	r0, r7
 8018a72:	f7e8 f897 	bl	8000ba4 <__aeabi_fsub>
 8018a76:	4601      	mov	r1, r0
 8018a78:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018a7c:	f7e8 f892 	bl	8000ba4 <__aeabi_fsub>
 8018a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a84:	4b13      	ldr	r3, [pc, #76]	; (8018ad4 <__kernel_cosf+0xf8>)
 8018a86:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018a8a:	429c      	cmp	r4, r3
 8018a8c:	bfcc      	ite	gt
 8018a8e:	4c12      	ldrgt	r4, [pc, #72]	; (8018ad8 <__kernel_cosf+0xfc>)
 8018a90:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8018a94:	4621      	mov	r1, r4
 8018a96:	f7e8 f885 	bl	8000ba4 <__aeabi_fsub>
 8018a9a:	4621      	mov	r1, r4
 8018a9c:	4606      	mov	r6, r0
 8018a9e:	4638      	mov	r0, r7
 8018aa0:	f7e8 f880 	bl	8000ba4 <__aeabi_fsub>
 8018aa4:	4629      	mov	r1, r5
 8018aa6:	f7e8 f87d 	bl	8000ba4 <__aeabi_fsub>
 8018aaa:	4601      	mov	r1, r0
 8018aac:	4630      	mov	r0, r6
 8018aae:	e7e5      	b.n	8018a7c <__kernel_cosf+0xa0>
 8018ab0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018ab4:	e7e4      	b.n	8018a80 <__kernel_cosf+0xa4>
 8018ab6:	bf00      	nop
 8018ab8:	ad47d74e 	.word	0xad47d74e
 8018abc:	310f74f6 	.word	0x310f74f6
 8018ac0:	3493f27c 	.word	0x3493f27c
 8018ac4:	37d00d01 	.word	0x37d00d01
 8018ac8:	3ab60b61 	.word	0x3ab60b61
 8018acc:	3d2aaaab 	.word	0x3d2aaaab
 8018ad0:	3e999999 	.word	0x3e999999
 8018ad4:	3f480000 	.word	0x3f480000
 8018ad8:	3e900000 	.word	0x3e900000

08018adc <__kernel_rem_pio2f>:
 8018adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ae0:	b0d9      	sub	sp, #356	; 0x164
 8018ae2:	9304      	str	r3, [sp, #16]
 8018ae4:	9101      	str	r1, [sp, #4]
 8018ae6:	4bc3      	ldr	r3, [pc, #780]	; (8018df4 <__kernel_rem_pio2f+0x318>)
 8018ae8:	9962      	ldr	r1, [sp, #392]	; 0x188
 8018aea:	1ed4      	subs	r4, r2, #3
 8018aec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018af0:	2500      	movs	r5, #0
 8018af2:	9302      	str	r3, [sp, #8]
 8018af4:	9b04      	ldr	r3, [sp, #16]
 8018af6:	f04f 0a00 	mov.w	sl, #0
 8018afa:	3b01      	subs	r3, #1
 8018afc:	9303      	str	r3, [sp, #12]
 8018afe:	2308      	movs	r3, #8
 8018b00:	fb94 f4f3 	sdiv	r4, r4, r3
 8018b04:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8018b08:	1c66      	adds	r6, r4, #1
 8018b0a:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8018b0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8018b12:	eb03 0802 	add.w	r8, r3, r2
 8018b16:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8018b18:	1aa7      	subs	r7, r4, r2
 8018b1a:	9005      	str	r0, [sp, #20]
 8018b1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018b20:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8018b24:	4545      	cmp	r5, r8
 8018b26:	dd7f      	ble.n	8018c28 <__kernel_rem_pio2f+0x14c>
 8018b28:	f04f 0800 	mov.w	r8, #0
 8018b2c:	f04f 0a00 	mov.w	sl, #0
 8018b30:	f06f 0b03 	mvn.w	fp, #3
 8018b34:	9b04      	ldr	r3, [sp, #16]
 8018b36:	aa1c      	add	r2, sp, #112	; 0x70
 8018b38:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8018b3c:	ab44      	add	r3, sp, #272	; 0x110
 8018b3e:	9a02      	ldr	r2, [sp, #8]
 8018b40:	4590      	cmp	r8, r2
 8018b42:	f340 8097 	ble.w	8018c74 <__kernel_rem_pio2f+0x198>
 8018b46:	4613      	mov	r3, r2
 8018b48:	aa08      	add	r2, sp, #32
 8018b4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018b4e:	9307      	str	r3, [sp, #28]
 8018b50:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8018b52:	9f02      	ldr	r7, [sp, #8]
 8018b54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018b58:	9306      	str	r3, [sp, #24]
 8018b5a:	46ba      	mov	sl, r7
 8018b5c:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8018b60:	ab58      	add	r3, sp, #352	; 0x160
 8018b62:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8018b66:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8018b6a:	ad07      	add	r5, sp, #28
 8018b6c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8018b70:	f1ba 0f00 	cmp.w	sl, #0
 8018b74:	f300 8081 	bgt.w	8018c7a <__kernel_rem_pio2f+0x19e>
 8018b78:	4631      	mov	r1, r6
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	f000 ff86 	bl	8019a8c <scalbnf>
 8018b80:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8018b84:	4604      	mov	r4, r0
 8018b86:	f7e8 f917 	bl	8000db8 <__aeabi_fmul>
 8018b8a:	f000 feef 	bl	801996c <floorf>
 8018b8e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8018b92:	f7e8 f911 	bl	8000db8 <__aeabi_fmul>
 8018b96:	4601      	mov	r1, r0
 8018b98:	4620      	mov	r0, r4
 8018b9a:	f7e8 f803 	bl	8000ba4 <__aeabi_fsub>
 8018b9e:	4604      	mov	r4, r0
 8018ba0:	f7e8 fae6 	bl	8001170 <__aeabi_f2iz>
 8018ba4:	4681      	mov	r9, r0
 8018ba6:	f7e8 f8b3 	bl	8000d10 <__aeabi_i2f>
 8018baa:	4601      	mov	r1, r0
 8018bac:	4620      	mov	r0, r4
 8018bae:	f7e7 fff9 	bl	8000ba4 <__aeabi_fsub>
 8018bb2:	2e00      	cmp	r6, #0
 8018bb4:	4604      	mov	r4, r0
 8018bb6:	dd7e      	ble.n	8018cb6 <__kernel_rem_pio2f+0x1da>
 8018bb8:	1e7b      	subs	r3, r7, #1
 8018bba:	aa08      	add	r2, sp, #32
 8018bbc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8018bc0:	f1c6 0208 	rsb	r2, r6, #8
 8018bc4:	fa45 f002 	asr.w	r0, r5, r2
 8018bc8:	4481      	add	r9, r0
 8018bca:	4090      	lsls	r0, r2
 8018bcc:	1a2d      	subs	r5, r5, r0
 8018bce:	aa08      	add	r2, sp, #32
 8018bd0:	f1c6 0007 	rsb	r0, r6, #7
 8018bd4:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8018bd8:	4105      	asrs	r5, r0
 8018bda:	2d00      	cmp	r5, #0
 8018bdc:	dd79      	ble.n	8018cd2 <__kernel_rem_pio2f+0x1f6>
 8018bde:	2200      	movs	r2, #0
 8018be0:	4690      	mov	r8, r2
 8018be2:	f109 0901 	add.w	r9, r9, #1
 8018be6:	4297      	cmp	r7, r2
 8018be8:	f300 80ae 	bgt.w	8018d48 <__kernel_rem_pio2f+0x26c>
 8018bec:	2e00      	cmp	r6, #0
 8018bee:	dd05      	ble.n	8018bfc <__kernel_rem_pio2f+0x120>
 8018bf0:	2e01      	cmp	r6, #1
 8018bf2:	f000 80c0 	beq.w	8018d76 <__kernel_rem_pio2f+0x29a>
 8018bf6:	2e02      	cmp	r6, #2
 8018bf8:	f000 80c7 	beq.w	8018d8a <__kernel_rem_pio2f+0x2ae>
 8018bfc:	2d02      	cmp	r5, #2
 8018bfe:	d168      	bne.n	8018cd2 <__kernel_rem_pio2f+0x1f6>
 8018c00:	4621      	mov	r1, r4
 8018c02:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018c06:	f7e7 ffcd 	bl	8000ba4 <__aeabi_fsub>
 8018c0a:	4604      	mov	r4, r0
 8018c0c:	f1b8 0f00 	cmp.w	r8, #0
 8018c10:	d05f      	beq.n	8018cd2 <__kernel_rem_pio2f+0x1f6>
 8018c12:	4631      	mov	r1, r6
 8018c14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018c18:	f000 ff38 	bl	8019a8c <scalbnf>
 8018c1c:	4601      	mov	r1, r0
 8018c1e:	4620      	mov	r0, r4
 8018c20:	f7e7 ffc0 	bl	8000ba4 <__aeabi_fsub>
 8018c24:	4604      	mov	r4, r0
 8018c26:	e054      	b.n	8018cd2 <__kernel_rem_pio2f+0x1f6>
 8018c28:	42ef      	cmn	r7, r5
 8018c2a:	d407      	bmi.n	8018c3c <__kernel_rem_pio2f+0x160>
 8018c2c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8018c30:	f7e8 f86e 	bl	8000d10 <__aeabi_i2f>
 8018c34:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8018c38:	3501      	adds	r5, #1
 8018c3a:	e773      	b.n	8018b24 <__kernel_rem_pio2f+0x48>
 8018c3c:	4650      	mov	r0, sl
 8018c3e:	e7f9      	b.n	8018c34 <__kernel_rem_pio2f+0x158>
 8018c40:	fb0b 5207 	mla	r2, fp, r7, r5
 8018c44:	9306      	str	r3, [sp, #24]
 8018c46:	9b05      	ldr	r3, [sp, #20]
 8018c48:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018c4c:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8018c50:	f7e8 f8b2 	bl	8000db8 <__aeabi_fmul>
 8018c54:	4601      	mov	r1, r0
 8018c56:	4648      	mov	r0, r9
 8018c58:	f7e7 ffa6 	bl	8000ba8 <__addsf3>
 8018c5c:	4681      	mov	r9, r0
 8018c5e:	9b06      	ldr	r3, [sp, #24]
 8018c60:	3701      	adds	r7, #1
 8018c62:	9a03      	ldr	r2, [sp, #12]
 8018c64:	4297      	cmp	r7, r2
 8018c66:	ddeb      	ble.n	8018c40 <__kernel_rem_pio2f+0x164>
 8018c68:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 8018c6c:	3504      	adds	r5, #4
 8018c6e:	f108 0801 	add.w	r8, r8, #1
 8018c72:	e764      	b.n	8018b3e <__kernel_rem_pio2f+0x62>
 8018c74:	46d1      	mov	r9, sl
 8018c76:	2700      	movs	r7, #0
 8018c78:	e7f3      	b.n	8018c62 <__kernel_rem_pio2f+0x186>
 8018c7a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8018c7e:	4620      	mov	r0, r4
 8018c80:	f7e8 f89a 	bl	8000db8 <__aeabi_fmul>
 8018c84:	f7e8 fa74 	bl	8001170 <__aeabi_f2iz>
 8018c88:	f7e8 f842 	bl	8000d10 <__aeabi_i2f>
 8018c8c:	4641      	mov	r1, r8
 8018c8e:	4683      	mov	fp, r0
 8018c90:	f7e8 f892 	bl	8000db8 <__aeabi_fmul>
 8018c94:	4601      	mov	r1, r0
 8018c96:	4620      	mov	r0, r4
 8018c98:	f7e7 ff84 	bl	8000ba4 <__aeabi_fsub>
 8018c9c:	f7e8 fa68 	bl	8001170 <__aeabi_f2iz>
 8018ca0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018ca4:	f845 0f04 	str.w	r0, [r5, #4]!
 8018ca8:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8018cac:	4658      	mov	r0, fp
 8018cae:	f7e7 ff7b 	bl	8000ba8 <__addsf3>
 8018cb2:	4604      	mov	r4, r0
 8018cb4:	e75c      	b.n	8018b70 <__kernel_rem_pio2f+0x94>
 8018cb6:	d105      	bne.n	8018cc4 <__kernel_rem_pio2f+0x1e8>
 8018cb8:	1e7b      	subs	r3, r7, #1
 8018cba:	aa08      	add	r2, sp, #32
 8018cbc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8018cc0:	122d      	asrs	r5, r5, #8
 8018cc2:	e78a      	b.n	8018bda <__kernel_rem_pio2f+0xfe>
 8018cc4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8018cc8:	f7e8 fa28 	bl	800111c <__aeabi_fcmpge>
 8018ccc:	2800      	cmp	r0, #0
 8018cce:	d139      	bne.n	8018d44 <__kernel_rem_pio2f+0x268>
 8018cd0:	4605      	mov	r5, r0
 8018cd2:	2100      	movs	r1, #0
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	f7e8 fa03 	bl	80010e0 <__aeabi_fcmpeq>
 8018cda:	2800      	cmp	r0, #0
 8018cdc:	f000 80a0 	beq.w	8018e20 <__kernel_rem_pio2f+0x344>
 8018ce0:	1e7c      	subs	r4, r7, #1
 8018ce2:	4623      	mov	r3, r4
 8018ce4:	2200      	movs	r2, #0
 8018ce6:	9902      	ldr	r1, [sp, #8]
 8018ce8:	428b      	cmp	r3, r1
 8018cea:	da55      	bge.n	8018d98 <__kernel_rem_pio2f+0x2bc>
 8018cec:	2a00      	cmp	r2, #0
 8018cee:	d07e      	beq.n	8018dee <__kernel_rem_pio2f+0x312>
 8018cf0:	ab08      	add	r3, sp, #32
 8018cf2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018cf6:	3e08      	subs	r6, #8
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	f000 808f 	beq.w	8018e1c <__kernel_rem_pio2f+0x340>
 8018cfe:	4631      	mov	r1, r6
 8018d00:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018d04:	f000 fec2 	bl	8019a8c <scalbnf>
 8018d08:	46a0      	mov	r8, r4
 8018d0a:	4682      	mov	sl, r0
 8018d0c:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8018d10:	af44      	add	r7, sp, #272	; 0x110
 8018d12:	f1b8 0f00 	cmp.w	r8, #0
 8018d16:	f280 80b5 	bge.w	8018e84 <__kernel_rem_pio2f+0x3a8>
 8018d1a:	f04f 0a00 	mov.w	sl, #0
 8018d1e:	2300      	movs	r3, #0
 8018d20:	00a6      	lsls	r6, r4, #2
 8018d22:	4a35      	ldr	r2, [pc, #212]	; (8018df8 <__kernel_rem_pio2f+0x31c>)
 8018d24:	4437      	add	r7, r6
 8018d26:	eba4 010a 	sub.w	r1, r4, sl
 8018d2a:	2900      	cmp	r1, #0
 8018d2c:	f280 80db 	bge.w	8018ee6 <__kernel_rem_pio2f+0x40a>
 8018d30:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8018d32:	2b03      	cmp	r3, #3
 8018d34:	f200 80ff 	bhi.w	8018f36 <__kernel_rem_pio2f+0x45a>
 8018d38:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018d3c:	01200102 	.word	0x01200102
 8018d40:	00d90120 	.word	0x00d90120
 8018d44:	2502      	movs	r5, #2
 8018d46:	e74a      	b.n	8018bde <__kernel_rem_pio2f+0x102>
 8018d48:	ab08      	add	r3, sp, #32
 8018d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d4e:	f1b8 0f00 	cmp.w	r8, #0
 8018d52:	d109      	bne.n	8018d68 <__kernel_rem_pio2f+0x28c>
 8018d54:	b12b      	cbz	r3, 8018d62 <__kernel_rem_pio2f+0x286>
 8018d56:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8018d5a:	a908      	add	r1, sp, #32
 8018d5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018d60:	2301      	movs	r3, #1
 8018d62:	3201      	adds	r2, #1
 8018d64:	4698      	mov	r8, r3
 8018d66:	e73e      	b.n	8018be6 <__kernel_rem_pio2f+0x10a>
 8018d68:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8018d6c:	a908      	add	r1, sp, #32
 8018d6e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018d72:	4643      	mov	r3, r8
 8018d74:	e7f5      	b.n	8018d62 <__kernel_rem_pio2f+0x286>
 8018d76:	1e7a      	subs	r2, r7, #1
 8018d78:	ab08      	add	r3, sp, #32
 8018d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018d82:	a908      	add	r1, sp, #32
 8018d84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018d88:	e738      	b.n	8018bfc <__kernel_rem_pio2f+0x120>
 8018d8a:	1e7a      	subs	r2, r7, #1
 8018d8c:	ab08      	add	r3, sp, #32
 8018d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018d96:	e7f4      	b.n	8018d82 <__kernel_rem_pio2f+0x2a6>
 8018d98:	a908      	add	r1, sp, #32
 8018d9a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018d9e:	3b01      	subs	r3, #1
 8018da0:	430a      	orrs	r2, r1
 8018da2:	e7a0      	b.n	8018ce6 <__kernel_rem_pio2f+0x20a>
 8018da4:	3301      	adds	r3, #1
 8018da6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8018daa:	2900      	cmp	r1, #0
 8018dac:	d0fa      	beq.n	8018da4 <__kernel_rem_pio2f+0x2c8>
 8018dae:	f06f 0803 	mvn.w	r8, #3
 8018db2:	9a04      	ldr	r2, [sp, #16]
 8018db4:	1c7d      	adds	r5, r7, #1
 8018db6:	18bc      	adds	r4, r7, r2
 8018db8:	aa1c      	add	r2, sp, #112	; 0x70
 8018dba:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8018dbe:	441f      	add	r7, r3
 8018dc0:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8018dc4:	42af      	cmp	r7, r5
 8018dc6:	f6ff aec8 	blt.w	8018b5a <__kernel_rem_pio2f+0x7e>
 8018dca:	9b06      	ldr	r3, [sp, #24]
 8018dcc:	f04f 0a00 	mov.w	sl, #0
 8018dd0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018dd4:	f7e7 ff9c 	bl	8000d10 <__aeabi_i2f>
 8018dd8:	f04f 0b00 	mov.w	fp, #0
 8018ddc:	6020      	str	r0, [r4, #0]
 8018dde:	9b03      	ldr	r3, [sp, #12]
 8018de0:	459a      	cmp	sl, r3
 8018de2:	dd0b      	ble.n	8018dfc <__kernel_rem_pio2f+0x320>
 8018de4:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8018de8:	3404      	adds	r4, #4
 8018dea:	3501      	adds	r5, #1
 8018dec:	e7ea      	b.n	8018dc4 <__kernel_rem_pio2f+0x2e8>
 8018dee:	9a07      	ldr	r2, [sp, #28]
 8018df0:	2301      	movs	r3, #1
 8018df2:	e7d8      	b.n	8018da6 <__kernel_rem_pio2f+0x2ca>
 8018df4:	0801a924 	.word	0x0801a924
 8018df8:	0801a8f8 	.word	0x0801a8f8
 8018dfc:	fb08 f30a 	mul.w	r3, r8, sl
 8018e00:	9a05      	ldr	r2, [sp, #20]
 8018e02:	58e0      	ldr	r0, [r4, r3]
 8018e04:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8018e08:	f7e7 ffd6 	bl	8000db8 <__aeabi_fmul>
 8018e0c:	4601      	mov	r1, r0
 8018e0e:	4658      	mov	r0, fp
 8018e10:	f7e7 feca 	bl	8000ba8 <__addsf3>
 8018e14:	f10a 0a01 	add.w	sl, sl, #1
 8018e18:	4683      	mov	fp, r0
 8018e1a:	e7e0      	b.n	8018dde <__kernel_rem_pio2f+0x302>
 8018e1c:	3c01      	subs	r4, #1
 8018e1e:	e767      	b.n	8018cf0 <__kernel_rem_pio2f+0x214>
 8018e20:	4271      	negs	r1, r6
 8018e22:	4620      	mov	r0, r4
 8018e24:	f000 fe32 	bl	8019a8c <scalbnf>
 8018e28:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8018e2c:	4604      	mov	r4, r0
 8018e2e:	f7e8 f975 	bl	800111c <__aeabi_fcmpge>
 8018e32:	b1f8      	cbz	r0, 8018e74 <__kernel_rem_pio2f+0x398>
 8018e34:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8018e38:	4620      	mov	r0, r4
 8018e3a:	f7e7 ffbd 	bl	8000db8 <__aeabi_fmul>
 8018e3e:	f7e8 f997 	bl	8001170 <__aeabi_f2iz>
 8018e42:	f7e7 ff65 	bl	8000d10 <__aeabi_i2f>
 8018e46:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8018e4a:	4680      	mov	r8, r0
 8018e4c:	f7e7 ffb4 	bl	8000db8 <__aeabi_fmul>
 8018e50:	4601      	mov	r1, r0
 8018e52:	4620      	mov	r0, r4
 8018e54:	f7e7 fea6 	bl	8000ba4 <__aeabi_fsub>
 8018e58:	f7e8 f98a 	bl	8001170 <__aeabi_f2iz>
 8018e5c:	ab08      	add	r3, sp, #32
 8018e5e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8018e62:	4640      	mov	r0, r8
 8018e64:	f7e8 f984 	bl	8001170 <__aeabi_f2iz>
 8018e68:	1c7c      	adds	r4, r7, #1
 8018e6a:	ab08      	add	r3, sp, #32
 8018e6c:	3608      	adds	r6, #8
 8018e6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018e72:	e744      	b.n	8018cfe <__kernel_rem_pio2f+0x222>
 8018e74:	4620      	mov	r0, r4
 8018e76:	f7e8 f97b 	bl	8001170 <__aeabi_f2iz>
 8018e7a:	ab08      	add	r3, sp, #32
 8018e7c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8018e80:	463c      	mov	r4, r7
 8018e82:	e73c      	b.n	8018cfe <__kernel_rem_pio2f+0x222>
 8018e84:	ab08      	add	r3, sp, #32
 8018e86:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018e8a:	f7e7 ff41 	bl	8000d10 <__aeabi_i2f>
 8018e8e:	4651      	mov	r1, sl
 8018e90:	f7e7 ff92 	bl	8000db8 <__aeabi_fmul>
 8018e94:	4631      	mov	r1, r6
 8018e96:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8018e9a:	4650      	mov	r0, sl
 8018e9c:	f7e7 ff8c 	bl	8000db8 <__aeabi_fmul>
 8018ea0:	f108 38ff 	add.w	r8, r8, #4294967295
 8018ea4:	4682      	mov	sl, r0
 8018ea6:	e734      	b.n	8018d12 <__kernel_rem_pio2f+0x236>
 8018ea8:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8018eac:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8018eb0:	9304      	str	r3, [sp, #16]
 8018eb2:	9203      	str	r2, [sp, #12]
 8018eb4:	f7e7 ff80 	bl	8000db8 <__aeabi_fmul>
 8018eb8:	4601      	mov	r1, r0
 8018eba:	4658      	mov	r0, fp
 8018ebc:	f7e7 fe74 	bl	8000ba8 <__addsf3>
 8018ec0:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8018ec4:	4683      	mov	fp, r0
 8018ec6:	f108 0801 	add.w	r8, r8, #1
 8018eca:	9902      	ldr	r1, [sp, #8]
 8018ecc:	4588      	cmp	r8, r1
 8018ece:	dc01      	bgt.n	8018ed4 <__kernel_rem_pio2f+0x3f8>
 8018ed0:	45c2      	cmp	sl, r8
 8018ed2:	dae9      	bge.n	8018ea8 <__kernel_rem_pio2f+0x3cc>
 8018ed4:	a958      	add	r1, sp, #352	; 0x160
 8018ed6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018eda:	f841 bca0 	str.w	fp, [r1, #-160]
 8018ede:	f10a 0a01 	add.w	sl, sl, #1
 8018ee2:	3f04      	subs	r7, #4
 8018ee4:	e71f      	b.n	8018d26 <__kernel_rem_pio2f+0x24a>
 8018ee6:	469b      	mov	fp, r3
 8018ee8:	f04f 0800 	mov.w	r8, #0
 8018eec:	e7ed      	b.n	8018eca <__kernel_rem_pio2f+0x3ee>
 8018eee:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 8018ef2:	4456      	add	r6, sl
 8018ef4:	4637      	mov	r7, r6
 8018ef6:	46a0      	mov	r8, r4
 8018ef8:	f1b8 0f00 	cmp.w	r8, #0
 8018efc:	dc4a      	bgt.n	8018f94 <__kernel_rem_pio2f+0x4b8>
 8018efe:	4627      	mov	r7, r4
 8018f00:	2f01      	cmp	r7, #1
 8018f02:	dc60      	bgt.n	8018fc6 <__kernel_rem_pio2f+0x4ea>
 8018f04:	2000      	movs	r0, #0
 8018f06:	2c01      	cmp	r4, #1
 8018f08:	dc74      	bgt.n	8018ff4 <__kernel_rem_pio2f+0x518>
 8018f0a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8018f0c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018f0e:	2d00      	cmp	r5, #0
 8018f10:	d176      	bne.n	8019000 <__kernel_rem_pio2f+0x524>
 8018f12:	9901      	ldr	r1, [sp, #4]
 8018f14:	600a      	str	r2, [r1, #0]
 8018f16:	460a      	mov	r2, r1
 8018f18:	604b      	str	r3, [r1, #4]
 8018f1a:	6090      	str	r0, [r2, #8]
 8018f1c:	e00b      	b.n	8018f36 <__kernel_rem_pio2f+0x45a>
 8018f1e:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8018f22:	f7e7 fe41 	bl	8000ba8 <__addsf3>
 8018f26:	3c01      	subs	r4, #1
 8018f28:	2c00      	cmp	r4, #0
 8018f2a:	daf8      	bge.n	8018f1e <__kernel_rem_pio2f+0x442>
 8018f2c:	b10d      	cbz	r5, 8018f32 <__kernel_rem_pio2f+0x456>
 8018f2e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8018f32:	9b01      	ldr	r3, [sp, #4]
 8018f34:	6018      	str	r0, [r3, #0]
 8018f36:	f009 0007 	and.w	r0, r9, #7
 8018f3a:	b059      	add	sp, #356	; 0x164
 8018f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f40:	2000      	movs	r0, #0
 8018f42:	ae30      	add	r6, sp, #192	; 0xc0
 8018f44:	e7f0      	b.n	8018f28 <__kernel_rem_pio2f+0x44c>
 8018f46:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8018f4a:	f7e7 fe2d 	bl	8000ba8 <__addsf3>
 8018f4e:	3e01      	subs	r6, #1
 8018f50:	2e00      	cmp	r6, #0
 8018f52:	daf8      	bge.n	8018f46 <__kernel_rem_pio2f+0x46a>
 8018f54:	b1b5      	cbz	r5, 8018f84 <__kernel_rem_pio2f+0x4a8>
 8018f56:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8018f5a:	9a01      	ldr	r2, [sp, #4]
 8018f5c:	af58      	add	r7, sp, #352	; 0x160
 8018f5e:	4601      	mov	r1, r0
 8018f60:	6013      	str	r3, [r2, #0]
 8018f62:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8018f66:	f7e7 fe1d 	bl	8000ba4 <__aeabi_fsub>
 8018f6a:	2601      	movs	r6, #1
 8018f6c:	42b4      	cmp	r4, r6
 8018f6e:	da0b      	bge.n	8018f88 <__kernel_rem_pio2f+0x4ac>
 8018f70:	b10d      	cbz	r5, 8018f76 <__kernel_rem_pio2f+0x49a>
 8018f72:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8018f76:	9b01      	ldr	r3, [sp, #4]
 8018f78:	6058      	str	r0, [r3, #4]
 8018f7a:	e7dc      	b.n	8018f36 <__kernel_rem_pio2f+0x45a>
 8018f7c:	4626      	mov	r6, r4
 8018f7e:	2000      	movs	r0, #0
 8018f80:	af30      	add	r7, sp, #192	; 0xc0
 8018f82:	e7e5      	b.n	8018f50 <__kernel_rem_pio2f+0x474>
 8018f84:	4603      	mov	r3, r0
 8018f86:	e7e8      	b.n	8018f5a <__kernel_rem_pio2f+0x47e>
 8018f88:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8018f8c:	f7e7 fe0c 	bl	8000ba8 <__addsf3>
 8018f90:	3601      	adds	r6, #1
 8018f92:	e7eb      	b.n	8018f6c <__kernel_rem_pio2f+0x490>
 8018f94:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8018f98:	f108 38ff 	add.w	r8, r8, #4294967295
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	4610      	mov	r0, r2
 8018fa0:	4619      	mov	r1, r3
 8018fa2:	9303      	str	r3, [sp, #12]
 8018fa4:	9202      	str	r2, [sp, #8]
 8018fa6:	f7e7 fdff 	bl	8000ba8 <__addsf3>
 8018faa:	9a02      	ldr	r2, [sp, #8]
 8018fac:	4601      	mov	r1, r0
 8018fae:	4683      	mov	fp, r0
 8018fb0:	4610      	mov	r0, r2
 8018fb2:	f7e7 fdf7 	bl	8000ba4 <__aeabi_fsub>
 8018fb6:	9b03      	ldr	r3, [sp, #12]
 8018fb8:	4619      	mov	r1, r3
 8018fba:	f7e7 fdf5 	bl	8000ba8 <__addsf3>
 8018fbe:	f8c7 b000 	str.w	fp, [r7]
 8018fc2:	6078      	str	r0, [r7, #4]
 8018fc4:	e798      	b.n	8018ef8 <__kernel_rem_pio2f+0x41c>
 8018fc6:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8018fca:	3f01      	subs	r7, #1
 8018fcc:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	4659      	mov	r1, fp
 8018fd4:	9302      	str	r3, [sp, #8]
 8018fd6:	f7e7 fde7 	bl	8000ba8 <__addsf3>
 8018fda:	9b02      	ldr	r3, [sp, #8]
 8018fdc:	4601      	mov	r1, r0
 8018fde:	4680      	mov	r8, r0
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f7e7 fddf 	bl	8000ba4 <__aeabi_fsub>
 8018fe6:	4659      	mov	r1, fp
 8018fe8:	f7e7 fdde 	bl	8000ba8 <__addsf3>
 8018fec:	f8c6 8000 	str.w	r8, [r6]
 8018ff0:	6070      	str	r0, [r6, #4]
 8018ff2:	e785      	b.n	8018f00 <__kernel_rem_pio2f+0x424>
 8018ff4:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8018ff8:	f7e7 fdd6 	bl	8000ba8 <__addsf3>
 8018ffc:	3c01      	subs	r4, #1
 8018ffe:	e782      	b.n	8018f06 <__kernel_rem_pio2f+0x42a>
 8019000:	9901      	ldr	r1, [sp, #4]
 8019002:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8019006:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801900a:	600a      	str	r2, [r1, #0]
 801900c:	604b      	str	r3, [r1, #4]
 801900e:	460a      	mov	r2, r1
 8019010:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8019014:	e781      	b.n	8018f1a <__kernel_rem_pio2f+0x43e>
 8019016:	bf00      	nop

08019018 <__kernel_sinf>:
 8019018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801901c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019020:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019024:	4604      	mov	r4, r0
 8019026:	460f      	mov	r7, r1
 8019028:	4691      	mov	r9, r2
 801902a:	da03      	bge.n	8019034 <__kernel_sinf+0x1c>
 801902c:	f7e8 f8a0 	bl	8001170 <__aeabi_f2iz>
 8019030:	2800      	cmp	r0, #0
 8019032:	d035      	beq.n	80190a0 <__kernel_sinf+0x88>
 8019034:	4621      	mov	r1, r4
 8019036:	4620      	mov	r0, r4
 8019038:	f7e7 febe 	bl	8000db8 <__aeabi_fmul>
 801903c:	4605      	mov	r5, r0
 801903e:	4601      	mov	r1, r0
 8019040:	4620      	mov	r0, r4
 8019042:	f7e7 feb9 	bl	8000db8 <__aeabi_fmul>
 8019046:	4929      	ldr	r1, [pc, #164]	; (80190ec <__kernel_sinf+0xd4>)
 8019048:	4606      	mov	r6, r0
 801904a:	4628      	mov	r0, r5
 801904c:	f7e7 feb4 	bl	8000db8 <__aeabi_fmul>
 8019050:	4927      	ldr	r1, [pc, #156]	; (80190f0 <__kernel_sinf+0xd8>)
 8019052:	f7e7 fda7 	bl	8000ba4 <__aeabi_fsub>
 8019056:	4629      	mov	r1, r5
 8019058:	f7e7 feae 	bl	8000db8 <__aeabi_fmul>
 801905c:	4925      	ldr	r1, [pc, #148]	; (80190f4 <__kernel_sinf+0xdc>)
 801905e:	f7e7 fda3 	bl	8000ba8 <__addsf3>
 8019062:	4629      	mov	r1, r5
 8019064:	f7e7 fea8 	bl	8000db8 <__aeabi_fmul>
 8019068:	4923      	ldr	r1, [pc, #140]	; (80190f8 <__kernel_sinf+0xe0>)
 801906a:	f7e7 fd9b 	bl	8000ba4 <__aeabi_fsub>
 801906e:	4629      	mov	r1, r5
 8019070:	f7e7 fea2 	bl	8000db8 <__aeabi_fmul>
 8019074:	4921      	ldr	r1, [pc, #132]	; (80190fc <__kernel_sinf+0xe4>)
 8019076:	f7e7 fd97 	bl	8000ba8 <__addsf3>
 801907a:	4680      	mov	r8, r0
 801907c:	f1b9 0f00 	cmp.w	r9, #0
 8019080:	d111      	bne.n	80190a6 <__kernel_sinf+0x8e>
 8019082:	4601      	mov	r1, r0
 8019084:	4628      	mov	r0, r5
 8019086:	f7e7 fe97 	bl	8000db8 <__aeabi_fmul>
 801908a:	491d      	ldr	r1, [pc, #116]	; (8019100 <__kernel_sinf+0xe8>)
 801908c:	f7e7 fd8a 	bl	8000ba4 <__aeabi_fsub>
 8019090:	4631      	mov	r1, r6
 8019092:	f7e7 fe91 	bl	8000db8 <__aeabi_fmul>
 8019096:	4601      	mov	r1, r0
 8019098:	4620      	mov	r0, r4
 801909a:	f7e7 fd85 	bl	8000ba8 <__addsf3>
 801909e:	4604      	mov	r4, r0
 80190a0:	4620      	mov	r0, r4
 80190a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80190aa:	4638      	mov	r0, r7
 80190ac:	f7e7 fe84 	bl	8000db8 <__aeabi_fmul>
 80190b0:	4641      	mov	r1, r8
 80190b2:	4681      	mov	r9, r0
 80190b4:	4630      	mov	r0, r6
 80190b6:	f7e7 fe7f 	bl	8000db8 <__aeabi_fmul>
 80190ba:	4601      	mov	r1, r0
 80190bc:	4648      	mov	r0, r9
 80190be:	f7e7 fd71 	bl	8000ba4 <__aeabi_fsub>
 80190c2:	4629      	mov	r1, r5
 80190c4:	f7e7 fe78 	bl	8000db8 <__aeabi_fmul>
 80190c8:	4639      	mov	r1, r7
 80190ca:	f7e7 fd6b 	bl	8000ba4 <__aeabi_fsub>
 80190ce:	490c      	ldr	r1, [pc, #48]	; (8019100 <__kernel_sinf+0xe8>)
 80190d0:	4605      	mov	r5, r0
 80190d2:	4630      	mov	r0, r6
 80190d4:	f7e7 fe70 	bl	8000db8 <__aeabi_fmul>
 80190d8:	4601      	mov	r1, r0
 80190da:	4628      	mov	r0, r5
 80190dc:	f7e7 fd64 	bl	8000ba8 <__addsf3>
 80190e0:	4601      	mov	r1, r0
 80190e2:	4620      	mov	r0, r4
 80190e4:	f7e7 fd5e 	bl	8000ba4 <__aeabi_fsub>
 80190e8:	e7d9      	b.n	801909e <__kernel_sinf+0x86>
 80190ea:	bf00      	nop
 80190ec:	2f2ec9d3 	.word	0x2f2ec9d3
 80190f0:	32d72f34 	.word	0x32d72f34
 80190f4:	3638ef1b 	.word	0x3638ef1b
 80190f8:	39500d01 	.word	0x39500d01
 80190fc:	3c088889 	.word	0x3c088889
 8019100:	3e2aaaab 	.word	0x3e2aaaab
 8019104:	00000000 	.word	0x00000000

08019108 <atan>:
 8019108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801910c:	4bb6      	ldr	r3, [pc, #728]	; (80193e8 <atan+0x2e0>)
 801910e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019112:	429e      	cmp	r6, r3
 8019114:	4604      	mov	r4, r0
 8019116:	460d      	mov	r5, r1
 8019118:	468b      	mov	fp, r1
 801911a:	dd17      	ble.n	801914c <atan+0x44>
 801911c:	4bb3      	ldr	r3, [pc, #716]	; (80193ec <atan+0x2e4>)
 801911e:	429e      	cmp	r6, r3
 8019120:	dc01      	bgt.n	8019126 <atan+0x1e>
 8019122:	d109      	bne.n	8019138 <atan+0x30>
 8019124:	b140      	cbz	r0, 8019138 <atan+0x30>
 8019126:	4622      	mov	r2, r4
 8019128:	462b      	mov	r3, r5
 801912a:	4620      	mov	r0, r4
 801912c:	4629      	mov	r1, r5
 801912e:	f7e7 f837 	bl	80001a0 <__adddf3>
 8019132:	4604      	mov	r4, r0
 8019134:	460d      	mov	r5, r1
 8019136:	e005      	b.n	8019144 <atan+0x3c>
 8019138:	f1bb 0f00 	cmp.w	fp, #0
 801913c:	4cac      	ldr	r4, [pc, #688]	; (80193f0 <atan+0x2e8>)
 801913e:	f340 8121 	ble.w	8019384 <atan+0x27c>
 8019142:	4dac      	ldr	r5, [pc, #688]	; (80193f4 <atan+0x2ec>)
 8019144:	4620      	mov	r0, r4
 8019146:	4629      	mov	r1, r5
 8019148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801914c:	4baa      	ldr	r3, [pc, #680]	; (80193f8 <atan+0x2f0>)
 801914e:	429e      	cmp	r6, r3
 8019150:	dc11      	bgt.n	8019176 <atan+0x6e>
 8019152:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8019156:	429e      	cmp	r6, r3
 8019158:	dc0a      	bgt.n	8019170 <atan+0x68>
 801915a:	a38b      	add	r3, pc, #556	; (adr r3, 8019388 <atan+0x280>)
 801915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019160:	f7e7 f81e 	bl	80001a0 <__adddf3>
 8019164:	2200      	movs	r2, #0
 8019166:	4ba5      	ldr	r3, [pc, #660]	; (80193fc <atan+0x2f4>)
 8019168:	f7e7 fc60 	bl	8000a2c <__aeabi_dcmpgt>
 801916c:	2800      	cmp	r0, #0
 801916e:	d1e9      	bne.n	8019144 <atan+0x3c>
 8019170:	f04f 3aff 	mov.w	sl, #4294967295
 8019174:	e027      	b.n	80191c6 <atan+0xbe>
 8019176:	f000 f951 	bl	801941c <fabs>
 801917a:	4ba1      	ldr	r3, [pc, #644]	; (8019400 <atan+0x2f8>)
 801917c:	4604      	mov	r4, r0
 801917e:	429e      	cmp	r6, r3
 8019180:	460d      	mov	r5, r1
 8019182:	f300 80b8 	bgt.w	80192f6 <atan+0x1ee>
 8019186:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801918a:	429e      	cmp	r6, r3
 801918c:	f300 809c 	bgt.w	80192c8 <atan+0x1c0>
 8019190:	4602      	mov	r2, r0
 8019192:	460b      	mov	r3, r1
 8019194:	f7e7 f804 	bl	80001a0 <__adddf3>
 8019198:	2200      	movs	r2, #0
 801919a:	4b98      	ldr	r3, [pc, #608]	; (80193fc <atan+0x2f4>)
 801919c:	f7e6 fffe 	bl	800019c <__aeabi_dsub>
 80191a0:	2200      	movs	r2, #0
 80191a2:	4606      	mov	r6, r0
 80191a4:	460f      	mov	r7, r1
 80191a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80191aa:	4620      	mov	r0, r4
 80191ac:	4629      	mov	r1, r5
 80191ae:	f7e6 fff7 	bl	80001a0 <__adddf3>
 80191b2:	4602      	mov	r2, r0
 80191b4:	460b      	mov	r3, r1
 80191b6:	4630      	mov	r0, r6
 80191b8:	4639      	mov	r1, r7
 80191ba:	f7e7 fad1 	bl	8000760 <__aeabi_ddiv>
 80191be:	f04f 0a00 	mov.w	sl, #0
 80191c2:	4604      	mov	r4, r0
 80191c4:	460d      	mov	r5, r1
 80191c6:	4622      	mov	r2, r4
 80191c8:	462b      	mov	r3, r5
 80191ca:	4620      	mov	r0, r4
 80191cc:	4629      	mov	r1, r5
 80191ce:	f7e7 f99d 	bl	800050c <__aeabi_dmul>
 80191d2:	4602      	mov	r2, r0
 80191d4:	460b      	mov	r3, r1
 80191d6:	4680      	mov	r8, r0
 80191d8:	4689      	mov	r9, r1
 80191da:	f7e7 f997 	bl	800050c <__aeabi_dmul>
 80191de:	a36c      	add	r3, pc, #432	; (adr r3, 8019390 <atan+0x288>)
 80191e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191e4:	4606      	mov	r6, r0
 80191e6:	460f      	mov	r7, r1
 80191e8:	f7e7 f990 	bl	800050c <__aeabi_dmul>
 80191ec:	a36a      	add	r3, pc, #424	; (adr r3, 8019398 <atan+0x290>)
 80191ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191f2:	f7e6 ffd5 	bl	80001a0 <__adddf3>
 80191f6:	4632      	mov	r2, r6
 80191f8:	463b      	mov	r3, r7
 80191fa:	f7e7 f987 	bl	800050c <__aeabi_dmul>
 80191fe:	a368      	add	r3, pc, #416	; (adr r3, 80193a0 <atan+0x298>)
 8019200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019204:	f7e6 ffcc 	bl	80001a0 <__adddf3>
 8019208:	4632      	mov	r2, r6
 801920a:	463b      	mov	r3, r7
 801920c:	f7e7 f97e 	bl	800050c <__aeabi_dmul>
 8019210:	a365      	add	r3, pc, #404	; (adr r3, 80193a8 <atan+0x2a0>)
 8019212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019216:	f7e6 ffc3 	bl	80001a0 <__adddf3>
 801921a:	4632      	mov	r2, r6
 801921c:	463b      	mov	r3, r7
 801921e:	f7e7 f975 	bl	800050c <__aeabi_dmul>
 8019222:	a363      	add	r3, pc, #396	; (adr r3, 80193b0 <atan+0x2a8>)
 8019224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019228:	f7e6 ffba 	bl	80001a0 <__adddf3>
 801922c:	4632      	mov	r2, r6
 801922e:	463b      	mov	r3, r7
 8019230:	f7e7 f96c 	bl	800050c <__aeabi_dmul>
 8019234:	a360      	add	r3, pc, #384	; (adr r3, 80193b8 <atan+0x2b0>)
 8019236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801923a:	f7e6 ffb1 	bl	80001a0 <__adddf3>
 801923e:	4642      	mov	r2, r8
 8019240:	464b      	mov	r3, r9
 8019242:	f7e7 f963 	bl	800050c <__aeabi_dmul>
 8019246:	a35e      	add	r3, pc, #376	; (adr r3, 80193c0 <atan+0x2b8>)
 8019248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801924c:	4680      	mov	r8, r0
 801924e:	4689      	mov	r9, r1
 8019250:	4630      	mov	r0, r6
 8019252:	4639      	mov	r1, r7
 8019254:	f7e7 f95a 	bl	800050c <__aeabi_dmul>
 8019258:	a35b      	add	r3, pc, #364	; (adr r3, 80193c8 <atan+0x2c0>)
 801925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801925e:	f7e6 ff9d 	bl	800019c <__aeabi_dsub>
 8019262:	4632      	mov	r2, r6
 8019264:	463b      	mov	r3, r7
 8019266:	f7e7 f951 	bl	800050c <__aeabi_dmul>
 801926a:	a359      	add	r3, pc, #356	; (adr r3, 80193d0 <atan+0x2c8>)
 801926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019270:	f7e6 ff94 	bl	800019c <__aeabi_dsub>
 8019274:	4632      	mov	r2, r6
 8019276:	463b      	mov	r3, r7
 8019278:	f7e7 f948 	bl	800050c <__aeabi_dmul>
 801927c:	a356      	add	r3, pc, #344	; (adr r3, 80193d8 <atan+0x2d0>)
 801927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019282:	f7e6 ff8b 	bl	800019c <__aeabi_dsub>
 8019286:	4632      	mov	r2, r6
 8019288:	463b      	mov	r3, r7
 801928a:	f7e7 f93f 	bl	800050c <__aeabi_dmul>
 801928e:	a354      	add	r3, pc, #336	; (adr r3, 80193e0 <atan+0x2d8>)
 8019290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019294:	f7e6 ff82 	bl	800019c <__aeabi_dsub>
 8019298:	4632      	mov	r2, r6
 801929a:	463b      	mov	r3, r7
 801929c:	f7e7 f936 	bl	800050c <__aeabi_dmul>
 80192a0:	4602      	mov	r2, r0
 80192a2:	460b      	mov	r3, r1
 80192a4:	4640      	mov	r0, r8
 80192a6:	4649      	mov	r1, r9
 80192a8:	f7e6 ff7a 	bl	80001a0 <__adddf3>
 80192ac:	4622      	mov	r2, r4
 80192ae:	462b      	mov	r3, r5
 80192b0:	f7e7 f92c 	bl	800050c <__aeabi_dmul>
 80192b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80192b8:	4602      	mov	r2, r0
 80192ba:	460b      	mov	r3, r1
 80192bc:	d144      	bne.n	8019348 <atan+0x240>
 80192be:	4620      	mov	r0, r4
 80192c0:	4629      	mov	r1, r5
 80192c2:	f7e6 ff6b 	bl	800019c <__aeabi_dsub>
 80192c6:	e734      	b.n	8019132 <atan+0x2a>
 80192c8:	2200      	movs	r2, #0
 80192ca:	4b4c      	ldr	r3, [pc, #304]	; (80193fc <atan+0x2f4>)
 80192cc:	f7e6 ff66 	bl	800019c <__aeabi_dsub>
 80192d0:	2200      	movs	r2, #0
 80192d2:	4606      	mov	r6, r0
 80192d4:	460f      	mov	r7, r1
 80192d6:	4b49      	ldr	r3, [pc, #292]	; (80193fc <atan+0x2f4>)
 80192d8:	4620      	mov	r0, r4
 80192da:	4629      	mov	r1, r5
 80192dc:	f7e6 ff60 	bl	80001a0 <__adddf3>
 80192e0:	4602      	mov	r2, r0
 80192e2:	460b      	mov	r3, r1
 80192e4:	4630      	mov	r0, r6
 80192e6:	4639      	mov	r1, r7
 80192e8:	f7e7 fa3a 	bl	8000760 <__aeabi_ddiv>
 80192ec:	f04f 0a01 	mov.w	sl, #1
 80192f0:	4604      	mov	r4, r0
 80192f2:	460d      	mov	r5, r1
 80192f4:	e767      	b.n	80191c6 <atan+0xbe>
 80192f6:	4b43      	ldr	r3, [pc, #268]	; (8019404 <atan+0x2fc>)
 80192f8:	429e      	cmp	r6, r3
 80192fa:	dc1a      	bgt.n	8019332 <atan+0x22a>
 80192fc:	2200      	movs	r2, #0
 80192fe:	4b42      	ldr	r3, [pc, #264]	; (8019408 <atan+0x300>)
 8019300:	f7e6 ff4c 	bl	800019c <__aeabi_dsub>
 8019304:	2200      	movs	r2, #0
 8019306:	4606      	mov	r6, r0
 8019308:	460f      	mov	r7, r1
 801930a:	4b3f      	ldr	r3, [pc, #252]	; (8019408 <atan+0x300>)
 801930c:	4620      	mov	r0, r4
 801930e:	4629      	mov	r1, r5
 8019310:	f7e7 f8fc 	bl	800050c <__aeabi_dmul>
 8019314:	2200      	movs	r2, #0
 8019316:	4b39      	ldr	r3, [pc, #228]	; (80193fc <atan+0x2f4>)
 8019318:	f7e6 ff42 	bl	80001a0 <__adddf3>
 801931c:	4602      	mov	r2, r0
 801931e:	460b      	mov	r3, r1
 8019320:	4630      	mov	r0, r6
 8019322:	4639      	mov	r1, r7
 8019324:	f7e7 fa1c 	bl	8000760 <__aeabi_ddiv>
 8019328:	f04f 0a02 	mov.w	sl, #2
 801932c:	4604      	mov	r4, r0
 801932e:	460d      	mov	r5, r1
 8019330:	e749      	b.n	80191c6 <atan+0xbe>
 8019332:	4602      	mov	r2, r0
 8019334:	460b      	mov	r3, r1
 8019336:	2000      	movs	r0, #0
 8019338:	4934      	ldr	r1, [pc, #208]	; (801940c <atan+0x304>)
 801933a:	f7e7 fa11 	bl	8000760 <__aeabi_ddiv>
 801933e:	f04f 0a03 	mov.w	sl, #3
 8019342:	4604      	mov	r4, r0
 8019344:	460d      	mov	r5, r1
 8019346:	e73e      	b.n	80191c6 <atan+0xbe>
 8019348:	4b31      	ldr	r3, [pc, #196]	; (8019410 <atan+0x308>)
 801934a:	4e32      	ldr	r6, [pc, #200]	; (8019414 <atan+0x30c>)
 801934c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8019350:	4456      	add	r6, sl
 8019352:	449a      	add	sl, r3
 8019354:	e9da 2300 	ldrd	r2, r3, [sl]
 8019358:	f7e6 ff20 	bl	800019c <__aeabi_dsub>
 801935c:	4622      	mov	r2, r4
 801935e:	462b      	mov	r3, r5
 8019360:	f7e6 ff1c 	bl	800019c <__aeabi_dsub>
 8019364:	4602      	mov	r2, r0
 8019366:	460b      	mov	r3, r1
 8019368:	e9d6 0100 	ldrd	r0, r1, [r6]
 801936c:	f7e6 ff16 	bl	800019c <__aeabi_dsub>
 8019370:	f1bb 0f00 	cmp.w	fp, #0
 8019374:	4604      	mov	r4, r0
 8019376:	460d      	mov	r5, r1
 8019378:	f6bf aee4 	bge.w	8019144 <atan+0x3c>
 801937c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019380:	461d      	mov	r5, r3
 8019382:	e6df      	b.n	8019144 <atan+0x3c>
 8019384:	4d24      	ldr	r5, [pc, #144]	; (8019418 <atan+0x310>)
 8019386:	e6dd      	b.n	8019144 <atan+0x3c>
 8019388:	8800759c 	.word	0x8800759c
 801938c:	7e37e43c 	.word	0x7e37e43c
 8019390:	e322da11 	.word	0xe322da11
 8019394:	3f90ad3a 	.word	0x3f90ad3a
 8019398:	24760deb 	.word	0x24760deb
 801939c:	3fa97b4b 	.word	0x3fa97b4b
 80193a0:	a0d03d51 	.word	0xa0d03d51
 80193a4:	3fb10d66 	.word	0x3fb10d66
 80193a8:	c54c206e 	.word	0xc54c206e
 80193ac:	3fb745cd 	.word	0x3fb745cd
 80193b0:	920083ff 	.word	0x920083ff
 80193b4:	3fc24924 	.word	0x3fc24924
 80193b8:	5555550d 	.word	0x5555550d
 80193bc:	3fd55555 	.word	0x3fd55555
 80193c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80193c4:	bfa2b444 	.word	0xbfa2b444
 80193c8:	52defd9a 	.word	0x52defd9a
 80193cc:	3fadde2d 	.word	0x3fadde2d
 80193d0:	af749a6d 	.word	0xaf749a6d
 80193d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80193d8:	fe231671 	.word	0xfe231671
 80193dc:	3fbc71c6 	.word	0x3fbc71c6
 80193e0:	9998ebc4 	.word	0x9998ebc4
 80193e4:	3fc99999 	.word	0x3fc99999
 80193e8:	440fffff 	.word	0x440fffff
 80193ec:	7ff00000 	.word	0x7ff00000
 80193f0:	54442d18 	.word	0x54442d18
 80193f4:	3ff921fb 	.word	0x3ff921fb
 80193f8:	3fdbffff 	.word	0x3fdbffff
 80193fc:	3ff00000 	.word	0x3ff00000
 8019400:	3ff2ffff 	.word	0x3ff2ffff
 8019404:	40037fff 	.word	0x40037fff
 8019408:	3ff80000 	.word	0x3ff80000
 801940c:	bff00000 	.word	0xbff00000
 8019410:	0801a950 	.word	0x0801a950
 8019414:	0801a930 	.word	0x0801a930
 8019418:	bff921fb 	.word	0xbff921fb

0801941c <fabs>:
 801941c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019420:	4619      	mov	r1, r3
 8019422:	4770      	bx	lr

08019424 <finite>:
 8019424:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8019428:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 801942c:	0fc0      	lsrs	r0, r0, #31
 801942e:	4770      	bx	lr

08019430 <floor>:
 8019430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019434:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8019438:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801943c:	2e13      	cmp	r6, #19
 801943e:	4607      	mov	r7, r0
 8019440:	460b      	mov	r3, r1
 8019442:	460c      	mov	r4, r1
 8019444:	4605      	mov	r5, r0
 8019446:	dc35      	bgt.n	80194b4 <floor+0x84>
 8019448:	2e00      	cmp	r6, #0
 801944a:	da16      	bge.n	801947a <floor+0x4a>
 801944c:	a336      	add	r3, pc, #216	; (adr r3, 8019528 <floor+0xf8>)
 801944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019452:	f7e6 fea5 	bl	80001a0 <__adddf3>
 8019456:	2200      	movs	r2, #0
 8019458:	2300      	movs	r3, #0
 801945a:	f7e7 fae7 	bl	8000a2c <__aeabi_dcmpgt>
 801945e:	b148      	cbz	r0, 8019474 <floor+0x44>
 8019460:	2c00      	cmp	r4, #0
 8019462:	da5b      	bge.n	801951c <floor+0xec>
 8019464:	2500      	movs	r5, #0
 8019466:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801946a:	4a31      	ldr	r2, [pc, #196]	; (8019530 <floor+0x100>)
 801946c:	433b      	orrs	r3, r7
 801946e:	42ab      	cmp	r3, r5
 8019470:	bf18      	it	ne
 8019472:	4614      	movne	r4, r2
 8019474:	4623      	mov	r3, r4
 8019476:	462f      	mov	r7, r5
 8019478:	e026      	b.n	80194c8 <floor+0x98>
 801947a:	4a2e      	ldr	r2, [pc, #184]	; (8019534 <floor+0x104>)
 801947c:	fa42 f806 	asr.w	r8, r2, r6
 8019480:	ea01 0208 	and.w	r2, r1, r8
 8019484:	4302      	orrs	r2, r0
 8019486:	d01f      	beq.n	80194c8 <floor+0x98>
 8019488:	a327      	add	r3, pc, #156	; (adr r3, 8019528 <floor+0xf8>)
 801948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801948e:	f7e6 fe87 	bl	80001a0 <__adddf3>
 8019492:	2200      	movs	r2, #0
 8019494:	2300      	movs	r3, #0
 8019496:	f7e7 fac9 	bl	8000a2c <__aeabi_dcmpgt>
 801949a:	2800      	cmp	r0, #0
 801949c:	d0ea      	beq.n	8019474 <floor+0x44>
 801949e:	2c00      	cmp	r4, #0
 80194a0:	bfbe      	ittt	lt
 80194a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80194a6:	fa43 f606 	asrlt.w	r6, r3, r6
 80194aa:	19a4      	addlt	r4, r4, r6
 80194ac:	ea24 0408 	bic.w	r4, r4, r8
 80194b0:	2500      	movs	r5, #0
 80194b2:	e7df      	b.n	8019474 <floor+0x44>
 80194b4:	2e33      	cmp	r6, #51	; 0x33
 80194b6:	dd0b      	ble.n	80194d0 <floor+0xa0>
 80194b8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80194bc:	d104      	bne.n	80194c8 <floor+0x98>
 80194be:	4602      	mov	r2, r0
 80194c0:	f7e6 fe6e 	bl	80001a0 <__adddf3>
 80194c4:	4607      	mov	r7, r0
 80194c6:	460b      	mov	r3, r1
 80194c8:	4638      	mov	r0, r7
 80194ca:	4619      	mov	r1, r3
 80194cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194d0:	f04f 32ff 	mov.w	r2, #4294967295
 80194d4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80194d8:	fa22 f808 	lsr.w	r8, r2, r8
 80194dc:	ea18 0f00 	tst.w	r8, r0
 80194e0:	d0f2      	beq.n	80194c8 <floor+0x98>
 80194e2:	a311      	add	r3, pc, #68	; (adr r3, 8019528 <floor+0xf8>)
 80194e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194e8:	f7e6 fe5a 	bl	80001a0 <__adddf3>
 80194ec:	2200      	movs	r2, #0
 80194ee:	2300      	movs	r3, #0
 80194f0:	f7e7 fa9c 	bl	8000a2c <__aeabi_dcmpgt>
 80194f4:	2800      	cmp	r0, #0
 80194f6:	d0bd      	beq.n	8019474 <floor+0x44>
 80194f8:	2c00      	cmp	r4, #0
 80194fa:	da02      	bge.n	8019502 <floor+0xd2>
 80194fc:	2e14      	cmp	r6, #20
 80194fe:	d103      	bne.n	8019508 <floor+0xd8>
 8019500:	3401      	adds	r4, #1
 8019502:	ea25 0508 	bic.w	r5, r5, r8
 8019506:	e7b5      	b.n	8019474 <floor+0x44>
 8019508:	2301      	movs	r3, #1
 801950a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801950e:	fa03 f606 	lsl.w	r6, r3, r6
 8019512:	4435      	add	r5, r6
 8019514:	42bd      	cmp	r5, r7
 8019516:	bf38      	it	cc
 8019518:	18e4      	addcc	r4, r4, r3
 801951a:	e7f2      	b.n	8019502 <floor+0xd2>
 801951c:	2500      	movs	r5, #0
 801951e:	462c      	mov	r4, r5
 8019520:	e7a8      	b.n	8019474 <floor+0x44>
 8019522:	bf00      	nop
 8019524:	f3af 8000 	nop.w
 8019528:	8800759c 	.word	0x8800759c
 801952c:	7e37e43c 	.word	0x7e37e43c
 8019530:	bff00000 	.word	0xbff00000
 8019534:	000fffff 	.word	0x000fffff

08019538 <matherr>:
 8019538:	2000      	movs	r0, #0
 801953a:	4770      	bx	lr

0801953c <nan>:
 801953c:	2000      	movs	r0, #0
 801953e:	4901      	ldr	r1, [pc, #4]	; (8019544 <nan+0x8>)
 8019540:	4770      	bx	lr
 8019542:	bf00      	nop
 8019544:	7ff80000 	.word	0x7ff80000

08019548 <rint>:
 8019548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801954a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801954e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8019552:	f1bc 0f13 	cmp.w	ip, #19
 8019556:	4604      	mov	r4, r0
 8019558:	460d      	mov	r5, r1
 801955a:	460b      	mov	r3, r1
 801955c:	4606      	mov	r6, r0
 801955e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8019562:	dc5a      	bgt.n	801961a <rint+0xd2>
 8019564:	f1bc 0f00 	cmp.w	ip, #0
 8019568:	da2b      	bge.n	80195c2 <rint+0x7a>
 801956a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801956e:	4302      	orrs	r2, r0
 8019570:	d023      	beq.n	80195ba <rint+0x72>
 8019572:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8019576:	4302      	orrs	r2, r0
 8019578:	4256      	negs	r6, r2
 801957a:	4316      	orrs	r6, r2
 801957c:	0c4b      	lsrs	r3, r1, #17
 801957e:	0b36      	lsrs	r6, r6, #12
 8019580:	4934      	ldr	r1, [pc, #208]	; (8019654 <rint+0x10c>)
 8019582:	045b      	lsls	r3, r3, #17
 8019584:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8019588:	ea46 0503 	orr.w	r5, r6, r3
 801958c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8019590:	4602      	mov	r2, r0
 8019592:	462b      	mov	r3, r5
 8019594:	e9d1 4500 	ldrd	r4, r5, [r1]
 8019598:	4620      	mov	r0, r4
 801959a:	4629      	mov	r1, r5
 801959c:	f7e6 fe00 	bl	80001a0 <__adddf3>
 80195a0:	e9cd 0100 	strd	r0, r1, [sp]
 80195a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80195a8:	462b      	mov	r3, r5
 80195aa:	4622      	mov	r2, r4
 80195ac:	f7e6 fdf6 	bl	800019c <__aeabi_dsub>
 80195b0:	4604      	mov	r4, r0
 80195b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80195b6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80195ba:	4620      	mov	r0, r4
 80195bc:	4629      	mov	r1, r5
 80195be:	b003      	add	sp, #12
 80195c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195c2:	4a25      	ldr	r2, [pc, #148]	; (8019658 <rint+0x110>)
 80195c4:	fa42 f20c 	asr.w	r2, r2, ip
 80195c8:	4011      	ands	r1, r2
 80195ca:	4301      	orrs	r1, r0
 80195cc:	d0f5      	beq.n	80195ba <rint+0x72>
 80195ce:	0852      	lsrs	r2, r2, #1
 80195d0:	ea05 0102 	and.w	r1, r5, r2
 80195d4:	ea50 0601 	orrs.w	r6, r0, r1
 80195d8:	d00c      	beq.n	80195f4 <rint+0xac>
 80195da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80195de:	f1bc 0f13 	cmp.w	ip, #19
 80195e2:	bf0c      	ite	eq
 80195e4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80195e8:	2600      	movne	r6, #0
 80195ea:	ea25 0202 	bic.w	r2, r5, r2
 80195ee:	fa43 f30c 	asr.w	r3, r3, ip
 80195f2:	4313      	orrs	r3, r2
 80195f4:	4917      	ldr	r1, [pc, #92]	; (8019654 <rint+0x10c>)
 80195f6:	4632      	mov	r2, r6
 80195f8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80195fc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8019600:	4620      	mov	r0, r4
 8019602:	4629      	mov	r1, r5
 8019604:	f7e6 fdcc 	bl	80001a0 <__adddf3>
 8019608:	e9cd 0100 	strd	r0, r1, [sp]
 801960c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019610:	4622      	mov	r2, r4
 8019612:	462b      	mov	r3, r5
 8019614:	f7e6 fdc2 	bl	800019c <__aeabi_dsub>
 8019618:	e008      	b.n	801962c <rint+0xe4>
 801961a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 801961e:	dd08      	ble.n	8019632 <rint+0xea>
 8019620:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8019624:	d1c9      	bne.n	80195ba <rint+0x72>
 8019626:	4602      	mov	r2, r0
 8019628:	f7e6 fdba 	bl	80001a0 <__adddf3>
 801962c:	4604      	mov	r4, r0
 801962e:	460d      	mov	r5, r1
 8019630:	e7c3      	b.n	80195ba <rint+0x72>
 8019632:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8019636:	f04f 32ff 	mov.w	r2, #4294967295
 801963a:	40ca      	lsrs	r2, r1
 801963c:	4210      	tst	r0, r2
 801963e:	d0bc      	beq.n	80195ba <rint+0x72>
 8019640:	0852      	lsrs	r2, r2, #1
 8019642:	4210      	tst	r0, r2
 8019644:	bf1f      	itttt	ne
 8019646:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 801964a:	ea20 0202 	bicne.w	r2, r0, r2
 801964e:	410e      	asrne	r6, r1
 8019650:	4316      	orrne	r6, r2
 8019652:	e7cf      	b.n	80195f4 <rint+0xac>
 8019654:	0801a970 	.word	0x0801a970
 8019658:	000fffff 	.word	0x000fffff
 801965c:	00000000 	.word	0x00000000

08019660 <scalbn>:
 8019660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019662:	4616      	mov	r6, r2
 8019664:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019668:	4604      	mov	r4, r0
 801966a:	460d      	mov	r5, r1
 801966c:	460b      	mov	r3, r1
 801966e:	b982      	cbnz	r2, 8019692 <scalbn+0x32>
 8019670:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019674:	4303      	orrs	r3, r0
 8019676:	d034      	beq.n	80196e2 <scalbn+0x82>
 8019678:	4b2d      	ldr	r3, [pc, #180]	; (8019730 <scalbn+0xd0>)
 801967a:	2200      	movs	r2, #0
 801967c:	f7e6 ff46 	bl	800050c <__aeabi_dmul>
 8019680:	4b2c      	ldr	r3, [pc, #176]	; (8019734 <scalbn+0xd4>)
 8019682:	4604      	mov	r4, r0
 8019684:	429e      	cmp	r6, r3
 8019686:	460d      	mov	r5, r1
 8019688:	da0d      	bge.n	80196a6 <scalbn+0x46>
 801968a:	a325      	add	r3, pc, #148	; (adr r3, 8019720 <scalbn+0xc0>)
 801968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019690:	e01c      	b.n	80196cc <scalbn+0x6c>
 8019692:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8019696:	42ba      	cmp	r2, r7
 8019698:	d109      	bne.n	80196ae <scalbn+0x4e>
 801969a:	4602      	mov	r2, r0
 801969c:	f7e6 fd80 	bl	80001a0 <__adddf3>
 80196a0:	4604      	mov	r4, r0
 80196a2:	460d      	mov	r5, r1
 80196a4:	e01d      	b.n	80196e2 <scalbn+0x82>
 80196a6:	460b      	mov	r3, r1
 80196a8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80196ac:	3a36      	subs	r2, #54	; 0x36
 80196ae:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80196b2:	4432      	add	r2, r6
 80196b4:	428a      	cmp	r2, r1
 80196b6:	dd0c      	ble.n	80196d2 <scalbn+0x72>
 80196b8:	4622      	mov	r2, r4
 80196ba:	462b      	mov	r3, r5
 80196bc:	a11a      	add	r1, pc, #104	; (adr r1, 8019728 <scalbn+0xc8>)
 80196be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196c2:	f000 fa2f 	bl	8019b24 <copysign>
 80196c6:	a318      	add	r3, pc, #96	; (adr r3, 8019728 <scalbn+0xc8>)
 80196c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196cc:	f7e6 ff1e 	bl	800050c <__aeabi_dmul>
 80196d0:	e7e6      	b.n	80196a0 <scalbn+0x40>
 80196d2:	2a00      	cmp	r2, #0
 80196d4:	dd08      	ble.n	80196e8 <scalbn+0x88>
 80196d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80196da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80196de:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80196e2:	4620      	mov	r0, r4
 80196e4:	4629      	mov	r1, r5
 80196e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196e8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80196ec:	da0b      	bge.n	8019706 <scalbn+0xa6>
 80196ee:	f24c 3350 	movw	r3, #50000	; 0xc350
 80196f2:	429e      	cmp	r6, r3
 80196f4:	4622      	mov	r2, r4
 80196f6:	462b      	mov	r3, r5
 80196f8:	dce0      	bgt.n	80196bc <scalbn+0x5c>
 80196fa:	a109      	add	r1, pc, #36	; (adr r1, 8019720 <scalbn+0xc0>)
 80196fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019700:	f000 fa10 	bl	8019b24 <copysign>
 8019704:	e7c1      	b.n	801968a <scalbn+0x2a>
 8019706:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801970a:	3236      	adds	r2, #54	; 0x36
 801970c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019710:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019714:	4620      	mov	r0, r4
 8019716:	4629      	mov	r1, r5
 8019718:	2200      	movs	r2, #0
 801971a:	4b07      	ldr	r3, [pc, #28]	; (8019738 <scalbn+0xd8>)
 801971c:	e7d6      	b.n	80196cc <scalbn+0x6c>
 801971e:	bf00      	nop
 8019720:	c2f8f359 	.word	0xc2f8f359
 8019724:	01a56e1f 	.word	0x01a56e1f
 8019728:	8800759c 	.word	0x8800759c
 801972c:	7e37e43c 	.word	0x7e37e43c
 8019730:	43500000 	.word	0x43500000
 8019734:	ffff3cb0 	.word	0xffff3cb0
 8019738:	3c900000 	.word	0x3c900000

0801973c <atanf>:
 801973c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019740:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8019744:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8019748:	4604      	mov	r4, r0
 801974a:	4607      	mov	r7, r0
 801974c:	db0e      	blt.n	801976c <atanf+0x30>
 801974e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019752:	dd04      	ble.n	801975e <atanf+0x22>
 8019754:	4601      	mov	r1, r0
 8019756:	f7e7 fa27 	bl	8000ba8 <__addsf3>
 801975a:	4604      	mov	r4, r0
 801975c:	e003      	b.n	8019766 <atanf+0x2a>
 801975e:	2800      	cmp	r0, #0
 8019760:	f340 80cd 	ble.w	80198fe <atanf+0x1c2>
 8019764:	4c67      	ldr	r4, [pc, #412]	; (8019904 <atanf+0x1c8>)
 8019766:	4620      	mov	r0, r4
 8019768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801976c:	4b66      	ldr	r3, [pc, #408]	; (8019908 <atanf+0x1cc>)
 801976e:	429d      	cmp	r5, r3
 8019770:	dc0e      	bgt.n	8019790 <atanf+0x54>
 8019772:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8019776:	da08      	bge.n	801978a <atanf+0x4e>
 8019778:	4964      	ldr	r1, [pc, #400]	; (801990c <atanf+0x1d0>)
 801977a:	f7e7 fa15 	bl	8000ba8 <__addsf3>
 801977e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8019782:	f7e7 fcd5 	bl	8001130 <__aeabi_fcmpgt>
 8019786:	2800      	cmp	r0, #0
 8019788:	d1ed      	bne.n	8019766 <atanf+0x2a>
 801978a:	f04f 36ff 	mov.w	r6, #4294967295
 801978e:	e01c      	b.n	80197ca <atanf+0x8e>
 8019790:	f000 f8e0 	bl	8019954 <fabsf>
 8019794:	4b5e      	ldr	r3, [pc, #376]	; (8019910 <atanf+0x1d4>)
 8019796:	4604      	mov	r4, r0
 8019798:	429d      	cmp	r5, r3
 801979a:	dc7c      	bgt.n	8019896 <atanf+0x15a>
 801979c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80197a0:	429d      	cmp	r5, r3
 80197a2:	dc67      	bgt.n	8019874 <atanf+0x138>
 80197a4:	4601      	mov	r1, r0
 80197a6:	f7e7 f9ff 	bl	8000ba8 <__addsf3>
 80197aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80197ae:	f7e7 f9f9 	bl	8000ba4 <__aeabi_fsub>
 80197b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80197b6:	4605      	mov	r5, r0
 80197b8:	4620      	mov	r0, r4
 80197ba:	f7e7 f9f5 	bl	8000ba8 <__addsf3>
 80197be:	4601      	mov	r1, r0
 80197c0:	4628      	mov	r0, r5
 80197c2:	f7e7 fbad 	bl	8000f20 <__aeabi_fdiv>
 80197c6:	2600      	movs	r6, #0
 80197c8:	4604      	mov	r4, r0
 80197ca:	4621      	mov	r1, r4
 80197cc:	4620      	mov	r0, r4
 80197ce:	f7e7 faf3 	bl	8000db8 <__aeabi_fmul>
 80197d2:	4601      	mov	r1, r0
 80197d4:	4680      	mov	r8, r0
 80197d6:	f7e7 faef 	bl	8000db8 <__aeabi_fmul>
 80197da:	4605      	mov	r5, r0
 80197dc:	494d      	ldr	r1, [pc, #308]	; (8019914 <atanf+0x1d8>)
 80197de:	f7e7 faeb 	bl	8000db8 <__aeabi_fmul>
 80197e2:	494d      	ldr	r1, [pc, #308]	; (8019918 <atanf+0x1dc>)
 80197e4:	f7e7 f9e0 	bl	8000ba8 <__addsf3>
 80197e8:	4629      	mov	r1, r5
 80197ea:	f7e7 fae5 	bl	8000db8 <__aeabi_fmul>
 80197ee:	494b      	ldr	r1, [pc, #300]	; (801991c <atanf+0x1e0>)
 80197f0:	f7e7 f9da 	bl	8000ba8 <__addsf3>
 80197f4:	4629      	mov	r1, r5
 80197f6:	f7e7 fadf 	bl	8000db8 <__aeabi_fmul>
 80197fa:	4949      	ldr	r1, [pc, #292]	; (8019920 <atanf+0x1e4>)
 80197fc:	f7e7 f9d4 	bl	8000ba8 <__addsf3>
 8019800:	4629      	mov	r1, r5
 8019802:	f7e7 fad9 	bl	8000db8 <__aeabi_fmul>
 8019806:	4947      	ldr	r1, [pc, #284]	; (8019924 <atanf+0x1e8>)
 8019808:	f7e7 f9ce 	bl	8000ba8 <__addsf3>
 801980c:	4629      	mov	r1, r5
 801980e:	f7e7 fad3 	bl	8000db8 <__aeabi_fmul>
 8019812:	4945      	ldr	r1, [pc, #276]	; (8019928 <atanf+0x1ec>)
 8019814:	f7e7 f9c8 	bl	8000ba8 <__addsf3>
 8019818:	4641      	mov	r1, r8
 801981a:	f7e7 facd 	bl	8000db8 <__aeabi_fmul>
 801981e:	4943      	ldr	r1, [pc, #268]	; (801992c <atanf+0x1f0>)
 8019820:	4680      	mov	r8, r0
 8019822:	4628      	mov	r0, r5
 8019824:	f7e7 fac8 	bl	8000db8 <__aeabi_fmul>
 8019828:	4941      	ldr	r1, [pc, #260]	; (8019930 <atanf+0x1f4>)
 801982a:	f7e7 f9bb 	bl	8000ba4 <__aeabi_fsub>
 801982e:	4629      	mov	r1, r5
 8019830:	f7e7 fac2 	bl	8000db8 <__aeabi_fmul>
 8019834:	493f      	ldr	r1, [pc, #252]	; (8019934 <atanf+0x1f8>)
 8019836:	f7e7 f9b5 	bl	8000ba4 <__aeabi_fsub>
 801983a:	4629      	mov	r1, r5
 801983c:	f7e7 fabc 	bl	8000db8 <__aeabi_fmul>
 8019840:	493d      	ldr	r1, [pc, #244]	; (8019938 <atanf+0x1fc>)
 8019842:	f7e7 f9af 	bl	8000ba4 <__aeabi_fsub>
 8019846:	4629      	mov	r1, r5
 8019848:	f7e7 fab6 	bl	8000db8 <__aeabi_fmul>
 801984c:	493b      	ldr	r1, [pc, #236]	; (801993c <atanf+0x200>)
 801984e:	f7e7 f9a9 	bl	8000ba4 <__aeabi_fsub>
 8019852:	4629      	mov	r1, r5
 8019854:	f7e7 fab0 	bl	8000db8 <__aeabi_fmul>
 8019858:	4601      	mov	r1, r0
 801985a:	4640      	mov	r0, r8
 801985c:	f7e7 f9a4 	bl	8000ba8 <__addsf3>
 8019860:	4621      	mov	r1, r4
 8019862:	f7e7 faa9 	bl	8000db8 <__aeabi_fmul>
 8019866:	1c73      	adds	r3, r6, #1
 8019868:	4601      	mov	r1, r0
 801986a:	d133      	bne.n	80198d4 <atanf+0x198>
 801986c:	4620      	mov	r0, r4
 801986e:	f7e7 f999 	bl	8000ba4 <__aeabi_fsub>
 8019872:	e772      	b.n	801975a <atanf+0x1e>
 8019874:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8019878:	f7e7 f994 	bl	8000ba4 <__aeabi_fsub>
 801987c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8019880:	4605      	mov	r5, r0
 8019882:	4620      	mov	r0, r4
 8019884:	f7e7 f990 	bl	8000ba8 <__addsf3>
 8019888:	4601      	mov	r1, r0
 801988a:	4628      	mov	r0, r5
 801988c:	f7e7 fb48 	bl	8000f20 <__aeabi_fdiv>
 8019890:	2601      	movs	r6, #1
 8019892:	4604      	mov	r4, r0
 8019894:	e799      	b.n	80197ca <atanf+0x8e>
 8019896:	4b2a      	ldr	r3, [pc, #168]	; (8019940 <atanf+0x204>)
 8019898:	429d      	cmp	r5, r3
 801989a:	dc14      	bgt.n	80198c6 <atanf+0x18a>
 801989c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80198a0:	f7e7 f980 	bl	8000ba4 <__aeabi_fsub>
 80198a4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80198a8:	4605      	mov	r5, r0
 80198aa:	4620      	mov	r0, r4
 80198ac:	f7e7 fa84 	bl	8000db8 <__aeabi_fmul>
 80198b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80198b4:	f7e7 f978 	bl	8000ba8 <__addsf3>
 80198b8:	4601      	mov	r1, r0
 80198ba:	4628      	mov	r0, r5
 80198bc:	f7e7 fb30 	bl	8000f20 <__aeabi_fdiv>
 80198c0:	2602      	movs	r6, #2
 80198c2:	4604      	mov	r4, r0
 80198c4:	e781      	b.n	80197ca <atanf+0x8e>
 80198c6:	4601      	mov	r1, r0
 80198c8:	481e      	ldr	r0, [pc, #120]	; (8019944 <atanf+0x208>)
 80198ca:	f7e7 fb29 	bl	8000f20 <__aeabi_fdiv>
 80198ce:	2603      	movs	r6, #3
 80198d0:	4604      	mov	r4, r0
 80198d2:	e77a      	b.n	80197ca <atanf+0x8e>
 80198d4:	4b1c      	ldr	r3, [pc, #112]	; (8019948 <atanf+0x20c>)
 80198d6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80198da:	f7e7 f963 	bl	8000ba4 <__aeabi_fsub>
 80198de:	4621      	mov	r1, r4
 80198e0:	f7e7 f960 	bl	8000ba4 <__aeabi_fsub>
 80198e4:	4b19      	ldr	r3, [pc, #100]	; (801994c <atanf+0x210>)
 80198e6:	4601      	mov	r1, r0
 80198e8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80198ec:	f7e7 f95a 	bl	8000ba4 <__aeabi_fsub>
 80198f0:	2f00      	cmp	r7, #0
 80198f2:	4604      	mov	r4, r0
 80198f4:	f6bf af37 	bge.w	8019766 <atanf+0x2a>
 80198f8:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80198fc:	e733      	b.n	8019766 <atanf+0x2a>
 80198fe:	4c14      	ldr	r4, [pc, #80]	; (8019950 <atanf+0x214>)
 8019900:	e731      	b.n	8019766 <atanf+0x2a>
 8019902:	bf00      	nop
 8019904:	3fc90fdb 	.word	0x3fc90fdb
 8019908:	3edfffff 	.word	0x3edfffff
 801990c:	7149f2ca 	.word	0x7149f2ca
 8019910:	3f97ffff 	.word	0x3f97ffff
 8019914:	3c8569d7 	.word	0x3c8569d7
 8019918:	3d4bda59 	.word	0x3d4bda59
 801991c:	3d886b35 	.word	0x3d886b35
 8019920:	3dba2e6e 	.word	0x3dba2e6e
 8019924:	3e124925 	.word	0x3e124925
 8019928:	3eaaaaab 	.word	0x3eaaaaab
 801992c:	bd15a221 	.word	0xbd15a221
 8019930:	3d6ef16b 	.word	0x3d6ef16b
 8019934:	3d9d8795 	.word	0x3d9d8795
 8019938:	3de38e38 	.word	0x3de38e38
 801993c:	3e4ccccd 	.word	0x3e4ccccd
 8019940:	401bffff 	.word	0x401bffff
 8019944:	bf800000 	.word	0xbf800000
 8019948:	0801a990 	.word	0x0801a990
 801994c:	0801a980 	.word	0x0801a980
 8019950:	bfc90fdb 	.word	0xbfc90fdb

08019954 <fabsf>:
 8019954:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019958:	4770      	bx	lr

0801995a <finitef>:
 801995a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801995e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019962:	bfac      	ite	ge
 8019964:	2000      	movge	r0, #0
 8019966:	2001      	movlt	r0, #1
 8019968:	4770      	bx	lr
	...

0801996c <floorf>:
 801996c:	b570      	push	{r4, r5, r6, lr}
 801996e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8019972:	0df5      	lsrs	r5, r6, #23
 8019974:	3d7f      	subs	r5, #127	; 0x7f
 8019976:	2d16      	cmp	r5, #22
 8019978:	4601      	mov	r1, r0
 801997a:	4604      	mov	r4, r0
 801997c:	dc26      	bgt.n	80199cc <floorf+0x60>
 801997e:	2d00      	cmp	r5, #0
 8019980:	da0e      	bge.n	80199a0 <floorf+0x34>
 8019982:	4917      	ldr	r1, [pc, #92]	; (80199e0 <floorf+0x74>)
 8019984:	f7e7 f910 	bl	8000ba8 <__addsf3>
 8019988:	2100      	movs	r1, #0
 801998a:	f7e7 fbd1 	bl	8001130 <__aeabi_fcmpgt>
 801998e:	b128      	cbz	r0, 801999c <floorf+0x30>
 8019990:	2c00      	cmp	r4, #0
 8019992:	da23      	bge.n	80199dc <floorf+0x70>
 8019994:	4b13      	ldr	r3, [pc, #76]	; (80199e4 <floorf+0x78>)
 8019996:	2e00      	cmp	r6, #0
 8019998:	bf18      	it	ne
 801999a:	461c      	movne	r4, r3
 801999c:	4621      	mov	r1, r4
 801999e:	e01b      	b.n	80199d8 <floorf+0x6c>
 80199a0:	4e11      	ldr	r6, [pc, #68]	; (80199e8 <floorf+0x7c>)
 80199a2:	412e      	asrs	r6, r5
 80199a4:	4230      	tst	r0, r6
 80199a6:	d017      	beq.n	80199d8 <floorf+0x6c>
 80199a8:	490d      	ldr	r1, [pc, #52]	; (80199e0 <floorf+0x74>)
 80199aa:	f7e7 f8fd 	bl	8000ba8 <__addsf3>
 80199ae:	2100      	movs	r1, #0
 80199b0:	f7e7 fbbe 	bl	8001130 <__aeabi_fcmpgt>
 80199b4:	2800      	cmp	r0, #0
 80199b6:	d0f1      	beq.n	801999c <floorf+0x30>
 80199b8:	2c00      	cmp	r4, #0
 80199ba:	bfbe      	ittt	lt
 80199bc:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80199c0:	fa43 f505 	asrlt.w	r5, r3, r5
 80199c4:	1964      	addlt	r4, r4, r5
 80199c6:	ea24 0406 	bic.w	r4, r4, r6
 80199ca:	e7e7      	b.n	801999c <floorf+0x30>
 80199cc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80199d0:	d302      	bcc.n	80199d8 <floorf+0x6c>
 80199d2:	f7e7 f8e9 	bl	8000ba8 <__addsf3>
 80199d6:	4601      	mov	r1, r0
 80199d8:	4608      	mov	r0, r1
 80199da:	bd70      	pop	{r4, r5, r6, pc}
 80199dc:	2400      	movs	r4, #0
 80199de:	e7dd      	b.n	801999c <floorf+0x30>
 80199e0:	7149f2ca 	.word	0x7149f2ca
 80199e4:	bf800000 	.word	0xbf800000
 80199e8:	007fffff 	.word	0x007fffff

080199ec <rintf>:
 80199ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80199ee:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80199f2:	0dd5      	lsrs	r5, r2, #23
 80199f4:	3d7f      	subs	r5, #127	; 0x7f
 80199f6:	2d16      	cmp	r5, #22
 80199f8:	4601      	mov	r1, r0
 80199fa:	dc3b      	bgt.n	8019a74 <rintf+0x88>
 80199fc:	b1e2      	cbz	r2, 8019a38 <rintf+0x4c>
 80199fe:	2d00      	cmp	r5, #0
 8019a00:	4602      	mov	r2, r0
 8019a02:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 8019a06:	da1a      	bge.n	8019a3e <rintf+0x52>
 8019a08:	4a1e      	ldr	r2, [pc, #120]	; (8019a84 <rintf+0x98>)
 8019a0a:	f3c0 0116 	ubfx	r1, r0, #0, #23
 8019a0e:	4249      	negs	r1, r1
 8019a10:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8019a14:	0d03      	lsrs	r3, r0, #20
 8019a16:	0a49      	lsrs	r1, r1, #9
 8019a18:	051b      	lsls	r3, r3, #20
 8019a1a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8019a1e:	4319      	orrs	r1, r3
 8019a20:	4628      	mov	r0, r5
 8019a22:	f7e7 f8c1 	bl	8000ba8 <__addsf3>
 8019a26:	9001      	str	r0, [sp, #4]
 8019a28:	4629      	mov	r1, r5
 8019a2a:	9801      	ldr	r0, [sp, #4]
 8019a2c:	f7e7 f8ba 	bl	8000ba4 <__aeabi_fsub>
 8019a30:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8019a34:	ea41 71c4 	orr.w	r1, r1, r4, lsl #31
 8019a38:	4608      	mov	r0, r1
 8019a3a:	b003      	add	sp, #12
 8019a3c:	bd30      	pop	{r4, r5, pc}
 8019a3e:	4b12      	ldr	r3, [pc, #72]	; (8019a88 <rintf+0x9c>)
 8019a40:	412b      	asrs	r3, r5
 8019a42:	4218      	tst	r0, r3
 8019a44:	d0f8      	beq.n	8019a38 <rintf+0x4c>
 8019a46:	0859      	lsrs	r1, r3, #1
 8019a48:	4208      	tst	r0, r1
 8019a4a:	d006      	beq.n	8019a5a <rintf+0x6e>
 8019a4c:	ea20 0201 	bic.w	r2, r0, r1
 8019a50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019a54:	fa41 f505 	asr.w	r5, r1, r5
 8019a58:	432a      	orrs	r2, r5
 8019a5a:	4b0a      	ldr	r3, [pc, #40]	; (8019a84 <rintf+0x98>)
 8019a5c:	4611      	mov	r1, r2
 8019a5e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8019a62:	4620      	mov	r0, r4
 8019a64:	f7e7 f8a0 	bl	8000ba8 <__addsf3>
 8019a68:	9001      	str	r0, [sp, #4]
 8019a6a:	9801      	ldr	r0, [sp, #4]
 8019a6c:	4621      	mov	r1, r4
 8019a6e:	f7e7 f899 	bl	8000ba4 <__aeabi_fsub>
 8019a72:	e004      	b.n	8019a7e <rintf+0x92>
 8019a74:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019a78:	d3de      	bcc.n	8019a38 <rintf+0x4c>
 8019a7a:	f7e7 f895 	bl	8000ba8 <__addsf3>
 8019a7e:	4601      	mov	r1, r0
 8019a80:	e7da      	b.n	8019a38 <rintf+0x4c>
 8019a82:	bf00      	nop
 8019a84:	0801a9a0 	.word	0x0801a9a0
 8019a88:	007fffff 	.word	0x007fffff

08019a8c <scalbnf>:
 8019a8c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8019a90:	b510      	push	{r4, lr}
 8019a92:	4602      	mov	r2, r0
 8019a94:	460c      	mov	r4, r1
 8019a96:	4601      	mov	r1, r0
 8019a98:	d027      	beq.n	8019aea <scalbnf+0x5e>
 8019a9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019a9e:	d303      	bcc.n	8019aa8 <scalbnf+0x1c>
 8019aa0:	f7e7 f882 	bl	8000ba8 <__addsf3>
 8019aa4:	4602      	mov	r2, r0
 8019aa6:	e020      	b.n	8019aea <scalbnf+0x5e>
 8019aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019aac:	d215      	bcs.n	8019ada <scalbnf+0x4e>
 8019aae:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8019ab2:	f7e7 f981 	bl	8000db8 <__aeabi_fmul>
 8019ab6:	4b18      	ldr	r3, [pc, #96]	; (8019b18 <scalbnf+0x8c>)
 8019ab8:	4602      	mov	r2, r0
 8019aba:	429c      	cmp	r4, r3
 8019abc:	db22      	blt.n	8019b04 <scalbnf+0x78>
 8019abe:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8019ac2:	3b19      	subs	r3, #25
 8019ac4:	4423      	add	r3, r4
 8019ac6:	2bfe      	cmp	r3, #254	; 0xfe
 8019ac8:	dd09      	ble.n	8019ade <scalbnf+0x52>
 8019aca:	4611      	mov	r1, r2
 8019acc:	4813      	ldr	r0, [pc, #76]	; (8019b1c <scalbnf+0x90>)
 8019ace:	f000 f832 	bl	8019b36 <copysignf>
 8019ad2:	4912      	ldr	r1, [pc, #72]	; (8019b1c <scalbnf+0x90>)
 8019ad4:	f7e7 f970 	bl	8000db8 <__aeabi_fmul>
 8019ad8:	e7e4      	b.n	8019aa4 <scalbnf+0x18>
 8019ada:	0ddb      	lsrs	r3, r3, #23
 8019adc:	e7f2      	b.n	8019ac4 <scalbnf+0x38>
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	dd05      	ble.n	8019aee <scalbnf+0x62>
 8019ae2:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8019ae6:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8019aea:	4610      	mov	r0, r2
 8019aec:	bd10      	pop	{r4, pc}
 8019aee:	f113 0f16 	cmn.w	r3, #22
 8019af2:	da09      	bge.n	8019b08 <scalbnf+0x7c>
 8019af4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019af8:	429c      	cmp	r4, r3
 8019afa:	4611      	mov	r1, r2
 8019afc:	dce6      	bgt.n	8019acc <scalbnf+0x40>
 8019afe:	4808      	ldr	r0, [pc, #32]	; (8019b20 <scalbnf+0x94>)
 8019b00:	f000 f819 	bl	8019b36 <copysignf>
 8019b04:	4906      	ldr	r1, [pc, #24]	; (8019b20 <scalbnf+0x94>)
 8019b06:	e7e5      	b.n	8019ad4 <scalbnf+0x48>
 8019b08:	3319      	adds	r3, #25
 8019b0a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8019b0e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8019b12:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8019b16:	e7dd      	b.n	8019ad4 <scalbnf+0x48>
 8019b18:	ffff3cb0 	.word	0xffff3cb0
 8019b1c:	7149f2ca 	.word	0x7149f2ca
 8019b20:	0da24260 	.word	0x0da24260

08019b24 <copysign>:
 8019b24:	b530      	push	{r4, r5, lr}
 8019b26:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019b2e:	ea42 0503 	orr.w	r5, r2, r3
 8019b32:	4629      	mov	r1, r5
 8019b34:	bd30      	pop	{r4, r5, pc}

08019b36 <copysignf>:
 8019b36:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019b3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019b3e:	4308      	orrs	r0, r1
 8019b40:	4770      	bx	lr
	...

08019b44 <_init>:
 8019b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b46:	bf00      	nop
 8019b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b4a:	bc08      	pop	{r3}
 8019b4c:	469e      	mov	lr, r3
 8019b4e:	4770      	bx	lr

08019b50 <_fini>:
 8019b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b52:	bf00      	nop
 8019b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b56:	bc08      	pop	{r3}
 8019b58:	469e      	mov	lr, r3
 8019b5a:	4770      	bx	lr
