
CanRotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a24  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e48  08019b58  08019b58  00029b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a9a0  0801a9a0  00030234  2**0
                  CONTENTS
  4 .ARM          00000000  0801a9a0  0801a9a0  00030234  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a9a0  0801a9a0  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a9a0  0801a9a0  0002a9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a9a4  0801a9a4  0002a9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0801a9a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001348  20000238  0801abdc  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001580  0801abdc  00031580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024772  00000000  00000000  0003025d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000523d  00000000  00000000  000549cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016e0  00000000  00000000  00059c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e0  00000000  00000000  0005b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ffee  00000000  00000000  0005c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001aeca  00000000  00000000  0007c7be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094bb7  00000000  00000000  00097688  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c23f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007acc  00000000  00000000  0012c2bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000238 	.word	0x20000238
 800014c:	00000000 	.word	0x00000000
 8000150:	08019b3c 	.word	0x08019b3c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000023c 	.word	0x2000023c
 800016c:	08019b3c 	.word	0x08019b3c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_frsub>:
 8000b9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba0:	e002      	b.n	8000ba8 <__addsf3>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_fsub>:
 8000ba4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba8 <__addsf3>:
 8000ba8:	0042      	lsls	r2, r0, #1
 8000baa:	bf1f      	itttt	ne
 8000bac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb0:	ea92 0f03 	teqne	r2, r3
 8000bb4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbc:	d06a      	beq.n	8000c94 <__addsf3+0xec>
 8000bbe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc6:	bfc1      	itttt	gt
 8000bc8:	18d2      	addgt	r2, r2, r3
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	4048      	eorgt	r0, r1
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	bfb8      	it	lt
 8000bd2:	425b      	neglt	r3, r3
 8000bd4:	2b19      	cmp	r3, #25
 8000bd6:	bf88      	it	hi
 8000bd8:	4770      	bxhi	lr
 8000bda:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4249      	negne	r1, r1
 8000bfa:	ea92 0f03 	teq	r2, r3
 8000bfe:	d03f      	beq.n	8000c80 <__addsf3+0xd8>
 8000c00:	f1a2 0201 	sub.w	r2, r2, #1
 8000c04:	fa41 fc03 	asr.w	ip, r1, r3
 8000c08:	eb10 000c 	adds.w	r0, r0, ip
 8000c0c:	f1c3 0320 	rsb	r3, r3, #32
 8000c10:	fa01 f103 	lsl.w	r1, r1, r3
 8000c14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__addsf3+0x78>
 8000c1a:	4249      	negs	r1, r1
 8000c1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c24:	d313      	bcc.n	8000c4e <__addsf3+0xa6>
 8000c26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2a:	d306      	bcc.n	8000c3a <__addsf3+0x92>
 8000c2c:	0840      	lsrs	r0, r0, #1
 8000c2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c32:	f102 0201 	add.w	r2, r2, #1
 8000c36:	2afe      	cmp	r2, #254	; 0xfe
 8000c38:	d251      	bcs.n	8000cde <__addsf3+0x136>
 8000c3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c42:	bf08      	it	eq
 8000c44:	f020 0001 	biceq.w	r0, r0, #1
 8000c48:	ea40 0003 	orr.w	r0, r0, r3
 8000c4c:	4770      	bx	lr
 8000c4e:	0049      	lsls	r1, r1, #1
 8000c50:	eb40 0000 	adc.w	r0, r0, r0
 8000c54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	d1ed      	bne.n	8000c3a <__addsf3+0x92>
 8000c5e:	fab0 fc80 	clz	ip, r0
 8000c62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c66:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6e:	bfaa      	itet	ge
 8000c70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c74:	4252      	neglt	r2, r2
 8000c76:	4318      	orrge	r0, r3
 8000c78:	bfbc      	itt	lt
 8000c7a:	40d0      	lsrlt	r0, r2
 8000c7c:	4318      	orrlt	r0, r3
 8000c7e:	4770      	bx	lr
 8000c80:	f092 0f00 	teq	r2, #0
 8000c84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c88:	bf06      	itte	eq
 8000c8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8e:	3201      	addeq	r2, #1
 8000c90:	3b01      	subne	r3, #1
 8000c92:	e7b5      	b.n	8000c00 <__addsf3+0x58>
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d021      	beq.n	8000ce8 <__addsf3+0x140>
 8000ca4:	ea92 0f03 	teq	r2, r3
 8000ca8:	d004      	beq.n	8000cb4 <__addsf3+0x10c>
 8000caa:	f092 0f00 	teq	r2, #0
 8000cae:	bf08      	it	eq
 8000cb0:	4608      	moveq	r0, r1
 8000cb2:	4770      	bx	lr
 8000cb4:	ea90 0f01 	teq	r0, r1
 8000cb8:	bf1c      	itt	ne
 8000cba:	2000      	movne	r0, #0
 8000cbc:	4770      	bxne	lr
 8000cbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc2:	d104      	bne.n	8000cce <__addsf3+0x126>
 8000cc4:	0040      	lsls	r0, r0, #1
 8000cc6:	bf28      	it	cs
 8000cc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	4770      	bx	lr
 8000cce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd2:	bf3c      	itt	cc
 8000cd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd8:	4770      	bxcc	lr
 8000cda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce6:	4770      	bx	lr
 8000ce8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cec:	bf16      	itet	ne
 8000cee:	4608      	movne	r0, r1
 8000cf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf4:	4601      	movne	r1, r0
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	bf06      	itte	eq
 8000cfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfe:	ea90 0f01 	teqeq	r0, r1
 8000d02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_ui2f>:
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	e004      	b.n	8000d18 <__aeabi_i2f+0x8>
 8000d0e:	bf00      	nop

08000d10 <__aeabi_i2f>:
 8000d10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	bf48      	it	mi
 8000d16:	4240      	negmi	r0, r0
 8000d18:	ea5f 0c00 	movs.w	ip, r0
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d24:	4601      	mov	r1, r0
 8000d26:	f04f 0000 	mov.w	r0, #0
 8000d2a:	e01c      	b.n	8000d66 <__aeabi_l2f+0x2a>

08000d2c <__aeabi_ul2f>:
 8000d2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d30:	bf08      	it	eq
 8000d32:	4770      	bxeq	lr
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e00a      	b.n	8000d50 <__aeabi_l2f+0x14>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_l2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d48:	d502      	bpl.n	8000d50 <__aeabi_l2f+0x14>
 8000d4a:	4240      	negs	r0, r0
 8000d4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d50:	ea5f 0c01 	movs.w	ip, r1
 8000d54:	bf02      	ittt	eq
 8000d56:	4684      	moveq	ip, r0
 8000d58:	4601      	moveq	r1, r0
 8000d5a:	2000      	moveq	r0, #0
 8000d5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d60:	bf08      	it	eq
 8000d62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6a:	fabc f28c 	clz	r2, ip
 8000d6e:	3a08      	subs	r2, #8
 8000d70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d74:	db10      	blt.n	8000d98 <__aeabi_l2f+0x5c>
 8000d76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d88:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	f020 0001 	biceq.w	r0, r0, #1
 8000d96:	4770      	bx	lr
 8000d98:	f102 0220 	add.w	r2, r2, #32
 8000d9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da0:	f1c2 0220 	rsb	r2, r2, #32
 8000da4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dac:	eb43 0002 	adc.w	r0, r3, r2
 8000db0:	bf08      	it	eq
 8000db2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_fmul>:
 8000db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc0:	bf1e      	ittt	ne
 8000dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc6:	ea92 0f0c 	teqne	r2, ip
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d06f      	beq.n	8000eb0 <__aeabi_fmul+0xf8>
 8000dd0:	441a      	add	r2, r3
 8000dd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd6:	0240      	lsls	r0, r0, #9
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dde:	d01e      	beq.n	8000e1e <__aeabi_fmul+0x66>
 8000de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dec:	fba0 3101 	umull	r3, r1, r0, r1
 8000df0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df8:	bf3e      	ittt	cc
 8000dfa:	0049      	lslcc	r1, r1, #1
 8000dfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e00:	005b      	lslcc	r3, r3, #1
 8000e02:	ea40 0001 	orr.w	r0, r0, r1
 8000e06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0a:	2afd      	cmp	r2, #253	; 0xfd
 8000e0c:	d81d      	bhi.n	8000e4a <__aeabi_fmul+0x92>
 8000e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e16:	bf08      	it	eq
 8000e18:	f020 0001 	biceq.w	r0, r0, #1
 8000e1c:	4770      	bx	lr
 8000e1e:	f090 0f00 	teq	r0, #0
 8000e22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e26:	bf08      	it	eq
 8000e28:	0249      	lsleq	r1, r1, #9
 8000e2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e32:	3a7f      	subs	r2, #127	; 0x7f
 8000e34:	bfc2      	ittt	gt
 8000e36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3e:	4770      	bxgt	lr
 8000e40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	3a01      	subs	r2, #1
 8000e4a:	dc5d      	bgt.n	8000f08 <__aeabi_fmul+0x150>
 8000e4c:	f112 0f19 	cmn.w	r2, #25
 8000e50:	bfdc      	itt	le
 8000e52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e56:	4770      	bxle	lr
 8000e58:	f1c2 0200 	rsb	r2, r2, #0
 8000e5c:	0041      	lsls	r1, r0, #1
 8000e5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e62:	f1c2 0220 	rsb	r2, r2, #32
 8000e66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6e:	f140 0000 	adc.w	r0, r0, #0
 8000e72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e76:	bf08      	it	eq
 8000e78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e7c:	4770      	bx	lr
 8000e7e:	f092 0f00 	teq	r2, #0
 8000e82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0040      	lsleq	r0, r0, #1
 8000e8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8e:	3a01      	subeq	r2, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fmul+0xce>
 8000e92:	ea40 000c 	orr.w	r0, r0, ip
 8000e96:	f093 0f00 	teq	r3, #0
 8000e9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9e:	bf02      	ittt	eq
 8000ea0:	0049      	lsleq	r1, r1, #1
 8000ea2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea6:	3b01      	subeq	r3, #1
 8000ea8:	d0f9      	beq.n	8000e9e <__aeabi_fmul+0xe6>
 8000eaa:	ea41 010c 	orr.w	r1, r1, ip
 8000eae:	e78f      	b.n	8000dd0 <__aeabi_fmul+0x18>
 8000eb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	bf18      	it	ne
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d00a      	beq.n	8000ed6 <__aeabi_fmul+0x11e>
 8000ec0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec4:	bf18      	it	ne
 8000ec6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	d1d8      	bne.n	8000e7e <__aeabi_fmul+0xc6>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	4770      	bx	lr
 8000ed6:	f090 0f00 	teq	r0, #0
 8000eda:	bf17      	itett	ne
 8000edc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee0:	4608      	moveq	r0, r1
 8000ee2:	f091 0f00 	teqne	r1, #0
 8000ee6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eea:	d014      	beq.n	8000f16 <__aeabi_fmul+0x15e>
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d101      	bne.n	8000ef6 <__aeabi_fmul+0x13e>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	d10f      	bne.n	8000f16 <__aeabi_fmul+0x15e>
 8000ef6:	ea93 0f0c 	teq	r3, ip
 8000efa:	d103      	bne.n	8000f04 <__aeabi_fmul+0x14c>
 8000efc:	024b      	lsls	r3, r1, #9
 8000efe:	bf18      	it	ne
 8000f00:	4608      	movne	r0, r1
 8000f02:	d108      	bne.n	8000f16 <__aeabi_fmul+0x15e>
 8000f04:	ea80 0001 	eor.w	r0, r0, r1
 8000f08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f14:	4770      	bx	lr
 8000f16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1e:	4770      	bx	lr

08000f20 <__aeabi_fdiv>:
 8000f20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f28:	bf1e      	ittt	ne
 8000f2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2e:	ea92 0f0c 	teqne	r2, ip
 8000f32:	ea93 0f0c 	teqne	r3, ip
 8000f36:	d069      	beq.n	800100c <__aeabi_fdiv+0xec>
 8000f38:	eba2 0203 	sub.w	r2, r2, r3
 8000f3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f40:	0249      	lsls	r1, r1, #9
 8000f42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f46:	d037      	beq.n	8000fb8 <__aeabi_fdiv+0x98>
 8000f48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	bf38      	it	cc
 8000f5c:	005b      	lslcc	r3, r3, #1
 8000f5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f66:	428b      	cmp	r3, r1
 8000f68:	bf24      	itt	cs
 8000f6a:	1a5b      	subcs	r3, r3, r1
 8000f6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f74:	bf24      	itt	cs
 8000f76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f82:	bf24      	itt	cs
 8000f84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f90:	bf24      	itt	cs
 8000f92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	bf18      	it	ne
 8000f9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa2:	d1e0      	bne.n	8000f66 <__aeabi_fdiv+0x46>
 8000fa4:	2afd      	cmp	r2, #253	; 0xfd
 8000fa6:	f63f af50 	bhi.w	8000e4a <__aeabi_fmul+0x92>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb0:	bf08      	it	eq
 8000fb2:	f020 0001 	biceq.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc0:	327f      	adds	r2, #127	; 0x7f
 8000fc2:	bfc2      	ittt	gt
 8000fc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fcc:	4770      	bxgt	lr
 8000fce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	3a01      	subs	r2, #1
 8000fd8:	e737      	b.n	8000e4a <__aeabi_fmul+0x92>
 8000fda:	f092 0f00 	teq	r2, #0
 8000fde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe2:	bf02      	ittt	eq
 8000fe4:	0040      	lsleq	r0, r0, #1
 8000fe6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fea:	3a01      	subeq	r2, #1
 8000fec:	d0f9      	beq.n	8000fe2 <__aeabi_fdiv+0xc2>
 8000fee:	ea40 000c 	orr.w	r0, r0, ip
 8000ff2:	f093 0f00 	teq	r3, #0
 8000ff6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffa:	bf02      	ittt	eq
 8000ffc:	0049      	lsleq	r1, r1, #1
 8000ffe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001002:	3b01      	subeq	r3, #1
 8001004:	d0f9      	beq.n	8000ffa <__aeabi_fdiv+0xda>
 8001006:	ea41 010c 	orr.w	r1, r1, ip
 800100a:	e795      	b.n	8000f38 <__aeabi_fdiv+0x18>
 800100c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001010:	ea92 0f0c 	teq	r2, ip
 8001014:	d108      	bne.n	8001028 <__aeabi_fdiv+0x108>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	f47f af7d 	bne.w	8000f16 <__aeabi_fmul+0x15e>
 800101c:	ea93 0f0c 	teq	r3, ip
 8001020:	f47f af70 	bne.w	8000f04 <__aeabi_fmul+0x14c>
 8001024:	4608      	mov	r0, r1
 8001026:	e776      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	d104      	bne.n	8001038 <__aeabi_fdiv+0x118>
 800102e:	024b      	lsls	r3, r1, #9
 8001030:	f43f af4c 	beq.w	8000ecc <__aeabi_fmul+0x114>
 8001034:	4608      	mov	r0, r1
 8001036:	e76e      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001038:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800103c:	bf18      	it	ne
 800103e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001042:	d1ca      	bne.n	8000fda <__aeabi_fdiv+0xba>
 8001044:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001048:	f47f af5c 	bne.w	8000f04 <__aeabi_fmul+0x14c>
 800104c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001050:	f47f af3c 	bne.w	8000ecc <__aeabi_fmul+0x114>
 8001054:	e75f      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001056:	bf00      	nop

08001058 <__gesf2>:
 8001058:	f04f 3cff 	mov.w	ip, #4294967295
 800105c:	e006      	b.n	800106c <__cmpsf2+0x4>
 800105e:	bf00      	nop

08001060 <__lesf2>:
 8001060:	f04f 0c01 	mov.w	ip, #1
 8001064:	e002      	b.n	800106c <__cmpsf2+0x4>
 8001066:	bf00      	nop

08001068 <__cmpsf2>:
 8001068:	f04f 0c01 	mov.w	ip, #1
 800106c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	bf18      	it	ne
 800107e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001082:	d011      	beq.n	80010a8 <__cmpsf2+0x40>
 8001084:	b001      	add	sp, #4
 8001086:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108a:	bf18      	it	ne
 800108c:	ea90 0f01 	teqne	r0, r1
 8001090:	bf58      	it	pl
 8001092:	ebb2 0003 	subspl.w	r0, r2, r3
 8001096:	bf88      	it	hi
 8001098:	17c8      	asrhi	r0, r1, #31
 800109a:	bf38      	it	cc
 800109c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a0:	bf18      	it	ne
 80010a2:	f040 0001 	orrne.w	r0, r0, #1
 80010a6:	4770      	bx	lr
 80010a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010ac:	d102      	bne.n	80010b4 <__cmpsf2+0x4c>
 80010ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b2:	d105      	bne.n	80010c0 <__cmpsf2+0x58>
 80010b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b8:	d1e4      	bne.n	8001084 <__cmpsf2+0x1c>
 80010ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010be:	d0e1      	beq.n	8001084 <__cmpsf2+0x1c>
 80010c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <__aeabi_cfrcmple>:
 80010c8:	4684      	mov	ip, r0
 80010ca:	4608      	mov	r0, r1
 80010cc:	4661      	mov	r1, ip
 80010ce:	e7ff      	b.n	80010d0 <__aeabi_cfcmpeq>

080010d0 <__aeabi_cfcmpeq>:
 80010d0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d2:	f7ff ffc9 	bl	8001068 <__cmpsf2>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	bf48      	it	mi
 80010da:	f110 0f00 	cmnmi.w	r0, #0
 80010de:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e0 <__aeabi_fcmpeq>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff fff4 	bl	80010d0 <__aeabi_cfcmpeq>
 80010e8:	bf0c      	ite	eq
 80010ea:	2001      	moveq	r0, #1
 80010ec:	2000      	movne	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmplt>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffea 	bl	80010d0 <__aeabi_cfcmpeq>
 80010fc:	bf34      	ite	cc
 80010fe:	2001      	movcc	r0, #1
 8001100:	2000      	movcs	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmple>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffe0 	bl	80010d0 <__aeabi_cfcmpeq>
 8001110:	bf94      	ite	ls
 8001112:	2001      	movls	r0, #1
 8001114:	2000      	movhi	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpge>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffd2 	bl	80010c8 <__aeabi_cfrcmple>
 8001124:	bf94      	ite	ls
 8001126:	2001      	movls	r0, #1
 8001128:	2000      	movhi	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmpgt>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffc8 	bl	80010c8 <__aeabi_cfrcmple>
 8001138:	bf34      	ite	cc
 800113a:	2001      	movcc	r0, #1
 800113c:	2000      	movcs	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpun>:
 8001144:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001148:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__aeabi_fcmpun+0x14>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d108      	bne.n	800116a <__aeabi_fcmpun+0x26>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d102      	bne.n	8001164 <__aeabi_fcmpun+0x20>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d102      	bne.n	800116a <__aeabi_fcmpun+0x26>
 8001164:	f04f 0000 	mov.w	r0, #0
 8001168:	4770      	bx	lr
 800116a:	f04f 0001 	mov.w	r0, #1
 800116e:	4770      	bx	lr

08001170 <__aeabi_f2iz>:
 8001170:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001178:	d30f      	bcc.n	800119a <__aeabi_f2iz+0x2a>
 800117a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001182:	d90d      	bls.n	80011a0 <__aeabi_f2iz+0x30>
 8001184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001190:	fa23 f002 	lsr.w	r0, r3, r2
 8001194:	bf18      	it	ne
 8001196:	4240      	negne	r0, r0
 8001198:	4770      	bx	lr
 800119a:	f04f 0000 	mov.w	r0, #0
 800119e:	4770      	bx	lr
 80011a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a4:	d101      	bne.n	80011aa <__aeabi_f2iz+0x3a>
 80011a6:	0242      	lsls	r2, r0, #9
 80011a8:	d105      	bne.n	80011b6 <__aeabi_f2iz+0x46>
 80011aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011ae:	bf08      	it	eq
 80011b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b4:	4770      	bx	lr
 80011b6:	f04f 0000 	mov.w	r0, #0
 80011ba:	4770      	bx	lr

080011bc <__aeabi_f2uiz>:
 80011bc:	0042      	lsls	r2, r0, #1
 80011be:	d20e      	bcs.n	80011de <__aeabi_f2uiz+0x22>
 80011c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c4:	d30b      	bcc.n	80011de <__aeabi_f2uiz+0x22>
 80011c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ce:	d409      	bmi.n	80011e4 <__aeabi_f2uiz+0x28>
 80011d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d8:	fa23 f002 	lsr.w	r0, r3, r2
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr
 80011e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e8:	d101      	bne.n	80011ee <__aeabi_f2uiz+0x32>
 80011ea:	0242      	lsls	r2, r0, #9
 80011ec:	d102      	bne.n	80011f4 <__aeabi_f2uiz+0x38>
 80011ee:	f04f 30ff 	mov.w	r0, #4294967295
 80011f2:	4770      	bx	lr
 80011f4:	f04f 0000 	mov.w	r0, #0
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <apInit>:
uint16_t timeInterleave = 0;

eeror_t Error;

void apInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART2, 57600);  // Telemetry
 8001200:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001204:	2001      	movs	r0, #1
 8001206:	f00a fdf5 	bl	800bdf4 <uartOpen>

  cliOpen(_DEF_UART1, 57600);
 800120a:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800120e:	2000      	movs	r0, #0
 8001210:	f009 f838 	bl	800a284 <cliOpen>
  //cliOpenLog(_DEF_UART2, 57600);

  MPU9250_Init();
 8001214:	f005 f82a 	bl	800626c <MPU9250_Init>
  MS5611_Init(MS5611_ULTRA_HIGH_RES);
 8001218:	2008      	movs	r0, #8
 800121a:	f006 fdad 	bl	8007d78 <MS5611_Init>
  gps_Init();
 800121e:	f000 fe21 	bl	8001e64 <gps_Init>
	#ifdef IMU_AHRS
  /* Init structure with 100hZ sample rate, 0.1 beta and 3.5 inclination (3.5 degrees is inclination in Ljubljana, Slovenia) on July, 2016 */
  TM_AHRSIMU_Init(250, 1.2f, 0.0f);
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <apInit+0x4c>)
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <apInit+0x50>)
 800122a:	f002 f8fb 	bl	8003424 <TM_AHRSIMU_Init>
  #endif
  Calibrate_gyro();
 800122e:	f005 f91d 	bl	800646c <Calibrate_gyro>
  //RC_Init();
  mixerInit();
 8001232:	f002 fe59 	bl	8003ee8 <mixerInit>
  PIDControlInit(&pid);
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <apInit+0x54>)
 8001238:	f002 ff90 	bl	800415c <PIDControlInit>
  GPS_set_pids();
 800123c:	f001 fdb6 	bl	8002dac <GPS_set_pids>
  EEPROM_Init();
 8001240:	f000 fb44 	bl	80018cc <EEPROM_Init>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	3f99999a 	.word	0x3f99999a
 800124c:	437a0000 	.word	0x437a0000
 8001250:	200009b0 	.word	0x200009b0

08001254 <apMain>:

void apMain(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
	previousTime = micros();
 800125a:	f000 f935 	bl	80014c8 <micros>
 800125e:	4602      	mov	r2, r0
 8001260:	4b6d      	ldr	r3, [pc, #436]	; (8001418 <apMain+0x1c4>)
 8001262:	601a      	str	r2, [r3, #0]
	while(1)
	{
		computeRC(); //2us~10us
 8001264:	f004 fc56 	bl	8005b14 <computeRC>
		computeIMU();
 8001268:	f002 fcc4 	bl	8003bf4 <computeIMU>
#ifdef GPS_Recive
		GPS_mode_check();
 800126c:	f000 fe64 	bl	8001f38 <GPS_mode_check>
#endif
		static uint8_t taskOrder = 0;
		switch (taskOrder)
 8001270:	4b6a      	ldr	r3, [pc, #424]	; (800141c <apMain+0x1c8>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b04      	cmp	r3, #4
 8001276:	d840      	bhi.n	80012fa <apMain+0xa6>
 8001278:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <apMain+0x2c>)
 800127a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127e:	bf00      	nop
 8001280:	08001295 	.word	0x08001295
 8001284:	080012ab 	.word	0x080012ab
 8001288:	080012c1 	.word	0x080012c1
 800128c:	080012d7 	.word	0x080012d7
 8001290:	080012ed 	.word	0x080012ed
		{ //4~206us
			case 0: //200us
				taskOrder++;
 8001294:	4b61      	ldr	r3, [pc, #388]	; (800141c <apMain+0x1c8>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b5f      	ldr	r3, [pc, #380]	; (800141c <apMain+0x1c8>)
 800129e:	701a      	strb	r2, [r3, #0]
				if(Baro_update()) break;
 80012a0:	f006 fe36 	bl	8007f10 <Baro_update>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d124      	bne.n	80012f4 <apMain+0xa0>
			case 1:  //80us
				taskOrder++;
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <apMain+0x1c8>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b5a      	ldr	r3, [pc, #360]	; (800141c <apMain+0x1c8>)
 80012b4:	701a      	strb	r2, [r3, #0]
				if(getEstimatedAltitude() !=0) break;
 80012b6:	f006 fe8b 	bl	8007fd0 <getEstimatedAltitude>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d11b      	bne.n	80012f8 <apMain+0xa4>
			case 2:
				taskOrder++;
 80012c0:	4b56      	ldr	r3, [pc, #344]	; (800141c <apMain+0x1c8>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b54      	ldr	r3, [pc, #336]	; (800141c <apMain+0x1c8>)
 80012ca:	701a      	strb	r2, [r3, #0]
#ifdef GPS_Recive
				if (GPS_Compute() != 0) break;
 80012cc:	f000 fec6 	bl	800205c <GPS_Compute>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
				break;
 80012d4:	e011      	b.n	80012fa <apMain+0xa6>
#endif
			case 3:
				taskOrder++;
 80012d6:	4b51      	ldr	r3, [pc, #324]	; (800141c <apMain+0x1c8>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b4f      	ldr	r3, [pc, #316]	; (800141c <apMain+0x1c8>)
 80012e0:	701a      	strb	r2, [r3, #0]
				Mag_getADC(); //100~380us
 80012e2:	f005 faf1 	bl	80068c8 <Mag_getADC>
				CAL_Heading(); //125us
 80012e6:	f005 fd07 	bl	8006cf8 <CAL_Heading>
				break;
 80012ea:	e006      	b.n	80012fa <apMain+0xa6>
			case 4:  //40~50us
//				time = micros();
				taskOrder = 0;
 80012ec:	4b4b      	ldr	r3, [pc, #300]	; (800141c <apMain+0x1c8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
//				vsum += BAT.VBAT;
//				vsum -= vvec[ind];
//				vvec[ind++] = BAT.VBAT;
//				ind %= VBAT_SMOOTH;
//				BAT.VBAT = vsum/VBAT_SMOOTH;
				break;
 80012f2:	e002      	b.n	80012fa <apMain+0xa6>
				if(Baro_update()) break;
 80012f4:	bf00      	nop
 80012f6:	e000      	b.n	80012fa <apMain+0xa6>
				if(getEstimatedAltitude() !=0) break;
 80012f8:	bf00      	nop
		}

		Control(&pid); //50us
 80012fa:	4849      	ldr	r0, [pc, #292]	; (8001420 <apMain+0x1cc>)
 80012fc:	f003 f878 	bl	80043f0 <Control>
		mixTable();
 8001300:	f002 fe14 	bl	8003f2c <mixTable>

		flight_mode_signal();
 8001304:	f002 fd62 	bl	8003dcc <flight_mode_signal>

#ifdef Telemetry
		uint8_t t=0;
 8001308:	2300      	movs	r3, #0
 800130a:	71fb      	strb	r3, [r7, #7]
		timeInterleave = micros();
 800130c:	f000 f8dc 	bl	80014c8 <micros>
 8001310:	4603      	mov	r3, r0
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <apMain+0x1d0>)
 8001316:	801a      	strh	r2, [r3, #0]
		SerialCom(); //4us
 8001318:	f007 faf0 	bl	80088fc <SerialCom>
		while((int16_t)(micros()-timeInterleave)<650) t=1; //650
 800131c:	e001      	b.n	8001322 <apMain+0xce>
 800131e:	2301      	movs	r3, #1
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	f000 f8d1 	bl	80014c8 <micros>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <apMain+0x1d0>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	b29b      	uxth	r3, r3
 8001332:	b21b      	sxth	r3, r3
 8001334:	f240 2289 	movw	r2, #649	; 0x289
 8001338:	4293      	cmp	r3, r2
 800133a:	ddf0      	ble.n	800131e <apMain+0xca>
		if(!t) overrun_count++;
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d108      	bne.n	8001354 <apMain+0x100>
 8001342:	4b39      	ldr	r3, [pc, #228]	; (8001428 <apMain+0x1d4>)
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	b29b      	uxth	r3, r3
 800134a:	3301      	adds	r3, #1
 800134c:	b29b      	uxth	r3, r3
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <apMain+0x1d4>)
 8001352:	801a      	strh	r2, [r3, #0]
#endif
		cliMain();
 8001354:	f009 f84e 	bl	800a3f4 <cliMain>

		loopTime = micros() - previousTime;
 8001358:	f000 f8b6 	bl	80014c8 <micros>
 800135c:	4602      	mov	r2, r0
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <apMain+0x1c4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	4a31      	ldr	r2, [pc, #196]	; (800142c <apMain+0x1d8>)
 8001366:	6013      	str	r3, [r2, #0]
		while(1)
		{
			currentTime = micros();
 8001368:	f000 f8ae 	bl	80014c8 <micros>
 800136c:	4602      	mov	r2, r0
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <apMain+0x1dc>)
 8001370:	601a      	str	r2, [r3, #0]
			cycleTime = currentTime - previousTime;
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <apMain+0x1dc>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <apMain+0x1c4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <apMain+0x1e0>)
 800137e:	6013      	str	r3, [r2, #0]
#if defined(LOOP_TIME)
			if (cycleTime >= LOOP_TIME)
 8001380:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <apMain+0x1e0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001388:	d3ee      	bcc.n	8001368 <apMain+0x114>
			{
				if(cycleTime > (LOOP_TIME+50))
 800138a:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <apMain+0x1e0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f640 72d2 	movw	r2, #4050	; 0xfd2
 8001392:	4293      	cmp	r3, r2
 8001394:	d905      	bls.n	80013a2 <apMain+0x14e>
				{
					ledToggle(RGB_RED);
 8001396:	2002      	movs	r0, #2
 8001398:	f00a fa2c 	bl	800b7f4 <ledToggle>
					Error.error = 4;
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <apMain+0x1e4>)
 800139e:	2204      	movs	r2, #4
 80013a0:	701a      	strb	r2, [r3, #0]
				}
				break;
 80013a2:	bf00      	nop
			}
#else
			break;
#endif
		}
		previousTime = currentTime;
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <apMain+0x1dc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <apMain+0x1c4>)
 80013aa:	6013      	str	r3, [r2, #0]

		if(f.ARMED)
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <apMain+0x1e8>)
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <apMain+0x16e>
		{
			armedTime += (uint32_t)cycleTime;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <apMain+0x1e0>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <apMain+0x1ec>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	4a20      	ldr	r2, [pc, #128]	; (8001440 <apMain+0x1ec>)
 80013c0:	6013      	str	r3, [r2, #0]
		}

		if(loopTime > cycleTimeMax) cycleTimeMax = loopTime;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <apMain+0x1f0>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <apMain+0x1d8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d204      	bcs.n	80013da <apMain+0x186>
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <apMain+0x1d8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <apMain+0x1f0>)
 80013d8:	801a      	strh	r2, [r3, #0]
		if(loopTime < cycleTimeMin) cycleTimeMin = loopTime;
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <apMain+0x1f4>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <apMain+0x1d8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d904      	bls.n	80013f2 <apMain+0x19e>
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <apMain+0x1d8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <apMain+0x1f4>)
 80013f0:	801a      	strh	r2, [r3, #0]
		static uint16_t z = 0;
		z++;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <apMain+0x1f8>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <apMain+0x1f8>)
 80013fc:	801a      	strh	r2, [r3, #0]
		if(z >= 250)
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <apMain+0x1f8>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	2bf9      	cmp	r3, #249	; 0xf9
 8001404:	f67f af2e 	bls.w	8001264 <apMain+0x10>
		{
			z = 0;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <apMain+0x1f8>)
 800140a:	2200      	movs	r2, #0
 800140c:	801a      	strh	r2, [r3, #0]
			ledToggle(ST1);
 800140e:	2000      	movs	r0, #0
 8001410:	f00a f9f0 	bl	800b7f4 <ledToggle>
	{
 8001414:	e726      	b.n	8001264 <apMain+0x10>
 8001416:	bf00      	nop
 8001418:	2000025c 	.word	0x2000025c
 800141c:	20000270 	.word	0x20000270
 8001420:	200009b0 	.word	0x200009b0
 8001424:	2000026e 	.word	0x2000026e
 8001428:	2000026c 	.word	0x2000026c
 800142c:	20000260 	.word	0x20000260
 8001430:	20000254 	.word	0x20000254
 8001434:	20000258 	.word	0x20000258
 8001438:	20000acc 	.word	0x20000acc
 800143c:	20000ed4 	.word	0x20000ed4
 8001440:	20000268 	.word	0x20000268
 8001444:	20000264 	.word	0x20000264
 8001448:	20000000 	.word	0x20000000
 800144c:	20000272 	.word	0x20000272

08001450 <HAL_SYSTICK_Callback>:
void SystemClock_Config(void);

static volatile uint32_t msTicks = 0;

void HAL_SYSTICK_Callback(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	msTicks++;
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <HAL_SYSTICK_Callback+0x18>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_SYSTICK_Callback+0x18>)
 800145c:	6013      	str	r3, [r2, #0]
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000274 	.word	0x20000274

0800146c <bspInit>:

void bspInit(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  HAL_Init();
 8001472:	f00b f91f 	bl	800c6b4 <HAL_Init>
  SystemClock_Config();
 8001476:	f000 f858 	bl	800152a <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <bspInit+0x48>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <bspInit+0x48>)
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	6193      	str	r3, [r2, #24]
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <bspInit+0x48>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <bspInit+0x48>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <bspInit+0x48>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6193      	str	r3, [r2, #24]
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <bspInit+0x48>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000

080014b8 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80014bc:	f00b f952 	bl	800c764 <HAL_GetTick>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <micros>:

uint32_t micros(void)
{
 80014c8:	b4b0      	push	{r4, r5, r7}
 80014ca:	af00      	add	r7, sp, #0
	 register uint32_t ms, cycle_cnt;
	    do {
	        ms = msTicks;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <micros+0x38>)
 80014ce:	681c      	ldr	r4, [r3, #0]
	        cycle_cnt = SysTick->VAL;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <micros+0x3c>)
 80014d2:	689d      	ldr	r5, [r3, #8]
	    } while (ms != msTicks);
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <micros+0x38>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	429c      	cmp	r4, r3
 80014da:	d1f7      	bne.n	80014cc <micros+0x4>
	    return (ms * 1000) + (72 * 1000 - cycle_cnt) / 72; //168
 80014dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e0:	fb03 f204 	mul.w	r2, r3, r4
 80014e4:	f5c5 338c 	rsb	r3, r5, #71680	; 0x11800
 80014e8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80014ec:	4906      	ldr	r1, [pc, #24]	; (8001508 <micros+0x40>)
 80014ee:	fba1 1303 	umull	r1, r3, r1, r3
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	4413      	add	r3, r2
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bcb0      	pop	{r4, r5, r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000274 	.word	0x20000274
 8001504:	e000e010 	.word	0xe000e010
 8001508:	38e38e39 	.word	0x38e38e39

0800150c <__io_putchar>:

int __io_putchar(int ch)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2201      	movs	r2, #1
 8001518:	4619      	mov	r1, r3
 800151a:	2000      	movs	r0, #0
 800151c:	f00a fdf4 	bl	800c108 <uartWrite>
  return 1;
 8001520:	2301      	movs	r3, #1
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <SystemClock_Config>:

void SystemClock_Config(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b090      	sub	sp, #64	; 0x40
 800152e:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	2228      	movs	r2, #40	; 0x28
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f00f ffd8 	bl	80114ee <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800154c:	2301      	movs	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001554:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155a:	2301      	movs	r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155e:	2302      	movs	r3, #2
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001568:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800156c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	4618      	mov	r0, r3
 8001574:	f00d fbf8 	bl	800ed68 <HAL_RCC_OscConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x58>
	  {
	    Error_Handler();
 800157e:	f000 f819 	bl	80015b4 <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001582:	230f      	movs	r3, #15
 8001584:	607b      	str	r3, [r7, #4]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001586:	2302      	movs	r3, #2
 8001588:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800158e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001592:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2102      	movs	r1, #2
 800159c:	4618      	mov	r0, r3
 800159e:	f00d fe63 	bl	800f268 <HAL_RCC_ClockConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x82>
	  {
	    Error_Handler();
 80015a8:	f000 f804 	bl	80015b4 <Error_Handler>
	  }
}
 80015ac:	bf00      	nop
 80015ae:	3740      	adds	r7, #64	; 0x40
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_MspInit+0x5c>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a14      	ldr	r2, [pc, #80]	; (800161c <HAL_MspInit+0x5c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6193      	str	r3, [r2, #24]
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_MspInit+0x5c>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_MspInit+0x5c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_MspInit+0x5c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_MspInit+0x5c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_MspInit+0x60>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_MspInit+0x60>)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <NMI_Handler+0x4>

0800162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166a:	f00b f869 	bl	800c740 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800166e:	f00b f9b2 	bl	800c9d6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <DMA1_Channel4_IRQHandler+0x10>)
 800167e:	f00b fae1 	bl	800cc44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000142c 	.word	0x2000142c

0800168c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <DMA1_Channel5_IRQHandler+0x10>)
 8001692:	f00b fad7 	bl	800cc44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20001470 	.word	0x20001470

080016a0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <DMA1_Channel6_IRQHandler+0x10>)
 80016a6:	f00b facd 	bl	800cc44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200013e8 	.word	0x200013e8

080016b4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DMA1_Channel7_IRQHandler+0x10>)
 80016ba:	f00b fac3 	bl	800cc44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200014b4 	.word	0x200014b4

080016c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <TIM2_IRQHandler+0x10>)
 80016ce:	f00e fa07 	bl	800fae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200013a0 	.word	0x200013a0

080016dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <TIM3_IRQHandler+0x10>)
 80016e2:	f00e f9fd 	bl	800fae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20001358 	.word	0x20001358

080016f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <TIM4_IRQHandler+0x10>)
 80016f6:	f00e f9f3 	bl	800fae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20001310 	.word	0x20001310

08001704 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <USART1_IRQHandler+0x10>)
 800170a:	f00f fae5 	bl	8010cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200014f8 	.word	0x200014f8

08001718 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <USART2_IRQHandler+0x10>)
 800171e:	f00f fadb 	bl	8010cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20001538 	.word	0x20001538

0800172c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e00a      	b.n	8001754 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800173e:	f3af 8000 	nop.w
 8001742:	4601      	mov	r1, r0
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	60ba      	str	r2, [r7, #8]
 800174a:	b2ca      	uxtb	r2, r1
 800174c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	dbf0      	blt.n	800173e <_read+0x12>
	}

return len;
 800175c:	687b      	ldr	r3, [r7, #4]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e009      	b.n	800178c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	60ba      	str	r2, [r7, #8]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fec3 	bl	800150c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf1      	blt.n	8001778 <_write+0x12>
	}
	return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_close>:

int _close(int file)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
	return -1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c4:	605a      	str	r2, [r3, #4]
	return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <_isatty>:

int _isatty(int file)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
	return 1;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
	return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
	...

08001800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <_sbrk+0x5c>)
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <_sbrk+0x60>)
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <_sbrk+0x64>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <_sbrk+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	429a      	cmp	r2, r3
 800182e:	d207      	bcs.n	8001840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001830:	f00f fe04 	bl	801143c <__errno>
 8001834:	4602      	mov	r2, r0
 8001836:	230c      	movs	r3, #12
 8001838:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	e009      	b.n	8001854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <_sbrk+0x64>)
 8001850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20005000 	.word	0x20005000
 8001860:	00000400 	.word	0x00000400
 8001864:	20000278 	.word	0x20000278
 8001868:	20001580 	.word	0x20001580

0800186c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800187a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800187c:	f7ff fff6 	bl	800186c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001882:	490d      	ldr	r1, [pc, #52]	; (80018b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <LoopForever+0xe>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001898:	4c0a      	ldr	r4, [pc, #40]	; (80018c4 <LoopForever+0x16>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018a6:	f00f fdcf 	bl	8011448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018aa:	f00f fdb9 	bl	8011420 <main>

080018ae <LoopForever>:

LoopForever:
    b LoopForever
 80018ae:	e7fe      	b.n	80018ae <LoopForever>
  ldr   r0, =_estack
 80018b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80018bc:	0801a9a8 	.word	0x0801a9a8
  ldr r2, =_sbss
 80018c0:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80018c4:	20001580 	.word	0x20001580

080018c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC1_2_IRQHandler>
	...

080018cc <EEPROM_Init>:
     uartPrintf(_DEF_UART1, "[ %d ] = %d\r\n", 1000+i, z[i]);
   }
}

void EEPROM_Init()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0

  posholdPID_PARAM.kP = readFloat(0); //GPS PID
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f8f0 	bl	8001ab8 <readFloat>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b69      	ldr	r3, [pc, #420]	; (8001a80 <EEPROM_Init+0x1b4>)
 80018dc:	601a      	str	r2, [r3, #0]
  posholdPID_PARAM.kI = readFloat(4);
 80018de:	2004      	movs	r0, #4
 80018e0:	f000 f8ea 	bl	8001ab8 <readFloat>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4b66      	ldr	r3, [pc, #408]	; (8001a80 <EEPROM_Init+0x1b4>)
 80018e8:	605a      	str	r2, [r3, #4]

  poshold_ratePID_PARAM.kP = readFloat(8);
 80018ea:	2008      	movs	r0, #8
 80018ec:	f000 f8e4 	bl	8001ab8 <readFloat>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b64      	ldr	r3, [pc, #400]	; (8001a84 <EEPROM_Init+0x1b8>)
 80018f4:	601a      	str	r2, [r3, #0]
  poshold_ratePID_PARAM.kI = readFloat(12);
 80018f6:	200c      	movs	r0, #12
 80018f8:	f000 f8de 	bl	8001ab8 <readFloat>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <EEPROM_Init+0x1b8>)
 8001900:	605a      	str	r2, [r3, #4]
  poshold_ratePID_PARAM.kD = readFloat(16);
 8001902:	2010      	movs	r0, #16
 8001904:	f000 f8d8 	bl	8001ab8 <readFloat>
 8001908:	4602      	mov	r2, r0
 800190a:	4b5e      	ldr	r3, [pc, #376]	; (8001a84 <EEPROM_Init+0x1b8>)
 800190c:	609a      	str	r2, [r3, #8]

  navPID_PARAM.kP = readFloat(20);
 800190e:	2014      	movs	r0, #20
 8001910:	f000 f8d2 	bl	8001ab8 <readFloat>
 8001914:	4602      	mov	r2, r0
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <EEPROM_Init+0x1bc>)
 8001918:	601a      	str	r2, [r3, #0]
  navPID_PARAM.kI = readFloat(24);
 800191a:	2018      	movs	r0, #24
 800191c:	f000 f8cc 	bl	8001ab8 <readFloat>
 8001920:	4602      	mov	r2, r0
 8001922:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <EEPROM_Init+0x1bc>)
 8001924:	605a      	str	r2, [r3, #4]
  navPID_PARAM.kD = readFloat(28);
 8001926:	201c      	movs	r0, #28
 8001928:	f000 f8c6 	bl	8001ab8 <readFloat>
 800192c:	4602      	mov	r2, r0
 800192e:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <EEPROM_Init+0x1bc>)
 8001930:	609a      	str	r2, [r3, #8]
  posholdPID_PARAM.Imax = readFloat(32);
 8001932:	2020      	movs	r0, #32
 8001934:	f000 f8c0 	bl	8001ab8 <readFloat>
 8001938:	4602      	mov	r2, r0
 800193a:	4b51      	ldr	r3, [pc, #324]	; (8001a80 <EEPROM_Init+0x1b4>)
 800193c:	60da      	str	r2, [r3, #12]
  poshold_ratePID_PARAM.Imax = readFloat(32);
 800193e:	2020      	movs	r0, #32
 8001940:	f000 f8ba 	bl	8001ab8 <readFloat>
 8001944:	4602      	mov	r2, r0
 8001946:	4b4f      	ldr	r3, [pc, #316]	; (8001a84 <EEPROM_Init+0x1b8>)
 8001948:	60da      	str	r2, [r3, #12]
  navPID_PARAM.Imax = readFloat(32);
 800194a:	2020      	movs	r0, #32
 800194c:	f000 f8b4 	bl	8001ab8 <readFloat>
 8001950:	4602      	mov	r2, r0
 8001952:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <EEPROM_Init+0x1bc>)
 8001954:	60da      	str	r2, [r3, #12]

   for(int i = 0; i < 3; i++){
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	e065      	b.n	8001a28 <EEPROM_Init+0x15c>
     pid.kp1[i] = readFloat(36 + (4*i));  //Dual_PID
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3309      	adds	r3, #9
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f8a8 	bl	8001ab8 <readFloat>
 8001968:	4601      	mov	r1, r0
 800196a:	4a48      	ldr	r2, [pc, #288]	; (8001a8c <EEPROM_Init+0x1c0>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3304      	adds	r3, #4
 8001970:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.ki1[i] = readFloat(48 + (4*i));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	330c      	adds	r3, #12
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f89c 	bl	8001ab8 <readFloat>
 8001980:	4601      	mov	r1, r0
 8001982:	4a42      	ldr	r2, [pc, #264]	; (8001a8c <EEPROM_Init+0x1c0>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3310      	adds	r3, #16
 8001988:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.kp2[i] = readFloat(60 + (4*i));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	330f      	adds	r3, #15
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f890 	bl	8001ab8 <readFloat>
 8001998:	4601      	mov	r1, r0
 800199a:	4a3c      	ldr	r2, [pc, #240]	; (8001a8c <EEPROM_Init+0x1c0>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3306      	adds	r3, #6
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	6059      	str	r1, [r3, #4]
     pid.ki2[i] = readFloat(72 + (4*i));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3312      	adds	r3, #18
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f883 	bl	8001ab8 <readFloat>
 80019b2:	4601      	mov	r1, r0
 80019b4:	4a35      	ldr	r2, [pc, #212]	; (8001a8c <EEPROM_Init+0x1c0>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3312      	adds	r3, #18
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	6059      	str	r1, [r3, #4]
     pid.kd2[i] = readFloat(84 + (4*i));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3315      	adds	r3, #21
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f876 	bl	8001ab8 <readFloat>
 80019cc:	4601      	mov	r1, r0
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <EEPROM_Init+0x1c0>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	331c      	adds	r3, #28
 80019d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

     pid.kp_rate[i] = readFloat(96 + (4*i)); // Rate_PID
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3318      	adds	r3, #24
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f86a 	bl	8001ab8 <readFloat>
 80019e4:	4601      	mov	r1, r0
 80019e6:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <EEPROM_Init+0x1c0>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	330a      	adds	r3, #10
 80019ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.ki_rate[i] = readFloat(108 + (4*i));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	331b      	adds	r3, #27
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f85e 	bl	8001ab8 <readFloat>
 80019fc:	4601      	mov	r1, r0
 80019fe:	4a23      	ldr	r2, [pc, #140]	; (8001a8c <EEPROM_Init+0x1c0>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3316      	adds	r3, #22
 8001a04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     pid.kd_rate[i] = readFloat(120 + (4*i));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	331e      	adds	r3, #30
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f852 	bl	8001ab8 <readFloat>
 8001a14:	4601      	mov	r1, r0
 8001a16:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <EEPROM_Init+0x1c0>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	331e      	adds	r3, #30
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	6059      	str	r1, [r3, #4]
   for(int i = 0; i < 3; i++){
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3301      	adds	r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	dd96      	ble.n	800195c <EEPROM_Init+0x90>

   }
   magBias[0] = readFloat(132);
 8001a2e:	2084      	movs	r0, #132	; 0x84
 8001a30:	f000 f842 	bl	8001ab8 <readFloat>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <EEPROM_Init+0x1c4>)
 8001a38:	601a      	str	r2, [r3, #0]
   magBias[1] = readFloat(136);
 8001a3a:	2088      	movs	r0, #136	; 0x88
 8001a3c:	f000 f83c 	bl	8001ab8 <readFloat>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <EEPROM_Init+0x1c4>)
 8001a44:	605a      	str	r2, [r3, #4]
   magBias[2] = readFloat(140);
 8001a46:	208c      	movs	r0, #140	; 0x8c
 8001a48:	f000 f836 	bl	8001ab8 <readFloat>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <EEPROM_Init+0x1c4>)
 8001a50:	609a      	str	r2, [r3, #8]
   magScale[0] = readFloat(144);
 8001a52:	2090      	movs	r0, #144	; 0x90
 8001a54:	f000 f830 	bl	8001ab8 <readFloat>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <EEPROM_Init+0x1c8>)
 8001a5c:	601a      	str	r2, [r3, #0]
   magScale[1] = readFloat(148);
 8001a5e:	2094      	movs	r0, #148	; 0x94
 8001a60:	f000 f82a 	bl	8001ab8 <readFloat>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <EEPROM_Init+0x1c8>)
 8001a68:	605a      	str	r2, [r3, #4]
   magScale[2] = readFloat(152);
 8001a6a:	2098      	movs	r0, #152	; 0x98
 8001a6c:	f000 f824 	bl	8001ab8 <readFloat>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <EEPROM_Init+0x1c8>)
 8001a74:	609a      	str	r2, [r3, #8]
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000c64 	.word	0x20000c64
 8001a84:	20000b68 	.word	0x20000b68
 8001a88:	20000b20 	.word	0x20000b20
 8001a8c:	200009b0 	.word	0x200009b0
 8001a90:	20000344 	.word	0x20000344
 8001a94:	20000f00 	.word	0x20000f00

08001a98 <writeFloat>:
}

/**
 * Write float
 */
void writeFloat(unsigned int address, float data) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  write_1(address, (uint8_t*)&data, 4);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f817 	bl	8001adc <write_1>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <readFloat>:
}

/**
 * Read float
 */
float readFloat(unsigned int address) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  read_1(address, _b, 4);
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	4905      	ldr	r1, [pc, #20]	; (8001ad8 <readFloat+0x20>)
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f85a 	bl	8001b7e <read_1>
  return *(float*)&_b[0];
 8001aca:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <readFloat+0x20>)
 8001acc:	681b      	ldr	r3, [r3, #0]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000ae4 	.word	0x20000ae4

08001adc <write_1>:
}

/**
 * Write sequence of n bytes
 */
void write_1(unsigned int address, uint8_t *data, int n) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  // status quo
  int c = n;            // bytes left to write
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	61fb      	str	r3, [r7, #28]
  int offD = 0;         // current offset in data pointer
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
  int offP;           // current offset in page
  int nc = 0;           // next n bytes to write
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  // write alle bytes in multiple steps
  while (c > 0) {
 8001af4:	e020      	b.n	8001b38 <write_1+0x5c>
    // calc offset in page
    offP = address % PAGE_SIZE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001afc:	613b      	str	r3, [r7, #16]
    // maximal 30 bytes to write
    nc = min(min(c, 30), PAGE_SIZE - offP);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b1e      	cmp	r3, #30
 8001b08:	bfa8      	it	ge
 8001b0a:	231e      	movge	r3, #30
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	bfa8      	it	ge
 8001b10:	4613      	movge	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
    write_2(address, data, offD, nc);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f813 	bl	8001b46 <write_2>
    c-=nc;
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	61fb      	str	r3, [r7, #28]
    offD+=nc;
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
    address+=nc;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4413      	add	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
  while (c > 0) {
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	dcdb      	bgt.n	8001af6 <write_1+0x1a>
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <write_2>:

/**
 * Write sequence of n bytes from offset
 */
void write_2(unsigned int address, uint8_t *data, int offset, int n) {
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b088      	sub	sp, #32
 8001b4a:	af02      	add	r7, sp, #8
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
    uint8_t *adr = data+offset;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	4413      	add	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
    I2C_ByteWrite_HAL(EEPROM_ADDRESS, address, ADDRESS_SIZE, adr, n);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	b299      	uxth	r1, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	20a0      	movs	r0, #160	; 0xa0
 8001b6c:	f009 fba2 	bl	800b2b4 <I2C_ByteWrite_HAL>
    HAL_Delay(10);
 8001b70:	200a      	movs	r0, #10
 8001b72:	f00a fe01 	bl	800c778 <HAL_Delay>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <read_1>:

/**
 * Read sequence of n bytes
 */
void read_1(unsigned int address, uint8_t *data, int n) {
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b088      	sub	sp, #32
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
  int c = n;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	61fb      	str	r3, [r7, #28]
  int offD = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  // read until are n bytes read
  while (c > 0) {
 8001b92:	e018      	b.n	8001bc6 <read_1+0x48>
    // read maximal 32 bytes
    int nc = c;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	617b      	str	r3, [r7, #20]
    if (nc > 32)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	dd01      	ble.n	8001ba2 <read_1+0x24>
      nc = 32;
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	617b      	str	r3, [r7, #20]
    read_2(address, data, offD, nc);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f813 	bl	8001bd4 <read_2>
    address+=nc;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
    offD+=nc;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	4413      	add	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
    c-=nc;
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	61fb      	str	r3, [r7, #28]
  while (c > 0) {
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	dce3      	bgt.n	8001b94 <read_1+0x16>
  }
}
 8001bcc:	bf00      	nop
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <read_2>:


/**
 * Read sequence of n bytes to offset
 */
void read_2(unsigned int address, uint8_t *data, int offset, int n) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b09c      	sub	sp, #112	; 0x70
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	603b      	str	r3, [r7, #0]
  int r = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	667b      	str	r3, [r7, #100]	; 0x64
  uint8_t pData[80];
  memset(&pData[0], n, sizeof(pData));
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	2250      	movs	r2, #80	; 0x50
 8001bec:	6839      	ldr	r1, [r7, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00f fc7d 	bl	80114ee <memset>
  I2C_ByteRead(EEPROM_ADDRESS, address, ADDRESS_SIZE, pData, n);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	b299      	uxth	r1, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	f107 0214 	add.w	r2, r7, #20
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	2202      	movs	r2, #2
 8001c06:	20a0      	movs	r0, #160	; 0xa0
 8001c08:	f009 fb16 	bl	800b238 <I2C_ByteRead>
  while (r<n) {
 8001c0c:	e00e      	b.n	8001c2c <read_2+0x58>
    data[offset+r] = pData[r];
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c12:	4413      	add	r3, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f107 0114 	add.w	r1, r7, #20
 8001c1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c20:	440a      	add	r2, r1
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	701a      	strb	r2, [r3, #0]
    r++;
 8001c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c28:	3301      	adds	r3, #1
 8001c2a:	667b      	str	r3, [r7, #100]	; 0x64
  while (r<n) {
 8001c2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbec      	blt.n	8001c0e <read_2+0x3a>
  }
}
 8001c34:	bf00      	nop
 8001c36:	3768      	adds	r7, #104	; 0x68
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <quickMedianFilter3>:
#define QMF_COPY(p,v,n) { int32_t i; for (i=0; i<n; i++) p[i]=v[i]; }
#define QMF_SORTF(a,b) { if ((a)>(b)) QMF_SWAPF((a),(b)); }
#define QMF_SWAPF(a,b) { float temp=(a);(a)=(b);(b)=temp; }

int32_t quickMedianFilter3(int32_t * v)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b08b      	sub	sp, #44	; 0x2c
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    int32_t p[3];
    QMF_COPY(p, v, 3);
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	e00e      	b.n	8001c68 <quickMedianFilter3+0x2c>
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f843 2c1c 	str.w	r2, [r3, #-28]
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	dded      	ble.n	8001c4a <quickMedianFilter3+0xe>

    QMF_SORT(p[0], p[1]); QMF_SORT(p[1], p[2]); QMF_SORT(p[0], p[1]) ;
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	dd05      	ble.n	8001c82 <quickMedianFilter3+0x46>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dd05      	ble.n	8001c96 <quickMedianFilter3+0x5a>
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	dd05      	ble.n	8001caa <quickMedianFilter3+0x6e>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	613b      	str	r3, [r7, #16]
    return p[1];
 8001caa:	693b      	ldr	r3, [r7, #16]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	372c      	adds	r7, #44	; 0x2c
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <get_P>:
} PID;
PID posholdPID[2];
PID poshold_ratePID[2];
PID navPID[2];

int32_t get_P(int32_t error, struct PID_PARAM_* pid) {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
	return (float)error * pid->kP;
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff f825 	bl	8000d10 <__aeabi_i2f>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4610      	mov	r0, r2
 8001cd0:	f7ff f872 	bl	8000db8 <__aeabi_fmul>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fa4a 	bl	8001170 <__aeabi_f2iz>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <get_I>:

int32_t get_I(int32_t error, float* dt, struct PID_* pid, struct PID_PARAM_* pid_param) {
 8001ce6:	b5b0      	push	{r4, r5, r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	603b      	str	r3, [r7, #0]
	pid->integrator += ((float)error * pid_param->kI) * *dt;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681c      	ldr	r4, [r3, #0]
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7ff f809 	bl	8000d10 <__aeabi_i2f>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f7ff f856 	bl	8000db8 <__aeabi_fmul>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4610      	mov	r0, r2
 8001d18:	f7ff f84e 	bl	8000db8 <__aeabi_fmul>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7fe ff41 	bl	8000ba8 <__addsf3>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	601a      	str	r2, [r3, #0]
	pid->integrator = constrain(pid->integrator,-pid_param->Imax,pid_param->Imax);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fa1c 	bl	8001170 <__aeabi_f2iz>
 8001d38:	4604      	mov	r4, r0
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fa14 	bl	8001170 <__aeabi_f2iz>
 8001d48:	4605      	mov	r5, r0
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fa0e 	bl	8001170 <__aeabi_f2iz>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4629      	mov	r1, r5
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f003 fd44 	bl	80057e8 <constrain>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe ffd4 	bl	8000d10 <__aeabi_i2f>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	601a      	str	r2, [r3, #0]
	return pid->integrator;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff f9fc 	bl	8001170 <__aeabi_f2iz>
 8001d78:	4603      	mov	r3, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d84 <get_D>:

int32_t get_D(int32_t input, float* dt, struct PID_* pid, struct PID_PARAM_* pid_param) { // dt in milliseconds
 8001d84:	b5b0      	push	{r4, r5, r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
	pid->derivative = (input - pid->last_input) / *dt;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ffb8 	bl	8000d10 <__aeabi_i2f>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4619      	mov	r1, r3
 8001da8:	4610      	mov	r0, r2
 8001daa:	f7ff f8b9 	bl	8000f20 <__aeabi_fdiv>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]

	/// Low pass filter cut frequency for derivative calculation.
	float filter = 7.9577e-3; // Set to  "1 / ( 2 * PI * f_cut )";
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <get_D+0xb4>)
 8001db8:	617b      	str	r3, [r7, #20]
	// f_cut = 25 Hz -> _filter =  6.3662e-3
	// f_cut = 30 Hz -> _filter =  5.3052e-3

	// discrete low pass filter, cuts out the
	// high frequency noise that can drive the controller crazy
	pid->derivative = pid->lastderivative + (*dt / ( filter + *dt)) * (pid->derivative - pid->lastderivative);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689c      	ldr	r4, [r3, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	681d      	ldr	r5, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6979      	ldr	r1, [r7, #20]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe feed 	bl	8000ba8 <__addsf3>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	f7ff f8a4 	bl	8000f20 <__aeabi_fdiv>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461d      	mov	r5, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f7fe fedc 	bl	8000ba4 <__aeabi_fsub>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4619      	mov	r1, r3
 8001df0:	4628      	mov	r0, r5
 8001df2:	f7fe ffe1 	bl	8000db8 <__aeabi_fmul>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7fe fed4 	bl	8000ba8 <__addsf3>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	611a      	str	r2, [r3, #16]
	// update state
	pid->last_input = input;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	605a      	str	r2, [r3, #4]
	pid->lastderivative    = pid->derivative;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	609a      	str	r2, [r3, #8]
	// add in derivative component
	return pid_param->kD * pid->derivative;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4610      	mov	r0, r2
 8001e22:	f7fe ffc9 	bl	8000db8 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff f9a1 	bl	8001170 <__aeabi_f2iz>
 8001e2e:	4603      	mov	r3, r0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bdb0      	pop	{r4, r5, r7, pc}
 8001e38:	3c026103 	.word	0x3c026103

08001e3c <reset_PID>:

void reset_PID(struct PID_* pid) {
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	pid->integrator = 0;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
	pid->last_input = 0;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
	pid->lastderivative = 0;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <gps_Init>:
#ifdef _USE_HW_CLI
static void cliGps(cli_args_t *args);
#endif

void gps_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
	uint32_t baud;

	baud = uartGetBaud(_DEF_UART1);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f00a f9ee 	bl	800c24c <uartGetBaud>
 8001e70:	6078      	str	r0, [r7, #4]

	if (baud != 9600)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8001e78:	d004      	beq.n	8001e84 <gps_Init+0x20>
	{
		uartSetBaud(_DEF_UART1, 9600);
 8001e7a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f00a fa04 	bl	800c28c <uartSetBaud>
	}
	uartWriteIT(_DEF_UART1, (uint8_t *)Disable_GPGSV, 11);
 8001e84:	220b      	movs	r2, #11
 8001e86:	4917      	ldr	r1, [pc, #92]	; (8001ee4 <gps_Init+0x80>)
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f00a f977 	bl	800c17c <uartWriteIT>
	HAL_Delay(350);
 8001e8e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001e92:	f00a fc71 	bl	800c778 <HAL_Delay>
	uartWriteIT(_DEF_UART1, (uint8_t *)Set_to_5Hz, 14);
 8001e96:	220e      	movs	r2, #14
 8001e98:	4913      	ldr	r1, [pc, #76]	; (8001ee8 <gps_Init+0x84>)
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f00a f96e 	bl	800c17c <uartWriteIT>
	HAL_Delay(350);
 8001ea0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001ea4:	f00a fc68 	bl	800c778 <HAL_Delay>
	uartWriteIT(_DEF_UART1, (uint8_t *)Set_to_57kbps, 28);
 8001ea8:	221c      	movs	r2, #28
 8001eaa:	4910      	ldr	r1, [pc, #64]	; (8001eec <gps_Init+0x88>)
 8001eac:	2000      	movs	r0, #0
 8001eae:	f00a f965 	bl	800c17c <uartWriteIT>
	HAL_Delay(350);
 8001eb2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001eb6:	f00a fc5f 	bl	800c778 <HAL_Delay>

	baud = uartGetBaud(_DEF_UART1);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f00a f9c6 	bl	800c24c <uartGetBaud>
 8001ec0:	6078      	str	r0, [r7, #4]

	if (baud != 57600)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8001ec8:	d004      	beq.n	8001ed4 <gps_Init+0x70>
	{
		uartSetBaud(_DEF_UART1, 57600);
 8001eca:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f00a f9dc 	bl	800c28c <uartSetBaud>
	}

#ifdef _USE_HW_CLI
	cliAdd("gps", cliGps);
 8001ed4:	4906      	ldr	r1, [pc, #24]	; (8001ef0 <gps_Init+0x8c>)
 8001ed6:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <gps_Init+0x90>)
 8001ed8:	f008 ffc6 	bl	800ae68 <cliAdd>
#endif
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	08019f74 	.word	0x08019f74
 8001ee8:	08019f80 	.word	0x08019f80
 8001eec:	08019f90 	.word	0x08019f90
 8001ef0:	08002e25 	.word	0x08002e25
 8001ef4:	08019b58 	.word	0x08019b58

08001ef8 <constrain_int16>:
//Author : EOSBandi
//Based on code and ideas from the Arducopter team: Jason Short,Randy Mackay, Pat Hickey, Jose Julio, Jani Hirvinen
//Andrew Tridgell, Justin Beech, Adam Rivera, Jean-Louis Naudin, Roberto Navoni

//original constraint does not work with variables
int16_t constrain_int16(int16_t amt, int16_t low, int16_t high) {
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
 8001f02:	460b      	mov	r3, r1
 8001f04:	80bb      	strh	r3, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	807b      	strh	r3, [r7, #2]
	return ((amt)<(low)?(low):((amt)>(high)?(high):(amt)));
 8001f0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	db08      	blt.n	8001f28 <constrain_int16+0x30>
 8001f16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	bfa8      	it	ge
 8001f22:	4613      	movge	r3, r2
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	e001      	b.n	8001f2c <constrain_int16+0x34>
 8001f28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
	...

08001f38 <GPS_mode_check>:

void GPS_mode_check(void){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
	uint8_t gps_modes_check = (rcOptions[BOXLAND]<< 3) + (rcOptions[BOXGPSHOME]<< 2) + (rcOptions[BOXGPSHOLD]<<1) + (rcOptions[BOXGPSNAV]);
 8001f3e:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <GPS_mode_check+0x100>)
 8001f40:	7a9b      	ldrb	r3, [r3, #10]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b3c      	ldr	r3, [pc, #240]	; (8002038 <GPS_mode_check+0x100>)
 8001f48:	79db      	ldrb	r3, [r3, #7]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b39      	ldr	r3, [pc, #228]	; (8002038 <GPS_mode_check+0x100>)
 8001f54:	7a1b      	ldrb	r3, [r3, #8]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b36      	ldr	r3, [pc, #216]	; (8002038 <GPS_mode_check+0x100>)
 8001f60:	7a5b      	ldrb	r3, [r3, #9]
 8001f62:	4413      	add	r3, r2
 8001f64:	71fb      	strb	r3, [r7, #7]
	if(f.ARMED){
 8001f66:	4b35      	ldr	r3, [pc, #212]	; (800203c <GPS_mode_check+0x104>)
 8001f68:	785b      	ldrb	r3, [r3, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d056      	beq.n	800201c <GPS_mode_check+0xe4>
		if(GPS.fixquality){
 8001f6e:	4b34      	ldr	r3, [pc, #208]	; (8002040 <GPS_mode_check+0x108>)
 8001f70:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d044      	beq.n	8002002 <GPS_mode_check+0xca>
			if(GPS.satellites > 5){
 8001f78:	4b31      	ldr	r3, [pc, #196]	; (8002040 <GPS_mode_check+0x108>)
 8001f7a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d924      	bls.n	8001fcc <GPS_mode_check+0x94>
				if(prv_gps_modes !=gps_modes_check){
 8001f82:	4b30      	ldr	r3, [pc, #192]	; (8002044 <GPS_mode_check+0x10c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	79fa      	ldrb	r2, [r7, #7]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d050      	beq.n	800202e <GPS_mode_check+0xf6>
					NAV_error = NAV_ERROR_NONE;
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <GPS_mode_check+0x110>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
					if(rcOptions[BOXGPSHOLD]){
 8001f92:	4b29      	ldr	r3, [pc, #164]	; (8002038 <GPS_mode_check+0x100>)
 8001f94:	7a1b      	ldrb	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <GPS_mode_check+0x7c>
						f.GPS_MODE = GPS_MODE_HOLD;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <GPS_mode_check+0x104>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	72da      	strb	r2, [r3, #11]
						GPS_set_next_wp(&GPS_coord[LAT], &GPS_coord[LON], &GPS_coord[LAT], &GPS_coord[LON]); //hold at the current position
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <GPS_mode_check+0x114>)
 8001fa2:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <GPS_mode_check+0x118>)
 8001fa4:	4929      	ldr	r1, [pc, #164]	; (800204c <GPS_mode_check+0x114>)
 8001fa6:	482a      	ldr	r0, [pc, #168]	; (8002050 <GPS_mode_check+0x118>)
 8001fa8:	f000 fb4e 	bl	8002648 <GPS_set_next_wp>
						//set_new_altitude(alt.EstAlt);                                //and current altitude
						NAV_state = NAV_STATE_HOLD_INFINIT;
 8001fac:	4b29      	ldr	r3, [pc, #164]	; (8002054 <GPS_mode_check+0x11c>)
 8001fae:	2203      	movs	r2, #3
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	e007      	b.n	8001fc4 <GPS_mode_check+0x8c>
					}else
					{
            f.GPS_MODE = GPS_MODE_NONE;
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <GPS_mode_check+0x104>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	72da      	strb	r2, [r3, #11]
//            f.GPS_BARO_MODE = false;
//            f.THROTTLE_IGNORED = false;
//            f.LAND_IN_PROGRESS = 0;
//            f.THROTTLE_IGNORED = 0;
            NAV_state = NAV_STATE_NONE;
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <GPS_mode_check+0x11c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
            GPS_reset_nav();
 8001fc0:	f000 fbc0 	bl	8002744 <GPS_reset_nav>
					}
					prv_gps_modes = gps_modes_check;
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <GPS_mode_check+0x10c>)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	7013      	strb	r3, [r2, #0]
		NAV_state = NAV_STATE_NONE;
		//NAV_paused_at = 0;
		NAV_error = NAV_ERROR_DISARMED;
		//GPS_reset_nav();
	}
}
 8001fca:	e030      	b.n	800202e <GPS_mode_check+0xf6>
				if (f.GPS_MODE == GPS_MODE_HOLD || f.GPS_MODE == GPS_MODE_RTH) {
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <GPS_mode_check+0x104>)
 8001fce:	7adb      	ldrb	r3, [r3, #11]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d003      	beq.n	8001fdc <GPS_mode_check+0xa4>
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <GPS_mode_check+0x104>)
 8001fd6:	7adb      	ldrb	r3, [r3, #11]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d10b      	bne.n	8001ff4 <GPS_mode_check+0xbc>
					f.GPS_MODE = GPS_MODE_NONE;
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <GPS_mode_check+0x104>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	72da      	strb	r2, [r3, #11]
					NAV_state = NAV_STATE_NONE;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <GPS_mode_check+0x11c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
					NAV_error = NAV_ERROR_SPOILED_GPS;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <GPS_mode_check+0x110>)
 8001fea:	2202      	movs	r2, #2
 8001fec:	701a      	strb	r2, [r3, #0]
					prv_gps_modes = 0xff;                                          //invalidates mode check, to allow re evaluate rcOptions when numsats raised again
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <GPS_mode_check+0x10c>)
 8001ff0:	22ff      	movs	r2, #255	; 0xff
 8001ff2:	701a      	strb	r2, [r3, #0]
				nav[0] = 0; nav[1] = 0;
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <GPS_mode_check+0x120>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	801a      	strh	r2, [r3, #0]
 8001ffa:	4b17      	ldr	r3, [pc, #92]	; (8002058 <GPS_mode_check+0x120>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	805a      	strh	r2, [r3, #2]
}
 8002000:	e015      	b.n	800202e <GPS_mode_check+0xf6>
			f.GPS_MODE = GPS_MODE_NONE;
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <GPS_mode_check+0x104>)
 8002004:	2200      	movs	r2, #0
 8002006:	72da      	strb	r2, [r3, #11]
			NAV_state = NAV_STATE_NONE;
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <GPS_mode_check+0x11c>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
			NAV_error = NAV_ERROR_GPS_FIX_LOST;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <GPS_mode_check+0x110>)
 8002010:	2209      	movs	r2, #9
 8002012:	701a      	strb	r2, [r3, #0]
			prv_gps_modes = 0xff;                                              //Gives a chance to restart mission when regain fix
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <GPS_mode_check+0x10c>)
 8002016:	22ff      	movs	r2, #255	; 0xff
 8002018:	701a      	strb	r2, [r3, #0]
}
 800201a:	e008      	b.n	800202e <GPS_mode_check+0xf6>
		f.GPS_MODE = GPS_MODE_NONE;
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <GPS_mode_check+0x104>)
 800201e:	2200      	movs	r2, #0
 8002020:	72da      	strb	r2, [r3, #11]
		NAV_state = NAV_STATE_NONE;
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <GPS_mode_check+0x11c>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
		NAV_error = NAV_ERROR_DISARMED;
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <GPS_mode_check+0x110>)
 800202a:	220a      	movs	r2, #10
 800202c:	701a      	strb	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000d34 	.word	0x20000d34
 800203c:	20000ed4 	.word	0x20000ed4
 8002040:	20000b78 	.word	0x20000b78
 8002044:	20000282 	.word	0x20000282
 8002048:	20000281 	.word	0x20000281
 800204c:	20000c60 	.word	0x20000c60
 8002050:	20000c5c 	.word	0x20000c5c
 8002054:	20000280 	.word	0x20000280
 8002058:	20000b30 	.word	0x20000b30

0800205c <GPS_Compute>:

uint8_t GPS_Compute(void) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af02      	add	r7, sp, #8
	uint32_t dist;        //temp variable to store dist to copter
	int32_t  dir;         //temp variable to store dir to copter
	static uint32_t nav_loopTimer;

	//check that we have a valid frame, if not then return immediatly
	if (GPS.GPS_Frame == 0||!GPS_virtual) return 0; else GPS.GPS_Frame = 0;
 8002062:	4b57      	ldr	r3, [pc, #348]	; (80021c0 <GPS_Compute+0x164>)
 8002064:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <GPS_Compute+0x18>
 800206c:	4b55      	ldr	r3, [pc, #340]	; (80021c4 <GPS_Compute+0x168>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <GPS_Compute+0x1c>
 8002074:	2300      	movs	r3, #0
 8002076:	e09f      	b.n	80021b8 <GPS_Compute+0x15c>
 8002078:	4b51      	ldr	r3, [pc, #324]	; (80021c0 <GPS_Compute+0x164>)
 800207a:	2200      	movs	r2, #0
 800207c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

	//check home position and set it if it was not set
	if (GPS.fixquality && GPS.satellites >= 5)
 8002080:	4b4f      	ldr	r3, [pc, #316]	; (80021c0 <GPS_Compute+0x164>)
 8002082:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8092 	beq.w	80021b0 <GPS_Compute+0x154>
 800208c:	4b4c      	ldr	r3, [pc, #304]	; (80021c0 <GPS_Compute+0x164>)
 800208e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002092:	2b04      	cmp	r3, #4
 8002094:	f240 808c 	bls.w	80021b0 <GPS_Compute+0x154>
	{
		if (!f.ARMED) f.GPS_FIX_HOME = 0;
 8002098:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <GPS_Compute+0x16c>)
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <GPS_Compute+0x4a>
 80020a0:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <GPS_Compute+0x16c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	745a      	strb	r2, [r3, #17]
		if (!f.GPS_FIX_HOME && f.ARMED)
 80020a6:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <GPS_Compute+0x16c>)
 80020a8:	7c5b      	ldrb	r3, [r3, #17]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <GPS_Compute+0x5e>
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <GPS_Compute+0x16c>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <GPS_Compute+0x5e>
		{
			GPS_reset_home_position();
 80020b6:	f000 fb15 	bl	80026e4 <GPS_reset_home_position>
			}
		}

		//dTnav calculation
		//Time for calculating x,y speed and navigation pids
		dTnav = (float)(millis() - nav_loopTimer)/ 1000.0;
 80020ba:	f7ff f9fd 	bl	80014b8 <millis>
 80020be:	4602      	mov	r2, r0
 80020c0:	4b42      	ldr	r3, [pc, #264]	; (80021cc <GPS_Compute+0x170>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fe1e 	bl	8000d08 <__aeabi_ui2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4940      	ldr	r1, [pc, #256]	; (80021d0 <GPS_Compute+0x174>)
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe ff25 	bl	8000f20 <__aeabi_fdiv>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	4b3e      	ldr	r3, [pc, #248]	; (80021d4 <GPS_Compute+0x178>)
 80020dc:	601a      	str	r2, [r3, #0]
		nav_loopTimer = millis();
 80020de:	f7ff f9eb 	bl	80014b8 <millis>
 80020e2:	4602      	mov	r2, r0
 80020e4:	4b39      	ldr	r3, [pc, #228]	; (80021cc <GPS_Compute+0x170>)
 80020e6:	601a      	str	r2, [r3, #0]

		// prevent runup from bad GPS
		dTnav = min(dTnav, 1.0);
 80020e8:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <GPS_Compute+0x178>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe ffff 	bl	80010f4 <__aeabi_fcmplt>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <GPS_Compute+0xa6>
 80020fc:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <GPS_Compute+0x178>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	e001      	b.n	8002106 <GPS_Compute+0xaa>
 8002102:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002106:	4a33      	ldr	r2, [pc, #204]	; (80021d4 <GPS_Compute+0x178>)
 8002108:	6013      	str	r3, [r2, #0]

		//calculate distance and bearings for gui and other stuff continously - From home to copter
		GPS_bearing(&GPS_coord[LAT],&GPS_coord[LON],&GPS_home[LAT],&GPS_home[LON],&dir);
 800210a:	463b      	mov	r3, r7
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <GPS_Compute+0x17c>)
 8002110:	4a32      	ldr	r2, [pc, #200]	; (80021dc <GPS_Compute+0x180>)
 8002112:	4933      	ldr	r1, [pc, #204]	; (80021e0 <GPS_Compute+0x184>)
 8002114:	4833      	ldr	r0, [pc, #204]	; (80021e4 <GPS_Compute+0x188>)
 8002116:	f000 f877 	bl	8002208 <GPS_bearing>
		GPS_distance_cm(&GPS_coord[LAT],&GPS_coord[LON],&GPS_home[LAT],&GPS_home[LON],&dist);
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <GPS_Compute+0x17c>)
 8002120:	4a2e      	ldr	r2, [pc, #184]	; (80021dc <GPS_Compute+0x180>)
 8002122:	492f      	ldr	r1, [pc, #188]	; (80021e0 <GPS_Compute+0x184>)
 8002124:	482f      	ldr	r0, [pc, #188]	; (80021e4 <GPS_Compute+0x188>)
 8002126:	f000 f8d3 	bl	80022d0 <GPS_distance_cm>
		GPS_distanceToHome = dist/100;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2e      	ldr	r2, [pc, #184]	; (80021e8 <GPS_Compute+0x18c>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <GPS_Compute+0x190>)
 8002138:	801a      	strh	r2, [r3, #0]
		GPS_directionToHome = dir/100;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <GPS_Compute+0x18c>)
 800213e:	fb82 1203 	smull	r1, r2, r2, r3
 8002142:	1152      	asrs	r2, r2, #5
 8002144:	17db      	asrs	r3, r3, #31
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	b21a      	sxth	r2, r3
 800214a:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <GPS_Compute+0x194>)
 800214c:	801a      	strh	r2, [r3, #0]

		if (!GPS.fixquality)
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <GPS_Compute+0x164>)
 8002150:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <GPS_Compute+0x108>
		{     //If we don't have home set, do not display anything
			GPS_distanceToHome = 0;
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <GPS_Compute+0x190>)
 800215a:	2200      	movs	r2, #0
 800215c:	801a      	strh	r2, [r3, #0]
			GPS_directionToHome = 0;
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <GPS_Compute+0x194>)
 8002160:	2200      	movs	r2, #0
 8002162:	801a      	strh	r2, [r3, #0]
		}

		//calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
		GPS_calc_velocity();
 8002164:	f000 f90a 	bl	800237c <GPS_calc_velocity>

		if(f.GPS_MODE != GPS_MODE_NONE)
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <GPS_Compute+0x16c>)
 800216a:	7adb      	ldrb	r3, [r3, #11]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01f      	beq.n	80021b0 <GPS_Compute+0x154>
		{
			//do gps nav calculations here, these are common for nav and poshold
			GPS_bearing(&GPS_coord[LAT],&GPS_coord[LON],&GPS_WP[LAT],&GPS_WP[LON],&target_bearing);
 8002170:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <GPS_Compute+0x198>)
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <GPS_Compute+0x19c>)
 8002176:	4a21      	ldr	r2, [pc, #132]	; (80021fc <GPS_Compute+0x1a0>)
 8002178:	4919      	ldr	r1, [pc, #100]	; (80021e0 <GPS_Compute+0x184>)
 800217a:	481a      	ldr	r0, [pc, #104]	; (80021e4 <GPS_Compute+0x188>)
 800217c:	f000 f844 	bl	8002208 <GPS_bearing>
			GPS_distance_cm(&GPS_coord[LAT],&GPS_coord[LON],&GPS_WP[LAT],&GPS_WP[LON],&wp_distance);
 8002180:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <GPS_Compute+0x1a4>)
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <GPS_Compute+0x19c>)
 8002186:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <GPS_Compute+0x1a0>)
 8002188:	4915      	ldr	r1, [pc, #84]	; (80021e0 <GPS_Compute+0x184>)
 800218a:	4816      	ldr	r0, [pc, #88]	; (80021e4 <GPS_Compute+0x188>)
 800218c:	f000 f8a0 	bl	80022d0 <GPS_distance_cm>
			GPS_calc_location_error(&GPS_WP[LAT],&GPS_WP[LON],&GPS_coord[LAT],&GPS_coord[LON]);
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <GPS_Compute+0x184>)
 8002192:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <GPS_Compute+0x188>)
 8002194:	4918      	ldr	r1, [pc, #96]	; (80021f8 <GPS_Compute+0x19c>)
 8002196:	4819      	ldr	r0, [pc, #100]	; (80021fc <GPS_Compute+0x1a0>)
 8002198:	f000 f94c 	bl	8002434 <GPS_calc_location_error>

			switch(NAV_state)
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <GPS_Compute+0x1a8>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <GPS_Compute+0x158>
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d000      	beq.n	80021aa <GPS_Compute+0x14e>
				case NAV_STATE_HOLD_INFINIT:
					GPS_calc_poshold();
					break;

				default:
					break;
 80021a8:	e005      	b.n	80021b6 <GPS_Compute+0x15a>
					GPS_calc_poshold();
 80021aa:	f000 f96f 	bl	800248c <GPS_calc_poshold>
					break;
 80021ae:	e002      	b.n	80021b6 <GPS_Compute+0x15a>
			}
		}
 80021b0:	bf00      	nop
 80021b2:	e000      	b.n	80021b6 <GPS_Compute+0x15a>
          break;
 80021b4:	bf00      	nop
	}
	return 1;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000b78 	.word	0x20000b78
 80021c4:	20000678 	.word	0x20000678
 80021c8:	20000ed4 	.word	0x20000ed4
 80021cc:	200002b4 	.word	0x200002b4
 80021d0:	447a0000 	.word	0x447a0000
 80021d4:	20000284 	.word	0x20000284
 80021d8:	20000c54 	.word	0x20000c54
 80021dc:	20000c50 	.word	0x20000c50
 80021e0:	20000c60 	.word	0x20000c60
 80021e4:	20000c5c 	.word	0x20000c5c
 80021e8:	51eb851f 	.word	0x51eb851f
 80021ec:	20000c4c 	.word	0x20000c4c
 80021f0:	20000c58 	.word	0x20000c58
 80021f4:	20000c40 	.word	0x20000c40
 80021f8:	200002a0 	.word	0x200002a0
 80021fc:	2000029c 	.word	0x2000029c
 8002200:	20000c14 	.word	0x20000c14
 8002204:	20000280 	.word	0x20000280

08002208 <GPS_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision

void GPS_bearing(int32_t* lat1, int32_t* lon1, int32_t* lat2, int32_t* lon2, int32_t* bearing) {
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
	int32_t off_x = *lon2 - *lon1;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
	int32_t off_y = (*lat2 - *lat1) / GPS_scaleLonDown;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fd6f 	bl	8000d10 <__aeabi_i2f>
 8002232:	4602      	mov	r2, r0
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <GPS_bearing+0xc0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f7fe fe70 	bl	8000f20 <__aeabi_fdiv>
 8002240:	4603      	mov	r3, r0
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe ff94 	bl	8001170 <__aeabi_f2iz>
 8002248:	4603      	mov	r3, r0
 800224a:	613b      	str	r3, [r7, #16]
	*bearing = 9000 + atan2(-off_y, off_x) * 5729.57795f;      //Convert the output redians to 100xdeg
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	425b      	negs	r3, r3
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f8f1 	bl	8000438 <__aeabi_i2d>
 8002256:	4604      	mov	r4, r0
 8002258:	460d      	mov	r5, r1
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7fe f8ec 	bl	8000438 <__aeabi_i2d>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4620      	mov	r0, r4
 8002266:	4629      	mov	r1, r5
 8002268:	f013 fada 	bl	8015820 <atan2>
 800226c:	a312      	add	r3, pc, #72	; (adr r3, 80022b8 <GPS_bearing+0xb0>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	f7fe f94b 	bl	800050c <__aeabi_dmul>
 8002276:	4603      	mov	r3, r0
 8002278:	460c      	mov	r4, r1
 800227a:	4618      	mov	r0, r3
 800227c:	4621      	mov	r1, r4
 800227e:	a310      	add	r3, pc, #64	; (adr r3, 80022c0 <GPS_bearing+0xb8>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fd ff8c 	bl	80001a0 <__adddf3>
 8002288:	4603      	mov	r3, r0
 800228a:	460c      	mov	r4, r1
 800228c:	4618      	mov	r0, r3
 800228e:	4621      	mov	r1, r4
 8002290:	f7fe fbec 	bl	8000a6c <__aeabi_d2iz>
 8002294:	4602      	mov	r2, r0
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	601a      	str	r2, [r3, #0]
	if (*bearing < 0) *bearing += 36000;
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	da06      	bge.n	80022b0 <GPS_bearing+0xa8>
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80022aa:	33a0      	adds	r3, #160	; 0xa0
 80022ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bdb0      	pop	{r4, r5, r7, pc}
 80022b8:	00000000 	.word	0x00000000
 80022bc:	40b66194 	.word	0x40b66194
 80022c0:	00000000 	.word	0x00000000
 80022c4:	40c19400 	.word	0x40c19400
 80022c8:	2000028c 	.word	0x2000028c
 80022cc:	00000000 	.word	0x00000000

080022d0 <GPS_distance_cm>:

void GPS_distance_cm(int32_t* lat1, int32_t* lon1, int32_t* lat2, int32_t* lon2,uint32_t* dist) {
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
	float dLat = (float)(*lat2 - *lat1);                                    // difference of latitude in 1/10 000 000 degrees
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fd11 	bl	8000d10 <__aeabi_i2f>
 80022ee:	4603      	mov	r3, r0
 80022f0:	617b      	str	r3, [r7, #20]
	float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown; //x
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fd07 	bl	8000d10 <__aeabi_i2f>
 8002302:	4602      	mov	r2, r0
 8002304:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <GPS_distance_cm+0xa8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	4610      	mov	r0, r2
 800230c:	f7fe fd54 	bl	8000db8 <__aeabi_fmul>
 8002310:	4603      	mov	r3, r0
 8002312:	613b      	str	r3, [r7, #16]
	*dist = sqrt(sq(dLat) + sq(dLon)) * 1.11318845f;
 8002314:	6979      	ldr	r1, [r7, #20]
 8002316:	6978      	ldr	r0, [r7, #20]
 8002318:	f7fe fd4e 	bl	8000db8 <__aeabi_fmul>
 800231c:	4603      	mov	r3, r0
 800231e:	461c      	mov	r4, r3
 8002320:	6939      	ldr	r1, [r7, #16]
 8002322:	6938      	ldr	r0, [r7, #16]
 8002324:	f7fe fd48 	bl	8000db8 <__aeabi_fmul>
 8002328:	4603      	mov	r3, r0
 800232a:	4619      	mov	r1, r3
 800232c:	4620      	mov	r0, r4
 800232e:	f7fe fc3b 	bl	8000ba8 <__addsf3>
 8002332:	4603      	mov	r3, r0
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f891 	bl	800045c <__aeabi_f2d>
 800233a:	4603      	mov	r3, r0
 800233c:	460c      	mov	r4, r1
 800233e:	4618      	mov	r0, r3
 8002340:	4621      	mov	r1, r4
 8002342:	f013 fc27 	bl	8015b94 <sqrt>
 8002346:	a30a      	add	r3, pc, #40	; (adr r3, 8002370 <GPS_distance_cm+0xa0>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f8de 	bl	800050c <__aeabi_dmul>
 8002350:	4603      	mov	r3, r0
 8002352:	460c      	mov	r4, r1
 8002354:	4618      	mov	r0, r3
 8002356:	4621      	mov	r1, r4
 8002358:	f7fe fbb0 	bl	8000abc <__aeabi_d2uiz>
 800235c:	4602      	mov	r2, r0
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	601a      	str	r2, [r3, #0]
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd90      	pop	{r4, r7, pc}
 800236a:	bf00      	nop
 800236c:	f3af 8000 	nop.w
 8002370:	c0000000 	.word	0xc0000000
 8002374:	3ff1cf9e 	.word	0x3ff1cf9e
 8002378:	2000028c 	.word	0x2000028c

0800237c <GPS_calc_velocity>:
// Note: we use gps locations directly to calculate velocity instead of asking gps for velocity because
//       this is more accurate below 1.5m/s
// Note: even though the positions are projected using a lead filter, the velocities are calculated
//       from the unaltered gps locations.  We do not want noise from our lead filter affecting velocity
//*******************************************************************************************************
static void GPS_calc_velocity(void){
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
	static int16_t speed_old[2] = {0,0};
	static int32_t last[2] = {0,0};
	static uint8_t init = 0;

	if (init) {
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <GPS_calc_velocity+0xa0>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d039      	beq.n	80023fe <GPS_calc_velocity+0x82>
		float tmp = 1.0/dTnav;
 800238a:	4b25      	ldr	r3, [pc, #148]	; (8002420 <GPS_calc_velocity+0xa4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002394:	f7fe fdc4 	bl	8000f20 <__aeabi_fdiv>
 8002398:	4603      	mov	r3, r0
 800239a:	607b      	str	r3, [r7, #4]
		actual_speed[__X] = (float)(GPS_coord[LON] - last[LON]) *  GPS_scaleLonDown * tmp;
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <GPS_calc_velocity+0xa8>)
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <GPS_calc_velocity+0xac>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fcb2 	bl	8000d10 <__aeabi_i2f>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b1f      	ldr	r3, [pc, #124]	; (800242c <GPS_calc_velocity+0xb0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4610      	mov	r0, r2
 80023b6:	f7fe fcff 	bl	8000db8 <__aeabi_fmul>
 80023ba:	4603      	mov	r3, r0
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fcfa 	bl	8000db8 <__aeabi_fmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fed2 	bl	8001170 <__aeabi_f2iz>
 80023cc:	4603      	mov	r3, r0
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	4b17      	ldr	r3, [pc, #92]	; (8002430 <GPS_calc_velocity+0xb4>)
 80023d2:	805a      	strh	r2, [r3, #2]
		actual_speed[__Y] = (float)(GPS_coord[LAT]  - last[LAT])  * tmp;
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <GPS_calc_velocity+0xa8>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <GPS_calc_velocity+0xac>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fc96 	bl	8000d10 <__aeabi_i2f>
 80023e4:	4603      	mov	r3, r0
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fce5 	bl	8000db8 <__aeabi_fmul>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe febd 	bl	8001170 <__aeabi_f2iz>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b21a      	sxth	r2, r3
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <GPS_calc_velocity+0xb4>)
 80023fc:	801a      	strh	r2, [r3, #0]
		//
		//      speed_old[_X] = actual_speed[_X];
		//      speed_old[_Y] = actual_speed[_Y];
		//    }
	}
	init=1;
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <GPS_calc_velocity+0xa0>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]

	last[LON] = GPS_coord[LON];
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <GPS_calc_velocity+0xa8>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <GPS_calc_velocity+0xac>)
 800240a:	6053      	str	r3, [r2, #4]
	last[LAT] = GPS_coord[LAT];
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <GPS_calc_velocity+0xa8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a05      	ldr	r2, [pc, #20]	; (8002428 <GPS_calc_velocity+0xac>)
 8002412:	6013      	str	r3, [r2, #0]

	//  if (GPS_conf.lead_filter) {
	//    GPS_coord_lead[LON] = xLeadFilter.get_position(GPS_coord[LON], actual_speed[_X], GPS_LAG);
	//    GPS_coord_lead[LAT] = yLeadFilter.get_position(GPS_coord[LAT], actual_speed[_Y], GPS_LAG);
	//  }
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200002b8 	.word	0x200002b8
 8002420:	20000284 	.word	0x20000284
 8002424:	20000c5c 	.word	0x20000c5c
 8002428:	200002bc 	.word	0x200002bc
 800242c:	2000028c 	.word	0x2000028c
 8002430:	20000288 	.word	0x20000288

08002434 <GPS_calc_location_error>:
//  1000  = 11m    = 36 feet
//  1800  = 19.80m = 60 feet
//  3000  = 33m
// 10000  = 111m
//
static void GPS_calc_location_error( int32_t* target_lat, int32_t* target_lng, int32_t* gps_lat, int32_t* gps_lng ) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
	error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;  // X Error
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fc5f 	bl	8000d10 <__aeabi_i2f>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <GPS_calc_location_error+0x50>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f7fe fcac 	bl	8000db8 <__aeabi_fmul>
 8002460:	4603      	mov	r3, r0
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fe84 	bl	8001170 <__aeabi_f2iz>
 8002468:	4602      	mov	r2, r0
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <GPS_calc_location_error+0x54>)
 800246c:	605a      	str	r2, [r3, #4]
	error[LAT] = *target_lat - *gps_lat; // Y Error
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4a03      	ldr	r2, [pc, #12]	; (8002488 <GPS_calc_location_error+0x54>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	2000028c 	.word	0x2000028c
 8002488:	20000294 	.word	0x20000294

0800248c <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
// TODO: check that the poshold target speed constraint can be increased for snappier poshold lock
static void GPS_calc_poshold(void) {
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
	int32_t d;
	int32_t target_speed;
	uint8_t axis;

	for (axis=0;axis<2;axis++) {
 8002492:	2300      	movs	r3, #0
 8002494:	72fb      	strb	r3, [r7, #11]
 8002496:	e08c      	b.n	80025b2 <GPS_calc_poshold+0x126>
		target_speed = get_P(error[axis], &posholdPID_PARAM); // calculate desired speed from lat/lon error
 8002498:	7afb      	ldrb	r3, [r7, #11]
 800249a:	4a4a      	ldr	r2, [pc, #296]	; (80025c4 <GPS_calc_poshold+0x138>)
 800249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a0:	4949      	ldr	r1, [pc, #292]	; (80025c8 <GPS_calc_poshold+0x13c>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fc07 	bl	8001cb6 <get_P>
 80024a8:	6078      	str	r0, [r7, #4]
		target_speed = constrain(target_speed,-100,100);      // Constrain the target speed in poshold mode to 1m/s it helps avoid runaways..
 80024aa:	2264      	movs	r2, #100	; 0x64
 80024ac:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f003 f999 	bl	80057e8 <constrain>
 80024b6:	6078      	str	r0, [r7, #4]
		rate_error[axis] = target_speed - actual_speed[axis]; // calc the speed error
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	4943      	ldr	r1, [pc, #268]	; (80025cc <GPS_calc_poshold+0x140>)
 80024c0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	7afb      	ldrb	r3, [r7, #11]
 80024cc:	b211      	sxth	r1, r2
 80024ce:	4a40      	ldr	r2, [pc, #256]	; (80025d0 <GPS_calc_poshold+0x144>)
 80024d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		nav[axis]      =
				get_P(rate_error[axis],                                               &poshold_ratePID_PARAM)
 80024d4:	7afb      	ldrb	r3, [r7, #11]
 80024d6:	4a3e      	ldr	r2, [pc, #248]	; (80025d0 <GPS_calc_poshold+0x144>)
 80024d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024dc:	493d      	ldr	r1, [pc, #244]	; (80025d4 <GPS_calc_poshold+0x148>)
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fbe9 	bl	8001cb6 <get_P>
 80024e4:	4603      	mov	r3, r0
				+get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80024e6:	b29c      	uxth	r4, r3
 80024e8:	7afb      	ldrb	r3, [r7, #11]
 80024ea:	4a39      	ldr	r2, [pc, #228]	; (80025d0 <GPS_calc_poshold+0x144>)
 80024ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024f0:	4619      	mov	r1, r3
 80024f2:	7afb      	ldrb	r3, [r7, #11]
 80024f4:	4a33      	ldr	r2, [pc, #204]	; (80025c4 <GPS_calc_poshold+0x138>)
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	18c8      	adds	r0, r1, r3
 80024fc:	7afa      	ldrb	r2, [r7, #11]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4a34      	ldr	r2, [pc, #208]	; (80025d8 <GPS_calc_poshold+0x14c>)
 8002508:	441a      	add	r2, r3
 800250a:	4b32      	ldr	r3, [pc, #200]	; (80025d4 <GPS_calc_poshold+0x148>)
 800250c:	4933      	ldr	r1, [pc, #204]	; (80025dc <GPS_calc_poshold+0x150>)
 800250e:	f7ff fbea 	bl	8001ce6 <get_I>
 8002512:	4603      	mov	r3, r0
 8002514:	b29b      	uxth	r3, r3
 8002516:	4423      	add	r3, r4
 8002518:	b29a      	uxth	r2, r3
		nav[axis]      =
 800251a:	7afb      	ldrb	r3, [r7, #11]
				+get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 800251c:	b211      	sxth	r1, r2
		nav[axis]      =
 800251e:	4a30      	ldr	r2, [pc, #192]	; (80025e0 <GPS_calc_poshold+0x154>)
 8002520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		d = get_D(error[axis],                    &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <GPS_calc_poshold+0x138>)
 8002528:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800252c:	7afa      	ldrb	r2, [r7, #11]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <GPS_calc_poshold+0x14c>)
 8002538:	441a      	add	r2, r3
 800253a:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <GPS_calc_poshold+0x148>)
 800253c:	4927      	ldr	r1, [pc, #156]	; (80025dc <GPS_calc_poshold+0x150>)
 800253e:	f7ff fc21 	bl	8001d84 <get_D>
 8002542:	60f8      	str	r0, [r7, #12]

		d = constrain(d, -2000, 2000);
 8002544:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002548:	4926      	ldr	r1, [pc, #152]	; (80025e4 <GPS_calc_poshold+0x158>)
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f003 f94c 	bl	80057e8 <constrain>
 8002550:	60f8      	str	r0, [r7, #12]

		// get rid of noise
		if(abs(actual_speed[axis]) < 50) d = 0;
 8002552:	7afb      	ldrb	r3, [r7, #11]
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <GPS_calc_poshold+0x140>)
 8002556:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800255a:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800255e:	db07      	blt.n	8002570 <GPS_calc_poshold+0xe4>
 8002560:	7afb      	ldrb	r3, [r7, #11]
 8002562:	4a1a      	ldr	r2, [pc, #104]	; (80025cc <GPS_calc_poshold+0x140>)
 8002564:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002568:	2b31      	cmp	r3, #49	; 0x31
 800256a:	dc01      	bgt.n	8002570 <GPS_calc_poshold+0xe4>
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]

		nav[axis] +=d;
 8002570:	7afb      	ldrb	r3, [r7, #11]
 8002572:	4a1b      	ldr	r2, [pc, #108]	; (80025e0 <GPS_calc_poshold+0x154>)
 8002574:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	b29b      	uxth	r3, r3
 800257e:	4413      	add	r3, r2
 8002580:	b29a      	uxth	r2, r3
 8002582:	7afb      	ldrb	r3, [r7, #11]
 8002584:	b211      	sxth	r1, r2
 8002586:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <GPS_calc_poshold+0x154>)
 8002588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		nav[axis]  = constrain_int16(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 800258c:	7afb      	ldrb	r3, [r7, #11]
 800258e:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <GPS_calc_poshold+0x154>)
 8002590:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002594:	7afc      	ldrb	r4, [r7, #11]
 8002596:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800259a:	4913      	ldr	r1, [pc, #76]	; (80025e8 <GPS_calc_poshold+0x15c>)
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fcab 	bl	8001ef8 <constrain_int16>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <GPS_calc_poshold+0x154>)
 80025a8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (axis=0;axis<2;axis++) {
 80025ac:	7afb      	ldrb	r3, [r7, #11]
 80025ae:	3301      	adds	r3, #1
 80025b0:	72fb      	strb	r3, [r7, #11]
 80025b2:	7afb      	ldrb	r3, [r7, #11]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	f67f af6f 	bls.w	8002498 <GPS_calc_poshold+0xc>
		//navPID[axis].integrator = poshold_ratePID[axis].integrator;
	}
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd90      	pop	{r4, r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000294 	.word	0x20000294
 80025c8:	20000c64 	.word	0x20000c64
 80025cc:	20000288 	.word	0x20000288
 80025d0:	20000290 	.word	0x20000290
 80025d4:	20000b68 	.word	0x20000b68
 80025d8:	20000b40 	.word	0x20000b40
 80025dc:	20000284 	.word	0x20000284
 80025e0:	20000b30 	.word	0x20000b30
 80025e4:	fffff830 	.word	0xfffff830
 80025e8:	fffff448 	.word	0xfffff448

080025ec <GPS_calc_longitude_scaling>:

////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
void GPS_calc_longitude_scaling(int32_t lat) {
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	GPS_scaleLonDown = cos(lat * 1.0e-7f * 0.01745329251f);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7fe fb8b 	bl	8000d10 <__aeabi_i2f>
 80025fa:	4603      	mov	r3, r0
 80025fc:	490f      	ldr	r1, [pc, #60]	; (800263c <GPS_calc_longitude_scaling+0x50>)
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fbda 	bl	8000db8 <__aeabi_fmul>
 8002604:	4603      	mov	r3, r0
 8002606:	490e      	ldr	r1, [pc, #56]	; (8002640 <GPS_calc_longitude_scaling+0x54>)
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe fbd5 	bl	8000db8 <__aeabi_fmul>
 800260e:	4603      	mov	r3, r0
 8002610:	4618      	mov	r0, r3
 8002612:	f7fd ff23 	bl	800045c <__aeabi_f2d>
 8002616:	4603      	mov	r3, r0
 8002618:	460c      	mov	r4, r1
 800261a:	4618      	mov	r0, r3
 800261c:	4621      	mov	r1, r4
 800261e:	f012 ffeb 	bl	80155f8 <cos>
 8002622:	4603      	mov	r3, r0
 8002624:	460c      	mov	r4, r1
 8002626:	4618      	mov	r0, r3
 8002628:	4621      	mov	r1, r4
 800262a:	f7fe fa67 	bl	8000afc <__aeabi_d2f>
 800262e:	4602      	mov	r2, r0
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <GPS_calc_longitude_scaling+0x58>)
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bd90      	pop	{r4, r7, pc}
 800263c:	33d6bf95 	.word	0x33d6bf95
 8002640:	3c8efa35 	.word	0x3c8efa35
 8002644:	2000028c 	.word	0x2000028c

08002648 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t* lat_to, int32_t* lon_to, int32_t* lat_from, int32_t* lon_from) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
	GPS_WP[LAT] = *lat_to;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <GPS_set_next_wp+0x7c>)
 800265c:	6013      	str	r3, [r2, #0]
	GPS_WP[LON] = *lon_to;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a18      	ldr	r2, [pc, #96]	; (80026c4 <GPS_set_next_wp+0x7c>)
 8002664:	6053      	str	r3, [r2, #4]

	GPS_FROM[LAT] = *lat_from;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <GPS_set_next_wp+0x80>)
 800266c:	6013      	str	r3, [r2, #0]
	GPS_FROM[LON] = *lon_from;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <GPS_set_next_wp+0x80>)
 8002674:	6053      	str	r3, [r2, #4]

	GPS_calc_longitude_scaling(*lat_to);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ffb6 	bl	80025ec <GPS_calc_longitude_scaling>

	GPS_bearing(&GPS_FROM[LAT],&GPS_FROM[LON],&GPS_WP[LAT],&GPS_WP[LON],&target_bearing);
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <GPS_set_next_wp+0x84>)
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <GPS_set_next_wp+0x88>)
 8002686:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <GPS_set_next_wp+0x7c>)
 8002688:	4912      	ldr	r1, [pc, #72]	; (80026d4 <GPS_set_next_wp+0x8c>)
 800268a:	480f      	ldr	r0, [pc, #60]	; (80026c8 <GPS_set_next_wp+0x80>)
 800268c:	f7ff fdbc 	bl	8002208 <GPS_bearing>
	GPS_distance_cm(&GPS_FROM[LAT],&GPS_FROM[LON],&GPS_WP[LAT],&GPS_WP[LON],&wp_distance);
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <GPS_set_next_wp+0x90>)
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <GPS_set_next_wp+0x88>)
 8002696:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <GPS_set_next_wp+0x7c>)
 8002698:	490e      	ldr	r1, [pc, #56]	; (80026d4 <GPS_set_next_wp+0x8c>)
 800269a:	480b      	ldr	r0, [pc, #44]	; (80026c8 <GPS_set_next_wp+0x80>)
 800269c:	f7ff fe18 	bl	80022d0 <GPS_distance_cm>
	GPS_calc_location_error(&GPS_WP[LAT],&GPS_WP[LON],&GPS_FROM[LAT],&GPS_FROM[LON]);
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <GPS_set_next_wp+0x8c>)
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <GPS_set_next_wp+0x80>)
 80026a4:	490a      	ldr	r1, [pc, #40]	; (80026d0 <GPS_set_next_wp+0x88>)
 80026a6:	4807      	ldr	r0, [pc, #28]	; (80026c4 <GPS_set_next_wp+0x7c>)
 80026a8:	f7ff fec4 	bl	8002434 <GPS_calc_location_error>
	waypoint_speed_gov = 100;
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <GPS_set_next_wp+0x94>)
 80026ae:	2264      	movs	r2, #100	; 0x64
 80026b0:	801a      	strh	r2, [r3, #0]
	original_target_bearing = target_bearing;
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <GPS_set_next_wp+0x84>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <GPS_set_next_wp+0x98>)
 80026b8:	6013      	str	r3, [r2, #0]
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000029c 	.word	0x2000029c
 80026c8:	200002a4 	.word	0x200002a4
 80026cc:	20000c40 	.word	0x20000c40
 80026d0:	200002a0 	.word	0x200002a0
 80026d4:	200002a8 	.word	0x200002a8
 80026d8:	20000c14 	.word	0x20000c14
 80026dc:	200002b0 	.word	0x200002b0
 80026e0:	200002ac 	.word	0x200002ac

080026e4 <GPS_reset_home_position>:

void GPS_reset_home_position(void) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	if (GPS.fixquality && GPS.satellites >= 5) {
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <GPS_reset_home_position+0x48>)
 80026ea:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01a      	beq.n	8002728 <GPS_reset_home_position+0x44>
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <GPS_reset_home_position+0x48>)
 80026f4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d915      	bls.n	8002728 <GPS_reset_home_position+0x44>
		GPS_home[LAT] = GPS_coord[LAT];
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <GPS_reset_home_position+0x4c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <GPS_reset_home_position+0x50>)
 8002702:	6013      	str	r3, [r2, #0]
		GPS_home[LON] = GPS_coord[LON];
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <GPS_reset_home_position+0x4c>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <GPS_reset_home_position+0x50>)
 800270a:	6053      	str	r3, [r2, #4]
		GPS_calc_longitude_scaling(GPS_coord[LAT]);    //need an initial value for distance and bearing calc
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <GPS_reset_home_position+0x4c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff6b 	bl	80025ec <GPS_calc_longitude_scaling>
		nav_takeoff_bearing = imu.actual_compass_heading;             //save takeoff heading
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <GPS_reset_home_position+0x54>)
 8002718:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800271c:	b21a      	sxth	r2, r3
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <GPS_reset_home_position+0x58>)
 8002720:	801a      	strh	r2, [r3, #0]
		//TODO: Set ground altitude
		f.GPS_FIX_HOME = 1;
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <GPS_reset_home_position+0x5c>)
 8002724:	2201      	movs	r2, #1
 8002726:	745a      	strb	r2, [r3, #17]
	}
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000b78 	.word	0x20000b78
 8002730:	20000c5c 	.word	0x20000c5c
 8002734:	20000c50 	.word	0x20000c50
 8002738:	20000e20 	.word	0x20000e20
 800273c:	200002b2 	.word	0x200002b2
 8002740:	20000ed4 	.word	0x20000ed4

08002744 <GPS_reset_nav>:


//reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  uint8_t i;

  for(i=0;i<2;i++) {
 800274a:	2300      	movs	r3, #0
 800274c:	71fb      	strb	r3, [r7, #7]
 800274e:	e02e      	b.n	80027ae <GPS_reset_nav+0x6a>
    nav[i] = 0;
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <GPS_reset_nav+0x78>)
 8002754:	2100      	movs	r1, #0
 8002756:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    reset_PID(&posholdPID[i]);
 800275a:	79fa      	ldrb	r2, [r7, #7]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <GPS_reset_nav+0x7c>)
 8002766:	4413      	add	r3, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fb67 	bl	8001e3c <reset_PID>
    reset_PID(&poshold_ratePID[i]);
 800276e:	79fa      	ldrb	r2, [r7, #7]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <GPS_reset_nav+0x80>)
 800277a:	4413      	add	r3, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fb5d 	bl	8001e3c <reset_PID>
    reset_PID(&navPID[i]);
 8002782:	79fa      	ldrb	r2, [r7, #7]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <GPS_reset_nav+0x84>)
 800278e:	4413      	add	r3, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fb53 	bl	8001e3c <reset_PID>
    NAV_state = NAV_STATE_NONE;
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <GPS_reset_nav+0x88>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
    //invalidate JUMP counter
//    jump_times = -10;
    //reset next step counter
//    next_step = 1;
    //Clear poi
    GPS_poi[LAT] = 0; GPS_poi[LON] = 0;
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <GPS_reset_nav+0x8c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <GPS_reset_nav+0x8c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
  for(i=0;i<2;i++) {
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	3301      	adds	r3, #1
 80027ac:	71fb      	strb	r3, [r7, #7]
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d9cd      	bls.n	8002750 <GPS_reset_nav+0xc>
//    f.GPS_head_set = 0;
  }
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000b30 	.word	0x20000b30
 80027c0:	20000c18 	.word	0x20000c18
 80027c4:	20000b40 	.word	0x20000b40
 80027c8:	20000af0 	.word	0x20000af0
 80027cc:	20000280 	.word	0x20000280
 80027d0:	20000c78 	.word	0x20000c78

080027d4 <GPS_newFrame>:

#define FRAME_GGA  1
#define FRAME_RMC  2

bool GPS_newFrame(uint8_t c)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
	uint32_t time = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
	float timef = 0;
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
	uint8_t frameOK = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	75fb      	strb	r3, [r7, #23]
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[15];
	static uint8_t checksum_param, frame = 0;

	if (c == '$')
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2b24      	cmp	r3, #36	; 0x24
 80027f0:	d109      	bne.n	8002806 <GPS_newFrame+0x32>
	{
		param = 0; offset = 0; parity = 0;
 80027f2:	4ba3      	ldr	r3, [pc, #652]	; (8002a80 <GPS_newFrame+0x2ac>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	4ba2      	ldr	r3, [pc, #648]	; (8002a84 <GPS_newFrame+0x2b0>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	4ba2      	ldr	r3, [pc, #648]	; (8002a88 <GPS_newFrame+0x2b4>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e1bb      	b.n	8002b7e <GPS_newFrame+0x3aa>
	} else if (c == ',' || c == '*')
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	2b2c      	cmp	r3, #44	; 0x2c
 800280a:	d003      	beq.n	8002814 <GPS_newFrame+0x40>
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	2b2a      	cmp	r3, #42	; 0x2a
 8002810:	f040 8173 	bne.w	8002afa <GPS_newFrame+0x326>
	{
		string[offset] = 0;
 8002814:	4b9b      	ldr	r3, [pc, #620]	; (8002a84 <GPS_newFrame+0x2b0>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b9c      	ldr	r3, [pc, #624]	; (8002a8c <GPS_newFrame+0x2b8>)
 800281c:	2100      	movs	r1, #0
 800281e:	5499      	strb	r1, [r3, r2]
		if (param == 0)
 8002820:	4b97      	ldr	r3, [pc, #604]	; (8002a80 <GPS_newFrame+0x2ac>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d136      	bne.n	8002896 <GPS_newFrame+0xc2>
		{ //frame identification
			frame = 0;
 8002828:	4b99      	ldr	r3, [pc, #612]	; (8002a90 <GPS_newFrame+0x2bc>)
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
			if (string[0] == 'G' && string[1] == 'N' && string[2] == 'G' && string[3] == 'G' && string[4] == 'A') frame = FRAME_GGA;
 800282e:	4b97      	ldr	r3, [pc, #604]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b47      	cmp	r3, #71	; 0x47
 8002834:	d112      	bne.n	800285c <GPS_newFrame+0x88>
 8002836:	4b95      	ldr	r3, [pc, #596]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	2b4e      	cmp	r3, #78	; 0x4e
 800283c:	d10e      	bne.n	800285c <GPS_newFrame+0x88>
 800283e:	4b93      	ldr	r3, [pc, #588]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002840:	789b      	ldrb	r3, [r3, #2]
 8002842:	2b47      	cmp	r3, #71	; 0x47
 8002844:	d10a      	bne.n	800285c <GPS_newFrame+0x88>
 8002846:	4b91      	ldr	r3, [pc, #580]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002848:	78db      	ldrb	r3, [r3, #3]
 800284a:	2b47      	cmp	r3, #71	; 0x47
 800284c:	d106      	bne.n	800285c <GPS_newFrame+0x88>
 800284e:	4b8f      	ldr	r3, [pc, #572]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002850:	791b      	ldrb	r3, [r3, #4]
 8002852:	2b41      	cmp	r3, #65	; 0x41
 8002854:	d102      	bne.n	800285c <GPS_newFrame+0x88>
 8002856:	4b8e      	ldr	r3, [pc, #568]	; (8002a90 <GPS_newFrame+0x2bc>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
			if (string[0] == 'G' && string[1] == 'N' && string[2] == 'R' && string[3] == 'M' && string[4] == 'C') frame = FRAME_RMC;
 800285c:	4b8b      	ldr	r3, [pc, #556]	; (8002a8c <GPS_newFrame+0x2b8>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b47      	cmp	r3, #71	; 0x47
 8002862:	f040 8132 	bne.w	8002aca <GPS_newFrame+0x2f6>
 8002866:	4b89      	ldr	r3, [pc, #548]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	2b4e      	cmp	r3, #78	; 0x4e
 800286c:	f040 812d 	bne.w	8002aca <GPS_newFrame+0x2f6>
 8002870:	4b86      	ldr	r3, [pc, #536]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002872:	789b      	ldrb	r3, [r3, #2]
 8002874:	2b52      	cmp	r3, #82	; 0x52
 8002876:	f040 8128 	bne.w	8002aca <GPS_newFrame+0x2f6>
 800287a:	4b84      	ldr	r3, [pc, #528]	; (8002a8c <GPS_newFrame+0x2b8>)
 800287c:	78db      	ldrb	r3, [r3, #3]
 800287e:	2b4d      	cmp	r3, #77	; 0x4d
 8002880:	f040 8123 	bne.w	8002aca <GPS_newFrame+0x2f6>
 8002884:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002886:	791b      	ldrb	r3, [r3, #4]
 8002888:	2b43      	cmp	r3, #67	; 0x43
 800288a:	f040 811e 	bne.w	8002aca <GPS_newFrame+0x2f6>
 800288e:	4b80      	ldr	r3, [pc, #512]	; (8002a90 <GPS_newFrame+0x2bc>)
 8002890:	2202      	movs	r2, #2
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e119      	b.n	8002aca <GPS_newFrame+0x2f6>
		} else if (frame == FRAME_GGA)
 8002896:	4b7e      	ldr	r3, [pc, #504]	; (8002a90 <GPS_newFrame+0x2bc>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	f040 80d4 	bne.w	8002a48 <GPS_newFrame+0x274>
		{
			ledToggle(RGB_BLUE);
 80028a0:	2004      	movs	r0, #4
 80028a2:	f008 ffa7 	bl	800b7f4 <ledToggle>
			if (param == 1){
 80028a6:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <GPS_newFrame+0x2ac>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d152      	bne.n	8002954 <GPS_newFrame+0x180>
				timef = atof(string);
 80028ae:	4877      	ldr	r0, [pc, #476]	; (8002a8c <GPS_newFrame+0x2b8>)
 80028b0:	f00e fdc1 	bl	8011436 <atof>
 80028b4:	4603      	mov	r3, r0
 80028b6:	460c      	mov	r4, r1
 80028b8:	4618      	mov	r0, r3
 80028ba:	4621      	mov	r1, r4
 80028bc:	f7fe f91e 	bl	8000afc <__aeabi_d2f>
 80028c0:	4603      	mov	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]
				time = (uint32_t) timef;
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7fe fc79 	bl	80011bc <__aeabi_f2uiz>
 80028ca:	4603      	mov	r3, r0
 80028cc:	613b      	str	r3, [r7, #16]
				GPS.hour = (time / 10000)+TD;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4a70      	ldr	r2, [pc, #448]	; (8002a94 <GPS_newFrame+0x2c0>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0b5b      	lsrs	r3, r3, #13
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3309      	adds	r3, #9
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b6e      	ldr	r3, [pc, #440]	; (8002a98 <GPS_newFrame+0x2c4>)
 80028e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
				GPS.minute = (time % 10000) / 100;
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4b6b      	ldr	r3, [pc, #428]	; (8002a94 <GPS_newFrame+0x2c0>)
 80028e8:	fba3 1302 	umull	r1, r3, r3, r2
 80028ec:	0b5b      	lsrs	r3, r3, #13
 80028ee:	f242 7110 	movw	r1, #10000	; 0x2710
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	4a68      	ldr	r2, [pc, #416]	; (8002a9c <GPS_newFrame+0x2c8>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <GPS_newFrame+0x2c4>)
 8002904:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				GPS.seconds = (time % 100);
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <GPS_newFrame+0x2c8>)
 800290c:	fba3 1302 	umull	r1, r3, r3, r2
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	2164      	movs	r1, #100	; 0x64
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <GPS_newFrame+0x2c4>)
 800291e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
				GPS.milliseconds = fmod(timef, 1.0) * 1000;
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7fd fd9a 	bl	800045c <__aeabi_f2d>
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	4b5c      	ldr	r3, [pc, #368]	; (8002aa0 <GPS_newFrame+0x2cc>)
 800292e:	f012 ff79 	bl	8015824 <fmod>
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <GPS_newFrame+0x2d0>)
 8002938:	f7fd fde8 	bl	800050c <__aeabi_dmul>
 800293c:	4603      	mov	r3, r0
 800293e:	460c      	mov	r4, r1
 8002940:	4618      	mov	r0, r3
 8002942:	4621      	mov	r1, r4
 8002944:	f7fe f8ba 	bl	8000abc <__aeabi_d2uiz>
 8002948:	4603      	mov	r3, r0
 800294a:	b29a      	uxth	r2, r3
 800294c:	4b52      	ldr	r3, [pc, #328]	; (8002a98 <GPS_newFrame+0x2c4>)
 800294e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8002952:	e0ba      	b.n	8002aca <GPS_newFrame+0x2f6>
			}
			else if (param == 2)                     {GPS.GPS_coord[LAT] = GPS_coord_to_degrees(string);GPS_coord[LAT]=GPS.GPS_coord[LAT];}
 8002954:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <GPS_newFrame+0x2ac>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d10d      	bne.n	8002978 <GPS_newFrame+0x1a4>
 800295c:	484b      	ldr	r0, [pc, #300]	; (8002a8c <GPS_newFrame+0x2b8>)
 800295e:	f000 f92d 	bl	8002bbc <GPS_coord_to_degrees>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <GPS_newFrame+0x2c4>)
 8002968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800296c:	4b4a      	ldr	r3, [pc, #296]	; (8002a98 <GPS_newFrame+0x2c4>)
 800296e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002972:	4a4d      	ldr	r2, [pc, #308]	; (8002aa8 <GPS_newFrame+0x2d4>)
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e0a8      	b.n	8002aca <GPS_newFrame+0x2f6>
			else if (param == 3 && string[0] == 'S') {GPS.GPS_coord[LAT] = -GPS.GPS_coord[LAT]; GPS_coord[LAT]=GPS.GPS_coord[LAT];}
 8002978:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <GPS_newFrame+0x2ac>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d110      	bne.n	80029a2 <GPS_newFrame+0x1ce>
 8002980:	4b42      	ldr	r3, [pc, #264]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b53      	cmp	r3, #83	; 0x53
 8002986:	d10c      	bne.n	80029a2 <GPS_newFrame+0x1ce>
 8002988:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <GPS_newFrame+0x2c4>)
 800298a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800298e:	425b      	negs	r3, r3
 8002990:	4a41      	ldr	r2, [pc, #260]	; (8002a98 <GPS_newFrame+0x2c4>)
 8002992:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002996:	4b40      	ldr	r3, [pc, #256]	; (8002a98 <GPS_newFrame+0x2c4>)
 8002998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800299c:	4a42      	ldr	r2, [pc, #264]	; (8002aa8 <GPS_newFrame+0x2d4>)
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e093      	b.n	8002aca <GPS_newFrame+0x2f6>
			else if (param == 4)                     {GPS.GPS_coord[LON] = GPS_coord_to_degrees(string); GPS_coord[LON]=GPS.GPS_coord[LON];}
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <GPS_newFrame+0x2ac>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d10d      	bne.n	80029c6 <GPS_newFrame+0x1f2>
 80029aa:	4838      	ldr	r0, [pc, #224]	; (8002a8c <GPS_newFrame+0x2b8>)
 80029ac:	f000 f906 	bl	8002bbc <GPS_coord_to_degrees>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <GPS_newFrame+0x2c4>)
 80029b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <GPS_newFrame+0x2c4>)
 80029bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c0:	4a39      	ldr	r2, [pc, #228]	; (8002aa8 <GPS_newFrame+0x2d4>)
 80029c2:	6053      	str	r3, [r2, #4]
 80029c4:	e081      	b.n	8002aca <GPS_newFrame+0x2f6>
			else if (param == 5 && string[0] == 'W') {GPS.GPS_coord[LON] = -GPS.GPS_coord[LON]; GPS_coord[LON]=GPS.GPS_coord[LON];}
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <GPS_newFrame+0x2ac>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d110      	bne.n	80029f0 <GPS_newFrame+0x21c>
 80029ce:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <GPS_newFrame+0x2b8>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b57      	cmp	r3, #87	; 0x57
 80029d4:	d10c      	bne.n	80029f0 <GPS_newFrame+0x21c>
 80029d6:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <GPS_newFrame+0x2c4>)
 80029d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029dc:	425b      	negs	r3, r3
 80029de:	4a2e      	ldr	r2, [pc, #184]	; (8002a98 <GPS_newFrame+0x2c4>)
 80029e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80029e4:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <GPS_newFrame+0x2c4>)
 80029e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ea:	4a2f      	ldr	r2, [pc, #188]	; (8002aa8 <GPS_newFrame+0x2d4>)
 80029ec:	6053      	str	r3, [r2, #4]
 80029ee:	e06c      	b.n	8002aca <GPS_newFrame+0x2f6>
			else if (param == 6)                     {GPS.fixquality = (string[0]  > '0');}
 80029f0:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <GPS_newFrame+0x2ac>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d10b      	bne.n	8002a10 <GPS_newFrame+0x23c>
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <GPS_newFrame+0x2b8>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b30      	cmp	r3, #48	; 0x30
 80029fe:	bf8c      	ite	hi
 8002a00:	2301      	movhi	r3, #1
 8002a02:	2300      	movls	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <GPS_newFrame+0x2c4>)
 8002a0a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8002a0e:	e05c      	b.n	8002aca <GPS_newFrame+0x2f6>
			else if (param == 7)                     {GPS.satellites = grab_fields(string,0);}
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <GPS_newFrame+0x2ac>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b07      	cmp	r3, #7
 8002a16:	d109      	bne.n	8002a2c <GPS_newFrame+0x258>
 8002a18:	2100      	movs	r1, #0
 8002a1a:	481c      	ldr	r0, [pc, #112]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002a1c:	f000 f962 	bl	8002ce4 <grab_fields>
 8002a20:	4603      	mov	r3, r0
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <GPS_newFrame+0x2c4>)
 8002a26:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8002a2a:	e04e      	b.n	8002aca <GPS_newFrame+0x2f6>
			else if (param == 9)                     {GPS.altitude = grab_fields(string,0);}  // altitude in meters added by Mis
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <GPS_newFrame+0x2ac>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b09      	cmp	r3, #9
 8002a32:	d14a      	bne.n	8002aca <GPS_newFrame+0x2f6>
 8002a34:	2100      	movs	r1, #0
 8002a36:	4815      	ldr	r0, [pc, #84]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002a38:	f000 f954 	bl	8002ce4 <grab_fields>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <GPS_newFrame+0x2c4>)
 8002a42:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8002a46:	e040      	b.n	8002aca <GPS_newFrame+0x2f6>
		} else if (frame == FRAME_RMC)
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <GPS_newFrame+0x2bc>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d13c      	bne.n	8002aca <GPS_newFrame+0x2f6>
		{
			if      (param == 7)                     {GPS.speed = ((uint32_t)grab_fields(string,1)*5144L)/1000L;}  //gps speed in cm/s will be used for navigation
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <GPS_newFrame+0x2ac>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b07      	cmp	r3, #7
 8002a56:	d12b      	bne.n	8002ab0 <GPS_newFrame+0x2dc>
 8002a58:	2101      	movs	r1, #1
 8002a5a:	480c      	ldr	r0, [pc, #48]	; (8002a8c <GPS_newFrame+0x2b8>)
 8002a5c:	f000 f942 	bl	8002ce4 <grab_fields>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	f241 4318 	movw	r3, #5144	; 0x1418
 8002a68:	fb03 f302 	mul.w	r3, r3, r2
 8002a6c:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <GPS_newFrame+0x2d8>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <GPS_newFrame+0x2c4>)
 8002a78:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8002a7c:	e025      	b.n	8002aca <GPS_newFrame+0x2f6>
 8002a7e:	bf00      	nop
 8002a80:	200002c4 	.word	0x200002c4
 8002a84:	200002c5 	.word	0x200002c5
 8002a88:	200002c6 	.word	0x200002c6
 8002a8c:	200002c8 	.word	0x200002c8
 8002a90:	200002d7 	.word	0x200002d7
 8002a94:	d1b71759 	.word	0xd1b71759
 8002a98:	20000b78 	.word	0x20000b78
 8002a9c:	51eb851f 	.word	0x51eb851f
 8002aa0:	3ff00000 	.word	0x3ff00000
 8002aa4:	408f4000 	.word	0x408f4000
 8002aa8:	20000c5c 	.word	0x20000c5c
 8002aac:	10624dd3 	.word	0x10624dd3
			else if (param == 8)                     {GPS.GPS_ground_course = grab_fields(string,1); }             //ground course deg*10
 8002ab0:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <GPS_newFrame+0x3cc>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d108      	bne.n	8002aca <GPS_newFrame+0x2f6>
 8002ab8:	2101      	movs	r1, #1
 8002aba:	483a      	ldr	r0, [pc, #232]	; (8002ba4 <GPS_newFrame+0x3d0>)
 8002abc:	f000 f912 	bl	8002ce4 <grab_fields>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <GPS_newFrame+0x3d4>)
 8002ac6:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		}
		param++; offset = 0;
 8002aca:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <GPS_newFrame+0x3cc>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4b33      	ldr	r3, [pc, #204]	; (8002ba0 <GPS_newFrame+0x3cc>)
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	4b35      	ldr	r3, [pc, #212]	; (8002bac <GPS_newFrame+0x3d8>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param=1;
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae0:	d103      	bne.n	8002aea <GPS_newFrame+0x316>
 8002ae2:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <GPS_newFrame+0x3dc>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e049      	b.n	8002b7e <GPS_newFrame+0x3aa>
		else parity ^= c;
 8002aea:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <GPS_newFrame+0x3e0>)
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	4053      	eors	r3, r2
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <GPS_newFrame+0x3e0>)
 8002af6:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param=1;
 8002af8:	e041      	b.n	8002b7e <GPS_newFrame+0x3aa>
	} else if (c == '\r' || c == '\n')
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	2b0d      	cmp	r3, #13
 8002afe:	d002      	beq.n	8002b06 <GPS_newFrame+0x332>
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	2b0a      	cmp	r3, #10
 8002b04:	d122      	bne.n	8002b4c <GPS_newFrame+0x378>
	{
		if (checksum_param) { //parity checksum
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <GPS_newFrame+0x3dc>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01a      	beq.n	8002b44 <GPS_newFrame+0x370>
			uint8_t checksum = hex_c(string[0]);
 8002b0e:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <GPS_newFrame+0x3d0>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f932 	bl	8002d7c <hex_c>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	72fb      	strb	r3, [r7, #11]
			checksum <<= 4;
 8002b1c:	7afb      	ldrb	r3, [r7, #11]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	72fb      	strb	r3, [r7, #11]
			checksum += hex_c(string[1]);
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <GPS_newFrame+0x3d0>)
 8002b24:	785b      	ldrb	r3, [r3, #1]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f928 	bl	8002d7c <hex_c>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	7afb      	ldrb	r3, [r7, #11]
 8002b32:	4413      	add	r3, r2
 8002b34:	72fb      	strb	r3, [r7, #11]
			if (checksum == parity) frameOK = 1;
 8002b36:	4b1f      	ldr	r3, [pc, #124]	; (8002bb4 <GPS_newFrame+0x3e0>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	7afa      	ldrb	r2, [r7, #11]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d101      	bne.n	8002b44 <GPS_newFrame+0x370>
 8002b40:	2301      	movs	r3, #1
 8002b42:	75fb      	strb	r3, [r7, #23]
		}
		checksum_param=0;
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <GPS_newFrame+0x3dc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e018      	b.n	8002b7e <GPS_newFrame+0x3aa>
	} else
	{
		if (offset < 15) string[offset++] = c;
 8002b4c:	4b17      	ldr	r3, [pc, #92]	; (8002bac <GPS_newFrame+0x3d8>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b0e      	cmp	r3, #14
 8002b52:	d809      	bhi.n	8002b68 <GPS_newFrame+0x394>
 8002b54:	4b15      	ldr	r3, [pc, #84]	; (8002bac <GPS_newFrame+0x3d8>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	b2d1      	uxtb	r1, r2
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <GPS_newFrame+0x3d8>)
 8002b5e:	7011      	strb	r1, [r2, #0]
 8002b60:	4619      	mov	r1, r3
 8002b62:	4a10      	ldr	r2, [pc, #64]	; (8002ba4 <GPS_newFrame+0x3d0>)
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <GPS_newFrame+0x3dc>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <GPS_newFrame+0x3aa>
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <GPS_newFrame+0x3e0>)
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	4053      	eors	r3, r2
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <GPS_newFrame+0x3e0>)
 8002b7c:	701a      	strb	r2, [r3, #0]
	}
	return frameOK && (frame==FRAME_GGA);
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <GPS_newFrame+0x3bc>
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <GPS_newFrame+0x3e4>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <GPS_newFrame+0x3bc>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <GPS_newFrame+0x3be>
 8002b90:	2300      	movs	r3, #0
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	b2db      	uxtb	r3, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd90      	pop	{r4, r7, pc}
 8002ba0:	200002c4 	.word	0x200002c4
 8002ba4:	200002c8 	.word	0x200002c8
 8002ba8:	20000b78 	.word	0x20000b78
 8002bac:	200002c5 	.word	0x200002c5
 8002bb0:	200002d8 	.word	0x200002d8
 8002bb4:	200002c6 	.word	0x200002c6
 8002bb8:	200002d7 	.word	0x200002d7

08002bbc <GPS_coord_to_degrees>:
	return 0;
}

#define DIGIT_TO_VAL(_x)        (_x - '0')
uint32_t GPS_coord_to_degrees(char* s)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	char *p, *q;
	uint8_t deg = 0, min = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	75fb      	strb	r3, [r7, #23]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit(*p); p++) ;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	e002      	b.n	8002bdc <GPS_coord_to_degrees+0x20>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	f00e fc5c 	bl	8011498 <__locale_ctype_ptr>
 8002be0:	4602      	mov	r2, r0
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	3301      	adds	r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <GPS_coord_to_degrees+0x1a>
	q = s;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2)
 8002bf8:	e011      	b.n	8002c1e <GPS_coord_to_degrees+0x62>
	{
		if (deg)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <GPS_coord_to_degrees+0x50>
			deg *= 10;
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	461a      	mov	r2, r3
 8002c04:	0092      	lsls	r2, r2, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	61ba      	str	r2, [r7, #24]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	3b30      	subs	r3, #48	; 0x30
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2)
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	dce8      	bgt.n	8002bfa <GPS_coord_to_degrees+0x3e>
	}
	// convert minutes
	while (p > q)
 8002c28:	e011      	b.n	8002c4e <GPS_coord_to_degrees+0x92>
	{
		if (min)
 8002c2a:	7dbb      	ldrb	r3, [r7, #22]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <GPS_coord_to_degrees+0x80>
			min *= 10;
 8002c30:	7dbb      	ldrb	r3, [r7, #22]
 8002c32:	461a      	mov	r2, r3
 8002c34:	0092      	lsls	r2, r2, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	61ba      	str	r2, [r7, #24]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	3b30      	subs	r3, #48	; 0x30
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	7dbb      	ldrb	r3, [r7, #22]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	75bb      	strb	r3, [r7, #22]
	while (p > q)
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d8e9      	bhi.n	8002c2a <GPS_coord_to_degrees+0x6e>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.')
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c5c:	d126      	bne.n	8002cac <GPS_coord_to_degrees+0xf0>
	{
		q = p + 1;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	e01d      	b.n	8002ca6 <GPS_coord_to_degrees+0xea>
		{
			frac_min *= 10;
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	613b      	str	r3, [r7, #16]
			if (isdigit(*q))
 8002c76:	f00e fc0f 	bl	8011498 <__locale_ctype_ptr>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <GPS_coord_to_degrees+0xe4>
				frac_min += *q++ - '0';
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	61ba      	str	r2, [r7, #24]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	3b30      	subs	r3, #48	; 0x30
 8002c98:	461a      	mov	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d9de      	bls.n	8002c6a <GPS_coord_to_degrees+0xae>
		}
	}
	return deg * 10000000UL + (min * 1000000UL + frac_min*100UL) / 6;
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <GPS_coord_to_degrees+0x11c>)
 8002cb0:	fb02 f203 	mul.w	r2, r2, r3
 8002cb4:	7dbb      	ldrb	r3, [r7, #22]
 8002cb6:	4909      	ldr	r1, [pc, #36]	; (8002cdc <GPS_coord_to_degrees+0x120>)
 8002cb8:	fb01 f103 	mul.w	r1, r1, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2064      	movs	r0, #100	; 0x64
 8002cc0:	fb00 f303 	mul.w	r3, r0, r3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	4906      	ldr	r1, [pc, #24]	; (8002ce0 <GPS_coord_to_degrees+0x124>)
 8002cc8:	fba1 1303 	umull	r1, r3, r1, r3
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	4413      	add	r3, r2
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	00989680 	.word	0x00989680
 8002cdc:	000f4240 	.word	0x000f4240
 8002ce0:	aaaaaaab 	.word	0xaaaaaaab

08002ce4 <grab_fields>:

// helper functions
uint16_t grab_fields(char* src, uint8_t mult)// convert string to uint16
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint16_t tmp = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	81bb      	strh	r3, [r7, #12]

	for(i=0; src[i]!=0; i++)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	e032      	b.n	8002d60 <grab_fields+0x7c>
	{
		if(src[i] == '.')
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b2e      	cmp	r3, #46	; 0x2e
 8002d04:	d10d      	bne.n	8002d22 <grab_fields+0x3e>
		{
			i++;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
			if(mult==0)
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02d      	beq.n	8002d6e <grab_fields+0x8a>
			{
				break;
			}else
			{
				src[i+mult] = 0;
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	4413      	add	r3, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
			}
		}
		tmp *= 10;
 8002d22:	89bb      	ldrh	r3, [r7, #12]
 8002d24:	461a      	mov	r2, r3
 8002d26:	0092      	lsls	r2, r2, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	81bb      	strh	r3, [r7, #12]
		if(src[i] >='0' && src[i] <='9') tmp += src[i]-'0';
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b2f      	cmp	r3, #47	; 0x2f
 8002d38:	d90f      	bls.n	8002d5a <grab_fields+0x76>
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b39      	cmp	r3, #57	; 0x39
 8002d44:	d809      	bhi.n	8002d5a <grab_fields+0x76>
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	89bb      	ldrh	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b30      	subs	r3, #48	; 0x30
 8002d58:	81bb      	strh	r3, [r7, #12]
	for(i=0; src[i]!=0; i++)
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1c6      	bne.n	8002cfa <grab_fields+0x16>
 8002d6c:	e000      	b.n	8002d70 <grab_fields+0x8c>
				break;
 8002d6e:	bf00      	nop
	}
	return tmp;
 8002d70:	89bb      	ldrh	r3, [r7, #12]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <hex_c>:

uint8_t hex_c(uint8_t n) // convert '0'..'9','A'..'F' to 0..15
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	3b30      	subs	r3, #48	; 0x30
 8002d8a:	71fb      	strb	r3, [r7, #7]
	if(n>9)  n -= 7;
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	2b09      	cmp	r3, #9
 8002d90:	d902      	bls.n	8002d98 <hex_c+0x1c>
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	3b07      	subs	r3, #7
 8002d96:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	71fb      	strb	r3, [r7, #7]
	return n;
 8002da0:	79fb      	ldrb	r3, [r7, #7]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <GPS_set_pids>:

//Get the relevant P I D values and set the PID controllers
void GPS_set_pids(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
	posholdPID_PARAM.kP   = 0.15f;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <GPS_set_pids+0x50>)
 8002db2:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <GPS_set_pids+0x54>)
 8002db4:	601a      	str	r2, [r3, #0]
	posholdPID_PARAM.kI   = 0;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <GPS_set_pids+0x50>)
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	605a      	str	r2, [r3, #4]
	posholdPID_PARAM.Imax = 2000;
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <GPS_set_pids+0x50>)
 8002dc0:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <GPS_set_pids+0x58>)
 8002dc2:	60da      	str	r2, [r3, #12]

	poshold_ratePID_PARAM.kP   = 3.4f;
 8002dc4:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <GPS_set_pids+0x5c>)
 8002dc6:	4a11      	ldr	r2, [pc, #68]	; (8002e0c <GPS_set_pids+0x60>)
 8002dc8:	601a      	str	r2, [r3, #0]
	poshold_ratePID_PARAM.kI   = 0.14f;
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <GPS_set_pids+0x5c>)
 8002dcc:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <GPS_set_pids+0x64>)
 8002dce:	605a      	str	r2, [r3, #4]
	poshold_ratePID_PARAM.kD   = 0.053f;
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <GPS_set_pids+0x5c>)
 8002dd2:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <GPS_set_pids+0x68>)
 8002dd4:	609a      	str	r2, [r3, #8]
	poshold_ratePID_PARAM.Imax = 2000;
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <GPS_set_pids+0x5c>)
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <GPS_set_pids+0x58>)
 8002dda:	60da      	str	r2, [r3, #12]

	navPID_PARAM.kP   = 2.5f;
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <GPS_set_pids+0x6c>)
 8002dde:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <GPS_set_pids+0x70>)
 8002de0:	601a      	str	r2, [r3, #0]
	navPID_PARAM.kI   = 0.33f;
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <GPS_set_pids+0x6c>)
 8002de4:	4a0e      	ldr	r2, [pc, #56]	; (8002e20 <GPS_set_pids+0x74>)
 8002de6:	605a      	str	r2, [r3, #4]
	navPID_PARAM.kD   = 0.053f;
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <GPS_set_pids+0x6c>)
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <GPS_set_pids+0x68>)
 8002dec:	609a      	str	r2, [r3, #8]
	navPID_PARAM.Imax = 2000;
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <GPS_set_pids+0x6c>)
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <GPS_set_pids+0x58>)
 8002df2:	60da      	str	r2, [r3, #12]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	20000c64 	.word	0x20000c64
 8002e00:	3e19999a 	.word	0x3e19999a
 8002e04:	44fa0000 	.word	0x44fa0000
 8002e08:	20000b68 	.word	0x20000b68
 8002e0c:	4059999a 	.word	0x4059999a
 8002e10:	3e0f5c29 	.word	0x3e0f5c29
 8002e14:	3d591687 	.word	0x3d591687
 8002e18:	20000b20 	.word	0x20000b20
 8002e1c:	40200000 	.word	0x40200000
 8002e20:	3ea8f5c3 	.word	0x3ea8f5c3

08002e24 <cliGps>:

#ifdef _USE_HW_CLI
void cliGps(cli_args_t *args)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
	uint8_t point = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73bb      	strb	r3, [r7, #14]

	if (args->argc == 2 && args->isStr(0, "virtual") == true)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d15f      	bne.n	8002efc <cliGps+0xd8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	4935      	ldr	r1, [pc, #212]	; (8002f18 <cliGps+0xf4>)
 8002e42:	2000      	movs	r0, #0
 8002e44:	4798      	blx	r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d057      	beq.n	8002efc <cliGps+0xd8>
	{
		f.GPS_FIX = 1;
 8002e4c:	4b33      	ldr	r3, [pc, #204]	; (8002f1c <cliGps+0xf8>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	741a      	strb	r2, [r3, #16]
		GPS.fixquality = 1;
 8002e52:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <cliGps+0xfc>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		GPS.satellites = 10;
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <cliGps+0xfc>)
 8002e5c:	220a      	movs	r2, #10
 8002e5e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		GPS_virtual = 1;
 8002e62:	4b30      	ldr	r3, [pc, #192]	; (8002f24 <cliGps+0x100>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
		point      = args->getData(1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	4798      	blx	r3
 8002e70:	4603      	mov	r3, r0
 8002e72:	73bb      	strb	r3, [r7, #14]
		switch(point)
 8002e74:	7bbb      	ldrb	r3, [r7, #14]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d012      	beq.n	8002ea0 <cliGps+0x7c>
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d01f      	beq.n	8002ebe <cliGps+0x9a>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d13a      	bne.n	8002ef8 <cliGps+0xd4>
		{
			case 0:
				GPS_coord[LAT] = 351859490;
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <cliGps+0x104>)
 8002e84:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <cliGps+0x108>)
 8002e86:	601a      	str	r2, [r3, #0]
				GPS_coord[LON] = 1268243560;
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <cliGps+0x104>)
 8002e8a:	4a29      	ldr	r2, [pc, #164]	; (8002f30 <cliGps+0x10c>)
 8002e8c:	605a      	str	r2, [r3, #4]
				cliPrintf("GPS_coord[LAT] : %d, GPS_coord[LON] : %d\r\n", GPS_coord[LAT], GPS_coord[LON]);
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <cliGps+0x104>)
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <cliGps+0x104>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	461a      	mov	r2, r3
 8002e98:	4826      	ldr	r0, [pc, #152]	; (8002f34 <cliGps+0x110>)
 8002e9a:	f007 fedb 	bl	800ac54 <cliPrintf>
				break;
 8002e9e:	e02b      	b.n	8002ef8 <cliGps+0xd4>

			case 1:
				GPS_coord[LAT] = 351857900;
 8002ea0:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <cliGps+0x104>)
 8002ea2:	4a25      	ldr	r2, [pc, #148]	; (8002f38 <cliGps+0x114>)
 8002ea4:	601a      	str	r2, [r3, #0]
				GPS_coord[LON] = 1268246880;
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <cliGps+0x104>)
 8002ea8:	4a24      	ldr	r2, [pc, #144]	; (8002f3c <cliGps+0x118>)
 8002eaa:	605a      	str	r2, [r3, #4]
				cliPrintf("GPS_coord[LAT] : %d, GPS_coord[LON] : %d\r\n", GPS_coord[LAT], GPS_coord[LON]);
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <cliGps+0x104>)
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <cliGps+0x104>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	481f      	ldr	r0, [pc, #124]	; (8002f34 <cliGps+0x110>)
 8002eb8:	f007 fecc 	bl	800ac54 <cliPrintf>
				break;
 8002ebc:	e01c      	b.n	8002ef8 <cliGps+0xd4>

			case 2:
				GPS_coord[LAT] = 0;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <cliGps+0x104>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
				GPS_coord[LON] = 0;
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <cliGps+0x104>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	605a      	str	r2, [r3, #4]
				f.GPS_FIX = 0;
 8002eca:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <cliGps+0xf8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	741a      	strb	r2, [r3, #16]
				GPS.fixquality = 0;
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <cliGps+0xfc>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				GPS.satellites = 0;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <cliGps+0xfc>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
				GPS_virtual = 0;
 8002ee0:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <cliGps+0x100>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
				cliPrintf("GPS_coord[LAT] : %d, GPS_coord[LON] : %d\r\n", GPS_coord[LAT], GPS_coord[LON]);
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <cliGps+0x104>)
 8002ee8:	6819      	ldr	r1, [r3, #0]
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <cliGps+0x104>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4810      	ldr	r0, [pc, #64]	; (8002f34 <cliGps+0x110>)
 8002ef2:	f007 feaf 	bl	800ac54 <cliPrintf>
				break;
 8002ef6:	bf00      	nop
		}
		ret = true;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
	}
	if (ret != true)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	f083 0301 	eor.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <cliGps+0xea>
	{
		cliPrintf("gps virtual point[0:normal, 1:next point, 2:reset]\n");
 8002f08:	480d      	ldr	r0, [pc, #52]	; (8002f40 <cliGps+0x11c>)
 8002f0a:	f007 fea3 	bl	800ac54 <cliPrintf>
	}
}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08019b5c 	.word	0x08019b5c
 8002f1c:	20000ed4 	.word	0x20000ed4
 8002f20:	20000b78 	.word	0x20000b78
 8002f24:	20000678 	.word	0x20000678
 8002f28:	20000c5c 	.word	0x20000c5c
 8002f2c:	14f8f322 	.word	0x14f8f322
 8002f30:	4b97dc68 	.word	0x4b97dc68
 8002f34:	08019b64 	.word	0x08019b64
 8002f38:	14f8ecec 	.word	0x14f8ecec
 8002f3c:	4b97e960 	.word	0x4b97e960
 8002f40:	08019b90 	.word	0x08019b90

08002f44 <invSqrt>:

float Pre_IMU[3] = {0, 0, 0};
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};
/////////////////////////////////////////////////////////////////

float invSqrt(float x) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8002f4c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7fd ff31 	bl	8000db8 <__aeabi_fmul>
 8002f56:	4603      	mov	r3, r0
 8002f58:	617b      	str	r3, [r7, #20]
	float y = x;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002f5e:	f107 0310 	add.w	r3, r7, #16
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	105a      	asrs	r2, r3, #1
 8002f6a:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <invSqrt+0xac>)
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	6979      	ldr	r1, [r7, #20]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd ff1b 	bl	8000db8 <__aeabi_fmul>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f7fd ff14 	bl	8000db8 <__aeabi_fmul>
 8002f90:	4603      	mov	r3, r0
 8002f92:	4619      	mov	r1, r3
 8002f94:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002f98:	f7fd fe04 	bl	8000ba4 <__aeabi_fsub>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f7fd ff07 	bl	8000db8 <__aeabi_fmul>
 8002faa:	4603      	mov	r3, r0
 8002fac:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	6979      	ldr	r1, [r7, #20]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd ff00 	bl	8000db8 <__aeabi_fmul>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f7fd fef9 	bl	8000db8 <__aeabi_fmul>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002fce:	f7fd fde9 	bl	8000ba4 <__aeabi_fsub>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7fd feec 	bl	8000db8 <__aeabi_fmul>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	613b      	str	r3, [r7, #16]
	return y;
 8002fe4:	693b      	ldr	r3, [r7, #16]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	5f3759df 	.word	0x5f3759df
 8002ff4:	00000000 	.word	0x00000000

08002ff8 <calculateAngles>:

void calculateAngles(TM_AHRSIMU_t* AHRS)
{
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	AHRS->Roll = (float) atan2f(AHRS->_q0 * AHRS->_q1 + AHRS->_q2 * AHRS->_q3, 0.5f - AHRS->_q1 * AHRS->_q1 - AHRS->_q2 * AHRS->_q2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7fd fed4 	bl	8000db8 <__aeabi_fmul>
 8003010:	4603      	mov	r3, r0
 8003012:	461c      	mov	r4, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f7fd feca 	bl	8000db8 <__aeabi_fmul>
 8003024:	4603      	mov	r3, r0
 8003026:	4619      	mov	r1, r3
 8003028:	4620      	mov	r0, r4
 800302a:	f7fd fdbd 	bl	8000ba8 <__addsf3>
 800302e:	4603      	mov	r3, r0
 8003030:	461c      	mov	r4, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	4619      	mov	r1, r3
 800303c:	4610      	mov	r0, r2
 800303e:	f7fd febb 	bl	8000db8 <__aeabi_fmul>
 8003042:	4603      	mov	r3, r0
 8003044:	4619      	mov	r1, r3
 8003046:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800304a:	f7fd fdab 	bl	8000ba4 <__aeabi_fsub>
 800304e:	4603      	mov	r3, r0
 8003050:	461d      	mov	r5, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f7fd feab 	bl	8000db8 <__aeabi_fmul>
 8003062:	4603      	mov	r3, r0
 8003064:	4619      	mov	r1, r3
 8003066:	4628      	mov	r0, r5
 8003068:	f7fd fd9c 	bl	8000ba4 <__aeabi_fsub>
 800306c:	4603      	mov	r3, r0
 800306e:	4619      	mov	r1, r3
 8003070:	4620      	mov	r0, r4
 8003072:	f012 fe31 	bl	8015cd8 <atan2f>
 8003076:	4602      	mov	r2, r0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	601a      	str	r2, [r3, #0]
	AHRS->Pitch = (float) asinf(-2.0f * (AHRS->_q1 * AHRS->_q3 - AHRS->_q0 * AHRS->_q2));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f7fd fe96 	bl	8000db8 <__aeabi_fmul>
 800308c:	4603      	mov	r3, r0
 800308e:	461c      	mov	r4, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f7fd fe8c 	bl	8000db8 <__aeabi_fmul>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4619      	mov	r1, r3
 80030a4:	4620      	mov	r0, r4
 80030a6:	f7fd fd7d 	bl	8000ba4 <__aeabi_fsub>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd fe81 	bl	8000db8 <__aeabi_fmul>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f012 fdbf 	bl	8015c3c <asinf>
 80030be:	4602      	mov	r2, r0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	605a      	str	r2, [r3, #4]
	AHRS->Yaw = (float) atan2f(AHRS->_q1 * AHRS->_q2 + AHRS->_q0 * AHRS->_q3, 0.5f - AHRS->_q2 * AHRS->_q2 - AHRS->_q3 * AHRS->_q3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f7fd fe72 	bl	8000db8 <__aeabi_fmul>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461c      	mov	r4, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f7fd fe68 	bl	8000db8 <__aeabi_fmul>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4619      	mov	r1, r3
 80030ec:	4620      	mov	r0, r4
 80030ee:	f7fd fd5b 	bl	8000ba8 <__addsf3>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461c      	mov	r4, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f7fd fe59 	bl	8000db8 <__aeabi_fmul>
 8003106:	4603      	mov	r3, r0
 8003108:	4619      	mov	r1, r3
 800310a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800310e:	f7fd fd49 	bl	8000ba4 <__aeabi_fsub>
 8003112:	4603      	mov	r3, r0
 8003114:	461d      	mov	r5, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f7fd fe49 	bl	8000db8 <__aeabi_fmul>
 8003126:	4603      	mov	r3, r0
 8003128:	4619      	mov	r1, r3
 800312a:	4628      	mov	r0, r5
 800312c:	f7fd fd3a 	bl	8000ba4 <__aeabi_fsub>
 8003130:	4603      	mov	r3, r0
 8003132:	4619      	mov	r1, r3
 8003134:	4620      	mov	r0, r4
 8003136:	f012 fdcf 	bl	8015cd8 <atan2f>
 800313a:	4602      	mov	r2, r0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	609a      	str	r2, [r3, #8]

	/* Calculate degrees and remove inclination */
	AHRS->Roll *= R2D;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	49b0      	ldr	r1, [pc, #704]	; (8003408 <calculateAngles+0x410>)
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fe36 	bl	8000db8 <__aeabi_fmul>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	601a      	str	r2, [r3, #0]
	AHRS->Pitch *= R2D;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	49ab      	ldr	r1, [pc, #684]	; (8003408 <calculateAngles+0x410>)
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd fe2c 	bl	8000db8 <__aeabi_fmul>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	605a      	str	r2, [r3, #4]
	AHRS->Yaw *= R2D;// - AHRS->Inclination;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	49a6      	ldr	r1, [pc, #664]	; (8003408 <calculateAngles+0x410>)
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fe22 	bl	8000db8 <__aeabi_fmul>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	609a      	str	r2, [r3, #8]

	if (AHRS->Yaw >= 180) {
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	49a2      	ldr	r1, [pc, #648]	; (800340c <calculateAngles+0x414>)
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd ffca 	bl	800111c <__aeabi_fcmpge>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <calculateAngles+0x1ac>
		AHRS->Yaw -= 360.0f;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	499f      	ldr	r1, [pc, #636]	; (8003410 <calculateAngles+0x418>)
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd fd05 	bl	8000ba4 <__aeabi_fsub>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	e012      	b.n	80031ca <calculateAngles+0x1d2>
	} else if (AHRS->Yaw < -180) {
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	499a      	ldr	r1, [pc, #616]	; (8003414 <calculateAngles+0x41c>)
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd ffa2 	bl	80010f4 <__aeabi_fcmplt>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <calculateAngles+0x1d2>
		AHRS->Yaw += 360.0f;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4995      	ldr	r1, [pc, #596]	; (8003410 <calculateAngles+0x418>)
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd fcf3 	bl	8000ba8 <__addsf3>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	609a      	str	r2, [r3, #8]
	}

	AHRS->Roll  = (0.95 * (Pre_IMU[ROLL]  + (imu.gyroRaw[ROLL] * 0.004)))  + (0.05 * AHRS->Roll);
 80031ca:	4b93      	ldr	r3, [pc, #588]	; (8003418 <calculateAngles+0x420>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f944 	bl	800045c <__aeabi_f2d>
 80031d4:	4604      	mov	r4, r0
 80031d6:	460d      	mov	r5, r1
 80031d8:	4b90      	ldr	r3, [pc, #576]	; (800341c <calculateAngles+0x424>)
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f93d 	bl	800045c <__aeabi_f2d>
 80031e2:	a383      	add	r3, pc, #524	; (adr r3, 80033f0 <calculateAngles+0x3f8>)
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	f7fd f990 	bl	800050c <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4620      	mov	r0, r4
 80031f2:	4629      	mov	r1, r5
 80031f4:	f7fc ffd4 	bl	80001a0 <__adddf3>
 80031f8:	4603      	mov	r3, r0
 80031fa:	460c      	mov	r4, r1
 80031fc:	4618      	mov	r0, r3
 80031fe:	4621      	mov	r1, r4
 8003200:	a37d      	add	r3, pc, #500	; (adr r3, 80033f8 <calculateAngles+0x400>)
 8003202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003206:	f7fd f981 	bl	800050c <__aeabi_dmul>
 800320a:	4603      	mov	r3, r0
 800320c:	460c      	mov	r4, r1
 800320e:	4625      	mov	r5, r4
 8003210:	461c      	mov	r4, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f920 	bl	800045c <__aeabi_f2d>
 800321c:	a378      	add	r3, pc, #480	; (adr r3, 8003400 <calculateAngles+0x408>)
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f7fd f973 	bl	800050c <__aeabi_dmul>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4620      	mov	r0, r4
 800322c:	4629      	mov	r1, r5
 800322e:	f7fc ffb7 	bl	80001a0 <__adddf3>
 8003232:	4603      	mov	r3, r0
 8003234:	460c      	mov	r4, r1
 8003236:	4618      	mov	r0, r3
 8003238:	4621      	mov	r1, r4
 800323a:	f7fd fc5f 	bl	8000afc <__aeabi_d2f>
 800323e:	4602      	mov	r2, r0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	601a      	str	r2, [r3, #0]
	AHRS->Pitch = (0.95 * (Pre_IMU[PITCH] + (imu.gyroRaw[PITCH] * 0.004))) + (0.05 * AHRS->Pitch);
 8003244:	4b74      	ldr	r3, [pc, #464]	; (8003418 <calculateAngles+0x420>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f907 	bl	800045c <__aeabi_f2d>
 800324e:	4604      	mov	r4, r0
 8003250:	460d      	mov	r5, r1
 8003252:	4b72      	ldr	r3, [pc, #456]	; (800341c <calculateAngles+0x424>)
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd f900 	bl	800045c <__aeabi_f2d>
 800325c:	a364      	add	r3, pc, #400	; (adr r3, 80033f0 <calculateAngles+0x3f8>)
 800325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003262:	f7fd f953 	bl	800050c <__aeabi_dmul>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4620      	mov	r0, r4
 800326c:	4629      	mov	r1, r5
 800326e:	f7fc ff97 	bl	80001a0 <__adddf3>
 8003272:	4603      	mov	r3, r0
 8003274:	460c      	mov	r4, r1
 8003276:	4618      	mov	r0, r3
 8003278:	4621      	mov	r1, r4
 800327a:	a35f      	add	r3, pc, #380	; (adr r3, 80033f8 <calculateAngles+0x400>)
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f7fd f944 	bl	800050c <__aeabi_dmul>
 8003284:	4603      	mov	r3, r0
 8003286:	460c      	mov	r4, r1
 8003288:	4625      	mov	r5, r4
 800328a:	461c      	mov	r4, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd f8e3 	bl	800045c <__aeabi_f2d>
 8003296:	a35a      	add	r3, pc, #360	; (adr r3, 8003400 <calculateAngles+0x408>)
 8003298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329c:	f7fd f936 	bl	800050c <__aeabi_dmul>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4620      	mov	r0, r4
 80032a6:	4629      	mov	r1, r5
 80032a8:	f7fc ff7a 	bl	80001a0 <__adddf3>
 80032ac:	4603      	mov	r3, r0
 80032ae:	460c      	mov	r4, r1
 80032b0:	4618      	mov	r0, r3
 80032b2:	4621      	mov	r1, r4
 80032b4:	f7fd fc22 	bl	8000afc <__aeabi_d2f>
 80032b8:	4602      	mov	r2, r0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	605a      	str	r2, [r3, #4]
	AHRS->Yaw   = (0.95 * (Pre_IMU[YAW]   + (imu.gyroRaw[YAW] * 0.004)))   + (0.05 * AHRS->Yaw);
 80032be:	4b56      	ldr	r3, [pc, #344]	; (8003418 <calculateAngles+0x420>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd f8ca 	bl	800045c <__aeabi_f2d>
 80032c8:	4604      	mov	r4, r0
 80032ca:	460d      	mov	r5, r1
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <calculateAngles+0x424>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f8c3 	bl	800045c <__aeabi_f2d>
 80032d6:	a346      	add	r3, pc, #280	; (adr r3, 80033f0 <calculateAngles+0x3f8>)
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f7fd f916 	bl	800050c <__aeabi_dmul>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4620      	mov	r0, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	f7fc ff5a 	bl	80001a0 <__adddf3>
 80032ec:	4603      	mov	r3, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	4618      	mov	r0, r3
 80032f2:	4621      	mov	r1, r4
 80032f4:	a340      	add	r3, pc, #256	; (adr r3, 80033f8 <calculateAngles+0x400>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f7fd f907 	bl	800050c <__aeabi_dmul>
 80032fe:	4603      	mov	r3, r0
 8003300:	460c      	mov	r4, r1
 8003302:	4625      	mov	r5, r4
 8003304:	461c      	mov	r4, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd f8a6 	bl	800045c <__aeabi_f2d>
 8003310:	a33b      	add	r3, pc, #236	; (adr r3, 8003400 <calculateAngles+0x408>)
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f7fd f8f9 	bl	800050c <__aeabi_dmul>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4620      	mov	r0, r4
 8003320:	4629      	mov	r1, r5
 8003322:	f7fc ff3d 	bl	80001a0 <__adddf3>
 8003326:	4603      	mov	r3, r0
 8003328:	460c      	mov	r4, r1
 800332a:	4618      	mov	r0, r3
 800332c:	4621      	mov	r1, r4
 800332e:	f7fd fbe5 	bl	8000afc <__aeabi_d2f>
 8003332:	4602      	mov	r2, r0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	609a      	str	r2, [r3, #8]

	imu.AHRS[ROLL] = AHRS->Roll + 0.0f;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f04f 0100 	mov.w	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd fc31 	bl	8000ba8 <__addsf3>
 8003346:	4603      	mov	r3, r0
 8003348:	461a      	mov	r2, r3
 800334a:	4b34      	ldr	r3, [pc, #208]	; (800341c <calculateAngles+0x424>)
 800334c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	imu.AHRS[PITCH] = AHRS->Pitch + 0.0f;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd fc25 	bl	8000ba8 <__addsf3>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	4b2e      	ldr	r3, [pc, #184]	; (800341c <calculateAngles+0x424>)
 8003364:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	imu.AHRS[YAW] = AHRS->Yaw;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a2b      	ldr	r2, [pc, #172]	; (800341c <calculateAngles+0x424>)
 800336e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	att.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 8003372:	4b2a      	ldr	r3, [pc, #168]	; (800341c <calculateAngles+0x424>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fef9 	bl	8001170 <__aeabi_f2iz>
 800337e:	4603      	mov	r3, r0
 8003380:	b21b      	sxth	r3, r3
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	0092      	lsls	r2, r2, #2
 8003388:	4413      	add	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	b29b      	uxth	r3, r3
 800338e:	b21a      	sxth	r2, r3
 8003390:	4b23      	ldr	r3, [pc, #140]	; (8003420 <calculateAngles+0x428>)
 8003392:	801a      	strh	r2, [r3, #0]
	att.angle[PITCH] = (int16_t) imu.AHRS[PITCH] * 10;
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <calculateAngles+0x424>)
 8003396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd fee8 	bl	8001170 <__aeabi_f2iz>
 80033a0:	4603      	mov	r3, r0
 80033a2:	b21b      	sxth	r3, r3
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	0092      	lsls	r2, r2, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	b21a      	sxth	r2, r3
 80033b2:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <calculateAngles+0x428>)
 80033b4:	805a      	strh	r2, [r3, #2]
	att.heading = (int16_t) imu.AHRS[YAW];
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <calculateAngles+0x424>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd fed7 	bl	8001170 <__aeabi_f2iz>
 80033c2:	4603      	mov	r3, r0
 80033c4:	b21a      	sxth	r2, r3
 80033c6:	4b16      	ldr	r3, [pc, #88]	; (8003420 <calculateAngles+0x428>)
 80033c8:	809a      	strh	r2, [r3, #4]

	Pre_IMU[ROLL]  = AHRS->Roll;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a12      	ldr	r2, [pc, #72]	; (8003418 <calculateAngles+0x420>)
 80033d0:	6013      	str	r3, [r2, #0]
	Pre_IMU[PITCH] = AHRS->Pitch;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4a10      	ldr	r2, [pc, #64]	; (8003418 <calculateAngles+0x420>)
 80033d8:	6053      	str	r3, [r2, #4]
	Pre_IMU[YAW]   = AHRS->Yaw;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <calculateAngles+0x420>)
 80033e0:	6093      	str	r3, [r2, #8]
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bdb0      	pop	{r4, r5, r7, pc}
 80033ea:	bf00      	nop
 80033ec:	f3af 8000 	nop.w
 80033f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80033f4:	3f70624d 	.word	0x3f70624d
 80033f8:	66666666 	.word	0x66666666
 80033fc:	3fee6666 	.word	0x3fee6666
 8003400:	9999999a 	.word	0x9999999a
 8003404:	3fa99999 	.word	0x3fa99999
 8003408:	42652ee0 	.word	0x42652ee0
 800340c:	43340000 	.word	0x43340000
 8003410:	43b40000 	.word	0x43b40000
 8003414:	c3340000 	.word	0xc3340000
 8003418:	200002dc 	.word	0x200002dc
 800341c:	20000e20 	.word	0x20000e20
 8003420:	20000ef8 	.word	0x20000ef8

08003424 <TM_AHRSIMU_Init>:

static void cliImu(cli_args_t *args);

void TM_AHRSIMU_Init(float sampleRate, float beta, float inclination)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  AHRS._beta = beta;
 8003430:	4a13      	ldr	r2, [pc, #76]	; (8003480 <TM_AHRSIMU_Init+0x5c>)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6113      	str	r3, [r2, #16]
  AHRS._sampleRate = 1 / sampleRate;
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800343c:	f7fd fd70 	bl	8000f20 <__aeabi_fdiv>
 8003440:	4603      	mov	r3, r0
 8003442:	461a      	mov	r2, r3
 8003444:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <TM_AHRSIMU_Init+0x5c>)
 8003446:	625a      	str	r2, [r3, #36]	; 0x24
  AHRS.Inclination= inclination;
 8003448:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <TM_AHRSIMU_Init+0x5c>)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60d3      	str	r3, [r2, #12]

  AHRS._q0 = 1.0f;
 800344e:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <TM_AHRSIMU_Init+0x5c>)
 8003450:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003454:	615a      	str	r2, [r3, #20]
  AHRS._q1 = 0.0f;
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <TM_AHRSIMU_Init+0x5c>)
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	619a      	str	r2, [r3, #24]
  AHRS._q2 = 0.0f;
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <TM_AHRSIMU_Init+0x5c>)
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	61da      	str	r2, [r3, #28]
  AHRS._q3 = 0.0f;
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <TM_AHRSIMU_Init+0x5c>)
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	621a      	str	r2, [r3, #32]
  cliAdd("imu", cliImu);
 800346e:	4905      	ldr	r1, [pc, #20]	; (8003484 <TM_AHRSIMU_Init+0x60>)
 8003470:	4805      	ldr	r0, [pc, #20]	; (8003488 <TM_AHRSIMU_Init+0x64>)
 8003472:	f007 fcf9 	bl	800ae68 <cliAdd>
}
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000c80 	.word	0x20000c80
 8003484:	08003c41 	.word	0x08003c41
 8003488:	08019bc4 	.word	0x08019bc4

0800348c <TM_AHRSIMU_UpdateIMU>:
	/* Calculate new angles */
	calculateAngles(AHRS);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRS, float gx, float gy, float gz, float ax, float ay, float az)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b09b      	sub	sp, #108	; 0x6c
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  float s0, s1, s2, s3;
  float qDot1, qDot2, qDot3, qDot4;
  float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

// Convert gyroscope degrees/sec to radians/sec
	gx = AHRSIMU_DEG2RAD(gx);
 800349a:	4967      	ldr	r1, [pc, #412]	; (8003638 <TM_AHRSIMU_UpdateIMU+0x1ac>)
 800349c:	68b8      	ldr	r0, [r7, #8]
 800349e:	f7fd fc8b 	bl	8000db8 <__aeabi_fmul>
 80034a2:	4603      	mov	r3, r0
 80034a4:	60bb      	str	r3, [r7, #8]
	gy = AHRSIMU_DEG2RAD(gy);
 80034a6:	4964      	ldr	r1, [pc, #400]	; (8003638 <TM_AHRSIMU_UpdateIMU+0x1ac>)
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fd fc85 	bl	8000db8 <__aeabi_fmul>
 80034ae:	4603      	mov	r3, r0
 80034b0:	607b      	str	r3, [r7, #4]
	gz = AHRSIMU_DEG2RAD(gz);
 80034b2:	4961      	ldr	r1, [pc, #388]	; (8003638 <TM_AHRSIMU_UpdateIMU+0x1ac>)
 80034b4:	6838      	ldr	r0, [r7, #0]
 80034b6:	f7fd fc7f 	bl	8000db8 <__aeabi_fmul>
 80034ba:	4603      	mov	r3, r0
 80034bc:	603b      	str	r3, [r7, #0]

  /* Rate of change of quaternion from gyroscope */
  qDot1 = 0.5f * (-AHRS->_q1 * gx - AHRS->_q2 * gy - AHRS->_q3 * gz);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd fc75 	bl	8000db8 <__aeabi_fmul>
 80034ce:	4603      	mov	r3, r0
 80034d0:	461c      	mov	r4, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fd fc6d 	bl	8000db8 <__aeabi_fmul>
 80034de:	4603      	mov	r3, r0
 80034e0:	4619      	mov	r1, r3
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7fd fb5e 	bl	8000ba4 <__aeabi_fsub>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461c      	mov	r4, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	6839      	ldr	r1, [r7, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fc60 	bl	8000db8 <__aeabi_fmul>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4619      	mov	r1, r3
 80034fc:	4620      	mov	r0, r4
 80034fe:	f7fd fb51 	bl	8000ba4 <__aeabi_fsub>
 8003502:	4603      	mov	r3, r0
 8003504:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd fc55 	bl	8000db8 <__aeabi_fmul>
 800350e:	4603      	mov	r3, r0
 8003510:	667b      	str	r3, [r7, #100]	; 0x64
  qDot2 = 0.5f * (AHRS->_q0 * gx + AHRS->_q2 * gz - AHRS->_q3 * gy);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fd fc4d 	bl	8000db8 <__aeabi_fmul>
 800351e:	4603      	mov	r3, r0
 8003520:	461c      	mov	r4, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	6839      	ldr	r1, [r7, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd fc45 	bl	8000db8 <__aeabi_fmul>
 800352e:	4603      	mov	r3, r0
 8003530:	4619      	mov	r1, r3
 8003532:	4620      	mov	r0, r4
 8003534:	f7fd fb38 	bl	8000ba8 <__addsf3>
 8003538:	4603      	mov	r3, r0
 800353a:	461c      	mov	r4, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd fc38 	bl	8000db8 <__aeabi_fmul>
 8003548:	4603      	mov	r3, r0
 800354a:	4619      	mov	r1, r3
 800354c:	4620      	mov	r0, r4
 800354e:	f7fd fb29 	bl	8000ba4 <__aeabi_fsub>
 8003552:	4603      	mov	r3, r0
 8003554:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003558:	4618      	mov	r0, r3
 800355a:	f7fd fc2d 	bl	8000db8 <__aeabi_fmul>
 800355e:	4603      	mov	r3, r0
 8003560:	663b      	str	r3, [r7, #96]	; 0x60
  qDot3 = 0.5f * (AHRS->_q0 * gy - AHRS->_q1 * gz + AHRS->_q3 * gx);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4618      	mov	r0, r3
 800356a:	f7fd fc25 	bl	8000db8 <__aeabi_fmul>
 800356e:	4603      	mov	r3, r0
 8003570:	461c      	mov	r4, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	6839      	ldr	r1, [r7, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd fc1d 	bl	8000db8 <__aeabi_fmul>
 800357e:	4603      	mov	r3, r0
 8003580:	4619      	mov	r1, r3
 8003582:	4620      	mov	r0, r4
 8003584:	f7fd fb0e 	bl	8000ba4 <__aeabi_fsub>
 8003588:	4603      	mov	r3, r0
 800358a:	461c      	mov	r4, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fc10 	bl	8000db8 <__aeabi_fmul>
 8003598:	4603      	mov	r3, r0
 800359a:	4619      	mov	r1, r3
 800359c:	4620      	mov	r0, r4
 800359e:	f7fd fb03 	bl	8000ba8 <__addsf3>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fd fc05 	bl	8000db8 <__aeabi_fmul>
 80035ae:	4603      	mov	r3, r0
 80035b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  qDot4 = 0.5f * (AHRS->_q0 * gz + AHRS->_q1 * gy - AHRS->_q2 * gx);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	6839      	ldr	r1, [r7, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fd fbfd 	bl	8000db8 <__aeabi_fmul>
 80035be:	4603      	mov	r3, r0
 80035c0:	461c      	mov	r4, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fd fbf5 	bl	8000db8 <__aeabi_fmul>
 80035ce:	4603      	mov	r3, r0
 80035d0:	4619      	mov	r1, r3
 80035d2:	4620      	mov	r0, r4
 80035d4:	f7fd fae8 	bl	8000ba8 <__addsf3>
 80035d8:	4603      	mov	r3, r0
 80035da:	461c      	mov	r4, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd fbe8 	bl	8000db8 <__aeabi_fmul>
 80035e8:	4603      	mov	r3, r0
 80035ea:	4619      	mov	r1, r3
 80035ec:	4620      	mov	r0, r4
 80035ee:	f7fd fad9 	bl	8000ba4 <__aeabi_fsub>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fbdd 	bl	8000db8 <__aeabi_fmul>
 80035fe:	4603      	mov	r3, r0
 8003600:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
  if (!(ax == 0.0f && ay == 0.0f && az == 0.0f))
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003608:	f7fd fd6a 	bl	80010e0 <__aeabi_fcmpeq>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d014      	beq.n	800363c <TM_AHRSIMU_UpdateIMU+0x1b0>
 8003612:	f04f 0100 	mov.w	r1, #0
 8003616:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003618:	f7fd fd62 	bl	80010e0 <__aeabi_fcmpeq>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00c      	beq.n	800363c <TM_AHRSIMU_UpdateIMU+0x1b0>
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800362a:	f7fd fd59 	bl	80010e0 <__aeabi_fcmpeq>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	f040 8231 	bne.w	8003a98 <TM_AHRSIMU_UpdateIMU+0x60c>
 8003636:	e001      	b.n	800363c <TM_AHRSIMU_UpdateIMU+0x1b0>
 8003638:	3c8efa35 	.word	0x3c8efa35
  {

   /* Normalise accelerometer measurement */
     recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800363c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800363e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003640:	f7fd fbba 	bl	8000db8 <__aeabi_fmul>
 8003644:	4603      	mov	r3, r0
 8003646:	461c      	mov	r4, r3
 8003648:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800364a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800364c:	f7fd fbb4 	bl	8000db8 <__aeabi_fmul>
 8003650:	4603      	mov	r3, r0
 8003652:	4619      	mov	r1, r3
 8003654:	4620      	mov	r0, r4
 8003656:	f7fd faa7 	bl	8000ba8 <__addsf3>
 800365a:	4603      	mov	r3, r0
 800365c:	461c      	mov	r4, r3
 800365e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003662:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003666:	f7fd fba7 	bl	8000db8 <__aeabi_fmul>
 800366a:	4603      	mov	r3, r0
 800366c:	4619      	mov	r1, r3
 800366e:	4620      	mov	r0, r4
 8003670:	f7fd fa9a 	bl	8000ba8 <__addsf3>
 8003674:	4603      	mov	r3, r0
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fc64 	bl	8002f44 <invSqrt>
 800367c:	6578      	str	r0, [r7, #84]	; 0x54
     ax *= recipNorm;
 800367e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003680:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003682:	f7fd fb99 	bl	8000db8 <__aeabi_fmul>
 8003686:	4603      	mov	r3, r0
 8003688:	67bb      	str	r3, [r7, #120]	; 0x78
     ay *= recipNorm;
 800368a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800368c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800368e:	f7fd fb93 	bl	8000db8 <__aeabi_fmul>
 8003692:	4603      	mov	r3, r0
 8003694:	67fb      	str	r3, [r7, #124]	; 0x7c
     az *= recipNorm;
 8003696:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003698:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800369c:	f7fd fb8c 	bl	8000db8 <__aeabi_fmul>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

   /* Auxiliary variables to avoid repeated arithmetic */
     _2q0 = 2.0f * AHRS->_q0;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	4619      	mov	r1, r3
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fa7b 	bl	8000ba8 <__addsf3>
 80036b2:	4603      	mov	r3, r0
 80036b4:	653b      	str	r3, [r7, #80]	; 0x50
     _2q1 = 2.0f * AHRS->_q1;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	4619      	mov	r1, r3
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fd fa73 	bl	8000ba8 <__addsf3>
 80036c2:	4603      	mov	r3, r0
 80036c4:	64fb      	str	r3, [r7, #76]	; 0x4c
     _2q2 = 2.0f * AHRS->_q2;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	4619      	mov	r1, r3
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fa6b 	bl	8000ba8 <__addsf3>
 80036d2:	4603      	mov	r3, r0
 80036d4:	64bb      	str	r3, [r7, #72]	; 0x48
     _2q3 = 2.0f * AHRS->_q3;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	4619      	mov	r1, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fa63 	bl	8000ba8 <__addsf3>
 80036e2:	4603      	mov	r3, r0
 80036e4:	647b      	str	r3, [r7, #68]	; 0x44
     _4q0 = 4.0f * AHRS->_q0;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fd fb62 	bl	8000db8 <__aeabi_fmul>
 80036f4:	4603      	mov	r3, r0
 80036f6:	643b      	str	r3, [r7, #64]	; 0x40
     _4q1 = 4.0f * AHRS->_q1;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003700:	4618      	mov	r0, r3
 8003702:	f7fd fb59 	bl	8000db8 <__aeabi_fmul>
 8003706:	4603      	mov	r3, r0
 8003708:	63fb      	str	r3, [r7, #60]	; 0x3c
     _4q2 = 4.0f * AHRS->_q2;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fb50 	bl	8000db8 <__aeabi_fmul>
 8003718:	4603      	mov	r3, r0
 800371a:	63bb      	str	r3, [r7, #56]	; 0x38
     _8q1 = 8.0f * AHRS->_q1;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd fb47 	bl	8000db8 <__aeabi_fmul>
 800372a:	4603      	mov	r3, r0
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
     _8q2 = 8.0f * AHRS->_q2;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fb3e 	bl	8000db8 <__aeabi_fmul>
 800373c:	4603      	mov	r3, r0
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
     q0q0 = AHRS->_q0 * AHRS->_q0;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	f7fd fb34 	bl	8000db8 <__aeabi_fmul>
 8003750:	4603      	mov	r3, r0
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
     q1q1 = AHRS->_q1 * AHRS->_q1;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f7fd fb2a 	bl	8000db8 <__aeabi_fmul>
 8003764:	4603      	mov	r3, r0
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
     q2q2 = AHRS->_q2 * AHRS->_q2;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f7fd fb20 	bl	8000db8 <__aeabi_fmul>
 8003778:	4603      	mov	r3, r0
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
     q3q3 = AHRS->_q3 * AHRS->_q3;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1a      	ldr	r2, [r3, #32]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f7fd fb16 	bl	8000db8 <__aeabi_fmul>
 800378c:	4603      	mov	r3, r0
 800378e:	623b      	str	r3, [r7, #32]

     /* Gradient decent algorithm corrective step */
     s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003792:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003794:	f7fd fb10 	bl	8000db8 <__aeabi_fmul>
 8003798:	4603      	mov	r3, r0
 800379a:	461c      	mov	r4, r3
 800379c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800379e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80037a0:	f7fd fb0a 	bl	8000db8 <__aeabi_fmul>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4619      	mov	r1, r3
 80037a8:	4620      	mov	r0, r4
 80037aa:	f7fd f9fd 	bl	8000ba8 <__addsf3>
 80037ae:	4603      	mov	r3, r0
 80037b0:	461c      	mov	r4, r3
 80037b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80037b6:	f7fd faff 	bl	8000db8 <__aeabi_fmul>
 80037ba:	4603      	mov	r3, r0
 80037bc:	4619      	mov	r1, r3
 80037be:	4620      	mov	r0, r4
 80037c0:	f7fd f9f2 	bl	8000ba8 <__addsf3>
 80037c4:	4603      	mov	r3, r0
 80037c6:	461c      	mov	r4, r3
 80037c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80037cc:	f7fd faf4 	bl	8000db8 <__aeabi_fmul>
 80037d0:	4603      	mov	r3, r0
 80037d2:	4619      	mov	r1, r3
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7fd f9e5 	bl	8000ba4 <__aeabi_fsub>
 80037da:	4603      	mov	r3, r0
 80037dc:	61fb      	str	r3, [r7, #28]
     s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRS->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80037de:	6a39      	ldr	r1, [r7, #32]
 80037e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037e2:	f7fd fae9 	bl	8000db8 <__aeabi_fmul>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461c      	mov	r4, r3
 80037ea:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80037ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80037ee:	f7fd fae3 	bl	8000db8 <__aeabi_fmul>
 80037f2:	4603      	mov	r3, r0
 80037f4:	4619      	mov	r1, r3
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7fd f9d4 	bl	8000ba4 <__aeabi_fsub>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461c      	mov	r4, r3
 8003800:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003806:	f7fd fad7 	bl	8000db8 <__aeabi_fmul>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f7fd facf 	bl	8000db8 <__aeabi_fmul>
 800381a:	4603      	mov	r3, r0
 800381c:	4619      	mov	r1, r3
 800381e:	4620      	mov	r0, r4
 8003820:	f7fd f9c2 	bl	8000ba8 <__addsf3>
 8003824:	4603      	mov	r3, r0
 8003826:	461c      	mov	r4, r3
 8003828:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800382a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800382c:	f7fd fac4 	bl	8000db8 <__aeabi_fmul>
 8003830:	4603      	mov	r3, r0
 8003832:	4619      	mov	r1, r3
 8003834:	4620      	mov	r0, r4
 8003836:	f7fd f9b5 	bl	8000ba4 <__aeabi_fsub>
 800383a:	4603      	mov	r3, r0
 800383c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd f9b0 	bl	8000ba4 <__aeabi_fsub>
 8003844:	4603      	mov	r3, r0
 8003846:	461c      	mov	r4, r3
 8003848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800384a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800384c:	f7fd fab4 	bl	8000db8 <__aeabi_fmul>
 8003850:	4603      	mov	r3, r0
 8003852:	4619      	mov	r1, r3
 8003854:	4620      	mov	r0, r4
 8003856:	f7fd f9a7 	bl	8000ba8 <__addsf3>
 800385a:	4603      	mov	r3, r0
 800385c:	461c      	mov	r4, r3
 800385e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003860:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003862:	f7fd faa9 	bl	8000db8 <__aeabi_fmul>
 8003866:	4603      	mov	r3, r0
 8003868:	4619      	mov	r1, r3
 800386a:	4620      	mov	r0, r4
 800386c:	f7fd f99c 	bl	8000ba8 <__addsf3>
 8003870:	4603      	mov	r3, r0
 8003872:	461c      	mov	r4, r3
 8003874:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003878:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800387a:	f7fd fa9d 	bl	8000db8 <__aeabi_fmul>
 800387e:	4603      	mov	r3, r0
 8003880:	4619      	mov	r1, r3
 8003882:	4620      	mov	r0, r4
 8003884:	f7fd f990 	bl	8000ba8 <__addsf3>
 8003888:	4603      	mov	r3, r0
 800388a:	61bb      	str	r3, [r7, #24]
     s2 = 4.0f * q0q0 * AHRS->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800388c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003892:	f7fd fa91 	bl	8000db8 <__aeabi_fmul>
 8003896:	4603      	mov	r3, r0
 8003898:	461a      	mov	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	4619      	mov	r1, r3
 80038a0:	4610      	mov	r0, r2
 80038a2:	f7fd fa89 	bl	8000db8 <__aeabi_fmul>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461c      	mov	r4, r3
 80038aa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80038ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80038ae:	f7fd fa83 	bl	8000db8 <__aeabi_fmul>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4619      	mov	r1, r3
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7fd f976 	bl	8000ba8 <__addsf3>
 80038bc:	4603      	mov	r3, r0
 80038be:	461c      	mov	r4, r3
 80038c0:	6a39      	ldr	r1, [r7, #32]
 80038c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038c4:	f7fd fa78 	bl	8000db8 <__aeabi_fmul>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4619      	mov	r1, r3
 80038cc:	4620      	mov	r0, r4
 80038ce:	f7fd f96b 	bl	8000ba8 <__addsf3>
 80038d2:	4603      	mov	r3, r0
 80038d4:	461c      	mov	r4, r3
 80038d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80038da:	f7fd fa6d 	bl	8000db8 <__aeabi_fmul>
 80038de:	4603      	mov	r3, r0
 80038e0:	4619      	mov	r1, r3
 80038e2:	4620      	mov	r0, r4
 80038e4:	f7fd f95e 	bl	8000ba4 <__aeabi_fsub>
 80038e8:	4603      	mov	r3, r0
 80038ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd f959 	bl	8000ba4 <__aeabi_fsub>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461c      	mov	r4, r3
 80038f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038fa:	f7fd fa5d 	bl	8000db8 <__aeabi_fmul>
 80038fe:	4603      	mov	r3, r0
 8003900:	4619      	mov	r1, r3
 8003902:	4620      	mov	r0, r4
 8003904:	f7fd f950 	bl	8000ba8 <__addsf3>
 8003908:	4603      	mov	r3, r0
 800390a:	461c      	mov	r4, r3
 800390c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800390e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003910:	f7fd fa52 	bl	8000db8 <__aeabi_fmul>
 8003914:	4603      	mov	r3, r0
 8003916:	4619      	mov	r1, r3
 8003918:	4620      	mov	r0, r4
 800391a:	f7fd f945 	bl	8000ba8 <__addsf3>
 800391e:	4603      	mov	r3, r0
 8003920:	461c      	mov	r4, r3
 8003922:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003926:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003928:	f7fd fa46 	bl	8000db8 <__aeabi_fmul>
 800392c:	4603      	mov	r3, r0
 800392e:	4619      	mov	r1, r3
 8003930:	4620      	mov	r0, r4
 8003932:	f7fd f939 	bl	8000ba8 <__addsf3>
 8003936:	4603      	mov	r3, r0
 8003938:	617b      	str	r3, [r7, #20]
     s3 = 4.0f * q1q1 * AHRS->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRS->_q3 - _2q2 * ay;
 800393a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800393e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003940:	f7fd fa3a 	bl	8000db8 <__aeabi_fmul>
 8003944:	4603      	mov	r3, r0
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f7fd fa32 	bl	8000db8 <__aeabi_fmul>
 8003954:	4603      	mov	r3, r0
 8003956:	461c      	mov	r4, r3
 8003958:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800395a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800395c:	f7fd fa2c 	bl	8000db8 <__aeabi_fmul>
 8003960:	4603      	mov	r3, r0
 8003962:	4619      	mov	r1, r3
 8003964:	4620      	mov	r0, r4
 8003966:	f7fd f91d 	bl	8000ba4 <__aeabi_fsub>
 800396a:	4603      	mov	r3, r0
 800396c:	461c      	mov	r4, r3
 800396e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003974:	f7fd fa20 	bl	8000db8 <__aeabi_fmul>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f7fd fa18 	bl	8000db8 <__aeabi_fmul>
 8003988:	4603      	mov	r3, r0
 800398a:	4619      	mov	r1, r3
 800398c:	4620      	mov	r0, r4
 800398e:	f7fd f90b 	bl	8000ba8 <__addsf3>
 8003992:	4603      	mov	r3, r0
 8003994:	461c      	mov	r4, r3
 8003996:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003998:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800399a:	f7fd fa0d 	bl	8000db8 <__aeabi_fmul>
 800399e:	4603      	mov	r3, r0
 80039a0:	4619      	mov	r1, r3
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7fd f8fe 	bl	8000ba4 <__aeabi_fsub>
 80039a8:	4603      	mov	r3, r0
 80039aa:	613b      	str	r3, [r7, #16]

     /* Normalise step magnitude */
     recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 80039ac:	69f9      	ldr	r1, [r7, #28]
 80039ae:	69f8      	ldr	r0, [r7, #28]
 80039b0:	f7fd fa02 	bl	8000db8 <__aeabi_fmul>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461c      	mov	r4, r3
 80039b8:	69b9      	ldr	r1, [r7, #24]
 80039ba:	69b8      	ldr	r0, [r7, #24]
 80039bc:	f7fd f9fc 	bl	8000db8 <__aeabi_fmul>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4619      	mov	r1, r3
 80039c4:	4620      	mov	r0, r4
 80039c6:	f7fd f8ef 	bl	8000ba8 <__addsf3>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461c      	mov	r4, r3
 80039ce:	6979      	ldr	r1, [r7, #20]
 80039d0:	6978      	ldr	r0, [r7, #20]
 80039d2:	f7fd f9f1 	bl	8000db8 <__aeabi_fmul>
 80039d6:	4603      	mov	r3, r0
 80039d8:	4619      	mov	r1, r3
 80039da:	4620      	mov	r0, r4
 80039dc:	f7fd f8e4 	bl	8000ba8 <__addsf3>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461c      	mov	r4, r3
 80039e4:	6939      	ldr	r1, [r7, #16]
 80039e6:	6938      	ldr	r0, [r7, #16]
 80039e8:	f7fd f9e6 	bl	8000db8 <__aeabi_fmul>
 80039ec:	4603      	mov	r3, r0
 80039ee:	4619      	mov	r1, r3
 80039f0:	4620      	mov	r0, r4
 80039f2:	f7fd f8d9 	bl	8000ba8 <__addsf3>
 80039f6:	4603      	mov	r3, r0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff faa3 	bl	8002f44 <invSqrt>
 80039fe:	6578      	str	r0, [r7, #84]	; 0x54
     s0 *= recipNorm;
 8003a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a02:	69f8      	ldr	r0, [r7, #28]
 8003a04:	f7fd f9d8 	bl	8000db8 <__aeabi_fmul>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	61fb      	str	r3, [r7, #28]
     s1 *= recipNorm;
 8003a0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a0e:	69b8      	ldr	r0, [r7, #24]
 8003a10:	f7fd f9d2 	bl	8000db8 <__aeabi_fmul>
 8003a14:	4603      	mov	r3, r0
 8003a16:	61bb      	str	r3, [r7, #24]
     s2 *= recipNorm;
 8003a18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f7fd f9cc 	bl	8000db8 <__aeabi_fmul>
 8003a20:	4603      	mov	r3, r0
 8003a22:	617b      	str	r3, [r7, #20]
     s3 *= recipNorm;
 8003a24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a26:	6938      	ldr	r0, [r7, #16]
 8003a28:	f7fd f9c6 	bl	8000db8 <__aeabi_fmul>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	613b      	str	r3, [r7, #16]

     /* Apply feedback step */
     qDot1 -= AHRS->_beta * s0;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	69f9      	ldr	r1, [r7, #28]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd f9be 	bl	8000db8 <__aeabi_fmul>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003a42:	f7fd f8af 	bl	8000ba4 <__aeabi_fsub>
 8003a46:	4603      	mov	r3, r0
 8003a48:	667b      	str	r3, [r7, #100]	; 0x64
     qDot2 -= AHRS->_beta * s1;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	69b9      	ldr	r1, [r7, #24]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fd f9b1 	bl	8000db8 <__aeabi_fmul>
 8003a56:	4603      	mov	r3, r0
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003a5c:	f7fd f8a2 	bl	8000ba4 <__aeabi_fsub>
 8003a60:	4603      	mov	r3, r0
 8003a62:	663b      	str	r3, [r7, #96]	; 0x60
     qDot3 -= AHRS->_beta * s2;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	6979      	ldr	r1, [r7, #20]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd f9a4 	bl	8000db8 <__aeabi_fmul>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4619      	mov	r1, r3
 8003a74:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003a76:	f7fd f895 	bl	8000ba4 <__aeabi_fsub>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
     qDot4 -= AHRS->_beta * s3;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	6939      	ldr	r1, [r7, #16]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd f997 	bl	8000db8 <__aeabi_fmul>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003a90:	f7fd f888 	bl	8000ba4 <__aeabi_fsub>
 8003a94:	4603      	mov	r3, r0
 8003a96:	65bb      	str	r3, [r7, #88]	; 0x58
  }

  /* Integrate rate of change of quaternion to yield quaternion */
  AHRS->_q0 += qDot1 * AHRS->_sampleRate;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	695c      	ldr	r4, [r3, #20]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd f988 	bl	8000db8 <__aeabi_fmul>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7fd f87b 	bl	8000ba8 <__addsf3>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	615a      	str	r2, [r3, #20]
  AHRS->_q1 += qDot2 * AHRS->_sampleRate;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	699c      	ldr	r4, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd f977 	bl	8000db8 <__aeabi_fmul>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4619      	mov	r1, r3
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7fd f86a 	bl	8000ba8 <__addsf3>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	619a      	str	r2, [r3, #24]
  AHRS->_q2 += qDot3 * AHRS->_sampleRate;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	69dc      	ldr	r4, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fd f966 	bl	8000db8 <__aeabi_fmul>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4619      	mov	r1, r3
 8003af0:	4620      	mov	r0, r4
 8003af2:	f7fd f859 	bl	8000ba8 <__addsf3>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461a      	mov	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	61da      	str	r2, [r3, #28]
  AHRS->_q3 += qDot4 * AHRS->_sampleRate;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1c      	ldr	r4, [r3, #32]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd f955 	bl	8000db8 <__aeabi_fmul>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4619      	mov	r1, r3
 8003b12:	4620      	mov	r0, r4
 8003b14:	f7fd f848 	bl	8000ba8 <__addsf3>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Normalise quaternion */
  recipNorm = invSqrt(AHRS->_q0 * AHRS->_q0 + AHRS->_q1 * AHRS->_q1 + AHRS->_q2 * AHRS->_q2 + AHRS->_q3 * AHRS->_q3);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f7fd f944 	bl	8000db8 <__aeabi_fmul>
 8003b30:	4603      	mov	r3, r0
 8003b32:	461c      	mov	r4, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	f7fd f93a 	bl	8000db8 <__aeabi_fmul>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4619      	mov	r1, r3
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f7fd f82d 	bl	8000ba8 <__addsf3>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	461c      	mov	r4, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f7fd f92b 	bl	8000db8 <__aeabi_fmul>
 8003b62:	4603      	mov	r3, r0
 8003b64:	4619      	mov	r1, r3
 8003b66:	4620      	mov	r0, r4
 8003b68:	f7fd f81e 	bl	8000ba8 <__addsf3>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	461c      	mov	r4, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f7fd f91c 	bl	8000db8 <__aeabi_fmul>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4619      	mov	r1, r3
 8003b84:	4620      	mov	r0, r4
 8003b86:	f7fd f80f 	bl	8000ba8 <__addsf3>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f9d9 	bl	8002f44 <invSqrt>
 8003b92:	6578      	str	r0, [r7, #84]	; 0x54
  AHRS->_q0 *= recipNorm;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd f90c 	bl	8000db8 <__aeabi_fmul>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	615a      	str	r2, [r3, #20]
  AHRS->_q1 *= recipNorm;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fd f902 	bl	8000db8 <__aeabi_fmul>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	619a      	str	r2, [r3, #24]
  AHRS->_q2 *= recipNorm;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fd f8f8 	bl	8000db8 <__aeabi_fmul>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	61da      	str	r2, [r3, #28]
  AHRS->_q3 *= recipNorm;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd f8ee 	bl	8000db8 <__aeabi_fmul>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	621a      	str	r2, [r3, #32]

  /* Calculate new angles */
  calculateAngles(AHRS);
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7ff fa07 	bl	8002ff8 <calculateAngles>
}
 8003bea:	bf00      	nop
 8003bec:	376c      	adds	r7, #108	; 0x6c
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd90      	pop	{r4, r7, pc}
 8003bf2:	bf00      	nop

08003bf4 <computeIMU>:
  imu.AHRS[ROLL]  *= 180.0f / AHRSIMU_PI;

}

void computeIMU(void)
{
 8003bf4:	b5b0      	push	{r4, r5, r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af04      	add	r7, sp, #16
	Gyro_getADC();  //240us
 8003bfa:	f002 fcab 	bl	8006554 <Gyro_getADC>
  ACC_getADC(); //240us
 8003bfe:	f002 fd5f 	bl	80066c0 <ACC_getADC>
	Temp_getADC(); //140us
 8003c02:	f003 f92d 	bl	8006e60 <Temp_getADC>
	  imu.Yaw = imu.gyroz;
		#endif

#ifdef IMU_AHRS

	TM_AHRSIMU_UpdateIMU(&AHRS, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accSmooth[ROLL], imu.accSmooth[PITCH], imu.accSmooth[YAW]);
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <computeIMU+0x44>)
 8003c08:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <computeIMU+0x44>)
 8003c0c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <computeIMU+0x44>)
 8003c10:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <computeIMU+0x44>)
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <computeIMU+0x44>)
 8003c18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c1a:	4907      	ldr	r1, [pc, #28]	; (8003c38 <computeIMU+0x44>)
 8003c1c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003c1e:	9102      	str	r1, [sp, #8]
 8003c20:	9201      	str	r2, [sp, #4]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	462b      	mov	r3, r5
 8003c26:	4622      	mov	r2, r4
 8003c28:	4601      	mov	r1, r0
 8003c2a:	4804      	ldr	r0, [pc, #16]	; (8003c3c <computeIMU+0x48>)
 8003c2c:	f7ff fc2e 	bl	800348c <TM_AHRSIMU_UpdateIMU>

	//TM_AHRSIMU_UpdateAHRS(&AHRS, imu.gyroRaw[ROLL], imu.gyroRaw[PITCH], imu.gyroRaw[YAW], imu.accRaw[ROLL], imu.accRaw[PITCH], imu.accRaw[YAW], imu.magSmooth[ROLL], imu.magSmooth[PITCH], imu.magSmooth[YAW]);
#endif
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bdb0      	pop	{r4, r5, r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000e20 	.word	0x20000e20
 8003c3c:	20000c80 	.word	0x20000c80

08003c40 <cliImu>:

void cliImu(cli_args_t *args)
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 2 && args->isStr(0, "show")==true)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d156      	bne.n	8003d02 <cliImu+0xc2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	4930      	ldr	r1, [pc, #192]	; (8003d1c <cliImu+0xdc>)
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	4798      	blx	r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d04e      	beq.n	8003d02 <cliImu+0xc2>
	{
		uint8_t angle;
		uint32_t pre_time;

		angle = args->getData(1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2001      	movs	r0, #1
 8003c6a:	4798      	blx	r3
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	73fb      	strb	r3, [r7, #15]

		pre_time = micros();
 8003c70:	f7fd fc2a 	bl	80014c8 <micros>
 8003c74:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 8003c76:	e03f      	b.n	8003cf8 <cliImu+0xb8>
		{
			if(micros()-pre_time >= 10000)
 8003c78:	f7fd fc26 	bl	80014c8 <micros>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d934      	bls.n	8003cf4 <cliImu+0xb4>
			{
				pre_time = micros();
 8003c8a:	f7fd fc1d 	bl	80014c8 <micros>
 8003c8e:	6138      	str	r0, [r7, #16]
				computeIMU();
 8003c90:	f7ff ffb0 	bl	8003bf4 <computeIMU>
				if(angle == ROLL)
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10c      	bne.n	8003cb4 <cliImu+0x74>
					cliPrintf("ROLL ANGLE : %f\r\n", imu.AHRS[ROLL]);
 8003c9a:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <cliImu+0xe0>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fbdb 	bl	800045c <__aeabi_f2d>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	460c      	mov	r4, r1
 8003caa:	461a      	mov	r2, r3
 8003cac:	4623      	mov	r3, r4
 8003cae:	481d      	ldr	r0, [pc, #116]	; (8003d24 <cliImu+0xe4>)
 8003cb0:	f006 ffd0 	bl	800ac54 <cliPrintf>
				if(angle == PITCH)
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10c      	bne.n	8003cd4 <cliImu+0x94>
					cliPrintf("PITCH ANGLE : %f\r\n", imu.AHRS[PITCH]);
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <cliImu+0xe0>)
 8003cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fc fbcb 	bl	800045c <__aeabi_f2d>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4623      	mov	r3, r4
 8003cce:	4816      	ldr	r0, [pc, #88]	; (8003d28 <cliImu+0xe8>)
 8003cd0:	f006 ffc0 	bl	800ac54 <cliPrintf>
				if(angle == YAW)
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d10c      	bne.n	8003cf4 <cliImu+0xb4>
					cliPrintf("YAW ANGLE : %f\r\n", imu.AHRS[YAW]);
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <cliImu+0xe0>)
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fc fbbb 	bl	800045c <__aeabi_f2d>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	460c      	mov	r4, r1
 8003cea:	461a      	mov	r2, r3
 8003cec:	4623      	mov	r3, r4
 8003cee:	480f      	ldr	r0, [pc, #60]	; (8003d2c <cliImu+0xec>)
 8003cf0:	f006 ffb0 	bl	800ac54 <cliPrintf>
			}
			ret = true;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
		while(cliKeepLoop())
 8003cf8:	f007 f8a0 	bl	800ae3c <cliKeepLoop>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1ba      	bne.n	8003c78 <cliImu+0x38>
		}
	}
	if(ret !=true)
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	f083 0301 	eor.w	r3, r3, #1
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <cliImu+0xd4>
	{
		cliPrintf("imu show angle[ROL=0, PITCH=1, YAW=2]");
 8003d0e:	4808      	ldr	r0, [pc, #32]	; (8003d30 <cliImu+0xf0>)
 8003d10:	f006 ffa0 	bl	800ac54 <cliPrintf>
	}
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd90      	pop	{r4, r7, pc}
 8003d1c:	08019bc8 	.word	0x08019bc8
 8003d20:	20000e20 	.word	0x20000e20
 8003d24:	08019bd0 	.word	0x08019bd0
 8003d28:	08019be4 	.word	0x08019be4
 8003d2c:	08019bf8 	.word	0x08019bf8
 8003d30:	08019c0c 	.word	0x08019c0c

08003d34 <error_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the error LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void error_signal(void)
{
 8003d34:	b598      	push	{r3, r4, r7, lr}
 8003d36:	af00      	add	r7, sp, #0
	if (Error.error >= 100) {ledOn(RGB_RED);}                                                         //When the error is 100 the LED is always on.
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <error_signal+0x94>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b63      	cmp	r3, #99	; 0x63
 8003d3e:	d903      	bls.n	8003d48 <error_signal+0x14>
 8003d40:	2002      	movs	r0, #2
 8003d42:	f007 fd17 	bl	800b774 <ledOn>
			ledOff(RGB_RED);																																//Turn the LED off.
			Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
			Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
		}
	}
}
 8003d46:	e03c      	b.n	8003dc2 <error_signal+0x8e>
	else if (Error.error_timer < millis())
 8003d48:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <error_signal+0x94>)
 8003d4a:	685c      	ldr	r4, [r3, #4]
 8003d4c:	f7fd fbb4 	bl	80014b8 <millis>
 8003d50:	4603      	mov	r3, r0
 8003d52:	429c      	cmp	r4, r3
 8003d54:	d235      	bcs.n	8003dc2 <error_signal+0x8e>
		Error.error_timer = millis() + 250;                                                          //Set the next error_timer interval at 250ms.
 8003d56:	f7fd fbaf 	bl	80014b8 <millis>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	33fa      	adds	r3, #250	; 0xfa
 8003d5e:	4a1a      	ldr	r2, [pc, #104]	; (8003dc8 <error_signal+0x94>)
 8003d60:	6053      	str	r3, [r2, #4]
		if (Error.error > 0 && Error.error_counter > Error.error + 3) Error.error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 8003d62:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <error_signal+0x94>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <error_signal+0x4c>
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <error_signal+0x94>)
 8003d6c:	785b      	ldrb	r3, [r3, #1]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <error_signal+0x94>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	3303      	adds	r3, #3
 8003d76:	429a      	cmp	r2, r3
 8003d78:	dd02      	ble.n	8003d80 <error_signal+0x4c>
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <error_signal+0x94>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	705a      	strb	r2, [r3, #1]
		if (Error.error_counter < Error.error && Error.error_led == 0 && Error.error > 0)//If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <error_signal+0x94>)
 8003d82:	785a      	ldrb	r2, [r3, #1]
 8003d84:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <error_signal+0x94>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d20e      	bcs.n	8003daa <error_signal+0x76>
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <error_signal+0x94>)
 8003d8e:	789b      	ldrb	r3, [r3, #2]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <error_signal+0x76>
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <error_signal+0x94>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <error_signal+0x76>
			ledOn(RGB_RED);																																							//Turn the LED on.
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	f007 fce9 	bl	800b774 <ledOn>
			Error.error_led = 1;                                                                       //Set the LED flag to indicate that the LED is on.
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <error_signal+0x94>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	709a      	strb	r2, [r3, #2]
}
 8003da8:	e00b      	b.n	8003dc2 <error_signal+0x8e>
			ledOff(RGB_RED);																																//Turn the LED off.
 8003daa:	2002      	movs	r0, #2
 8003dac:	f007 fd02 	bl	800b7b4 <ledOff>
			Error.error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <error_signal+0x94>)
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	3301      	adds	r3, #1
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <error_signal+0x94>)
 8003dba:	705a      	strb	r2, [r3, #1]
			Error.error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 8003dbc:	4b02      	ldr	r3, [pc, #8]	; (8003dc8 <error_signal+0x94>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	709a      	strb	r2, [r3, #2]
}
 8003dc2:	bf00      	nop
 8003dc4:	bd98      	pop	{r3, r4, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000acc 	.word	0x20000acc

08003dcc <flight_mode_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the flight mode LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void flight_mode_signal(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
	if (flight_mode_timer < millis())
 8003dd0:	f7fd fb72 	bl	80014b8 <millis>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <flight_mode_signal+0xfc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d935      	bls.n	8003e4a <flight_mode_signal+0x7e>
	{                                                      //If the error_timer value is smaller that the millis() function.
		flight_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8003dde:	f7fd fb6b 	bl	80014b8 <millis>
 8003de2:	4603      	mov	r3, r0
 8003de4:	33fa      	adds	r3, #250	; 0xfa
 8003de6:	4a38      	ldr	r2, [pc, #224]	; (8003ec8 <flight_mode_signal+0xfc>)
 8003de8:	6013      	str	r3, [r2, #0]
		if (f.ARMED > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8003dea:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <flight_mode_signal+0x100>)
 8003dec:	785b      	ldrb	r3, [r3, #1]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <flight_mode_signal+0x3c>
 8003df2:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <flight_mode_signal+0x104>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b36      	ldr	r3, [pc, #216]	; (8003ed4 <flight_mode_signal+0x108>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	3303      	adds	r3, #3
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	dd02      	ble.n	8003e08 <flight_mode_signal+0x3c>
 8003e02:	4b33      	ldr	r3, [pc, #204]	; (8003ed0 <flight_mode_signal+0x104>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
		if (flight_mode_counter < f.ARMED && flight_mode_led == 0 && f.ARMED > 0)					//If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8003e08:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <flight_mode_signal+0x100>)
 8003e0a:	785a      	ldrb	r2, [r3, #1]
 8003e0c:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <flight_mode_signal+0x104>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d90e      	bls.n	8003e32 <flight_mode_signal+0x66>
 8003e14:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <flight_mode_signal+0x10c>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <flight_mode_signal+0x66>
 8003e1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ecc <flight_mode_signal+0x100>)
 8003e1e:	785b      	ldrb	r3, [r3, #1]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d006      	beq.n	8003e32 <flight_mode_signal+0x66>
		{
			ledOn(RGB_GREEN);    																														//Turn the LED on.
 8003e24:	2003      	movs	r0, #3
 8003e26:	f007 fca5 	bl	800b774 <ledOn>
			flight_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8003e2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ed8 <flight_mode_signal+0x10c>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00b      	b.n	8003e4a <flight_mode_signal+0x7e>
		}
		else
		{                                                                                 //If the error flash sequence isn't finisched (error_counter < error) and the LED is on.
			ledOff(RGB_GREEN);																																//Turn the LED off.
 8003e32:	2003      	movs	r0, #3
 8003e34:	f007 fcbe 	bl	800b7b4 <ledOff>
			flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8003e38:	4b25      	ldr	r3, [pc, #148]	; (8003ed0 <flight_mode_signal+0x104>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <flight_mode_signal+0x104>)
 8003e42:	701a      	strb	r2, [r3, #0]
			flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8003e44:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <flight_mode_signal+0x10c>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
		}
	}

	if (headfree_mode_timer < millis())
 8003e4a:	f7fd fb35 	bl	80014b8 <millis>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b22      	ldr	r3, [pc, #136]	; (8003edc <flight_mode_signal+0x110>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d935      	bls.n	8003ec4 <flight_mode_signal+0xf8>
	{                                                      //If the error_timer value is smaller that the millis() function.
		headfree_mode_timer = millis() + 250;                                                    //Set the next error_timer interval at 250ms.
 8003e58:	f7fd fb2e 	bl	80014b8 <millis>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	33fa      	adds	r3, #250	; 0xfa
 8003e60:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <flight_mode_signal+0x110>)
 8003e62:	6013      	str	r3, [r2, #0]
		if (f.HEADFREE_MODE > 0 && headfree_mode_counter > flight_mode + 3) headfree_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8003e64:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <flight_mode_signal+0x100>)
 8003e66:	7b9b      	ldrb	r3, [r3, #14]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <flight_mode_signal+0xb6>
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <flight_mode_signal+0x114>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <flight_mode_signal+0x108>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	3303      	adds	r3, #3
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	dd02      	ble.n	8003e82 <flight_mode_signal+0xb6>
 8003e7c:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <flight_mode_signal+0x114>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
		if (headfree_mode_counter < f.HEADFREE_MODE && headfree_mode_led == 0 && f.HEADFREE_MODE > 0)	//If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <flight_mode_signal+0x100>)
 8003e84:	7b9a      	ldrb	r2, [r3, #14]
 8003e86:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <flight_mode_signal+0x114>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d90e      	bls.n	8003eac <flight_mode_signal+0xe0>
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <flight_mode_signal+0x118>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <flight_mode_signal+0xe0>
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <flight_mode_signal+0x100>)
 8003e98:	7b9b      	ldrb	r3, [r3, #14]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <flight_mode_signal+0xe0>
		{

			ledOn(RGB_BLUE);																																		//Turn the LED on.
 8003e9e:	2004      	movs	r0, #4
 8003ea0:	f007 fc68 	bl	800b774 <ledOn>
			headfree_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <flight_mode_signal+0x118>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
			ledOff(RGB_BLUE);																																		//Turn the LED off.
			headfree_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
			headfree_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
		}
	}
}
 8003eaa:	e00b      	b.n	8003ec4 <flight_mode_signal+0xf8>
			ledOff(RGB_BLUE);																																		//Turn the LED off.
 8003eac:	2004      	movs	r0, #4
 8003eae:	f007 fc81 	bl	800b7b4 <ledOff>
			headfree_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <flight_mode_signal+0x114>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <flight_mode_signal+0x114>)
 8003ebc:	701a      	strb	r2, [r3, #0]
			headfree_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <flight_mode_signal+0x118>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	701a      	strb	r2, [r3, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000cac 	.word	0x20000cac
 8003ecc:	20000ed4 	.word	0x20000ed4
 8003ed0:	20000ca9 	.word	0x20000ca9
 8003ed4:	20000cb4 	.word	0x20000cb4
 8003ed8:	20000ca8 	.word	0x20000ca8
 8003edc:	20000cb0 	.word	0x20000cb0
 8003ee0:	20000cb6 	.word	0x20000cb6
 8003ee4:	20000cb5 	.word	0x20000cb5

08003ee8 <mixerInit>:
    { 4, 0, mixerQuadP },          // MULTITYPE_QUADP
    { 4, 0, mixerQuadX },          // MULTITYPE_QUADX
};

void mixerInit(void)
{
 8003ee8:	b490      	push	{r4, r7}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
	int i;
    for (i = 0; i < 4; i++)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	e00f      	b.n	8003f14 <mixerInit+0x2c>
	  {
			#ifdef QUAD_X
      currentMixer[i] = mixers[QuadX].motor[i];   //0 = QuadP, 1 = QuadX
 8003ef4:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <mixerInit+0x3c>)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	18d1      	adds	r1, r2, r3
 8003efc:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <mixerInit+0x40>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	4413      	add	r3, r2
 8003f04:	461c      	mov	r4, r3
 8003f06:	460b      	mov	r3, r1
 8003f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (i = 0; i < 4; i++)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3301      	adds	r3, #1
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	ddec      	ble.n	8003ef4 <mixerInit+0xc>
			#endif
			#ifdef QUAD_P
      currentMixer[i] = mixers[QuadP].motor[i];   //0 = QuadP, 1 = QuadX
			#endif
		}
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc90      	pop	{r4, r7}
 8003f22:	4770      	bx	lr
 8003f24:	08019fac 	.word	0x08019fac
 8003f28:	200002ec 	.word	0x200002ec

08003f2c <mixTable>:

test_t test;

void mixTable(void)
{
 8003f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	71fb      	strb	r3, [r7, #7]
			if (RC.rcCommand[THROTTLE] > 4000) RC.rcCommand[THROTTLE] = 4000;                                   //We need some room to keep full control at full throttle.
 8003f36:	4b7f      	ldr	r3, [pc, #508]	; (8004134 <mixTable+0x208>)
 8003f38:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8003f3c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003f40:	dd04      	ble.n	8003f4c <mixTable+0x20>
 8003f42:	4b7c      	ldr	r3, [pc, #496]	; (8004134 <mixTable+0x208>)
 8003f44:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003f48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			for (i = 0; i < 4; i++){
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	71fb      	strb	r3, [r7, #7]
 8003f50:	e0e7      	b.n	8004122 <mixTable+0x1f6>
				motor[i] = (RC.rcCommand[THROTTLE] * (int16_t)currentMixer[i].THROTTLE) + ((int16_t)pid.output2[ROLL] * (int16_t)currentMixer[i].ROLL) + ((int16_t)pid.output2[PITCH] * (int16_t)currentMixer[i].PITCH) + ((1 * (int16_t)pid.output2[YAW]) * (int16_t)currentMixer[i].YAW);
 8003f52:	4b78      	ldr	r3, [pc, #480]	; (8004134 <mixTable+0x208>)
 8003f54:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8003f58:	b29c      	uxth	r4, r3
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	4a76      	ldr	r2, [pc, #472]	; (8004138 <mixTable+0x20c>)
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	4413      	add	r3, r2
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fd f903 	bl	8001170 <__aeabi_f2iz>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	b21b      	sxth	r3, r3
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	fb03 f304 	mul.w	r3, r3, r4
 8003f74:	b29c      	uxth	r4, r3
 8003f76:	4b71      	ldr	r3, [pc, #452]	; (800413c <mixTable+0x210>)
 8003f78:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fd f8f7 	bl	8001170 <__aeabi_f2iz>
 8003f82:	4603      	mov	r3, r0
 8003f84:	b21b      	sxth	r3, r3
 8003f86:	b29d      	uxth	r5, r3
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	4a6b      	ldr	r2, [pc, #428]	; (8004138 <mixTable+0x20c>)
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	4413      	add	r3, r2
 8003f90:	3304      	adds	r3, #4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fd f8eb 	bl	8001170 <__aeabi_f2iz>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	b21b      	sxth	r3, r3
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	fb03 f305 	mul.w	r3, r3, r5
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	4423      	add	r3, r4
 8003fa8:	b29c      	uxth	r4, r3
 8003faa:	4b64      	ldr	r3, [pc, #400]	; (800413c <mixTable+0x210>)
 8003fac:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fd f8dd 	bl	8001170 <__aeabi_f2iz>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	b21b      	sxth	r3, r3
 8003fba:	b29d      	uxth	r5, r3
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	4a5e      	ldr	r2, [pc, #376]	; (8004138 <mixTable+0x20c>)
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	4413      	add	r3, r2
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fd f8d1 	bl	8001170 <__aeabi_f2iz>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	b21b      	sxth	r3, r3
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	fb03 f305 	mul.w	r3, r3, r5
 8003fd8:	b29d      	uxth	r5, r3
 8003fda:	4b58      	ldr	r3, [pc, #352]	; (800413c <mixTable+0x210>)
 8003fdc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd f8c5 	bl	8001170 <__aeabi_f2iz>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	b21b      	sxth	r3, r3
 8003fea:	b29e      	uxth	r6, r3
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	4a52      	ldr	r2, [pc, #328]	; (8004138 <mixTable+0x20c>)
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd f8b9 	bl	8001170 <__aeabi_f2iz>
 8003ffe:	4603      	mov	r3, r0
 8004000:	b21b      	sxth	r3, r3
 8004002:	b29b      	uxth	r3, r3
 8004004:	fb03 f306 	mul.w	r3, r3, r6
 8004008:	b29b      	uxth	r3, r3
 800400a:	442b      	add	r3, r5
 800400c:	b29b      	uxth	r3, r3
 800400e:	4423      	add	r3, r4
 8004010:	b29a      	uxth	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	b211      	sxth	r1, r2
 8004016:	4a4a      	ldr	r2, [pc, #296]	; (8004140 <mixTable+0x214>)
 8004018:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#ifdef MOTOR_DC
	  if(motor[i] <    0) motor[i] = 0;
	  if(motor[i] > 2000) motor[i] = 2000;
#endif
#ifdef MOTOR_ESC
	  motor[i] = constrain(motor[i], 2250, 4500);
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	4a48      	ldr	r2, [pc, #288]	; (8004140 <mixTable+0x214>)
 8004020:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004024:	f241 1294 	movw	r2, #4500	; 0x1194
 8004028:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800402c:	4618      	mov	r0, r3
 800402e:	f001 fbdb 	bl	80057e8 <constrain>
 8004032:	4602      	mov	r2, r0
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	b211      	sxth	r1, r2
 8004038:	4a41      	ldr	r2, [pc, #260]	; (8004140 <mixTable+0x214>)
 800403a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#ifdef MOTOR_DC
  if(RC.rcCommand[THROTTLE] < 200 || f.ARMED == 0){
    motor[i] = 0;
#endif
#ifdef MOTOR_ESC
  if(RC.rcCommand[THROTTLE] < 2350 || f.ARMED == 0){
 800403e:	4b3d      	ldr	r3, [pc, #244]	; (8004134 <mixTable+0x208>)
 8004040:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8004044:	f640 122d 	movw	r2, #2349	; 0x92d
 8004048:	4293      	cmp	r3, r2
 800404a:	dd03      	ble.n	8004054 <mixTable+0x128>
 800404c:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <mixTable+0x218>)
 800404e:	785b      	ldrb	r3, [r3, #1]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d12a      	bne.n	80040aa <mixTable+0x17e>
    motor[i] = 2250;
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	4a3a      	ldr	r2, [pc, #232]	; (8004140 <mixTable+0x214>)
 8004058:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800405c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif
		pid.output1[i] = 0;
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	4a36      	ldr	r2, [pc, #216]	; (800413c <mixTable+0x210>)
 8004064:	3340      	adds	r3, #64	; 0x40
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pid.output2[i] = 0;
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	4a32      	ldr	r2, [pc, #200]	; (800413c <mixTable+0x210>)
 8004072:	3342      	adds	r3, #66	; 0x42
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	605a      	str	r2, [r3, #4]
		pid.Iterm[i] = 0;
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	4a2e      	ldr	r2, [pc, #184]	; (800413c <mixTable+0x210>)
 8004082:	3328      	adds	r3, #40	; 0x28
 8004084:	f04f 0100 	mov.w	r1, #0
 8004088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pid.Iterm1[i] = 0;
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	4a2b      	ldr	r2, [pc, #172]	; (800413c <mixTable+0x210>)
 8004090:	332a      	adds	r3, #42	; 0x2a
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	605a      	str	r2, [r3, #4]
		pid.Iterm2[i] = 0;
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	4a27      	ldr	r2, [pc, #156]	; (800413c <mixTable+0x210>)
 80040a0:	332e      	adds	r3, #46	; 0x2e
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
  if(micros() - time_manual_motor >= 500000){
 80040aa:	f7fd fa0d 	bl	80014c8 <micros>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <mixTable+0x21c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	4a25      	ldr	r2, [pc, #148]	; (800414c <mixTable+0x220>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d902      	bls.n	80040c2 <mixTable+0x196>
    Manual_Motor_flag = false;
 80040bc:	4b24      	ldr	r3, [pc, #144]	; (8004150 <mixTable+0x224>)
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
  }
  if(Manual_Motor_flag == true){
 80040c2:	4b23      	ldr	r3, [pc, #140]	; (8004150 <mixTable+0x224>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d114      	bne.n	80040f4 <mixTable+0x1c8>
    TIM4->CCR1 = M_motor[0];  // Actual : REAR_L
 80040ca:	4b22      	ldr	r3, [pc, #136]	; (8004154 <mixTable+0x228>)
 80040cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80040d0:	4b21      	ldr	r3, [pc, #132]	; (8004158 <mixTable+0x22c>)
 80040d2:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR2 = M_motor[1];  // Actual : FRONT_R
 80040d4:	4b1f      	ldr	r3, [pc, #124]	; (8004154 <mixTable+0x228>)
 80040d6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80040da:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <mixTable+0x22c>)
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38
    TIM4->CCR3 = M_motor[2];  // Actual : FRONT_L
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <mixTable+0x228>)
 80040e0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80040e4:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <mixTable+0x22c>)
 80040e6:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM4->CCR4 = M_motor[3];  // Actual : REAR_R
 80040e8:	4b1a      	ldr	r3, [pc, #104]	; (8004154 <mixTable+0x228>)
 80040ea:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80040ee:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <mixTable+0x22c>)
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
 80040f2:	e013      	b.n	800411c <mixTable+0x1f0>
  }else{
    TIM4->CCR1 = motor[0];  // Actual : REAR_L
 80040f4:	4b12      	ldr	r3, [pc, #72]	; (8004140 <mixTable+0x214>)
 80040f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80040fa:	4b17      	ldr	r3, [pc, #92]	; (8004158 <mixTable+0x22c>)
 80040fc:	635a      	str	r2, [r3, #52]	; 0x34
    TIM4->CCR2 = motor[1];  // Actual : FRONT_R
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <mixTable+0x214>)
 8004100:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <mixTable+0x22c>)
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
    TIM4->CCR3 = motor[2];  // Actual : FRONT_L
 8004108:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <mixTable+0x214>)
 800410a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <mixTable+0x22c>)
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM4->CCR4 = motor[3];  // Actual : REAR_R
 8004112:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <mixTable+0x214>)
 8004114:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <mixTable+0x22c>)
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
			for (i = 0; i < 4; i++){
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	3301      	adds	r3, #1
 8004120:	71fb      	strb	r3, [r7, #7]
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	2b03      	cmp	r3, #3
 8004126:	f67f af14 	bls.w	8003f52 <mixTable+0x26>
  }

  }
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004132:	bf00      	nop
 8004134:	20000d40 	.word	0x20000d40
 8004138:	200002ec 	.word	0x200002ec
 800413c:	200009b0 	.word	0x200009b0
 8004140:	20000cc8 	.word	0x20000cc8
 8004144:	20000ed4 	.word	0x20000ed4
 8004148:	20000cc4 	.word	0x20000cc4
 800414c:	0007a11f 	.word	0x0007a11f
 8004150:	200002e8 	.word	0x200002e8
 8004154:	20000cb8 	.word	0x20000cb8
 8004158:	40000800 	.word	0x40000800

0800415c <PIDControlInit>:
static bool AcroPID(pidc_t *pid);
static bool AnglePID(pidc_t *pid);
static bool GpsPID(pidc_t *pid);

void PIDControlInit(pidc_t *pid)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	pid->ts = 0.004f;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a97      	ldr	r2, [pc, #604]	; (80043c4 <PIDControlInit+0x268>)
 8004168:	601a      	str	r2, [r3, #0]
	pid->kp[ROLL]  = 15.0f;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a96      	ldr	r2, [pc, #600]	; (80043c8 <PIDControlInit+0x26c>)
 800416e:	605a      	str	r2, [r3, #4]
	pid->kp[PITCH] = pid->kp[ROLL];
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	609a      	str	r2, [r3, #8]
	pid->kp[YAW]   = 10.0f;  // angle Mode = 8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a94      	ldr	r2, [pc, #592]	; (80043cc <PIDControlInit+0x270>)
 800417c:	60da      	str	r2, [r3, #12]

	pid->ki[ROLL]  = 5.0f;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a93      	ldr	r2, [pc, #588]	; (80043d0 <PIDControlInit+0x274>)
 8004182:	635a      	str	r2, [r3, #52]	; 0x34
	pid->ki[PITCH] = pid->ki[ROLL];
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
	pid->ki[YAW]   = 5.0f;  // angle Mode = 5
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a90      	ldr	r2, [pc, #576]	; (80043d0 <PIDControlInit+0x274>)
 8004190:	63da      	str	r2, [r3, #60]	; 0x3c

	pid->kd[ROLL]  = 4.0f;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004198:	665a      	str	r2, [r3, #100]	; 0x64
	pid->kd[PITCH] = pid->kd[ROLL];
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	669a      	str	r2, [r3, #104]	; 0x68
	pid->kd[YAW]   = 3.0f;  // angle Mode = 6
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a8b      	ldr	r2, [pc, #556]	; (80043d4 <PIDControlInit+0x278>)
 80041a6:	66da      	str	r2, [r3, #108]	; 0x6c

	///////////////////////////////////////
	pid->kp_rate[ROLL]  = 2.5f;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a8b      	ldr	r2, [pc, #556]	; (80043d8 <PIDControlInit+0x27c>)
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
	pid->kp_rate[PITCH] = pid->kp_rate[ROLL];
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->kp_rate[YAW]   = 2.0f;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30

	pid->ki_rate[ROLL]  = 0.5f;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80041c4:	659a      	str	r2, [r3, #88]	; 0x58
	pid->ki_rate[PITCH] = pid->ki_rate[ROLL];
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	65da      	str	r2, [r3, #92]	; 0x5c
	pid->ki_rate[YAW]   = 0.2f;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a82      	ldr	r2, [pc, #520]	; (80043dc <PIDControlInit+0x280>)
 80041d2:	661a      	str	r2, [r3, #96]	; 0x60

	pid->kd_rate[ROLL]  = 0.1f;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a82      	ldr	r2, [pc, #520]	; (80043e0 <PIDControlInit+0x284>)
 80041d8:	67da      	str	r2, [r3, #124]	; 0x7c
	pid->kd_rate[PITCH] = pid->kd_rate[ROLL];
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pid->kd_rate[YAW]   = 0.0f;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	///////////////////////////////////
	pid->kp1[ROLL] = 4.0f;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80041f4:	611a      	str	r2, [r3, #16]
	pid->kp1[PITCH] = 4.0f;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80041fc:	615a      	str	r2, [r3, #20]
	pid->kp1[YAW] = 5.0f;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a73      	ldr	r2, [pc, #460]	; (80043d0 <PIDControlInit+0x274>)
 8004202:	619a      	str	r2, [r3, #24]

	pid->ki1[ROLL] = 0.1f;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a76      	ldr	r2, [pc, #472]	; (80043e0 <PIDControlInit+0x284>)
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
	pid->ki1[PITCH] = 0.1f;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a74      	ldr	r2, [pc, #464]	; (80043e0 <PIDControlInit+0x284>)
 800420e:	645a      	str	r2, [r3, #68]	; 0x44
	pid->ki1[YAW] = 0.0f;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	649a      	str	r2, [r3, #72]	; 0x48
	/////////////////////////////////
	pid->kp2[ROLL] = 2.5f;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a6f      	ldr	r2, [pc, #444]	; (80043d8 <PIDControlInit+0x27c>)
 800421c:	61da      	str	r2, [r3, #28]
	pid->kp2[PITCH] = 2.5f;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a6d      	ldr	r2, [pc, #436]	; (80043d8 <PIDControlInit+0x27c>)
 8004222:	621a      	str	r2, [r3, #32]
	pid->kp2[YAW] = 2.0f;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

	pid->ki2[ROLL] = 0.5f;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004232:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->ki2[PITCH] = 0.5f;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800423a:	651a      	str	r2, [r3, #80]	; 0x50
	pid->ki2[YAW] = 0.5f;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004242:	655a      	str	r2, [r3, #84]	; 0x54

	pid->kd2[ROLL] = 0.2f;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a65      	ldr	r2, [pc, #404]	; (80043dc <PIDControlInit+0x280>)
 8004248:	671a      	str	r2, [r3, #112]	; 0x70
	pid->kd2[PITCH] = 0.2f;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a63      	ldr	r2, [pc, #396]	; (80043dc <PIDControlInit+0x280>)
 800424e:	675a      	str	r2, [r3, #116]	; 0x74
	pid->kd2[YAW] = 0.0f;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	679a      	str	r2, [r3, #120]	; 0x78
	////////////////////////////////////////

	pid->i1_limit[ROLL] = 5.0f;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a5d      	ldr	r2, [pc, #372]	; (80043d0 <PIDControlInit+0x274>)
 800425c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pid->i1_limit[PITCH] = 5.0f;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a5b      	ldr	r2, [pc, #364]	; (80043d0 <PIDControlInit+0x274>)
 8004264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pid->i1_limit[YAW] = 10.0f;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a58      	ldr	r2, [pc, #352]	; (80043cc <PIDControlInit+0x270>)
 800426c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	pid->i2_limit[ROLL] = 500.0f;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a5c      	ldr	r2, [pc, #368]	; (80043e4 <PIDControlInit+0x288>)
 8004274:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pid->i2_limit[PITCH] = 500.0f;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a5a      	ldr	r2, [pc, #360]	; (80043e4 <PIDControlInit+0x288>)
 800427c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	pid->i2_limit[YAW] = 500.0f;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a58      	ldr	r2, [pc, #352]	; (80043e4 <PIDControlInit+0x288>)
 8004284:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	pid->Iterm[ROLL] = 0.0f ;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pid->Iterm[PITCH] = 0.0f;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pid->Iterm[YAW] = 0.0f;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	pid->Iterm1[ROLL] = 0.0f ;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	pid->Iterm1[PITCH] = 0.0f;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	pid->Iterm1[YAW] = 0.0f;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	pid->Iterm2[ROLL] = 0.0f ;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	pid->Iterm2[PITCH] = 0.0f;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pid->Iterm2[YAW] = 0.0f;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	pid->dInput[ROLL] = 0.0f ;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pid->dInput[PITCH] = 0.0f;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	pid->dInput[YAW] = 0.0f;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	pid->error[ROLL] = 0.0f ;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	pid->error[PITCH] = 0.0f;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pid->error[YAW] = 0.0f;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	pid->pre_error[ROLL] = 0.0f ;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	pid->pre_error[PITCH] = 0.0f;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	pid->pre_error[YAW] = 0.0f;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	pid->pre_deriv[ROLL] = 0.0f ;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	pid->pre_deriv[PITCH] = 0.0f;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	pid->pre_deriv[YAW] = 0.0f;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	pid->lastInput[ROLL] = 0.0f ;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	pid->lastInput[PITCH] = 0.0f;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	pid->lastInput[YAW] = 0.0f;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	pid->output1[ROLL] = 0.0f ;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	pid->output1[PITCH] = 0.0f;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	pid->output1[YAW] = 0.0f;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	pid->output2[ROLL] = 0.0f ;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	pid->output2[PITCH] = 0.0f;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	pid->output2[YAW] = 0.0f;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	pidCal = AcroPID;
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <PIDControlInit+0x28c>)
 80043b6:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <PIDControlInit+0x290>)
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	3b83126f 	.word	0x3b83126f
 80043c8:	41700000 	.word	0x41700000
 80043cc:	41200000 	.word	0x41200000
 80043d0:	40a00000 	.word	0x40a00000
 80043d4:	40400000 	.word	0x40400000
 80043d8:	40200000 	.word	0x40200000
 80043dc:	3e4ccccd 	.word	0x3e4ccccd
 80043e0:	3dcccccd 	.word	0x3dcccccd
 80043e4:	43fa0000 	.word	0x43fa0000
 80043e8:	20000330 	.word	0x20000330
 80043ec:	080046c5 	.word	0x080046c5

080043f0 <Control>:

int16_t  magHold, headFreeModeHold; //[-180;+180]

void Control(pidc_t *pid)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b08b      	sub	sp, #44	; 0x2c
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	pidc_t *pid_handle = pid;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24

	dt_recip = 1/pid->ts;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4619      	mov	r1, r3
 8004402:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004406:	f7fc fd8b 	bl	8000f20 <__aeabi_fdiv>
 800440a:	4603      	mov	r3, r0
 800440c:	461a      	mov	r2, r3
 800440e:	4b9e      	ldr	r3, [pc, #632]	; (8004688 <Control+0x298>)
 8004410:	601a      	str	r2, [r3, #0]

	if(!f.ARMED){
 8004412:	4b9e      	ldr	r3, [pc, #632]	; (800468c <Control+0x29c>)
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10c      	bne.n	8004434 <Control+0x44>
		headFreeModeHold = imu.actual_compass_heading;
 800441a:	4b9d      	ldr	r3, [pc, #628]	; (8004690 <Control+0x2a0>)
 800441c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004420:	b21a      	sxth	r2, r3
 8004422:	4b9c      	ldr	r3, [pc, #624]	; (8004694 <Control+0x2a4>)
 8004424:	801a      	strh	r2, [r3, #0]
		imu.yawheadinghold = imu.actual_compass_heading;
 8004426:	4b9a      	ldr	r3, [pc, #616]	; (8004690 <Control+0x2a0>)
 8004428:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800442c:	b21a      	sxth	r2, r3
 800442e:	4b98      	ldr	r3, [pc, #608]	; (8004690 <Control+0x2a0>)
 8004430:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	}

	//TODO: split cos_yaw calculations into two phases (X and Y)
	if (( f.GPS_MODE != GPS_MODE_NONE ) && GPS.fixquality )
 8004434:	4b95      	ldr	r3, [pc, #596]	; (800468c <Control+0x29c>)
 8004436:	7adb      	ldrb	r3, [r3, #11]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8095 	beq.w	8004568 <Control+0x178>
 800443e:	4b96      	ldr	r3, [pc, #600]	; (8004698 <Control+0x2a8>)
 8004440:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 808f 	beq.w	8004568 <Control+0x178>
	{
		float sin_yaw_y = sin(imu.actual_compass_heading*0.0174532925f);
 800444a:	4b91      	ldr	r3, [pc, #580]	; (8004690 <Control+0x2a0>)
 800444c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004450:	4618      	mov	r0, r3
 8004452:	f7fc fc5d 	bl	8000d10 <__aeabi_i2f>
 8004456:	4603      	mov	r3, r0
 8004458:	4990      	ldr	r1, [pc, #576]	; (800469c <Control+0x2ac>)
 800445a:	4618      	mov	r0, r3
 800445c:	f7fc fcac 	bl	8000db8 <__aeabi_fmul>
 8004460:	4603      	mov	r3, r0
 8004462:	4618      	mov	r0, r3
 8004464:	f7fb fffa 	bl	800045c <__aeabi_f2d>
 8004468:	4603      	mov	r3, r0
 800446a:	460c      	mov	r4, r1
 800446c:	4618      	mov	r0, r3
 800446e:	4621      	mov	r1, r4
 8004470:	f011 f8f8 	bl	8015664 <sin>
 8004474:	4603      	mov	r3, r0
 8004476:	460c      	mov	r4, r1
 8004478:	4618      	mov	r0, r3
 800447a:	4621      	mov	r1, r4
 800447c:	f7fc fb3e 	bl	8000afc <__aeabi_d2f>
 8004480:	4603      	mov	r3, r0
 8004482:	623b      	str	r3, [r7, #32]
		float cos_yaw_x = cos(imu.actual_compass_heading*0.0174532925f);
 8004484:	4b82      	ldr	r3, [pc, #520]	; (8004690 <Control+0x2a0>)
 8004486:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc fc40 	bl	8000d10 <__aeabi_i2f>
 8004490:	4603      	mov	r3, r0
 8004492:	4982      	ldr	r1, [pc, #520]	; (800469c <Control+0x2ac>)
 8004494:	4618      	mov	r0, r3
 8004496:	f7fc fc8f 	bl	8000db8 <__aeabi_fmul>
 800449a:	4603      	mov	r3, r0
 800449c:	4618      	mov	r0, r3
 800449e:	f7fb ffdd 	bl	800045c <__aeabi_f2d>
 80044a2:	4603      	mov	r3, r0
 80044a4:	460c      	mov	r4, r1
 80044a6:	4618      	mov	r0, r3
 80044a8:	4621      	mov	r1, r4
 80044aa:	f011 f8a5 	bl	80155f8 <cos>
 80044ae:	4603      	mov	r3, r0
 80044b0:	460c      	mov	r4, r1
 80044b2:	4618      	mov	r0, r3
 80044b4:	4621      	mov	r1, r4
 80044b6:	f7fc fb21 	bl	8000afc <__aeabi_d2f>
 80044ba:	4603      	mov	r3, r0
 80044bc:	61fb      	str	r3, [r7, #28]
		GPS_angle[ROLL]   = (nav[LON]*cos_yaw_x - nav[LAT]*sin_yaw_y)/10;
 80044be:	4b78      	ldr	r3, [pc, #480]	; (80046a0 <Control+0x2b0>)
 80044c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fc fc23 	bl	8000d10 <__aeabi_i2f>
 80044ca:	4603      	mov	r3, r0
 80044cc:	69f9      	ldr	r1, [r7, #28]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fc fc72 	bl	8000db8 <__aeabi_fmul>
 80044d4:	4603      	mov	r3, r0
 80044d6:	461c      	mov	r4, r3
 80044d8:	4b71      	ldr	r3, [pc, #452]	; (80046a0 <Control+0x2b0>)
 80044da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fc fc16 	bl	8000d10 <__aeabi_i2f>
 80044e4:	4603      	mov	r3, r0
 80044e6:	6a39      	ldr	r1, [r7, #32]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fc fc65 	bl	8000db8 <__aeabi_fmul>
 80044ee:	4603      	mov	r3, r0
 80044f0:	4619      	mov	r1, r3
 80044f2:	4620      	mov	r0, r4
 80044f4:	f7fc fb56 	bl	8000ba4 <__aeabi_fsub>
 80044f8:	4603      	mov	r3, r0
 80044fa:	496a      	ldr	r1, [pc, #424]	; (80046a4 <Control+0x2b4>)
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fc fd0f 	bl	8000f20 <__aeabi_fdiv>
 8004502:	4603      	mov	r3, r0
 8004504:	4618      	mov	r0, r3
 8004506:	f7fc fe33 	bl	8001170 <__aeabi_f2iz>
 800450a:	4603      	mov	r3, r0
 800450c:	b21a      	sxth	r2, r3
 800450e:	4b66      	ldr	r3, [pc, #408]	; (80046a8 <Control+0x2b8>)
 8004510:	801a      	strh	r2, [r3, #0]
		GPS_angle[PITCH]  = (nav[LON]*sin_yaw_y + nav[LAT]*cos_yaw_x)/10;
 8004512:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <Control+0x2b0>)
 8004514:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004518:	4618      	mov	r0, r3
 800451a:	f7fc fbf9 	bl	8000d10 <__aeabi_i2f>
 800451e:	4603      	mov	r3, r0
 8004520:	6a39      	ldr	r1, [r7, #32]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fc fc48 	bl	8000db8 <__aeabi_fmul>
 8004528:	4603      	mov	r3, r0
 800452a:	461c      	mov	r4, r3
 800452c:	4b5c      	ldr	r3, [pc, #368]	; (80046a0 <Control+0x2b0>)
 800452e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc fbec 	bl	8000d10 <__aeabi_i2f>
 8004538:	4603      	mov	r3, r0
 800453a:	69f9      	ldr	r1, [r7, #28]
 800453c:	4618      	mov	r0, r3
 800453e:	f7fc fc3b 	bl	8000db8 <__aeabi_fmul>
 8004542:	4603      	mov	r3, r0
 8004544:	4619      	mov	r1, r3
 8004546:	4620      	mov	r0, r4
 8004548:	f7fc fb2e 	bl	8000ba8 <__addsf3>
 800454c:	4603      	mov	r3, r0
 800454e:	4955      	ldr	r1, [pc, #340]	; (80046a4 <Control+0x2b4>)
 8004550:	4618      	mov	r0, r3
 8004552:	f7fc fce5 	bl	8000f20 <__aeabi_fdiv>
 8004556:	4603      	mov	r3, r0
 8004558:	4618      	mov	r0, r3
 800455a:	f7fc fe09 	bl	8001170 <__aeabi_f2iz>
 800455e:	4603      	mov	r3, r0
 8004560:	b21a      	sxth	r2, r3
 8004562:	4b51      	ldr	r3, [pc, #324]	; (80046a8 <Control+0x2b8>)
 8004564:	805a      	strh	r2, [r3, #2]
	{
 8004566:	e005      	b.n	8004574 <Control+0x184>
	} else
	{
		GPS_angle[ROLL]  = 0;
 8004568:	4b4f      	ldr	r3, [pc, #316]	; (80046a8 <Control+0x2b8>)
 800456a:	2200      	movs	r2, #0
 800456c:	801a      	strh	r2, [r3, #0]
		GPS_angle[PITCH] = 0;
 800456e:	4b4e      	ldr	r3, [pc, #312]	; (80046a8 <Control+0x2b8>)
 8004570:	2200      	movs	r2, #0
 8004572:	805a      	strh	r2, [r3, #2]
	}

#if defined(HEADFREE)
	if(f.HEADFREE_MODE) { //to optimize
 8004574:	4b45      	ldr	r3, [pc, #276]	; (800468c <Control+0x29c>)
 8004576:	7b9b      	ldrb	r3, [r3, #14]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d065      	beq.n	8004648 <Control+0x258>
		float radDiff = (imu.actual_compass_heading - headFreeModeHold) * 0.0174533f; // where PI/180 ~= 0.0174533
 800457c:	4b44      	ldr	r3, [pc, #272]	; (8004690 <Control+0x2a0>)
 800457e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004582:	4a44      	ldr	r2, [pc, #272]	; (8004694 <Control+0x2a4>)
 8004584:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc fbc0 	bl	8000d10 <__aeabi_i2f>
 8004590:	4603      	mov	r3, r0
 8004592:	4946      	ldr	r1, [pc, #280]	; (80046ac <Control+0x2bc>)
 8004594:	4618      	mov	r0, r3
 8004596:	f7fc fc0f 	bl	8000db8 <__aeabi_fmul>
 800459a:	4603      	mov	r3, r0
 800459c:	61bb      	str	r3, [r7, #24]
		float cosDiff = cosf(radDiff);
 800459e:	69b8      	ldr	r0, [r7, #24]
 80045a0:	f011 f89a 	bl	80156d8 <cosf>
 80045a4:	6178      	str	r0, [r7, #20]
		float sinDiff = sinf(radDiff);
 80045a6:	69b8      	ldr	r0, [r7, #24]
 80045a8:	f011 f904 	bl	80157b4 <sinf>
 80045ac:	6138      	str	r0, [r7, #16]
		int16_t rcCommand_PITCH = RC.rcCommand[PITCH]*cosDiff + RC.rcCommand[ROLL]*sinDiff;
 80045ae:	4b40      	ldr	r3, [pc, #256]	; (80046b0 <Control+0x2c0>)
 80045b0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fc fbab 	bl	8000d10 <__aeabi_i2f>
 80045ba:	4603      	mov	r3, r0
 80045bc:	6979      	ldr	r1, [r7, #20]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc fbfa 	bl	8000db8 <__aeabi_fmul>
 80045c4:	4603      	mov	r3, r0
 80045c6:	461c      	mov	r4, r3
 80045c8:	4b39      	ldr	r3, [pc, #228]	; (80046b0 <Control+0x2c0>)
 80045ca:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fc fb9e 	bl	8000d10 <__aeabi_i2f>
 80045d4:	4603      	mov	r3, r0
 80045d6:	6939      	ldr	r1, [r7, #16]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fc fbed 	bl	8000db8 <__aeabi_fmul>
 80045de:	4603      	mov	r3, r0
 80045e0:	4619      	mov	r1, r3
 80045e2:	4620      	mov	r0, r4
 80045e4:	f7fc fae0 	bl	8000ba8 <__addsf3>
 80045e8:	4603      	mov	r3, r0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc fdc0 	bl	8001170 <__aeabi_f2iz>
 80045f0:	4603      	mov	r3, r0
 80045f2:	81fb      	strh	r3, [r7, #14]
		RC.rcCommand[ROLL] =  RC.rcCommand[ROLL]*cosDiff - RC.rcCommand[PITCH]*sinDiff;
 80045f4:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <Control+0x2c0>)
 80045f6:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fc fb88 	bl	8000d10 <__aeabi_i2f>
 8004600:	4603      	mov	r3, r0
 8004602:	6979      	ldr	r1, [r7, #20]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fc fbd7 	bl	8000db8 <__aeabi_fmul>
 800460a:	4603      	mov	r3, r0
 800460c:	461c      	mov	r4, r3
 800460e:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <Control+0x2c0>)
 8004610:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8004614:	4618      	mov	r0, r3
 8004616:	f7fc fb7b 	bl	8000d10 <__aeabi_i2f>
 800461a:	4603      	mov	r3, r0
 800461c:	6939      	ldr	r1, [r7, #16]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fc fbca 	bl	8000db8 <__aeabi_fmul>
 8004624:	4603      	mov	r3, r0
 8004626:	4619      	mov	r1, r3
 8004628:	4620      	mov	r0, r4
 800462a:	f7fc fabb 	bl	8000ba4 <__aeabi_fsub>
 800462e:	4603      	mov	r3, r0
 8004630:	4618      	mov	r0, r3
 8004632:	f7fc fd9d 	bl	8001170 <__aeabi_f2iz>
 8004636:	4603      	mov	r3, r0
 8004638:	b21a      	sxth	r2, r3
 800463a:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <Control+0x2c0>)
 800463c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		RC.rcCommand[PITCH] = rcCommand_PITCH;
 8004640:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <Control+0x2c0>)
 8004642:	89fb      	ldrh	r3, [r7, #14]
 8004644:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
	}
#endif
	if(f.ACRO_MODE){
 8004648:	4b10      	ldr	r3, [pc, #64]	; (800468c <Control+0x29c>)
 800464a:	79db      	ldrb	r3, [r3, #7]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <Control+0x268>
		pidCal = AcroPID;
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <Control+0x2c4>)
 8004652:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <Control+0x2c8>)
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	e00e      	b.n	8004676 <Control+0x286>
	}else if(f.ANGLE_MODE){
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <Control+0x29c>)
 800465a:	795b      	ldrb	r3, [r3, #5]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <Control+0x278>
		pidCal = AnglePID;
 8004660:	4b14      	ldr	r3, [pc, #80]	; (80046b4 <Control+0x2c4>)
 8004662:	4a16      	ldr	r2, [pc, #88]	; (80046bc <Control+0x2cc>)
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e006      	b.n	8004676 <Control+0x286>
	}else if(f.GPS_HOLD_MODE){
 8004668:	4b08      	ldr	r3, [pc, #32]	; (800468c <Control+0x29c>)
 800466a:	7b5b      	ldrb	r3, [r3, #13]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <Control+0x286>
		pidCal = GpsPID;
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <Control+0x2c4>)
 8004672:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <Control+0x2d0>)
 8004674:	601a      	str	r2, [r3, #0]
	}

	pidCal(pid_handle);
 8004676:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <Control+0x2c4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800467c:	4798      	blx	r3
}
 800467e:	bf00      	nop
 8004680:	372c      	adds	r7, #44	; 0x2c
 8004682:	46bd      	mov	sp, r7
 8004684:	bd90      	pop	{r4, r7, pc}
 8004686:	bf00      	nop
 8004688:	2000032c 	.word	0x2000032c
 800468c:	20000ed4 	.word	0x20000ed4
 8004690:	20000e20 	.word	0x20000e20
 8004694:	20000cd2 	.word	0x20000cd2
 8004698:	20000b78 	.word	0x20000b78
 800469c:	3c8efa35 	.word	0x3c8efa35
 80046a0:	20000b30 	.word	0x20000b30
 80046a4:	41200000 	.word	0x41200000
 80046a8:	2000027c 	.word	0x2000027c
 80046ac:	3c8efa39 	.word	0x3c8efa39
 80046b0:	20000d40 	.word	0x20000d40
 80046b4:	20000330 	.word	0x20000330
 80046b8:	080046c5 	.word	0x080046c5
 80046bc:	08004b21 	.word	0x08004b21
 80046c0:	0800517d 	.word	0x0800517d

080046c4 <AcroPID>:

bool AcroPID(pidc_t *pid)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	bool ret = true;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]

	pid->error[ROLL] = RC.rcCommand[ROLL] - imu.gyroRaw[ROLL];
 80046d0:	4ba3      	ldr	r3, [pc, #652]	; (8004960 <AcroPID+0x29c>)
 80046d2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fc fb1a 	bl	8000d10 <__aeabi_i2f>
 80046dc:	4602      	mov	r2, r0
 80046de:	4ba1      	ldr	r3, [pc, #644]	; (8004964 <AcroPID+0x2a0>)
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	4619      	mov	r1, r3
 80046e4:	4610      	mov	r0, r2
 80046e6:	f7fc fa5d 	bl	8000ba4 <__aeabi_fsub>
 80046ea:	4603      	mov	r3, r0
 80046ec:	461a      	mov	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	pid->Iterm[ROLL] += pid->error[ROLL] * pid->ts;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f7fc fb56 	bl	8000db8 <__aeabi_fmul>
 800470c:	4603      	mov	r3, r0
 800470e:	4619      	mov	r1, r3
 8004710:	4620      	mov	r0, r4
 8004712:	f7fc fa49 	bl	8000ba8 <__addsf3>
 8004716:	4603      	mov	r3, r0
 8004718:	461a      	mov	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	if(pid->Iterm[ROLL] > I_MAX) pid->Iterm[ROLL] = I_MAX;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004726:	4990      	ldr	r1, [pc, #576]	; (8004968 <AcroPID+0x2a4>)
 8004728:	4618      	mov	r0, r3
 800472a:	f7fc fd01 	bl	8001130 <__aeabi_fcmpgt>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <AcroPID+0x7a>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a8c      	ldr	r2, [pc, #560]	; (8004968 <AcroPID+0x2a4>)
 8004738:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800473c:	e00d      	b.n	800475a <AcroPID+0x96>
	else if(pid->Iterm[ROLL] < -I_MAX) pid->Iterm[ROLL] = -I_MAX;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004744:	4989      	ldr	r1, [pc, #548]	; (800496c <AcroPID+0x2a8>)
 8004746:	4618      	mov	r0, r3
 8004748:	f7fc fcd4 	bl	80010f4 <__aeabi_fcmplt>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <AcroPID+0x96>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a85      	ldr	r2, [pc, #532]	; (800496c <AcroPID+0x2a8>)
 8004756:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pid->dInput[ROLL] = (pid->error[ROLL] - pid->pre_error[ROLL])  / pid->ts;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f7fc fa1b 	bl	8000ba4 <__aeabi_fsub>
 800476e:	4603      	mov	r3, r0
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f7fc fbd1 	bl	8000f20 <__aeabi_fdiv>
 800477e:	4603      	mov	r3, r0
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	/*Compute PID Output*/
	pid->output2[ROLL] = (pid->kp_rate[ROLL] * pid->error[ROLL]) + (pid->ki_rate[ROLL] * pid->Iterm[ROLL]) + (pid->kd_rate[ROLL] * pid->dInput[ROLL]);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004792:	4619      	mov	r1, r3
 8004794:	4610      	mov	r0, r2
 8004796:	f7fc fb0f 	bl	8000db8 <__aeabi_fmul>
 800479a:	4603      	mov	r3, r0
 800479c:	461c      	mov	r4, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f7fc fb04 	bl	8000db8 <__aeabi_fmul>
 80047b0:	4603      	mov	r3, r0
 80047b2:	4619      	mov	r1, r3
 80047b4:	4620      	mov	r0, r4
 80047b6:	f7fc f9f7 	bl	8000ba8 <__addsf3>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461c      	mov	r4, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f7fc faf4 	bl	8000db8 <__aeabi_fmul>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4619      	mov	r1, r3
 80047d4:	4620      	mov	r0, r4
 80047d6:	f7fc f9e7 	bl	8000ba8 <__addsf3>
 80047da:	4603      	mov	r3, r0
 80047dc:	461a      	mov	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	if(pid->output2[ROLL] > OUT_MAX) pid->output2[ROLL] = OUT_MAX;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80047ea:	4961      	ldr	r1, [pc, #388]	; (8004970 <AcroPID+0x2ac>)
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fc fc9f 	bl	8001130 <__aeabi_fcmpgt>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <AcroPID+0x13e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a5d      	ldr	r2, [pc, #372]	; (8004970 <AcroPID+0x2ac>)
 80047fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8004800:	e00d      	b.n	800481e <AcroPID+0x15a>
	else if(pid->output2[ROLL] < -OUT_MAX) pid->output2[ROLL] = -OUT_MAX;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004808:	495a      	ldr	r1, [pc, #360]	; (8004974 <AcroPID+0x2b0>)
 800480a:	4618      	mov	r0, r3
 800480c:	f7fc fc72 	bl	80010f4 <__aeabi_fcmplt>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <AcroPID+0x15a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a56      	ldr	r2, [pc, #344]	; (8004974 <AcroPID+0x2b0>)
 800481a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	/*Remember some variables for next time*/
	pid->pre_error[ROLL] = pid->error[ROLL];
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	/////////////////////////////////////////////////////////////////////////////////////////////////

	/*Compute all the working error variables*/
	pid->error[PITCH] = RC.rcCommand[PITCH] - imu.gyroRaw[PITCH];
 800482a:	4b4d      	ldr	r3, [pc, #308]	; (8004960 <AcroPID+0x29c>)
 800482c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8004830:	4618      	mov	r0, r3
 8004832:	f7fc fa6d 	bl	8000d10 <__aeabi_i2f>
 8004836:	4602      	mov	r2, r0
 8004838:	4b4a      	ldr	r3, [pc, #296]	; (8004964 <AcroPID+0x2a0>)
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f7fc f9b0 	bl	8000ba4 <__aeabi_fsub>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pid->Iterm[PITCH] += pid->error[PITCH] * pid->ts;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7fc faa9 	bl	8000db8 <__aeabi_fmul>
 8004866:	4603      	mov	r3, r0
 8004868:	4619      	mov	r1, r3
 800486a:	4620      	mov	r0, r4
 800486c:	f7fc f99c 	bl	8000ba8 <__addsf3>
 8004870:	4603      	mov	r3, r0
 8004872:	461a      	mov	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	if(pid->Iterm[PITCH] > I_MAX) pid->Iterm[PITCH] = I_MAX;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004880:	4939      	ldr	r1, [pc, #228]	; (8004968 <AcroPID+0x2a4>)
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fc54 	bl	8001130 <__aeabi_fcmpgt>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d004      	beq.n	8004898 <AcroPID+0x1d4>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a35      	ldr	r2, [pc, #212]	; (8004968 <AcroPID+0x2a4>)
 8004892:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8004896:	e00d      	b.n	80048b4 <AcroPID+0x1f0>
	else if(pid->Iterm[PITCH] < -I_MAX) pid->Iterm[PITCH] = -I_MAX;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800489e:	4933      	ldr	r1, [pc, #204]	; (800496c <AcroPID+0x2a8>)
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fc fc27 	bl	80010f4 <__aeabi_fcmplt>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <AcroPID+0x1f0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a2f      	ldr	r2, [pc, #188]	; (800496c <AcroPID+0x2a8>)
 80048b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pid->dInput[PITCH] = (pid->error[PITCH] - pid->pre_error[PITCH]) / pid->ts;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f7fc f96e 	bl	8000ba4 <__aeabi_fsub>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461a      	mov	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f7fc fb24 	bl	8000f20 <__aeabi_fdiv>
 80048d8:	4603      	mov	r3, r0
 80048da:	461a      	mov	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	/*Compute PID Output*/
	pid->output2[PITCH] = (pid->kp_rate[PITCH] * pid->error[PITCH]) + (pid->ki_rate[PITCH] *  pid->Iterm[PITCH]) + (pid->kd_rate[PITCH] * pid->dInput[PITCH]);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f7fc fa62 	bl	8000db8 <__aeabi_fmul>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461c      	mov	r4, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f7fc fa57 	bl	8000db8 <__aeabi_fmul>
 800490a:	4603      	mov	r3, r0
 800490c:	4619      	mov	r1, r3
 800490e:	4620      	mov	r0, r4
 8004910:	f7fc f94a 	bl	8000ba8 <__addsf3>
 8004914:	4603      	mov	r3, r0
 8004916:	461c      	mov	r4, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f7fc fa46 	bl	8000db8 <__aeabi_fmul>
 800492c:	4603      	mov	r3, r0
 800492e:	4619      	mov	r1, r3
 8004930:	4620      	mov	r0, r4
 8004932:	f7fc f939 	bl	8000ba8 <__addsf3>
 8004936:	4603      	mov	r3, r0
 8004938:	461a      	mov	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	if(pid->output2[PITCH] > OUT_MAX) pid->output2[PITCH] = OUT_MAX;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004946:	490a      	ldr	r1, [pc, #40]	; (8004970 <AcroPID+0x2ac>)
 8004948:	4618      	mov	r0, r3
 800494a:	f7fc fbf1 	bl	8001130 <__aeabi_fcmpgt>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d011      	beq.n	8004978 <AcroPID+0x2b4>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a06      	ldr	r2, [pc, #24]	; (8004970 <AcroPID+0x2ac>)
 8004958:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800495c:	e01a      	b.n	8004994 <AcroPID+0x2d0>
 800495e:	bf00      	nop
 8004960:	20000d40 	.word	0x20000d40
 8004964:	20000e20 	.word	0x20000e20
 8004968:	43fa0000 	.word	0x43fa0000
 800496c:	c3fa0000 	.word	0xc3fa0000
 8004970:	447a0000 	.word	0x447a0000
 8004974:	c47a0000 	.word	0xc47a0000
	else if(pid->output2[PITCH] < -OUT_MAX) pid->output2[PITCH] = -OUT_MAX;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800497e:	4962      	ldr	r1, [pc, #392]	; (8004b08 <AcroPID+0x444>)
 8004980:	4618      	mov	r0, r3
 8004982:	f7fc fbb7 	bl	80010f4 <__aeabi_fcmplt>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <AcroPID+0x2d0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a5e      	ldr	r2, [pc, #376]	; (8004b08 <AcroPID+0x444>)
 8004990:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/*Remember some variables for next time*/
	pid->pre_error[PITCH] = pid->error[PITCH];
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	//////////////////////////////////////////////////////////////////////////////////////////////////

	/*Compute all the working error variables*/
	pid->error[YAW] = RC.rcCommand[YAW] - imu.gyroRaw[YAW];
 80049a0:	4b5a      	ldr	r3, [pc, #360]	; (8004b0c <AcroPID+0x448>)
 80049a2:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc f9b2 	bl	8000d10 <__aeabi_i2f>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4b58      	ldr	r3, [pc, #352]	; (8004b10 <AcroPID+0x44c>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f7fc f8f5 	bl	8000ba4 <__aeabi_fsub>
 80049ba:	4603      	mov	r3, r0
 80049bc:	461a      	mov	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	pid->Iterm[YAW] += pid->error[YAW] * pid->ts;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4619      	mov	r1, r3
 80049d6:	4610      	mov	r0, r2
 80049d8:	f7fc f9ee 	bl	8000db8 <__aeabi_fmul>
 80049dc:	4603      	mov	r3, r0
 80049de:	4619      	mov	r1, r3
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7fc f8e1 	bl	8000ba8 <__addsf3>
 80049e6:	4603      	mov	r3, r0
 80049e8:	461a      	mov	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	if(pid->Iterm[YAW] > I_MAX) pid->Iterm[YAW] = I_MAX;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049f6:	4947      	ldr	r1, [pc, #284]	; (8004b14 <AcroPID+0x450>)
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fc fb99 	bl	8001130 <__aeabi_fcmpgt>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d004      	beq.n	8004a0e <AcroPID+0x34a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a43      	ldr	r2, [pc, #268]	; (8004b14 <AcroPID+0x450>)
 8004a08:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004a0c:	e00d      	b.n	8004a2a <AcroPID+0x366>
	else if(pid->Iterm[YAW] < -I_MAX) pid->Iterm[YAW] = -I_MAX;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a14:	4940      	ldr	r1, [pc, #256]	; (8004b18 <AcroPID+0x454>)
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fc fb6c 	bl	80010f4 <__aeabi_fcmplt>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <AcroPID+0x366>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a3c      	ldr	r2, [pc, #240]	; (8004b18 <AcroPID+0x454>)
 8004a26:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pid->dInput[YAW] = (pid->error[YAW] - pid->pre_error[YAW]) / pid->ts;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a36:	4619      	mov	r1, r3
 8004a38:	4610      	mov	r0, r2
 8004a3a:	f7fc f8b3 	bl	8000ba4 <__aeabi_fsub>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	461a      	mov	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4619      	mov	r1, r3
 8004a48:	4610      	mov	r0, r2
 8004a4a:	f7fc fa69 	bl	8000f20 <__aeabi_fdiv>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	461a      	mov	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	/*Compute PID Output*/
	pid->output2[YAW] = (pid->kp_rate[YAW] * pid->error[YAW]) + (pid->ki_rate[YAW] * pid->Iterm[YAW]) + (pid->kd_rate[YAW] * pid->dInput[YAW]);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f7fc f9a7 	bl	8000db8 <__aeabi_fmul>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	461c      	mov	r4, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f7fc f99c 	bl	8000db8 <__aeabi_fmul>
 8004a80:	4603      	mov	r3, r0
 8004a82:	4619      	mov	r1, r3
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7fc f88f 	bl	8000ba8 <__addsf3>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	461c      	mov	r4, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7fc f98b 	bl	8000db8 <__aeabi_fmul>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7fc f87e 	bl	8000ba8 <__addsf3>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461a      	mov	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004abc:	4917      	ldr	r1, [pc, #92]	; (8004b1c <AcroPID+0x458>)
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fc fb36 	bl	8001130 <__aeabi_fcmpgt>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d004      	beq.n	8004ad4 <AcroPID+0x410>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <AcroPID+0x458>)
 8004ace:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004ad2:	e00d      	b.n	8004af0 <AcroPID+0x42c>
	else if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004ada:	490b      	ldr	r1, [pc, #44]	; (8004b08 <AcroPID+0x444>)
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fc fb09 	bl	80010f4 <__aeabi_fcmplt>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <AcroPID+0x42c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <AcroPID+0x444>)
 8004aec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	/*Remember some variables for next time*/
	pid->pre_error[YAW] = pid->error[YAW];//imu.Yaw
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	return ret;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd90      	pop	{r4, r7, pc}
 8004b06:	bf00      	nop
 8004b08:	c47a0000 	.word	0xc47a0000
 8004b0c:	20000d40 	.word	0x20000d40
 8004b10:	20000e20 	.word	0x20000e20
 8004b14:	43fa0000 	.word	0x43fa0000
 8004b18:	c3fa0000 	.word	0xc3fa0000
 8004b1c:	447a0000 	.word	0x447a0000

08004b20 <AnglePID>:

bool AnglePID(pidc_t *pid)
{
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	uint8_t ret = true;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
	int axis;
	float error, deriv;
	//axis pid
	for(axis = 0; axis < 2; axis++){
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e171      	b.n	8004e16 <AnglePID+0x2f6>
		error = RC.rcCommand[axis] - imu.AHRS[axis];
 8004b32:	4a68      	ldr	r2, [pc, #416]	; (8004cd4 <AnglePID+0x1b4>)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	3328      	adds	r3, #40	; 0x28
 8004b38:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fc f8e7 	bl	8000d10 <__aeabi_i2f>
 8004b42:	4a65      	ldr	r2, [pc, #404]	; (8004cd8 <AnglePID+0x1b8>)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	3322      	adds	r3, #34	; 0x22
 8004b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	f7fc f829 	bl	8000ba4 <__aeabi_fsub>
 8004b52:	4603      	mov	r3, r0
 8004b54:	613b      	str	r3, [r7, #16]
		pid->Iterm1[axis] += error * pid->ts;
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	332a      	adds	r3, #42	; 0x2a
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	685c      	ldr	r4, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6939      	ldr	r1, [r7, #16]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fc f925 	bl	8000db8 <__aeabi_fmul>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4619      	mov	r1, r3
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7fc f818 	bl	8000ba8 <__addsf3>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	332a      	adds	r3, #42	; 0x2a
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	6059      	str	r1, [r3, #4]
		if(pid->Iterm1[axis] > pid->i1_limit[axis]) pid->Iterm1[axis] = pid->i1_limit[axis];
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	332a      	adds	r3, #42	; 0x2a
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	6858      	ldr	r0, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	3222      	adds	r2, #34	; 0x22
 8004b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	f7fc fac6 	bl	8001130 <__aeabi_fcmpgt>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <AnglePID+0xa2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	3222      	adds	r2, #34	; 0x22
 8004bb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	332a      	adds	r3, #42	; 0x2a
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	605a      	str	r2, [r3, #4]
 8004bc0:	e01f      	b.n	8004c02 <AnglePID+0xe2>
		else if(pid->Iterm1[axis] < -pid->i1_limit[axis]) pid->Iterm1[axis] = -pid->i1_limit[axis];
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	332a      	adds	r3, #42	; 0x2a
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	6858      	ldr	r0, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	3222      	adds	r2, #34	; 0x22
 8004bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004bdc:	4619      	mov	r1, r3
 8004bde:	f7fc fa89 	bl	80010f4 <__aeabi_fcmplt>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00c      	beq.n	8004c02 <AnglePID+0xe2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	3222      	adds	r2, #34	; 0x22
 8004bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	332a      	adds	r3, #42	; 0x2a
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	605a      	str	r2, [r3, #4]
		pid->output1[axis] = pid->kp1[axis]*error + pid->ki1[axis]*pid->Iterm1[axis];
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	3204      	adds	r2, #4
 8004c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c0c:	6939      	ldr	r1, [r7, #16]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fc f8d2 	bl	8000db8 <__aeabi_fmul>
 8004c14:	4603      	mov	r3, r0
 8004c16:	461c      	mov	r4, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	3210      	adds	r2, #16
 8004c1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	332a      	adds	r3, #42	; 0x2a
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	f7fc f8c2 	bl	8000db8 <__aeabi_fmul>
 8004c34:	4603      	mov	r3, r0
 8004c36:	4619      	mov	r1, r3
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f7fb ffb5 	bl	8000ba8 <__addsf3>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4619      	mov	r1, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	3240      	adds	r2, #64	; 0x40
 8004c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		error = pid->output1[axis] - imu.gyroRaw[axis];
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	3240      	adds	r2, #64	; 0x40
 8004c52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004c56:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <AnglePID+0x1b8>)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	330e      	adds	r3, #14
 8004c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c60:	4619      	mov	r1, r3
 8004c62:	f7fb ff9f 	bl	8000ba4 <__aeabi_fsub>
 8004c66:	4603      	mov	r3, r0
 8004c68:	613b      	str	r3, [r7, #16]
		pid->Iterm2[axis] += error * pid->ts;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	322e      	adds	r2, #46	; 0x2e
 8004c70:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6939      	ldr	r1, [r7, #16]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fc f89c 	bl	8000db8 <__aeabi_fmul>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4619      	mov	r1, r3
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7fb ff8f 	bl	8000ba8 <__addsf3>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	322e      	adds	r2, #46	; 0x2e
 8004c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(pid->Iterm2[axis] > pid->i2_limit[axis]) pid->Iterm2[axis] = pid->i2_limit[axis];
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	322e      	adds	r2, #46	; 0x2e
 8004c9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f7fc fa3e 	bl	8001130 <__aeabi_fcmpgt>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d010      	beq.n	8004cdc <AnglePID+0x1bc>
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3324      	adds	r3, #36	; 0x24
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	6859      	ldr	r1, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	322e      	adds	r2, #46	; 0x2e
 8004ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004cd0:	e024      	b.n	8004d1c <AnglePID+0x1fc>
 8004cd2:	bf00      	nop
 8004cd4:	20000d40 	.word	0x20000d40
 8004cd8:	20000e20 	.word	0x20000e20
		else if(pid->Iterm2[axis] < -pid->i2_limit[axis]) pid->Iterm2[axis] = -pid->i2_limit[axis];
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	322e      	adds	r2, #46	; 0x2e
 8004ce2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3324      	adds	r3, #36	; 0x24
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	f7fc f9fc 	bl	80010f4 <__aeabi_fcmplt>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00c      	beq.n	8004d1c <AnglePID+0x1fc>
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	3324      	adds	r3, #36	; 0x24
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	322e      	adds	r2, #46	; 0x2e
 8004d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		deriv = (error - pid->pre_error[axis])*dt_recip;
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	3336      	adds	r3, #54	; 0x36
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f7fb ff3a 	bl	8000ba4 <__aeabi_fsub>
 8004d30:	4603      	mov	r3, r0
 8004d32:	461a      	mov	r2, r3
 8004d34:	4ba8      	ldr	r3, [pc, #672]	; (8004fd8 <AnglePID+0x4b8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f7fc f83c 	bl	8000db8 <__aeabi_fmul>
 8004d40:	4603      	mov	r3, r0
 8004d42:	60bb      	str	r3, [r7, #8]
		pid->pre_error[axis] = error;
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	3336      	adds	r3, #54	; 0x36
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	605a      	str	r2, [r3, #4]
		pid->output2[axis] = pid->kp2[axis]*error + pid->ki2[axis]*pid->Iterm2[axis] + pid->kd2[axis]*deriv;
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	3306      	adds	r3, #6
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	6939      	ldr	r1, [r7, #16]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fc f829 	bl	8000db8 <__aeabi_fmul>
 8004d66:	4603      	mov	r3, r0
 8004d68:	461c      	mov	r4, r3
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	3312      	adds	r3, #18
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	6858      	ldr	r0, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	322e      	adds	r2, #46	; 0x2e
 8004d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d80:	4619      	mov	r1, r3
 8004d82:	f7fc f819 	bl	8000db8 <__aeabi_fmul>
 8004d86:	4603      	mov	r3, r0
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f7fb ff0c 	bl	8000ba8 <__addsf3>
 8004d90:	4603      	mov	r3, r0
 8004d92:	461c      	mov	r4, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	321c      	adds	r2, #28
 8004d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fc f809 	bl	8000db8 <__aeabi_fmul>
 8004da6:	4603      	mov	r3, r0
 8004da8:	4619      	mov	r1, r3
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7fb fefc 	bl	8000ba8 <__addsf3>
 8004db0:	4603      	mov	r3, r0
 8004db2:	4619      	mov	r1, r3
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	3342      	adds	r3, #66	; 0x42
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	6059      	str	r1, [r3, #4]

		if(pid->output2[axis] > OUT_MAX) pid->output2[axis] = OUT_MAX;
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	3342      	adds	r3, #66	; 0x42
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4983      	ldr	r1, [pc, #524]	; (8004fdc <AnglePID+0x4bc>)
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fc f9ae 	bl	8001130 <__aeabi_fcmpgt>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d006      	beq.n	8004de8 <AnglePID+0x2c8>
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	3342      	adds	r3, #66	; 0x42
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	4a7d      	ldr	r2, [pc, #500]	; (8004fdc <AnglePID+0x4bc>)
 8004de6:	605a      	str	r2, [r3, #4]
		if(pid->output2[axis] < -OUT_MAX) pid->output2[axis] = -OUT_MAX;
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	3342      	adds	r3, #66	; 0x42
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	497a      	ldr	r1, [pc, #488]	; (8004fe0 <AnglePID+0x4c0>)
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fc f97c 	bl	80010f4 <__aeabi_fcmplt>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d006      	beq.n	8004e10 <AnglePID+0x2f0>
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	3342      	adds	r3, #66	; 0x42
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	4a74      	ldr	r2, [pc, #464]	; (8004fe0 <AnglePID+0x4c0>)
 8004e0e:	605a      	str	r2, [r3, #4]
	for(axis = 0; axis < 2; axis++){
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	3301      	adds	r3, #1
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	f77f ae8a 	ble.w	8004b32 <AnglePID+0x12>
	}

	if(RC.rcCommand[YAW]>-5 && RC.rcCommand[YAW]<5){
 8004e1e:	4b71      	ldr	r3, [pc, #452]	; (8004fe4 <AnglePID+0x4c4>)
 8004e20:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8004e24:	f113 0f04 	cmn.w	r3, #4
 8004e28:	f2c0 80e6 	blt.w	8004ff8 <AnglePID+0x4d8>
 8004e2c:	4b6d      	ldr	r3, [pc, #436]	; (8004fe4 <AnglePID+0x4c4>)
 8004e2e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	f300 80e0 	bgt.w	8004ff8 <AnglePID+0x4d8>
		error = imu.yawheadinghold - imu.actual_compass_heading;
 8004e38:	4b6b      	ldr	r3, [pc, #428]	; (8004fe8 <AnglePID+0x4c8>)
 8004e3a:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b69      	ldr	r3, [pc, #420]	; (8004fe8 <AnglePID+0x4c8>)
 8004e42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fb ff61 	bl	8000d10 <__aeabi_i2f>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	613b      	str	r3, [r7, #16]
		imu.debug1 = error;
 8004e52:	6938      	ldr	r0, [r7, #16]
 8004e54:	f7fc f98c 	bl	8001170 <__aeabi_f2iz>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	b21a      	sxth	r2, r3
 8004e5c:	4b62      	ldr	r3, [pc, #392]	; (8004fe8 <AnglePID+0x4c8>)
 8004e5e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		if(error > 180) error -= 360;
 8004e62:	4962      	ldr	r1, [pc, #392]	; (8004fec <AnglePID+0x4cc>)
 8004e64:	6938      	ldr	r0, [r7, #16]
 8004e66:	f7fc f963 	bl	8001130 <__aeabi_fcmpgt>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <AnglePID+0x35c>
 8004e70:	495f      	ldr	r1, [pc, #380]	; (8004ff0 <AnglePID+0x4d0>)
 8004e72:	6938      	ldr	r0, [r7, #16]
 8004e74:	f7fb fe96 	bl	8000ba4 <__aeabi_fsub>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	613b      	str	r3, [r7, #16]
		if(error < -180) error += 360;
 8004e7c:	495d      	ldr	r1, [pc, #372]	; (8004ff4 <AnglePID+0x4d4>)
 8004e7e:	6938      	ldr	r0, [r7, #16]
 8004e80:	f7fc f938 	bl	80010f4 <__aeabi_fcmplt>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <AnglePID+0x376>
 8004e8a:	4959      	ldr	r1, [pc, #356]	; (8004ff0 <AnglePID+0x4d0>)
 8004e8c:	6938      	ldr	r0, [r7, #16]
 8004e8e:	f7fb fe8b 	bl	8000ba8 <__addsf3>
 8004e92:	4603      	mov	r3, r0
 8004e94:	613b      	str	r3, [r7, #16]
		imu.debug2 = error;
 8004e96:	6938      	ldr	r0, [r7, #16]
 8004e98:	f7fc f96a 	bl	8001170 <__aeabi_f2iz>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	b21a      	sxth	r2, r3
 8004ea0:	4b51      	ldr	r3, [pc, #324]	; (8004fe8 <AnglePID+0x4c8>)
 8004ea2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		pid->Iterm2[YAW] += error * pid->ts;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6939      	ldr	r1, [r7, #16]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fb ff80 	bl	8000db8 <__aeabi_fmul>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7fb fe73 	bl	8000ba8 <__addsf3>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f7fc f928 	bl	8001130 <__aeabi_fcmpgt>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d006      	beq.n	8004ef4 <AnglePID+0x3d4>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8004ef2:	e016      	b.n	8004f22 <AnglePID+0x402>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f7fc f8f4 	bl	80010f4 <__aeabi_fcmplt>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <AnglePID+0x402>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f18:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	6938      	ldr	r0, [r7, #16]
 8004f2c:	f7fb fe3a 	bl	8000ba4 <__aeabi_fsub>
 8004f30:	4603      	mov	r3, r0
 8004f32:	461a      	mov	r2, r3
 8004f34:	4b28      	ldr	r3, [pc, #160]	; (8004fd8 <AnglePID+0x4b8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fb ff3c 	bl	8000db8 <__aeabi_fmul>
 8004f40:	4603      	mov	r3, r0
 8004f42:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	6939      	ldr	r1, [r7, #16]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb ff30 	bl	8000db8 <__aeabi_fmul>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461c      	mov	r4, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f7fb ff25 	bl	8000db8 <__aeabi_fmul>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4619      	mov	r1, r3
 8004f72:	4620      	mov	r0, r4
 8004f74:	f7fb fe18 	bl	8000ba8 <__addsf3>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461c      	mov	r4, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fb ff18 	bl	8000db8 <__aeabi_fmul>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f7fb fe0b 	bl	8000ba8 <__addsf3>
 8004f92:	4603      	mov	r3, r0
 8004f94:	461a      	mov	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004fa2:	490e      	ldr	r1, [pc, #56]	; (8004fdc <AnglePID+0x4bc>)
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fc f8c3 	bl	8001130 <__aeabi_fcmpgt>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <AnglePID+0x498>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <AnglePID+0x4bc>)
 8004fb4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004fbe:	4908      	ldr	r1, [pc, #32]	; (8004fe0 <AnglePID+0x4c0>)
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fc f897 	bl	80010f4 <__aeabi_fcmplt>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80c2 	beq.w	8005152 <AnglePID+0x632>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a03      	ldr	r2, [pc, #12]	; (8004fe0 <AnglePID+0x4c0>)
 8004fd2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8004fd6:	e0bc      	b.n	8005152 <AnglePID+0x632>
 8004fd8:	2000032c 	.word	0x2000032c
 8004fdc:	447a0000 	.word	0x447a0000
 8004fe0:	c47a0000 	.word	0xc47a0000
 8004fe4:	20000d40 	.word	0x20000d40
 8004fe8:	20000e20 	.word	0x20000e20
 8004fec:	43340000 	.word	0x43340000
 8004ff0:	43b40000 	.word	0x43b40000
 8004ff4:	c3340000 	.word	0xc3340000
	}else{
		error = RC.rcCommand[YAW] - (-imu.gyroRaw[YAW]);
 8004ff8:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <AnglePID+0x648>)
 8004ffa:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb fe86 	bl	8000d10 <__aeabi_i2f>
 8005004:	4602      	mov	r2, r0
 8005006:	4b59      	ldr	r3, [pc, #356]	; (800516c <AnglePID+0x64c>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f7fb fdcb 	bl	8000ba8 <__addsf3>
 8005012:	4603      	mov	r3, r0
 8005014:	613b      	str	r3, [r7, #16]
		pid->Iterm2[YAW] += error * pid->ts;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6939      	ldr	r1, [r7, #16]
 8005022:	4618      	mov	r0, r3
 8005024:	f7fb fec8 	bl	8000db8 <__aeabi_fmul>
 8005028:	4603      	mov	r3, r0
 800502a:	4619      	mov	r1, r3
 800502c:	4620      	mov	r0, r4
 800502e:	f7fb fdbb 	bl	8000ba8 <__addsf3>
 8005032:	4603      	mov	r3, r0
 8005034:	461a      	mov	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f7fc f870 	bl	8001130 <__aeabi_fcmpgt>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <AnglePID+0x544>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8005062:	e016      	b.n	8005092 <AnglePID+0x572>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005070:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f7fc f83c 	bl	80010f4 <__aeabi_fcmplt>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <AnglePID+0x572>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005088:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005098:	4619      	mov	r1, r3
 800509a:	6938      	ldr	r0, [r7, #16]
 800509c:	f7fb fd82 	bl	8000ba4 <__aeabi_fsub>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	4b32      	ldr	r3, [pc, #200]	; (8005170 <AnglePID+0x650>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7fb fe84 	bl	8000db8 <__aeabi_fmul>
 80050b0:	4603      	mov	r3, r0
 80050b2:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	6939      	ldr	r1, [r7, #16]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fb fe78 	bl	8000db8 <__aeabi_fmul>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461c      	mov	r4, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f7fb fe6d 	bl	8000db8 <__aeabi_fmul>
 80050de:	4603      	mov	r3, r0
 80050e0:	4619      	mov	r1, r3
 80050e2:	4620      	mov	r0, r4
 80050e4:	f7fb fd60 	bl	8000ba8 <__addsf3>
 80050e8:	4603      	mov	r3, r0
 80050ea:	461c      	mov	r4, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fb fe60 	bl	8000db8 <__aeabi_fmul>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4619      	mov	r1, r3
 80050fc:	4620      	mov	r0, r4
 80050fe:	f7fb fd53 	bl	8000ba8 <__addsf3>
 8005102:	4603      	mov	r3, r0
 8005104:	461a      	mov	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005112:	4918      	ldr	r1, [pc, #96]	; (8005174 <AnglePID+0x654>)
 8005114:	4618      	mov	r0, r3
 8005116:	f7fc f80b 	bl	8001130 <__aeabi_fcmpgt>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <AnglePID+0x608>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a14      	ldr	r2, [pc, #80]	; (8005174 <AnglePID+0x654>)
 8005124:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800512e:	4912      	ldr	r1, [pc, #72]	; (8005178 <AnglePID+0x658>)
 8005130:	4618      	mov	r0, r3
 8005132:	f7fb ffdf 	bl	80010f4 <__aeabi_fcmplt>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <AnglePID+0x624>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a0e      	ldr	r2, [pc, #56]	; (8005178 <AnglePID+0x658>)
 8005140:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		imu.yawheadinghold = imu.actual_compass_heading;
 8005144:	4b09      	ldr	r3, [pc, #36]	; (800516c <AnglePID+0x64c>)
 8005146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800514a:	b21a      	sxth	r2, r3
 800514c:	4b07      	ldr	r3, [pc, #28]	; (800516c <AnglePID+0x64c>)
 800514e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	}
	return ret;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
}
 800515e:	4618      	mov	r0, r3
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	bd90      	pop	{r4, r7, pc}
 8005166:	bf00      	nop
 8005168:	20000d40 	.word	0x20000d40
 800516c:	20000e20 	.word	0x20000e20
 8005170:	2000032c 	.word	0x2000032c
 8005174:	447a0000 	.word	0x447a0000
 8005178:	c47a0000 	.word	0xc47a0000

0800517c <GpsPID>:

bool GpsPID(pidc_t *pid)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	bool ret = true;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
	int axis;
	float error, deriv;
	//axis pid
	for(axis = 0; axis < 2; axis++){
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	e17f      	b.n	800548e <GpsPID+0x312>
		error = constrain(RC.rcCommand[axis] + GPS_angle[axis], -20, 20) - imu.AHRS[axis];
 800518e:	4a6e      	ldr	r2, [pc, #440]	; (8005348 <GpsPID+0x1cc>)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	3328      	adds	r3, #40	; 0x28
 8005194:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005198:	4619      	mov	r1, r3
 800519a:	4a6c      	ldr	r2, [pc, #432]	; (800534c <GpsPID+0x1d0>)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80051a2:	440b      	add	r3, r1
 80051a4:	2214      	movs	r2, #20
 80051a6:	f06f 0113 	mvn.w	r1, #19
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fb1c 	bl	80057e8 <constrain>
 80051b0:	4603      	mov	r3, r0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fb fdac 	bl	8000d10 <__aeabi_i2f>
 80051b8:	4a65      	ldr	r2, [pc, #404]	; (8005350 <GpsPID+0x1d4>)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	3322      	adds	r3, #34	; 0x22
 80051be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c2:	4619      	mov	r1, r3
 80051c4:	f7fb fcee 	bl	8000ba4 <__aeabi_fsub>
 80051c8:	4603      	mov	r3, r0
 80051ca:	613b      	str	r3, [r7, #16]
		pid->Iterm1[axis] += error * pid->ts;
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	332a      	adds	r3, #42	; 0x2a
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	685c      	ldr	r4, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6939      	ldr	r1, [r7, #16]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fb fdea 	bl	8000db8 <__aeabi_fmul>
 80051e4:	4603      	mov	r3, r0
 80051e6:	4619      	mov	r1, r3
 80051e8:	4620      	mov	r0, r4
 80051ea:	f7fb fcdd 	bl	8000ba8 <__addsf3>
 80051ee:	4603      	mov	r3, r0
 80051f0:	4619      	mov	r1, r3
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	332a      	adds	r3, #42	; 0x2a
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	6059      	str	r1, [r3, #4]
		if(pid->Iterm1[axis] > pid->i1_limit[axis]) pid->Iterm1[axis] = pid->i1_limit[axis];
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	332a      	adds	r3, #42	; 0x2a
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	6858      	ldr	r0, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	3222      	adds	r2, #34	; 0x22
 8005210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005214:	4619      	mov	r1, r3
 8005216:	f7fb ff8b 	bl	8001130 <__aeabi_fcmpgt>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <GpsPID+0xbc>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	3222      	adds	r2, #34	; 0x22
 8005226:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	332a      	adds	r3, #42	; 0x2a
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	e01f      	b.n	8005278 <GpsPID+0xfc>
		else if(pid->Iterm1[axis] < -pid->i1_limit[axis]) pid->Iterm1[axis] = -pid->i1_limit[axis];
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	332a      	adds	r3, #42	; 0x2a
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	6858      	ldr	r0, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	3222      	adds	r2, #34	; 0x22
 800524a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005252:	4619      	mov	r1, r3
 8005254:	f7fb ff4e 	bl	80010f4 <__aeabi_fcmplt>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00c      	beq.n	8005278 <GpsPID+0xfc>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	3222      	adds	r2, #34	; 0x22
 8005264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005268:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	332a      	adds	r3, #42	; 0x2a
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	605a      	str	r2, [r3, #4]
		pid->output1[axis] = pid->kp1[axis]*error + pid->ki1[axis]*pid->Iterm1[axis];
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	3204      	adds	r2, #4
 800527e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005282:	6939      	ldr	r1, [r7, #16]
 8005284:	4618      	mov	r0, r3
 8005286:	f7fb fd97 	bl	8000db8 <__aeabi_fmul>
 800528a:	4603      	mov	r3, r0
 800528c:	461c      	mov	r4, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	3210      	adds	r2, #16
 8005294:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	332a      	adds	r3, #42	; 0x2a
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4619      	mov	r1, r3
 80052a6:	f7fb fd87 	bl	8000db8 <__aeabi_fmul>
 80052aa:	4603      	mov	r3, r0
 80052ac:	4619      	mov	r1, r3
 80052ae:	4620      	mov	r0, r4
 80052b0:	f7fb fc7a 	bl	8000ba8 <__addsf3>
 80052b4:	4603      	mov	r3, r0
 80052b6:	4619      	mov	r1, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	3240      	adds	r2, #64	; 0x40
 80052be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		error = pid->output1[axis] - imu.gyroRaw[axis];
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	3240      	adds	r2, #64	; 0x40
 80052c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80052cc:	4a20      	ldr	r2, [pc, #128]	; (8005350 <GpsPID+0x1d4>)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	330e      	adds	r3, #14
 80052d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d6:	4619      	mov	r1, r3
 80052d8:	f7fb fc64 	bl	8000ba4 <__aeabi_fsub>
 80052dc:	4603      	mov	r3, r0
 80052de:	613b      	str	r3, [r7, #16]
		pid->Iterm2[axis] += error * pid->ts;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	322e      	adds	r2, #46	; 0x2e
 80052e6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6939      	ldr	r1, [r7, #16]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fb fd61 	bl	8000db8 <__aeabi_fmul>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4619      	mov	r1, r3
 80052fa:	4620      	mov	r0, r4
 80052fc:	f7fb fc54 	bl	8000ba8 <__addsf3>
 8005300:	4603      	mov	r3, r0
 8005302:	4619      	mov	r1, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	322e      	adds	r2, #46	; 0x2e
 800530a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(pid->Iterm2[axis] > pid->i2_limit[axis]) pid->Iterm2[axis] = pid->i2_limit[axis];
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	322e      	adds	r2, #46	; 0x2e
 8005314:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	3324      	adds	r3, #36	; 0x24
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	4619      	mov	r1, r3
 8005326:	f7fb ff03 	bl	8001130 <__aeabi_fcmpgt>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d011      	beq.n	8005354 <GpsPID+0x1d8>
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	3324      	adds	r3, #36	; 0x24
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	6859      	ldr	r1, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	322e      	adds	r2, #46	; 0x2e
 8005342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005346:	e025      	b.n	8005394 <GpsPID+0x218>
 8005348:	20000d40 	.word	0x20000d40
 800534c:	2000027c 	.word	0x2000027c
 8005350:	20000e20 	.word	0x20000e20
		else if(pid->Iterm2[axis] < -pid->i2_limit[axis]) pid->Iterm2[axis] = -pid->i2_limit[axis];
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	322e      	adds	r2, #46	; 0x2e
 800535a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	3324      	adds	r3, #36	; 0x24
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800536e:	4619      	mov	r1, r3
 8005370:	f7fb fec0 	bl	80010f4 <__aeabi_fcmplt>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00c      	beq.n	8005394 <GpsPID+0x218>
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	3324      	adds	r3, #36	; 0x24
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	322e      	adds	r2, #46	; 0x2e
 8005390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		deriv = (error - pid->pre_error[axis])*dt_recip;
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	3336      	adds	r3, #54	; 0x36
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4619      	mov	r1, r3
 80053a2:	6938      	ldr	r0, [r7, #16]
 80053a4:	f7fb fbfe 	bl	8000ba4 <__aeabi_fsub>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	4ba8      	ldr	r3, [pc, #672]	; (8005650 <GpsPID+0x4d4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f7fb fd00 	bl	8000db8 <__aeabi_fmul>
 80053b8:	4603      	mov	r3, r0
 80053ba:	60bb      	str	r3, [r7, #8]
		pid->pre_error[axis] = error;
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	3336      	adds	r3, #54	; 0x36
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	605a      	str	r2, [r3, #4]
		pid->output2[axis] = pid->kp2[axis]*error + pid->ki2[axis]*pid->Iterm2[axis] + pid->kd2[axis]*deriv;
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	3306      	adds	r3, #6
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	6939      	ldr	r1, [r7, #16]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fb fced 	bl	8000db8 <__aeabi_fmul>
 80053de:	4603      	mov	r3, r0
 80053e0:	461c      	mov	r4, r3
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3312      	adds	r3, #18
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	6858      	ldr	r0, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	322e      	adds	r2, #46	; 0x2e
 80053f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f8:	4619      	mov	r1, r3
 80053fa:	f7fb fcdd 	bl	8000db8 <__aeabi_fmul>
 80053fe:	4603      	mov	r3, r0
 8005400:	4619      	mov	r1, r3
 8005402:	4620      	mov	r0, r4
 8005404:	f7fb fbd0 	bl	8000ba8 <__addsf3>
 8005408:	4603      	mov	r3, r0
 800540a:	461c      	mov	r4, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	321c      	adds	r2, #28
 8005412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f7fb fccd 	bl	8000db8 <__aeabi_fmul>
 800541e:	4603      	mov	r3, r0
 8005420:	4619      	mov	r1, r3
 8005422:	4620      	mov	r0, r4
 8005424:	f7fb fbc0 	bl	8000ba8 <__addsf3>
 8005428:	4603      	mov	r3, r0
 800542a:	4619      	mov	r1, r3
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	3342      	adds	r3, #66	; 0x42
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	6059      	str	r1, [r3, #4]

		if(pid->output2[axis] > OUT_MAX) pid->output2[axis] = OUT_MAX;
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	3342      	adds	r3, #66	; 0x42
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4983      	ldr	r1, [pc, #524]	; (8005654 <GpsPID+0x4d8>)
 8005446:	4618      	mov	r0, r3
 8005448:	f7fb fe72 	bl	8001130 <__aeabi_fcmpgt>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d006      	beq.n	8005460 <GpsPID+0x2e4>
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	3342      	adds	r3, #66	; 0x42
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	4a7d      	ldr	r2, [pc, #500]	; (8005654 <GpsPID+0x4d8>)
 800545e:	605a      	str	r2, [r3, #4]
		if(pid->output2[axis] < -OUT_MAX) pid->output2[axis] = -OUT_MAX;
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	3342      	adds	r3, #66	; 0x42
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	497a      	ldr	r1, [pc, #488]	; (8005658 <GpsPID+0x4dc>)
 800546e:	4618      	mov	r0, r3
 8005470:	f7fb fe40 	bl	80010f4 <__aeabi_fcmplt>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d006      	beq.n	8005488 <GpsPID+0x30c>
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	3342      	adds	r3, #66	; 0x42
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	4a74      	ldr	r2, [pc, #464]	; (8005658 <GpsPID+0x4dc>)
 8005486:	605a      	str	r2, [r3, #4]
	for(axis = 0; axis < 2; axis++){
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	3301      	adds	r3, #1
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b01      	cmp	r3, #1
 8005492:	f77f ae7c 	ble.w	800518e <GpsPID+0x12>
	}

	if(RC.rcCommand[YAW]>-5 && RC.rcCommand[YAW]<5){
 8005496:	4b71      	ldr	r3, [pc, #452]	; (800565c <GpsPID+0x4e0>)
 8005498:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800549c:	f113 0f04 	cmn.w	r3, #4
 80054a0:	f2c0 80e6 	blt.w	8005670 <GpsPID+0x4f4>
 80054a4:	4b6d      	ldr	r3, [pc, #436]	; (800565c <GpsPID+0x4e0>)
 80054a6:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	f300 80e0 	bgt.w	8005670 <GpsPID+0x4f4>
		error = imu.yawheadinghold - imu.actual_compass_heading;
 80054b0:	4b6b      	ldr	r3, [pc, #428]	; (8005660 <GpsPID+0x4e4>)
 80054b2:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 80054b6:	461a      	mov	r2, r3
 80054b8:	4b69      	ldr	r3, [pc, #420]	; (8005660 <GpsPID+0x4e4>)
 80054ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fb fc25 	bl	8000d10 <__aeabi_i2f>
 80054c6:	4603      	mov	r3, r0
 80054c8:	613b      	str	r3, [r7, #16]
		imu.debug1 = error;
 80054ca:	6938      	ldr	r0, [r7, #16]
 80054cc:	f7fb fe50 	bl	8001170 <__aeabi_f2iz>
 80054d0:	4603      	mov	r3, r0
 80054d2:	b21a      	sxth	r2, r3
 80054d4:	4b62      	ldr	r3, [pc, #392]	; (8005660 <GpsPID+0x4e4>)
 80054d6:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		if(error > 180) error -= 360;
 80054da:	4962      	ldr	r1, [pc, #392]	; (8005664 <GpsPID+0x4e8>)
 80054dc:	6938      	ldr	r0, [r7, #16]
 80054de:	f7fb fe27 	bl	8001130 <__aeabi_fcmpgt>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <GpsPID+0x378>
 80054e8:	495f      	ldr	r1, [pc, #380]	; (8005668 <GpsPID+0x4ec>)
 80054ea:	6938      	ldr	r0, [r7, #16]
 80054ec:	f7fb fb5a 	bl	8000ba4 <__aeabi_fsub>
 80054f0:	4603      	mov	r3, r0
 80054f2:	613b      	str	r3, [r7, #16]
		if(error < -180) error += 360;
 80054f4:	495d      	ldr	r1, [pc, #372]	; (800566c <GpsPID+0x4f0>)
 80054f6:	6938      	ldr	r0, [r7, #16]
 80054f8:	f7fb fdfc 	bl	80010f4 <__aeabi_fcmplt>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <GpsPID+0x392>
 8005502:	4959      	ldr	r1, [pc, #356]	; (8005668 <GpsPID+0x4ec>)
 8005504:	6938      	ldr	r0, [r7, #16]
 8005506:	f7fb fb4f 	bl	8000ba8 <__addsf3>
 800550a:	4603      	mov	r3, r0
 800550c:	613b      	str	r3, [r7, #16]
		imu.debug2 = error;
 800550e:	6938      	ldr	r0, [r7, #16]
 8005510:	f7fb fe2e 	bl	8001170 <__aeabi_f2iz>
 8005514:	4603      	mov	r3, r0
 8005516:	b21a      	sxth	r2, r3
 8005518:	4b51      	ldr	r3, [pc, #324]	; (8005660 <GpsPID+0x4e4>)
 800551a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		pid->Iterm2[YAW] += error * pid->ts;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6939      	ldr	r1, [r7, #16]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fb fc44 	bl	8000db8 <__aeabi_fmul>
 8005530:	4603      	mov	r3, r0
 8005532:	4619      	mov	r1, r3
 8005534:	4620      	mov	r0, r4
 8005536:	f7fb fb37 	bl	8000ba8 <__addsf3>
 800553a:	4603      	mov	r3, r0
 800553c:	461a      	mov	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f7fb fdec 	bl	8001130 <__aeabi_fcmpgt>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d006      	beq.n	800556c <GpsPID+0x3f0>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800556a:	e016      	b.n	800559a <GpsPID+0x41e>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005578:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f7fb fdb8 	bl	80010f4 <__aeabi_fcmplt>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <GpsPID+0x41e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005590:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055a0:	4619      	mov	r1, r3
 80055a2:	6938      	ldr	r0, [r7, #16]
 80055a4:	f7fb fafe 	bl	8000ba4 <__aeabi_fsub>
 80055a8:	4603      	mov	r3, r0
 80055aa:	461a      	mov	r2, r3
 80055ac:	4b28      	ldr	r3, [pc, #160]	; (8005650 <GpsPID+0x4d4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f7fb fc00 	bl	8000db8 <__aeabi_fmul>
 80055b8:	4603      	mov	r3, r0
 80055ba:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	6939      	ldr	r1, [r7, #16]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fb fbf4 	bl	8000db8 <__aeabi_fmul>
 80055d0:	4603      	mov	r3, r0
 80055d2:	461c      	mov	r4, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055de:	4619      	mov	r1, r3
 80055e0:	4610      	mov	r0, r2
 80055e2:	f7fb fbe9 	bl	8000db8 <__aeabi_fmul>
 80055e6:	4603      	mov	r3, r0
 80055e8:	4619      	mov	r1, r3
 80055ea:	4620      	mov	r0, r4
 80055ec:	f7fb fadc 	bl	8000ba8 <__addsf3>
 80055f0:	4603      	mov	r3, r0
 80055f2:	461c      	mov	r4, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fb fbdc 	bl	8000db8 <__aeabi_fmul>
 8005600:	4603      	mov	r3, r0
 8005602:	4619      	mov	r1, r3
 8005604:	4620      	mov	r0, r4
 8005606:	f7fb facf 	bl	8000ba8 <__addsf3>
 800560a:	4603      	mov	r3, r0
 800560c:	461a      	mov	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800561a:	490e      	ldr	r1, [pc, #56]	; (8005654 <GpsPID+0x4d8>)
 800561c:	4618      	mov	r0, r3
 800561e:	f7fb fd87 	bl	8001130 <__aeabi_fcmpgt>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <GpsPID+0x4b4>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a0a      	ldr	r2, [pc, #40]	; (8005654 <GpsPID+0x4d8>)
 800562c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005636:	4908      	ldr	r1, [pc, #32]	; (8005658 <GpsPID+0x4dc>)
 8005638:	4618      	mov	r0, r3
 800563a:	f7fb fd5b 	bl	80010f4 <__aeabi_fcmplt>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 80c2 	beq.w	80057ca <GpsPID+0x64e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a03      	ldr	r2, [pc, #12]	; (8005658 <GpsPID+0x4dc>)
 800564a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800564e:	e0bc      	b.n	80057ca <GpsPID+0x64e>
 8005650:	2000032c 	.word	0x2000032c
 8005654:	447a0000 	.word	0x447a0000
 8005658:	c47a0000 	.word	0xc47a0000
 800565c:	20000d40 	.word	0x20000d40
 8005660:	20000e20 	.word	0x20000e20
 8005664:	43340000 	.word	0x43340000
 8005668:	43b40000 	.word	0x43b40000
 800566c:	c3340000 	.word	0xc3340000
	}else{
		error = RC.rcCommand[YAW] - (-imu.gyroRaw[YAW]);
 8005670:	4b58      	ldr	r3, [pc, #352]	; (80057d4 <GpsPID+0x658>)
 8005672:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8005676:	4618      	mov	r0, r3
 8005678:	f7fb fb4a 	bl	8000d10 <__aeabi_i2f>
 800567c:	4602      	mov	r2, r0
 800567e:	4b56      	ldr	r3, [pc, #344]	; (80057d8 <GpsPID+0x65c>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	4619      	mov	r1, r3
 8005684:	4610      	mov	r0, r2
 8005686:	f7fb fa8f 	bl	8000ba8 <__addsf3>
 800568a:	4603      	mov	r3, r0
 800568c:	613b      	str	r3, [r7, #16]
		pid->Iterm2[YAW] += error * pid->ts;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6939      	ldr	r1, [r7, #16]
 800569a:	4618      	mov	r0, r3
 800569c:	f7fb fb8c 	bl	8000db8 <__aeabi_fmul>
 80056a0:	4603      	mov	r3, r0
 80056a2:	4619      	mov	r1, r3
 80056a4:	4620      	mov	r0, r4
 80056a6:	f7fb fa7f 	bl	8000ba8 <__addsf3>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		if(pid->Iterm2[YAW] > pid->i2_limit[YAW]) pid->Iterm2[YAW] = pid->i2_limit[YAW];
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f7fb fd34 	bl	8001130 <__aeabi_fcmpgt>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d006      	beq.n	80056dc <GpsPID+0x560>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80056da:	e016      	b.n	800570a <GpsPID+0x58e>
		else if(pid->Iterm2[YAW] < -pid->i2_limit[YAW]) pid->Iterm2[YAW] = -pid->i2_limit[YAW];
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f7fb fd00 	bl	80010f4 <__aeabi_fcmplt>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <GpsPID+0x58e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005700:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		deriv = (error - pid->pre_error[YAW])*dt_recip;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005710:	4619      	mov	r1, r3
 8005712:	6938      	ldr	r0, [r7, #16]
 8005714:	f7fb fa46 	bl	8000ba4 <__aeabi_fsub>
 8005718:	4603      	mov	r3, r0
 800571a:	461a      	mov	r2, r3
 800571c:	4b2f      	ldr	r3, [pc, #188]	; (80057dc <GpsPID+0x660>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f7fb fb48 	bl	8000db8 <__aeabi_fmul>
 8005728:	4603      	mov	r3, r0
 800572a:	60bb      	str	r3, [r7, #8]
		pid->pre_error[YAW] = error;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		pid->output2[YAW] = pid->kp2[YAW]*error + pid->ki2[YAW]*pid->Iterm2[YAW] + pid->kd2[YAW]*deriv;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	6939      	ldr	r1, [r7, #16]
 800573a:	4618      	mov	r0, r3
 800573c:	f7fb fb3c 	bl	8000db8 <__aeabi_fmul>
 8005740:	4603      	mov	r3, r0
 8005742:	461c      	mov	r4, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f7fb fb31 	bl	8000db8 <__aeabi_fmul>
 8005756:	4603      	mov	r3, r0
 8005758:	4619      	mov	r1, r3
 800575a:	4620      	mov	r0, r4
 800575c:	f7fb fa24 	bl	8000ba8 <__addsf3>
 8005760:	4603      	mov	r3, r0
 8005762:	461c      	mov	r4, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f7fb fb24 	bl	8000db8 <__aeabi_fmul>
 8005770:	4603      	mov	r3, r0
 8005772:	4619      	mov	r1, r3
 8005774:	4620      	mov	r0, r4
 8005776:	f7fb fa17 	bl	8000ba8 <__addsf3>
 800577a:	4603      	mov	r3, r0
 800577c:	461a      	mov	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		if(pid->output2[YAW] > OUT_MAX) pid->output2[YAW] = OUT_MAX;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800578a:	4915      	ldr	r1, [pc, #84]	; (80057e0 <GpsPID+0x664>)
 800578c:	4618      	mov	r0, r3
 800578e:	f7fb fccf 	bl	8001130 <__aeabi_fcmpgt>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <GpsPID+0x624>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a11      	ldr	r2, [pc, #68]	; (80057e0 <GpsPID+0x664>)
 800579c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		if(pid->output2[YAW] < -OUT_MAX) pid->output2[YAW] = -OUT_MAX;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80057a6:	490f      	ldr	r1, [pc, #60]	; (80057e4 <GpsPID+0x668>)
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fb fca3 	bl	80010f4 <__aeabi_fcmplt>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <GpsPID+0x640>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a0b      	ldr	r2, [pc, #44]	; (80057e4 <GpsPID+0x668>)
 80057b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		imu.yawheadinghold = imu.actual_compass_heading;
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <GpsPID+0x65c>)
 80057be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057c2:	b21a      	sxth	r2, r3
 80057c4:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <GpsPID+0x65c>)
 80057c6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	}

	return ret;
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd90      	pop	{r4, r7, pc}
 80057d4:	20000d40 	.word	0x20000d40
 80057d8:	20000e20 	.word	0x20000e20
 80057dc:	2000032c 	.word	0x2000032c
 80057e0:	447a0000 	.word	0x447a0000
 80057e4:	c47a0000 	.word	0xc47a0000

080057e8 <constrain>:

int constrain(int amt, int low, int high)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
	if (amt < low)
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	da01      	bge.n	8005800 <constrain+0x18>
		return low;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	e006      	b.n	800580e <constrain+0x26>
	else if (amt > high)
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	dd01      	ble.n	800580c <constrain+0x24>
		return high;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	e000      	b.n	800580e <constrain+0x26>
	else
		return amt;
 800580c:	68fb      	ldr	r3, [r7, #12]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr

08005818 <HAL_TIM_IC_CaptureCallback>:


static void cliRadio(cli_args_t *args);

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	7f1b      	ldrb	r3, [r3, #28]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d135      	bne.n	8005894 <HAL_TIM_IC_CaptureCallback+0x7c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005830:	d130      	bne.n	8005894 <HAL_TIM_IC_CaptureCallback+0x7c>
	{
		if(Ch1_PIN)
 8005832:	4b90      	ldr	r3, [pc, #576]	; (8005a74 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d011      	beq.n	8005862 <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM2->CCR1 = 0;
 800583e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005842:	2200      	movs	r2, #0
 8005844:	635a      	str	r2, [r3, #52]	; 0x34
			RC.capture_rise[0] = TIM2->CCR1; // read capture data
 8005846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800584a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584c:	4a8a      	ldr	r2, [pc, #552]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 800584e:	6013      	str	r3, [r2, #0]
			Ch1_POL_FALLING;  // to falling edge
 8005850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800585a:	f043 0302 	orr.w	r3, r3, #2
 800585e:	6213      	str	r3, [r2, #32]
 8005860:	e018      	b.n	8005894 <HAL_TIM_IC_CaptureCallback+0x7c>
		}
		else
		{   // Timer2 Ch1 pin(PA0) is Low
			RC.capture_fall[0] = TIM2->CCR1; // read capture data
 8005862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	4a83      	ldr	r2, [pc, #524]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 800586a:	6213      	str	r3, [r2, #32]
			RC.rcADC[0] = RC.capture_fall[0] - RC.capture_rise[0];
 800586c:	4b82      	ldr	r3, [pc, #520]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	b29a      	uxth	r2, r3
 8005872:	4b81      	ldr	r3, [pc, #516]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	b29b      	uxth	r3, r3
 800587c:	b21a      	sxth	r2, r3
 800587e:	4b7e      	ldr	r3, [pc, #504]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			Ch1_POL_RISING;   // to rising edge
 8005884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800588e:	f023 0302 	bic.w	r3, r3, #2
 8005892:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM2)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	7f1b      	ldrb	r3, [r3, #28]
 8005898:	2b02      	cmp	r3, #2
 800589a:	d135      	bne.n	8005908 <HAL_TIM_IC_CaptureCallback+0xf0>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a4:	d130      	bne.n	8005908 <HAL_TIM_IC_CaptureCallback+0xf0>
	{
		if(Ch2_PIN)
 80058a6:	4b73      	ldr	r3, [pc, #460]	; (8005a74 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d011      	beq.n	80058d6 <HAL_TIM_IC_CaptureCallback+0xbe>
		{  // Timer2 Ch2 pin(PA1) is High
			TIM2->CCR2 = 0;
 80058b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058b6:	2200      	movs	r2, #0
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
			RC.capture_rise[1] = TIM2->CCR2; // read capture data
 80058ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	4a6d      	ldr	r2, [pc, #436]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058c2:	6053      	str	r3, [r2, #4]
			Ch2_POL_FALLING;  // to falling edge
 80058c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058ce:	f043 0320 	orr.w	r3, r3, #32
 80058d2:	6213      	str	r3, [r2, #32]
 80058d4:	e018      	b.n	8005908 <HAL_TIM_IC_CaptureCallback+0xf0>
		}
		else
		{   // Timer2 Ch2 pin(PA1) is Low
			RC.capture_fall[1] = TIM2->CCR2; // read capture data
 80058d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	4a66      	ldr	r2, [pc, #408]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058de:	6253      	str	r3, [r2, #36]	; 0x24
			RC.rcADC[1] = RC.capture_fall[1] - RC.capture_rise[1];
 80058e0:	4b65      	ldr	r3, [pc, #404]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	4b64      	ldr	r3, [pc, #400]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	b21a      	sxth	r2, r3
 80058f2:	4b61      	ldr	r3, [pc, #388]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 80058f4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			Ch2_POL_RISING;   // to rising edge
 80058f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005902:	f023 0320 	bic.w	r3, r3, #32
 8005906:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM3)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	7f1b      	ldrb	r3, [r3, #28]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d12e      	bne.n	800596e <HAL_TIM_IC_CaptureCallback+0x156>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a59      	ldr	r2, [pc, #356]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d129      	bne.n	800596e <HAL_TIM_IC_CaptureCallback+0x156>
	{
		if(Ch3_PIN)
 800591a:	4b56      	ldr	r3, [pc, #344]	; (8005a74 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00d      	beq.n	8005942 <HAL_TIM_IC_CaptureCallback+0x12a>
		{  // Timer3 Ch1 pin(PA6) is High
			TIM3->CCR1 = 0;
 8005926:	4b55      	ldr	r3, [pc, #340]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005928:	2200      	movs	r2, #0
 800592a:	635a      	str	r2, [r3, #52]	; 0x34
			RC.capture_rise[2] = TIM3->CCR1; // read capture data
 800592c:	4b53      	ldr	r3, [pc, #332]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	4a51      	ldr	r2, [pc, #324]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005932:	6093      	str	r3, [r2, #8]
			Ch3_POL_FALLING;  // to falling edge
 8005934:	4b51      	ldr	r3, [pc, #324]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	4a50      	ldr	r2, [pc, #320]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 800593a:	f043 0302 	orr.w	r3, r3, #2
 800593e:	6213      	str	r3, [r2, #32]
 8005940:	e015      	b.n	800596e <HAL_TIM_IC_CaptureCallback+0x156>
		}
		else
		{   // Timer3 Ch1 pin(PA6) is Low
			RC.capture_fall[2] = TIM3->CCR1; // read capture data
 8005942:	4b4e      	ldr	r3, [pc, #312]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005946:	4a4c      	ldr	r2, [pc, #304]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005948:	6293      	str	r3, [r2, #40]	; 0x28
			RC.rcADC[2] = RC.capture_fall[2] - RC.capture_rise[2];
 800594a:	4b4b      	ldr	r3, [pc, #300]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	b29a      	uxth	r2, r3
 8005950:	4b49      	ldr	r3, [pc, #292]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	b29b      	uxth	r3, r3
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	b29b      	uxth	r3, r3
 800595a:	b21a      	sxth	r2, r3
 800595c:	4b46      	ldr	r3, [pc, #280]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 800595e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			Ch3_POL_RISING;   // to rising edge
 8005962:	4b46      	ldr	r3, [pc, #280]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	4a45      	ldr	r2, [pc, #276]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005968:	f023 0302 	bic.w	r3, r3, #2
 800596c:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && htim->Instance == TIM3)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	7f1b      	ldrb	r3, [r3, #28]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d12e      	bne.n	80059d4 <HAL_TIM_IC_CaptureCallback+0x1bc>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a40      	ldr	r2, [pc, #256]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d129      	bne.n	80059d4 <HAL_TIM_IC_CaptureCallback+0x1bc>
	{
		if(Ch4_PIN)
 8005980:	4b3c      	ldr	r3, [pc, #240]	; (8005a74 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00d      	beq.n	80059a8 <HAL_TIM_IC_CaptureCallback+0x190>
		{  // Timer3 Ch2 pin(PA7) is High
			TIM3->CCR2 = 0;
 800598c:	4b3b      	ldr	r3, [pc, #236]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 800598e:	2200      	movs	r2, #0
 8005990:	639a      	str	r2, [r3, #56]	; 0x38
			RC.capture_rise[3] = TIM3->CCR2; // read capture data
 8005992:	4b3a      	ldr	r3, [pc, #232]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	4a38      	ldr	r2, [pc, #224]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005998:	60d3      	str	r3, [r2, #12]
			Ch4_POL_FALLING;  // to falling edge
 800599a:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	4a37      	ldr	r2, [pc, #220]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 80059a0:	f043 0320 	orr.w	r3, r3, #32
 80059a4:	6213      	str	r3, [r2, #32]
 80059a6:	e015      	b.n	80059d4 <HAL_TIM_IC_CaptureCallback+0x1bc>
		}
		else
		{   // Timer3 Ch2 pin(PA7) is Low
			RC.capture_fall[3] = TIM3->CCR2; // read capture data
 80059a8:	4b34      	ldr	r3, [pc, #208]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	4a32      	ldr	r2, [pc, #200]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059ae:	62d3      	str	r3, [r2, #44]	; 0x2c
			RC.rcADC[3] = RC.capture_fall[3] - RC.capture_rise[3];
 80059b0:	4b31      	ldr	r3, [pc, #196]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	4b30      	ldr	r3, [pc, #192]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	b29b      	uxth	r3, r3
 80059c0:	b21a      	sxth	r2, r3
 80059c2:	4b2d      	ldr	r3, [pc, #180]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			Ch4_POL_RISING;   // to rising edge
 80059c8:	4b2c      	ldr	r3, [pc, #176]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	4a2b      	ldr	r2, [pc, #172]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 80059ce:	f023 0320 	bic.w	r3, r3, #32
 80059d2:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 && htim->Instance == TIM3)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	7f1b      	ldrb	r3, [r3, #28]
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d12e      	bne.n	8005a3a <HAL_TIM_IC_CaptureCallback+0x222>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a26      	ldr	r2, [pc, #152]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d129      	bne.n	8005a3a <HAL_TIM_IC_CaptureCallback+0x222>
	{
		if(Ch5_PIN)
 80059e6:	4b26      	ldr	r3, [pc, #152]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x268>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00d      	beq.n	8005a0e <HAL_TIM_IC_CaptureCallback+0x1f6>
		{  // Timer3 Ch3 pin(PB0) is High
			TIM3->CCR3 = 0;
 80059f2:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	63da      	str	r2, [r3, #60]	; 0x3c
			RC.capture_rise[4] = TIM3->CCR3; // read capture data
 80059f8:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 80059fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fc:	4a1e      	ldr	r2, [pc, #120]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 80059fe:	6113      	str	r3, [r2, #16]
			Ch5_POL_FALLING;  // to falling edge
 8005a00:	4b1e      	ldr	r3, [pc, #120]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	4a1d      	ldr	r2, [pc, #116]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a0a:	6213      	str	r3, [r2, #32]
 8005a0c:	e015      	b.n	8005a3a <HAL_TIM_IC_CaptureCallback+0x222>
		}
		else
		{   // Timer3 Ch3 pin(PB0) is Low
			RC.capture_fall[4] = TIM3->CCR3; // read capture data
 8005a0e:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a12:	4a19      	ldr	r2, [pc, #100]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a14:	6313      	str	r3, [r2, #48]	; 0x30
			RC.rcADC[4] = RC.capture_fall[4] - RC.capture_rise[4];
 8005a16:	4b18      	ldr	r3, [pc, #96]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	4b16      	ldr	r3, [pc, #88]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	b21a      	sxth	r2, r3
 8005a28:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			Ch5_POL_RISING;   // to rising edge
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	4a12      	ldr	r2, [pc, #72]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a38:	6213      	str	r3, [r2, #32]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7f1b      	ldrb	r3, [r3, #28]
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d136      	bne.n	8005ab0 <HAL_TIM_IC_CaptureCallback+0x298>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d131      	bne.n	8005ab0 <HAL_TIM_IC_CaptureCallback+0x298>
	{
		if(Ch6_PIN)
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <HAL_TIM_IC_CaptureCallback+0x268>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d015      	beq.n	8005a84 <HAL_TIM_IC_CaptureCallback+0x26c>
		{  // Timer3 Ch4 pin(PB1) is High
			TIM3->CCR4 = 0;
 8005a58:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
			RC.capture_rise[5] = TIM3->CCR4; // read capture data
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	4a05      	ldr	r2, [pc, #20]	; (8005a78 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005a64:	6153      	str	r3, [r2, #20]
			Ch6_POL_FALLING;  // to falling edge
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	4a04      	ldr	r2, [pc, #16]	; (8005a7c <HAL_TIM_IC_CaptureCallback+0x264>)
 8005a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a70:	6213      	str	r3, [r2, #32]
	//	        	RC.capture_fall[7] = TIM3->CCR4; // read capture data
	//	            RC.rcADC[7] = RC.capture_fall[7] - RC.capture_rise[7];
	//	            Ch8_POL_RISING;   // to rising edge
	//	        }
	//	    }
}
 8005a72:	e01d      	b.n	8005ab0 <HAL_TIM_IC_CaptureCallback+0x298>
 8005a74:	40010800 	.word	0x40010800
 8005a78:	20000d40 	.word	0x20000d40
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40010c00 	.word	0x40010c00
			RC.capture_fall[5] = TIM3->CCR4; // read capture data
 8005a84:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	4a0d      	ldr	r2, [pc, #52]	; (8005ac0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005a8a:	6353      	str	r3, [r2, #52]	; 0x34
			RC.rcADC[5] = RC.capture_fall[5] - RC.capture_rise[5];
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	b21a      	sxth	r2, r3
 8005a9e:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8005aa0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			Ch6_POL_RISING;   // to rising edge
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	4a04      	ldr	r2, [pc, #16]	; (8005abc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8005aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aae:	6213      	str	r3, [r2, #32]
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	20000d40 	.word	0x20000d40

08005ac4 <mwArm>:

void mwArm(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
	if(!f.ARMED)
 8005ac8:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <mwArm+0x24>)
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d108      	bne.n	8005ae2 <mwArm+0x1e>
	{
		f.ARMED = 1;
 8005ad0:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <mwArm+0x24>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	705a      	strb	r2, [r3, #1]
		ms5611.ground_pressure = alt.EstAlt;
 8005ad6:	4b05      	ldr	r3, [pc, #20]	; (8005aec <mwArm+0x28>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a05      	ldr	r2, [pc, #20]	; (8005af0 <mwArm+0x2c>)
 8005adc:	6693      	str	r3, [r2, #104]	; 0x68
		GPS_reset_home_position();
 8005ade:	f7fc fe01 	bl	80026e4 <GPS_reset_home_position>
	}
}
 8005ae2:	bf00      	nop
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000ed4 	.word	0x20000ed4
 8005aec:	20000ef0 	.word	0x20000ef0
 8005af0:	20000da0 	.word	0x20000da0

08005af4 <mwDisarm>:
void mwDisarm(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
	if(f.ARMED)
 8005af8:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <mwDisarm+0x1c>)
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <mwDisarm+0x12>
	{
		f.ARMED = 0;
 8005b00:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <mwDisarm+0x1c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	705a      	strb	r2, [r3, #1]
	}
}
 8005b06:	bf00      	nop
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000ed4 	.word	0x20000ed4

08005b14 <computeRC>:
	Error.error = 0;
	cliAdd("radio", cliRadio);
}

void computeRC(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
	static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
	static uint8_t rcSticks;            // this hold sticks position for command combos
	uint8_t stTmp = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	71fb      	strb	r3, [r7, #7]
	int i;
	// ------------------ STICKS COMMAND HANDLER --------------------
	// checking sticks positions
	for (i = 0; i < 4; i++)
 8005b1e:	2300      	movs	r3, #0
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	e01f      	b.n	8005b64 <computeRC+0x50>
	{
		stTmp >>= 2;
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	089b      	lsrs	r3, r3, #2
 8005b28:	71fb      	strb	r3, [r7, #7]
		if (RC.rcADC[i] > 1150)
 8005b2a:	4ab6      	ldr	r2, [pc, #728]	; (8005e04 <computeRC+0x2f0>)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	3320      	adds	r3, #32
 8005b30:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005b34:	f240 427e 	movw	r2, #1150	; 0x47e
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	dd03      	ble.n	8005b44 <computeRC+0x30>
			stTmp |= 0x80;  // check for MIN
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b42:	71fb      	strb	r3, [r7, #7]
		if (RC.rcADC[i] < 1850)
 8005b44:	4aaf      	ldr	r2, [pc, #700]	; (8005e04 <computeRC+0x2f0>)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	3320      	adds	r3, #32
 8005b4a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005b4e:	f240 7239 	movw	r2, #1849	; 0x739
 8005b52:	4293      	cmp	r3, r2
 8005b54:	dc03      	bgt.n	8005b5e <computeRC+0x4a>
			stTmp |= 0x40;  // check for MAX
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b5c:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 4; i++)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	3301      	adds	r3, #1
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	dddc      	ble.n	8005b24 <computeRC+0x10>
	}
	if (stTmp == rcSticks)
 8005b6a:	4ba7      	ldr	r3, [pc, #668]	; (8005e08 <computeRC+0x2f4>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	79fa      	ldrb	r2, [r7, #7]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d10a      	bne.n	8005b8a <computeRC+0x76>
	{
		if (rcDelayCommand < 250)
 8005b74:	4ba5      	ldr	r3, [pc, #660]	; (8005e0c <computeRC+0x2f8>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2bf9      	cmp	r3, #249	; 0xf9
 8005b7a:	d809      	bhi.n	8005b90 <computeRC+0x7c>
			rcDelayCommand++;
 8005b7c:	4ba3      	ldr	r3, [pc, #652]	; (8005e0c <computeRC+0x2f8>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	3301      	adds	r3, #1
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	4ba1      	ldr	r3, [pc, #644]	; (8005e0c <computeRC+0x2f8>)
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	e002      	b.n	8005b90 <computeRC+0x7c>
	} else
		rcDelayCommand = 0;
 8005b8a:	4ba0      	ldr	r3, [pc, #640]	; (8005e0c <computeRC+0x2f8>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
	rcSticks = stTmp;
 8005b90:	4a9d      	ldr	r2, [pc, #628]	; (8005e08 <computeRC+0x2f4>)
 8005b92:	79fb      	ldrb	r3, [r7, #7]
 8005b94:	7013      	strb	r3, [r2, #0]

	if (rcDelayCommand == 50)
 8005b96:	4b9d      	ldr	r3, [pc, #628]	; (8005e0c <computeRC+0x2f8>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b32      	cmp	r3, #50	; 0x32
 8005b9c:	d12e      	bne.n	8005bfc <computeRC+0xe8>
	{
		if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 8005b9e:	4b9c      	ldr	r3, [pc, #624]	; (8005e10 <computeRC+0x2fc>)
 8005ba0:	785b      	ldrb	r3, [r3, #1]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d107      	bne.n	8005bb6 <computeRC+0xa2>
 8005ba6:	4b98      	ldr	r3, [pc, #608]	; (8005e08 <computeRC+0x2f4>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b5f      	cmp	r3, #95	; 0x5f
 8005bac:	d103      	bne.n	8005bb6 <computeRC+0xa2>
		{
			ledToggle(RGB_BLUE);
 8005bae:	2004      	movs	r0, #4
 8005bb0:	f005 fe20 	bl	800b7f4 <ledToggle>
 8005bb4:	e01c      	b.n	8005bf0 <computeRC+0xdc>
		}else if(f.ARMED == 1 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 8005bb6:	4b96      	ldr	r3, [pc, #600]	; (8005e10 <computeRC+0x2fc>)
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d107      	bne.n	8005bce <computeRC+0xba>
 8005bbe:	4b92      	ldr	r3, [pc, #584]	; (8005e08 <computeRC+0x2f4>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b6f      	cmp	r3, #111	; 0x6f
 8005bc4:	d103      	bne.n	8005bce <computeRC+0xba>
		{
			ledToggle(RGB_GREEN);
 8005bc6:	2003      	movs	r0, #3
 8005bc8:	f005 fe14 	bl	800b7f4 <ledToggle>
 8005bcc:	e010      	b.n	8005bf0 <computeRC+0xdc>
		}else if(f.ARMED == 0 && (rcSticks == THR_LO + YAW_HI + PIT_HI + ROL_HI))
 8005bce:	4b90      	ldr	r3, [pc, #576]	; (8005e10 <computeRC+0x2fc>)
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <computeRC+0xd0>
 8005bd6:	4b8c      	ldr	r3, [pc, #560]	; (8005e08 <computeRC+0x2f4>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b6a      	cmp	r3, #106	; 0x6a
 8005bdc:	d102      	bne.n	8005be4 <computeRC+0xd0>
		{
			mwArm();
 8005bde:	f7ff ff71 	bl	8005ac4 <mwArm>
 8005be2:	e005      	b.n	8005bf0 <computeRC+0xdc>
		}else if(rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_LO)
 8005be4:	4b88      	ldr	r3, [pc, #544]	; (8005e08 <computeRC+0x2f4>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b59      	cmp	r3, #89	; 0x59
 8005bea:	d101      	bne.n	8005bf0 <computeRC+0xdc>
		{
			mwDisarm();
 8005bec:	f7ff ff82 	bl	8005af4 <mwDisarm>
		}
		if (i)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <computeRC+0xe8>
		{
			// writeEEPROM(1, true);
			rcDelayCommand = 0; // allow autorepetition
 8005bf6:	4b85      	ldr	r3, [pc, #532]	; (8005e0c <computeRC+0x2f8>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
		}
	}
	if(RC.rcCommand[AUX1] > 1800)
 8005bfc:	4b81      	ldr	r3, [pc, #516]	; (8005e04 <computeRC+0x2f0>)
 8005bfe:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8005c02:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005c06:	dd0f      	ble.n	8005c28 <computeRC+0x114>
	{
		f.ANGLE_MODE = 0;
 8005c08:	4b81      	ldr	r3, [pc, #516]	; (8005e10 <computeRC+0x2fc>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	715a      	strb	r2, [r3, #5]
		f.HORIZON_MODE = 0;
 8005c0e:	4b80      	ldr	r3, [pc, #512]	; (8005e10 <computeRC+0x2fc>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	719a      	strb	r2, [r3, #6]
		f.ACRO_MODE = 1;
 8005c14:	4b7e      	ldr	r3, [pc, #504]	; (8005e10 <computeRC+0x2fc>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	71da      	strb	r2, [r3, #7]
		f.GPS_HOLD_MODE = 0;
 8005c1a:	4b7d      	ldr	r3, [pc, #500]	; (8005e10 <computeRC+0x2fc>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	735a      	strb	r2, [r3, #13]
    rcOptions[BOXGPSHOLD] = 0;
 8005c20:	4b7c      	ldr	r3, [pc, #496]	; (8005e14 <computeRC+0x300>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	721a      	strb	r2, [r3, #8]
 8005c26:	e02a      	b.n	8005c7e <computeRC+0x16a>
	}else if(RC.rcCommand[AUX1] > 1400 && RC.rcCommand[AUX1] < 1600)
 8005c28:	4b76      	ldr	r3, [pc, #472]	; (8005e04 <computeRC+0x2f0>)
 8005c2a:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8005c2e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8005c32:	dd15      	ble.n	8005c60 <computeRC+0x14c>
 8005c34:	4b73      	ldr	r3, [pc, #460]	; (8005e04 <computeRC+0x2f0>)
 8005c36:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8005c3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c3e:	da0f      	bge.n	8005c60 <computeRC+0x14c>
	{
		f.HORIZON_MODE = 0;
 8005c40:	4b73      	ldr	r3, [pc, #460]	; (8005e10 <computeRC+0x2fc>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	719a      	strb	r2, [r3, #6]
		f.ANGLE_MODE = 1;
 8005c46:	4b72      	ldr	r3, [pc, #456]	; (8005e10 <computeRC+0x2fc>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	715a      	strb	r2, [r3, #5]
		f.ACRO_MODE = 0;
 8005c4c:	4b70      	ldr	r3, [pc, #448]	; (8005e10 <computeRC+0x2fc>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	71da      	strb	r2, [r3, #7]
		f.GPS_HOLD_MODE = 0;
 8005c52:	4b6f      	ldr	r3, [pc, #444]	; (8005e10 <computeRC+0x2fc>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	735a      	strb	r2, [r3, #13]
		rcOptions[BOXGPSHOLD] = 0;
 8005c58:	4b6e      	ldr	r3, [pc, #440]	; (8005e14 <computeRC+0x300>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	721a      	strb	r2, [r3, #8]
 8005c5e:	e00e      	b.n	8005c7e <computeRC+0x16a>
	}else {
		f.ACRO_MODE = 0;
 8005c60:	4b6b      	ldr	r3, [pc, #428]	; (8005e10 <computeRC+0x2fc>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	71da      	strb	r2, [r3, #7]
		f.ANGLE_MODE = 0;
 8005c66:	4b6a      	ldr	r3, [pc, #424]	; (8005e10 <computeRC+0x2fc>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	715a      	strb	r2, [r3, #5]
		f.HORIZON_MODE = 0;
 8005c6c:	4b68      	ldr	r3, [pc, #416]	; (8005e10 <computeRC+0x2fc>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	719a      	strb	r2, [r3, #6]
		f.GPS_HOLD_MODE = 1;
 8005c72:	4b67      	ldr	r3, [pc, #412]	; (8005e10 <computeRC+0x2fc>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	735a      	strb	r2, [r3, #13]
		rcOptions[BOXGPSHOLD] = 1;
 8005c78:	4b66      	ldr	r3, [pc, #408]	; (8005e14 <computeRC+0x300>)
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	721a      	strb	r2, [r3, #8]
	}

	if(RC.rcCommand[GEAR] > 1400 && RC.rcCommand[GEAR] < 1600 && f.ARMED == 1)
 8005c7e:	4b61      	ldr	r3, [pc, #388]	; (8005e04 <computeRC+0x2f0>)
 8005c80:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8005c84:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8005c88:	dd0c      	ble.n	8005ca4 <computeRC+0x190>
 8005c8a:	4b5e      	ldr	r3, [pc, #376]	; (8005e04 <computeRC+0x2f0>)
 8005c8c:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8005c90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c94:	da06      	bge.n	8005ca4 <computeRC+0x190>
 8005c96:	4b5e      	ldr	r3, [pc, #376]	; (8005e10 <computeRC+0x2fc>)
 8005c98:	785b      	ldrb	r3, [r3, #1]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d102      	bne.n	8005ca4 <computeRC+0x190>
	{
		Error.error = 5;
 8005c9e:	4b5e      	ldr	r3, [pc, #376]	; (8005e18 <computeRC+0x304>)
 8005ca0:	2205      	movs	r2, #5
 8005ca2:	701a      	strb	r2, [r3, #0]
	}

	if(f.ANGLE_MODE || f.GPS_HOLD_MODE)
 8005ca4:	4b5a      	ldr	r3, [pc, #360]	; (8005e10 <computeRC+0x2fc>)
 8005ca6:	795b      	ldrb	r3, [r3, #5]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <computeRC+0x1a2>
 8005cac:	4b58      	ldr	r3, [pc, #352]	; (8005e10 <computeRC+0x2fc>)
 8005cae:	7b5b      	ldrb	r3, [r3, #13]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80b5 	beq.w	8005e20 <computeRC+0x30c>
	{
		RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 20), 1100, 1900, -30, 30); //0~250 left:0, right:250
 8005cb6:	4b53      	ldr	r3, [pc, #332]	; (8005e04 <computeRC+0x2f0>)
 8005cb8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cbc:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005cc0:	dd13      	ble.n	8005cea <computeRC+0x1d6>
 8005cc2:	4b50      	ldr	r3, [pc, #320]	; (8005e04 <computeRC+0x2f0>)
 8005cc4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cc8:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005ccc:	4613      	mov	r3, r2
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	1a9b      	subs	r3, r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4a51      	ldr	r2, [pc, #324]	; (8005e1c <computeRC+0x308>)
 8005cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8005cda:	1212      	asrs	r2, r2, #8
 8005cdc:	17db      	asrs	r3, r3, #31
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b1e      	subs	r3, #30
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	b21b      	sxth	r3, r3
 8005ce8:	e01a      	b.n	8005d20 <computeRC+0x20c>
 8005cea:	4b46      	ldr	r3, [pc, #280]	; (8005e04 <computeRC+0x2f0>)
 8005cec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cf0:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005cf4:	da13      	bge.n	8005d1e <computeRC+0x20a>
 8005cf6:	4b43      	ldr	r3, [pc, #268]	; (8005e04 <computeRC+0x2f0>)
 8005cf8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005cfc:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005d00:	4613      	mov	r3, r2
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4a44      	ldr	r2, [pc, #272]	; (8005e1c <computeRC+0x308>)
 8005d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8005d0e:	1212      	asrs	r2, r2, #8
 8005d10:	17db      	asrs	r3, r3, #31
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b1e      	subs	r3, #30
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	b21b      	sxth	r3, r3
 8005d1c:	e000      	b.n	8005d20 <computeRC+0x20c>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	4a38      	ldr	r2, [pc, #224]	; (8005e04 <computeRC+0x2f0>)
 8005d22:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
		RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 20), 1100, 1900, -30, 30); //0~250 rear:0, fornt:250
 8005d26:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <computeRC+0x2f0>)
 8005d28:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d2c:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005d30:	dd13      	ble.n	8005d5a <computeRC+0x246>
 8005d32:	4b34      	ldr	r3, [pc, #208]	; (8005e04 <computeRC+0x2f0>)
 8005d34:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d38:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	1a9b      	subs	r3, r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4a35      	ldr	r2, [pc, #212]	; (8005e1c <computeRC+0x308>)
 8005d46:	fb82 1203 	smull	r1, r2, r2, r3
 8005d4a:	1212      	asrs	r2, r2, #8
 8005d4c:	17db      	asrs	r3, r3, #31
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	331e      	adds	r3, #30
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	b21b      	sxth	r3, r3
 8005d58:	e01a      	b.n	8005d90 <computeRC+0x27c>
 8005d5a:	4b2a      	ldr	r3, [pc, #168]	; (8005e04 <computeRC+0x2f0>)
 8005d5c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d60:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005d64:	da13      	bge.n	8005d8e <computeRC+0x27a>
 8005d66:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <computeRC+0x2f0>)
 8005d68:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005d6c:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 8005d70:	4613      	mov	r3, r2
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4a28      	ldr	r2, [pc, #160]	; (8005e1c <computeRC+0x308>)
 8005d7a:	fb82 1203 	smull	r1, r2, r2, r3
 8005d7e:	1212      	asrs	r2, r2, #8
 8005d80:	17db      	asrs	r3, r3, #31
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	331e      	adds	r3, #30
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	b21b      	sxth	r3, r3
 8005d8c:	e000      	b.n	8005d90 <computeRC+0x27c>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	4a1c      	ldr	r2, [pc, #112]	; (8005e04 <computeRC+0x2f0>)
 8005d92:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
		RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 20), 1100, 1900, -90, 90); //0~250 left:0, right:250
 8005d96:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <computeRC+0x2f0>)
 8005d98:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005d9c:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005da0:	dd12      	ble.n	8005dc8 <computeRC+0x2b4>
 8005da2:	4b18      	ldr	r3, [pc, #96]	; (8005e04 <computeRC+0x2f0>)
 8005da4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005da8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005dac:	22b4      	movs	r2, #180	; 0xb4
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	4a1a      	ldr	r2, [pc, #104]	; (8005e1c <computeRC+0x308>)
 8005db4:	fb82 1203 	smull	r1, r2, r2, r3
 8005db8:	1212      	asrs	r2, r2, #8
 8005dba:	17db      	asrs	r3, r3, #31
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	335a      	adds	r3, #90	; 0x5a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	b21b      	sxth	r3, r3
 8005dc6:	e019      	b.n	8005dfc <computeRC+0x2e8>
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <computeRC+0x2f0>)
 8005dca:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005dce:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005dd2:	da12      	bge.n	8005dfa <computeRC+0x2e6>
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <computeRC+0x2f0>)
 8005dd6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005dda:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005dde:	22b4      	movs	r2, #180	; 0xb4
 8005de0:	fb02 f303 	mul.w	r3, r2, r3
 8005de4:	4a0d      	ldr	r2, [pc, #52]	; (8005e1c <computeRC+0x308>)
 8005de6:	fb82 1203 	smull	r1, r2, r2, r3
 8005dea:	1212      	asrs	r2, r2, #8
 8005dec:	17db      	asrs	r3, r3, #31
 8005dee:	1a9b      	subs	r3, r3, r2
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	335a      	adds	r3, #90	; 0x5a
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	b21b      	sxth	r3, r3
 8005df8:	e000      	b.n	8005dfc <computeRC+0x2e8>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	4a01      	ldr	r2, [pc, #4]	; (8005e04 <computeRC+0x2f0>)
 8005dfe:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
 8005e02:	e0b8      	b.n	8005f76 <computeRC+0x462>
 8005e04:	20000d40 	.word	0x20000d40
 8005e08:	20000334 	.word	0x20000334
 8005e0c:	20000335 	.word	0x20000335
 8005e10:	20000ed4 	.word	0x20000ed4
 8005e14:	20000d34 	.word	0x20000d34
 8005e18:	20000acc 	.word	0x20000acc
 8005e1c:	51eb851f 	.word	0x51eb851f
	}else if(f.ACRO_MODE){
 8005e20:	4b89      	ldr	r3, [pc, #548]	; (8006048 <computeRC+0x534>)
 8005e22:	79db      	ldrb	r3, [r3, #7]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80a6 	beq.w	8005f76 <computeRC+0x462>
		RC.rcCommand[ROLL]     = map(zofs(RC.rcADC[ROLL], 1500, 20), 1100, 1900, -150, 150);
 8005e2a:	4b88      	ldr	r3, [pc, #544]	; (800604c <computeRC+0x538>)
 8005e2c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e30:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005e34:	dd13      	ble.n	8005e5e <computeRC+0x34a>
 8005e36:	4b85      	ldr	r3, [pc, #532]	; (800604c <computeRC+0x538>)
 8005e38:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e3c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005e40:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
 8005e48:	4a81      	ldr	r2, [pc, #516]	; (8006050 <computeRC+0x53c>)
 8005e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8005e4e:	1212      	asrs	r2, r2, #8
 8005e50:	17db      	asrs	r3, r3, #31
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b96      	subs	r3, #150	; 0x96
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	b21b      	sxth	r3, r3
 8005e5c:	e01a      	b.n	8005e94 <computeRC+0x380>
 8005e5e:	4b7b      	ldr	r3, [pc, #492]	; (800604c <computeRC+0x538>)
 8005e60:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e64:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005e68:	da13      	bge.n	8005e92 <computeRC+0x37e>
 8005e6a:	4b78      	ldr	r3, [pc, #480]	; (800604c <computeRC+0x538>)
 8005e6c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e70:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005e74:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e78:	fb02 f303 	mul.w	r3, r2, r3
 8005e7c:	4a74      	ldr	r2, [pc, #464]	; (8006050 <computeRC+0x53c>)
 8005e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8005e82:	1212      	asrs	r2, r2, #8
 8005e84:	17db      	asrs	r3, r3, #31
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b96      	subs	r3, #150	; 0x96
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	b21b      	sxth	r3, r3
 8005e90:	e000      	b.n	8005e94 <computeRC+0x380>
 8005e92:	2300      	movs	r3, #0
 8005e94:	4a6d      	ldr	r2, [pc, #436]	; (800604c <computeRC+0x538>)
 8005e96:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
		RC.rcCommand[PITCH]    = -map(zofs(RC.rcADC[PITCH], 1500, 20), 1100, 1900, -150, 150);
 8005e9a:	4b6c      	ldr	r3, [pc, #432]	; (800604c <computeRC+0x538>)
 8005e9c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005ea0:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005ea4:	dd13      	ble.n	8005ece <computeRC+0x3ba>
 8005ea6:	4b69      	ldr	r3, [pc, #420]	; (800604c <computeRC+0x538>)
 8005ea8:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005eac:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005eb0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005eb4:	fb02 f303 	mul.w	r3, r2, r3
 8005eb8:	4a65      	ldr	r2, [pc, #404]	; (8006050 <computeRC+0x53c>)
 8005eba:	fb82 1203 	smull	r1, r2, r2, r3
 8005ebe:	1212      	asrs	r2, r2, #8
 8005ec0:	17db      	asrs	r3, r3, #31
 8005ec2:	1a9b      	subs	r3, r3, r2
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3396      	adds	r3, #150	; 0x96
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	b21b      	sxth	r3, r3
 8005ecc:	e01a      	b.n	8005f04 <computeRC+0x3f0>
 8005ece:	4b5f      	ldr	r3, [pc, #380]	; (800604c <computeRC+0x538>)
 8005ed0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005ed4:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005ed8:	da13      	bge.n	8005f02 <computeRC+0x3ee>
 8005eda:	4b5c      	ldr	r3, [pc, #368]	; (800604c <computeRC+0x538>)
 8005edc:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005ee0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005ee4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ee8:	fb02 f303 	mul.w	r3, r2, r3
 8005eec:	4a58      	ldr	r2, [pc, #352]	; (8006050 <computeRC+0x53c>)
 8005eee:	fb82 1203 	smull	r1, r2, r2, r3
 8005ef2:	1212      	asrs	r2, r2, #8
 8005ef4:	17db      	asrs	r3, r3, #31
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3396      	adds	r3, #150	; 0x96
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	e000      	b.n	8005f04 <computeRC+0x3f0>
 8005f02:	2300      	movs	r3, #0
 8005f04:	4a51      	ldr	r2, [pc, #324]	; (800604c <computeRC+0x538>)
 8005f06:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
		RC.rcCommand[YAW]      = -map(zofs(RC.rcADC[YAW], 1500, 20), 1100, 1900, -90, 90);
 8005f0a:	4b50      	ldr	r3, [pc, #320]	; (800604c <computeRC+0x538>)
 8005f0c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f10:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8005f14:	dd12      	ble.n	8005f3c <computeRC+0x428>
 8005f16:	4b4d      	ldr	r3, [pc, #308]	; (800604c <computeRC+0x538>)
 8005f18:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f1c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005f20:	22b4      	movs	r2, #180	; 0xb4
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	4a4a      	ldr	r2, [pc, #296]	; (8006050 <computeRC+0x53c>)
 8005f28:	fb82 1203 	smull	r1, r2, r2, r3
 8005f2c:	1212      	asrs	r2, r2, #8
 8005f2e:	17db      	asrs	r3, r3, #31
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	335a      	adds	r3, #90	; 0x5a
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	b21b      	sxth	r3, r3
 8005f3a:	e019      	b.n	8005f70 <computeRC+0x45c>
 8005f3c:	4b43      	ldr	r3, [pc, #268]	; (800604c <computeRC+0x538>)
 8005f3e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f42:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8005f46:	da12      	bge.n	8005f6e <computeRC+0x45a>
 8005f48:	4b40      	ldr	r3, [pc, #256]	; (800604c <computeRC+0x538>)
 8005f4a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005f4e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005f52:	22b4      	movs	r2, #180	; 0xb4
 8005f54:	fb02 f303 	mul.w	r3, r2, r3
 8005f58:	4a3d      	ldr	r2, [pc, #244]	; (8006050 <computeRC+0x53c>)
 8005f5a:	fb82 1203 	smull	r1, r2, r2, r3
 8005f5e:	1212      	asrs	r2, r2, #8
 8005f60:	17db      	asrs	r3, r3, #31
 8005f62:	1a9b      	subs	r3, r3, r2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	335a      	adds	r3, #90	; 0x5a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	b21b      	sxth	r3, r3
 8005f6c:	e000      	b.n	8005f70 <computeRC+0x45c>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	4a36      	ldr	r2, [pc, #216]	; (800604c <computeRC+0x538>)
 8005f72:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
	}
	RC.rcCommand[THROTTLE] = map(zofs(RC.rcADC[THROTTLE], 1100, 20), 1100, 1900, 2250, 4000);//2250/4000
 8005f76:	4b35      	ldr	r3, [pc, #212]	; (800604c <computeRC+0x538>)
 8005f78:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005f7c:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8005f80:	dd14      	ble.n	8005fac <computeRC+0x498>
 8005f82:	4b32      	ldr	r3, [pc, #200]	; (800604c <computeRC+0x538>)
 8005f84:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005f88:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005f8c:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8005f90:	fb02 f303 	mul.w	r3, r2, r3
 8005f94:	4a2e      	ldr	r2, [pc, #184]	; (8006050 <computeRC+0x53c>)
 8005f96:	fb82 1203 	smull	r1, r2, r2, r3
 8005f9a:	1212      	asrs	r2, r2, #8
 8005f9c:	17db      	asrs	r3, r3, #31
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f603 03ca 	addw	r3, r3, #2250	; 0x8ca
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	e01c      	b.n	8005fe6 <computeRC+0x4d2>
 8005fac:	4b27      	ldr	r3, [pc, #156]	; (800604c <computeRC+0x538>)
 8005fae:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005fb2:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8005fb6:	da14      	bge.n	8005fe2 <computeRC+0x4ce>
 8005fb8:	4b24      	ldr	r3, [pc, #144]	; (800604c <computeRC+0x538>)
 8005fba:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005fbe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8005fc2:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	4a21      	ldr	r2, [pc, #132]	; (8006050 <computeRC+0x53c>)
 8005fcc:	fb82 1203 	smull	r1, r2, r2, r3
 8005fd0:	1212      	asrs	r2, r2, #8
 8005fd2:	17db      	asrs	r3, r3, #31
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f603 03ca 	addw	r3, r3, #2250	; 0x8ca
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	b21b      	sxth	r3, r3
 8005fe0:	e001      	b.n	8005fe6 <computeRC+0x4d2>
 8005fe2:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8005fe6:	4a19      	ldr	r2, [pc, #100]	; (800604c <computeRC+0x538>)
 8005fe8:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
	RC.rcCommand[GEAR]     = RC.rcADC[GEAR];
 8005fec:	4b17      	ldr	r3, [pc, #92]	; (800604c <computeRC+0x538>)
 8005fee:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8005ff2:	4b16      	ldr	r3, [pc, #88]	; (800604c <computeRC+0x538>)
 8005ff4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	RC.rcCommand[AUX1]     = RC.rcADC[AUX1];
 8005ff8:	4b14      	ldr	r3, [pc, #80]	; (800604c <computeRC+0x538>)
 8005ffa:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <computeRC+0x538>)
 8006000:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	if(RC.rcCommand[GEAR] > 1500 && !f.HEADFREE_MODE)
 8006004:	4b11      	ldr	r3, [pc, #68]	; (800604c <computeRC+0x538>)
 8006006:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800600a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800600e:	4293      	cmp	r3, r2
 8006010:	dd07      	ble.n	8006022 <computeRC+0x50e>
 8006012:	4b0d      	ldr	r3, [pc, #52]	; (8006048 <computeRC+0x534>)
 8006014:	7b9b      	ldrb	r3, [r3, #14]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <computeRC+0x50e>
	{
		f.HEADFREE_MODE = 1;
 800601a:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <computeRC+0x534>)
 800601c:	2201      	movs	r2, #1
 800601e:	739a      	strb	r2, [r3, #14]
	}else if(RC.rcCommand[GEAR] < 1500 && f.HEADFREE_MODE)
	{
		f.HEADFREE_MODE = 0;
	}
}
 8006020:	e00d      	b.n	800603e <computeRC+0x52a>
	}else if(RC.rcCommand[GEAR] < 1500 && f.HEADFREE_MODE)
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <computeRC+0x538>)
 8006024:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8006028:	f240 52db 	movw	r2, #1499	; 0x5db
 800602c:	4293      	cmp	r3, r2
 800602e:	dc06      	bgt.n	800603e <computeRC+0x52a>
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <computeRC+0x534>)
 8006032:	7b9b      	ldrb	r3, [r3, #14]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <computeRC+0x52a>
		f.HEADFREE_MODE = 0;
 8006038:	4b03      	ldr	r3, [pc, #12]	; (8006048 <computeRC+0x534>)
 800603a:	2200      	movs	r2, #0
 800603c:	739a      	strb	r2, [r3, #14]
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000ed4 	.word	0x20000ed4
 800604c:	20000d40 	.word	0x20000d40
 8006050:	51eb851f 	.word	0x51eb851f

08006054 <QueueCreate>:
{

}

bool QueueCreate(Queue_t *Q, uint8_t *Q_buf, uint32_t length)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
	bool ret = true;
 8006060:	2301      	movs	r3, #1
 8006062:	75fb      	strb	r3, [r7, #23]

	Q->buffer = Q_buf;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	601a      	str	r2, [r3, #0]
	Q->head = 0;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	711a      	strb	r2, [r3, #4]
	Q->tail = 0;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	715a      	strb	r2, [r3, #5]
	Q->size = MAX_SIZE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	22ff      	movs	r2, #255	; 0xff
 800607a:	719a      	strb	r2, [r3, #6]
	Q->temp = 0;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	71da      	strb	r2, [r3, #7]
	Q->cnt = 0;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	609a      	str	r2, [r3, #8]

	return ret;
 8006088:	7dfb      	ldrb	r3, [r7, #23]
}
 800608a:	4618      	mov	r0, r3
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr

08006094 <Q_empty>:
{
	if((Q->head+1)%MAX_SIZE == Q->tail){
	   return true;
	} return false;
}
uint8_t Q_empty(Queue_t *Q){
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	if(Q->head == Q->tail){
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	791b      	ldrb	r3, [r3, #4]
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	795b      	ldrb	r3, [r3, #5]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d101      	bne.n	80060b0 <Q_empty+0x1c>
		return true;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <Q_empty+0x1e>
	} return false;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bc80      	pop	{r7}
 80060ba:	4770      	bx	lr

080060bc <Q_read>:
		Q->head = (Q->head+1) % MAX_SIZE;
	}
	return true;
}

bool Q_read(Queue_t *Q, uint8_t *p_data, uint32_t length){
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
	if(Q_empty(Q)){
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff ffe3 	bl	8006094 <Q_empty>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <Q_read+0x1c>
		return false;
 80060d4:	2300      	movs	r3, #0
 80060d6:	e028      	b.n	800612a <Q_read+0x6e>
	}
	for (int i=0; i<length; i++)
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	e020      	b.n	8006120 <Q_read+0x64>
	{
		p_data[i] = Q->buffer[Q->tail];
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	7952      	ldrb	r2, [r2, #5]
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	441a      	add	r2, r3
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	440b      	add	r3, r1
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]
		Q->tail = (Q->tail+1) % MAX_SIZE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	795b      	ldrb	r3, [r3, #5]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <Q_read+0x78>)
 8006100:	fb83 1302 	smull	r1, r3, r3, r2
 8006104:	4413      	add	r3, r2
 8006106:	11d9      	asrs	r1, r3, #7
 8006108:	17d3      	asrs	r3, r2, #31
 800610a:	1ac9      	subs	r1, r1, r3
 800610c:	460b      	mov	r3, r1
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	1a5b      	subs	r3, r3, r1
 8006112:	1ad1      	subs	r1, r2, r3
 8006114:	b2ca      	uxtb	r2, r1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	715a      	strb	r2, [r3, #5]
	for (int i=0; i<length; i++)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	3301      	adds	r3, #1
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	d8da      	bhi.n	80060de <Q_read+0x22>
	}

	return true;
 8006128:	2301      	movs	r3, #1
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	80808081 	.word	0x80808081

08006138 <QueueAvailable>:

uint32_t QueueAvailable(Queue_t *Q)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t length;

  length = (Q->head - Q->tail) % Q->size;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	791b      	ldrb	r3, [r3, #4]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	795b      	ldrb	r3, [r3, #5]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	7992      	ldrb	r2, [r2, #6]
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	fb93 f1f2 	sdiv	r1, r3, r2
 800615a:	fb02 f201 	mul.w	r2, r2, r1
 800615e:	1a9b      	subs	r3, r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  return length;
 8006162:	68fb      	ldr	r3, [r7, #12]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr
	...

08006170 <getMres>:

// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
uint8_t Mmode = M_100HZ;

void getMres()
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
	switch (Mscale)
 8006174:	4b09      	ldr	r3, [pc, #36]	; (800619c <getMres+0x2c>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <getMres+0x12>
 800617c:	2b01      	cmp	r3, #1
 800617e:	d004      	beq.n	800618a <getMres+0x1a>
			break;
		case MFS_16BITS:
			mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
			break;
	}
}
 8006180:	e007      	b.n	8006192 <getMres+0x22>
			mRes = 10.0f * 4912.0f / 8190.0f; // Proper scale to return milliGauss
 8006182:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <getMres+0x30>)
 8006184:	4a07      	ldr	r2, [pc, #28]	; (80061a4 <getMres+0x34>)
 8006186:	601a      	str	r2, [r3, #0]
			break;
 8006188:	e003      	b.n	8006192 <getMres+0x22>
			mRes = 10.0f * 4912.0f / 32760.0f; // Proper scale to return milliGauss
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <getMres+0x30>)
 800618c:	4a06      	ldr	r2, [pc, #24]	; (80061a8 <getMres+0x38>)
 800618e:	601a      	str	r2, [r3, #0]
			break;
 8006190:	bf00      	nop
}
 8006192:	bf00      	nop
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	20000010 	.word	0x20000010
 80061a0:	20000ad8 	.word	0x20000ad8
 80061a4:	40bfebff 	.word	0x40bfebff
 80061a8:	3fbfebff 	.word	0x3fbfebff

080061ac <getGres>:

void getGres()
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
	switch (Gscale)
 80061b0:	4b11      	ldr	r3, [pc, #68]	; (80061f8 <getGres+0x4c>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d81b      	bhi.n	80061f0 <getGres+0x44>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <getGres+0x14>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061d1 	.word	0x080061d1
 80061c4:	080061d9 	.word	0x080061d9
 80061c8:	080061e1 	.word	0x080061e1
 80061cc:	080061e9 	.word	0x080061e9
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS (11).
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
		// 2-bit value:
		case GFS_250DPS:
			gRes = 250.0f / 32768.0f;
 80061d0:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <getGres+0x50>)
 80061d2:	4a0b      	ldr	r2, [pc, #44]	; (8006200 <getGres+0x54>)
 80061d4:	601a      	str	r2, [r3, #0]
			break;
 80061d6:	e00b      	b.n	80061f0 <getGres+0x44>
		case GFS_500DPS:
			gRes = 500.0f / 32768.0f;
 80061d8:	4b08      	ldr	r3, [pc, #32]	; (80061fc <getGres+0x50>)
 80061da:	4a0a      	ldr	r2, [pc, #40]	; (8006204 <getGres+0x58>)
 80061dc:	601a      	str	r2, [r3, #0]
			break;
 80061de:	e007      	b.n	80061f0 <getGres+0x44>
		case GFS_1000DPS:
			gRes = 1000.0f / 32768.0f;
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <getGres+0x50>)
 80061e2:	4a09      	ldr	r2, [pc, #36]	; (8006208 <getGres+0x5c>)
 80061e4:	601a      	str	r2, [r3, #0]
			break;
 80061e6:	e003      	b.n	80061f0 <getGres+0x44>
		case GFS_2000DPS:
			gRes = 2000.0f / 32768.0f;
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <getGres+0x50>)
 80061ea:	4a08      	ldr	r2, [pc, #32]	; (800620c <getGres+0x60>)
 80061ec:	601a      	str	r2, [r3, #0]
			break;
 80061ee:	bf00      	nop
	}
}
 80061f0:	bf00      	nop
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr
 80061f8:	2000000e 	.word	0x2000000e
 80061fc:	20000ad4 	.word	0x20000ad4
 8006200:	3bfa0000 	.word	0x3bfa0000
 8006204:	3c7a0000 	.word	0x3c7a0000
 8006208:	3cfa0000 	.word	0x3cfa0000
 800620c:	3d7a0000 	.word	0x3d7a0000

08006210 <getAres>:

void getAres()
{
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
	switch (Ascale)
 8006214:	4b13      	ldr	r3, [pc, #76]	; (8006264 <getAres+0x54>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b03      	cmp	r3, #3
 800621a:	d81f      	bhi.n	800625c <getAres+0x4c>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <getAres+0x14>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006235 	.word	0x08006235
 8006228:	0800623f 	.word	0x0800623f
 800622c:	08006249 	.word	0x08006249
 8006230:	08006253 	.word	0x08006253
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that
		// 2-bit value:
		case AFS_2G:
			aRes = 2.0f / 32768.0f;
 8006234:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <getAres+0x58>)
 8006236:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800623a:	601a      	str	r2, [r3, #0]
			break;
 800623c:	e00e      	b.n	800625c <getAres+0x4c>
		case AFS_4G:
			aRes = 4.0f / 32768.0f;
 800623e:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <getAres+0x58>)
 8006240:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8006244:	601a      	str	r2, [r3, #0]
			break;
 8006246:	e009      	b.n	800625c <getAres+0x4c>
		case AFS_8G:
			aRes = 8.0f / 32768.0f;
 8006248:	4b07      	ldr	r3, [pc, #28]	; (8006268 <getAres+0x58>)
 800624a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800624e:	601a      	str	r2, [r3, #0]
			break;
 8006250:	e004      	b.n	800625c <getAres+0x4c>
		case AFS_16G:
			aRes = 16.0f / 32768.0f;
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <getAres+0x58>)
 8006254:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8006258:	601a      	str	r2, [r3, #0]
			break;
 800625a:	bf00      	nop
	}
}
 800625c:	bf00      	nop
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	2000000f 	.word	0x2000000f
 8006268:	20000ac8 	.word	0x20000ac8

0800626c <MPU9250_Init>:

bool MPU9250_Init()
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af02      	add	r7, sp, #8
	bool ret = true;
 8006272:	2301      	movs	r3, #1
 8006274:	71fb      	strb	r3, [r7, #7]

	uint8_t whoami = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	71bb      	strb	r3, [r7, #6]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_WHO_AM_I, 1, rawADC, 1);
 800627a:	2301      	movs	r3, #1
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4b73      	ldr	r3, [pc, #460]	; (800644c <MPU9250_Init+0x1e0>)
 8006280:	2201      	movs	r2, #1
 8006282:	2175      	movs	r1, #117	; 0x75
 8006284:	20d2      	movs	r0, #210	; 0xd2
 8006286:	f004 ffd7 	bl	800b238 <I2C_ByteRead>
	whoami = rawADC[0];
 800628a:	4b70      	ldr	r3, [pc, #448]	; (800644c <MPU9250_Init+0x1e0>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	71bb      	strb	r3, [r7, #6]
#ifdef debug
	logPrintf("I AM 0x%x\r\n", whoami);
	logPrintf("I SHOULD BE 0x71\r\n");
#endif
	if(whoami == 0x71)
 8006290:	79bb      	ldrb	r3, [r7, #6]
 8006292:	2b71      	cmp	r3, #113	; 0x71
 8006294:	f040 80d0 	bne.w	8006438 <MPU9250_Init+0x1cc>
	{
#ifdef debug
		logPrintf("MPU-9250 Init Start (9-DOF 16-bit motion sensor)\r\nMPU-9250 SelfTest Start\r\n");
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80); //resetMPU9250
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	2308      	movs	r3, #8
 800629e:	2207      	movs	r2, #7
 80062a0:	216b      	movs	r1, #107	; 0x6b
 80062a2:	20d2      	movs	r0, #210	; 0xd2
 80062a4:	f004 ff40 	bl	800b128 <I2C_ByteWrite>
		HAL_Delay(50);
 80062a8:	2032      	movs	r0, #50	; 0x32
 80062aa:	f006 fa65 	bl	800c778 <HAL_Delay>
		MPU9250SelfTest(SelfTest);
 80062ae:	4868      	ldr	r0, [pc, #416]	; (8006450 <MPU9250_Init+0x1e4>)
 80062b0:	f001 f972 	bl	8007598 <MPU9250SelfTest>
		logPrintf(" z-axis self test: gyration trim within : %f percent of factory value\r\n",SelfTest[5]);
		HAL_Delay(100); // for stability

		logPrintf("MPU-9250 Calibration Start\r\n");
#endif
		calibrateMPU9250(gyroBias, accBias);
 80062b4:	4967      	ldr	r1, [pc, #412]	; (8006454 <MPU9250_Init+0x1e8>)
 80062b6:	4868      	ldr	r0, [pc, #416]	; (8006458 <MPU9250_Init+0x1ec>)
 80062b8:	f000 fe08 	bl	8006ecc <calibrateMPU9250>
		logPrintf(" %.2f   %.2f   %.2f o/s\r\n", gyroBias[0], gyroBias[1], gyroBias[2]);
		HAL_Delay(100); // for stability
#endif

		// ACC Gyro_Init
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00); // Clear sleep mode bit (6), enable all sensors
 80062bc:	2300      	movs	r3, #0
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	2308      	movs	r3, #8
 80062c2:	2207      	movs	r2, #7
 80062c4:	216b      	movs	r1, #107	; 0x6b
 80062c6:	20d2      	movs	r0, #210	; 0xd2
 80062c8:	f004 ff2e 	bl	800b128 <I2C_ByteWrite>
		HAL_Delay(100); // for stability
 80062cc:	2064      	movs	r0, #100	; 0x64
 80062ce:	f006 fa53 	bl	800c778 <HAL_Delay>
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001;
 80062d2:	2301      	movs	r3, #1
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	2308      	movs	r3, #8
 80062d8:	2207      	movs	r2, #7
 80062da:	216b      	movs	r1, #107	; 0x6b
 80062dc:	20d2      	movs	r0, #210	; 0xd2
 80062de:	f004 ff23 	bl	800b128 <I2C_ByteWrite>
		HAL_Delay(200); // for stability
 80062e2:	20c8      	movs	r0, #200	; 0xc8
 80062e4:	f006 fa48 	bl	800c778 <HAL_Delay>
		//I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 5, 6, 0x00);
		//HAL_Delay(100);
		//I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 4, 2, MPU9250_GYRO_FS_2000);
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, MPU9250_DLPF_BW_42); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 80062e8:	2303      	movs	r3, #3
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	2308      	movs	r3, #8
 80062ee:	2207      	movs	r2, #7
 80062f0:	211a      	movs	r1, #26
 80062f2:	20d2      	movs	r0, #210	; 0xd2
 80062f4:	f004 ff18 	bl	800b128 <I2C_ByteWrite>
		HAL_Delay(100);
 80062f8:	2064      	movs	r0, #100	; 0x64
 80062fa:	f006 fa3d 	bl	800c778 <HAL_Delay>

		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x04);  //0x00 SMPLRT_DIV    -- SMPLRT_DIV = 0  Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)
 80062fe:	2304      	movs	r3, #4
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	2308      	movs	r3, #8
 8006304:	2207      	movs	r2, #7
 8006306:	2119      	movs	r1, #25
 8006308:	20d2      	movs	r0, #210	; 0xd2
 800630a:	f004 ff0d 	bl	800b128 <I2C_ByteWrite>
		HAL_Delay(100);
 800630e:	2064      	movs	r0, #100	; 0x64
 8006310:	f006 fa32 	bl	800c778 <HAL_Delay>

		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 1, rawADC, 1);
 8006314:	2301      	movs	r3, #1
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	4b4c      	ldr	r3, [pc, #304]	; (800644c <MPU9250_Init+0x1e0>)
 800631a:	2201      	movs	r2, #1
 800631c:	211b      	movs	r1, #27
 800631e:	20d2      	movs	r0, #210	; 0xd2
 8006320:	f004 ff8a 	bl	800b238 <I2C_ByteRead>
		uint8_t c = rawADC[0];
 8006324:	4b49      	ldr	r3, [pc, #292]	; (800644c <MPU9250_Init+0x1e0>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	717b      	strb	r3, [r7, #5]
		// c = c & ~0xE0; // Clear self-test bits [7:5]
		c = c & ~0x02; // Clear Fchoice bits [1:0]
 800632a:	797b      	ldrb	r3, [r7, #5]
 800632c:	f023 0302 	bic.w	r3, r3, #2
 8006330:	717b      	strb	r3, [r7, #5]
		c = c & ~0x18; // Clear AFS bits [4:3]
 8006332:	797b      	ldrb	r3, [r7, #5]
 8006334:	f023 0318 	bic.w	r3, r3, #24
 8006338:	717b      	strb	r3, [r7, #5]
		c = c | Gscale << 3; // Set full scale range for the gyro
 800633a:	4b48      	ldr	r3, [pc, #288]	; (800645c <MPU9250_Init+0x1f0>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	b25a      	sxtb	r2, r3
 8006342:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006346:	4313      	orrs	r3, r2
 8006348:	b25b      	sxtb	r3, r3
 800634a:	717b      	strb	r3, [r7, #5]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, rawADC[0] & ~0x18); // Clear AFS bits [4:3]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, rawADC[0] | (MPU9250_GYRO_FS_250<<3)); //GYRO_CONFIG   -- FS_SEL = 2: Full scale set to 1000 deg/sec
#ifdef debug
		logPrintf(" GYRO : %d \r\n", c);
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, c);
 800634c:	797b      	ldrb	r3, [r7, #5]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	2308      	movs	r3, #8
 8006352:	2207      	movs	r2, #7
 8006354:	211b      	movs	r1, #27
 8006356:	20d2      	movs	r0, #210	; 0xd2
 8006358:	f004 fee6 	bl	800b128 <I2C_ByteWrite>
		//	  HAL_Delay(100);

		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 1, rawADC, 1);
 800635c:	2301      	movs	r3, #1
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	4b3a      	ldr	r3, [pc, #232]	; (800644c <MPU9250_Init+0x1e0>)
 8006362:	2201      	movs	r2, #1
 8006364:	211c      	movs	r1, #28
 8006366:	20d2      	movs	r0, #210	; 0xd2
 8006368:	f004 ff66 	bl	800b238 <I2C_ByteRead>
		c = rawADC[0];
 800636c:	4b37      	ldr	r3, [pc, #220]	; (800644c <MPU9250_Init+0x1e0>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	717b      	strb	r3, [r7, #5]
		// c = c & ~0xE0; // Clear self-test bits [7:5]
		c = c & ~0x18;  // Clear AFS bits [4:3]
 8006372:	797b      	ldrb	r3, [r7, #5]
 8006374:	f023 0318 	bic.w	r3, r3, #24
 8006378:	717b      	strb	r3, [r7, #5]
		c = c | Ascale << 3; // Set full scale range for the accelerometer
 800637a:	4b39      	ldr	r3, [pc, #228]	; (8006460 <MPU9250_Init+0x1f4>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	b25a      	sxtb	r2, r3
 8006382:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006386:	4313      	orrs	r3, r2
 8006388:	b25b      	sxtb	r3, r3
 800638a:	717b      	strb	r3, [r7, #5]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, rawADC[0] & ~0x18); // Clear AFS bits [4:3]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, rawADC[0] | (MPU9250_ACCEL_FS_2<<3)); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
#ifdef debug
		logPrintf(" ACEL : %d \r\n", c);
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, c);
 800638c:	797b      	ldrb	r3, [r7, #5]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	2308      	movs	r3, #8
 8006392:	2207      	movs	r2, #7
 8006394:	211c      	movs	r1, #28
 8006396:	20d2      	movs	r0, #210	; 0xd2
 8006398:	f004 fec6 	bl	800b128 <I2C_ByteWrite>
		//	  HAL_Delay(100);

		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 1, rawADC, 1);
 800639c:	2301      	movs	r3, #1
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	4b2a      	ldr	r3, [pc, #168]	; (800644c <MPU9250_Init+0x1e0>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	211d      	movs	r1, #29
 80063a6:	20d2      	movs	r0, #210	; 0xd2
 80063a8:	f004 ff46 	bl	800b238 <I2C_ByteRead>
		c = rawADC[0];
 80063ac:	4b27      	ldr	r3, [pc, #156]	; (800644c <MPU9250_Init+0x1e0>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	717b      	strb	r3, [r7, #5]
		c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80063b2:	797b      	ldrb	r3, [r7, #5]
 80063b4:	f023 030f 	bic.w	r3, r3, #15
 80063b8:	717b      	strb	r3, [r7, #5]
		c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80063ba:	797b      	ldrb	r3, [r7, #5]
 80063bc:	f043 0303 	orr.w	r3, r3, #3
 80063c0:	717b      	strb	r3, [r7, #5]
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, rawADC[0] & ~0x0F);// Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
		//    I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, rawADC[0] | 0x03);// Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
#ifdef debug
		logPrintf(" ACEL2 : %d \r\n", c);
#endif
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG2, 7, 8, c);
 80063c2:	797b      	ldrb	r3, [r7, #5]
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	2308      	movs	r3, #8
 80063c8:	2207      	movs	r2, #7
 80063ca:	211d      	movs	r1, #29
 80063cc:	20d2      	movs	r0, #210	; 0xd2
 80063ce:	f004 feab 	bl	800b128 <I2C_ByteWrite>
		//		HAL_Delay(100);
		//note: something seems to be wrong in the spec here. With AFS=2 1G = 4096 but according to my measurement: 1G=2048 (and 2048/8 = 256)
		//confirmed here: http://www.multiwii.com/forum/viewtopic.php?f=8&t=1080&start=10#p7480

		// I2C_BitWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_PIN_CFG, MPU9250_INTCFG_I2C_BYPASS_EN_BIT, ENABLE);  // enable I2C bypass for AUX I2C
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_PIN_CFG, 7, 8, 0x22);
 80063d2:	2322      	movs	r3, #34	; 0x22
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	2308      	movs	r3, #8
 80063d8:	2207      	movs	r2, #7
 80063da:	2137      	movs	r1, #55	; 0x37
 80063dc:	20d2      	movs	r0, #210	; 0xd2
 80063de:	f004 fea3 	bl	800b128 <I2C_ByteWrite>
		I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x01);
 80063e2:	2301      	movs	r3, #1
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	2308      	movs	r3, #8
 80063e8:	2207      	movs	r2, #7
 80063ea:	2138      	movs	r1, #56	; 0x38
 80063ec:	20d2      	movs	r0, #210	; 0xd2
 80063ee:	f004 fe9b 	bl	800b128 <I2C_ByteWrite>

		//MPU9150_I2C_BitWrite(MPU9150_Address, MPU6050_RA_INT_PIN_CFG, MPU6050_INTERRUPT_DATA_RDY_BIT, ENABLE);
		//MPU9150_I2C_BitWrite(MPU9150_Address, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, ENABLE);
		HAL_Delay(100); // for stability
 80063f2:	2064      	movs	r0, #100	; 0x64
 80063f4:	f006 f9c0 	bl	800c778 <HAL_Delay>

		//Compass_Init
#ifdef debug
		logPrintf("AK8963 Init Start!\r\n");
#endif
		I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, WHO_AM_I_AK8963, 1, rawADC, 1);
 80063f8:	2301      	movs	r3, #1
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	4b13      	ldr	r3, [pc, #76]	; (800644c <MPU9250_Init+0x1e0>)
 80063fe:	2201      	movs	r2, #1
 8006400:	2100      	movs	r1, #0
 8006402:	2018      	movs	r0, #24
 8006404:	f004 ff18 	bl	800b238 <I2C_ByteRead>
		whoami = rawADC[0];
 8006408:	4b10      	ldr	r3, [pc, #64]	; (800644c <MPU9250_Init+0x1e0>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	71bb      	strb	r3, [r7, #6]
		logPrintf("I AM 0x%x\r\n", whoami);
		logPrintf("I SHOULD BE 0x48\r\n");
		logPrintf("AK8963 Init (Compass sensor)\r\n");
		HAL_Delay(100); // for stability
#endif
		initAK8963(magCalibration);
 800640e:	4815      	ldr	r0, [pc, #84]	; (8006464 <MPU9250_Init+0x1f8>)
 8006410:	f001 f830 	bl	8007474 <initAK8963>
		HAL_Delay(100); // for stability
 8006414:	2064      	movs	r0, #100	; 0x64
 8006416:	f006 f9af 	bl	800c778 <HAL_Delay>

		getAres();
 800641a:	f7ff fef9 	bl	8006210 <getAres>
		getGres();
 800641e:	f7ff fec5 	bl	80061ac <getGres>
		getMres();
 8006422:	f7ff fea5 	bl	8006170 <getMres>
 8006426:	e00b      	b.n	8006440 <MPU9250_Init+0x1d4>
		logPrintf("Could not connect to MPU9250: %#x\r\n", whoami);
		logPrintf("Communication failed, abort!\r\n");
#endif
		while (Error.error !=0)
		{
			Error.error = 1;
 8006428:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <MPU9250_Init+0x1fc>)
 800642a:	2201      	movs	r2, #1
 800642c:	701a      	strb	r2, [r3, #0]
			error_signal();
 800642e:	f7fd fc81 	bl	8003d34 <error_signal>
			HAL_Delay(4);
 8006432:	2004      	movs	r0, #4
 8006434:	f006 f9a0 	bl	800c778 <HAL_Delay>
		while (Error.error !=0)
 8006438:	4b0b      	ldr	r3, [pc, #44]	; (8006468 <MPU9250_Init+0x1fc>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f3      	bne.n	8006428 <MPU9250_Init+0x1bc>
		}
	}
	return ret;
 8006440:	79fb      	ldrb	r3, [r7, #7]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000f0c 	.word	0x20000f0c
 8006450:	20000350 	.word	0x20000350
 8006454:	20000374 	.word	0x20000374
 8006458:	20000368 	.word	0x20000368
 800645c:	2000000e 	.word	0x2000000e
 8006460:	2000000f 	.word	0x2000000f
 8006464:	20000338 	.word	0x20000338
 8006468:	20000acc 	.word	0x20000acc

0800646c <Calibrate_gyro>:

void Calibrate_gyro(void)
{
 800646c:	b5b0      	push	{r4, r5, r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
	int cal_int = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	607b      	str	r3, [r7, #4]
	uint8_t axis = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	70fb      	strb	r3, [r7, #3]

	for (cal_int = 0; cal_int < 2000; cal_int ++)
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	e03d      	b.n	80064fc <Calibrate_gyro+0x90>
	{
		if (cal_int % 125 == 0)
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	4b31      	ldr	r3, [pc, #196]	; (8006548 <Calibrate_gyro+0xdc>)
 8006484:	fb83 2301 	smull	r2, r3, r3, r1
 8006488:	10da      	asrs	r2, r3, #3
 800648a:	17cb      	asrs	r3, r1, #31
 800648c:	1ad2      	subs	r2, r2, r3
 800648e:	4613      	mov	r3, r2
 8006490:	015b      	lsls	r3, r3, #5
 8006492:	1a9b      	subs	r3, r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	1aca      	subs	r2, r1, r3
 800649a:	2a00      	cmp	r2, #0
 800649c:	d102      	bne.n	80064a4 <Calibrate_gyro+0x38>
		{
			ledToggle(RGB_GREEN);  //Change the led status to indicate calibration.
 800649e:	2003      	movs	r0, #3
 80064a0:	f005 f9a8 	bl	800b7f4 <ledToggle>
#ifdef debug
			logPrintf(".");
#endif
		}
		Gyro_getADC();
 80064a4:	f000 f856 	bl	8006554 <Gyro_getADC>
		Mag_getADC();
 80064a8:	f000 fa0e 	bl	80068c8 <Mag_getADC>
		for(axis=0; axis<3; axis++)
 80064ac:	2300      	movs	r3, #0
 80064ae:	70fb      	strb	r3, [r7, #3]
 80064b0:	e01e      	b.n	80064f0 <Calibrate_gyro+0x84>
		{
			imu.gyro_cal[axis] += (float)imu.gyroADC[axis];
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	4a25      	ldr	r2, [pc, #148]	; (800654c <Calibrate_gyro+0xe0>)
 80064b6:	331c      	adds	r3, #28
 80064b8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	4a23      	ldr	r2, [pc, #140]	; (800654c <Calibrate_gyro+0xe0>)
 80064c0:	3304      	adds	r3, #4
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	4413      	add	r3, r2
 80064c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fa fc20 	bl	8000d10 <__aeabi_i2f>
 80064d0:	4603      	mov	r3, r0
 80064d2:	78fc      	ldrb	r4, [r7, #3]
 80064d4:	4619      	mov	r1, r3
 80064d6:	4628      	mov	r0, r5
 80064d8:	f7fa fb66 	bl	8000ba8 <__addsf3>
 80064dc:	4603      	mov	r3, r0
 80064de:	4619      	mov	r1, r3
 80064e0:	4a1a      	ldr	r2, [pc, #104]	; (800654c <Calibrate_gyro+0xe0>)
 80064e2:	f104 031c 	add.w	r3, r4, #28
 80064e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(axis=0; axis<3; axis++)
 80064ea:	78fb      	ldrb	r3, [r7, #3]
 80064ec:	3301      	adds	r3, #1
 80064ee:	70fb      	strb	r3, [r7, #3]
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d9dd      	bls.n	80064b2 <Calibrate_gyro+0x46>
	for (cal_int = 0; cal_int < 2000; cal_int ++)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	3301      	adds	r3, #1
 80064fa:	607b      	str	r3, [r7, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006502:	dbbd      	blt.n	8006480 <Calibrate_gyro+0x14>
		}
	}
	for(axis=0; axis<3; axis++)
 8006504:	2300      	movs	r3, #0
 8006506:	70fb      	strb	r3, [r7, #3]
 8006508:	e013      	b.n	8006532 <Calibrate_gyro+0xc6>
	{
		imu.gyro_cal[axis] /= 2000.0f;
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	4a0f      	ldr	r2, [pc, #60]	; (800654c <Calibrate_gyro+0xe0>)
 800650e:	331c      	adds	r3, #28
 8006510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006514:	78fc      	ldrb	r4, [r7, #3]
 8006516:	490e      	ldr	r1, [pc, #56]	; (8006550 <Calibrate_gyro+0xe4>)
 8006518:	4618      	mov	r0, r3
 800651a:	f7fa fd01 	bl	8000f20 <__aeabi_fdiv>
 800651e:	4603      	mov	r3, r0
 8006520:	4619      	mov	r1, r3
 8006522:	4a0a      	ldr	r2, [pc, #40]	; (800654c <Calibrate_gyro+0xe0>)
 8006524:	f104 031c 	add.w	r3, r4, #28
 8006528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(axis=0; axis<3; axis++)
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	3301      	adds	r3, #1
 8006530:	70fb      	strb	r3, [r7, #3]
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d9e8      	bls.n	800650a <Calibrate_gyro+0x9e>
	}
	HAL_Delay(100);
 8006538:	2064      	movs	r0, #100	; 0x64
 800653a:	f006 f91d 	bl	800c778 <HAL_Delay>
}
 800653e:	bf00      	nop
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bdb0      	pop	{r4, r5, r7, pc}
 8006546:	bf00      	nop
 8006548:	10624dd3 	.word	0x10624dd3
 800654c:	20000e20 	.word	0x20000e20
 8006550:	44fa0000 	.word	0x44fa0000

08006554 <Gyro_getADC>:

void Gyro_getADC(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af02      	add	r7, sp, #8
	int16_t x = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	80fb      	strh	r3, [r7, #6]
	int16_t y = 0;
 800655e:	2300      	movs	r3, #0
 8006560:	80bb      	strh	r3, [r7, #4]
	int16_t z = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	807b      	strh	r3, [r7, #2]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6);
 8006566:	2306      	movs	r3, #6
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	4b18      	ldr	r3, [pc, #96]	; (80065cc <Gyro_getADC+0x78>)
 800656c:	2201      	movs	r2, #1
 800656e:	2143      	movs	r1, #67	; 0x43
 8006570:	20d2      	movs	r0, #210	; 0xd2
 8006572:	f004 fe61 	bl	800b238 <I2C_ByteRead>
	/* Get Angular rate */
	x = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8006576:	4b15      	ldr	r3, [pc, #84]	; (80065cc <Gyro_getADC+0x78>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	b21a      	sxth	r2, r3
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <Gyro_getADC+0x78>)
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	b21b      	sxth	r3, r3
 8006584:	4313      	orrs	r3, r2
 8006586:	80fb      	strh	r3, [r7, #6]
	y = ((int16_t)rawADC[2]<<8) | rawADC[3];
 8006588:	4b10      	ldr	r3, [pc, #64]	; (80065cc <Gyro_getADC+0x78>)
 800658a:	789b      	ldrb	r3, [r3, #2]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	b21a      	sxth	r2, r3
 8006590:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <Gyro_getADC+0x78>)
 8006592:	78db      	ldrb	r3, [r3, #3]
 8006594:	b21b      	sxth	r3, r3
 8006596:	4313      	orrs	r3, r2
 8006598:	80bb      	strh	r3, [r7, #4]
	z = ((int16_t)rawADC[4]<<8) | rawADC[5];
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <Gyro_getADC+0x78>)
 800659c:	791b      	ldrb	r3, [r3, #4]
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	b21a      	sxth	r2, r3
 80065a2:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <Gyro_getADC+0x78>)
 80065a4:	795b      	ldrb	r3, [r3, #5]
 80065a6:	b21b      	sxth	r3, r3
 80065a8:	4313      	orrs	r3, r2
 80065aa:	807b      	strh	r3, [r7, #2]
	GYRO_ORIENTATION(x, y, z);
 80065ac:	4a08      	ldr	r2, [pc, #32]	; (80065d0 <Gyro_getADC+0x7c>)
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	81d3      	strh	r3, [r2, #14]
 80065b2:	4a07      	ldr	r2, [pc, #28]	; (80065d0 <Gyro_getADC+0x7c>)
 80065b4:	88bb      	ldrh	r3, [r7, #4]
 80065b6:	8213      	strh	r3, [r2, #16]
 80065b8:	4a05      	ldr	r2, [pc, #20]	; (80065d0 <Gyro_getADC+0x7c>)
 80065ba:	887b      	ldrh	r3, [r7, #2]
 80065bc:	8253      	strh	r3, [r2, #18]
	GYRO_Common();
 80065be:	f000 f809 	bl	80065d4 <GYRO_Common>
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000f0c 	.word	0x20000f0c
 80065d0:	20000e20 	.word	0x20000e20

080065d4 <GYRO_Common>:

void GYRO_Common(void)
{
 80065d4:	b590      	push	{r4, r7, lr}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
	uint8_t axis =0;
 80065da:	2300      	movs	r3, #0
 80065dc:	71fb      	strb	r3, [r7, #7]
	for(axis=0; axis<3; axis++)
 80065de:	2300      	movs	r3, #0
 80065e0:	71fb      	strb	r3, [r7, #7]
 80065e2:	e05d      	b.n	80066a0 <GYRO_Common+0xcc>
	{
		imu.gyroRaw[axis] = ((float)imu.gyroADC[axis] - imu.gyro_cal[axis]) * gRes;// - gyroBias[axis];
 80065e4:	79fb      	ldrb	r3, [r7, #7]
 80065e6:	4a32      	ldr	r2, [pc, #200]	; (80066b0 <GYRO_Common+0xdc>)
 80065e8:	3304      	adds	r3, #4
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	4413      	add	r3, r2
 80065ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fa fb8c 	bl	8000d10 <__aeabi_i2f>
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	4a2d      	ldr	r2, [pc, #180]	; (80066b0 <GYRO_Common+0xdc>)
 80065fc:	331c      	adds	r3, #28
 80065fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006602:	4619      	mov	r1, r3
 8006604:	f7fa face 	bl	8000ba4 <__aeabi_fsub>
 8006608:	4603      	mov	r3, r0
 800660a:	461a      	mov	r2, r3
 800660c:	4b29      	ldr	r3, [pc, #164]	; (80066b4 <GYRO_Common+0xe0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	79fc      	ldrb	r4, [r7, #7]
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f7fa fbcf 	bl	8000db8 <__aeabi_fmul>
 800661a:	4603      	mov	r3, r0
 800661c:	4619      	mov	r1, r3
 800661e:	4a24      	ldr	r2, [pc, #144]	; (80066b0 <GYRO_Common+0xdc>)
 8006620:	f104 030e 	add.w	r3, r4, #14
 8006624:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if(abs(imu.gyroRaw[axis]) <= 5)
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	4a21      	ldr	r2, [pc, #132]	; (80066b0 <GYRO_Common+0xdc>)
 800662c:	330e      	adds	r3, #14
 800662e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006632:	f04f 0100 	mov.w	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f7fa fd7a 	bl	8001130 <__aeabi_fcmpgt>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d011      	beq.n	8006666 <GYRO_Common+0x92>
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	4a1a      	ldr	r2, [pc, #104]	; (80066b0 <GYRO_Common+0xdc>)
 8006646:	330e      	adds	r3, #14
 8006648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800664c:	2201      	movs	r2, #1
 800664e:	4614      	mov	r4, r2
 8006650:	4919      	ldr	r1, [pc, #100]	; (80066b8 <GYRO_Common+0xe4>)
 8006652:	4618      	mov	r0, r3
 8006654:	f7fa fd58 	bl	8001108 <__aeabi_fcmple>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <GYRO_Common+0x8e>
 800665e:	2300      	movs	r3, #0
 8006660:	461c      	mov	r4, r3
 8006662:	b2e3      	uxtb	r3, r4
 8006664:	e010      	b.n	8006688 <GYRO_Common+0xb4>
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	4a11      	ldr	r2, [pc, #68]	; (80066b0 <GYRO_Common+0xdc>)
 800666a:	330e      	adds	r3, #14
 800666c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006670:	2201      	movs	r2, #1
 8006672:	4614      	mov	r4, r2
 8006674:	4911      	ldr	r1, [pc, #68]	; (80066bc <GYRO_Common+0xe8>)
 8006676:	4618      	mov	r0, r3
 8006678:	f7fa fd50 	bl	800111c <__aeabi_fcmpge>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <GYRO_Common+0xb2>
 8006682:	2300      	movs	r3, #0
 8006684:	461c      	mov	r4, r3
 8006686:	b2e3      	uxtb	r3, r4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d006      	beq.n	800669a <GYRO_Common+0xc6>
		{
			imu.gyroRaw[axis] = 0;
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	4a08      	ldr	r2, [pc, #32]	; (80066b0 <GYRO_Common+0xdc>)
 8006690:	330e      	adds	r3, #14
 8006692:	f04f 0100 	mov.w	r1, #0
 8006696:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(axis=0; axis<3; axis++)
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	3301      	adds	r3, #1
 800669e:	71fb      	strb	r3, [r7, #7]
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d99e      	bls.n	80065e4 <GYRO_Common+0x10>
		}
	}
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd90      	pop	{r4, r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20000e20 	.word	0x20000e20
 80066b4:	20000ad4 	.word	0x20000ad4
 80066b8:	40a00000 	.word	0x40a00000
 80066bc:	c0a00000 	.word	0xc0a00000

080066c0 <ACC_getADC>:

void ACC_getADC(void){
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af02      	add	r7, sp, #8
	int16_t x = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	80fb      	strh	r3, [r7, #6]
	int16_t y = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	80bb      	strh	r3, [r7, #4]
	int16_t z = 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	807b      	strh	r3, [r7, #2]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);
 80066d2:	2306      	movs	r3, #6
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	4b1b      	ldr	r3, [pc, #108]	; (8006744 <ACC_getADC+0x84>)
 80066d8:	2201      	movs	r2, #1
 80066da:	213b      	movs	r1, #59	; 0x3b
 80066dc:	20d2      	movs	r0, #210	; 0xd2
 80066de:	f004 fdab 	bl	800b238 <I2C_ByteRead>
	/* Get acceleration */
	x = (int16_t)((rawADC[0]<<8) | rawADC[1])>>3;
 80066e2:	4b18      	ldr	r3, [pc, #96]	; (8006744 <ACC_getADC+0x84>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	b21a      	sxth	r2, r3
 80066ea:	4b16      	ldr	r3, [pc, #88]	; (8006744 <ACC_getADC+0x84>)
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	b21b      	sxth	r3, r3
 80066f0:	4313      	orrs	r3, r2
 80066f2:	b21b      	sxth	r3, r3
 80066f4:	10db      	asrs	r3, r3, #3
 80066f6:	80fb      	strh	r3, [r7, #6]
	y = (int16_t)((rawADC[2]<<8) | rawADC[3])>>3;
 80066f8:	4b12      	ldr	r3, [pc, #72]	; (8006744 <ACC_getADC+0x84>)
 80066fa:	789b      	ldrb	r3, [r3, #2]
 80066fc:	021b      	lsls	r3, r3, #8
 80066fe:	b21a      	sxth	r2, r3
 8006700:	4b10      	ldr	r3, [pc, #64]	; (8006744 <ACC_getADC+0x84>)
 8006702:	78db      	ldrb	r3, [r3, #3]
 8006704:	b21b      	sxth	r3, r3
 8006706:	4313      	orrs	r3, r2
 8006708:	b21b      	sxth	r3, r3
 800670a:	10db      	asrs	r3, r3, #3
 800670c:	80bb      	strh	r3, [r7, #4]
	z = (int16_t)((rawADC[4]<<8) | rawADC[5])>>3;
 800670e:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <ACC_getADC+0x84>)
 8006710:	791b      	ldrb	r3, [r3, #4]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	b21a      	sxth	r2, r3
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <ACC_getADC+0x84>)
 8006718:	795b      	ldrb	r3, [r3, #5]
 800671a:	b21b      	sxth	r3, r3
 800671c:	4313      	orrs	r3, r2
 800671e:	b21b      	sxth	r3, r3
 8006720:	10db      	asrs	r3, r3, #3
 8006722:	807b      	strh	r3, [r7, #2]
	ACC_ORIENTATION( x, y, z);
 8006724:	4a08      	ldr	r2, [pc, #32]	; (8006748 <ACC_getADC+0x88>)
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	8293      	strh	r3, [r2, #20]
 800672a:	4a07      	ldr	r2, [pc, #28]	; (8006748 <ACC_getADC+0x88>)
 800672c:	88bb      	ldrh	r3, [r7, #4]
 800672e:	82d3      	strh	r3, [r2, #22]
 8006730:	4a05      	ldr	r2, [pc, #20]	; (8006748 <ACC_getADC+0x88>)
 8006732:	887b      	ldrh	r3, [r7, #2]
 8006734:	8313      	strh	r3, [r2, #24]
	ACC_Common();
 8006736:	f000 f809 	bl	800674c <ACC_Common>
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000f0c 	.word	0x20000f0c
 8006748:	20000e20 	.word	0x20000e20

0800674c <ACC_Common>:

void ACC_Common(void)
{
 800674c:	b5b0      	push	{r4, r5, r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
	uint8_t axis = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	71fb      	strb	r3, [r7, #7]
	static float accLPF[3];
	static int32_t a[3];

	if(calibratingA>0)
 8006756:	4b56      	ldr	r3, [pc, #344]	; (80068b0 <ACC_Common+0x164>)
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d050      	beq.n	8006800 <ACC_Common+0xb4>
	{
		for(axis=0; axis <3; axis++)
 800675e:	2300      	movs	r3, #0
 8006760:	71fb      	strb	r3, [r7, #7]
 8006762:	e02b      	b.n	80067bc <ACC_Common+0x70>
		{
			// Reset a[axis] at start of calibration
			if (calibratingA == 512) a[axis]=0;
 8006764:	4b52      	ldr	r3, [pc, #328]	; (80068b0 <ACC_Common+0x164>)
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800676c:	d104      	bne.n	8006778 <ACC_Common+0x2c>
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	4a50      	ldr	r2, [pc, #320]	; (80068b4 <ACC_Common+0x168>)
 8006772:	2100      	movs	r1, #0
 8006774:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// Sum up 512 readings
			a[axis] +=imu.accADC[axis];
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	4a4e      	ldr	r2, [pc, #312]	; (80068b4 <ACC_Common+0x168>)
 800677c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	494d      	ldr	r1, [pc, #308]	; (80068b8 <ACC_Common+0x16c>)
 8006784:	3308      	adds	r3, #8
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	440b      	add	r3, r1
 800678a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800678e:	4619      	mov	r1, r3
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	440a      	add	r2, r1
 8006794:	4947      	ldr	r1, [pc, #284]	; (80068b4 <ACC_Common+0x168>)
 8006796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// Clear global variables for next reading
			imu.accADC[axis]=0;
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	4a46      	ldr	r2, [pc, #280]	; (80068b8 <ACC_Common+0x16c>)
 800679e:	3308      	adds	r3, #8
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	4413      	add	r3, r2
 80067a4:	2200      	movs	r2, #0
 80067a6:	809a      	strh	r2, [r3, #4]
			imu.accZero[axis]=0;
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	4a43      	ldr	r2, [pc, #268]	; (80068b8 <ACC_Common+0x16c>)
 80067ac:	3318      	adds	r3, #24
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	605a      	str	r2, [r3, #4]
		for(axis=0; axis <3; axis++)
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	3301      	adds	r3, #1
 80067ba:	71fb      	strb	r3, [r7, #7]
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d9d0      	bls.n	8006764 <ACC_Common+0x18>
		}
		// Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
		if (calibratingA == 1)
 80067c2:	4b3b      	ldr	r3, [pc, #236]	; (80068b0 <ACC_Common+0x164>)
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d114      	bne.n	80067f4 <ACC_Common+0xa8>
		{
			imu.accZero[ROLL]  = a[ROLL]>>9;
 80067ca:	4b3a      	ldr	r3, [pc, #232]	; (80068b4 <ACC_Common+0x168>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	125b      	asrs	r3, r3, #9
 80067d0:	4a39      	ldr	r2, [pc, #228]	; (80068b8 <ACC_Common+0x16c>)
 80067d2:	6653      	str	r3, [r2, #100]	; 0x64
			imu.accZero[PITCH] = a[PITCH]>>9;
 80067d4:	4b37      	ldr	r3, [pc, #220]	; (80068b4 <ACC_Common+0x168>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	125b      	asrs	r3, r3, #9
 80067da:	4a37      	ldr	r2, [pc, #220]	; (80068b8 <ACC_Common+0x16c>)
 80067dc:	6693      	str	r3, [r2, #104]	; 0x68
			imu.accZero[YAW]   = (a[YAW]>>9)-(int32_t)acc_1G;
 80067de:	4b35      	ldr	r3, [pc, #212]	; (80068b4 <ACC_Common+0x168>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	125b      	asrs	r3, r3, #9
 80067e4:	4a35      	ldr	r2, [pc, #212]	; (80068bc <ACC_Common+0x170>)
 80067e6:	8812      	ldrh	r2, [r2, #0]
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	4a33      	ldr	r2, [pc, #204]	; (80068b8 <ACC_Common+0x16c>)
 80067ec:	66d3      	str	r3, [r2, #108]	; 0x6c
			f.CALIBRATE_ACC = 0;
 80067ee:	4b34      	ldr	r3, [pc, #208]	; (80068c0 <ACC_Common+0x174>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	711a      	strb	r2, [r3, #4]
		}
		calibratingA--;
 80067f4:	4b2e      	ldr	r3, [pc, #184]	; (80068b0 <ACC_Common+0x164>)
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	4b2c      	ldr	r3, [pc, #176]	; (80068b0 <ACC_Common+0x164>)
 80067fe:	801a      	strh	r2, [r3, #0]
	}

	for(axis=0;axis<3;axis++)
 8006800:	2300      	movs	r3, #0
 8006802:	71fb      	strb	r3, [r7, #7]
 8006804:	e04d      	b.n	80068a2 <ACC_Common+0x156>
	{
		imu.accRaw[axis] = (float)imu.accADC[axis]-imu.accZero[axis];// * aRes;// - accBias[axis];
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	4a2b      	ldr	r2, [pc, #172]	; (80068b8 <ACC_Common+0x16c>)
 800680a:	3308      	adds	r3, #8
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	4413      	add	r3, r2
 8006810:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006814:	4618      	mov	r0, r3
 8006816:	f7fa fa7b 	bl	8000d10 <__aeabi_i2f>
 800681a:	4605      	mov	r5, r0
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	4a26      	ldr	r2, [pc, #152]	; (80068b8 <ACC_Common+0x16c>)
 8006820:	3318      	adds	r3, #24
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	4618      	mov	r0, r3
 800682a:	f7fa fa71 	bl	8000d10 <__aeabi_i2f>
 800682e:	4603      	mov	r3, r0
 8006830:	79fc      	ldrb	r4, [r7, #7]
 8006832:	4619      	mov	r1, r3
 8006834:	4628      	mov	r0, r5
 8006836:	f7fa f9b5 	bl	8000ba4 <__aeabi_fsub>
 800683a:	4603      	mov	r3, r0
 800683c:	4619      	mov	r1, r3
 800683e:	4a1e      	ldr	r2, [pc, #120]	; (80068b8 <ACC_Common+0x16c>)
 8006840:	f104 0308 	add.w	r3, r4, #8
 8006844:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (acc_lpf_factor > 0)
		{
			accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / acc_lpf_factor)) + imu.accRaw[axis] * (1.0f / acc_lpf_factor);
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	4a1e      	ldr	r2, [pc, #120]	; (80068c4 <ACC_Common+0x178>)
 800684c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006850:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8006854:	4618      	mov	r0, r3
 8006856:	f7fa faaf 	bl	8000db8 <__aeabi_fmul>
 800685a:	4603      	mov	r3, r0
 800685c:	461d      	mov	r5, r3
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <ACC_Common+0x16c>)
 8006862:	3308      	adds	r3, #8
 8006864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006868:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800686c:	4618      	mov	r0, r3
 800686e:	f7fa faa3 	bl	8000db8 <__aeabi_fmul>
 8006872:	4603      	mov	r3, r0
 8006874:	79fc      	ldrb	r4, [r7, #7]
 8006876:	4619      	mov	r1, r3
 8006878:	4628      	mov	r0, r5
 800687a:	f7fa f995 	bl	8000ba8 <__addsf3>
 800687e:	4603      	mov	r3, r0
 8006880:	461a      	mov	r2, r3
 8006882:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <ACC_Common+0x178>)
 8006884:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			imu.accSmooth[axis] = accLPF[axis];
 8006888:	79fa      	ldrb	r2, [r7, #7]
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	490d      	ldr	r1, [pc, #52]	; (80068c4 <ACC_Common+0x178>)
 800688e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006892:	4909      	ldr	r1, [pc, #36]	; (80068b8 <ACC_Common+0x16c>)
 8006894:	330a      	adds	r3, #10
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	605a      	str	r2, [r3, #4]
	for(axis=0;axis<3;axis++)
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	3301      	adds	r3, #1
 80068a0:	71fb      	strb	r3, [r7, #7]
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d9ae      	bls.n	8006806 <ACC_Common+0xba>
		}
	}
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bdb0      	pop	{r4, r5, r7, pc}
 80068b0:	20000008 	.word	0x20000008
 80068b4:	20000384 	.word	0x20000384
 80068b8:	20000e20 	.word	0x20000e20
 80068bc:	2000000c 	.word	0x2000000c
 80068c0:	20000ed4 	.word	0x20000ed4
 80068c4:	20000390 	.word	0x20000390

080068c8 <Mag_getADC>:

void Mag_getADC(void){
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af02      	add	r7, sp, #8
	int16_t x = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	80fb      	strh	r3, [r7, #6]
	int16_t y = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	80bb      	strh	r3, [r7, #4]
	int16_t z = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	807b      	strh	r3, [r7, #2]
	I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x02, 1, rawADC, 1);
 80068da:	2301      	movs	r3, #1
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	4b24      	ldr	r3, [pc, #144]	; (8006970 <Mag_getADC+0xa8>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	2102      	movs	r1, #2
 80068e4:	2018      	movs	r0, #24
 80068e6:	f004 fca7 	bl	800b238 <I2C_ByteRead>
	if( rawADC[0] & 0x01)
 80068ea:	4b21      	ldr	r3, [pc, #132]	; (8006970 <Mag_getADC+0xa8>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d038      	beq.n	8006968 <Mag_getADC+0xa0>
	{
		I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, 0x03, 1, rawADC, 7);
 80068f6:	2307      	movs	r3, #7
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <Mag_getADC+0xa8>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	2103      	movs	r1, #3
 8006900:	2018      	movs	r0, #24
 8006902:	f004 fc99 	bl	800b238 <I2C_ByteRead>
		uint8_t c = rawADC[6];
 8006906:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <Mag_getADC+0xa8>)
 8006908:	799b      	ldrb	r3, [r3, #6]
 800690a:	707b      	strb	r3, [r7, #1]
		if(!(c & 0x08))
 800690c:	787b      	ldrb	r3, [r7, #1]
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d128      	bne.n	8006968 <Mag_getADC+0xa0>
		{
			x = ((int16_t)rawADC[1]<<8) | rawADC[0];
 8006916:	4b16      	ldr	r3, [pc, #88]	; (8006970 <Mag_getADC+0xa8>)
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	b21a      	sxth	r2, r3
 800691e:	4b14      	ldr	r3, [pc, #80]	; (8006970 <Mag_getADC+0xa8>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	b21b      	sxth	r3, r3
 8006924:	4313      	orrs	r3, r2
 8006926:	80fb      	strh	r3, [r7, #6]
			y = ((int16_t)rawADC[3]<<8) | rawADC[2];
 8006928:	4b11      	ldr	r3, [pc, #68]	; (8006970 <Mag_getADC+0xa8>)
 800692a:	78db      	ldrb	r3, [r3, #3]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	b21a      	sxth	r2, r3
 8006930:	4b0f      	ldr	r3, [pc, #60]	; (8006970 <Mag_getADC+0xa8>)
 8006932:	789b      	ldrb	r3, [r3, #2]
 8006934:	b21b      	sxth	r3, r3
 8006936:	4313      	orrs	r3, r2
 8006938:	80bb      	strh	r3, [r7, #4]
			z = ((int16_t)rawADC[5]<<8) | rawADC[4];
 800693a:	4b0d      	ldr	r3, [pc, #52]	; (8006970 <Mag_getADC+0xa8>)
 800693c:	795b      	ldrb	r3, [r3, #5]
 800693e:	021b      	lsls	r3, r3, #8
 8006940:	b21a      	sxth	r2, r3
 8006942:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <Mag_getADC+0xa8>)
 8006944:	791b      	ldrb	r3, [r3, #4]
 8006946:	b21b      	sxth	r3, r3
 8006948:	4313      	orrs	r3, r2
 800694a:	807b      	strh	r3, [r7, #2]
			MAG_ORIENTATION( x, y, z);
 800694c:	4a09      	ldr	r2, [pc, #36]	; (8006974 <Mag_getADC+0xac>)
 800694e:	88bb      	ldrh	r3, [r7, #4]
 8006950:	80d3      	strh	r3, [r2, #6]
 8006952:	4a08      	ldr	r2, [pc, #32]	; (8006974 <Mag_getADC+0xac>)
 8006954:	88fb      	ldrh	r3, [r7, #6]
 8006956:	8113      	strh	r3, [r2, #8]
 8006958:	887b      	ldrh	r3, [r7, #2]
 800695a:	425b      	negs	r3, r3
 800695c:	b29b      	uxth	r3, r3
 800695e:	b21a      	sxth	r2, r3
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <Mag_getADC+0xac>)
 8006962:	815a      	strh	r2, [r3, #10]
			MAG_Common();
 8006964:	f000 f808 	bl	8006978 <MAG_Common>
		}
	}
}
 8006968:	bf00      	nop
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20000f0c 	.word	0x20000f0c
 8006974:	20000e20 	.word	0x20000e20

08006978 <MAG_Common>:

void MAG_Common(void)
{
 8006978:	b5b0      	push	{r4, r5, r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
	uint8_t axis = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	71fb      	strb	r3, [r7, #7]
	static uint8_t flag = 0;
	static int jj = 0;
	static int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
	static int16_t mag_max[3] = {0x8000, 0x8000, 0x8000}, mag_min[3] = {0x7FFF, 0x7FFF, 0x7FFF}, mag_temp[3] = {0, 0, 0};

	if(f.CALIBRATE_MAG==1)
 8006982:	4b9a      	ldr	r3, [pc, #616]	; (8006bec <MAG_Common+0x274>)
 8006984:	7cdb      	ldrb	r3, [r3, #19]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d14b      	bne.n	8006a22 <MAG_Common+0xaa>
	{
		flag = 1;
 800698a:	4b99      	ldr	r3, [pc, #612]	; (8006bf0 <MAG_Common+0x278>)
 800698c:	2201      	movs	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]
		mag_temp[0] = imu.magADC[0];
 8006990:	4b98      	ldr	r3, [pc, #608]	; (8006bf4 <MAG_Common+0x27c>)
 8006992:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006996:	4b98      	ldr	r3, [pc, #608]	; (8006bf8 <MAG_Common+0x280>)
 8006998:	801a      	strh	r2, [r3, #0]
		mag_temp[1] = imu.magADC[1];
 800699a:	4b96      	ldr	r3, [pc, #600]	; (8006bf4 <MAG_Common+0x27c>)
 800699c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80069a0:	4b95      	ldr	r3, [pc, #596]	; (8006bf8 <MAG_Common+0x280>)
 80069a2:	805a      	strh	r2, [r3, #2]
		mag_temp[2] = imu.magADC[2];
 80069a4:	4b93      	ldr	r3, [pc, #588]	; (8006bf4 <MAG_Common+0x27c>)
 80069a6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80069aa:	4b93      	ldr	r3, [pc, #588]	; (8006bf8 <MAG_Common+0x280>)
 80069ac:	809a      	strh	r2, [r3, #4]
		for (jj = 0; jj < 3; jj++)
 80069ae:	4b93      	ldr	r3, [pc, #588]	; (8006bfc <MAG_Common+0x284>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e030      	b.n	8006a18 <MAG_Common+0xa0>
		{
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 80069b6:	4b91      	ldr	r3, [pc, #580]	; (8006bfc <MAG_Common+0x284>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a8f      	ldr	r2, [pc, #572]	; (8006bf8 <MAG_Common+0x280>)
 80069bc:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80069c0:	4b8e      	ldr	r3, [pc, #568]	; (8006bfc <MAG_Common+0x284>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	498e      	ldr	r1, [pc, #568]	; (8006c00 <MAG_Common+0x288>)
 80069c6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	dd09      	ble.n	80069e2 <MAG_Common+0x6a>
 80069ce:	4b8b      	ldr	r3, [pc, #556]	; (8006bfc <MAG_Common+0x284>)
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b8a      	ldr	r3, [pc, #552]	; (8006bfc <MAG_Common+0x284>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4988      	ldr	r1, [pc, #544]	; (8006bf8 <MAG_Common+0x280>)
 80069d8:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80069dc:	4a88      	ldr	r2, [pc, #544]	; (8006c00 <MAG_Common+0x288>)
 80069de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 80069e2:	4b86      	ldr	r3, [pc, #536]	; (8006bfc <MAG_Common+0x284>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a84      	ldr	r2, [pc, #528]	; (8006bf8 <MAG_Common+0x280>)
 80069e8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80069ec:	4b83      	ldr	r3, [pc, #524]	; (8006bfc <MAG_Common+0x284>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4984      	ldr	r1, [pc, #528]	; (8006c04 <MAG_Common+0x28c>)
 80069f2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	da09      	bge.n	8006a0e <MAG_Common+0x96>
 80069fa:	4b80      	ldr	r3, [pc, #512]	; (8006bfc <MAG_Common+0x284>)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4b7f      	ldr	r3, [pc, #508]	; (8006bfc <MAG_Common+0x284>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	497d      	ldr	r1, [pc, #500]	; (8006bf8 <MAG_Common+0x280>)
 8006a04:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8006a08:	4a7e      	ldr	r2, [pc, #504]	; (8006c04 <MAG_Common+0x28c>)
 8006a0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (jj = 0; jj < 3; jj++)
 8006a0e:	4b7b      	ldr	r3, [pc, #492]	; (8006bfc <MAG_Common+0x284>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3301      	adds	r3, #1
 8006a14:	4a79      	ldr	r2, [pc, #484]	; (8006bfc <MAG_Common+0x284>)
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	4b78      	ldr	r3, [pc, #480]	; (8006bfc <MAG_Common+0x284>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	ddca      	ble.n	80069b6 <MAG_Common+0x3e>
 8006a20:	e0e0      	b.n	8006be4 <MAG_Common+0x26c>
		}
	}else if(flag == 1)
 8006a22:	4b73      	ldr	r3, [pc, #460]	; (8006bf0 <MAG_Common+0x278>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	f040 80dc 	bne.w	8006be4 <MAG_Common+0x26c>
	{
		flag = 0;
 8006a2c:	4b70      	ldr	r3, [pc, #448]	; (8006bf0 <MAG_Common+0x278>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	701a      	strb	r2, [r3, #0]
		// Get hard iron correction
		mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8006a32:	4b73      	ldr	r3, [pc, #460]	; (8006c00 <MAG_Common+0x288>)
 8006a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4b72      	ldr	r3, [pc, #456]	; (8006c04 <MAG_Common+0x28c>)
 8006a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a40:	4413      	add	r3, r2
 8006a42:	0fda      	lsrs	r2, r3, #31
 8006a44:	4413      	add	r3, r2
 8006a46:	105b      	asrs	r3, r3, #1
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4b6f      	ldr	r3, [pc, #444]	; (8006c08 <MAG_Common+0x290>)
 8006a4c:	601a      	str	r2, [r3, #0]
		mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8006a4e:	4b6c      	ldr	r3, [pc, #432]	; (8006c00 <MAG_Common+0x288>)
 8006a50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a54:	461a      	mov	r2, r3
 8006a56:	4b6b      	ldr	r3, [pc, #428]	; (8006c04 <MAG_Common+0x28c>)
 8006a58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	0fda      	lsrs	r2, r3, #31
 8006a60:	4413      	add	r3, r2
 8006a62:	105b      	asrs	r3, r3, #1
 8006a64:	461a      	mov	r2, r3
 8006a66:	4b68      	ldr	r3, [pc, #416]	; (8006c08 <MAG_Common+0x290>)
 8006a68:	605a      	str	r2, [r3, #4]
		mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8006a6a:	4b65      	ldr	r3, [pc, #404]	; (8006c00 <MAG_Common+0x288>)
 8006a6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a70:	461a      	mov	r2, r3
 8006a72:	4b64      	ldr	r3, [pc, #400]	; (8006c04 <MAG_Common+0x28c>)
 8006a74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a78:	4413      	add	r3, r2
 8006a7a:	0fda      	lsrs	r2, r3, #31
 8006a7c:	4413      	add	r3, r2
 8006a7e:	105b      	asrs	r3, r3, #1
 8006a80:	461a      	mov	r2, r3
 8006a82:	4b61      	ldr	r3, [pc, #388]	; (8006c08 <MAG_Common+0x290>)
 8006a84:	609a      	str	r2, [r3, #8]
		magBias[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8006a86:	4b60      	ldr	r3, [pc, #384]	; (8006c08 <MAG_Common+0x290>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fa f940 	bl	8000d10 <__aeabi_i2f>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4b5e      	ldr	r3, [pc, #376]	; (8006c0c <MAG_Common+0x294>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4619      	mov	r1, r3
 8006a98:	4610      	mov	r0, r2
 8006a9a:	f7fa f98d 	bl	8000db8 <__aeabi_fmul>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4b5b      	ldr	r3, [pc, #364]	; (8006c10 <MAG_Common+0x298>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f7fa f985 	bl	8000db8 <__aeabi_fmul>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4b58      	ldr	r3, [pc, #352]	; (8006c14 <MAG_Common+0x29c>)
 8006ab4:	601a      	str	r2, [r3, #0]
		magBias[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8006ab6:	4b54      	ldr	r3, [pc, #336]	; (8006c08 <MAG_Common+0x290>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fa f928 	bl	8000d10 <__aeabi_i2f>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	4b52      	ldr	r3, [pc, #328]	; (8006c0c <MAG_Common+0x294>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7fa f975 	bl	8000db8 <__aeabi_fmul>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4b4f      	ldr	r3, [pc, #316]	; (8006c10 <MAG_Common+0x298>)
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4610      	mov	r0, r2
 8006ada:	f7fa f96d 	bl	8000db8 <__aeabi_fmul>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4b4c      	ldr	r3, [pc, #304]	; (8006c14 <MAG_Common+0x29c>)
 8006ae4:	605a      	str	r2, [r3, #4]
		magBias[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8006ae6:	4b48      	ldr	r3, [pc, #288]	; (8006c08 <MAG_Common+0x290>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fa f910 	bl	8000d10 <__aeabi_i2f>
 8006af0:	4602      	mov	r2, r0
 8006af2:	4b46      	ldr	r3, [pc, #280]	; (8006c0c <MAG_Common+0x294>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f7fa f95d 	bl	8000db8 <__aeabi_fmul>
 8006afe:	4603      	mov	r3, r0
 8006b00:	461a      	mov	r2, r3
 8006b02:	4b43      	ldr	r3, [pc, #268]	; (8006c10 <MAG_Common+0x298>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	4619      	mov	r1, r3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	f7fa f955 	bl	8000db8 <__aeabi_fmul>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	461a      	mov	r2, r3
 8006b12:	4b40      	ldr	r3, [pc, #256]	; (8006c14 <MAG_Common+0x29c>)
 8006b14:	609a      	str	r2, [r3, #8]

		// Get soft iron correction estimate
		mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8006b16:	4b3a      	ldr	r3, [pc, #232]	; (8006c00 <MAG_Common+0x288>)
 8006b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	4b39      	ldr	r3, [pc, #228]	; (8006c04 <MAG_Common+0x28c>)
 8006b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	0fda      	lsrs	r2, r3, #31
 8006b28:	4413      	add	r3, r2
 8006b2a:	105b      	asrs	r3, r3, #1
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4b3a      	ldr	r3, [pc, #232]	; (8006c18 <MAG_Common+0x2a0>)
 8006b30:	601a      	str	r2, [r3, #0]
		mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8006b32:	4b33      	ldr	r3, [pc, #204]	; (8006c00 <MAG_Common+0x288>)
 8006b34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4b32      	ldr	r3, [pc, #200]	; (8006c04 <MAG_Common+0x28c>)
 8006b3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	0fda      	lsrs	r2, r3, #31
 8006b44:	4413      	add	r3, r2
 8006b46:	105b      	asrs	r3, r3, #1
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4b33      	ldr	r3, [pc, #204]	; (8006c18 <MAG_Common+0x2a0>)
 8006b4c:	605a      	str	r2, [r3, #4]
		mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8006b4e:	4b2c      	ldr	r3, [pc, #176]	; (8006c00 <MAG_Common+0x288>)
 8006b50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b54:	461a      	mov	r2, r3
 8006b56:	4b2b      	ldr	r3, [pc, #172]	; (8006c04 <MAG_Common+0x28c>)
 8006b58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	0fda      	lsrs	r2, r3, #31
 8006b60:	4413      	add	r3, r2
 8006b62:	105b      	asrs	r3, r3, #1
 8006b64:	461a      	mov	r2, r3
 8006b66:	4b2c      	ldr	r3, [pc, #176]	; (8006c18 <MAG_Common+0x2a0>)
 8006b68:	609a      	str	r2, [r3, #8]

		float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8006b6a:	4b2b      	ldr	r3, [pc, #172]	; (8006c18 <MAG_Common+0x2a0>)
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4b2a      	ldr	r3, [pc, #168]	; (8006c18 <MAG_Common+0x2a0>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	441a      	add	r2, r3
 8006b74:	4b28      	ldr	r3, [pc, #160]	; (8006c18 <MAG_Common+0x2a0>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	4413      	add	r3, r2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fa f8c8 	bl	8000d10 <__aeabi_i2f>
 8006b80:	4603      	mov	r3, r0
 8006b82:	603b      	str	r3, [r7, #0]
		avg_rad /= 3.0;
 8006b84:	4925      	ldr	r1, [pc, #148]	; (8006c1c <MAG_Common+0x2a4>)
 8006b86:	6838      	ldr	r0, [r7, #0]
 8006b88:	f7fa f9ca 	bl	8000f20 <__aeabi_fdiv>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	603b      	str	r3, [r7, #0]

		magScale[0] = avg_rad/((float)mag_scale[0]);
 8006b90:	4b21      	ldr	r3, [pc, #132]	; (8006c18 <MAG_Common+0x2a0>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fa f8bb 	bl	8000d10 <__aeabi_i2f>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6838      	ldr	r0, [r7, #0]
 8006ba0:	f7fa f9be 	bl	8000f20 <__aeabi_fdiv>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <MAG_Common+0x2a8>)
 8006baa:	601a      	str	r2, [r3, #0]
		magScale[1] = avg_rad/((float)mag_scale[1]);
 8006bac:	4b1a      	ldr	r3, [pc, #104]	; (8006c18 <MAG_Common+0x2a0>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fa f8ad 	bl	8000d10 <__aeabi_i2f>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6838      	ldr	r0, [r7, #0]
 8006bbc:	f7fa f9b0 	bl	8000f20 <__aeabi_fdiv>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4b16      	ldr	r3, [pc, #88]	; (8006c20 <MAG_Common+0x2a8>)
 8006bc6:	605a      	str	r2, [r3, #4]
		magScale[2] = avg_rad/((float)mag_scale[2]);
 8006bc8:	4b13      	ldr	r3, [pc, #76]	; (8006c18 <MAG_Common+0x2a0>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fa f89f 	bl	8000d10 <__aeabi_i2f>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6838      	ldr	r0, [r7, #0]
 8006bd8:	f7fa f9a2 	bl	8000f20 <__aeabi_fdiv>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	461a      	mov	r2, r3
 8006be0:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <MAG_Common+0x2a8>)
 8006be2:	609a      	str	r2, [r3, #8]
	}
	for(axis=0;axis<3;axis++)
 8006be4:	2300      	movs	r3, #0
 8006be6:	71fb      	strb	r3, [r7, #7]
 8006be8:	e073      	b.n	8006cd2 <MAG_Common+0x35a>
 8006bea:	bf00      	nop
 8006bec:	20000ed4 	.word	0x20000ed4
 8006bf0:	2000039c 	.word	0x2000039c
 8006bf4:	20000e20 	.word	0x20000e20
 8006bf8:	200003a0 	.word	0x200003a0
 8006bfc:	200003a8 	.word	0x200003a8
 8006c00:	20000014 	.word	0x20000014
 8006c04:	2000001c 	.word	0x2000001c
 8006c08:	200003ac 	.word	0x200003ac
 8006c0c:	20000ad8 	.word	0x20000ad8
 8006c10:	20000338 	.word	0x20000338
 8006c14:	20000344 	.word	0x20000344
 8006c18:	200003b8 	.word	0x200003b8
 8006c1c:	40400000 	.word	0x40400000
 8006c20:	20000f00 	.word	0x20000f00
	{
		imu.magRaw[axis] = (float)imu.magADC[axis] * mRes * magCalibration[axis] - magBias[axis];
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	4a2e      	ldr	r2, [pc, #184]	; (8006ce0 <MAG_Common+0x368>)
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fa f86d 	bl	8000d10 <__aeabi_i2f>
 8006c36:	4602      	mov	r2, r0
 8006c38:	4b2a      	ldr	r3, [pc, #168]	; (8006ce4 <MAG_Common+0x36c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f7fa f8ba 	bl	8000db8 <__aeabi_fmul>
 8006c44:	4603      	mov	r3, r0
 8006c46:	4618      	mov	r0, r3
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	4a27      	ldr	r2, [pc, #156]	; (8006ce8 <MAG_Common+0x370>)
 8006c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c50:	4619      	mov	r1, r3
 8006c52:	f7fa f8b1 	bl	8000db8 <__aeabi_fmul>
 8006c56:	4603      	mov	r3, r0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	4a23      	ldr	r2, [pc, #140]	; (8006cec <MAG_Common+0x374>)
 8006c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c62:	79fc      	ldrb	r4, [r7, #7]
 8006c64:	4619      	mov	r1, r3
 8006c66:	f7f9 ff9d 	bl	8000ba4 <__aeabi_fsub>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4a1c      	ldr	r2, [pc, #112]	; (8006ce0 <MAG_Common+0x368>)
 8006c70:	f104 0314 	add.w	r3, r4, #20
 8006c74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (mag_lpf_factor > 0) {
			magLPF[axis] = magLPF[axis] * (1.0f - (1.0f / mag_lpf_factor)) + imu.magRaw[axis] * (1.0f / mag_lpf_factor);
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	4a1d      	ldr	r2, [pc, #116]	; (8006cf0 <MAG_Common+0x378>)
 8006c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c80:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fa f897 	bl	8000db8 <__aeabi_fmul>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	461d      	mov	r5, r3
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <MAG_Common+0x368>)
 8006c92:	3314      	adds	r3, #20
 8006c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c98:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fa f88b 	bl	8000db8 <__aeabi_fmul>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	79fc      	ldrb	r4, [r7, #7]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f7f9 ff7d 	bl	8000ba8 <__addsf3>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <MAG_Common+0x378>)
 8006cb4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			imu.magSmooth[axis] = magLPF[axis];
 8006cb8:	79fa      	ldrb	r2, [r7, #7]
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	490c      	ldr	r1, [pc, #48]	; (8006cf0 <MAG_Common+0x378>)
 8006cbe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006cc2:	4907      	ldr	r1, [pc, #28]	; (8006ce0 <MAG_Common+0x368>)
 8006cc4:	3310      	adds	r3, #16
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	440b      	add	r3, r1
 8006cca:	605a      	str	r2, [r3, #4]
	for(axis=0;axis<3;axis++)
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	71fb      	strb	r3, [r7, #7]
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d9a5      	bls.n	8006c24 <MAG_Common+0x2ac>
		}
	}
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bdb0      	pop	{r4, r5, r7, pc}
 8006ce0:	20000e20 	.word	0x20000e20
 8006ce4:	20000ad8 	.word	0x20000ad8
 8006ce8:	20000338 	.word	0x20000338
 8006cec:	20000344 	.word	0x20000344
 8006cf0:	200003c4 	.word	0x200003c4
 8006cf4:	00000000 	.word	0x00000000

08006cf8 <CAL_Heading>:

void CAL_Heading(void)
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b089      	sub	sp, #36	; 0x24
 8006cfc:	af00      	add	r7, sp, #0
	static uint8_t ind = 0;
	static float heading[HEADING_SMOOTH], h_sum;

	float cosineRoll = cosf(imu.AHRS[ROLL] * 0.0174533f);
 8006cfe:	4b54      	ldr	r3, [pc, #336]	; (8006e50 <CAL_Heading+0x158>)
 8006d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d04:	4953      	ldr	r1, [pc, #332]	; (8006e54 <CAL_Heading+0x15c>)
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fa f856 	bl	8000db8 <__aeabi_fmul>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f00e fce2 	bl	80156d8 <cosf>
 8006d14:	61b8      	str	r0, [r7, #24]
	float sineRoll = sinf(imu.AHRS[ROLL] * 0.0174533f);
 8006d16:	4b4e      	ldr	r3, [pc, #312]	; (8006e50 <CAL_Heading+0x158>)
 8006d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1c:	494d      	ldr	r1, [pc, #308]	; (8006e54 <CAL_Heading+0x15c>)
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fa f84a 	bl	8000db8 <__aeabi_fmul>
 8006d24:	4603      	mov	r3, r0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f00e fd44 	bl	80157b4 <sinf>
 8006d2c:	6178      	str	r0, [r7, #20]
	float cosinePitch = cosf(imu.AHRS[PITCH] * 0.0174533f);
 8006d2e:	4b48      	ldr	r3, [pc, #288]	; (8006e50 <CAL_Heading+0x158>)
 8006d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d34:	4947      	ldr	r1, [pc, #284]	; (8006e54 <CAL_Heading+0x15c>)
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fa f83e 	bl	8000db8 <__aeabi_fmul>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f00e fcca 	bl	80156d8 <cosf>
 8006d44:	6138      	str	r0, [r7, #16]
	float sinePitch = sinf(imu.AHRS[PITCH] * 0.0174533f);
 8006d46:	4b42      	ldr	r3, [pc, #264]	; (8006e50 <CAL_Heading+0x158>)
 8006d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d4c:	4941      	ldr	r1, [pc, #260]	; (8006e54 <CAL_Heading+0x15c>)
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fa f832 	bl	8000db8 <__aeabi_fmul>
 8006d54:	4603      	mov	r3, r0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f00e fd2c 	bl	80157b4 <sinf>
 8006d5c:	60f8      	str	r0, [r7, #12]
	float Xh = imu.magSmooth[ROLL] * cosinePitch + imu.magSmooth[PITCH] * sineRoll * sinePitch + imu.magSmooth[YAW] * sinePitch * cosineRoll;
 8006d5e:	4b3c      	ldr	r3, [pc, #240]	; (8006e50 <CAL_Heading+0x158>)
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	6939      	ldr	r1, [r7, #16]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fa f827 	bl	8000db8 <__aeabi_fmul>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	461c      	mov	r4, r3
 8006d6e:	4b38      	ldr	r3, [pc, #224]	; (8006e50 <CAL_Heading+0x158>)
 8006d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d72:	6979      	ldr	r1, [r7, #20]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7fa f81f 	bl	8000db8 <__aeabi_fmul>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	68f9      	ldr	r1, [r7, #12]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fa f81a 	bl	8000db8 <__aeabi_fmul>
 8006d84:	4603      	mov	r3, r0
 8006d86:	4619      	mov	r1, r3
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f7f9 ff0d 	bl	8000ba8 <__addsf3>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	461c      	mov	r4, r3
 8006d92:	4b2f      	ldr	r3, [pc, #188]	; (8006e50 <CAL_Heading+0x158>)
 8006d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fa f80d 	bl	8000db8 <__aeabi_fmul>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	69b9      	ldr	r1, [r7, #24]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fa f808 	bl	8000db8 <__aeabi_fmul>
 8006da8:	4603      	mov	r3, r0
 8006daa:	4619      	mov	r1, r3
 8006dac:	4620      	mov	r0, r4
 8006dae:	f7f9 fefb 	bl	8000ba8 <__addsf3>
 8006db2:	4603      	mov	r3, r0
 8006db4:	60bb      	str	r3, [r7, #8]
	float Yh = imu.magSmooth[PITCH] * cosineRoll - imu.magSmooth[YAW] * sineRoll;
 8006db6:	4b26      	ldr	r3, [pc, #152]	; (8006e50 <CAL_Heading+0x158>)
 8006db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dba:	69b9      	ldr	r1, [r7, #24]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7f9 fffb 	bl	8000db8 <__aeabi_fmul>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	461c      	mov	r4, r3
 8006dc6:	4b22      	ldr	r3, [pc, #136]	; (8006e50 <CAL_Heading+0x158>)
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dca:	6979      	ldr	r1, [r7, #20]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7f9 fff3 	bl	8000db8 <__aeabi_fmul>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f7f9 fee4 	bl	8000ba4 <__aeabi_fsub>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	607b      	str	r3, [r7, #4]
	float hd = (atan2f(Yh, Xh) * 180.0f / M_PI);
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f00e ff78 	bl	8015cd8 <atan2f>
 8006de8:	4603      	mov	r3, r0
 8006dea:	491b      	ldr	r1, [pc, #108]	; (8006e58 <CAL_Heading+0x160>)
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7f9 ffe3 	bl	8000db8 <__aeabi_fmul>
 8006df2:	4603      	mov	r3, r0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7f9 fb31 	bl	800045c <__aeabi_f2d>
 8006dfa:	a313      	add	r3, pc, #76	; (adr r3, 8006e48 <CAL_Heading+0x150>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f7f9 fcae 	bl	8000760 <__aeabi_ddiv>
 8006e04:	4603      	mov	r3, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	4618      	mov	r0, r3
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	f7f9 fe76 	bl	8000afc <__aeabi_d2f>
 8006e10:	4603      	mov	r3, r0
 8006e12:	603b      	str	r3, [r7, #0]
	int32_t head = lrintf(hd);
 8006e14:	6838      	ldr	r0, [r7, #0]
 8006e16:	f00e fc93 	bl	8015740 <lrintf>
 8006e1a:	61f8      	str	r0, [r7, #28]
	if (head < 0)
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	da03      	bge.n	8006e2a <CAL_Heading+0x132>
		head += 360;
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e28:	61fb      	str	r3, [r7, #28]
	imu.actual_compass_heading = head;
 8006e2a:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <CAL_Heading+0x158>)
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
		h_sum -= heading[ind];
		heading[ind++] = imu.actual_compass_heading;
		ind %= HEADING_SMOOTH;
		imu.actual_compass_heading = h_sum/HEADING_SMOOTH;
	}
	att.mag_heading = (int16_t) imu.actual_compass_heading;
 8006e32:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <CAL_Heading+0x158>)
 8006e34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e38:	b21a      	sxth	r2, r3
 8006e3a:	4b08      	ldr	r3, [pc, #32]	; (8006e5c <CAL_Heading+0x164>)
 8006e3c:	80da      	strh	r2, [r3, #6]
}
 8006e3e:	bf00      	nop
 8006e40:	3724      	adds	r7, #36	; 0x24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd90      	pop	{r4, r7, pc}
 8006e46:	bf00      	nop
 8006e48:	54442d18 	.word	0x54442d18
 8006e4c:	400921fb 	.word	0x400921fb
 8006e50:	20000e20 	.word	0x20000e20
 8006e54:	3c8efa39 	.word	0x3c8efa39
 8006e58:	43340000 	.word	0x43340000
 8006e5c:	20000ef8 	.word	0x20000ef8

08006e60 <Temp_getADC>:

void Temp_getADC(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af02      	add	r7, sp, #8
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_TEMP_OUT_H, 1, rawADC, 2);
 8006e66:	2302      	movs	r3, #2
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <Temp_getADC+0x5c>)
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	2141      	movs	r1, #65	; 0x41
 8006e70:	20d2      	movs	r0, #210	; 0xd2
 8006e72:	f004 f9e1 	bl	800b238 <I2C_ByteRead>
	/* Get acceleration */
	imu.rawTemp = ((int16_t)rawADC[0]<<8) | rawADC[1];
 8006e76:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <Temp_getADC+0x5c>)
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	b21a      	sxth	r2, r3
 8006e7e:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <Temp_getADC+0x5c>)
 8006e80:	785b      	ldrb	r3, [r3, #1]
 8006e82:	b21b      	sxth	r3, r3
 8006e84:	4313      	orrs	r3, r2
 8006e86:	b21a      	sxth	r2, r3
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <Temp_getADC+0x60>)
 8006e8a:	819a      	strh	r2, [r3, #12]
	imu.Temp = ((float)imu.rawTemp / 337.87f) + 21.0f;
 8006e8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <Temp_getADC+0x60>)
 8006e8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7f9 ff3c 	bl	8000d10 <__aeabi_i2f>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	490a      	ldr	r1, [pc, #40]	; (8006ec4 <Temp_getADC+0x64>)
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fa f83f 	bl	8000f20 <__aeabi_fdiv>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	4908      	ldr	r1, [pc, #32]	; (8006ec8 <Temp_getADC+0x68>)
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7f9 fe7e 	bl	8000ba8 <__addsf3>
 8006eac:	4603      	mov	r3, r0
 8006eae:	461a      	mov	r2, r3
 8006eb0:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <Temp_getADC+0x60>)
 8006eb2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006eb4:	bf00      	nop
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000f0c 	.word	0x20000f0c
 8006ec0:	20000e20 	.word	0x20000e20
 8006ec4:	43a8ef5c 	.word	0x43a8ef5c
 8006ec8:	41a80000 	.word	0x41a80000

08006ecc <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2)
{
 8006ecc:	b5b0      	push	{r4, r5, r7, lr}
 8006ece:	b09a      	sub	sp, #104	; 0x68
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eda:	2300      	movs	r3, #0
 8006edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ede:	2300      	movs	r3, #0
 8006ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eea:	2300      	movs	r3, #0
 8006eec:	637b      	str	r3, [r7, #52]	; 0x34

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x80);// Write a one to bit 7 reset bit; toggle reset device
 8006eee:	2380      	movs	r3, #128	; 0x80
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	2207      	movs	r2, #7
 8006ef6:	216b      	movs	r1, #107	; 0x6b
 8006ef8:	20d2      	movs	r0, #210	; 0xd2
 8006efa:	f004 f915 	bl	800b128 <I2C_ByteWrite>
	HAL_Delay(100); // for stability
 8006efe:	2064      	movs	r0, #100	; 0x64
 8006f00:	f005 fc3a 	bl	800c778 <HAL_Delay>
	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x01);
 8006f04:	2301      	movs	r3, #1
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	2308      	movs	r3, #8
 8006f0a:	2207      	movs	r2, #7
 8006f0c:	216b      	movs	r1, #107	; 0x6b
 8006f0e:	20d2      	movs	r0, #210	; 0xd2
 8006f10:	f004 f90a 	bl	800b128 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_2, 7, 8, 0x00);
 8006f14:	2300      	movs	r3, #0
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	2308      	movs	r3, #8
 8006f1a:	2207      	movs	r2, #7
 8006f1c:	216c      	movs	r1, #108	; 0x6c
 8006f1e:	20d2      	movs	r0, #210	; 0xd2
 8006f20:	f004 f902 	bl	800b128 <I2C_ByteWrite>
	HAL_Delay(200); // for stability
 8006f24:	20c8      	movs	r0, #200	; 0xc8
 8006f26:	f005 fc27 	bl	800c778 <HAL_Delay>

	// Configure device for bias calculation
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_INT_ENABLE, 7, 8, 0x00);// Disable all interrupts
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	2308      	movs	r3, #8
 8006f30:	2207      	movs	r2, #7
 8006f32:	2138      	movs	r1, #56	; 0x38
 8006f34:	20d2      	movs	r0, #210	; 0xd2
 8006f36:	f004 f8f7 	bl	800b128 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable FIFO
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	2308      	movs	r3, #8
 8006f40:	2207      	movs	r2, #7
 8006f42:	2123      	movs	r1, #35	; 0x23
 8006f44:	20d2      	movs	r0, #210	; 0xd2
 8006f46:	f004 f8ef 	bl	800b128 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_PWR_MGMT_1, 7, 8, 0x00);// Turn on internal clock source
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	2308      	movs	r3, #8
 8006f50:	2207      	movs	r2, #7
 8006f52:	216b      	movs	r1, #107	; 0x6b
 8006f54:	20d2      	movs	r0, #210	; 0xd2
 8006f56:	f004 f8e7 	bl	800b128 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_I2C_MST_CTRL, 7, 8, 0x00);// Disable I2C master
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	2308      	movs	r3, #8
 8006f60:	2207      	movs	r2, #7
 8006f62:	2124      	movs	r1, #36	; 0x24
 8006f64:	20d2      	movs	r0, #210	; 0xd2
 8006f66:	f004 f8df 	bl	800b128 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x00);// Disable FIFO and I2C master modes
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	2308      	movs	r3, #8
 8006f70:	2207      	movs	r2, #7
 8006f72:	216a      	movs	r1, #106	; 0x6a
 8006f74:	20d2      	movs	r0, #210	; 0xd2
 8006f76:	f004 f8d7 	bl	800b128 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x0C);// Reset FIFO and DMP
 8006f7a:	230c      	movs	r3, #12
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	2308      	movs	r3, #8
 8006f80:	2207      	movs	r2, #7
 8006f82:	216a      	movs	r1, #106	; 0x6a
 8006f84:	20d2      	movs	r0, #210	; 0xd2
 8006f86:	f004 f8cf 	bl	800b128 <I2C_ByteWrite>
	HAL_Delay(15); // for stability
 8006f8a:	200f      	movs	r0, #15
 8006f8c:	f005 fbf4 	bl	800c778 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation.

	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x01); // Set low-pass filter to 188 Hz
 8006f90:	2301      	movs	r3, #1
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	2308      	movs	r3, #8
 8006f96:	2207      	movs	r2, #7
 8006f98:	211a      	movs	r1, #26
 8006f9a:	20d2      	movs	r0, #210	; 0xd2
 8006f9c:	f004 f8c4 	bl	800b128 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set sample rate to 1 kHz
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	2308      	movs	r3, #8
 8006fa6:	2207      	movs	r2, #7
 8006fa8:	2119      	movs	r1, #25
 8006faa:	20d2      	movs	r0, #210	; 0xd2
 8006fac:	f004 f8bc 	bl	800b128 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	2207      	movs	r2, #7
 8006fb8:	211b      	movs	r1, #27
 8006fba:	20d2      	movs	r0, #210	; 0xd2
 8006fbc:	f004 f8b4 	bl	800b128 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	2207      	movs	r2, #7
 8006fc8:	211c      	movs	r1, #28
 8006fca:	20d2      	movs	r0, #210	; 0xd2
 8006fcc:	f004 f8ac 	bl	800b128 <I2C_ByteWrite>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8006fd0:	2383      	movs	r3, #131	; 0x83
 8006fd2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8006fd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006fda:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_USER_CTRL, 7, 8, 0x40); // Enable FIFO
 8006fde:	2340      	movs	r3, #64	; 0x40
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	2308      	movs	r3, #8
 8006fe4:	2207      	movs	r2, #7
 8006fe6:	216a      	movs	r1, #106	; 0x6a
 8006fe8:	20d2      	movs	r0, #210	; 0xd2
 8006fea:	f004 f89d 	bl	800b128 <I2C_ByteWrite>
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8006fee:	2378      	movs	r3, #120	; 0x78
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	2308      	movs	r3, #8
 8006ff4:	2207      	movs	r2, #7
 8006ff6:	2123      	movs	r1, #35	; 0x23
 8006ff8:	20d2      	movs	r0, #210	; 0xd2
 8006ffa:	f004 f895 	bl	800b128 <I2C_ByteWrite>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8006ffe:	2028      	movs	r0, #40	; 0x28
 8007000:	f005 fbba 	bl	800c778 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_EN, 7, 8, 0x00);// Disable gyro and accelerometer sensors for FIFO
 8007004:	2300      	movs	r3, #0
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	2308      	movs	r3, #8
 800700a:	2207      	movs	r2, #7
 800700c:	2123      	movs	r1, #35	; 0x23
 800700e:	20d2      	movs	r0, #210	; 0xd2
 8007010:	f004 f88a 	bl	800b128 <I2C_ByteWrite>
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_FIFO_COUNTH, 1, rawADC, 2);// read FIFO sample count
 8007014:	2302      	movs	r3, #2
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	4b61      	ldr	r3, [pc, #388]	; (80071a0 <calibrateMPU9250+0x2d4>)
 800701a:	2201      	movs	r2, #1
 800701c:	2172      	movs	r1, #114	; 0x72
 800701e:	20d2      	movs	r0, #210	; 0xd2
 8007020:	f004 f90a 	bl	800b238 <I2C_ByteRead>
	fifo_count = ((uint16_t)rawADC[0] << 8) | rawADC[1];
 8007024:	4b5e      	ldr	r3, [pc, #376]	; (80071a0 <calibrateMPU9250+0x2d4>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	b21a      	sxth	r2, r3
 800702c:	4b5c      	ldr	r3, [pc, #368]	; (80071a0 <calibrateMPU9250+0x2d4>)
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	b21b      	sxth	r3, r3
 8007032:	4313      	orrs	r3, r2
 8007034:	b21b      	sxth	r3, r3
 8007036:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 800703a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800703e:	4a59      	ldr	r2, [pc, #356]	; (80071a4 <calibrateMPU9250+0x2d8>)
 8007040:	fba2 2303 	umull	r2, r3, r2, r3
 8007044:	08db      	lsrs	r3, r3, #3
 8007046:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (ii = 0; ii < packet_count; ii++)
 800704a:	2300      	movs	r3, #0
 800704c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007050:	e072      	b.n	8007138 <calibrateMPU9250+0x26c>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8007052:	2300      	movs	r3, #0
 8007054:	82bb      	strh	r3, [r7, #20]
 8007056:	2300      	movs	r3, #0
 8007058:	82fb      	strh	r3, [r7, #22]
 800705a:	2300      	movs	r3, #0
 800705c:	833b      	strh	r3, [r7, #24]
 800705e:	2300      	movs	r3, #0
 8007060:	81bb      	strh	r3, [r7, #12]
 8007062:	2300      	movs	r3, #0
 8007064:	81fb      	strh	r3, [r7, #14]
 8007066:	2300      	movs	r3, #0
 8007068:	823b      	strh	r3, [r7, #16]
		I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH,MPU9250_RA_FIFO_R_W, 1, rawADC, 12);// read data for averaging
 800706a:	230c      	movs	r3, #12
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	4b4c      	ldr	r3, [pc, #304]	; (80071a0 <calibrateMPU9250+0x2d4>)
 8007070:	2201      	movs	r2, #1
 8007072:	2174      	movs	r1, #116	; 0x74
 8007074:	20d2      	movs	r0, #210	; 0xd2
 8007076:	f004 f8df 	bl	800b238 <I2C_ByteRead>

		accel_temp[0] = (int16_t) (((int16_t)rawADC[0] << 8) | rawADC[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 800707a:	4b49      	ldr	r3, [pc, #292]	; (80071a0 <calibrateMPU9250+0x2d4>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	b21a      	sxth	r2, r3
 8007082:	4b47      	ldr	r3, [pc, #284]	; (80071a0 <calibrateMPU9250+0x2d4>)
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	b21b      	sxth	r3, r3
 8007088:	4313      	orrs	r3, r2
 800708a:	b21b      	sxth	r3, r3
 800708c:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)rawADC[2] << 8) | rawADC[3]  ) ;
 800708e:	4b44      	ldr	r3, [pc, #272]	; (80071a0 <calibrateMPU9250+0x2d4>)
 8007090:	789b      	ldrb	r3, [r3, #2]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	b21a      	sxth	r2, r3
 8007096:	4b42      	ldr	r3, [pc, #264]	; (80071a0 <calibrateMPU9250+0x2d4>)
 8007098:	78db      	ldrb	r3, [r3, #3]
 800709a:	b21b      	sxth	r3, r3
 800709c:	4313      	orrs	r3, r2
 800709e:	b21b      	sxth	r3, r3
 80070a0:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)rawADC[4] << 8) | rawADC[5]  ) ;
 80070a2:	4b3f      	ldr	r3, [pc, #252]	; (80071a0 <calibrateMPU9250+0x2d4>)
 80070a4:	791b      	ldrb	r3, [r3, #4]
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	b21a      	sxth	r2, r3
 80070aa:	4b3d      	ldr	r3, [pc, #244]	; (80071a0 <calibrateMPU9250+0x2d4>)
 80070ac:	795b      	ldrb	r3, [r3, #5]
 80070ae:	b21b      	sxth	r3, r3
 80070b0:	4313      	orrs	r3, r2
 80070b2:	b21b      	sxth	r3, r3
 80070b4:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)rawADC[6] << 8) | rawADC[7]  ) ;
 80070b6:	4b3a      	ldr	r3, [pc, #232]	; (80071a0 <calibrateMPU9250+0x2d4>)
 80070b8:	799b      	ldrb	r3, [r3, #6]
 80070ba:	021b      	lsls	r3, r3, #8
 80070bc:	b21a      	sxth	r2, r3
 80070be:	4b38      	ldr	r3, [pc, #224]	; (80071a0 <calibrateMPU9250+0x2d4>)
 80070c0:	79db      	ldrb	r3, [r3, #7]
 80070c2:	b21b      	sxth	r3, r3
 80070c4:	4313      	orrs	r3, r2
 80070c6:	b21b      	sxth	r3, r3
 80070c8:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)rawADC[8] << 8) | rawADC[9]  ) ;
 80070ca:	4b35      	ldr	r3, [pc, #212]	; (80071a0 <calibrateMPU9250+0x2d4>)
 80070cc:	7a1b      	ldrb	r3, [r3, #8]
 80070ce:	021b      	lsls	r3, r3, #8
 80070d0:	b21a      	sxth	r2, r3
 80070d2:	4b33      	ldr	r3, [pc, #204]	; (80071a0 <calibrateMPU9250+0x2d4>)
 80070d4:	7a5b      	ldrb	r3, [r3, #9]
 80070d6:	b21b      	sxth	r3, r3
 80070d8:	4313      	orrs	r3, r2
 80070da:	b21b      	sxth	r3, r3
 80070dc:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)rawADC[10] << 8) | rawADC[11]) ;
 80070de:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <calibrateMPU9250+0x2d4>)
 80070e0:	7a9b      	ldrb	r3, [r3, #10]
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	b21a      	sxth	r2, r3
 80070e6:	4b2e      	ldr	r3, [pc, #184]	; (80071a0 <calibrateMPU9250+0x2d4>)
 80070e8:	7adb      	ldrb	r3, [r3, #11]
 80070ea:	b21b      	sxth	r3, r3
 80070ec:	4313      	orrs	r3, r2
 80070ee:	b21b      	sxth	r3, r3
 80070f0:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80070f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80070f8:	4413      	add	r3, r2
 80070fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		accel_bias[1] += (int32_t) accel_temp[1];
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007102:	4413      	add	r3, r2
 8007104:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[2] += (int32_t) accel_temp[2];
 8007106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007108:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800710c:	4413      	add	r3, r2
 800710e:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 800711a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007120:	4413      	add	r3, r2
 8007122:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8007124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007126:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800712a:	4413      	add	r3, r2
 800712c:	643b      	str	r3, [r7, #64]	; 0x40
	for (ii = 0; ii < packet_count; ii++)
 800712e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007132:	3301      	adds	r3, #1
 8007134:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007138:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800713c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007140:	429a      	cmp	r2, r3
 8007142:	d386      	bcc.n	8007052 <calibrateMPU9250+0x186>

	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8007144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007146:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800714a:	fb92 f3f3 	sdiv	r3, r2, r3
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c
	accel_bias[1] /= (int32_t) packet_count;
 8007150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007152:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007156:	fb92 f3f3 	sdiv	r3, r2, r3
 800715a:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[2] /= (int32_t) packet_count;
 800715c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800715e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007162:	fb92 f3f3 	sdiv	r3, r2, r3
 8007166:	637b      	str	r3, [r7, #52]	; 0x34
	gyro_bias[0]  /= (int32_t) packet_count;
 8007168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800716e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007172:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[1]  /= (int32_t) packet_count;
 8007174:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007176:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800717a:	fb92 f3f3 	sdiv	r3, r2, r3
 800717e:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[2]  /= (int32_t) packet_count;
 8007180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007182:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007186:	fb92 f3f3 	sdiv	r3, r2, r3
 800718a:	643b      	str	r3, [r7, #64]	; 0x40

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 800718c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718e:	2b00      	cmp	r3, #0
 8007190:	dd0a      	ble.n	80071a8 <calibrateMPU9250+0x2dc>
 8007192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007194:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	637b      	str	r3, [r7, #52]	; 0x34
 800719c:	e009      	b.n	80071b2 <calibrateMPU9250+0x2e6>
 800719e:	bf00      	nop
 80071a0:	20000f0c 	.word	0x20000f0c
 80071a4:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 80071a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071aa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80071ae:	4413      	add	r3, r2
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	425b      	negs	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	da00      	bge.n	80071bc <calibrateMPU9250+0x2f0>
 80071ba:	3303      	adds	r3, #3
 80071bc:	109b      	asrs	r3, r3, #2
 80071be:	121b      	asrs	r3, r3, #8
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	425b      	negs	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	da00      	bge.n	80071d0 <calibrateMPU9250+0x304>
 80071ce:	3303      	adds	r3, #3
 80071d0:	109b      	asrs	r3, r3, #2
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80071d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071da:	425b      	negs	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	da00      	bge.n	80071e2 <calibrateMPU9250+0x316>
 80071e0:	3303      	adds	r3, #3
 80071e2:	109b      	asrs	r3, r3, #2
 80071e4:	121b      	asrs	r3, r3, #8
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
 80071ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ee:	425b      	negs	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da00      	bge.n	80071f6 <calibrateMPU9250+0x32a>
 80071f4:	3303      	adds	r3, #3
 80071f6:	109b      	asrs	r3, r3, #2
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80071fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007200:	425b      	negs	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	da00      	bge.n	8007208 <calibrateMPU9250+0x33c>
 8007206:	3303      	adds	r3, #3
 8007208:	109b      	asrs	r3, r3, #2
 800720a:	121b      	asrs	r3, r3, #8
 800720c:	b2db      	uxtb	r3, r3
 800720e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8007212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007214:	425b      	negs	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	da00      	bge.n	800721c <calibrateMPU9250+0x350>
 800721a:	3303      	adds	r3, #3
 800721c:	109b      	asrs	r3, r3, #2
 800721e:	b2db      	uxtb	r3, r3
 8007220:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YG_OFFS_USRL, 7, 8, data[3]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRH, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZG_OFFS_USRL, 7, 8, data[5]);
	 */

	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	4618      	mov	r0, r3
 8007228:	f7f9 fd72 	bl	8000d10 <__aeabi_i2f>
 800722c:	4604      	mov	r4, r0
 800722e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007232:	4618      	mov	r0, r3
 8007234:	f7f9 fd68 	bl	8000d08 <__aeabi_ui2f>
 8007238:	4603      	mov	r3, r0
 800723a:	4619      	mov	r1, r3
 800723c:	4620      	mov	r0, r4
 800723e:	f7f9 fe6f 	bl	8000f20 <__aeabi_fdiv>
 8007242:	4603      	mov	r3, r0
 8007244:	461a      	mov	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 800724a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724c:	4618      	mov	r0, r3
 800724e:	f7f9 fd5f 	bl	8000d10 <__aeabi_i2f>
 8007252:	4605      	mov	r5, r0
 8007254:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007258:	4618      	mov	r0, r3
 800725a:	f7f9 fd55 	bl	8000d08 <__aeabi_ui2f>
 800725e:	4602      	mov	r2, r0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	1d1c      	adds	r4, r3, #4
 8007264:	4611      	mov	r1, r2
 8007266:	4628      	mov	r0, r5
 8007268:	f7f9 fe5a 	bl	8000f20 <__aeabi_fdiv>
 800726c:	4603      	mov	r3, r0
 800726e:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8007270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007272:	4618      	mov	r0, r3
 8007274:	f7f9 fd4c 	bl	8000d10 <__aeabi_i2f>
 8007278:	4605      	mov	r5, r0
 800727a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800727e:	4618      	mov	r0, r3
 8007280:	f7f9 fd42 	bl	8000d08 <__aeabi_ui2f>
 8007284:	4602      	mov	r2, r0
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f103 0408 	add.w	r4, r3, #8
 800728c:	4611      	mov	r1, r2
 800728e:	4628      	mov	r0, r5
 8007290:	f7f9 fe46 	bl	8000f20 <__aeabi_fdiv>
 8007294:	4603      	mov	r3, r0
 8007296:	6023      	str	r3, [r4, #0]
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8007298:	2300      	movs	r3, #0
 800729a:	623b      	str	r3, [r7, #32]
 800729c:	2300      	movs	r3, #0
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
 80072a0:	2300      	movs	r3, #0
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_XA_OFFSET_H, 1, rawADC, 2);// Read factory accelerometer trim values
 80072a4:	2302      	movs	r3, #2
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	4b71      	ldr	r3, [pc, #452]	; (8007470 <calibrateMPU9250+0x5a4>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	2177      	movs	r1, #119	; 0x77
 80072ae:	20d2      	movs	r0, #210	; 0xd2
 80072b0:	f003 ffc2 	bl	800b238 <I2C_ByteRead>
	accel_bias_reg[0] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
 80072b4:	4b6e      	ldr	r3, [pc, #440]	; (8007470 <calibrateMPU9250+0x5a4>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	021b      	lsls	r3, r3, #8
 80072ba:	b21b      	sxth	r3, r3
 80072bc:	461a      	mov	r2, r3
 80072be:	4b6c      	ldr	r3, [pc, #432]	; (8007470 <calibrateMPU9250+0x5a4>)
 80072c0:	785b      	ldrb	r3, [r3, #1]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	623b      	str	r3, [r7, #32]
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_YA_OFFSET_H, 1, rawADC, 2);
 80072c6:	2302      	movs	r3, #2
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	4b69      	ldr	r3, [pc, #420]	; (8007470 <calibrateMPU9250+0x5a4>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	217a      	movs	r1, #122	; 0x7a
 80072d0:	20d2      	movs	r0, #210	; 0xd2
 80072d2:	f003 ffb1 	bl	800b238 <I2C_ByteRead>
	accel_bias_reg[1] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
 80072d6:	4b66      	ldr	r3, [pc, #408]	; (8007470 <calibrateMPU9250+0x5a4>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	b21b      	sxth	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	4b63      	ldr	r3, [pc, #396]	; (8007470 <calibrateMPU9250+0x5a4>)
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 1, rawADC, 2);
 80072e8:	2302      	movs	r3, #2
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	4b60      	ldr	r3, [pc, #384]	; (8007470 <calibrateMPU9250+0x5a4>)
 80072ee:	2201      	movs	r2, #1
 80072f0:	217d      	movs	r1, #125	; 0x7d
 80072f2:	20d2      	movs	r0, #210	; 0xd2
 80072f4:	f003 ffa0 	bl	800b238 <I2C_ByteRead>
	accel_bias_reg[2] = (int16_t) ((int16_t)rawADC[0] << 8) | rawADC[1];
 80072f8:	4b5d      	ldr	r3, [pc, #372]	; (8007470 <calibrateMPU9250+0x5a4>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	b21b      	sxth	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	4b5b      	ldr	r3, [pc, #364]	; (8007470 <calibrateMPU9250+0x5a4>)
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	4313      	orrs	r3, r2
 8007308:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 800730a:	2301      	movs	r3, #1
 800730c:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 800730e:	2300      	movs	r3, #0
 8007310:	773b      	strb	r3, [r7, #28]
 8007312:	2300      	movs	r3, #0
 8007314:	777b      	strb	r3, [r7, #29]
 8007316:	2300      	movs	r3, #0
 8007318:	77bb      	strb	r3, [r7, #30]

	for(ii = 0; ii < 3; ii++)
 800731a:	2300      	movs	r3, #0
 800731c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007320:	e019      	b.n	8007356 <calibrateMPU9250+0x48a>
	{
		if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8007322:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800732c:	4413      	add	r3, r2
 800732e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8007332:	461a      	mov	r2, r3
 8007334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007336:	4013      	ands	r3, r2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d007      	beq.n	800734c <calibrateMPU9250+0x480>
 800733c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007340:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007344:	4413      	add	r3, r2
 8007346:	2201      	movs	r2, #1
 8007348:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(ii = 0; ii < 3; ii++)
 800734c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007350:	3301      	adds	r3, #1
 8007352:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007356:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800735a:	2b02      	cmp	r3, #2
 800735c:	d9e1      	bls.n	8007322 <calibrateMPU9250+0x456>
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800735e:	6a3a      	ldr	r2, [r7, #32]
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	2b00      	cmp	r3, #0
 8007364:	da00      	bge.n	8007368 <calibrateMPU9250+0x49c>
 8007366:	3307      	adds	r3, #7
 8007368:	10db      	asrs	r3, r3, #3
 800736a:	425b      	negs	r3, r3
 800736c:	4413      	add	r3, r2
 800736e:	623b      	str	r3, [r7, #32]
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8007370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	2b00      	cmp	r3, #0
 8007376:	da00      	bge.n	800737a <calibrateMPU9250+0x4ae>
 8007378:	3307      	adds	r3, #7
 800737a:	10db      	asrs	r3, r3, #3
 800737c:	425b      	negs	r3, r3
 800737e:	4413      	add	r3, r2
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8007382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007386:	2b00      	cmp	r3, #0
 8007388:	da00      	bge.n	800738c <calibrateMPU9250+0x4c0>
 800738a:	3307      	adds	r3, #7
 800738c:	10db      	asrs	r3, r3, #3
 800738e:	425b      	negs	r3, r3
 8007390:	4413      	add	r3, r2
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	121b      	asrs	r3, r3, #8
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (accel_bias_reg[0])      & 0xFF;
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80073a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80073aa:	7f3b      	ldrb	r3, [r7, #28]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	121b      	asrs	r3, r3, #8
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (accel_bias_reg[1])      & 0xFF;
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80073c6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80073ca:	7f7b      	ldrb	r3, [r7, #29]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	121b      	asrs	r3, r3, #8
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (accel_bias_reg[2])      & 0xFF;
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80073e6:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80073ea:	7fbb      	ldrb	r3, [r7, #30]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_H, 7, 8, data[4]);
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ZA_OFFSET_L, 7, 8, data[5]);*/


	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7f9 fc8a 	bl	8000d10 <__aeabi_i2f>
 80073fc:	4604      	mov	r4, r0
 80073fe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007402:	4618      	mov	r0, r3
 8007404:	f7f9 fc80 	bl	8000d08 <__aeabi_ui2f>
 8007408:	4603      	mov	r3, r0
 800740a:	4619      	mov	r1, r3
 800740c:	4620      	mov	r0, r4
 800740e:	f7f9 fd87 	bl	8000f20 <__aeabi_fdiv>
 8007412:	4603      	mov	r3, r0
 8007414:	461a      	mov	r2, r3
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	601a      	str	r2, [r3, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	4618      	mov	r0, r3
 800741e:	f7f9 fc77 	bl	8000d10 <__aeabi_i2f>
 8007422:	4605      	mov	r5, r0
 8007424:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007428:	4618      	mov	r0, r3
 800742a:	f7f9 fc6d 	bl	8000d08 <__aeabi_ui2f>
 800742e:	4602      	mov	r2, r0
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	1d1c      	adds	r4, r3, #4
 8007434:	4611      	mov	r1, r2
 8007436:	4628      	mov	r0, r5
 8007438:	f7f9 fd72 	bl	8000f20 <__aeabi_fdiv>
 800743c:	4603      	mov	r3, r0
 800743e:	6023      	str	r3, [r4, #0]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8007440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007442:	4618      	mov	r0, r3
 8007444:	f7f9 fc64 	bl	8000d10 <__aeabi_i2f>
 8007448:	4605      	mov	r5, r0
 800744a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800744e:	4618      	mov	r0, r3
 8007450:	f7f9 fc5a 	bl	8000d08 <__aeabi_ui2f>
 8007454:	4602      	mov	r2, r0
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	f103 0408 	add.w	r4, r3, #8
 800745c:	4611      	mov	r1, r2
 800745e:	4628      	mov	r0, r5
 8007460:	f7f9 fd5e 	bl	8000f20 <__aeabi_fdiv>
 8007464:	4603      	mov	r3, r0
 8007466:	6023      	str	r3, [r4, #0]
}
 8007468:	bf00      	nop
 800746a:	3760      	adds	r7, #96	; 0x60
 800746c:	46bd      	mov	sp, r7
 800746e:	bdb0      	pop	{r4, r5, r7, pc}
 8007470:	20000f0c 	.word	0x20000f0c

08007474 <initAK8963>:
void initAK8963(float * destination){
 8007474:	b590      	push	{r4, r7, lr}
 8007476:	b085      	sub	sp, #20
 8007478:	af02      	add	r7, sp, #8
 800747a:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 800747c:	2300      	movs	r3, #0
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	2308      	movs	r3, #8
 8007482:	2207      	movs	r2, #7
 8007484:	210a      	movs	r1, #10
 8007486:	2018      	movs	r0, #24
 8007488:	f003 fe4e 	bl	800b128 <I2C_ByteWrite>
	  HAL_Delay(10);
 800748c:	200a      	movs	r0, #10
 800748e:	f005 f973 	bl	800c778 <HAL_Delay>
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x0F);// Enter Fuse ROM access mode
 8007492:	230f      	movs	r3, #15
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	2308      	movs	r3, #8
 8007498:	2207      	movs	r2, #7
 800749a:	210a      	movs	r1, #10
 800749c:	2018      	movs	r0, #24
 800749e:	f003 fe43 	bl	800b128 <I2C_ByteWrite>
	  HAL_Delay(10);
 80074a2:	200a      	movs	r0, #10
 80074a4:	f005 f968 	bl	800c778 <HAL_Delay>
	  I2C_ByteRead(MPU9250_RA_MAG_ADDRESS, AK8963_ASAX, 1, rawADC, 3);// Read the x-, y-, and z-axis calibration values
 80074a8:	2303      	movs	r3, #3
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	4b36      	ldr	r3, [pc, #216]	; (8007588 <initAK8963+0x114>)
 80074ae:	2201      	movs	r2, #1
 80074b0:	2110      	movs	r1, #16
 80074b2:	2018      	movs	r0, #24
 80074b4:	f003 fec0 	bl	800b238 <I2C_ByteRead>
	  destination[0] =  (float)(rawADC[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 80074b8:	4b33      	ldr	r3, [pc, #204]	; (8007588 <initAK8963+0x114>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	3b80      	subs	r3, #128	; 0x80
 80074be:	4618      	mov	r0, r3
 80074c0:	f7f9 fc26 	bl	8000d10 <__aeabi_i2f>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7f9 fd28 	bl	8000f20 <__aeabi_fdiv>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7f9 fb66 	bl	8000ba8 <__addsf3>
 80074dc:	4603      	mov	r3, r0
 80074de:	461a      	mov	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	601a      	str	r2, [r3, #0]
	  destination[1] =  (float)(rawADC[1] - 128)/256.0f + 1.0f;
 80074e4:	4b28      	ldr	r3, [pc, #160]	; (8007588 <initAK8963+0x114>)
 80074e6:	785b      	ldrb	r3, [r3, #1]
 80074e8:	3b80      	subs	r3, #128	; 0x80
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7f9 fc10 	bl	8000d10 <__aeabi_i2f>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7f9 fd12 	bl	8000f20 <__aeabi_fdiv>
 80074fc:	4603      	mov	r3, r0
 80074fe:	461a      	mov	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	1d1c      	adds	r4, r3, #4
 8007504:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007508:	4610      	mov	r0, r2
 800750a:	f7f9 fb4d 	bl	8000ba8 <__addsf3>
 800750e:	4603      	mov	r3, r0
 8007510:	6023      	str	r3, [r4, #0]
	  destination[2] =  (float)(rawADC[2] - 128)/256.0f + 1.0f;
 8007512:	4b1d      	ldr	r3, [pc, #116]	; (8007588 <initAK8963+0x114>)
 8007514:	789b      	ldrb	r3, [r3, #2]
 8007516:	3b80      	subs	r3, #128	; 0x80
 8007518:	4618      	mov	r0, r3
 800751a:	f7f9 fbf9 	bl	8000d10 <__aeabi_i2f>
 800751e:	4603      	mov	r3, r0
 8007520:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007524:	4618      	mov	r0, r3
 8007526:	f7f9 fcfb 	bl	8000f20 <__aeabi_fdiv>
 800752a:	4603      	mov	r3, r0
 800752c:	461a      	mov	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f103 0408 	add.w	r4, r3, #8
 8007534:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007538:	4610      	mov	r0, r2
 800753a:	f7f9 fb35 	bl	8000ba8 <__addsf3>
 800753e:	4603      	mov	r3, r0
 8007540:	6023      	str	r3, [r4, #0]
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, 0x00);// Power down magnetometer
 8007542:	2300      	movs	r3, #0
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	2308      	movs	r3, #8
 8007548:	2207      	movs	r2, #7
 800754a:	210a      	movs	r1, #10
 800754c:	2018      	movs	r0, #24
 800754e:	f003 fdeb 	bl	800b128 <I2C_ByteWrite>
	  HAL_Delay(10);
 8007552:	200a      	movs	r0, #10
 8007554:	f005 f910 	bl	800c778 <HAL_Delay>
	  // Configure the magnetometer for continuous read and highest resolution
	  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	  I2C_ByteWrite(MPU9250_RA_MAG_ADDRESS, AK8963_CNTL, 7, 8, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8007558:	4b0c      	ldr	r3, [pc, #48]	; (800758c <initAK8963+0x118>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	b25a      	sxtb	r2, r3
 8007560:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <initAK8963+0x11c>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	b25b      	sxtb	r3, r3
 8007566:	4313      	orrs	r3, r2
 8007568:	b25b      	sxtb	r3, r3
 800756a:	b2db      	uxtb	r3, r3
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	2308      	movs	r3, #8
 8007570:	2207      	movs	r2, #7
 8007572:	210a      	movs	r1, #10
 8007574:	2018      	movs	r0, #24
 8007576:	f003 fdd7 	bl	800b128 <I2C_ByteWrite>
	  HAL_Delay(10);
 800757a:	200a      	movs	r0, #10
 800757c:	f005 f8fc 	bl	800c778 <HAL_Delay>
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	bd90      	pop	{r4, r7, pc}
 8007588:	20000f0c 	.word	0x20000f0c
 800758c:	20000010 	.word	0x20000010
 8007590:	20000011 	.word	0x20000011
 8007594:	00000000 	.word	0x00000000

08007598 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 8007598:	b5b0      	push	{r4, r5, r7, lr}
 800759a:	b096      	sub	sp, #88	; 0x58
 800759c:	af02      	add	r7, sp, #8
 800759e:	6078      	str	r0, [r7, #4]
   uint8_t selfTest[6] = {0, 0, 0, 0, 0, 0};
 80075a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	809a      	strh	r2, [r3, #4]
   uint16_t i, ii;
   int16_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80075aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	809a      	strh	r2, [r3, #4]
 80075b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	809a      	strh	r2, [r3, #4]
 80075be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	809a      	strh	r2, [r3, #4]
 80075c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	809a      	strh	r2, [r3, #4]
   float factoryTrim[6];
   uint8_t FS = GFS_250DPS;
 80075d2:	2300      	movs	r3, #0
 80075d4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_SMPLRT_DIV, 7, 8, 0x00);// Set gyro sample rate to 1 kHz
 80075d8:	2300      	movs	r3, #0
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	2308      	movs	r3, #8
 80075de:	2207      	movs	r2, #7
 80075e0:	2119      	movs	r1, #25
 80075e2:	20d2      	movs	r0, #210	; 0xd2
 80075e4:	f003 fda0 	bl	800b128 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_CONFIG, 7, 8, 0x02);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80075e8:	2302      	movs	r3, #2
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	2308      	movs	r3, #8
 80075ee:	2207      	movs	r2, #7
 80075f0:	211a      	movs	r1, #26
 80075f2:	20d2      	movs	r0, #210	; 0xd2
 80075f4:	f003 fd98 	bl	800b128 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, FS<<3);// Set full scale range for the gyro to 250 dps
 80075f8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	2308      	movs	r3, #8
 8007604:	2207      	movs	r2, #7
 8007606:	211b      	movs	r1, #27
 8007608:	20d2      	movs	r0, #210	; 0xd2
 800760a:	f003 fd8d 	bl	800b128 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, 0x1D, 7, 8, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800760e:	2302      	movs	r3, #2
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	2308      	movs	r3, #8
 8007614:	2207      	movs	r2, #7
 8007616:	211d      	movs	r1, #29
 8007618:	20d2      	movs	r0, #210	; 0xd2
 800761a:	f003 fd85 	bl	800b128 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, FS<<3);// Set full scale range for the accelerometer to 2 g
 800761e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	b2db      	uxtb	r3, r3
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	2308      	movs	r3, #8
 800762a:	2207      	movs	r2, #7
 800762c:	211c      	movs	r1, #28
 800762e:	20d2      	movs	r0, #210	; 0xd2
 8007630:	f003 fd7a 	bl	800b128 <I2C_ByteWrite>

  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8007634:	2300      	movs	r3, #0
 8007636:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800763a:	e07b      	b.n	8007734 <MPU9250SelfTest+0x19c>

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6);  // Read the six raw data registers into data array
 800763c:	2306      	movs	r3, #6
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	4baa      	ldr	r3, [pc, #680]	; (80078ec <MPU9250SelfTest+0x354>)
 8007642:	2201      	movs	r2, #1
 8007644:	213b      	movs	r1, #59	; 0x3b
 8007646:	20d2      	movs	r0, #210	; 0xd2
 8007648:	f003 fdf6 	bl	800b238 <I2C_ByteRead>
  aAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800764c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8007650:	b29a      	uxth	r2, r3
 8007652:	4ba6      	ldr	r3, [pc, #664]	; (80078ec <MPU9250SelfTest+0x354>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	021b      	lsls	r3, r3, #8
 8007658:	b219      	sxth	r1, r3
 800765a:	4ba4      	ldr	r3, [pc, #656]	; (80078ec <MPU9250SelfTest+0x354>)
 800765c:	785b      	ldrb	r3, [r3, #1]
 800765e:	b21b      	sxth	r3, r3
 8007660:	430b      	orrs	r3, r1
 8007662:	b21b      	sxth	r3, r3
 8007664:	b29b      	uxth	r3, r3
 8007666:	4413      	add	r3, r2
 8007668:	b29b      	uxth	r3, r3
 800766a:	b21b      	sxth	r3, r3
 800766c:	86bb      	strh	r3, [r7, #52]	; 0x34
  aAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 800766e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8007672:	b29a      	uxth	r2, r3
 8007674:	4b9d      	ldr	r3, [pc, #628]	; (80078ec <MPU9250SelfTest+0x354>)
 8007676:	789b      	ldrb	r3, [r3, #2]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	b219      	sxth	r1, r3
 800767c:	4b9b      	ldr	r3, [pc, #620]	; (80078ec <MPU9250SelfTest+0x354>)
 800767e:	78db      	ldrb	r3, [r3, #3]
 8007680:	b21b      	sxth	r3, r3
 8007682:	430b      	orrs	r3, r1
 8007684:	b21b      	sxth	r3, r3
 8007686:	b29b      	uxth	r3, r3
 8007688:	4413      	add	r3, r2
 800768a:	b29b      	uxth	r3, r3
 800768c:	b21b      	sxth	r3, r3
 800768e:	86fb      	strh	r3, [r7, #54]	; 0x36
  aAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8007690:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8007694:	b29a      	uxth	r2, r3
 8007696:	4b95      	ldr	r3, [pc, #596]	; (80078ec <MPU9250SelfTest+0x354>)
 8007698:	791b      	ldrb	r3, [r3, #4]
 800769a:	021b      	lsls	r3, r3, #8
 800769c:	b219      	sxth	r1, r3
 800769e:	4b93      	ldr	r3, [pc, #588]	; (80078ec <MPU9250SelfTest+0x354>)
 80076a0:	795b      	ldrb	r3, [r3, #5]
 80076a2:	b21b      	sxth	r3, r3
 80076a4:	430b      	orrs	r3, r1
 80076a6:	b21b      	sxth	r3, r3
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	4413      	add	r3, r2
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	b21b      	sxth	r3, r3
 80076b0:	873b      	strh	r3, [r7, #56]	; 0x38

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 80076b2:	2306      	movs	r3, #6
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	4b8d      	ldr	r3, [pc, #564]	; (80078ec <MPU9250SelfTest+0x354>)
 80076b8:	2201      	movs	r2, #1
 80076ba:	2143      	movs	r1, #67	; 0x43
 80076bc:	20d2      	movs	r0, #210	; 0xd2
 80076be:	f003 fdbb 	bl	800b238 <I2C_ByteRead>
  gAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80076c2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	4b88      	ldr	r3, [pc, #544]	; (80078ec <MPU9250SelfTest+0x354>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	b219      	sxth	r1, r3
 80076d0:	4b86      	ldr	r3, [pc, #536]	; (80078ec <MPU9250SelfTest+0x354>)
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	b21b      	sxth	r3, r3
 80076d6:	430b      	orrs	r3, r1
 80076d8:	b21b      	sxth	r3, r3
 80076da:	b29b      	uxth	r3, r3
 80076dc:	4413      	add	r3, r2
 80076de:	b29b      	uxth	r3, r3
 80076e0:	b21b      	sxth	r3, r3
 80076e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  gAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 80076e4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	4b80      	ldr	r3, [pc, #512]	; (80078ec <MPU9250SelfTest+0x354>)
 80076ec:	789b      	ldrb	r3, [r3, #2]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b219      	sxth	r1, r3
 80076f2:	4b7e      	ldr	r3, [pc, #504]	; (80078ec <MPU9250SelfTest+0x354>)
 80076f4:	78db      	ldrb	r3, [r3, #3]
 80076f6:	b21b      	sxth	r3, r3
 80076f8:	430b      	orrs	r3, r1
 80076fa:	b21b      	sxth	r3, r3
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	4413      	add	r3, r2
 8007700:	b29b      	uxth	r3, r3
 8007702:	b21b      	sxth	r3, r3
 8007704:	87fb      	strh	r3, [r7, #62]	; 0x3e
  gAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 8007706:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800770a:	b29a      	uxth	r2, r3
 800770c:	4b77      	ldr	r3, [pc, #476]	; (80078ec <MPU9250SelfTest+0x354>)
 800770e:	791b      	ldrb	r3, [r3, #4]
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	b219      	sxth	r1, r3
 8007714:	4b75      	ldr	r3, [pc, #468]	; (80078ec <MPU9250SelfTest+0x354>)
 8007716:	795b      	ldrb	r3, [r3, #5]
 8007718:	b21b      	sxth	r3, r3
 800771a:	430b      	orrs	r3, r1
 800771c:	b21b      	sxth	r3, r3
 800771e:	b29b      	uxth	r3, r3
 8007720:	4413      	add	r3, r2
 8007722:	b29b      	uxth	r3, r3
 8007724:	b21b      	sxth	r3, r3
 8007726:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  for(ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800772a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800772e:	3301      	adds	r3, #1
 8007730:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007734:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007738:	2bc7      	cmp	r3, #199	; 0xc7
 800773a:	f67f af7f 	bls.w	800763c <MPU9250SelfTest+0xa4>
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 800773e:	2300      	movs	r3, #0
 8007740:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007744:	e034      	b.n	80077b0 <MPU9250SelfTest+0x218>
  aAvg[ii] /= 200;
 8007746:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007750:	4413      	add	r3, r2
 8007752:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8007756:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800775a:	4965      	ldr	r1, [pc, #404]	; (80078f0 <MPU9250SelfTest+0x358>)
 800775c:	fb81 0103 	smull	r0, r1, r1, r3
 8007760:	1189      	asrs	r1, r1, #6
 8007762:	17db      	asrs	r3, r3, #31
 8007764:	1acb      	subs	r3, r1, r3
 8007766:	b219      	sxth	r1, r3
 8007768:	0053      	lsls	r3, r2, #1
 800776a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800776e:	4413      	add	r3, r2
 8007770:	460a      	mov	r2, r1
 8007772:	f823 2c1c 	strh.w	r2, [r3, #-28]
  gAvg[ii] /= 200;
 8007776:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007780:	4413      	add	r3, r2
 8007782:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8007786:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800778a:	4959      	ldr	r1, [pc, #356]	; (80078f0 <MPU9250SelfTest+0x358>)
 800778c:	fb81 0103 	smull	r0, r1, r1, r3
 8007790:	1189      	asrs	r1, r1, #6
 8007792:	17db      	asrs	r3, r3, #31
 8007794:	1acb      	subs	r3, r1, r3
 8007796:	b219      	sxth	r1, r3
 8007798:	0053      	lsls	r3, r2, #1
 800779a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800779e:	4413      	add	r3, r2
 80077a0:	460a      	mov	r2, r1
 80077a2:	f823 2c14 	strh.w	r2, [r3, #-20]
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80077a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077aa:	3301      	adds	r3, #1
 80077ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80077b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d9c6      	bls.n	8007746 <MPU9250SelfTest+0x1ae>
  }

// Configure the accelerometer for self-test
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80077b8:	23e0      	movs	r3, #224	; 0xe0
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	2308      	movs	r3, #8
 80077be:	2207      	movs	r2, #7
 80077c0:	211c      	movs	r1, #28
 80077c2:	20d2      	movs	r0, #210	; 0xd2
 80077c4:	f003 fcb0 	bl	800b128 <I2C_ByteWrite>
   I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80077c8:	23e0      	movs	r3, #224	; 0xe0
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	2308      	movs	r3, #8
 80077ce:	2207      	movs	r2, #7
 80077d0:	211b      	movs	r1, #27
 80077d2:	20d2      	movs	r0, #210	; 0xd2
 80077d4:	f003 fca8 	bl	800b128 <I2C_ByteWrite>
   HAL_Delay(25); // Delay a while to let the device stabilize
 80077d8:	2019      	movs	r0, #25
 80077da:	f004 ffcd 	bl	800c778 <HAL_Delay>

  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80077de:	2300      	movs	r3, #0
 80077e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80077e4:	e07a      	b.n	80078dc <MPU9250SelfTest+0x344>

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_XOUT_H, 1, rawADC, 6); // Read the six raw data registers into data array
 80077e6:	2306      	movs	r3, #6
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	4b40      	ldr	r3, [pc, #256]	; (80078ec <MPU9250SelfTest+0x354>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	213b      	movs	r1, #59	; 0x3b
 80077f0:	20d2      	movs	r0, #210	; 0xd2
 80077f2:	f003 fd21 	bl	800b238 <I2C_ByteRead>
  aSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80077f6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	4b3b      	ldr	r3, [pc, #236]	; (80078ec <MPU9250SelfTest+0x354>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	b219      	sxth	r1, r3
 8007804:	4b39      	ldr	r3, [pc, #228]	; (80078ec <MPU9250SelfTest+0x354>)
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	b21b      	sxth	r3, r3
 800780a:	430b      	orrs	r3, r1
 800780c:	b21b      	sxth	r3, r3
 800780e:	b29b      	uxth	r3, r3
 8007810:	4413      	add	r3, r2
 8007812:	b29b      	uxth	r3, r3
 8007814:	b21b      	sxth	r3, r3
 8007816:	85bb      	strh	r3, [r7, #44]	; 0x2c
  aSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 8007818:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800781c:	b29a      	uxth	r2, r3
 800781e:	4b33      	ldr	r3, [pc, #204]	; (80078ec <MPU9250SelfTest+0x354>)
 8007820:	789b      	ldrb	r3, [r3, #2]
 8007822:	021b      	lsls	r3, r3, #8
 8007824:	b219      	sxth	r1, r3
 8007826:	4b31      	ldr	r3, [pc, #196]	; (80078ec <MPU9250SelfTest+0x354>)
 8007828:	78db      	ldrb	r3, [r3, #3]
 800782a:	b21b      	sxth	r3, r3
 800782c:	430b      	orrs	r3, r1
 800782e:	b21b      	sxth	r3, r3
 8007830:	b29b      	uxth	r3, r3
 8007832:	4413      	add	r3, r2
 8007834:	b29b      	uxth	r3, r3
 8007836:	b21b      	sxth	r3, r3
 8007838:	85fb      	strh	r3, [r7, #46]	; 0x2e
  aSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 800783a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800783e:	b29a      	uxth	r2, r3
 8007840:	4b2a      	ldr	r3, [pc, #168]	; (80078ec <MPU9250SelfTest+0x354>)
 8007842:	791b      	ldrb	r3, [r3, #4]
 8007844:	021b      	lsls	r3, r3, #8
 8007846:	b219      	sxth	r1, r3
 8007848:	4b28      	ldr	r3, [pc, #160]	; (80078ec <MPU9250SelfTest+0x354>)
 800784a:	795b      	ldrb	r3, [r3, #5]
 800784c:	b21b      	sxth	r3, r3
 800784e:	430b      	orrs	r3, r1
 8007850:	b21b      	sxth	r3, r3
 8007852:	b29b      	uxth	r3, r3
 8007854:	4413      	add	r3, r2
 8007856:	b29b      	uxth	r3, r3
 8007858:	b21b      	sxth	r3, r3
 800785a:	863b      	strh	r3, [r7, #48]	; 0x30

  I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_XOUT_H, 1, rawADC, 6); // Read the six raw data registers sequentially into data array
 800785c:	2306      	movs	r3, #6
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	4b22      	ldr	r3, [pc, #136]	; (80078ec <MPU9250SelfTest+0x354>)
 8007862:	2201      	movs	r2, #1
 8007864:	2143      	movs	r1, #67	; 0x43
 8007866:	20d2      	movs	r0, #210	; 0xd2
 8007868:	f003 fce6 	bl	800b238 <I2C_ByteRead>
  gSTAvg[0] += (int16_t)(((int16_t)rawADC[0] << 8) | rawADC[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800786c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007870:	b29a      	uxth	r2, r3
 8007872:	4b1e      	ldr	r3, [pc, #120]	; (80078ec <MPU9250SelfTest+0x354>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	b219      	sxth	r1, r3
 800787a:	4b1c      	ldr	r3, [pc, #112]	; (80078ec <MPU9250SelfTest+0x354>)
 800787c:	785b      	ldrb	r3, [r3, #1]
 800787e:	b21b      	sxth	r3, r3
 8007880:	430b      	orrs	r3, r1
 8007882:	b21b      	sxth	r3, r3
 8007884:	b29b      	uxth	r3, r3
 8007886:	4413      	add	r3, r2
 8007888:	b29b      	uxth	r3, r3
 800788a:	b21b      	sxth	r3, r3
 800788c:	84bb      	strh	r3, [r7, #36]	; 0x24
  gSTAvg[1] += (int16_t)(((int16_t)rawADC[2] << 8) | rawADC[3]) ;
 800788e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007892:	b29a      	uxth	r2, r3
 8007894:	4b15      	ldr	r3, [pc, #84]	; (80078ec <MPU9250SelfTest+0x354>)
 8007896:	789b      	ldrb	r3, [r3, #2]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	b219      	sxth	r1, r3
 800789c:	4b13      	ldr	r3, [pc, #76]	; (80078ec <MPU9250SelfTest+0x354>)
 800789e:	78db      	ldrb	r3, [r3, #3]
 80078a0:	b21b      	sxth	r3, r3
 80078a2:	430b      	orrs	r3, r1
 80078a4:	b21b      	sxth	r3, r3
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4413      	add	r3, r2
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	b21b      	sxth	r3, r3
 80078ae:	84fb      	strh	r3, [r7, #38]	; 0x26
  gSTAvg[2] += (int16_t)(((int16_t)rawADC[4] << 8) | rawADC[5]) ;
 80078b0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	4b0d      	ldr	r3, [pc, #52]	; (80078ec <MPU9250SelfTest+0x354>)
 80078b8:	791b      	ldrb	r3, [r3, #4]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	b219      	sxth	r1, r3
 80078be:	4b0b      	ldr	r3, [pc, #44]	; (80078ec <MPU9250SelfTest+0x354>)
 80078c0:	795b      	ldrb	r3, [r3, #5]
 80078c2:	b21b      	sxth	r3, r3
 80078c4:	430b      	orrs	r3, r1
 80078c6:	b21b      	sxth	r3, r3
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	4413      	add	r3, r2
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	b21b      	sxth	r3, r3
 80078d0:	853b      	strh	r3, [r7, #40]	; 0x28
  for(ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80078d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80078d6:	3301      	adds	r3, #1
 80078d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80078dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80078e0:	2bc7      	cmp	r3, #199	; 0xc7
 80078e2:	d980      	bls.n	80077e6 <MPU9250SelfTest+0x24e>
  }

  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80078e4:	2300      	movs	r3, #0
 80078e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80078ea:	e038      	b.n	800795e <MPU9250SelfTest+0x3c6>
 80078ec:	20000f0c 	.word	0x20000f0c
 80078f0:	51eb851f 	.word	0x51eb851f
  aSTAvg[ii] /= 200;
 80078f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80078fe:	4413      	add	r3, r2
 8007900:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8007904:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007908:	49cf      	ldr	r1, [pc, #828]	; (8007c48 <MPU9250SelfTest+0x6b0>)
 800790a:	fb81 0103 	smull	r0, r1, r1, r3
 800790e:	1189      	asrs	r1, r1, #6
 8007910:	17db      	asrs	r3, r3, #31
 8007912:	1acb      	subs	r3, r1, r3
 8007914:	b219      	sxth	r1, r3
 8007916:	0053      	lsls	r3, r2, #1
 8007918:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800791c:	4413      	add	r3, r2
 800791e:	460a      	mov	r2, r1
 8007920:	f823 2c24 	strh.w	r2, [r3, #-36]
  gSTAvg[ii] /= 200;
 8007924:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800792e:	4413      	add	r3, r2
 8007930:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8007934:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007938:	49c3      	ldr	r1, [pc, #780]	; (8007c48 <MPU9250SelfTest+0x6b0>)
 800793a:	fb81 0103 	smull	r0, r1, r1, r3
 800793e:	1189      	asrs	r1, r1, #6
 8007940:	17db      	asrs	r3, r3, #31
 8007942:	1acb      	subs	r3, r1, r3
 8007944:	b219      	sxth	r1, r3
 8007946:	0053      	lsls	r3, r2, #1
 8007948:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800794c:	4413      	add	r3, r2
 800794e:	460a      	mov	r2, r1
 8007950:	f823 2c2c 	strh.w	r2, [r3, #-44]
  for (ii =0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8007954:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007958:	3301      	adds	r3, #1
 800795a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800795e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007962:	2b02      	cmp	r3, #2
 8007964:	d9c6      	bls.n	80078f4 <MPU9250SelfTest+0x35c>
  }

 // Configure the gyro and accelerometer for normal operation
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_ACCEL_CONFIG, 7, 8, 0x00);
 8007966:	2300      	movs	r3, #0
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	2308      	movs	r3, #8
 800796c:	2207      	movs	r2, #7
 800796e:	211c      	movs	r1, #28
 8007970:	20d2      	movs	r0, #210	; 0xd2
 8007972:	f003 fbd9 	bl	800b128 <I2C_ByteWrite>
  I2C_ByteWrite(MPU9250_ADDRESS_AD0_HIGH, MPU9250_RA_GYRO_CONFIG, 7, 8, 0x00);
 8007976:	2300      	movs	r3, #0
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	2308      	movs	r3, #8
 800797c:	2207      	movs	r2, #7
 800797e:	211b      	movs	r1, #27
 8007980:	20d2      	movs	r0, #210	; 0xd2
 8007982:	f003 fbd1 	bl	800b128 <I2C_ByteWrite>
  HAL_Delay(25); // Delay a while to let the device stabilize
 8007986:	2019      	movs	r0, #25
 8007988:	f004 fef6 	bl	800c778 <HAL_Delay>

   // Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x0D, 1, rawADC, 3);
 800798c:	2303      	movs	r3, #3
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	4bae      	ldr	r3, [pc, #696]	; (8007c4c <MPU9250SelfTest+0x6b4>)
 8007992:	2201      	movs	r2, #1
 8007994:	210d      	movs	r1, #13
 8007996:	20d2      	movs	r0, #210	; 0xd2
 8007998:	f003 fc4e 	bl	800b238 <I2C_ByteRead>
   selfTest[0] = rawADC[0]; // X-axis accel self-test results
 800799c:	4bab      	ldr	r3, [pc, #684]	; (8007c4c <MPU9250SelfTest+0x6b4>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   selfTest[1] = rawADC[1]; // Y-axis accel self-test results
 80079a4:	4ba9      	ldr	r3, [pc, #676]	; (8007c4c <MPU9250SelfTest+0x6b4>)
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   selfTest[2] = rawADC[2]; // Z-axis accel self-test results
 80079ac:	4ba7      	ldr	r3, [pc, #668]	; (8007c4c <MPU9250SelfTest+0x6b4>)
 80079ae:	789b      	ldrb	r3, [r3, #2]
 80079b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
   I2C_ByteRead(MPU9250_ADDRESS_AD0_HIGH, 0x00, 1, rawADC, 3);
 80079b4:	2303      	movs	r3, #3
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	4ba4      	ldr	r3, [pc, #656]	; (8007c4c <MPU9250SelfTest+0x6b4>)
 80079ba:	2201      	movs	r2, #1
 80079bc:	2100      	movs	r1, #0
 80079be:	20d2      	movs	r0, #210	; 0xd2
 80079c0:	f003 fc3a 	bl	800b238 <I2C_ByteRead>
   selfTest[3] = rawADC[0]; // X-axis gyro self-test results
 80079c4:	4ba1      	ldr	r3, [pc, #644]	; (8007c4c <MPU9250SelfTest+0x6b4>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   selfTest[4] = rawADC[1]; // Y-axis gyro self-test results
 80079cc:	4b9f      	ldr	r3, [pc, #636]	; (8007c4c <MPU9250SelfTest+0x6b4>)
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   selfTest[5] = rawADC[2]; // Z-axis gyro self-test results
 80079d4:	4b9d      	ldr	r3, [pc, #628]	; (8007c4c <MPU9250SelfTest+0x6b4>)
 80079d6:	789b      	ldrb	r3, [r3, #2]
 80079d8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

  // Retrieve factory self-test value from self-test code reads
   factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 80079dc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80079e0:	f640 223c 	movw	r2, #2620	; 0xa3c
 80079e4:	fa02 f303 	lsl.w	r3, r2, r3
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7f9 f991 	bl	8000d10 <__aeabi_i2f>
 80079ee:	4603      	mov	r3, r0
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7f8 fd33 	bl	800045c <__aeabi_f2d>
 80079f6:	4604      	mov	r4, r0
 80079f8:	460d      	mov	r5, r1
 80079fa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7f9 f982 	bl	8000d08 <__aeabi_ui2f>
 8007a04:	4603      	mov	r3, r0
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7f8 fd28 	bl	800045c <__aeabi_f2d>
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	4b8f      	ldr	r3, [pc, #572]	; (8007c50 <MPU9250SelfTest+0x6b8>)
 8007a12:	f7f8 fbc3 	bl	800019c <__aeabi_dsub>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	a189      	add	r1, pc, #548	; (adr r1, 8007c40 <MPU9250SelfTest+0x6a8>)
 8007a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a20:	f00d ff5c 	bl	80158dc <pow>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4620      	mov	r0, r4
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	f7f8 fd6e 	bl	800050c <__aeabi_dmul>
 8007a30:	4603      	mov	r3, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	4618      	mov	r0, r3
 8007a36:	4621      	mov	r1, r4
 8007a38:	f7f9 f860 	bl	8000afc <__aeabi_d2f>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	60fb      	str	r3, [r7, #12]
   factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8007a40:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a44:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7f9 f95f 	bl	8000d10 <__aeabi_i2f>
 8007a52:	4603      	mov	r3, r0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7f8 fd01 	bl	800045c <__aeabi_f2d>
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	460d      	mov	r5, r1
 8007a5e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7f9 f950 	bl	8000d08 <__aeabi_ui2f>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7f8 fcf6 	bl	800045c <__aeabi_f2d>
 8007a70:	f04f 0200 	mov.w	r2, #0
 8007a74:	4b76      	ldr	r3, [pc, #472]	; (8007c50 <MPU9250SelfTest+0x6b8>)
 8007a76:	f7f8 fb91 	bl	800019c <__aeabi_dsub>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	a170      	add	r1, pc, #448	; (adr r1, 8007c40 <MPU9250SelfTest+0x6a8>)
 8007a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a84:	f00d ff2a 	bl	80158dc <pow>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	4629      	mov	r1, r5
 8007a90:	f7f8 fd3c 	bl	800050c <__aeabi_dmul>
 8007a94:	4603      	mov	r3, r0
 8007a96:	460c      	mov	r4, r1
 8007a98:	4618      	mov	r0, r3
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	f7f9 f82e 	bl	8000afc <__aeabi_d2f>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	613b      	str	r3, [r7, #16]
   factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8007aa4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007aa8:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007aac:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7f9 f92d 	bl	8000d10 <__aeabi_i2f>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7f8 fccf 	bl	800045c <__aeabi_f2d>
 8007abe:	4604      	mov	r4, r0
 8007ac0:	460d      	mov	r5, r1
 8007ac2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7f9 f91e 	bl	8000d08 <__aeabi_ui2f>
 8007acc:	4603      	mov	r3, r0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7f8 fcc4 	bl	800045c <__aeabi_f2d>
 8007ad4:	f04f 0200 	mov.w	r2, #0
 8007ad8:	4b5d      	ldr	r3, [pc, #372]	; (8007c50 <MPU9250SelfTest+0x6b8>)
 8007ada:	f7f8 fb5f 	bl	800019c <__aeabi_dsub>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	a157      	add	r1, pc, #348	; (adr r1, 8007c40 <MPU9250SelfTest+0x6a8>)
 8007ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ae8:	f00d fef8 	bl	80158dc <pow>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4620      	mov	r0, r4
 8007af2:	4629      	mov	r1, r5
 8007af4:	f7f8 fd0a 	bl	800050c <__aeabi_dmul>
 8007af8:	4603      	mov	r3, r0
 8007afa:	460c      	mov	r4, r1
 8007afc:	4618      	mov	r0, r3
 8007afe:	4621      	mov	r1, r4
 8007b00:	f7f8 fffc 	bl	8000afc <__aeabi_d2f>
 8007b04:	4603      	mov	r3, r0
 8007b06:	617b      	str	r3, [r7, #20]
   factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8007b08:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007b0c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007b10:	fa02 f303 	lsl.w	r3, r2, r3
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7f9 f8fb 	bl	8000d10 <__aeabi_i2f>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7f8 fc9d 	bl	800045c <__aeabi_f2d>
 8007b22:	4604      	mov	r4, r0
 8007b24:	460d      	mov	r5, r1
 8007b26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7f9 f8ec 	bl	8000d08 <__aeabi_ui2f>
 8007b30:	4603      	mov	r3, r0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7f8 fc92 	bl	800045c <__aeabi_f2d>
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	4b44      	ldr	r3, [pc, #272]	; (8007c50 <MPU9250SelfTest+0x6b8>)
 8007b3e:	f7f8 fb2d 	bl	800019c <__aeabi_dsub>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	a13e      	add	r1, pc, #248	; (adr r1, 8007c40 <MPU9250SelfTest+0x6a8>)
 8007b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b4c:	f00d fec6 	bl	80158dc <pow>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	4620      	mov	r0, r4
 8007b56:	4629      	mov	r1, r5
 8007b58:	f7f8 fcd8 	bl	800050c <__aeabi_dmul>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	4618      	mov	r0, r3
 8007b62:	4621      	mov	r1, r4
 8007b64:	f7f8 ffca 	bl	8000afc <__aeabi_d2f>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	61bb      	str	r3, [r7, #24]
   factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8007b6c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007b70:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7f9 f8c9 	bl	8000d10 <__aeabi_i2f>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7f8 fc6b 	bl	800045c <__aeabi_f2d>
 8007b86:	4604      	mov	r4, r0
 8007b88:	460d      	mov	r5, r1
 8007b8a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7f9 f8ba 	bl	8000d08 <__aeabi_ui2f>
 8007b94:	4603      	mov	r3, r0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7f8 fc60 	bl	800045c <__aeabi_f2d>
 8007b9c:	f04f 0200 	mov.w	r2, #0
 8007ba0:	4b2b      	ldr	r3, [pc, #172]	; (8007c50 <MPU9250SelfTest+0x6b8>)
 8007ba2:	f7f8 fafb 	bl	800019c <__aeabi_dsub>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	a125      	add	r1, pc, #148	; (adr r1, 8007c40 <MPU9250SelfTest+0x6a8>)
 8007bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb0:	f00d fe94 	bl	80158dc <pow>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4620      	mov	r0, r4
 8007bba:	4629      	mov	r1, r5
 8007bbc:	f7f8 fca6 	bl	800050c <__aeabi_dmul>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	f7f8 ff98 	bl	8000afc <__aeabi_d2f>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	61fb      	str	r3, [r7, #28]
   factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8007bd0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007bd4:	f640 223c 	movw	r2, #2620	; 0xa3c
 8007bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7f9 f897 	bl	8000d10 <__aeabi_i2f>
 8007be2:	4603      	mov	r3, r0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7f8 fc39 	bl	800045c <__aeabi_f2d>
 8007bea:	4604      	mov	r4, r0
 8007bec:	460d      	mov	r5, r1
 8007bee:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7f9 f888 	bl	8000d08 <__aeabi_ui2f>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7f8 fc2e 	bl	800045c <__aeabi_f2d>
 8007c00:	f04f 0200 	mov.w	r2, #0
 8007c04:	4b12      	ldr	r3, [pc, #72]	; (8007c50 <MPU9250SelfTest+0x6b8>)
 8007c06:	f7f8 fac9 	bl	800019c <__aeabi_dsub>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	a10c      	add	r1, pc, #48	; (adr r1, 8007c40 <MPU9250SelfTest+0x6a8>)
 8007c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c14:	f00d fe62 	bl	80158dc <pow>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	4629      	mov	r1, r5
 8007c20:	f7f8 fc74 	bl	800050c <__aeabi_dmul>
 8007c24:	4603      	mov	r3, r0
 8007c26:	460c      	mov	r4, r1
 8007c28:	4618      	mov	r0, r3
 8007c2a:	4621      	mov	r1, r4
 8007c2c:	f7f8 ff66 	bl	8000afc <__aeabi_d2f>
 8007c30:	4603      	mov	r3, r0
 8007c32:	623b      	str	r3, [r7, #32]

 // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
 // To get percent, must multiply by 100
   for (i = 0; i < 3; i++) {
 8007c34:	2300      	movs	r3, #0
 8007c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c3a:	e092      	b.n	8007d62 <MPU9250SelfTest+0x7ca>
 8007c3c:	f3af 8000 	nop.w
 8007c40:	c28f5c29 	.word	0xc28f5c29
 8007c44:	3ff028f5 	.word	0x3ff028f5
 8007c48:	51eb851f 	.word	0x51eb851f
 8007c4c:	20000f0c 	.word	0x20000f0c
 8007c50:	3ff00000 	.word	0x3ff00000
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i];// - 100.0; // Report percent differences
 8007c54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007c5e:	4413      	add	r3, r2
 8007c60:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8007c64:	461a      	mov	r2, r3
 8007c66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007c70:	440b      	add	r3, r1
 8007c72:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7f9 f849 	bl	8000d10 <__aeabi_i2f>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7f8 fbeb 	bl	800045c <__aeabi_f2d>
 8007c86:	f04f 0200 	mov.w	r2, #0
 8007c8a:	4b3a      	ldr	r3, [pc, #232]	; (8007d74 <MPU9250SelfTest+0x7dc>)
 8007c8c:	f7f8 fc3e 	bl	800050c <__aeabi_dmul>
 8007c90:	4603      	mov	r3, r0
 8007c92:	460c      	mov	r4, r1
 8007c94:	4625      	mov	r5, r4
 8007c96:	461c      	mov	r4, r3
 8007c98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7f8 fbd7 	bl	800045c <__aeabi_f2d>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	f7f8 fd53 	bl	8000760 <__aeabi_ddiv>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	18d4      	adds	r4, r2, r3
 8007ccc:	f7f8 ff16 	bl	8000afc <__aeabi_d2f>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3];// - 100.0; // Report percent differences
 8007cd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007cde:	4413      	add	r3, r2
 8007ce0:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007cf0:	440b      	add	r3, r1
 8007cf2:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7f9 f809 	bl	8000d10 <__aeabi_i2f>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7f8 fbab 	bl	800045c <__aeabi_f2d>
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	4b1a      	ldr	r3, [pc, #104]	; (8007d74 <MPU9250SelfTest+0x7dc>)
 8007d0c:	f7f8 fbfe 	bl	800050c <__aeabi_dmul>
 8007d10:	4603      	mov	r3, r0
 8007d12:	460c      	mov	r4, r1
 8007d14:	4625      	mov	r5, r4
 8007d16:	461c      	mov	r4, r3
 8007d18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d1c:	3303      	adds	r3, #3
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007d24:	4413      	add	r3, r2
 8007d26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7f8 fb96 	bl	800045c <__aeabi_f2d>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4620      	mov	r0, r4
 8007d36:	4629      	mov	r1, r5
 8007d38:	f7f8 fd12 	bl	8000760 <__aeabi_ddiv>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	4618      	mov	r0, r3
 8007d42:	4621      	mov	r1, r4
 8007d44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d48:	3303      	adds	r3, #3
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	18d4      	adds	r4, r2, r3
 8007d50:	f7f8 fed4 	bl	8000afc <__aeabi_d2f>
 8007d54:	4603      	mov	r3, r0
 8007d56:	6023      	str	r3, [r4, #0]
   for (i = 0; i < 3; i++) {
 8007d58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	f67f af74 	bls.w	8007c54 <MPU9250SelfTest+0x6bc>
   }
}
 8007d6c:	bf00      	nop
 8007d6e:	3750      	adds	r7, #80	; 0x50
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bdb0      	pop	{r4, r5, r7, pc}
 8007d74:	40590000 	.word	0x40590000

08007d78 <MS5611_Init>:
alt_t alt;

static void cliBaro(cli_args_t *args);

void MS5611_Init(ms5611_osr_t osr)
{
 8007d78:	b590      	push	{r4, r7, lr}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	71fb      	strb	r3, [r7, #7]
#ifdef debug
	logPrintf("Initialize MS-5611 Sensor\r\n");
#endif
  I2C_Write(MS5611_ADDRESS, MS5611_CMD_RESET, 1);
 8007d82:	2201      	movs	r2, #1
 8007d84:	211e      	movs	r1, #30
 8007d86:	20ee      	movs	r0, #238	; 0xee
 8007d88:	f003 fad2 	bl	800b330 <I2C_Write>
  // Set oversampling value
  switch (osr)
 8007d8c:	79fb      	ldrb	r3, [r7, #7]
 8007d8e:	2b08      	cmp	r3, #8
 8007d90:	d828      	bhi.n	8007de4 <MS5611_Init+0x6c>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <MS5611_Init+0x20>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007dbd 	.word	0x08007dbd
 8007d9c:	08007de5 	.word	0x08007de5
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007de5 	.word	0x08007de5
 8007da8:	08007dcd 	.word	0x08007dcd
 8007dac:	08007de5 	.word	0x08007de5
 8007db0:	08007dd5 	.word	0x08007dd5
 8007db4:	08007de5 	.word	0x08007de5
 8007db8:	08007ddd 	.word	0x08007ddd
  {
    case MS5611_ULTRA_LOW_POWER:
      ms5611.ct = 1;
 8007dbc:	4b1c      	ldr	r3, [pc, #112]	; (8007e30 <MS5611_Init+0xb8>)
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	731a      	strb	r2, [r3, #12]
      break;
 8007dc2:	e00f      	b.n	8007de4 <MS5611_Init+0x6c>
    case MS5611_LOW_POWER:
      ms5611.ct = 2;
 8007dc4:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <MS5611_Init+0xb8>)
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	731a      	strb	r2, [r3, #12]
      break;
 8007dca:	e00b      	b.n	8007de4 <MS5611_Init+0x6c>
    case MS5611_STANDARD:
      ms5611.ct = 3;
 8007dcc:	4b18      	ldr	r3, [pc, #96]	; (8007e30 <MS5611_Init+0xb8>)
 8007dce:	2203      	movs	r2, #3
 8007dd0:	731a      	strb	r2, [r3, #12]
      break;
 8007dd2:	e007      	b.n	8007de4 <MS5611_Init+0x6c>
    case MS5611_HIGH_RES:
      ms5611.ct = 5;
 8007dd4:	4b16      	ldr	r3, [pc, #88]	; (8007e30 <MS5611_Init+0xb8>)
 8007dd6:	2205      	movs	r2, #5
 8007dd8:	731a      	strb	r2, [r3, #12]
      break;
 8007dda:	e003      	b.n	8007de4 <MS5611_Init+0x6c>
    case MS5611_ULTRA_HIGH_RES:
      ms5611.ct = 10;
 8007ddc:	4b14      	ldr	r3, [pc, #80]	; (8007e30 <MS5611_Init+0xb8>)
 8007dde:	220a      	movs	r2, #10
 8007de0:	731a      	strb	r2, [r3, #12]
      break;
 8007de2:	bf00      	nop
  }
  ms5611.uosr = osr;
 8007de4:	4a12      	ldr	r2, [pc, #72]	; (8007e30 <MS5611_Init+0xb8>)
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	7353      	strb	r3, [r2, #13]
  HAL_Delay(100);
 8007dea:	2064      	movs	r0, #100	; 0x64
 8007dec:	f004 fcc4 	bl	800c778 <HAL_Delay>

  for (uint8_t offset = 0; offset < 6; offset++)
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
 8007df4:	e010      	b.n	8007e18 <MS5611_Init+0xa0>
  {
    ms5611.fc[offset] = readRegister16(MS5611_CMD_READ_PROM + (offset * 2));
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	3351      	adds	r3, #81	; 0x51
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	7bfc      	ldrb	r4, [r7, #15]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fbfc 	bl	8008600 <readRegister16>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <MS5611_Init+0xb8>)
 8007e0e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  for (uint8_t offset = 0; offset < 6; offset++)
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	3301      	adds	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b05      	cmp	r3, #5
 8007e1c:	d9eb      	bls.n	8007df6 <MS5611_Init+0x7e>
  }
  cliAdd("baro", cliBaro);
 8007e1e:	4905      	ldr	r1, [pc, #20]	; (8007e34 <MS5611_Init+0xbc>)
 8007e20:	4805      	ldr	r0, [pc, #20]	; (8007e38 <MS5611_Init+0xc0>)
 8007e22:	f003 f821 	bl	800ae68 <cliAdd>
#ifdef debug
  logPrintf("Oversampling: %d\r\n", ms5611.uosr);
#endif
}
 8007e26:	bf00      	nop
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd90      	pop	{r4, r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000da0 	.word	0x20000da0
 8007e34:	0800869d 	.word	0x0800869d
 8007e38:	08019c34 	.word	0x08019c34

08007e3c <applyBarometerMedianFilter>:

#define PRESSURE_SAMPLES_MEDIAN 3

static int32_t applyBarometerMedianFilter(int32_t newPressureReading)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
    static int32_t barometerFilterSamples[PRESSURE_SAMPLES_MEDIAN];
    static int currentFilterSampleIndex = 0;
    static bool medianFilterReady = false;
    int nextSampleIndex;

    nextSampleIndex = (currentFilterSampleIndex + 1);
 8007e44:	4b11      	ldr	r3, [pc, #68]	; (8007e8c <applyBarometerMedianFilter+0x50>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	60fb      	str	r3, [r7, #12]
    if (nextSampleIndex == PRESSURE_SAMPLES_MEDIAN) {
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d104      	bne.n	8007e5c <applyBarometerMedianFilter+0x20>
        nextSampleIndex = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
        medianFilterReady = true;
 8007e56:	4b0e      	ldr	r3, [pc, #56]	; (8007e90 <applyBarometerMedianFilter+0x54>)
 8007e58:	2201      	movs	r2, #1
 8007e5a:	701a      	strb	r2, [r3, #0]
    }

    barometerFilterSamples[currentFilterSampleIndex] = newPressureReading;
 8007e5c:	4b0b      	ldr	r3, [pc, #44]	; (8007e8c <applyBarometerMedianFilter+0x50>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	490c      	ldr	r1, [pc, #48]	; (8007e94 <applyBarometerMedianFilter+0x58>)
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    currentFilterSampleIndex = nextSampleIndex;
 8007e68:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <applyBarometerMedianFilter+0x50>)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6013      	str	r3, [r2, #0]

    if (medianFilterReady)
 8007e6e:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <applyBarometerMedianFilter+0x54>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d004      	beq.n	8007e80 <applyBarometerMedianFilter+0x44>
        return quickMedianFilter3(barometerFilterSamples);
 8007e76:	4807      	ldr	r0, [pc, #28]	; (8007e94 <applyBarometerMedianFilter+0x58>)
 8007e78:	f7f9 fee0 	bl	8001c3c <quickMedianFilter3>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	e000      	b.n	8007e82 <applyBarometerMedianFilter+0x46>
    else
        return newPressureReading;
 8007e80:	687b      	ldr	r3, [r7, #4]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	200003d0 	.word	0x200003d0
 8007e90:	200003d4 	.word	0x200003d4
 8007e94:	200003d8 	.word	0x200003d8

08007e98 <Baro_Common>:

void Baro_Common(void){
 8007e98:	b590      	push	{r4, r7, lr}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
  static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
  static int baroHistIdx = 0;

  uint8_t indexplus1 = (baroHistIdx + 1);
 8007e9e:	4b18      	ldr	r3, [pc, #96]	; (8007f00 <Baro_Common+0x68>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	71fb      	strb	r3, [r7, #7]
  if (indexplus1 == 21) indexplus1 = 0;
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	2b15      	cmp	r3, #21
 8007eac:	d101      	bne.n	8007eb2 <Baro_Common+0x1a>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	71fb      	strb	r3, [r7, #7]
  baroHistTab[baroHistIdx] = applyBarometerMedianFilter(ms5611.realPressure);
 8007eb2:	4b14      	ldr	r3, [pc, #80]	; (8007f04 <Baro_Common+0x6c>)
 8007eb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007eb6:	4b12      	ldr	r3, [pc, #72]	; (8007f00 <Baro_Common+0x68>)
 8007eb8:	681c      	ldr	r4, [r3, #0]
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f7ff ffbe 	bl	8007e3c <applyBarometerMedianFilter>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <Baro_Common+0x70>)
 8007ec4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  baroPressureSum += baroHistTab[baroHistIdx];
 8007ec8:	4b0d      	ldr	r3, [pc, #52]	; (8007f00 <Baro_Common+0x68>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a0e      	ldr	r2, [pc, #56]	; (8007f08 <Baro_Common+0x70>)
 8007ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	4b0d      	ldr	r3, [pc, #52]	; (8007f0c <Baro_Common+0x74>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4413      	add	r3, r2
 8007eda:	4a0c      	ldr	r2, [pc, #48]	; (8007f0c <Baro_Common+0x74>)
 8007edc:	6013      	str	r3, [r2, #0]
  baroPressureSum -= baroHistTab[indexplus1];
 8007ede:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <Baro_Common+0x74>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	79fa      	ldrb	r2, [r7, #7]
 8007ee4:	4908      	ldr	r1, [pc, #32]	; (8007f08 <Baro_Common+0x70>)
 8007ee6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	4a07      	ldr	r2, [pc, #28]	; (8007f0c <Baro_Common+0x74>)
 8007eee:	6013      	str	r3, [r2, #0]
  baroHistIdx = indexplus1;
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	4a03      	ldr	r2, [pc, #12]	; (8007f00 <Baro_Common+0x68>)
 8007ef4:	6013      	str	r3, [r2, #0]
}
 8007ef6:	bf00      	nop
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd90      	pop	{r4, r7, pc}
 8007efe:	bf00      	nop
 8007f00:	200003e4 	.word	0x200003e4
 8007f04:	20000da0 	.word	0x20000da0
 8007f08:	200003e8 	.word	0x200003e8
 8007f0c:	20000380 	.word	0x20000380

08007f10 <Baro_update>:

uint8_t Baro_update()
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
	static uint32_t baroDeadline = 0;
	static int state = 0;
	uint32_t currentTimeUs = micros();
 8007f16:	f7f9 fad7 	bl	80014c8 <micros>
 8007f1a:	6078      	str	r0, [r7, #4]

	if(state >= 2)
 8007f1c:	4b29      	ldr	r3, [pc, #164]	; (8007fc4 <Baro_update+0xb4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	dd06      	ble.n	8007f32 <Baro_update+0x22>
	{
		state = 0;
 8007f24:	4b27      	ldr	r3, [pc, #156]	; (8007fc4 <Baro_update+0xb4>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
		MS561101BA_Calculate();
 8007f2a:	f000 f965 	bl	80081f8 <MS561101BA_Calculate>
		return 1;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e043      	b.n	8007fba <Baro_update+0xaa>
	}
	if ((int32_t)(currentTimeUs - baroDeadline) < 0) return 0;
 8007f32:	4b25      	ldr	r3, [pc, #148]	; (8007fc8 <Baro_update+0xb8>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	da01      	bge.n	8007f42 <Baro_update+0x32>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e03b      	b.n	8007fba <Baro_update+0xaa>
	baroDeadline = currentTimeUs;
 8007f42:	4a21      	ldr	r2, [pc, #132]	; (8007fc8 <Baro_update+0xb8>)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6013      	str	r3, [r2, #0]
	if (state == 0)
 8007f48:	4b1e      	ldr	r3, [pc, #120]	; (8007fc4 <Baro_update+0xb4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d118      	bne.n	8007f82 <Baro_update+0x72>
	{
		Baro_Common();
 8007f50:	f7ff ffa2 	bl	8007e98 <Baro_Common>
		ms5611.rawTemp = readRegister24(MS5611_CMD_ADC_READ);
 8007f54:	2000      	movs	r0, #0
 8007f56:	f000 fb79 	bl	800864c <readRegister24>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	4b1b      	ldr	r3, [pc, #108]	; (8007fcc <Baro_update+0xbc>)
 8007f5e:	651a      	str	r2, [r3, #80]	; 0x50
		//Request pressure data
		I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D1 + ms5611.uosr, 1);
 8007f60:	4b1a      	ldr	r3, [pc, #104]	; (8007fcc <Baro_update+0xbc>)
 8007f62:	7b5b      	ldrb	r3, [r3, #13]
 8007f64:	3340      	adds	r3, #64	; 0x40
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2201      	movs	r2, #1
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	20ee      	movs	r0, #238	; 0xee
 8007f6e:	f003 f9df 	bl	800b330 <I2C_Write>
		baroDeadline +=10000;
 8007f72:	4b15      	ldr	r3, [pc, #84]	; (8007fc8 <Baro_update+0xb8>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007f7a:	3310      	adds	r3, #16
 8007f7c:	4a12      	ldr	r2, [pc, #72]	; (8007fc8 <Baro_update+0xb8>)
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	e015      	b.n	8007fae <Baro_update+0x9e>
	} else
	{
		ms5611.rawPressure = readRegister24(MS5611_CMD_ADC_READ);
 8007f82:	2000      	movs	r0, #0
 8007f84:	f000 fb62 	bl	800864c <readRegister24>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	4b10      	ldr	r3, [pc, #64]	; (8007fcc <Baro_update+0xbc>)
 8007f8c:	659a      	str	r2, [r3, #88]	; 0x58
		//Request temperature data
		I2C_Write(MS5611_ADDRESS, MS5611_CMD_CONV_D2 + ms5611.uosr, 1);
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <Baro_update+0xbc>)
 8007f90:	7b5b      	ldrb	r3, [r3, #13]
 8007f92:	3350      	adds	r3, #80	; 0x50
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2201      	movs	r2, #1
 8007f98:	4619      	mov	r1, r3
 8007f9a:	20ee      	movs	r0, #238	; 0xee
 8007f9c:	f003 f9c8 	bl	800b330 <I2C_Write>
		baroDeadline +=10000;
 8007fa0:	4b09      	ldr	r3, [pc, #36]	; (8007fc8 <Baro_update+0xb8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007fa8:	3310      	adds	r3, #16
 8007faa:	4a07      	ldr	r2, [pc, #28]	; (8007fc8 <Baro_update+0xb8>)
 8007fac:	6013      	str	r3, [r2, #0]
	}
	state ++;
 8007fae:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <Baro_update+0xb4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	4a03      	ldr	r2, [pc, #12]	; (8007fc4 <Baro_update+0xb4>)
 8007fb6:	6013      	str	r3, [r2, #0]
	return 1;
 8007fb8:	2301      	movs	r3, #1
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	2000043c 	.word	0x2000043c
 8007fc8:	20000440 	.word	0x20000440
 8007fcc:	20000da0 	.word	0x20000da0

08007fd0 <getEstimatedAltitude>:

uint8_t getEstimatedAltitude(void){
 8007fd0:	b590      	push	{r4, r7, lr}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
  static int32_t baroAltOffset = 0;
  int32_t BaroAlt_tmp;
  static int32_t baroGroundAltitude = 0;
  static int32_t baroGroundPressure = 8*101325;
  static uint16_t previousT;
  uint16_t currentT = micros();
 8007fd6:	f7f9 fa77 	bl	80014c8 <micros>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	80fb      	strh	r3, [r7, #6]
  uint16_t dTime;

  dTime = currentT - previousT;
 8007fde:	4b6e      	ldr	r3, [pc, #440]	; (8008198 <getEstimatedAltitude+0x1c8>)
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	88fa      	ldrh	r2, [r7, #6]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	80bb      	strh	r3, [r7, #4]
  if (dTime < 25000) return 0;
 8007fe8:	88bb      	ldrh	r3, [r7, #4]
 8007fea:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d801      	bhi.n	8007ff6 <getEstimatedAltitude+0x26>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e0cc      	b.n	8008190 <getEstimatedAltitude+0x1c0>
  previousT = currentT;
 8007ff6:	4a68      	ldr	r2, [pc, #416]	; (8008198 <getEstimatedAltitude+0x1c8>)
 8007ff8:	88fb      	ldrh	r3, [r7, #6]
 8007ffa:	8013      	strh	r3, [r2, #0]
  if (calibratingB > 0) {
 8007ffc:	4b67      	ldr	r3, [pc, #412]	; (800819c <getEstimatedAltitude+0x1cc>)
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d043      	beq.n	800808c <getEstimatedAltitude+0xbc>
//    logBaroGroundPressureSum = log(baroPressureSum);
//    baroGroundTemperatureScale = ((int32_t)ms5611.realTemperature + 27315) * (2 * 29.271267f); // 2 *  is included here => no need for * 2  on BaroAlt in additional LPF

    baroGroundPressure -= baroGroundPressure / 8;
 8008004:	4b66      	ldr	r3, [pc, #408]	; (80081a0 <getEstimatedAltitude+0x1d0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	da00      	bge.n	800800e <getEstimatedAltitude+0x3e>
 800800c:	3307      	adds	r3, #7
 800800e:	10db      	asrs	r3, r3, #3
 8008010:	425b      	negs	r3, r3
 8008012:	461a      	mov	r2, r3
 8008014:	4b62      	ldr	r3, [pc, #392]	; (80081a0 <getEstimatedAltitude+0x1d0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4413      	add	r3, r2
 800801a:	4a61      	ldr	r2, [pc, #388]	; (80081a0 <getEstimatedAltitude+0x1d0>)
 800801c:	6013      	str	r3, [r2, #0]
    baroGroundPressure += baroPressureSum / 20;
 800801e:	4b61      	ldr	r3, [pc, #388]	; (80081a4 <getEstimatedAltitude+0x1d4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a61      	ldr	r2, [pc, #388]	; (80081a8 <getEstimatedAltitude+0x1d8>)
 8008024:	fba2 2303 	umull	r2, r3, r2, r3
 8008028:	091b      	lsrs	r3, r3, #4
 800802a:	4a5d      	ldr	r2, [pc, #372]	; (80081a0 <getEstimatedAltitude+0x1d0>)
 800802c:	6812      	ldr	r2, [r2, #0]
 800802e:	4413      	add	r3, r2
 8008030:	461a      	mov	r2, r3
 8008032:	4b5b      	ldr	r3, [pc, #364]	; (80081a0 <getEstimatedAltitude+0x1d0>)
 8008034:	601a      	str	r2, [r3, #0]
    //debug = baroGroundPressure;
    baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190259f)) * 4433000.0f;
 8008036:	4b5a      	ldr	r3, [pc, #360]	; (80081a0 <getEstimatedAltitude+0x1d0>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	da00      	bge.n	8008040 <getEstimatedAltitude+0x70>
 800803e:	3307      	adds	r3, #7
 8008040:	10db      	asrs	r3, r3, #3
 8008042:	4618      	mov	r0, r3
 8008044:	f7f8 fe64 	bl	8000d10 <__aeabi_i2f>
 8008048:	4603      	mov	r3, r0
 800804a:	4958      	ldr	r1, [pc, #352]	; (80081ac <getEstimatedAltitude+0x1dc>)
 800804c:	4618      	mov	r0, r3
 800804e:	f7f8 ff67 	bl	8000f20 <__aeabi_fdiv>
 8008052:	4603      	mov	r3, r0
 8008054:	4956      	ldr	r1, [pc, #344]	; (80081b0 <getEstimatedAltitude+0x1e0>)
 8008056:	4618      	mov	r0, r3
 8008058:	f00d fe40 	bl	8015cdc <powf>
 800805c:	4603      	mov	r3, r0
 800805e:	4619      	mov	r1, r3
 8008060:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008064:	f7f8 fd9e 	bl	8000ba4 <__aeabi_fsub>
 8008068:	4603      	mov	r3, r0
 800806a:	4952      	ldr	r1, [pc, #328]	; (80081b4 <getEstimatedAltitude+0x1e4>)
 800806c:	4618      	mov	r0, r3
 800806e:	f7f8 fea3 	bl	8000db8 <__aeabi_fmul>
 8008072:	4603      	mov	r3, r0
 8008074:	4618      	mov	r0, r3
 8008076:	f7f9 f87b 	bl	8001170 <__aeabi_f2iz>
 800807a:	4602      	mov	r2, r0
 800807c:	4b4e      	ldr	r3, [pc, #312]	; (80081b8 <getEstimatedAltitude+0x1e8>)
 800807e:	601a      	str	r2, [r3, #0]
    //debug = baroGroundAltitude;
    calibratingB--;
 8008080:	4b46      	ldr	r3, [pc, #280]	; (800819c <getEstimatedAltitude+0x1cc>)
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	3b01      	subs	r3, #1
 8008086:	b29a      	uxth	r2, r3
 8008088:	4b44      	ldr	r3, [pc, #272]	; (800819c <getEstimatedAltitude+0x1cc>)
 800808a:	801a      	strh	r2, [r3, #0]
  }

  // calculates height from ground via baro readings
  // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
  if(isBaroCalibrationComplete()){
 800808c:	f000 f8a4 	bl	80081d8 <isBaroCalibrationComplete>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d04c      	beq.n	8008130 <getEstimatedAltitude+0x160>
  BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / 20) / 101325.0f, 0.190259f)) * 4433000.0f); // in cm
 8008096:	4b43      	ldr	r3, [pc, #268]	; (80081a4 <getEstimatedAltitude+0x1d4>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a43      	ldr	r2, [pc, #268]	; (80081a8 <getEstimatedAltitude+0x1d8>)
 800809c:	fba2 2303 	umull	r2, r3, r2, r3
 80080a0:	091b      	lsrs	r3, r3, #4
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7f8 fe30 	bl	8000d08 <__aeabi_ui2f>
 80080a8:	4603      	mov	r3, r0
 80080aa:	4940      	ldr	r1, [pc, #256]	; (80081ac <getEstimatedAltitude+0x1dc>)
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7f8 ff37 	bl	8000f20 <__aeabi_fdiv>
 80080b2:	4603      	mov	r3, r0
 80080b4:	493e      	ldr	r1, [pc, #248]	; (80081b0 <getEstimatedAltitude+0x1e0>)
 80080b6:	4618      	mov	r0, r3
 80080b8:	f00d fe10 	bl	8015cdc <powf>
 80080bc:	4603      	mov	r3, r0
 80080be:	4619      	mov	r1, r3
 80080c0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80080c4:	f7f8 fd6e 	bl	8000ba4 <__aeabi_fsub>
 80080c8:	4603      	mov	r3, r0
 80080ca:	493a      	ldr	r1, [pc, #232]	; (80081b4 <getEstimatedAltitude+0x1e4>)
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7f8 fe73 	bl	8000db8 <__aeabi_fmul>
 80080d2:	4603      	mov	r3, r0
 80080d4:	4618      	mov	r0, r3
 80080d6:	f00d fb33 	bl	8015740 <lrintf>
 80080da:	6038      	str	r0, [r7, #0]
  BaroAlt_tmp -= baroGroundAltitude;
 80080dc:	4b36      	ldr	r3, [pc, #216]	; (80081b8 <getEstimatedAltitude+0x1e8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	603b      	str	r3, [r7, #0]
  ms5611.BaroAlt = lrintf((float)ms5611.BaroAlt * 0.6f + (float)BaroAlt_tmp * (1.0f - 0.6f)); // additional LPF to reduce baro noise
 80080e6:	4b35      	ldr	r3, [pc, #212]	; (80081bc <getEstimatedAltitude+0x1ec>)
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7f8 fe10 	bl	8000d10 <__aeabi_i2f>
 80080f0:	4603      	mov	r3, r0
 80080f2:	4933      	ldr	r1, [pc, #204]	; (80081c0 <getEstimatedAltitude+0x1f0>)
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7f8 fe5f 	bl	8000db8 <__aeabi_fmul>
 80080fa:	4603      	mov	r3, r0
 80080fc:	461c      	mov	r4, r3
 80080fe:	6838      	ldr	r0, [r7, #0]
 8008100:	f7f8 fe06 	bl	8000d10 <__aeabi_i2f>
 8008104:	4603      	mov	r3, r0
 8008106:	492f      	ldr	r1, [pc, #188]	; (80081c4 <getEstimatedAltitude+0x1f4>)
 8008108:	4618      	mov	r0, r3
 800810a:	f7f8 fe55 	bl	8000db8 <__aeabi_fmul>
 800810e:	4603      	mov	r3, r0
 8008110:	4619      	mov	r1, r3
 8008112:	4620      	mov	r0, r4
 8008114:	f7f8 fd48 	bl	8000ba8 <__addsf3>
 8008118:	4603      	mov	r3, r0
 800811a:	4618      	mov	r0, r3
 800811c:	f00d fb10 	bl	8015740 <lrintf>
 8008120:	4602      	mov	r2, r0
 8008122:	4b26      	ldr	r3, [pc, #152]	; (80081bc <getEstimatedAltitude+0x1ec>)
 8008124:	671a      	str	r2, [r3, #112]	; 0x70
  alt.EstAlt = ms5611.BaroAlt;
 8008126:	4b25      	ldr	r3, [pc, #148]	; (80081bc <getEstimatedAltitude+0x1ec>)
 8008128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812a:	4a27      	ldr	r2, [pc, #156]	; (80081c8 <getEstimatedAltitude+0x1f8>)
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	e002      	b.n	8008136 <getEstimatedAltitude+0x166>
  }else{
    alt.EstAlt = 0;
 8008130:	4b25      	ldr	r3, [pc, #148]	; (80081c8 <getEstimatedAltitude+0x1f8>)
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]

  //  ms5611.BaroAlt = ( logBaroGroundPressureSum - log(baroPressureSum) ) * baroGroundTemperatureScale;
  //  alt.EstAlt = (alt.EstAlt * 6 + ms5611.BaroAlt ) >> 3; // additional LPF to reduce baro noise (faster by 30 µs)
  //if(alt.EstAlt < 0) alt.EstAlt = 0;

  if ((f.ARMED|f.mag_reset) && !altitudeOffsetSet) {
 8008136:	4b25      	ldr	r3, [pc, #148]	; (80081cc <getEstimatedAltitude+0x1fc>)
 8008138:	785a      	ldrb	r2, [r3, #1]
 800813a:	4b24      	ldr	r3, [pc, #144]	; (80081cc <getEstimatedAltitude+0x1fc>)
 800813c:	7e9b      	ldrb	r3, [r3, #26]
 800813e:	4313      	orrs	r3, r2
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d011      	beq.n	800816a <getEstimatedAltitude+0x19a>
 8008146:	4b22      	ldr	r3, [pc, #136]	; (80081d0 <getEstimatedAltitude+0x200>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	f083 0301 	eor.w	r3, r3, #1
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00a      	beq.n	800816a <getEstimatedAltitude+0x19a>
      f.mag_reset = false;
 8008154:	4b1d      	ldr	r3, [pc, #116]	; (80081cc <getEstimatedAltitude+0x1fc>)
 8008156:	2200      	movs	r2, #0
 8008158:	769a      	strb	r2, [r3, #26]
      baroAltOffset = alt.EstAlt;
 800815a:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <getEstimatedAltitude+0x1f8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a1d      	ldr	r2, [pc, #116]	; (80081d4 <getEstimatedAltitude+0x204>)
 8008160:	6013      	str	r3, [r2, #0]
      altitudeOffsetSet = true;
 8008162:	4b1b      	ldr	r3, [pc, #108]	; (80081d0 <getEstimatedAltitude+0x200>)
 8008164:	2201      	movs	r2, #1
 8008166:	701a      	strb	r2, [r3, #0]
 8008168:	e00a      	b.n	8008180 <getEstimatedAltitude+0x1b0>
  } else if (!f.ARMED && altitudeOffsetSet) {
 800816a:	4b18      	ldr	r3, [pc, #96]	; (80081cc <getEstimatedAltitude+0x1fc>)
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d106      	bne.n	8008180 <getEstimatedAltitude+0x1b0>
 8008172:	4b17      	ldr	r3, [pc, #92]	; (80081d0 <getEstimatedAltitude+0x200>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <getEstimatedAltitude+0x1b0>
      altitudeOffsetSet = false;
 800817a:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <getEstimatedAltitude+0x200>)
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]
  }
  alt.EstAlt -= baroAltOffset;
 8008180:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <getEstimatedAltitude+0x1f8>)
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <getEstimatedAltitude+0x204>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	4a0f      	ldr	r2, [pc, #60]	; (80081c8 <getEstimatedAltitude+0x1f8>)
 800818c:	6013      	str	r3, [r2, #0]
  return 1;
 800818e:	2301      	movs	r3, #1
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	bd90      	pop	{r4, r7, pc}
 8008198:	20000444 	.word	0x20000444
 800819c:	2000000a 	.word	0x2000000a
 80081a0:	20000024 	.word	0x20000024
 80081a4:	20000380 	.word	0x20000380
 80081a8:	cccccccd 	.word	0xcccccccd
 80081ac:	47c5e680 	.word	0x47c5e680
 80081b0:	3e42d341 	.word	0x3e42d341
 80081b4:	4a8748d0 	.word	0x4a8748d0
 80081b8:	20000448 	.word	0x20000448
 80081bc:	20000da0 	.word	0x20000da0
 80081c0:	3f19999a 	.word	0x3f19999a
 80081c4:	3ecccccc 	.word	0x3ecccccc
 80081c8:	20000ef0 	.word	0x20000ef0
 80081cc:	20000ed4 	.word	0x20000ed4
 80081d0:	2000044c 	.word	0x2000044c
 80081d4:	20000450 	.word	0x20000450

080081d8 <isBaroCalibrationComplete>:

bool isBaroCalibrationComplete(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
    return calibratingB == 0;
 80081dc:	4b05      	ldr	r3, [pc, #20]	; (80081f4 <isBaroCalibrationComplete+0x1c>)
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bf0c      	ite	eq
 80081e4:	2301      	moveq	r3, #1
 80081e6:	2300      	movne	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bc80      	pop	{r7}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	2000000a 	.word	0x2000000a

080081f8 <MS561101BA_Calculate>:

    return readRegister24(MS5611_CMD_ADC_READ);
}

void MS561101BA_Calculate(void)
{
 80081f8:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 80081fc:	b08d      	sub	sp, #52	; 0x34
 80081fe:	af00      	add	r7, sp, #0
  int64_t delt;

  uint32_t D1 = ms5611.rawPressure;
 8008200:	4bc6      	ldr	r3, [pc, #792]	; (800851c <MS561101BA_Calculate+0x324>)
 8008202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t D2 = ms5611.rawTemp;
 8008206:	4bc5      	ldr	r3, [pc, #788]	; (800851c <MS561101BA_Calculate+0x324>)
 8008208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820a:	623b      	str	r3, [r7, #32]
  int64_t dT = D2 - ((uint32_t)ms5611.fc[4] << 8);
 800820c:	4bc3      	ldr	r3, [pc, #780]	; (800851c <MS561101BA_Calculate+0x324>)
 800820e:	891b      	ldrh	r3, [r3, #8]
 8008210:	021b      	lsls	r3, r3, #8
 8008212:	6a3a      	ldr	r2, [r7, #32]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	f04f 0400 	mov.w	r4, #0
 800821a:	e9c7 3406 	strd	r3, r4, [r7, #24]

  int64_t OFF = ((int64_t)ms5611.fc[1] << 16) + (((int64_t)ms5611.fc[3] * dT) >> 7);
 800821e:	4bbf      	ldr	r3, [pc, #764]	; (800851c <MS561101BA_Calculate+0x324>)
 8008220:	885b      	ldrh	r3, [r3, #2]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f04f 0400 	mov.w	r4, #0
 8008228:	0c1e      	lsrs	r6, r3, #16
 800822a:	041d      	lsls	r5, r3, #16
 800822c:	4bbb      	ldr	r3, [pc, #748]	; (800851c <MS561101BA_Calculate+0x324>)
 800822e:	88db      	ldrh	r3, [r3, #6]
 8008230:	b29b      	uxth	r3, r3
 8008232:	f04f 0400 	mov.w	r4, #0
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	fb04 f102 	mul.w	r1, r4, r2
 800823c:	69fa      	ldr	r2, [r7, #28]
 800823e:	fb03 f202 	mul.w	r2, r3, r2
 8008242:	1888      	adds	r0, r1, r2
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	fba2 1203 	umull	r1, r2, r2, r3
 800824a:	1883      	adds	r3, r0, r2
 800824c:	461a      	mov	r2, r3
 800824e:	f04f 0800 	mov.w	r8, #0
 8008252:	f04f 0900 	mov.w	r9, #0
 8008256:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 800825a:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 800825e:	ea4f 19e2 	mov.w	r9, r2, asr #7
 8008262:	eb18 0305 	adds.w	r3, r8, r5
 8008266:	eb49 0406 	adc.w	r4, r9, r6
 800826a:	e9c7 3404 	strd	r3, r4, [r7, #16]
  int64_t SENS =((int64_t)ms5611.fc[0] << 15) + (((int64_t)ms5611.fc[2] * dT) >> 8);
 800826e:	4bab      	ldr	r3, [pc, #684]	; (800851c <MS561101BA_Calculate+0x324>)
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	f04f 0400 	mov.w	r4, #0
 8008278:	f04f 0100 	mov.w	r1, #0
 800827c:	f04f 0200 	mov.w	r2, #0
 8008280:	03e2      	lsls	r2, r4, #15
 8008282:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 8008286:	03d9      	lsls	r1, r3, #15
 8008288:	4ba4      	ldr	r3, [pc, #656]	; (800851c <MS561101BA_Calculate+0x324>)
 800828a:	889b      	ldrh	r3, [r3, #4]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f04f 0400 	mov.w	r4, #0
 8008292:	69b8      	ldr	r0, [r7, #24]
 8008294:	fb04 f500 	mul.w	r5, r4, r0
 8008298:	69f8      	ldr	r0, [r7, #28]
 800829a:	fb03 f000 	mul.w	r0, r3, r0
 800829e:	4428      	add	r0, r5
 80082a0:	69bd      	ldr	r5, [r7, #24]
 80082a2:	fba5 5603 	umull	r5, r6, r5, r3
 80082a6:	1983      	adds	r3, r0, r6
 80082a8:	461e      	mov	r6, r3
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	f04f 0900 	mov.w	r9, #0
 80082b2:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80082b6:	ea48 6806 	orr.w	r8, r8, r6, lsl #24
 80082ba:	ea4f 2926 	mov.w	r9, r6, asr #8
 80082be:	eb18 0301 	adds.w	r3, r8, r1
 80082c2:	eb49 0402 	adc.w	r4, r9, r2
 80082c6:	e9c7 3402 	strd	r3, r4, [r7, #8]

  int64_t TEMP = 2000 + ((dT * (int64_t)ms5611.fc[5]) >> 23);
 80082ca:	4b94      	ldr	r3, [pc, #592]	; (800851c <MS561101BA_Calculate+0x324>)
 80082cc:	895b      	ldrh	r3, [r3, #10]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	f04f 0400 	mov.w	r4, #0
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	fb04 f102 	mul.w	r1, r4, r2
 80082da:	69fa      	ldr	r2, [r7, #28]
 80082dc:	fb03 f202 	mul.w	r2, r3, r2
 80082e0:	1888      	adds	r0, r1, r2
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	fba2 1203 	umull	r1, r2, r2, r3
 80082e8:	1883      	adds	r3, r0, r2
 80082ea:	461a      	mov	r2, r3
 80082ec:	f04f 0500 	mov.w	r5, #0
 80082f0:	f04f 0600 	mov.w	r6, #0
 80082f4:	0dcd      	lsrs	r5, r1, #23
 80082f6:	ea45 2542 	orr.w	r5, r5, r2, lsl #9
 80082fa:	15d6      	asrs	r6, r2, #23
 80082fc:	f515 63fa 	adds.w	r3, r5, #2000	; 0x7d0
 8008300:	f146 0400 	adc.w	r4, r6, #0
 8008304:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

  ms5611.OFF2 = 0;
 8008308:	4a84      	ldr	r2, [pc, #528]	; (800851c <MS561101BA_Calculate+0x324>)
 800830a:	f04f 0300 	mov.w	r3, #0
 800830e:	f04f 0400 	mov.w	r4, #0
 8008312:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
  ms5611.SENS2 = 0;
 8008316:	4a81      	ldr	r2, [pc, #516]	; (800851c <MS561101BA_Calculate+0x324>)
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	f04f 0400 	mov.w	r4, #0
 8008320:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

  if (TEMP < 2000)
 8008324:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008328:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800832c:	f04f 0200 	mov.w	r2, #0
 8008330:	4299      	cmp	r1, r3
 8008332:	eb72 0304 	sbcs.w	r3, r2, r4
 8008336:	f2c0 8115 	blt.w	8008564 <MS561101BA_Calculate+0x36c>
  {
    delt = TEMP - 2000;
 800833a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800833e:	f5b3 61fa 	subs.w	r1, r3, #2000	; 0x7d0
 8008342:	f144 32ff 	adc.w	r2, r4, #4294967295
 8008346:	e9c7 1200 	strd	r1, r2, [r7]
    ms5611.OFF2 = 5 * (delt * delt) / 2;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	fb02 f203 	mul.w	r2, r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	fb01 f303 	mul.w	r3, r1, r3
 800835a:	4413      	add	r3, r2
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	fba1 5602 	umull	r5, r6, r1, r2
 8008364:	4433      	add	r3, r6
 8008366:	461e      	mov	r6, r3
 8008368:	4629      	mov	r1, r5
 800836a:	4632      	mov	r2, r6
 800836c:	f04f 0300 	mov.w	r3, #0
 8008370:	f04f 0400 	mov.w	r4, #0
 8008374:	0094      	lsls	r4, r2, #2
 8008376:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800837a:	008b      	lsls	r3, r1, #2
 800837c:	4619      	mov	r1, r3
 800837e:	4622      	mov	r2, r4
 8008380:	eb11 0805 	adds.w	r8, r1, r5
 8008384:	eb42 0906 	adc.w	r9, r2, r6
 8008388:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 800838c:	4611      	mov	r1, r2
 800838e:	f04f 0200 	mov.w	r2, #0
 8008392:	eb18 0301 	adds.w	r3, r8, r1
 8008396:	eb49 0402 	adc.w	r4, r9, r2
 800839a:	1064      	asrs	r4, r4, #1
 800839c:	ea4f 0333 	mov.w	r3, r3, rrx
 80083a0:	4a5e      	ldr	r2, [pc, #376]	; (800851c <MS561101BA_Calculate+0x324>)
 80083a2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    ms5611.SENS2 = 5 * (delt * delt) / 4;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	fb02 f203 	mul.w	r2, r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	fb01 f303 	mul.w	r3, r1, r3
 80083b6:	4413      	add	r3, r2
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	fba1 5602 	umull	r5, r6, r1, r2
 80083c0:	4433      	add	r3, r6
 80083c2:	461e      	mov	r6, r3
 80083c4:	4629      	mov	r1, r5
 80083c6:	4632      	mov	r2, r6
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	f04f 0400 	mov.w	r4, #0
 80083d0:	0094      	lsls	r4, r2, #2
 80083d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80083d6:	008b      	lsls	r3, r1, #2
 80083d8:	4619      	mov	r1, r3
 80083da:	4622      	mov	r2, r4
 80083dc:	194b      	adds	r3, r1, r5
 80083de:	eb42 0406 	adc.w	r4, r2, r6
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f174 0200 	sbcs.w	r2, r4, #0
 80083e8:	da02      	bge.n	80083f0 <MS561101BA_Calculate+0x1f8>
 80083ea:	3303      	adds	r3, #3
 80083ec:	f144 0400 	adc.w	r4, r4, #0
 80083f0:	f04f 0100 	mov.w	r1, #0
 80083f4:	f04f 0200 	mov.w	r2, #0
 80083f8:	0899      	lsrs	r1, r3, #2
 80083fa:	ea41 7184 	orr.w	r1, r1, r4, lsl #30
 80083fe:	10a2      	asrs	r2, r4, #2
 8008400:	460b      	mov	r3, r1
 8008402:	4614      	mov	r4, r2
 8008404:	4a45      	ldr	r2, [pc, #276]	; (800851c <MS561101BA_Calculate+0x324>)
 8008406:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    if (TEMP < -1500)
 800840a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800840e:	4944      	ldr	r1, [pc, #272]	; (8008520 <MS561101BA_Calculate+0x328>)
 8008410:	f04f 32ff 	mov.w	r2, #4294967295
 8008414:	428b      	cmp	r3, r1
 8008416:	eb74 0302 	sbcs.w	r3, r4, r2
 800841a:	f280 8083 	bge.w	8008524 <MS561101BA_Calculate+0x32c>
    {
      delt = TEMP + 1500;
 800841e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008422:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8008426:	f04f 0200 	mov.w	r2, #0
 800842a:	185d      	adds	r5, r3, r1
 800842c:	eb44 0602 	adc.w	r6, r4, r2
 8008430:	e9c7 5600 	strd	r5, r6, [r7]
      ms5611.OFF2 = ms5611.OFF2 + 7 * (delt * delt);
 8008434:	4b39      	ldr	r3, [pc, #228]	; (800851c <MS561101BA_Calculate+0x324>)
 8008436:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	fb02 f203 	mul.w	r2, r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	fb01 f303 	mul.w	r3, r1, r3
 800844a:	4413      	add	r3, r2
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	fba1 5602 	umull	r5, r6, r1, r2
 8008454:	4433      	add	r3, r6
 8008456:	461e      	mov	r6, r3
 8008458:	4629      	mov	r1, r5
 800845a:	4632      	mov	r2, r6
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	f04f 0400 	mov.w	r4, #0
 8008464:	00d4      	lsls	r4, r2, #3
 8008466:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800846a:	00cb      	lsls	r3, r1, #3
 800846c:	4619      	mov	r1, r3
 800846e:	4622      	mov	r2, r4
 8008470:	460b      	mov	r3, r1
 8008472:	4614      	mov	r4, r2
 8008474:	1b5b      	subs	r3, r3, r5
 8008476:	eb64 0406 	sbc.w	r4, r4, r6
 800847a:	4619      	mov	r1, r3
 800847c:	4622      	mov	r2, r4
 800847e:	eb11 0308 	adds.w	r3, r1, r8
 8008482:	eb42 0409 	adc.w	r4, r2, r9
 8008486:	4a25      	ldr	r2, [pc, #148]	; (800851c <MS561101BA_Calculate+0x324>)
 8008488:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
      ms5611.SENS2 = ms5611.SENS2 + 11 * (delt * delt) / 2;
 800848c:	4b23      	ldr	r3, [pc, #140]	; (800851c <MS561101BA_Calculate+0x324>)
 800848e:	e9d3 8912 	ldrd	r8, r9, [r3, #72]	; 0x48
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	fb02 f203 	mul.w	r2, r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	fb01 f303 	mul.w	r3, r1, r3
 80084a2:	4413      	add	r3, r2
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	fba1 5602 	umull	r5, r6, r1, r2
 80084ac:	4433      	add	r3, r6
 80084ae:	461e      	mov	r6, r3
 80084b0:	46ab      	mov	fp, r5
 80084b2:	46b4      	mov	ip, r6
 80084b4:	eb1b 030b 	adds.w	r3, fp, fp
 80084b8:	eb4c 040c 	adc.w	r4, ip, ip
 80084bc:	469b      	mov	fp, r3
 80084be:	46a4      	mov	ip, r4
 80084c0:	eb1b 0b05 	adds.w	fp, fp, r5
 80084c4:	eb4c 0c06 	adc.w	ip, ip, r6
 80084c8:	f04f 0100 	mov.w	r1, #0
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80084d4:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80084d8:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80084dc:	468b      	mov	fp, r1
 80084de:	4694      	mov	ip, r2
 80084e0:	ebbb 0b05 	subs.w	fp, fp, r5
 80084e4:	eb6c 0c06 	sbc.w	ip, ip, r6
 80084e8:	465c      	mov	r4, fp
 80084ea:	4665      	mov	r5, ip
 80084ec:	462b      	mov	r3, r5
 80084ee:	0fda      	lsrs	r2, r3, #31
 80084f0:	4611      	mov	r1, r2
 80084f2:	f04f 0200 	mov.w	r2, #0
 80084f6:	4623      	mov	r3, r4
 80084f8:	462c      	mov	r4, r5
 80084fa:	185b      	adds	r3, r3, r1
 80084fc:	eb44 0402 	adc.w	r4, r4, r2
 8008500:	1064      	asrs	r4, r4, #1
 8008502:	ea4f 0333 	mov.w	r3, r3, rrx
 8008506:	4619      	mov	r1, r3
 8008508:	4622      	mov	r2, r4
 800850a:	eb11 0308 	adds.w	r3, r1, r8
 800850e:	eb42 0409 	adc.w	r4, r2, r9
 8008512:	4a02      	ldr	r2, [pc, #8]	; (800851c <MS561101BA_Calculate+0x324>)
 8008514:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 8008518:	e004      	b.n	8008524 <MS561101BA_Calculate+0x32c>
 800851a:	bf00      	nop
 800851c:	20000da0 	.word	0x20000da0
 8008520:	fffffa24 	.word	0xfffffa24
    }
    TEMP -= ((dT * dT) >> 31);
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	fb02 f203 	mul.w	r2, r2, r3
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	69b9      	ldr	r1, [r7, #24]
 8008530:	fb01 f303 	mul.w	r3, r1, r3
 8008534:	4413      	add	r3, r2
 8008536:	69b9      	ldr	r1, [r7, #24]
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	fba1 1202 	umull	r1, r2, r1, r2
 800853e:	4413      	add	r3, r2
 8008540:	461a      	mov	r2, r3
 8008542:	f04f 0500 	mov.w	r5, #0
 8008546:	f04f 0600 	mov.w	r6, #0
 800854a:	0fcd      	lsrs	r5, r1, #31
 800854c:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 8008550:	17d6      	asrs	r6, r2, #31
 8008552:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008556:	460b      	mov	r3, r1
 8008558:	4614      	mov	r4, r2
 800855a:	1b5b      	subs	r3, r3, r5
 800855c:	eb64 0406 	sbc.w	r4, r4, r6
 8008560:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  }

  OFF = OFF - ms5611.OFF2;
 8008564:	4b25      	ldr	r3, [pc, #148]	; (80085fc <MS561101BA_Calculate+0x404>)
 8008566:	e9d3 5610 	ldrd	r5, r6, [r3, #64]	; 0x40
 800856a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800856e:	460b      	mov	r3, r1
 8008570:	4614      	mov	r4, r2
 8008572:	1b5b      	subs	r3, r3, r5
 8008574:	eb64 0406 	sbc.w	r4, r4, r6
 8008578:	e9c7 3404 	strd	r3, r4, [r7, #16]
  SENS = SENS - ms5611.SENS2;
 800857c:	4b1f      	ldr	r3, [pc, #124]	; (80085fc <MS561101BA_Calculate+0x404>)
 800857e:	e9d3 5612 	ldrd	r5, r6, [r3, #72]	; 0x48
 8008582:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008586:	460b      	mov	r3, r1
 8008588:	4614      	mov	r4, r2
 800858a:	1b5b      	subs	r3, r3, r5
 800858c:	eb64 0406 	sbc.w	r4, r4, r6
 8008590:	e9c7 3402 	strd	r3, r4, [r7, #8]

  ms5611.realPressure = ((((int64_t)D1 * SENS) >> 21) - OFF) >> 15;
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	f04f 0400 	mov.w	r4, #0
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	fb04 f102 	mul.w	r1, r4, r2
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	fb03 f202 	mul.w	r2, r3, r2
 80085a6:	1888      	adds	r0, r1, r2
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	fba2 1203 	umull	r1, r2, r2, r3
 80085ae:	1883      	adds	r3, r0, r2
 80085b0:	461a      	mov	r2, r3
 80085b2:	f04f 0300 	mov.w	r3, #0
 80085b6:	f04f 0400 	mov.w	r4, #0
 80085ba:	0d4b      	lsrs	r3, r1, #21
 80085bc:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80085c0:	1554      	asrs	r4, r2, #21
 80085c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80085c6:	1a5b      	subs	r3, r3, r1
 80085c8:	eb64 0402 	sbc.w	r4, r4, r2
 80085cc:	461d      	mov	r5, r3
 80085ce:	4626      	mov	r6, r4
 80085d0:	f04f 0300 	mov.w	r3, #0
 80085d4:	f04f 0400 	mov.w	r4, #0
 80085d8:	0beb      	lsrs	r3, r5, #15
 80085da:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80085de:	13f4      	asrs	r4, r6, #15
 80085e0:	461a      	mov	r2, r3
 80085e2:	4b06      	ldr	r3, [pc, #24]	; (80085fc <MS561101BA_Calculate+0x404>)
 80085e4:	65da      	str	r2, [r3, #92]	; 0x5c
  ms5611.realTemperature = (uint32_t)TEMP;
 80085e6:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80085ea:	4b04      	ldr	r3, [pc, #16]	; (80085fc <MS561101BA_Calculate+0x404>)
 80085ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
}
 80085f0:	bf00      	nop
 80085f2:	3734      	adds	r7, #52	; 0x34
 80085f4:	46bd      	mov	sp, r7
 80085f6:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 80085fa:	4770      	bx	lr
 80085fc:	20000da0 	.word	0x20000da0

08008600 <readRegister16>:

// Read 16-bit from register (oops MSB, LSB)
uint16_t readRegister16(uint8_t reg)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	71fb      	strb	r3, [r7, #7]
    uint16_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	2201      	movs	r2, #1
 800860e:	4619      	mov	r1, r3
 8008610:	20ee      	movs	r0, #238	; 0xee
 8008612:	f002 fe8d 	bl	800b330 <I2C_Write>

    I2C_Read(MS5611_ADDRESS, rawADC, 2);
 8008616:	2202      	movs	r2, #2
 8008618:	490b      	ldr	r1, [pc, #44]	; (8008648 <readRegister16+0x48>)
 800861a:	20ee      	movs	r0, #238	; 0xee
 800861c:	f002 fec8 	bl	800b3b0 <I2C_Read>

    uint8_t vha = rawADC[0];
 8008620:	4b09      	ldr	r3, [pc, #36]	; (8008648 <readRegister16+0x48>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	73fb      	strb	r3, [r7, #15]
    uint8_t vla = rawADC[1];
 8008626:	4b08      	ldr	r3, [pc, #32]	; (8008648 <readRegister16+0x48>)
 8008628:	785b      	ldrb	r3, [r3, #1]
 800862a:	73bb      	strb	r3, [r7, #14]

    value = vha << 8 | vla;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	b21a      	sxth	r2, r3
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	b21b      	sxth	r3, r3
 8008636:	4313      	orrs	r3, r2
 8008638:	b21b      	sxth	r3, r3
 800863a:	81bb      	strh	r3, [r7, #12]

    return value;
 800863c:	89bb      	ldrh	r3, [r7, #12]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20000f0c 	.word	0x20000f0c

0800864c <readRegister24>:

// Read 24-bit from register (oops XSB, MSB, LSB)
uint32_t readRegister24(uint8_t reg)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	71fb      	strb	r3, [r7, #7]
    uint32_t value;
    I2C_Write(MS5611_ADDRESS, reg, 1);
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	2201      	movs	r2, #1
 800865a:	4619      	mov	r1, r3
 800865c:	20ee      	movs	r0, #238	; 0xee
 800865e:	f002 fe67 	bl	800b330 <I2C_Write>

    I2C_Read(MS5611_ADDRESS, rawADC, 3);
 8008662:	2203      	movs	r2, #3
 8008664:	490c      	ldr	r1, [pc, #48]	; (8008698 <readRegister24+0x4c>)
 8008666:	20ee      	movs	r0, #238	; 0xee
 8008668:	f002 fea2 	bl	800b3b0 <I2C_Read>

    uint8_t vxa = rawADC[0];
 800866c:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <readRegister24+0x4c>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	73fb      	strb	r3, [r7, #15]
    uint8_t vha = rawADC[1];
 8008672:	4b09      	ldr	r3, [pc, #36]	; (8008698 <readRegister24+0x4c>)
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	73bb      	strb	r3, [r7, #14]
    uint8_t vla = rawADC[2];
 8008678:	4b07      	ldr	r3, [pc, #28]	; (8008698 <readRegister24+0x4c>)
 800867a:	789b      	ldrb	r3, [r3, #2]
 800867c:	737b      	strb	r3, [r7, #13]

    value = ((int32_t)vxa << 16) | ((int32_t)vha << 8) | vla;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	041a      	lsls	r2, r3, #16
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	021b      	lsls	r3, r3, #8
 8008686:	431a      	orrs	r2, r3
 8008688:	7b7b      	ldrb	r3, [r7, #13]
 800868a:	4313      	orrs	r3, r2
 800868c:	60bb      	str	r3, [r7, #8]

    return value;
 800868e:	68bb      	ldr	r3, [r7, #8]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	20000f0c 	.word	0x20000f0c

0800869c <cliBaro>:


void cliBaro(cli_args_t *args)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80086a4:	2300      	movs	r3, #0
 80086a6:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 1 && args->isStr(0, "show")==true)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d14b      	bne.n	8008748 <cliBaro+0xac>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	492b      	ldr	r1, [pc, #172]	; (8008764 <cliBaro+0xc8>)
 80086b6:	2000      	movs	r0, #0
 80086b8:	4798      	blx	r3
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d043      	beq.n	8008748 <cliBaro+0xac>
	{
		uint32_t currentTime;
		uint32_t pre_time;

		pre_time = micros();
 80086c0:	f7f8 ff02 	bl	80014c8 <micros>
 80086c4:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 80086c6:	e03a      	b.n	800873e <cliBaro+0xa2>
		{
			currentTime = micros()-pre_time;
 80086c8:	f7f8 fefe 	bl	80014c8 <micros>
 80086cc:	4602      	mov	r2, r0
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	60fb      	str	r3, [r7, #12]
			if(currentTime >= 4000)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80086da:	d32e      	bcc.n	800873a <cliBaro+0x9e>
			{
				pre_time = micros();
 80086dc:	f7f8 fef4 	bl	80014c8 <micros>
 80086e0:	6138      	str	r0, [r7, #16]
		  	static uint8_t taskOrder = 0;
		  	    switch (taskOrder){ //4~206us
 80086e2:	4b21      	ldr	r3, [pc, #132]	; (8008768 <cliBaro+0xcc>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d00f      	beq.n	800870a <cliBaro+0x6e>
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d018      	beq.n	8008720 <cliBaro+0x84>
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d123      	bne.n	800873a <cliBaro+0x9e>
		  	      case 0: //200us
		  	        taskOrder++;
 80086f2:	4b1d      	ldr	r3, [pc, #116]	; (8008768 <cliBaro+0xcc>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	3301      	adds	r3, #1
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	4b1b      	ldr	r3, [pc, #108]	; (8008768 <cliBaro+0xcc>)
 80086fc:	701a      	strb	r2, [r3, #0]
		  	        if(Baro_update(currentTime)) break;
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f7ff fc06 	bl	8007f10 <Baro_update>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d114      	bne.n	8008734 <cliBaro+0x98>
		  	      case 1:  //80us
		  	      	taskOrder++;
 800870a:	4b17      	ldr	r3, [pc, #92]	; (8008768 <cliBaro+0xcc>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	3301      	adds	r3, #1
 8008710:	b2da      	uxtb	r2, r3
 8008712:	4b15      	ldr	r3, [pc, #84]	; (8008768 <cliBaro+0xcc>)
 8008714:	701a      	strb	r2, [r3, #0]
		  	        if(getEstimatedAltitude() !=0) break;
 8008716:	f7ff fc5b 	bl	8007fd0 <getEstimatedAltitude>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10b      	bne.n	8008738 <cliBaro+0x9c>
		  	      case 2:  //40~50us
		  	        taskOrder = 0;
 8008720:	4b11      	ldr	r3, [pc, #68]	; (8008768 <cliBaro+0xcc>)
 8008722:	2200      	movs	r2, #0
 8008724:	701a      	strb	r2, [r3, #0]
		  	        cliPrintf("Baro : %d cm\r\n", ms5611.rawTemp);
 8008726:	4b11      	ldr	r3, [pc, #68]	; (800876c <cliBaro+0xd0>)
 8008728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800872a:	4619      	mov	r1, r3
 800872c:	4810      	ldr	r0, [pc, #64]	; (8008770 <cliBaro+0xd4>)
 800872e:	f002 fa91 	bl	800ac54 <cliPrintf>
 8008732:	e002      	b.n	800873a <cliBaro+0x9e>
		  	        if(Baro_update(currentTime)) break;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <cliBaro+0x9e>
		  	        if(getEstimatedAltitude() !=0) break;
 8008738:	bf00      	nop
		  	    }
			}
			ret = true;
 800873a:	2301      	movs	r3, #1
 800873c:	75fb      	strb	r3, [r7, #23]
		while(cliKeepLoop())
 800873e:	f002 fb7d 	bl	800ae3c <cliKeepLoop>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1bf      	bne.n	80086c8 <cliBaro+0x2c>
		}
	}
	if(ret !=true)
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	f083 0301 	eor.w	r3, r3, #1
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <cliBaro+0xbe>
	{
		cliPrintf("baro show");
 8008754:	4807      	ldr	r0, [pc, #28]	; (8008774 <cliBaro+0xd8>)
 8008756:	f002 fa7d 	bl	800ac54 <cliPrintf>
	}
}
 800875a:	bf00      	nop
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	08019c3c 	.word	0x08019c3c
 8008768:	20000454 	.word	0x20000454
 800876c:	20000da0 	.word	0x20000da0
 8008770:	08019c44 	.word	0x08019c44
 8008774:	08019c54 	.word	0x08019c54

08008778 <serialize8>:
static void s_struct_partial(uint8_t *cb,uint8_t siz);
static void s_struct(uint8_t *cb,uint8_t siz);


void serialize8(uint8_t a)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	71fb      	strb	r3, [r7, #7]
	SerialSerialize(CURRENTPORT,a);
 8008782:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <serialize8+0x34>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	79fa      	ldrb	r2, [r7, #7]
 8008788:	4611      	mov	r1, r2
 800878a:	4618      	mov	r0, r3
 800878c:	f001 fc80 	bl	800a090 <SerialSerialize>
	currentPortState->checksum ^= (a & 0xFF);
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <serialize8+0x38>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	7819      	ldrb	r1, [r3, #0]
 8008796:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <serialize8+0x38>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	79fa      	ldrb	r2, [r7, #7]
 800879c:	404a      	eors	r2, r1
 800879e:	b2d2      	uxtb	r2, r2
 80087a0:	701a      	strb	r2, [r3, #0]
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20000662 	.word	0x20000662
 80087b0:	20000028 	.word	0x20000028

080087b4 <read8>:
	serialize8((a>>16) & 0xFF);
	serialize8((a>>24) & 0xFF);
}

uint8_t read8(void)
{
 80087b4:	b480      	push	{r7}
 80087b6:	af00      	add	r7, sp, #0
	return currentPortState->inBuf[currentPortState->indRX++] & 0xff;
 80087b8:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <read8+0x24>)
 80087ba:	6819      	ldr	r1, [r3, #0]
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <read8+0x24>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	785a      	ldrb	r2, [r3, #1]
 80087c2:	1c50      	adds	r0, r2, #1
 80087c4:	b2c0      	uxtb	r0, r0
 80087c6:	7058      	strb	r0, [r3, #1]
 80087c8:	4613      	mov	r3, r2
 80087ca:	440b      	add	r3, r1
 80087cc:	789b      	ldrb	r3, [r3, #2]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	20000028 	.word	0x20000028

080087dc <read16>:

uint16_t read16(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
	uint16_t t = read8();
 80087e2:	f7ff ffe7 	bl	80087b4 <read8>
 80087e6:	4603      	mov	r3, r0
 80087e8:	80fb      	strh	r3, [r7, #6]
	t += (uint16_t)read8() << 8;
 80087ea:	f7ff ffe3 	bl	80087b4 <read8>
 80087ee:	4603      	mov	r3, r0
 80087f0:	021b      	lsls	r3, r3, #8
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	88fb      	ldrh	r3, [r7, #6]
 80087f6:	4413      	add	r3, r2
 80087f8:	80fb      	strh	r3, [r7, #6]
	return t;
 80087fa:	88fb      	ldrh	r3, [r7, #6]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <headSerialResponse>:
{
	headSerial(0, s, cmdMSP);
}

void headSerialResponse(uint8_t err, uint8_t s)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	460a      	mov	r2, r1
 800880e:	71fb      	strb	r3, [r7, #7]
 8008810:	4613      	mov	r3, r2
 8008812:	71bb      	strb	r3, [r7, #6]
	serialize8('$');
 8008814:	2024      	movs	r0, #36	; 0x24
 8008816:	f7ff ffaf 	bl	8008778 <serialize8>
	serialize8('M');
 800881a:	204d      	movs	r0, #77	; 0x4d
 800881c:	f7ff ffac 	bl	8008778 <serialize8>
	serialize8(err ? '!' : '>');
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <headSerialResponse+0x26>
 8008826:	2321      	movs	r3, #33	; 0x21
 8008828:	e000      	b.n	800882c <headSerialResponse+0x28>
 800882a:	233e      	movs	r3, #62	; 0x3e
 800882c:	4618      	mov	r0, r3
 800882e:	f7ff ffa3 	bl	8008778 <serialize8>
	currentPortState->checksum = 0;               // start calculating a new checksum
 8008832:	4b09      	ldr	r3, [pc, #36]	; (8008858 <headSerialResponse+0x54>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2200      	movs	r2, #0
 8008838:	701a      	strb	r2, [r3, #0]
	serialize8(s);
 800883a:	79bb      	ldrb	r3, [r7, #6]
 800883c:	4618      	mov	r0, r3
 800883e:	f7ff ff9b 	bl	8008778 <serialize8>
	serialize8(currentPortState->cmdMSP);
 8008842:	4b05      	ldr	r3, [pc, #20]	; (8008858 <headSerialResponse+0x54>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff ff94 	bl	8008778 <serialize8>
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20000028 	.word	0x20000028

0800885c <headSerialReply>:

void headSerialReply(uint8_t s)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	71fb      	strb	r3, [r7, #7]
	headSerialResponse(0, s);
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	4619      	mov	r1, r3
 800886a:	2000      	movs	r0, #0
 800886c:	f7ff ffca 	bl	8008804 <headSerialResponse>
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <tailSerialReply>:
{
	headSerialResponse(1, s);
}

void tailSerialReply(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
	SerialSerialize(CURRENTPORT,currentPortState->checksum);
 800887c:	4b07      	ldr	r3, [pc, #28]	; (800889c <tailSerialReply+0x24>)
 800887e:	781a      	ldrb	r2, [r3, #0]
 8008880:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <tailSerialReply+0x28>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	4619      	mov	r1, r3
 8008888:	4610      	mov	r0, r2
 800888a:	f001 fc01 	bl	800a090 <SerialSerialize>
	UartSendData(CURRENTPORT);
 800888e:	4b03      	ldr	r3, [pc, #12]	; (800889c <tailSerialReply+0x24>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	4618      	mov	r0, r3
 8008894:	f001 fc26 	bl	800a0e4 <UartSendData>
	//serialize8(currentPortState->checksum);
}
 8008898:	bf00      	nop
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20000662 	.word	0x20000662
 80088a0:	20000028 	.word	0x20000028

080088a4 <s_struct_partial>:

void s_struct_partial(uint8_t *cb,uint8_t siz)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
	while(siz--) serialize8(*cb++);
 80088b0:	e006      	b.n	80088c0 <s_struct_partial+0x1c>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	607a      	str	r2, [r7, #4]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff ff5c 	bl	8008778 <serialize8>
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	1e5a      	subs	r2, r3, #1
 80088c4:	70fa      	strb	r2, [r7, #3]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1f3      	bne.n	80088b2 <s_struct_partial+0xe>
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <s_struct>:

void s_struct(uint8_t *cb,uint8_t siz)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
	headSerialReply(siz);
 80088de:	78fb      	ldrb	r3, [r7, #3]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff ffbb 	bl	800885c <headSerialReply>
	s_struct_partial(cb,siz);
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7ff ffda 	bl	80088a4 <s_struct_partial>
	tailSerialReply();
 80088f0:	f7ff ffc2 	bl	8008878 <tailSerialReply>
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <SerialCom>:
///////////////////////////////////////////////////

void SerialCom(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t timeMax; // limit max time in this function in case of GPS
	timeMax = micros();
 8008902:	f7f8 fde1 	bl	80014c8 <micros>
 8008906:	60f8      	str	r0, [r7, #12]
	int i = 1;
 8008908:	2301      	movs	r3, #1
 800890a:	60bb      	str	r3, [r7, #8]
#ifndef _USE_HW_CLI
	for(int i = 0; i < 2; i++)
	{
#endif
		currentPortState = &ports[i];
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2286      	movs	r2, #134	; 0x86
 8008910:	fb02 f303 	mul.w	r3, r2, r3
 8008914:	4a8f      	ldr	r2, [pc, #572]	; (8008b54 <SerialCom+0x258>)
 8008916:	4413      	add	r3, r2
 8008918:	4a8f      	ldr	r2, [pc, #572]	; (8008b58 <SerialCom+0x25c>)
 800891a:	6013      	str	r3, [r2, #0]
		CURRENTPORT = i;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	b2da      	uxtb	r2, r3
 8008920:	4b8e      	ldr	r3, [pc, #568]	; (8008b5c <SerialCom+0x260>)
 8008922:	701a      	strb	r2, [r3, #0]
		while(uartAvailable(CURRENTPORT) > 0)
 8008924:	e108      	b.n	8008b38 <SerialCom+0x23c>
		{
			c = uartRead(CURRENTPORT);
 8008926:	4b8d      	ldr	r3, [pc, #564]	; (8008b5c <SerialCom+0x260>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	4618      	mov	r0, r3
 800892c:	f003 fbc6 	bl	800c0bc <uartRead>
 8008930:	4603      	mov	r3, r0
 8008932:	71fb      	strb	r3, [r7, #7]
			if (currentPortState->c_state == IDLE)
 8008934:	4b88      	ldr	r3, [pc, #544]	; (8008b58 <SerialCom+0x25c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <SerialCom+0x5a>
			{
				currentPortState->c_state = (c=='$') ? HEADER_START : IDLE;
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	2b24      	cmp	r3, #36	; 0x24
 8008944:	bf0c      	ite	eq
 8008946:	2301      	moveq	r3, #1
 8008948:	2300      	movne	r3, #0
 800894a:	b2da      	uxtb	r2, r3
 800894c:	4b82      	ldr	r3, [pc, #520]	; (8008b58 <SerialCom+0x25c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8008954:	e0b0      	b.n	8008ab8 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_START)
 8008956:	4b80      	ldr	r3, [pc, #512]	; (8008b58 <SerialCom+0x25c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800895e:	2b01      	cmp	r3, #1
 8008960:	d10a      	bne.n	8008978 <SerialCom+0x7c>
			{
				currentPortState->c_state = (c=='M') ? HEADER_M : IDLE;
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	2b4d      	cmp	r3, #77	; 0x4d
 8008966:	d101      	bne.n	800896c <SerialCom+0x70>
 8008968:	2202      	movs	r2, #2
 800896a:	e000      	b.n	800896e <SerialCom+0x72>
 800896c:	2200      	movs	r2, #0
 800896e:	4b7a      	ldr	r3, [pc, #488]	; (8008b58 <SerialCom+0x25c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8008976:	e09f      	b.n	8008ab8 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_M)
 8008978:	4b77      	ldr	r3, [pc, #476]	; (8008b58 <SerialCom+0x25c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008980:	2b02      	cmp	r3, #2
 8008982:	d10a      	bne.n	800899a <SerialCom+0x9e>
			{
				currentPortState->c_state = (c=='<') ? HEADER_ARROW : IDLE;
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	2b3c      	cmp	r3, #60	; 0x3c
 8008988:	d101      	bne.n	800898e <SerialCom+0x92>
 800898a:	2203      	movs	r2, #3
 800898c:	e000      	b.n	8008990 <SerialCom+0x94>
 800898e:	2200      	movs	r2, #0
 8008990:	4b71      	ldr	r3, [pc, #452]	; (8008b58 <SerialCom+0x25c>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8008998:	e08e      	b.n	8008ab8 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_ARROW)
 800899a:	4b6f      	ldr	r3, [pc, #444]	; (8008b58 <SerialCom+0x25c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d129      	bne.n	80089fa <SerialCom+0xfe>
			{
				if (c > INBUF_SIZE)
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	2b80      	cmp	r3, #128	; 0x80
 80089aa:	d905      	bls.n	80089b8 <SerialCom+0xbc>
				{  // now we are expecting the payload size
					currentPortState->c_state = IDLE;
 80089ac:	4b6a      	ldr	r3, [pc, #424]	; (8008b58 <SerialCom+0x25c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
					continue;
 80089b6:	e0bf      	b.n	8008b38 <SerialCom+0x23c>
				}
				currentPortState->dataSize = c;
 80089b8:	4b67      	ldr	r3, [pc, #412]	; (8008b58 <SerialCom+0x25c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	79fa      	ldrb	r2, [r7, #7]
 80089be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
				currentPortState->offset = 0;
 80089c2:	4b65      	ldr	r3, [pc, #404]	; (8008b58 <SerialCom+0x25c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				currentPortState->indRX = 0;
 80089cc:	4b62      	ldr	r3, [pc, #392]	; (8008b58 <SerialCom+0x25c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2200      	movs	r2, #0
 80089d2:	705a      	strb	r2, [r3, #1]
				currentPortState->checksum = 0;
 80089d4:	4b60      	ldr	r3, [pc, #384]	; (8008b58 <SerialCom+0x25c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2200      	movs	r2, #0
 80089da:	701a      	strb	r2, [r3, #0]
				currentPortState->checksum ^= c;
 80089dc:	4b5e      	ldr	r3, [pc, #376]	; (8008b58 <SerialCom+0x25c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	7819      	ldrb	r1, [r3, #0]
 80089e2:	4b5d      	ldr	r3, [pc, #372]	; (8008b58 <SerialCom+0x25c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	79fa      	ldrb	r2, [r7, #7]
 80089e8:	404a      	eors	r2, r1
 80089ea:	b2d2      	uxtb	r2, r2
 80089ec:	701a      	strb	r2, [r3, #0]
				currentPortState->c_state = HEADER_SIZE;
 80089ee:	4b5a      	ldr	r3, [pc, #360]	; (8008b58 <SerialCom+0x25c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2204      	movs	r2, #4
 80089f4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 80089f8:	e05e      	b.n	8008ab8 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_SIZE)
 80089fa:	4b57      	ldr	r3, [pc, #348]	; (8008b58 <SerialCom+0x25c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	d113      	bne.n	8008a2e <SerialCom+0x132>
			{
				currentPortState->cmdMSP = c;
 8008a06:	4b54      	ldr	r3, [pc, #336]	; (8008b58 <SerialCom+0x25c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	79fa      	ldrb	r2, [r7, #7]
 8008a0c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				currentPortState->checksum ^= c;
 8008a10:	4b51      	ldr	r3, [pc, #324]	; (8008b58 <SerialCom+0x25c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	7819      	ldrb	r1, [r3, #0]
 8008a16:	4b50      	ldr	r3, [pc, #320]	; (8008b58 <SerialCom+0x25c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	79fa      	ldrb	r2, [r7, #7]
 8008a1c:	404a      	eors	r2, r1
 8008a1e:	b2d2      	uxtb	r2, r2
 8008a20:	701a      	strb	r2, [r3, #0]
				currentPortState->c_state = HEADER_CMD;
 8008a22:	4b4d      	ldr	r3, [pc, #308]	; (8008b58 <SerialCom+0x25c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2205      	movs	r2, #5
 8008a28:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8008a2c:	e044      	b.n	8008ab8 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset < currentPortState->dataSize)
 8008a2e:	4b4a      	ldr	r3, [pc, #296]	; (8008b58 <SerialCom+0x25c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008a36:	2b05      	cmp	r3, #5
 8008a38:	d121      	bne.n	8008a7e <SerialCom+0x182>
 8008a3a:	4b47      	ldr	r3, [pc, #284]	; (8008b58 <SerialCom+0x25c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8008a42:	4b45      	ldr	r3, [pc, #276]	; (8008b58 <SerialCom+0x25c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d217      	bcs.n	8008a7e <SerialCom+0x182>
			{
				currentPortState->checksum ^= c;
 8008a4e:	4b42      	ldr	r3, [pc, #264]	; (8008b58 <SerialCom+0x25c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	7819      	ldrb	r1, [r3, #0]
 8008a54:	4b40      	ldr	r3, [pc, #256]	; (8008b58 <SerialCom+0x25c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	79fa      	ldrb	r2, [r7, #7]
 8008a5a:	404a      	eors	r2, r1
 8008a5c:	b2d2      	uxtb	r2, r2
 8008a5e:	701a      	strb	r2, [r3, #0]
				currentPortState->inBuf[currentPortState->offset++] = c;
 8008a60:	4b3d      	ldr	r3, [pc, #244]	; (8008b58 <SerialCom+0x25c>)
 8008a62:	6819      	ldr	r1, [r3, #0]
 8008a64:	4b3c      	ldr	r3, [pc, #240]	; (8008b58 <SerialCom+0x25c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8008a6c:	1c50      	adds	r0, r2, #1
 8008a6e:	b2c0      	uxtb	r0, r0
 8008a70:	f883 0083 	strb.w	r0, [r3, #131]	; 0x83
 8008a74:	4613      	mov	r3, r2
 8008a76:	440b      	add	r3, r1
 8008a78:	79fa      	ldrb	r2, [r7, #7]
 8008a7a:	709a      	strb	r2, [r3, #2]
 8008a7c:	e01c      	b.n	8008ab8 <SerialCom+0x1bc>
			} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset >= currentPortState->dataSize)
 8008a7e:	4b36      	ldr	r3, [pc, #216]	; (8008b58 <SerialCom+0x25c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8008a86:	2b05      	cmp	r3, #5
 8008a88:	d116      	bne.n	8008ab8 <SerialCom+0x1bc>
 8008a8a:	4b33      	ldr	r3, [pc, #204]	; (8008b58 <SerialCom+0x25c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8008a92:	4b31      	ldr	r3, [pc, #196]	; (8008b58 <SerialCom+0x25c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d30c      	bcc.n	8008ab8 <SerialCom+0x1bc>
			{
				if (currentPortState->checksum == c)
 8008a9e:	4b2e      	ldr	r3, [pc, #184]	; (8008b58 <SerialCom+0x25c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	79fa      	ldrb	r2, [r7, #7]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d101      	bne.n	8008aae <SerialCom+0x1b2>
				{
					evaluateCommand();
 8008aaa:	f000 f863 	bl	8008b74 <evaluateCommand>
				}
				currentPortState->c_state = IDLE;
 8008aae:	4b2a      	ldr	r3, [pc, #168]	; (8008b58 <SerialCom+0x25c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
			}
#ifdef GPS_Recive
			if(i == _DEF_UART1||GPS_virtual)
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <SerialCom+0x1ca>
 8008abe:	4b28      	ldr	r3, [pc, #160]	; (8008b60 <SerialCom+0x264>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d031      	beq.n	8008b2a <SerialCom+0x22e>
			{
				static uint32_t GPS_last_frame_seen; //Last gps frame seen at this time, used to detect stalled gps communication
				if (GPS_newFrame(c)||GPS_virtual)
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7f9 fe83 	bl	80027d4 <GPS_newFrame>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d103      	bne.n	8008adc <SerialCom+0x1e0>
 8008ad4:	4b22      	ldr	r3, [pc, #136]	; (8008b60 <SerialCom+0x264>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d014      	beq.n	8008b06 <SerialCom+0x20a>
				{

					//We had a valid GPS data frame, so signal task scheduler to switch to compute
					if (GPS.GPS_update == 1) GPS.GPS_update = 0; else GPS.GPS_update = 1; //Blink GPS update
 8008adc:	4b21      	ldr	r3, [pc, #132]	; (8008b64 <SerialCom+0x268>)
 8008ade:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d104      	bne.n	8008af0 <SerialCom+0x1f4>
 8008ae6:	4b1f      	ldr	r3, [pc, #124]	; (8008b64 <SerialCom+0x268>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8008aee:	e003      	b.n	8008af8 <SerialCom+0x1fc>
 8008af0:	4b1c      	ldr	r3, [pc, #112]	; (8008b64 <SerialCom+0x268>)
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
					GPS_last_frame_seen = timeMax;
 8008af8:	4a1b      	ldr	r2, [pc, #108]	; (8008b68 <SerialCom+0x26c>)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6013      	str	r3, [r2, #0]
					GPS.GPS_Frame = 1;
 8008afe:	4b19      	ldr	r3, [pc, #100]	; (8008b64 <SerialCom+0x268>)
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
				}
				// Check for stalled GPS, if no frames seen for 1.2sec then consider it LOST
				if ((timeMax - GPS_last_frame_seen) > 1200000)
 8008b06:	4b18      	ldr	r3, [pc, #96]	; (8008b68 <SerialCom+0x26c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	4a17      	ldr	r2, [pc, #92]	; (8008b6c <SerialCom+0x270>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d90a      	bls.n	8008b2a <SerialCom+0x22e>
				{
					//No update since 1200ms clear fix...
					f.GPS_FIX = 0;
 8008b14:	4b16      	ldr	r3, [pc, #88]	; (8008b70 <SerialCom+0x274>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	741a      	strb	r2, [r3, #16]
					GPS.fixquality = 0;
 8008b1a:	4b12      	ldr	r3, [pc, #72]	; (8008b64 <SerialCom+0x268>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
					GPS.satellites = 0;
 8008b22:	4b10      	ldr	r3, [pc, #64]	; (8008b64 <SerialCom+0x268>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
				}
			}
			if (micros()-timeMax>250) return;  // Limit the maximum execution time of serial decoding to avoid time spike
 8008b2a:	f7f8 fccd 	bl	80014c8 <micros>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	2bfa      	cmp	r3, #250	; 0xfa
 8008b36:	d809      	bhi.n	8008b4c <SerialCom+0x250>
		while(uartAvailable(CURRENTPORT) > 0)
 8008b38:	4b08      	ldr	r3, [pc, #32]	; (8008b5c <SerialCom+0x260>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f003 fa59 	bl	800bff4 <uartAvailable>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f47f aeee 	bne.w	8008926 <SerialCom+0x2a>
 8008b4a:	e000      	b.n	8008b4e <SerialCom+0x252>
			if (micros()-timeMax>250) return;  // Limit the maximum execution time of serial decoding to avoid time spike
 8008b4c:	bf00      	nop
#endif
		}
#ifndef _USE_HW_CLI
	}
#endif
}
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	2000067c 	.word	0x2000067c
 8008b58:	20000028 	.word	0x20000028
 8008b5c:	20000662 	.word	0x20000662
 8008b60:	20000678 	.word	0x20000678
 8008b64:	20000b78 	.word	0x20000b78
 8008b68:	20000788 	.word	0x20000788
 8008b6c:	00124f80 	.word	0x00124f80
 8008b70:	20000ed4 	.word	0x20000ed4

08008b74 <evaluateCommand>:

void evaluateCommand(void)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b0ab      	sub	sp, #172	; 0xac
 8008b78:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	uint32_t tmp=0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	switch(currentPortState->cmdMSP)
 8008b86:	4be5      	ldr	r3, [pc, #916]	; (8008f1c <evaluateCommand+0x3a8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008b8e:	3b38      	subs	r3, #56	; 0x38
 8008b90:	2b9e      	cmp	r3, #158	; 0x9e
 8008b92:	f201 826e 	bhi.w	800a072 <evaluateCommand+0x14fe>
 8008b96:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <evaluateCommand+0x28>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08009e79 	.word	0x08009e79
 8008ba0:	0800a073 	.word	0x0800a073
 8008ba4:	0800a073 	.word	0x0800a073
 8008ba8:	0800a073 	.word	0x0800a073
 8008bac:	0800a073 	.word	0x0800a073
 8008bb0:	0800a073 	.word	0x0800a073
 8008bb4:	0800a073 	.word	0x0800a073
 8008bb8:	0800a073 	.word	0x0800a073
 8008bbc:	0800a073 	.word	0x0800a073
 8008bc0:	0800a073 	.word	0x0800a073
 8008bc4:	0800a073 	.word	0x0800a073
 8008bc8:	0800a073 	.word	0x0800a073
 8008bcc:	0800a073 	.word	0x0800a073
 8008bd0:	0800a073 	.word	0x0800a073
 8008bd4:	0800a073 	.word	0x0800a073
 8008bd8:	0800a073 	.word	0x0800a073
 8008bdc:	0800a073 	.word	0x0800a073
 8008be0:	0800a073 	.word	0x0800a073
 8008be4:	0800a073 	.word	0x0800a073
 8008be8:	0800a073 	.word	0x0800a073
 8008bec:	0800a073 	.word	0x0800a073
 8008bf0:	0800a073 	.word	0x0800a073
 8008bf4:	0800a073 	.word	0x0800a073
 8008bf8:	0800a073 	.word	0x0800a073
 8008bfc:	0800a073 	.word	0x0800a073
 8008c00:	0800a073 	.word	0x0800a073
 8008c04:	0800a073 	.word	0x0800a073
 8008c08:	0800a073 	.word	0x0800a073
 8008c0c:	0800a073 	.word	0x0800a073
 8008c10:	0800a073 	.word	0x0800a073
 8008c14:	0800a073 	.word	0x0800a073
 8008c18:	0800a073 	.word	0x0800a073
 8008c1c:	0800a073 	.word	0x0800a073
 8008c20:	0800a073 	.word	0x0800a073
 8008c24:	0800a073 	.word	0x0800a073
 8008c28:	0800a073 	.word	0x0800a073
 8008c2c:	0800a073 	.word	0x0800a073
 8008c30:	0800a073 	.word	0x0800a073
 8008c34:	0800a073 	.word	0x0800a073
 8008c38:	0800a073 	.word	0x0800a073
 8008c3c:	0800a073 	.word	0x0800a073
 8008c40:	0800a073 	.word	0x0800a073
 8008c44:	0800a073 	.word	0x0800a073
 8008c48:	0800a073 	.word	0x0800a073
 8008c4c:	0800a073 	.word	0x0800a073
 8008c50:	08008f8b 	.word	0x08008f8b
 8008c54:	080092c7 	.word	0x080092c7
 8008c58:	0800a073 	.word	0x0800a073
 8008c5c:	080093b9 	.word	0x080093b9
 8008c60:	08008f31 	.word	0x08008f31
 8008c64:	08009383 	.word	0x08009383
 8008c68:	0800a073 	.word	0x0800a073
 8008c6c:	08008fe7 	.word	0x08008fe7
 8008c70:	08008ff3 	.word	0x08008ff3
 8008c74:	080097a3 	.word	0x080097a3
 8008c78:	0800a073 	.word	0x0800a073
 8008c7c:	080093d9 	.word	0x080093d9
 8008c80:	0800a073 	.word	0x0800a073
 8008c84:	0800900f 	.word	0x0800900f
 8008c88:	0800a073 	.word	0x0800a073
 8008c8c:	0800a073 	.word	0x0800a073
 8008c90:	0800a073 	.word	0x0800a073
 8008c94:	0800a073 	.word	0x0800a073
 8008c98:	0800a073 	.word	0x0800a073
 8008c9c:	0800a073 	.word	0x0800a073
 8008ca0:	08009c69 	.word	0x08009c69
 8008ca4:	08009c91 	.word	0x08009c91
 8008ca8:	0800a073 	.word	0x0800a073
 8008cac:	0800a073 	.word	0x0800a073
 8008cb0:	0800a073 	.word	0x0800a073
 8008cb4:	0800a073 	.word	0x0800a073
 8008cb8:	0800a073 	.word	0x0800a073
 8008cbc:	0800a073 	.word	0x0800a073
 8008cc0:	0800a073 	.word	0x0800a073
 8008cc4:	0800a073 	.word	0x0800a073
 8008cc8:	0800a073 	.word	0x0800a073
 8008ccc:	0800a073 	.word	0x0800a073
 8008cd0:	0800a073 	.word	0x0800a073
 8008cd4:	0800a073 	.word	0x0800a073
 8008cd8:	0800a073 	.word	0x0800a073
 8008cdc:	0800a073 	.word	0x0800a073
 8008ce0:	0800a073 	.word	0x0800a073
 8008ce4:	0800a073 	.word	0x0800a073
 8008ce8:	0800a073 	.word	0x0800a073
 8008cec:	0800a073 	.word	0x0800a073
 8008cf0:	0800a073 	.word	0x0800a073
 8008cf4:	0800a073 	.word	0x0800a073
 8008cf8:	0800a073 	.word	0x0800a073
 8008cfc:	0800a073 	.word	0x0800a073
 8008d00:	0800a073 	.word	0x0800a073
 8008d04:	0800a073 	.word	0x0800a073
 8008d08:	0800a073 	.word	0x0800a073
 8008d0c:	0800a073 	.word	0x0800a073
 8008d10:	0800a073 	.word	0x0800a073
 8008d14:	08008e29 	.word	0x08008e29
 8008d18:	08008e19 	.word	0x08008e19
 8008d1c:	08008e21 	.word	0x08008e21
 8008d20:	08009e49 	.word	0x08009e49
 8008d24:	08009e55 	.word	0x08009e55
 8008d28:	08009e61 	.word	0x08009e61
 8008d2c:	08009e6d 	.word	0x08009e6d
 8008d30:	0800a073 	.word	0x0800a073
 8008d34:	0800a073 	.word	0x0800a073
 8008d38:	0800a073 	.word	0x0800a073
 8008d3c:	0800a073 	.word	0x0800a073
 8008d40:	0800a073 	.word	0x0800a073
 8008d44:	0800a073 	.word	0x0800a073
 8008d48:	0800a073 	.word	0x0800a073
 8008d4c:	0800a073 	.word	0x0800a073
 8008d50:	0800a073 	.word	0x0800a073
 8008d54:	0800a073 	.word	0x0800a073
 8008d58:	0800a073 	.word	0x0800a073
 8008d5c:	0800a073 	.word	0x0800a073
 8008d60:	0800a073 	.word	0x0800a073
 8008d64:	0800a073 	.word	0x0800a073
 8008d68:	0800a073 	.word	0x0800a073
 8008d6c:	0800a073 	.word	0x0800a073
 8008d70:	0800a073 	.word	0x0800a073
 8008d74:	0800a073 	.word	0x0800a073
 8008d78:	0800a073 	.word	0x0800a073
 8008d7c:	0800a073 	.word	0x0800a073
 8008d80:	0800a073 	.word	0x0800a073
 8008d84:	0800a073 	.word	0x0800a073
 8008d88:	0800a073 	.word	0x0800a073
 8008d8c:	0800a073 	.word	0x0800a073
 8008d90:	0800a073 	.word	0x0800a073
 8008d94:	0800a073 	.word	0x0800a073
 8008d98:	0800a073 	.word	0x0800a073
 8008d9c:	0800a073 	.word	0x0800a073
 8008da0:	0800a073 	.word	0x0800a073
 8008da4:	0800a073 	.word	0x0800a073
 8008da8:	0800a073 	.word	0x0800a073
 8008dac:	0800a073 	.word	0x0800a073
 8008db0:	0800a073 	.word	0x0800a073
 8008db4:	0800a073 	.word	0x0800a073
 8008db8:	0800a073 	.word	0x0800a073
 8008dbc:	0800a073 	.word	0x0800a073
 8008dc0:	0800a073 	.word	0x0800a073
 8008dc4:	0800a073 	.word	0x0800a073
 8008dc8:	0800a073 	.word	0x0800a073
 8008dcc:	0800a073 	.word	0x0800a073
 8008dd0:	0800a073 	.word	0x0800a073
 8008dd4:	0800a073 	.word	0x0800a073
 8008dd8:	0800a073 	.word	0x0800a073
 8008ddc:	0800a073 	.word	0x0800a073
 8008de0:	0800a073 	.word	0x0800a073
 8008de4:	080097d7 	.word	0x080097d7
 8008de8:	0800a073 	.word	0x0800a073
 8008dec:	0800a073 	.word	0x0800a073
 8008df0:	08009e0f 	.word	0x08009e0f
 8008df4:	08009e29 	.word	0x08009e29
 8008df8:	0800a073 	.word	0x0800a073
 8008dfc:	0800a073 	.word	0x0800a073
 8008e00:	0800a073 	.word	0x0800a073
 8008e04:	0800a073 	.word	0x0800a073
 8008e08:	0800a073 	.word	0x0800a073
 8008e0c:	0800a073 	.word	0x0800a073
 8008e10:	0800a073 	.word	0x0800a073
 8008e14:	08009c07 	.word	0x08009c07
	{
		case MSP_ARM:
			mwArm();
 8008e18:	f7fc fe54 	bl	8005ac4 <mwArm>
			break;
 8008e1c:	f001 b92e 	b.w	800a07c <evaluateCommand+0x1508>

		case MSP_DISARM:
			mwDisarm();
 8008e20:	f7fc fe68 	bl	8005af4 <mwDisarm>
			break;
 8008e24:	f001 b92a 	b.w	800a07c <evaluateCommand+0x1508>

		case MSP_RC_RAW:
			for(i=0; i < 5; i++)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8008e2e:	e00f      	b.n	8008e50 <evaluateCommand+0x2dc>
			{
				RC_Raw.rcCommand[i]  = read8();
 8008e30:	f7ff fcc0 	bl	80087b4 <read8>
 8008e34:	4603      	mov	r3, r0
 8008e36:	461a      	mov	r2, r3
 8008e38:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008e3c:	b211      	sxth	r1, r2
 8008e3e:	4a38      	ldr	r2, [pc, #224]	; (8008f20 <evaluateCommand+0x3ac>)
 8008e40:	3328      	adds	r3, #40	; 0x28
 8008e42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i=0; i < 5; i++)
 8008e46:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8008e50:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008e54:	2b04      	cmp	r3, #4
 8008e56:	d9eb      	bls.n	8008e30 <evaluateCommand+0x2bc>
			}
			RC.rcCommand[ROLL]     = map(RC_Raw.rcCommand[ROLL], 0, 250, -20, 20)+ MSP_TRIM[ROLL]; //0~250 left:0, right:250
 8008e58:	4b31      	ldr	r3, [pc, #196]	; (8008f20 <evaluateCommand+0x3ac>)
 8008e5a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8008e5e:	461a      	mov	r2, r3
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	4a2e      	ldr	r2, [pc, #184]	; (8008f24 <evaluateCommand+0x3b0>)
 8008e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8008e6e:	1112      	asrs	r2, r2, #4
 8008e70:	17db      	asrs	r3, r3, #31
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	4b2c      	ldr	r3, [pc, #176]	; (8008f28 <evaluateCommand+0x3b4>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	4413      	add	r3, r2
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	3b14      	subs	r3, #20
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	b21a      	sxth	r2, r3
 8008e86:	4b29      	ldr	r3, [pc, #164]	; (8008f2c <evaluateCommand+0x3b8>)
 8008e88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			RC.rcCommand[PITCH]    = map(RC_Raw.rcCommand[PITCH], 0, 250, -20, 20)+ MSP_TRIM[PITCH]; //0~250 rear:0, fornt:250
 8008e8c:	4b24      	ldr	r3, [pc, #144]	; (8008f20 <evaluateCommand+0x3ac>)
 8008e8e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8008e92:	461a      	mov	r2, r3
 8008e94:	4613      	mov	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	4a21      	ldr	r2, [pc, #132]	; (8008f24 <evaluateCommand+0x3b0>)
 8008e9e:	fb82 1203 	smull	r1, r2, r2, r3
 8008ea2:	1112      	asrs	r2, r2, #4
 8008ea4:	17db      	asrs	r3, r3, #31
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	4b1f      	ldr	r3, [pc, #124]	; (8008f28 <evaluateCommand+0x3b4>)
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	3b14      	subs	r3, #20
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	b21a      	sxth	r2, r3
 8008eba:	4b1c      	ldr	r3, [pc, #112]	; (8008f2c <evaluateCommand+0x3b8>)
 8008ebc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			RC.rcCommand[YAW]      = map(RC_Raw.rcCommand[YAW], 0, 250, -100, 100); //0~250 left:0, right:250
 8008ec0:	4b17      	ldr	r3, [pc, #92]	; (8008f20 <evaluateCommand+0x3ac>)
 8008ec2:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	23c8      	movs	r3, #200	; 0xc8
 8008eca:	fb03 f302 	mul.w	r3, r3, r2
 8008ece:	4a15      	ldr	r2, [pc, #84]	; (8008f24 <evaluateCommand+0x3b0>)
 8008ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8008ed4:	1112      	asrs	r2, r2, #4
 8008ed6:	17db      	asrs	r3, r3, #31
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	3b64      	subs	r3, #100	; 0x64
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	b21a      	sxth	r2, r3
 8008ee2:	4b12      	ldr	r3, [pc, #72]	; (8008f2c <evaluateCommand+0x3b8>)
 8008ee4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			RC.rcCommand[THROTTLE] = map(RC_Raw.rcCommand[THROTTLE], 0, 250, 0, 1800);//0~250
 8008ee8:	4b0d      	ldr	r3, [pc, #52]	; (8008f20 <evaluateCommand+0x3ac>)
 8008eea:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8008ef4:	fb03 f302 	mul.w	r3, r3, r2
 8008ef8:	4a0a      	ldr	r2, [pc, #40]	; (8008f24 <evaluateCommand+0x3b0>)
 8008efa:	fb82 1203 	smull	r1, r2, r2, r3
 8008efe:	1112      	asrs	r2, r2, #4
 8008f00:	17db      	asrs	r3, r3, #31
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	b21a      	sxth	r2, r3
 8008f06:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <evaluateCommand+0x3b8>)
 8008f08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			RC.rcCommand[AUX1] 	   =  RC_Raw.rcCommand[GEAR];
 8008f0c:	4b04      	ldr	r3, [pc, #16]	; (8008f20 <evaluateCommand+0x3ac>)
 8008f0e:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 8008f12:	4b06      	ldr	r3, [pc, #24]	; (8008f2c <evaluateCommand+0x3b8>)
 8008f14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			break;
 8008f18:	f001 b8b0 	b.w	800a07c <evaluateCommand+0x1508>
 8008f1c:	20000028 	.word	0x20000028
 8008f20:	20000cd4 	.word	0x20000cd4
 8008f24:	10624dd3 	.word	0x10624dd3
 8008f28:	20000664 	.word	0x20000664
 8008f2c:	20000d40 	.word	0x20000d40

		case MSP_RC:
		{  struct {
			uint16_t roll, pitch, yaw, throttle, gear, aux1;
		} rc;
		rc.roll     = RC.rcCommand[ROLL];
 8008f30:	4b92      	ldr	r3, [pc, #584]	; (800917c <evaluateCommand+0x608>)
 8008f32:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		rc.pitch    = RC.rcCommand[PITCH];
 8008f3c:	4b8f      	ldr	r3, [pc, #572]	; (800917c <evaluateCommand+0x608>)
 8008f3e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		rc.yaw      = RC.rcCommand[YAW];
 8008f48:	4b8c      	ldr	r3, [pc, #560]	; (800917c <evaluateCommand+0x608>)
 8008f4a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		rc.throttle = RC.rcCommand[THROTTLE];
 8008f54:	4b89      	ldr	r3, [pc, #548]	; (800917c <evaluateCommand+0x608>)
 8008f56:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		rc.aux1     = RC.rcCommand[AUX1];
 8008f60:	4b86      	ldr	r3, [pc, #536]	; (800917c <evaluateCommand+0x608>)
 8008f62:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		rc.gear     = RC.rcCommand[GEAR];
 8008f6c:	4b83      	ldr	r3, [pc, #524]	; (800917c <evaluateCommand+0x608>)
 8008f6e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		s_struct((uint8_t*)&rc, 12);
 8008f78:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008f7c:	210c      	movs	r1, #12
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7ff fca7 	bl	80088d2 <s_struct>
		break;
 8008f84:	bf00      	nop
 8008f86:	f001 b879 	b.w	800a07c <evaluateCommand+0x1508>
		{ struct {
			uint32_t ArmedTime;
			uint32_t cycleTime;
			uint8_t error, flag;
		} st;
		st.ArmedTime    = armedTime;
 8008f8a:	4b7d      	ldr	r3, [pc, #500]	; (8009180 <evaluateCommand+0x60c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		st.cycleTime    = loopTime;
 8008f92:	4b7c      	ldr	r3, [pc, #496]	; (8009184 <evaluateCommand+0x610>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		st.error        = Error.error;
 8008f9a:	4b7b      	ldr	r3, [pc, #492]	; (8009188 <evaluateCommand+0x614>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		if(f.ARMED) tmp |= 1<<BOXARM;
 8008fa2:	4b7a      	ldr	r3, [pc, #488]	; (800918c <evaluateCommand+0x618>)
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d005      	beq.n	8008fb6 <evaluateCommand+0x442>
 8008faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fae:	f043 0301 	orr.w	r3, r3, #1
 8008fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8008fb6:	4b75      	ldr	r3, [pc, #468]	; (800918c <evaluateCommand+0x618>)
 8008fb8:	7b9b      	ldrb	r3, [r3, #14]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d005      	beq.n	8008fca <evaluateCommand+0x456>
 8008fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fc2:	f043 0302 	orr.w	r3, r3, #2
 8008fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		st.flag         = tmp;
 8008fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
		s_struct((uint8_t*)&st,10);
 8008fd4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008fd8:	210a      	movs	r1, #10
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff fc79 	bl	80088d2 <s_struct>
		break;
 8008fe0:	bf00      	nop
 8008fe2:	f001 b84b 	b.w	800a07c <evaluateCommand+0x1508>
		}

		case MSP_ATTITUDE:
			s_struct((uint8_t*)&att,8);
 8008fe6:	2108      	movs	r1, #8
 8008fe8:	4869      	ldr	r0, [pc, #420]	; (8009190 <evaluateCommand+0x61c>)
 8008fea:	f7ff fc72 	bl	80088d2 <s_struct>
			break;
 8008fee:	f001 b845 	b.w	800a07c <evaluateCommand+0x1508>

		case MSP_ALTITUDE:
		{ struct {
			int16_t alt;
		} tmp;
		tmp.alt = (int16_t) alt.EstAlt;
 8008ff2:	4b68      	ldr	r3, [pc, #416]	; (8009194 <evaluateCommand+0x620>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	b21b      	sxth	r3, r3
 8008ff8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		s_struct((uint8_t*)&tmp,2);
 8008ffc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009000:	2102      	movs	r1, #2
 8009002:	4618      	mov	r0, r3
 8009004:	f7ff fc65 	bl	80088d2 <s_struct>
		break;
 8009008:	bf00      	nop
 800900a:	f001 b837 	b.w	800a07c <evaluateCommand+0x1508>
			int16_t e;
			uint16_t f;
			int16_t motor[4];//74
			int16_t debug_t[4];//82
		} tele;
		tele.roll     = RC.rcCommand[ROLL];
 800900e:	4b5b      	ldr	r3, [pc, #364]	; (800917c <evaluateCommand+0x608>)
 8009010:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8009014:	b29b      	uxth	r3, r3
 8009016:	80bb      	strh	r3, [r7, #4]
		tele.pitch    = RC.rcCommand[PITCH];
 8009018:	4b58      	ldr	r3, [pc, #352]	; (800917c <evaluateCommand+0x608>)
 800901a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800901e:	b29b      	uxth	r3, r3
 8009020:	80fb      	strh	r3, [r7, #6]
		tele.yaw      = RC.rcCommand[YAW];
 8009022:	4b56      	ldr	r3, [pc, #344]	; (800917c <evaluateCommand+0x608>)
 8009024:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8009028:	b29b      	uxth	r3, r3
 800902a:	813b      	strh	r3, [r7, #8]
		tele.throttle = RC.rcCommand[THROTTLE];
 800902c:	4b53      	ldr	r3, [pc, #332]	; (800917c <evaluateCommand+0x608>)
 800902e:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8009032:	b29b      	uxth	r3, r3
 8009034:	817b      	strh	r3, [r7, #10]
		tele.aux1     = RC.rcCommand[AUX1];
 8009036:	4b51      	ldr	r3, [pc, #324]	; (800917c <evaluateCommand+0x608>)
 8009038:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 800903c:	b29b      	uxth	r3, r3
 800903e:	81fb      	strh	r3, [r7, #14]
		tele.gear     = RC.rcCommand[GEAR];
 8009040:	4b4e      	ldr	r3, [pc, #312]	; (800917c <evaluateCommand+0x608>)
 8009042:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8009046:	b29b      	uxth	r3, r3
 8009048:	81bb      	strh	r3, [r7, #12]
		tele.ArmedTime    = armedTime;
 800904a:	4b4d      	ldr	r3, [pc, #308]	; (8009180 <evaluateCommand+0x60c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	613b      	str	r3, [r7, #16]
		tele.cycleTime    = loopTime;
 8009050:	4b4c      	ldr	r3, [pc, #304]	; (8009184 <evaluateCommand+0x610>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	617b      	str	r3, [r7, #20]
		tele.error        = Error.error;
 8009056:	4b4c      	ldr	r3, [pc, #304]	; (8009188 <evaluateCommand+0x614>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	763b      	strb	r3, [r7, #24]
		if(f.ARMED) tmp |= 1<<BOXARM;
 800905c:	4b4b      	ldr	r3, [pc, #300]	; (800918c <evaluateCommand+0x618>)
 800905e:	785b      	ldrb	r3, [r3, #1]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d005      	beq.n	8009070 <evaluateCommand+0x4fc>
 8009064:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009068:	f043 0301 	orr.w	r3, r3, #1
 800906c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8009070:	4b46      	ldr	r3, [pc, #280]	; (800918c <evaluateCommand+0x618>)
 8009072:	7b9b      	ldrb	r3, [r3, #14]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d005      	beq.n	8009084 <evaluateCommand+0x510>
 8009078:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800907c:	f043 0302 	orr.w	r3, r3, #2
 8009080:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ACRO_MODE) tmp |= 1<<BOXACRO_MODE;
 8009084:	4b41      	ldr	r3, [pc, #260]	; (800918c <evaluateCommand+0x618>)
 8009086:	79db      	ldrb	r3, [r3, #7]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d005      	beq.n	8009098 <evaluateCommand+0x524>
 800908c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009090:	f043 0304 	orr.w	r3, r3, #4
 8009094:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ANGLE_MODE) tmp |= 1<<BOXANGLE_MODE;
 8009098:	4b3c      	ldr	r3, [pc, #240]	; (800918c <evaluateCommand+0x618>)
 800909a:	795b      	ldrb	r3, [r3, #5]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d005      	beq.n	80090ac <evaluateCommand+0x538>
 80090a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090a4:	f043 0308 	orr.w	r3, r3, #8
 80090a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_ACC) tmp |= 1<<BOXCALIBRATE_ACC;
 80090ac:	4b37      	ldr	r3, [pc, #220]	; (800918c <evaluateCommand+0x618>)
 80090ae:	791b      	ldrb	r3, [r3, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <evaluateCommand+0x54c>
 80090b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090b8:	f043 0310 	orr.w	r3, r3, #16
 80090bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_MAG) tmp |= 1<<BOXCALIBRATE_MAG;
 80090c0:	4b32      	ldr	r3, [pc, #200]	; (800918c <evaluateCommand+0x618>)
 80090c2:	7cdb      	ldrb	r3, [r3, #19]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d005      	beq.n	80090d4 <evaluateCommand+0x560>
 80090c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090cc:	f043 0320 	orr.w	r3, r3, #32
 80090d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.GPS_HOLD_MODE) tmp |= 1<<BOXGPS_MODE;
 80090d4:	4b2d      	ldr	r3, [pc, #180]	; (800918c <evaluateCommand+0x618>)
 80090d6:	7b5b      	ldrb	r3, [r3, #13]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <evaluateCommand+0x574>
 80090dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		tele.flag         = tmp;
 80090e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	767b      	strb	r3, [r7, #25]
		tele.angle[ROLL] = (int16_t) imu.AHRS[ROLL] * 10;
 80090f0:	4b29      	ldr	r3, [pc, #164]	; (8009198 <evaluateCommand+0x624>)
 80090f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7f8 f83a 	bl	8001170 <__aeabi_f2iz>
 80090fc:	4603      	mov	r3, r0
 80090fe:	b21b      	sxth	r3, r3
 8009100:	b29b      	uxth	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	0092      	lsls	r2, r2, #2
 8009106:	4413      	add	r3, r2
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	b29b      	uxth	r3, r3
 800910c:	b21b      	sxth	r3, r3
 800910e:	837b      	strh	r3, [r7, #26]
		tele.angle[PITCH] = (int16_t) imu.AHRS[PITCH] * 10;
 8009110:	4b21      	ldr	r3, [pc, #132]	; (8009198 <evaluateCommand+0x624>)
 8009112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009116:	4618      	mov	r0, r3
 8009118:	f7f8 f82a 	bl	8001170 <__aeabi_f2iz>
 800911c:	4603      	mov	r3, r0
 800911e:	b21b      	sxth	r3, r3
 8009120:	b29b      	uxth	r3, r3
 8009122:	461a      	mov	r2, r3
 8009124:	0092      	lsls	r2, r2, #2
 8009126:	4413      	add	r3, r2
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	b29b      	uxth	r3, r3
 800912c:	b21b      	sxth	r3, r3
 800912e:	83bb      	strh	r3, [r7, #28]
		tele.heading = (int16_t) imu.gyroRaw[YAW];
 8009130:	4b19      	ldr	r3, [pc, #100]	; (8009198 <evaluateCommand+0x624>)
 8009132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009134:	4618      	mov	r0, r3
 8009136:	f7f8 f81b 	bl	8001170 <__aeabi_f2iz>
 800913a:	4603      	mov	r3, r0
 800913c:	b21b      	sxth	r3, r3
 800913e:	83fb      	strh	r3, [r7, #30]
		tele.mag_heading = (int16_t) imu.actual_compass_heading;
 8009140:	4b15      	ldr	r3, [pc, #84]	; (8009198 <evaluateCommand+0x624>)
 8009142:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009146:	b21b      	sxth	r3, r3
 8009148:	843b      	strh	r3, [r7, #32]
		tele.alt = (int16_t) alt.EstAlt;
 800914a:	4b12      	ldr	r3, [pc, #72]	; (8009194 <evaluateCommand+0x620>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	b21b      	sxth	r3, r3
 8009150:	847b      	strh	r3, [r7, #34]	; 0x22
		tele.VBAT = (int16_t) 100;//BAT.VBAT;
 8009152:	2364      	movs	r3, #100	; 0x64
 8009154:	84bb      	strh	r3, [r7, #36]	; 0x24
		tele.Temp = (int16_t) imu.Temp*10;
 8009156:	4b10      	ldr	r3, [pc, #64]	; (8009198 <evaluateCommand+0x624>)
 8009158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800915a:	4618      	mov	r0, r3
 800915c:	f7f8 f808 	bl	8001170 <__aeabi_f2iz>
 8009160:	4603      	mov	r3, r0
 8009162:	b21b      	sxth	r3, r3
 8009164:	b29b      	uxth	r3, r3
 8009166:	461a      	mov	r2, r3
 8009168:	0092      	lsls	r2, r2, #2
 800916a:	4413      	add	r3, r2
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	b29b      	uxth	r3, r3
 8009170:	b21b      	sxth	r3, r3
 8009172:	84fb      	strh	r3, [r7, #38]	; 0x26
		for(uint8_t axis=0; axis<3;axis++)
 8009174:	2300      	movs	r3, #0
 8009176:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800917a:	e055      	b.n	8009228 <evaluateCommand+0x6b4>
 800917c:	20000d40 	.word	0x20000d40
 8009180:	20000268 	.word	0x20000268
 8009184:	20000260 	.word	0x20000260
 8009188:	20000acc 	.word	0x20000acc
 800918c:	20000ed4 	.word	0x20000ed4
 8009190:	20000ef8 	.word	0x20000ef8
 8009194:	20000ef0 	.word	0x20000ef0
 8009198:	20000e20 	.word	0x20000e20
		{
			tele.acc[axis]  = (int16_t) imu.accSmooth[axis];
 800919c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80091a0:	4a88      	ldr	r2, [pc, #544]	; (80093c4 <evaluateCommand+0x850>)
 80091a2:	330a      	adds	r3, #10
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7f7 ffde 	bl	8001170 <__aeabi_f2iz>
 80091b4:	4603      	mov	r3, r0
 80091b6:	b21a      	sxth	r2, r3
 80091b8:	f104 0310 	add.w	r3, r4, #16
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80091c2:	440b      	add	r3, r1
 80091c4:	f823 2ca0 	strh.w	r2, [r3, #-160]
			tele.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 80091c8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80091cc:	4a7d      	ldr	r2, [pc, #500]	; (80093c4 <evaluateCommand+0x850>)
 80091ce:	330e      	adds	r3, #14
 80091d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d4:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 80091d8:	4618      	mov	r0, r3
 80091da:	f7f7 ffc9 	bl	8001170 <__aeabi_f2iz>
 80091de:	4603      	mov	r3, r0
 80091e0:	b21a      	sxth	r2, r3
 80091e2:	f104 0314 	add.w	r3, r4, #20
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80091ec:	440b      	add	r3, r1
 80091ee:	f823 2ca2 	strh.w	r2, [r3, #-162]
			tele.mag[axis]  = (int16_t) imu.magSmooth[axis];
 80091f2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80091f6:	4a73      	ldr	r2, [pc, #460]	; (80093c4 <evaluateCommand+0x850>)
 80091f8:	3310      	adds	r3, #16
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f897 409f 	ldrb.w	r4, [r7, #159]	; 0x9f
 8009204:	4618      	mov	r0, r3
 8009206:	f7f7 ffb3 	bl	8001170 <__aeabi_f2iz>
 800920a:	4603      	mov	r3, r0
 800920c:	b21a      	sxth	r2, r3
 800920e:	f104 0318 	add.w	r3, r4, #24
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8009218:	440b      	add	r3, r1
 800921a:	f823 2ca4 	strh.w	r2, [r3, #-164]
		for(uint8_t axis=0; axis<3;axis++)
 800921e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8009222:	3301      	adds	r3, #1
 8009224:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8009228:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800922c:	2b02      	cmp	r3, #2
 800922e:	d9b5      	bls.n	800919c <evaluateCommand+0x628>
		}
		tele.a     = GPS.fixquality;
 8009230:	4b65      	ldr	r3, [pc, #404]	; (80093c8 <evaluateCommand+0x854>)
 8009232:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009236:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		tele.b     = GPS.satellites;
 800923a:	4b63      	ldr	r3, [pc, #396]	; (80093c8 <evaluateCommand+0x854>)
 800923c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009240:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		tele.c     = GPS_coord[LAT];
 8009244:	4b61      	ldr	r3, [pc, #388]	; (80093cc <evaluateCommand+0x858>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	63fb      	str	r3, [r7, #60]	; 0x3c
		tele.d     = GPS_coord[LON];
 800924a:	4b60      	ldr	r3, [pc, #384]	; (80093cc <evaluateCommand+0x858>)
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	643b      	str	r3, [r7, #64]	; 0x40
		tele.e     = GPS.altitude;
 8009250:	4b5d      	ldr	r3, [pc, #372]	; (80093c8 <evaluateCommand+0x854>)
 8009252:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8009256:	b21b      	sxth	r3, r3
 8009258:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		tele.f     = GPS.speed;
 800925c:	4b5a      	ldr	r3, [pc, #360]	; (80093c8 <evaluateCommand+0x854>)
 800925e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8009262:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		tele.motor[0] = motor[0];
 8009266:	4b5a      	ldr	r3, [pc, #360]	; (80093d0 <evaluateCommand+0x85c>)
 8009268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800926c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		tele.motor[1] = motor[1];
 8009270:	4b57      	ldr	r3, [pc, #348]	; (80093d0 <evaluateCommand+0x85c>)
 8009272:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009276:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		tele.motor[2] = motor[2];
 800927a:	4b55      	ldr	r3, [pc, #340]	; (80093d0 <evaluateCommand+0x85c>)
 800927c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009280:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		tele.motor[3] = motor[3];
 8009284:	4b52      	ldr	r3, [pc, #328]	; (80093d0 <evaluateCommand+0x85c>)
 8009286:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800928a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		tele.debug_t[0] = debug[0];
 800928e:	4b51      	ldr	r3, [pc, #324]	; (80093d4 <evaluateCommand+0x860>)
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	b21b      	sxth	r3, r3
 8009294:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		tele.debug_t[1] = debug[1];
 8009298:	4b4e      	ldr	r3, [pc, #312]	; (80093d4 <evaluateCommand+0x860>)
 800929a:	885b      	ldrh	r3, [r3, #2]
 800929c:	b21b      	sxth	r3, r3
 800929e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		tele.debug_t[2] = debug[2];
 80092a2:	4b4c      	ldr	r3, [pc, #304]	; (80093d4 <evaluateCommand+0x860>)
 80092a4:	889b      	ldrh	r3, [r3, #4]
 80092a6:	b21b      	sxth	r3, r3
 80092a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		tele.debug_t[3] = debug[3];
 80092ac:	4b49      	ldr	r3, [pc, #292]	; (80093d4 <evaluateCommand+0x860>)
 80092ae:	88db      	ldrh	r3, [r3, #6]
 80092b0:	b21b      	sxth	r3, r3
 80092b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		s_struct((uint8_t*)&tele, 86);
 80092b6:	1d3b      	adds	r3, r7, #4
 80092b8:	2156      	movs	r1, #86	; 0x56
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff fb09 	bl	80088d2 <s_struct>
		break;
 80092c0:	bf00      	nop
 80092c2:	f000 bedb 	b.w	800a07c <evaluateCommand+0x1508>
		{ struct {
			int16_t acc[3];
			int16_t gyro[3];
			int16_t mag[3];
		} mpu;
		for(uint8_t axis=0; axis<3;axis++)
 80092c6:	2300      	movs	r3, #0
 80092c8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80092cc:	e04c      	b.n	8009368 <evaluateCommand+0x7f4>
		{
			mpu.acc[axis]  = (int16_t) map(imu.accADC[axis], -32768, 32768, -1000, 1000);
 80092ce:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80092d2:	4a3c      	ldr	r2, [pc, #240]	; (80093c4 <evaluateCommand+0x850>)
 80092d4:	3308      	adds	r3, #8
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	4413      	add	r3, r2
 80092da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80092de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80092e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80092e6:	fb02 f303 	mul.w	r3, r2, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	da02      	bge.n	80092f4 <evaluateCommand+0x780>
 80092ee:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80092f2:	33ff      	adds	r3, #255	; 0xff
 80092f4:	141b      	asrs	r3, r3, #16
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8009302:	b212      	sxth	r2, r2
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800930a:	440b      	add	r3, r1
 800930c:	f823 2c40 	strh.w	r2, [r3, #-64]
			mpu.gyro[axis] = (int16_t) imu.gyroRaw[axis];
 8009310:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8009314:	4a2b      	ldr	r2, [pc, #172]	; (80093c4 <evaluateCommand+0x850>)
 8009316:	330e      	adds	r3, #14
 8009318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800931c:	f897 409e 	ldrb.w	r4, [r7, #158]	; 0x9e
 8009320:	4618      	mov	r0, r3
 8009322:	f7f7 ff25 	bl	8001170 <__aeabi_f2iz>
 8009326:	4603      	mov	r3, r0
 8009328:	b21a      	sxth	r2, r3
 800932a:	0063      	lsls	r3, r4, #1
 800932c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8009330:	440b      	add	r3, r1
 8009332:	f823 2c3a 	strh.w	r2, [r3, #-58]
			mpu.mag[axis]  = (int16_t) imu.magRaw[axis];
 8009336:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800933a:	4a22      	ldr	r2, [pc, #136]	; (80093c4 <evaluateCommand+0x850>)
 800933c:	3314      	adds	r3, #20
 800933e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009342:	f897 409e 	ldrb.w	r4, [r7, #158]	; 0x9e
 8009346:	4618      	mov	r0, r3
 8009348:	f7f7 ff12 	bl	8001170 <__aeabi_f2iz>
 800934c:	4603      	mov	r3, r0
 800934e:	b21a      	sxth	r2, r3
 8009350:	1d23      	adds	r3, r4, #4
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8009358:	440b      	add	r3, r1
 800935a:	f823 2c3c 	strh.w	r2, [r3, #-60]
		for(uint8_t axis=0; axis<3;axis++)
 800935e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8009362:	3301      	adds	r3, #1
 8009364:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8009368:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800936c:	2b02      	cmp	r3, #2
 800936e:	d9ae      	bls.n	80092ce <evaluateCommand+0x75a>
		}
		s_struct((uint8_t*)&mpu,18);
 8009370:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009374:	2112      	movs	r1, #18
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff faab 	bl	80088d2 <s_struct>
		break;
 800937c:	bf00      	nop
 800937e:	f000 be7d 	b.w	800a07c <evaluateCommand+0x1508>
			uint8_t a,b;
			int32_t c,d;
			//	        int16_t e;
			//	        uint16_t f,g;
		} msp_raw_gps;
		msp_raw_gps.a     = GPS.fixquality;
 8009382:	4b11      	ldr	r3, [pc, #68]	; (80093c8 <evaluateCommand+0x854>)
 8009384:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009388:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		msp_raw_gps.b     = GPS.satellites;
 800938c:	4b0e      	ldr	r3, [pc, #56]	; (80093c8 <evaluateCommand+0x854>)
 800938e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009392:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		msp_raw_gps.c     = GPS.GPS_coord[LAT];
 8009396:	4b0c      	ldr	r3, [pc, #48]	; (80093c8 <evaluateCommand+0x854>)
 8009398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800939c:	663b      	str	r3, [r7, #96]	; 0x60
		msp_raw_gps.d     = GPS.GPS_coord[LON];
 800939e:	4b0a      	ldr	r3, [pc, #40]	; (80093c8 <evaluateCommand+0x854>)
 80093a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093a4:	667b      	str	r3, [r7, #100]	; 0x64
		//msp_raw_gps.e     = GPS_altitude;
		//msp_raw_gps.f     = GPS_speed;
		//msp_raw_gps.g     = GPS_ground_course;
		s_struct((uint8_t*)&msp_raw_gps,10);
 80093a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80093aa:	210a      	movs	r1, #10
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff fa90 	bl	80088d2 <s_struct>
		break;
 80093b2:	bf00      	nop
 80093b4:	f000 be62 	b.w	800a07c <evaluateCommand+0x1508>
		}

		case MSP_MOTOR:
			s_struct((uint8_t*)&motor,8);
 80093b8:	2108      	movs	r1, #8
 80093ba:	4805      	ldr	r0, [pc, #20]	; (80093d0 <evaluateCommand+0x85c>)
 80093bc:	f7ff fa89 	bl	80088d2 <s_struct>
			break;
 80093c0:	f000 be5c 	b.w	800a07c <evaluateCommand+0x1508>
 80093c4:	20000e20 	.word	0x20000e20
 80093c8:	20000b78 	.word	0x20000b78
 80093cc:	20000c5c 	.word	0x20000c5c
 80093d0:	20000cc8 	.word	0x20000cc8
 80093d4:	20000670 	.word	0x20000670
			uint16_t inner_YAW[3];
			uint16_t YAW_rate[3];
		} pid_t;


		pid_t.GPS_P[0]  = (int16_t) (posholdPID_PARAM.kP  * 100);
 80093d8:	4b9a      	ldr	r3, [pc, #616]	; (8009644 <evaluateCommand+0xad0>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	499a      	ldr	r1, [pc, #616]	; (8009648 <evaluateCommand+0xad4>)
 80093de:	4618      	mov	r0, r3
 80093e0:	f7f7 fcea 	bl	8000db8 <__aeabi_fmul>
 80093e4:	4603      	mov	r3, r0
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7f7 fec2 	bl	8001170 <__aeabi_f2iz>
 80093ec:	4603      	mov	r3, r0
 80093ee:	b21b      	sxth	r3, r3
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	80bb      	strh	r3, [r7, #4]
		pid_t.GPS_P[1]  = (int16_t) (poshold_ratePID_PARAM.kP  * 100);
 80093f4:	4b95      	ldr	r3, [pc, #596]	; (800964c <evaluateCommand+0xad8>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4993      	ldr	r1, [pc, #588]	; (8009648 <evaluateCommand+0xad4>)
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7f7 fcdc 	bl	8000db8 <__aeabi_fmul>
 8009400:	4603      	mov	r3, r0
 8009402:	4618      	mov	r0, r3
 8009404:	f7f7 feb4 	bl	8001170 <__aeabi_f2iz>
 8009408:	4603      	mov	r3, r0
 800940a:	b21b      	sxth	r3, r3
 800940c:	b29b      	uxth	r3, r3
 800940e:	80fb      	strh	r3, [r7, #6]
		pid_t.GPS_P[2]  = (int16_t) (navPID_PARAM.kP  * 100);
 8009410:	4b8f      	ldr	r3, [pc, #572]	; (8009650 <evaluateCommand+0xadc>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	498c      	ldr	r1, [pc, #560]	; (8009648 <evaluateCommand+0xad4>)
 8009416:	4618      	mov	r0, r3
 8009418:	f7f7 fcce 	bl	8000db8 <__aeabi_fmul>
 800941c:	4603      	mov	r3, r0
 800941e:	4618      	mov	r0, r3
 8009420:	f7f7 fea6 	bl	8001170 <__aeabi_f2iz>
 8009424:	4603      	mov	r3, r0
 8009426:	b21b      	sxth	r3, r3
 8009428:	b29b      	uxth	r3, r3
 800942a:	813b      	strh	r3, [r7, #8]
		pid_t.GPS_I[0]  = (int16_t) (posholdPID_PARAM.kI * 100);
 800942c:	4b85      	ldr	r3, [pc, #532]	; (8009644 <evaluateCommand+0xad0>)
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	4985      	ldr	r1, [pc, #532]	; (8009648 <evaluateCommand+0xad4>)
 8009432:	4618      	mov	r0, r3
 8009434:	f7f7 fcc0 	bl	8000db8 <__aeabi_fmul>
 8009438:	4603      	mov	r3, r0
 800943a:	4618      	mov	r0, r3
 800943c:	f7f7 fe98 	bl	8001170 <__aeabi_f2iz>
 8009440:	4603      	mov	r3, r0
 8009442:	b21b      	sxth	r3, r3
 8009444:	b29b      	uxth	r3, r3
 8009446:	837b      	strh	r3, [r7, #26]
		pid_t.GPS_I[1]  = (int16_t) (poshold_ratePID_PARAM.kI * 100);
 8009448:	4b80      	ldr	r3, [pc, #512]	; (800964c <evaluateCommand+0xad8>)
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	497e      	ldr	r1, [pc, #504]	; (8009648 <evaluateCommand+0xad4>)
 800944e:	4618      	mov	r0, r3
 8009450:	f7f7 fcb2 	bl	8000db8 <__aeabi_fmul>
 8009454:	4603      	mov	r3, r0
 8009456:	4618      	mov	r0, r3
 8009458:	f7f7 fe8a 	bl	8001170 <__aeabi_f2iz>
 800945c:	4603      	mov	r3, r0
 800945e:	b21b      	sxth	r3, r3
 8009460:	b29b      	uxth	r3, r3
 8009462:	83bb      	strh	r3, [r7, #28]
		pid_t.GPS_I[2]  = (int16_t) (navPID_PARAM.kI * 100);
 8009464:	4b7a      	ldr	r3, [pc, #488]	; (8009650 <evaluateCommand+0xadc>)
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	4977      	ldr	r1, [pc, #476]	; (8009648 <evaluateCommand+0xad4>)
 800946a:	4618      	mov	r0, r3
 800946c:	f7f7 fca4 	bl	8000db8 <__aeabi_fmul>
 8009470:	4603      	mov	r3, r0
 8009472:	4618      	mov	r0, r3
 8009474:	f7f7 fe7c 	bl	8001170 <__aeabi_f2iz>
 8009478:	4603      	mov	r3, r0
 800947a:	b21b      	sxth	r3, r3
 800947c:	b29b      	uxth	r3, r3
 800947e:	83fb      	strh	r3, [r7, #30]
		pid_t.GPS_D[0]  = (int16_t) (poshold_ratePID_PARAM.kD  * 1000);
 8009480:	4b72      	ldr	r3, [pc, #456]	; (800964c <evaluateCommand+0xad8>)
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	4973      	ldr	r1, [pc, #460]	; (8009654 <evaluateCommand+0xae0>)
 8009486:	4618      	mov	r0, r3
 8009488:	f7f7 fc96 	bl	8000db8 <__aeabi_fmul>
 800948c:	4603      	mov	r3, r0
 800948e:	4618      	mov	r0, r3
 8009490:	f7f7 fe6e 	bl	8001170 <__aeabi_f2iz>
 8009494:	4603      	mov	r3, r0
 8009496:	b21b      	sxth	r3, r3
 8009498:	b29b      	uxth	r3, r3
 800949a:	863b      	strh	r3, [r7, #48]	; 0x30
		pid_t.GPS_D[1]  = (int16_t) (navPID_PARAM.kD   * 1000);
 800949c:	4b6c      	ldr	r3, [pc, #432]	; (8009650 <evaluateCommand+0xadc>)
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	496c      	ldr	r1, [pc, #432]	; (8009654 <evaluateCommand+0xae0>)
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7f7 fc88 	bl	8000db8 <__aeabi_fmul>
 80094a8:	4603      	mov	r3, r0
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7f7 fe60 	bl	8001170 <__aeabi_f2iz>
 80094b0:	4603      	mov	r3, r0
 80094b2:	b21b      	sxth	r3, r3
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	867b      	strh	r3, [r7, #50]	; 0x32
		pid_t.GPS_D[2]  = (int16_t) (posholdPID_PARAM.Imax);
 80094b8:	4b62      	ldr	r3, [pc, #392]	; (8009644 <evaluateCommand+0xad0>)
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	4618      	mov	r0, r3
 80094be:	f7f7 fe57 	bl	8001170 <__aeabi_f2iz>
 80094c2:	4603      	mov	r3, r0
 80094c4:	b21b      	sxth	r3, r3
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	86bb      	strh	r3, [r7, #52]	; 0x34

		pid_t.outer_ROLL[0] = (int16_t) (pid.kp1[ROLL] * 10);
 80094ca:	4b63      	ldr	r3, [pc, #396]	; (8009658 <evaluateCommand+0xae4>)
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	4963      	ldr	r1, [pc, #396]	; (800965c <evaluateCommand+0xae8>)
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7f7 fc71 	bl	8000db8 <__aeabi_fmul>
 80094d6:	4603      	mov	r3, r0
 80094d8:	4618      	mov	r0, r3
 80094da:	f7f7 fe49 	bl	8001170 <__aeabi_f2iz>
 80094de:	4603      	mov	r3, r0
 80094e0:	b21b      	sxth	r3, r3
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	817b      	strh	r3, [r7, #10]
		pid_t.outer_ROLL[1] = (int16_t) (pid.ki1[ROLL] * 10);
 80094e6:	4b5c      	ldr	r3, [pc, #368]	; (8009658 <evaluateCommand+0xae4>)
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	495c      	ldr	r1, [pc, #368]	; (800965c <evaluateCommand+0xae8>)
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7f7 fc63 	bl	8000db8 <__aeabi_fmul>
 80094f2:	4603      	mov	r3, r0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7f7 fe3b 	bl	8001170 <__aeabi_f2iz>
 80094fa:	4603      	mov	r3, r0
 80094fc:	b21b      	sxth	r3, r3
 80094fe:	b29b      	uxth	r3, r3
 8009500:	81bb      	strh	r3, [r7, #12]
		pid_t.outer_PITCH[0] = (int16_t) (pid.kp1[PITCH] * 10);
 8009502:	4b55      	ldr	r3, [pc, #340]	; (8009658 <evaluateCommand+0xae4>)
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	4955      	ldr	r1, [pc, #340]	; (800965c <evaluateCommand+0xae8>)
 8009508:	4618      	mov	r0, r3
 800950a:	f7f7 fc55 	bl	8000db8 <__aeabi_fmul>
 800950e:	4603      	mov	r3, r0
 8009510:	4618      	mov	r0, r3
 8009512:	f7f7 fe2d 	bl	8001170 <__aeabi_f2iz>
 8009516:	4603      	mov	r3, r0
 8009518:	b21b      	sxth	r3, r3
 800951a:	b29b      	uxth	r3, r3
 800951c:	843b      	strh	r3, [r7, #32]
		pid_t.outer_PITCH[1] = (int16_t) (pid.ki1[PITCH] * 10);
 800951e:	4b4e      	ldr	r3, [pc, #312]	; (8009658 <evaluateCommand+0xae4>)
 8009520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009522:	494e      	ldr	r1, [pc, #312]	; (800965c <evaluateCommand+0xae8>)
 8009524:	4618      	mov	r0, r3
 8009526:	f7f7 fc47 	bl	8000db8 <__aeabi_fmul>
 800952a:	4603      	mov	r3, r0
 800952c:	4618      	mov	r0, r3
 800952e:	f7f7 fe1f 	bl	8001170 <__aeabi_f2iz>
 8009532:	4603      	mov	r3, r0
 8009534:	b21b      	sxth	r3, r3
 8009536:	b29b      	uxth	r3, r3
 8009538:	847b      	strh	r3, [r7, #34]	; 0x22
		pid_t.outer_YAW[0] = (int16_t) (pid.kp1[YAW] * 10);
 800953a:	4b47      	ldr	r3, [pc, #284]	; (8009658 <evaluateCommand+0xae4>)
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	4947      	ldr	r1, [pc, #284]	; (800965c <evaluateCommand+0xae8>)
 8009540:	4618      	mov	r0, r3
 8009542:	f7f7 fc39 	bl	8000db8 <__aeabi_fmul>
 8009546:	4603      	mov	r3, r0
 8009548:	4618      	mov	r0, r3
 800954a:	f7f7 fe11 	bl	8001170 <__aeabi_f2iz>
 800954e:	4603      	mov	r3, r0
 8009550:	b21b      	sxth	r3, r3
 8009552:	b29b      	uxth	r3, r3
 8009554:	86fb      	strh	r3, [r7, #54]	; 0x36
		pid_t.outer_YAW[1] = (int16_t) (pid.ki1[YAW] * 10);
 8009556:	4b40      	ldr	r3, [pc, #256]	; (8009658 <evaluateCommand+0xae4>)
 8009558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800955a:	4940      	ldr	r1, [pc, #256]	; (800965c <evaluateCommand+0xae8>)
 800955c:	4618      	mov	r0, r3
 800955e:	f7f7 fc2b 	bl	8000db8 <__aeabi_fmul>
 8009562:	4603      	mov	r3, r0
 8009564:	4618      	mov	r0, r3
 8009566:	f7f7 fe03 	bl	8001170 <__aeabi_f2iz>
 800956a:	4603      	mov	r3, r0
 800956c:	b21b      	sxth	r3, r3
 800956e:	b29b      	uxth	r3, r3
 8009570:	873b      	strh	r3, [r7, #56]	; 0x38

		pid_t.inner_ROLL[0] = (int16_t) (pid.kp2[ROLL] * 10);
 8009572:	4b39      	ldr	r3, [pc, #228]	; (8009658 <evaluateCommand+0xae4>)
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	4939      	ldr	r1, [pc, #228]	; (800965c <evaluateCommand+0xae8>)
 8009578:	4618      	mov	r0, r3
 800957a:	f7f7 fc1d 	bl	8000db8 <__aeabi_fmul>
 800957e:	4603      	mov	r3, r0
 8009580:	4618      	mov	r0, r3
 8009582:	f7f7 fdf5 	bl	8001170 <__aeabi_f2iz>
 8009586:	4603      	mov	r3, r0
 8009588:	b21b      	sxth	r3, r3
 800958a:	b29b      	uxth	r3, r3
 800958c:	81fb      	strh	r3, [r7, #14]
		pid_t.inner_ROLL[1] = (int16_t) (pid.ki2[ROLL] * 10);
 800958e:	4b32      	ldr	r3, [pc, #200]	; (8009658 <evaluateCommand+0xae4>)
 8009590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009592:	4932      	ldr	r1, [pc, #200]	; (800965c <evaluateCommand+0xae8>)
 8009594:	4618      	mov	r0, r3
 8009596:	f7f7 fc0f 	bl	8000db8 <__aeabi_fmul>
 800959a:	4603      	mov	r3, r0
 800959c:	4618      	mov	r0, r3
 800959e:	f7f7 fde7 	bl	8001170 <__aeabi_f2iz>
 80095a2:	4603      	mov	r3, r0
 80095a4:	b21b      	sxth	r3, r3
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	823b      	strh	r3, [r7, #16]
		pid_t.inner_ROLL[2] = (int16_t) (pid.kd2[ROLL] * 100);
 80095aa:	4b2b      	ldr	r3, [pc, #172]	; (8009658 <evaluateCommand+0xae4>)
 80095ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ae:	4926      	ldr	r1, [pc, #152]	; (8009648 <evaluateCommand+0xad4>)
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7f7 fc01 	bl	8000db8 <__aeabi_fmul>
 80095b6:	4603      	mov	r3, r0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7f7 fdd9 	bl	8001170 <__aeabi_f2iz>
 80095be:	4603      	mov	r3, r0
 80095c0:	b21b      	sxth	r3, r3
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	827b      	strh	r3, [r7, #18]
		pid_t.inner_PITCH[0] = (int16_t) (pid.kp2[PITCH] * 10);
 80095c6:	4b24      	ldr	r3, [pc, #144]	; (8009658 <evaluateCommand+0xae4>)
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	4924      	ldr	r1, [pc, #144]	; (800965c <evaluateCommand+0xae8>)
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7f7 fbf3 	bl	8000db8 <__aeabi_fmul>
 80095d2:	4603      	mov	r3, r0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7f7 fdcb 	bl	8001170 <__aeabi_f2iz>
 80095da:	4603      	mov	r3, r0
 80095dc:	b21b      	sxth	r3, r3
 80095de:	b29b      	uxth	r3, r3
 80095e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		pid_t.inner_PITCH[1] = (int16_t) (pid.ki2[PITCH] * 10);
 80095e2:	4b1d      	ldr	r3, [pc, #116]	; (8009658 <evaluateCommand+0xae4>)
 80095e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e6:	491d      	ldr	r1, [pc, #116]	; (800965c <evaluateCommand+0xae8>)
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7f7 fbe5 	bl	8000db8 <__aeabi_fmul>
 80095ee:	4603      	mov	r3, r0
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7f7 fdbd 	bl	8001170 <__aeabi_f2iz>
 80095f6:	4603      	mov	r3, r0
 80095f8:	b21b      	sxth	r3, r3
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	84fb      	strh	r3, [r7, #38]	; 0x26
		pid_t.inner_PITCH[2] = (int16_t) (pid.kd2[PITCH] * 100);
 80095fe:	4b16      	ldr	r3, [pc, #88]	; (8009658 <evaluateCommand+0xae4>)
 8009600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009602:	4911      	ldr	r1, [pc, #68]	; (8009648 <evaluateCommand+0xad4>)
 8009604:	4618      	mov	r0, r3
 8009606:	f7f7 fbd7 	bl	8000db8 <__aeabi_fmul>
 800960a:	4603      	mov	r3, r0
 800960c:	4618      	mov	r0, r3
 800960e:	f7f7 fdaf 	bl	8001170 <__aeabi_f2iz>
 8009612:	4603      	mov	r3, r0
 8009614:	b21b      	sxth	r3, r3
 8009616:	b29b      	uxth	r3, r3
 8009618:	853b      	strh	r3, [r7, #40]	; 0x28
		pid_t.inner_YAW[0] = (int16_t) (pid.kp2[YAW] * 10);
 800961a:	4b0f      	ldr	r3, [pc, #60]	; (8009658 <evaluateCommand+0xae4>)
 800961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961e:	490f      	ldr	r1, [pc, #60]	; (800965c <evaluateCommand+0xae8>)
 8009620:	4618      	mov	r0, r3
 8009622:	f7f7 fbc9 	bl	8000db8 <__aeabi_fmul>
 8009626:	4603      	mov	r3, r0
 8009628:	4618      	mov	r0, r3
 800962a:	f7f7 fda1 	bl	8001170 <__aeabi_f2iz>
 800962e:	4603      	mov	r3, r0
 8009630:	b21b      	sxth	r3, r3
 8009632:	b29b      	uxth	r3, r3
 8009634:	877b      	strh	r3, [r7, #58]	; 0x3a
		pid_t.inner_YAW[1] = (int16_t) (pid.ki2[YAW] * 10);
 8009636:	4b08      	ldr	r3, [pc, #32]	; (8009658 <evaluateCommand+0xae4>)
 8009638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963a:	4908      	ldr	r1, [pc, #32]	; (800965c <evaluateCommand+0xae8>)
 800963c:	4618      	mov	r0, r3
 800963e:	f7f7 fbbb 	bl	8000db8 <__aeabi_fmul>
 8009642:	e00d      	b.n	8009660 <evaluateCommand+0xaec>
 8009644:	20000c64 	.word	0x20000c64
 8009648:	42c80000 	.word	0x42c80000
 800964c:	20000b68 	.word	0x20000b68
 8009650:	20000b20 	.word	0x20000b20
 8009654:	447a0000 	.word	0x447a0000
 8009658:	200009b0 	.word	0x200009b0
 800965c:	41200000 	.word	0x41200000
 8009660:	4603      	mov	r3, r0
 8009662:	4618      	mov	r0, r3
 8009664:	f7f7 fd84 	bl	8001170 <__aeabi_f2iz>
 8009668:	4603      	mov	r3, r0
 800966a:	b21b      	sxth	r3, r3
 800966c:	b29b      	uxth	r3, r3
 800966e:	87bb      	strh	r3, [r7, #60]	; 0x3c
		pid_t.inner_YAW[2] = (int16_t) (pid.kd2[YAW] * 100);
 8009670:	4b8a      	ldr	r3, [pc, #552]	; (800989c <evaluateCommand+0xd28>)
 8009672:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009674:	498a      	ldr	r1, [pc, #552]	; (80098a0 <evaluateCommand+0xd2c>)
 8009676:	4618      	mov	r0, r3
 8009678:	f7f7 fb9e 	bl	8000db8 <__aeabi_fmul>
 800967c:	4603      	mov	r3, r0
 800967e:	4618      	mov	r0, r3
 8009680:	f7f7 fd76 	bl	8001170 <__aeabi_f2iz>
 8009684:	4603      	mov	r3, r0
 8009686:	b21b      	sxth	r3, r3
 8009688:	b29b      	uxth	r3, r3
 800968a:	87fb      	strh	r3, [r7, #62]	; 0x3e

		pid_t.ROLL_rate[0]  = (int16_t) (pid.kp_rate[ROLL]  * 10);
 800968c:	4b83      	ldr	r3, [pc, #524]	; (800989c <evaluateCommand+0xd28>)
 800968e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009690:	4984      	ldr	r1, [pc, #528]	; (80098a4 <evaluateCommand+0xd30>)
 8009692:	4618      	mov	r0, r3
 8009694:	f7f7 fb90 	bl	8000db8 <__aeabi_fmul>
 8009698:	4603      	mov	r3, r0
 800969a:	4618      	mov	r0, r3
 800969c:	f7f7 fd68 	bl	8001170 <__aeabi_f2iz>
 80096a0:	4603      	mov	r3, r0
 80096a2:	b21b      	sxth	r3, r3
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	82bb      	strh	r3, [r7, #20]
		pid_t.ROLL_rate[1]  = (int16_t) (pid.ki_rate[ROLL]  * 10);
 80096a8:	4b7c      	ldr	r3, [pc, #496]	; (800989c <evaluateCommand+0xd28>)
 80096aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ac:	497d      	ldr	r1, [pc, #500]	; (80098a4 <evaluateCommand+0xd30>)
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7f7 fb82 	bl	8000db8 <__aeabi_fmul>
 80096b4:	4603      	mov	r3, r0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7f7 fd5a 	bl	8001170 <__aeabi_f2iz>
 80096bc:	4603      	mov	r3, r0
 80096be:	b21b      	sxth	r3, r3
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	82fb      	strh	r3, [r7, #22]
		pid_t.ROLL_rate[2]  = (int16_t) (pid.kd_rate[ROLL]  * 100);
 80096c4:	4b75      	ldr	r3, [pc, #468]	; (800989c <evaluateCommand+0xd28>)
 80096c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096c8:	4975      	ldr	r1, [pc, #468]	; (80098a0 <evaluateCommand+0xd2c>)
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7f7 fb74 	bl	8000db8 <__aeabi_fmul>
 80096d0:	4603      	mov	r3, r0
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7f7 fd4c 	bl	8001170 <__aeabi_f2iz>
 80096d8:	4603      	mov	r3, r0
 80096da:	b21b      	sxth	r3, r3
 80096dc:	b29b      	uxth	r3, r3
 80096de:	833b      	strh	r3, [r7, #24]
		pid_t.PITCH_rate[0] = (int16_t) (pid.kp_rate[PITCH] * 10);
 80096e0:	4b6e      	ldr	r3, [pc, #440]	; (800989c <evaluateCommand+0xd28>)
 80096e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e4:	496f      	ldr	r1, [pc, #444]	; (80098a4 <evaluateCommand+0xd30>)
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7f7 fb66 	bl	8000db8 <__aeabi_fmul>
 80096ec:	4603      	mov	r3, r0
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7f7 fd3e 	bl	8001170 <__aeabi_f2iz>
 80096f4:	4603      	mov	r3, r0
 80096f6:	b21b      	sxth	r3, r3
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	857b      	strh	r3, [r7, #42]	; 0x2a
		pid_t.PITCH_rate[1] = (int16_t) (pid.ki_rate[PITCH] * 10);
 80096fc:	4b67      	ldr	r3, [pc, #412]	; (800989c <evaluateCommand+0xd28>)
 80096fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009700:	4968      	ldr	r1, [pc, #416]	; (80098a4 <evaluateCommand+0xd30>)
 8009702:	4618      	mov	r0, r3
 8009704:	f7f7 fb58 	bl	8000db8 <__aeabi_fmul>
 8009708:	4603      	mov	r3, r0
 800970a:	4618      	mov	r0, r3
 800970c:	f7f7 fd30 	bl	8001170 <__aeabi_f2iz>
 8009710:	4603      	mov	r3, r0
 8009712:	b21b      	sxth	r3, r3
 8009714:	b29b      	uxth	r3, r3
 8009716:	85bb      	strh	r3, [r7, #44]	; 0x2c
		pid_t.PITCH_rate[2] = (int16_t) (pid.kd_rate[PITCH] * 100);
 8009718:	4b60      	ldr	r3, [pc, #384]	; (800989c <evaluateCommand+0xd28>)
 800971a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800971e:	4960      	ldr	r1, [pc, #384]	; (80098a0 <evaluateCommand+0xd2c>)
 8009720:	4618      	mov	r0, r3
 8009722:	f7f7 fb49 	bl	8000db8 <__aeabi_fmul>
 8009726:	4603      	mov	r3, r0
 8009728:	4618      	mov	r0, r3
 800972a:	f7f7 fd21 	bl	8001170 <__aeabi_f2iz>
 800972e:	4603      	mov	r3, r0
 8009730:	b21b      	sxth	r3, r3
 8009732:	b29b      	uxth	r3, r3
 8009734:	85fb      	strh	r3, [r7, #46]	; 0x2e
		pid_t.YAW_rate[0]   = (int16_t) (pid.kp_rate[YAW]   * 10);
 8009736:	4b59      	ldr	r3, [pc, #356]	; (800989c <evaluateCommand+0xd28>)
 8009738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973a:	495a      	ldr	r1, [pc, #360]	; (80098a4 <evaluateCommand+0xd30>)
 800973c:	4618      	mov	r0, r3
 800973e:	f7f7 fb3b 	bl	8000db8 <__aeabi_fmul>
 8009742:	4603      	mov	r3, r0
 8009744:	4618      	mov	r0, r3
 8009746:	f7f7 fd13 	bl	8001170 <__aeabi_f2iz>
 800974a:	4603      	mov	r3, r0
 800974c:	b21b      	sxth	r3, r3
 800974e:	b29b      	uxth	r3, r3
 8009750:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		pid_t.YAW_rate[1]   = (int16_t) (pid.ki_rate[YAW]   * 10);
 8009754:	4b51      	ldr	r3, [pc, #324]	; (800989c <evaluateCommand+0xd28>)
 8009756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009758:	4952      	ldr	r1, [pc, #328]	; (80098a4 <evaluateCommand+0xd30>)
 800975a:	4618      	mov	r0, r3
 800975c:	f7f7 fb2c 	bl	8000db8 <__aeabi_fmul>
 8009760:	4603      	mov	r3, r0
 8009762:	4618      	mov	r0, r3
 8009764:	f7f7 fd04 	bl	8001170 <__aeabi_f2iz>
 8009768:	4603      	mov	r3, r0
 800976a:	b21b      	sxth	r3, r3
 800976c:	b29b      	uxth	r3, r3
 800976e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pid_t.YAW_rate[2]   = (int16_t) (pid.kd_rate[YAW]   * 100);
 8009772:	4b4a      	ldr	r3, [pc, #296]	; (800989c <evaluateCommand+0xd28>)
 8009774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009778:	4949      	ldr	r1, [pc, #292]	; (80098a0 <evaluateCommand+0xd2c>)
 800977a:	4618      	mov	r0, r3
 800977c:	f7f7 fb1c 	bl	8000db8 <__aeabi_fmul>
 8009780:	4603      	mov	r3, r0
 8009782:	4618      	mov	r0, r3
 8009784:	f7f7 fcf4 	bl	8001170 <__aeabi_f2iz>
 8009788:	4603      	mov	r3, r0
 800978a:	b21b      	sxth	r3, r3
 800978c:	b29b      	uxth	r3, r3
 800978e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

		s_struct((uint8_t*)&pid_t,66);
 8009792:	1d3b      	adds	r3, r7, #4
 8009794:	2142      	movs	r1, #66	; 0x42
 8009796:	4618      	mov	r0, r3
 8009798:	f7ff f89b 	bl	80088d2 <s_struct>

		break;
 800979c:	bf00      	nop
 800979e:	f000 bc6d 	b.w	800a07c <evaluateCommand+0x1508>
		{ struct {
			uint16_t VBAT;
			uint16_t Temp;
		} analog;

		analog.VBAT = 100;//BAT.VBAT;
 80097a2:	2364      	movs	r3, #100	; 0x64
 80097a4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		analog.Temp = (imu.Temp*10);
 80097a8:	4b3f      	ldr	r3, [pc, #252]	; (80098a8 <evaluateCommand+0xd34>)
 80097aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ac:	493d      	ldr	r1, [pc, #244]	; (80098a4 <evaluateCommand+0xd30>)
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7f7 fb02 	bl	8000db8 <__aeabi_fmul>
 80097b4:	4603      	mov	r3, r0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f7 fd00 	bl	80011bc <__aeabi_f2uiz>
 80097bc:	4603      	mov	r3, r0
 80097be:	b29b      	uxth	r3, r3
 80097c0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

		s_struct((uint8_t*)&analog,4);
 80097c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80097c8:	2104      	movs	r1, #4
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7ff f881 	bl	80088d2 <s_struct>
		break;
 80097d0:	bf00      	nop
 80097d2:	f000 bc53 	b.w	800a07c <evaluateCommand+0x1508>
		}

		case MSP_SET_PID:
			posholdPID_PARAM.kP   = 0.15f;
 80097d6:	4b35      	ldr	r3, [pc, #212]	; (80098ac <evaluateCommand+0xd38>)
 80097d8:	4a35      	ldr	r2, [pc, #212]	; (80098b0 <evaluateCommand+0xd3c>)
 80097da:	601a      	str	r2, [r3, #0]
			posholdPID_PARAM.kI   = 0;
 80097dc:	4b33      	ldr	r3, [pc, #204]	; (80098ac <evaluateCommand+0xd38>)
 80097de:	f04f 0200 	mov.w	r2, #0
 80097e2:	605a      	str	r2, [r3, #4]
			posholdPID_PARAM.Imax = 2000;
 80097e4:	4b31      	ldr	r3, [pc, #196]	; (80098ac <evaluateCommand+0xd38>)
 80097e6:	4a33      	ldr	r2, [pc, #204]	; (80098b4 <evaluateCommand+0xd40>)
 80097e8:	60da      	str	r2, [r3, #12]

			poshold_ratePID_PARAM.kP   = 3.4f;
 80097ea:	4b33      	ldr	r3, [pc, #204]	; (80098b8 <evaluateCommand+0xd44>)
 80097ec:	4a33      	ldr	r2, [pc, #204]	; (80098bc <evaluateCommand+0xd48>)
 80097ee:	601a      	str	r2, [r3, #0]
			poshold_ratePID_PARAM.kI   = 0.14f;
 80097f0:	4b31      	ldr	r3, [pc, #196]	; (80098b8 <evaluateCommand+0xd44>)
 80097f2:	4a33      	ldr	r2, [pc, #204]	; (80098c0 <evaluateCommand+0xd4c>)
 80097f4:	605a      	str	r2, [r3, #4]
			poshold_ratePID_PARAM.kD   = 0.053f;
 80097f6:	4b30      	ldr	r3, [pc, #192]	; (80098b8 <evaluateCommand+0xd44>)
 80097f8:	4a32      	ldr	r2, [pc, #200]	; (80098c4 <evaluateCommand+0xd50>)
 80097fa:	609a      	str	r2, [r3, #8]
			poshold_ratePID_PARAM.Imax = 2000;
 80097fc:	4b2e      	ldr	r3, [pc, #184]	; (80098b8 <evaluateCommand+0xd44>)
 80097fe:	4a2d      	ldr	r2, [pc, #180]	; (80098b4 <evaluateCommand+0xd40>)
 8009800:	60da      	str	r2, [r3, #12]

			navPID_PARAM.kP   = 2.5f;
 8009802:	4b31      	ldr	r3, [pc, #196]	; (80098c8 <evaluateCommand+0xd54>)
 8009804:	4a31      	ldr	r2, [pc, #196]	; (80098cc <evaluateCommand+0xd58>)
 8009806:	601a      	str	r2, [r3, #0]
			navPID_PARAM.kI   = 0.33f;
 8009808:	4b2f      	ldr	r3, [pc, #188]	; (80098c8 <evaluateCommand+0xd54>)
 800980a:	4a31      	ldr	r2, [pc, #196]	; (80098d0 <evaluateCommand+0xd5c>)
 800980c:	605a      	str	r2, [r3, #4]
			navPID_PARAM.kD   = 0.053f;
 800980e:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <evaluateCommand+0xd54>)
 8009810:	4a2c      	ldr	r2, [pc, #176]	; (80098c4 <evaluateCommand+0xd50>)
 8009812:	609a      	str	r2, [r3, #8]
			navPID_PARAM.Imax = 2000;
 8009814:	4b2c      	ldr	r3, [pc, #176]	; (80098c8 <evaluateCommand+0xd54>)
 8009816:	4a27      	ldr	r2, [pc, #156]	; (80098b4 <evaluateCommand+0xd40>)
 8009818:	60da      	str	r2, [r3, #12]

			for(i=0; i < 3; i++)
 800981a:	2300      	movs	r3, #0
 800981c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8009820:	e1eb      	b.n	8009bfa <evaluateCommand+0x1086>
			{
				if(i==0)
 8009822:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009826:	2b00      	cmp	r3, #0
 8009828:	d154      	bne.n	80098d4 <evaluateCommand+0xd60>
				{
					posholdPID_PARAM.kP   = (float) read16();
 800982a:	f7fe ffd7 	bl	80087dc <read16>
 800982e:	4603      	mov	r3, r0
 8009830:	4618      	mov	r0, r3
 8009832:	f7f7 fa69 	bl	8000d08 <__aeabi_ui2f>
 8009836:	4602      	mov	r2, r0
 8009838:	4b1c      	ldr	r3, [pc, #112]	; (80098ac <evaluateCommand+0xd38>)
 800983a:	601a      	str	r2, [r3, #0]
					posholdPID_PARAM.kP /= 100;
 800983c:	4b1b      	ldr	r3, [pc, #108]	; (80098ac <evaluateCommand+0xd38>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4917      	ldr	r1, [pc, #92]	; (80098a0 <evaluateCommand+0xd2c>)
 8009842:	4618      	mov	r0, r3
 8009844:	f7f7 fb6c 	bl	8000f20 <__aeabi_fdiv>
 8009848:	4603      	mov	r3, r0
 800984a:	461a      	mov	r2, r3
 800984c:	4b17      	ldr	r3, [pc, #92]	; (80098ac <evaluateCommand+0xd38>)
 800984e:	601a      	str	r2, [r3, #0]

					posholdPID_PARAM.kI = (float) read16();
 8009850:	f7fe ffc4 	bl	80087dc <read16>
 8009854:	4603      	mov	r3, r0
 8009856:	4618      	mov	r0, r3
 8009858:	f7f7 fa56 	bl	8000d08 <__aeabi_ui2f>
 800985c:	4602      	mov	r2, r0
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <evaluateCommand+0xd38>)
 8009860:	605a      	str	r2, [r3, #4]
					posholdPID_PARAM.kI /= 100;
 8009862:	4b12      	ldr	r3, [pc, #72]	; (80098ac <evaluateCommand+0xd38>)
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	490e      	ldr	r1, [pc, #56]	; (80098a0 <evaluateCommand+0xd2c>)
 8009868:	4618      	mov	r0, r3
 800986a:	f7f7 fb59 	bl	8000f20 <__aeabi_fdiv>
 800986e:	4603      	mov	r3, r0
 8009870:	461a      	mov	r2, r3
 8009872:	4b0e      	ldr	r3, [pc, #56]	; (80098ac <evaluateCommand+0xd38>)
 8009874:	605a      	str	r2, [r3, #4]

					posholdPID_PARAM.Imax = (float) read16();
 8009876:	f7fe ffb1 	bl	80087dc <read16>
 800987a:	4603      	mov	r3, r0
 800987c:	4618      	mov	r0, r3
 800987e:	f7f7 fa43 	bl	8000d08 <__aeabi_ui2f>
 8009882:	4602      	mov	r2, r0
 8009884:	4b09      	ldr	r3, [pc, #36]	; (80098ac <evaluateCommand+0xd38>)
 8009886:	60da      	str	r2, [r3, #12]
					poshold_ratePID_PARAM.Imax = posholdPID_PARAM.Imax;
 8009888:	4b08      	ldr	r3, [pc, #32]	; (80098ac <evaluateCommand+0xd38>)
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	4a0a      	ldr	r2, [pc, #40]	; (80098b8 <evaluateCommand+0xd44>)
 800988e:	60d3      	str	r3, [r2, #12]
					navPID_PARAM.Imax = posholdPID_PARAM.Imax;
 8009890:	4b06      	ldr	r3, [pc, #24]	; (80098ac <evaluateCommand+0xd38>)
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	4a0c      	ldr	r2, [pc, #48]	; (80098c8 <evaluateCommand+0xd54>)
 8009896:	60d3      	str	r3, [r2, #12]
 8009898:	e09d      	b.n	80099d6 <evaluateCommand+0xe62>
 800989a:	bf00      	nop
 800989c:	200009b0 	.word	0x200009b0
 80098a0:	42c80000 	.word	0x42c80000
 80098a4:	41200000 	.word	0x41200000
 80098a8:	20000e20 	.word	0x20000e20
 80098ac:	20000c64 	.word	0x20000c64
 80098b0:	3e19999a 	.word	0x3e19999a
 80098b4:	44fa0000 	.word	0x44fa0000
 80098b8:	20000b68 	.word	0x20000b68
 80098bc:	4059999a 	.word	0x4059999a
 80098c0:	3e0f5c29 	.word	0x3e0f5c29
 80098c4:	3d591687 	.word	0x3d591687
 80098c8:	20000b20 	.word	0x20000b20
 80098cc:	40200000 	.word	0x40200000
 80098d0:	3ea8f5c3 	.word	0x3ea8f5c3
				}else if(i == 1)
 80098d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d13f      	bne.n	800995c <evaluateCommand+0xde8>
				{
					poshold_ratePID_PARAM.kP = (float) read16();
 80098dc:	f7fe ff7e 	bl	80087dc <read16>
 80098e0:	4603      	mov	r3, r0
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7f7 fa10 	bl	8000d08 <__aeabi_ui2f>
 80098e8:	4602      	mov	r2, r0
 80098ea:	4b19      	ldr	r3, [pc, #100]	; (8009950 <evaluateCommand+0xddc>)
 80098ec:	601a      	str	r2, [r3, #0]
					poshold_ratePID_PARAM.kP /= 100;
 80098ee:	4b18      	ldr	r3, [pc, #96]	; (8009950 <evaluateCommand+0xddc>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4918      	ldr	r1, [pc, #96]	; (8009954 <evaluateCommand+0xde0>)
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7f7 fb13 	bl	8000f20 <__aeabi_fdiv>
 80098fa:	4603      	mov	r3, r0
 80098fc:	461a      	mov	r2, r3
 80098fe:	4b14      	ldr	r3, [pc, #80]	; (8009950 <evaluateCommand+0xddc>)
 8009900:	601a      	str	r2, [r3, #0]

					poshold_ratePID_PARAM.kI = (float) read16();
 8009902:	f7fe ff6b 	bl	80087dc <read16>
 8009906:	4603      	mov	r3, r0
 8009908:	4618      	mov	r0, r3
 800990a:	f7f7 f9fd 	bl	8000d08 <__aeabi_ui2f>
 800990e:	4602      	mov	r2, r0
 8009910:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <evaluateCommand+0xddc>)
 8009912:	605a      	str	r2, [r3, #4]
					poshold_ratePID_PARAM.kI /= 100;
 8009914:	4b0e      	ldr	r3, [pc, #56]	; (8009950 <evaluateCommand+0xddc>)
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	490e      	ldr	r1, [pc, #56]	; (8009954 <evaluateCommand+0xde0>)
 800991a:	4618      	mov	r0, r3
 800991c:	f7f7 fb00 	bl	8000f20 <__aeabi_fdiv>
 8009920:	4603      	mov	r3, r0
 8009922:	461a      	mov	r2, r3
 8009924:	4b0a      	ldr	r3, [pc, #40]	; (8009950 <evaluateCommand+0xddc>)
 8009926:	605a      	str	r2, [r3, #4]

					poshold_ratePID_PARAM.kD = (float) read16();
 8009928:	f7fe ff58 	bl	80087dc <read16>
 800992c:	4603      	mov	r3, r0
 800992e:	4618      	mov	r0, r3
 8009930:	f7f7 f9ea 	bl	8000d08 <__aeabi_ui2f>
 8009934:	4602      	mov	r2, r0
 8009936:	4b06      	ldr	r3, [pc, #24]	; (8009950 <evaluateCommand+0xddc>)
 8009938:	609a      	str	r2, [r3, #8]
					poshold_ratePID_PARAM.kD /= 1000;
 800993a:	4b05      	ldr	r3, [pc, #20]	; (8009950 <evaluateCommand+0xddc>)
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	4906      	ldr	r1, [pc, #24]	; (8009958 <evaluateCommand+0xde4>)
 8009940:	4618      	mov	r0, r3
 8009942:	f7f7 faed 	bl	8000f20 <__aeabi_fdiv>
 8009946:	4603      	mov	r3, r0
 8009948:	461a      	mov	r2, r3
 800994a:	4b01      	ldr	r3, [pc, #4]	; (8009950 <evaluateCommand+0xddc>)
 800994c:	609a      	str	r2, [r3, #8]
 800994e:	e042      	b.n	80099d6 <evaluateCommand+0xe62>
 8009950:	20000b68 	.word	0x20000b68
 8009954:	42c80000 	.word	0x42c80000
 8009958:	447a0000 	.word	0x447a0000


				}else if(i == 2)
 800995c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009960:	2b02      	cmp	r3, #2
 8009962:	d138      	bne.n	80099d6 <evaluateCommand+0xe62>
				{
					navPID_PARAM.kP = (float) read16();
 8009964:	f7fe ff3a 	bl	80087dc <read16>
 8009968:	4603      	mov	r3, r0
 800996a:	4618      	mov	r0, r3
 800996c:	f7f7 f9cc 	bl	8000d08 <__aeabi_ui2f>
 8009970:	4602      	mov	r2, r0
 8009972:	4bb5      	ldr	r3, [pc, #724]	; (8009c48 <evaluateCommand+0x10d4>)
 8009974:	601a      	str	r2, [r3, #0]
					navPID_PARAM.kP /= 100;
 8009976:	4bb4      	ldr	r3, [pc, #720]	; (8009c48 <evaluateCommand+0x10d4>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	49b4      	ldr	r1, [pc, #720]	; (8009c4c <evaluateCommand+0x10d8>)
 800997c:	4618      	mov	r0, r3
 800997e:	f7f7 facf 	bl	8000f20 <__aeabi_fdiv>
 8009982:	4603      	mov	r3, r0
 8009984:	461a      	mov	r2, r3
 8009986:	4bb0      	ldr	r3, [pc, #704]	; (8009c48 <evaluateCommand+0x10d4>)
 8009988:	601a      	str	r2, [r3, #0]

					navPID_PARAM.kI = (float) read16();
 800998a:	f7fe ff27 	bl	80087dc <read16>
 800998e:	4603      	mov	r3, r0
 8009990:	4618      	mov	r0, r3
 8009992:	f7f7 f9b9 	bl	8000d08 <__aeabi_ui2f>
 8009996:	4602      	mov	r2, r0
 8009998:	4bab      	ldr	r3, [pc, #684]	; (8009c48 <evaluateCommand+0x10d4>)
 800999a:	605a      	str	r2, [r3, #4]
					navPID_PARAM.kI /= 100;
 800999c:	4baa      	ldr	r3, [pc, #680]	; (8009c48 <evaluateCommand+0x10d4>)
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	49aa      	ldr	r1, [pc, #680]	; (8009c4c <evaluateCommand+0x10d8>)
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f7 fabc 	bl	8000f20 <__aeabi_fdiv>
 80099a8:	4603      	mov	r3, r0
 80099aa:	461a      	mov	r2, r3
 80099ac:	4ba6      	ldr	r3, [pc, #664]	; (8009c48 <evaluateCommand+0x10d4>)
 80099ae:	605a      	str	r2, [r3, #4]

					navPID_PARAM.kD = (float) read16();
 80099b0:	f7fe ff14 	bl	80087dc <read16>
 80099b4:	4603      	mov	r3, r0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7f7 f9a6 	bl	8000d08 <__aeabi_ui2f>
 80099bc:	4602      	mov	r2, r0
 80099be:	4ba2      	ldr	r3, [pc, #648]	; (8009c48 <evaluateCommand+0x10d4>)
 80099c0:	609a      	str	r2, [r3, #8]
					navPID_PARAM.kD /= 1000;
 80099c2:	4ba1      	ldr	r3, [pc, #644]	; (8009c48 <evaluateCommand+0x10d4>)
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	49a2      	ldr	r1, [pc, #648]	; (8009c50 <evaluateCommand+0x10dc>)
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7f7 faa9 	bl	8000f20 <__aeabi_fdiv>
 80099ce:	4603      	mov	r3, r0
 80099d0:	461a      	mov	r2, r3
 80099d2:	4b9d      	ldr	r3, [pc, #628]	; (8009c48 <evaluateCommand+0x10d4>)
 80099d4:	609a      	str	r2, [r3, #8]
				}

				pid.kp1[i] = (float) read16();
 80099d6:	f7fe ff01 	bl	80087dc <read16>
 80099da:	4603      	mov	r3, r0
 80099dc:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7f7 f991 	bl	8000d08 <__aeabi_ui2f>
 80099e6:	4601      	mov	r1, r0
 80099e8:	4a9a      	ldr	r2, [pc, #616]	; (8009c54 <evaluateCommand+0x10e0>)
 80099ea:	1d23      	adds	r3, r4, #4
 80099ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kp1[i] /= 10;
 80099f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80099f4:	4a97      	ldr	r2, [pc, #604]	; (8009c54 <evaluateCommand+0x10e0>)
 80099f6:	3304      	adds	r3, #4
 80099f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099fc:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a00:	4995      	ldr	r1, [pc, #596]	; (8009c58 <evaluateCommand+0x10e4>)
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7f7 fa8c 	bl	8000f20 <__aeabi_fdiv>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4a91      	ldr	r2, [pc, #580]	; (8009c54 <evaluateCommand+0x10e0>)
 8009a0e:	1d23      	adds	r3, r4, #4
 8009a10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki1[i] = (float) read16();
 8009a14:	f7fe fee2 	bl	80087dc <read16>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f7 f972 	bl	8000d08 <__aeabi_ui2f>
 8009a24:	4601      	mov	r1, r0
 8009a26:	4a8b      	ldr	r2, [pc, #556]	; (8009c54 <evaluateCommand+0x10e0>)
 8009a28:	f104 0310 	add.w	r3, r4, #16
 8009a2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki1[i] /= 10;
 8009a30:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009a34:	4a87      	ldr	r2, [pc, #540]	; (8009c54 <evaluateCommand+0x10e0>)
 8009a36:	3310      	adds	r3, #16
 8009a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a3c:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a40:	4985      	ldr	r1, [pc, #532]	; (8009c58 <evaluateCommand+0x10e4>)
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7f7 fa6c 	bl	8000f20 <__aeabi_fdiv>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	4a81      	ldr	r2, [pc, #516]	; (8009c54 <evaluateCommand+0x10e0>)
 8009a4e:	f104 0310 	add.w	r3, r4, #16
 8009a52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kp2[i] = (float) read16();
 8009a56:	f7fe fec1 	bl	80087dc <read16>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7f7 f951 	bl	8000d08 <__aeabi_ui2f>
 8009a66:	4601      	mov	r1, r0
 8009a68:	4a7a      	ldr	r2, [pc, #488]	; (8009c54 <evaluateCommand+0x10e0>)
 8009a6a:	1da3      	adds	r3, r4, #6
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	6059      	str	r1, [r3, #4]
				pid.kp2[i] /= 10;
 8009a72:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009a76:	4a77      	ldr	r2, [pc, #476]	; (8009c54 <evaluateCommand+0x10e0>)
 8009a78:	3306      	adds	r3, #6
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4413      	add	r3, r2
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009a84:	4974      	ldr	r1, [pc, #464]	; (8009c58 <evaluateCommand+0x10e4>)
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7f7 fa4a 	bl	8000f20 <__aeabi_fdiv>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4a70      	ldr	r2, [pc, #448]	; (8009c54 <evaluateCommand+0x10e0>)
 8009a92:	1da3      	adds	r3, r4, #6
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	6059      	str	r1, [r3, #4]
				pid.ki2[i] = (float) read16();
 8009a9a:	f7fe fe9f 	bl	80087dc <read16>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7f7 f92f 	bl	8000d08 <__aeabi_ui2f>
 8009aaa:	4601      	mov	r1, r0
 8009aac:	4a69      	ldr	r2, [pc, #420]	; (8009c54 <evaluateCommand+0x10e0>)
 8009aae:	f104 0312 	add.w	r3, r4, #18
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	6059      	str	r1, [r3, #4]
				pid.ki2[i] /= 10;
 8009ab8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009abc:	4a65      	ldr	r2, [pc, #404]	; (8009c54 <evaluateCommand+0x10e0>)
 8009abe:	3312      	adds	r3, #18
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009aca:	4963      	ldr	r1, [pc, #396]	; (8009c58 <evaluateCommand+0x10e4>)
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7f7 fa27 	bl	8000f20 <__aeabi_fdiv>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4a5f      	ldr	r2, [pc, #380]	; (8009c54 <evaluateCommand+0x10e0>)
 8009ad8:	f104 0312 	add.w	r3, r4, #18
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	6059      	str	r1, [r3, #4]
				pid.kd2[i] = (float) read16();
 8009ae2:	f7fe fe7b 	bl	80087dc <read16>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7f7 f90b 	bl	8000d08 <__aeabi_ui2f>
 8009af2:	4601      	mov	r1, r0
 8009af4:	4a57      	ldr	r2, [pc, #348]	; (8009c54 <evaluateCommand+0x10e0>)
 8009af6:	f104 031c 	add.w	r3, r4, #28
 8009afa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kd2[i] /= 100;
 8009afe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009b02:	4a54      	ldr	r2, [pc, #336]	; (8009c54 <evaluateCommand+0x10e0>)
 8009b04:	331c      	adds	r3, #28
 8009b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b0a:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b0e:	494f      	ldr	r1, [pc, #316]	; (8009c4c <evaluateCommand+0x10d8>)
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7f7 fa05 	bl	8000f20 <__aeabi_fdiv>
 8009b16:	4603      	mov	r3, r0
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4a4e      	ldr	r2, [pc, #312]	; (8009c54 <evaluateCommand+0x10e0>)
 8009b1c:	f104 031c 	add.w	r3, r4, #28
 8009b20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				pid.kp_rate[i] = (float) read16();
 8009b24:	f7fe fe5a 	bl	80087dc <read16>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7f7 f8ea 	bl	8000d08 <__aeabi_ui2f>
 8009b34:	4601      	mov	r1, r0
 8009b36:	4a47      	ldr	r2, [pc, #284]	; (8009c54 <evaluateCommand+0x10e0>)
 8009b38:	f104 030a 	add.w	r3, r4, #10
 8009b3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kp_rate[i] /= 10;
 8009b40:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009b44:	4a43      	ldr	r2, [pc, #268]	; (8009c54 <evaluateCommand+0x10e0>)
 8009b46:	330a      	adds	r3, #10
 8009b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b4c:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b50:	4941      	ldr	r1, [pc, #260]	; (8009c58 <evaluateCommand+0x10e4>)
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7f7 f9e4 	bl	8000f20 <__aeabi_fdiv>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	4a3d      	ldr	r2, [pc, #244]	; (8009c54 <evaluateCommand+0x10e0>)
 8009b5e:	f104 030a 	add.w	r3, r4, #10
 8009b62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki_rate[i] = (float) read16();
 8009b66:	f7fe fe39 	bl	80087dc <read16>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7f7 f8c9 	bl	8000d08 <__aeabi_ui2f>
 8009b76:	4601      	mov	r1, r0
 8009b78:	4a36      	ldr	r2, [pc, #216]	; (8009c54 <evaluateCommand+0x10e0>)
 8009b7a:	f104 0316 	add.w	r3, r4, #22
 8009b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.ki_rate[i] /= 10;
 8009b82:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009b86:	4a33      	ldr	r2, [pc, #204]	; (8009c54 <evaluateCommand+0x10e0>)
 8009b88:	3316      	adds	r3, #22
 8009b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b8e:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009b92:	4931      	ldr	r1, [pc, #196]	; (8009c58 <evaluateCommand+0x10e4>)
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7f7 f9c3 	bl	8000f20 <__aeabi_fdiv>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4a2d      	ldr	r2, [pc, #180]	; (8009c54 <evaluateCommand+0x10e0>)
 8009ba0:	f104 0316 	add.w	r3, r4, #22
 8009ba4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				pid.kd_rate[i] = (float) read16();
 8009ba8:	f7fe fe18 	bl	80087dc <read16>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7f7 f8a8 	bl	8000d08 <__aeabi_ui2f>
 8009bb8:	4601      	mov	r1, r0
 8009bba:	4a26      	ldr	r2, [pc, #152]	; (8009c54 <evaluateCommand+0x10e0>)
 8009bbc:	f104 031e 	add.w	r3, r4, #30
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	6059      	str	r1, [r3, #4]
				pid.kd_rate[i] /= 100;
 8009bc6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009bca:	4a22      	ldr	r2, [pc, #136]	; (8009c54 <evaluateCommand+0x10e0>)
 8009bcc:	331e      	adds	r3, #30
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8009bd8:	491c      	ldr	r1, [pc, #112]	; (8009c4c <evaluateCommand+0x10d8>)
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7f7 f9a0 	bl	8000f20 <__aeabi_fdiv>
 8009be0:	4603      	mov	r3, r0
 8009be2:	4619      	mov	r1, r3
 8009be4:	4a1b      	ldr	r2, [pc, #108]	; (8009c54 <evaluateCommand+0x10e0>)
 8009be6:	f104 031e 	add.w	r3, r4, #30
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	6059      	str	r1, [r3, #4]
			for(i=0; i < 3; i++)
 8009bf0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8009bfa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	f67f ae0f 	bls.w	8009822 <evaluateCommand+0xcae>
			}
			break;
 8009c04:	e23a      	b.n	800a07c <evaluateCommand+0x1508>

		case MSP_SET_MOTOR:
			M_motor[0] = read16();
 8009c06:	f7fe fde9 	bl	80087dc <read16>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	b21a      	sxth	r2, r3
 8009c0e:	4b13      	ldr	r3, [pc, #76]	; (8009c5c <evaluateCommand+0x10e8>)
 8009c10:	801a      	strh	r2, [r3, #0]
			M_motor[1] = read16();
 8009c12:	f7fe fde3 	bl	80087dc <read16>
 8009c16:	4603      	mov	r3, r0
 8009c18:	b21a      	sxth	r2, r3
 8009c1a:	4b10      	ldr	r3, [pc, #64]	; (8009c5c <evaluateCommand+0x10e8>)
 8009c1c:	805a      	strh	r2, [r3, #2]
			M_motor[2] = read16();
 8009c1e:	f7fe fddd 	bl	80087dc <read16>
 8009c22:	4603      	mov	r3, r0
 8009c24:	b21a      	sxth	r2, r3
 8009c26:	4b0d      	ldr	r3, [pc, #52]	; (8009c5c <evaluateCommand+0x10e8>)
 8009c28:	809a      	strh	r2, [r3, #4]
			M_motor[3] = read16();
 8009c2a:	f7fe fdd7 	bl	80087dc <read16>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	b21a      	sxth	r2, r3
 8009c32:	4b0a      	ldr	r3, [pc, #40]	; (8009c5c <evaluateCommand+0x10e8>)
 8009c34:	80da      	strh	r2, [r3, #6]
			Manual_Motor_flag = true;
 8009c36:	4b0a      	ldr	r3, [pc, #40]	; (8009c60 <evaluateCommand+0x10ec>)
 8009c38:	2201      	movs	r2, #1
 8009c3a:	701a      	strb	r2, [r3, #0]
			time_manual_motor = micros();
 8009c3c:	f7f7 fc44 	bl	80014c8 <micros>
 8009c40:	4602      	mov	r2, r0
 8009c42:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <evaluateCommand+0x10f0>)
 8009c44:	601a      	str	r2, [r3, #0]
			break;
 8009c46:	e219      	b.n	800a07c <evaluateCommand+0x1508>
 8009c48:	20000b20 	.word	0x20000b20
 8009c4c:	42c80000 	.word	0x42c80000
 8009c50:	447a0000 	.word	0x447a0000
 8009c54:	200009b0 	.word	0x200009b0
 8009c58:	41200000 	.word	0x41200000
 8009c5c:	20000cb8 	.word	0x20000cb8
 8009c60:	200002e8 	.word	0x200002e8
 8009c64:	20000cc4 	.word	0x20000cc4

		case MSP_RESET:
			Error.error = 0;
 8009c68:	4ba2      	ldr	r3, [pc, #648]	; (8009ef4 <evaluateCommand+0x1380>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	701a      	strb	r2, [r3, #0]
			ledOff(RGB_RED);
 8009c6e:	2002      	movs	r0, #2
 8009c70:	f001 fda0 	bl	800b7b4 <ledOff>
			cycleTimeMax = 0;
 8009c74:	4ba0      	ldr	r3, [pc, #640]	; (8009ef8 <evaluateCommand+0x1384>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	801a      	strh	r2, [r3, #0]
			cycleTimeMin = 65535;
 8009c7a:	4ba0      	ldr	r3, [pc, #640]	; (8009efc <evaluateCommand+0x1388>)
 8009c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c80:	801a      	strh	r2, [r3, #0]
			f.mag_reset = 1;
 8009c82:	4b9f      	ldr	r3, [pc, #636]	; (8009f00 <evaluateCommand+0x138c>)
 8009c84:	2201      	movs	r2, #1
 8009c86:	769a      	strb	r2, [r3, #26]
			ledToggle(RGB_GREEN);
 8009c88:	2003      	movs	r0, #3
 8009c8a:	f001 fdb3 	bl	800b7f4 <ledToggle>
			break;
 8009c8e:	e1f5      	b.n	800a07c <evaluateCommand+0x1508>
			int16_t angle[2];//17
			int16_t mag_heading;//19
			int16_t motor[4];//74
		} debug_t;

		debug_t.roll     = RC.rcCommand[ROLL];
 8009c90:	4b9c      	ldr	r3, [pc, #624]	; (8009f04 <evaluateCommand+0x1390>)
 8009c92:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	80bb      	strh	r3, [r7, #4]
		debug_t.pitch    = RC.rcCommand[PITCH];
 8009c9a:	4b9a      	ldr	r3, [pc, #616]	; (8009f04 <evaluateCommand+0x1390>)
 8009c9c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	80fb      	strh	r3, [r7, #6]
		debug_t.yaw      = RC.rcCommand[YAW];
 8009ca4:	4b97      	ldr	r3, [pc, #604]	; (8009f04 <evaluateCommand+0x1390>)
 8009ca6:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	813b      	strh	r3, [r7, #8]
		debug_t.throttle = RC.rcCommand[THROTTLE];
 8009cae:	4b95      	ldr	r3, [pc, #596]	; (8009f04 <evaluateCommand+0x1390>)
 8009cb0:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	817b      	strh	r3, [r7, #10]
		debug_t.aux1     = RC.rcCommand[AUX1];
 8009cb8:	4b92      	ldr	r3, [pc, #584]	; (8009f04 <evaluateCommand+0x1390>)
 8009cba:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	81fb      	strh	r3, [r7, #14]
		debug_t.gear     = RC.rcCommand[GEAR];
 8009cc2:	4b90      	ldr	r3, [pc, #576]	; (8009f04 <evaluateCommand+0x1390>)
 8009cc4:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	81bb      	strh	r3, [r7, #12]
		//debug_t.ArmedTime    = armedTime;
		debug_t.cycleTime    = loopTime;
 8009ccc:	4b8e      	ldr	r3, [pc, #568]	; (8009f08 <evaluateCommand+0x1394>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	613b      	str	r3, [r7, #16]
		debug_t.error        = Error.error;
 8009cd2:	4b88      	ldr	r3, [pc, #544]	; (8009ef4 <evaluateCommand+0x1380>)
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	82bb      	strh	r3, [r7, #20]
		if(f.ARMED) tmp |= 1<<BOXARM;
 8009cda:	4b89      	ldr	r3, [pc, #548]	; (8009f00 <evaluateCommand+0x138c>)
 8009cdc:	785b      	ldrb	r3, [r3, #1]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d005      	beq.n	8009cee <evaluateCommand+0x117a>
 8009ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ce6:	f043 0301 	orr.w	r3, r3, #1
 8009cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.HEADFREE_MODE) tmp |= 1<<BOXHEADFREE;
 8009cee:	4b84      	ldr	r3, [pc, #528]	; (8009f00 <evaluateCommand+0x138c>)
 8009cf0:	7b9b      	ldrb	r3, [r3, #14]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d005      	beq.n	8009d02 <evaluateCommand+0x118e>
 8009cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cfa:	f043 0302 	orr.w	r3, r3, #2
 8009cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ACRO_MODE) tmp |= 1<<BOXACRO_MODE;
 8009d02:	4b7f      	ldr	r3, [pc, #508]	; (8009f00 <evaluateCommand+0x138c>)
 8009d04:	79db      	ldrb	r3, [r3, #7]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d005      	beq.n	8009d16 <evaluateCommand+0x11a2>
 8009d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d0e:	f043 0304 	orr.w	r3, r3, #4
 8009d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.ANGLE_MODE) tmp |= 1<<BOXANGLE_MODE;
 8009d16:	4b7a      	ldr	r3, [pc, #488]	; (8009f00 <evaluateCommand+0x138c>)
 8009d18:	795b      	ldrb	r3, [r3, #5]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d005      	beq.n	8009d2a <evaluateCommand+0x11b6>
 8009d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d22:	f043 0308 	orr.w	r3, r3, #8
 8009d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.GPS_HOLD_MODE) tmp |= 1<<BOXGPS_MODE;
 8009d2a:	4b75      	ldr	r3, [pc, #468]	; (8009f00 <evaluateCommand+0x138c>)
 8009d2c:	7b5b      	ldrb	r3, [r3, #13]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d005      	beq.n	8009d3e <evaluateCommand+0x11ca>
 8009d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_ACC) tmp |= 1<<BOXCALIBRATE_ACC;
 8009d3e:	4b70      	ldr	r3, [pc, #448]	; (8009f00 <evaluateCommand+0x138c>)
 8009d40:	791b      	ldrb	r3, [r3, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d005      	beq.n	8009d52 <evaluateCommand+0x11de>
 8009d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d4a:	f043 0310 	orr.w	r3, r3, #16
 8009d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if(f.CALIBRATE_MAG) tmp |= 1<<BOXCALIBRATE_MAG;
 8009d52:	4b6b      	ldr	r3, [pc, #428]	; (8009f00 <evaluateCommand+0x138c>)
 8009d54:	7cdb      	ldrb	r3, [r3, #19]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d005      	beq.n	8009d66 <evaluateCommand+0x11f2>
 8009d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d5e:	f043 0320 	orr.w	r3, r3, #32
 8009d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		debug_t.flag         = tmp;
 8009d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	82fb      	strh	r3, [r7, #22]
		debug_t.alt = (int16_t) alt.EstAlt;
 8009d6e:	4b67      	ldr	r3, [pc, #412]	; (8009f0c <evaluateCommand+0x1398>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	b21b      	sxth	r3, r3
 8009d74:	833b      	strh	r3, [r7, #24]
		debug_t.VBAT = 100;//BAT.VBAT;
 8009d76:	2364      	movs	r3, #100	; 0x64
 8009d78:	837b      	strh	r3, [r7, #26]
		debug_t.Temp = imu.Temp*10;
 8009d7a:	4b65      	ldr	r3, [pc, #404]	; (8009f10 <evaluateCommand+0x139c>)
 8009d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d7e:	4965      	ldr	r1, [pc, #404]	; (8009f14 <evaluateCommand+0x13a0>)
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7f7 f819 	bl	8000db8 <__aeabi_fmul>
 8009d86:	4603      	mov	r3, r0
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7f7 f9f1 	bl	8001170 <__aeabi_f2iz>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	b21b      	sxth	r3, r3
 8009d92:	83bb      	strh	r3, [r7, #28]

		debug_t.angle[ROLL] = imu.AHRS[ROLL]*10;
 8009d94:	4b5e      	ldr	r3, [pc, #376]	; (8009f10 <evaluateCommand+0x139c>)
 8009d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d9a:	495e      	ldr	r1, [pc, #376]	; (8009f14 <evaluateCommand+0x13a0>)
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7f7 f80b 	bl	8000db8 <__aeabi_fmul>
 8009da2:	4603      	mov	r3, r0
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7f7 f9e3 	bl	8001170 <__aeabi_f2iz>
 8009daa:	4603      	mov	r3, r0
 8009dac:	b21b      	sxth	r3, r3
 8009dae:	83fb      	strh	r3, [r7, #30]
		debug_t.angle[PITCH] = imu.AHRS[PITCH]*10;
 8009db0:	4b57      	ldr	r3, [pc, #348]	; (8009f10 <evaluateCommand+0x139c>)
 8009db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009db6:	4957      	ldr	r1, [pc, #348]	; (8009f14 <evaluateCommand+0x13a0>)
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7f6 fffd 	bl	8000db8 <__aeabi_fmul>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7f7 f9d5 	bl	8001170 <__aeabi_f2iz>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	b21b      	sxth	r3, r3
 8009dca:	843b      	strh	r3, [r7, #32]
		debug_t.mag_heading = (int16_t)imu.actual_compass_heading*10;
 8009dcc:	4b50      	ldr	r3, [pc, #320]	; (8009f10 <evaluateCommand+0x139c>)
 8009dce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	0092      	lsls	r2, r2, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	005b      	lsls	r3, r3, #1
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	b21b      	sxth	r3, r3
 8009de0:	847b      	strh	r3, [r7, #34]	; 0x22

		debug_t.motor[0] = motor[0];
 8009de2:	4b4d      	ldr	r3, [pc, #308]	; (8009f18 <evaluateCommand+0x13a4>)
 8009de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009de8:	84bb      	strh	r3, [r7, #36]	; 0x24
		debug_t.motor[1] = motor[1];
 8009dea:	4b4b      	ldr	r3, [pc, #300]	; (8009f18 <evaluateCommand+0x13a4>)
 8009dec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009df0:	84fb      	strh	r3, [r7, #38]	; 0x26
		debug_t.motor[2] = motor[2];
 8009df2:	4b49      	ldr	r3, [pc, #292]	; (8009f18 <evaluateCommand+0x13a4>)
 8009df4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009df8:	853b      	strh	r3, [r7, #40]	; 0x28
		debug_t.motor[3] = motor[3];
 8009dfa:	4b47      	ldr	r3, [pc, #284]	; (8009f18 <evaluateCommand+0x13a4>)
 8009dfc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009e00:	857b      	strh	r3, [r7, #42]	; 0x2a

		s_struct((uint8_t*)&debug_t, 41);
 8009e02:	1d3b      	adds	r3, r7, #4
 8009e04:	2129      	movs	r1, #41	; 0x29
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fe fd63 	bl	80088d2 <s_struct>
		}
		break;
 8009e0c:	e136      	b.n	800a07c <evaluateCommand+0x1508>

		case MSP_ACC_CALIBRATION:
			if(!f.ARMED)
 8009e0e:	4b3c      	ldr	r3, [pc, #240]	; (8009f00 <evaluateCommand+0x138c>)
 8009e10:	785b      	ldrb	r3, [r3, #1]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f040 812f 	bne.w	800a076 <evaluateCommand+0x1502>
			{
				calibratingA=512;
 8009e18:	4b40      	ldr	r3, [pc, #256]	; (8009f1c <evaluateCommand+0x13a8>)
 8009e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e1e:	801a      	strh	r2, [r3, #0]
				f.CALIBRATE_ACC = 1;
 8009e20:	4b37      	ldr	r3, [pc, #220]	; (8009f00 <evaluateCommand+0x138c>)
 8009e22:	2201      	movs	r2, #1
 8009e24:	711a      	strb	r2, [r3, #4]
			}
			break;
 8009e26:	e126      	b.n	800a076 <evaluateCommand+0x1502>

		case MSP_MAG_CALIBRATION:
			if(!f.ARMED)
 8009e28:	4b35      	ldr	r3, [pc, #212]	; (8009f00 <evaluateCommand+0x138c>)
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f040 8124 	bne.w	800a07a <evaluateCommand+0x1506>
			{
				f.CALIBRATE_MAG=!f.CALIBRATE_MAG;
 8009e32:	4b33      	ldr	r3, [pc, #204]	; (8009f00 <evaluateCommand+0x138c>)
 8009e34:	7cdb      	ldrb	r3, [r3, #19]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	bf0c      	ite	eq
 8009e3a:	2301      	moveq	r3, #1
 8009e3c:	2300      	movne	r3, #0
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	461a      	mov	r2, r3
 8009e42:	4b2f      	ldr	r3, [pc, #188]	; (8009f00 <evaluateCommand+0x138c>)
 8009e44:	74da      	strb	r2, [r3, #19]
			}
			break;
 8009e46:	e118      	b.n	800a07a <evaluateCommand+0x1506>

		case MSP_TRIM_UP:
			MSP_TRIM[PITCH] += 1;
 8009e48:	4b35      	ldr	r3, [pc, #212]	; (8009f20 <evaluateCommand+0x13ac>)
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	4a34      	ldr	r2, [pc, #208]	; (8009f20 <evaluateCommand+0x13ac>)
 8009e50:	6053      	str	r3, [r2, #4]
			break;
 8009e52:	e113      	b.n	800a07c <evaluateCommand+0x1508>

		case MSP_TRIM_DOWN:
			MSP_TRIM[PITCH] -= 1;
 8009e54:	4b32      	ldr	r3, [pc, #200]	; (8009f20 <evaluateCommand+0x13ac>)
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	4a31      	ldr	r2, [pc, #196]	; (8009f20 <evaluateCommand+0x13ac>)
 8009e5c:	6053      	str	r3, [r2, #4]
			break;
 8009e5e:	e10d      	b.n	800a07c <evaluateCommand+0x1508>

		case MSP_TRIM_LEFT:
			MSP_TRIM[ROLL] -= 1;
 8009e60:	4b2f      	ldr	r3, [pc, #188]	; (8009f20 <evaluateCommand+0x13ac>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	4a2e      	ldr	r2, [pc, #184]	; (8009f20 <evaluateCommand+0x13ac>)
 8009e68:	6013      	str	r3, [r2, #0]
			break;
 8009e6a:	e107      	b.n	800a07c <evaluateCommand+0x1508>

		case MSP_TRIM_RIGHT:
			MSP_TRIM[ROLL] += 1;
 8009e6c:	4b2c      	ldr	r3, [pc, #176]	; (8009f20 <evaluateCommand+0x13ac>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	4a2b      	ldr	r2, [pc, #172]	; (8009f20 <evaluateCommand+0x13ac>)
 8009e74:	6013      	str	r3, [r2, #0]
			break;
 8009e76:	e101      	b.n	800a07c <evaluateCommand+0x1508>

		case TELEMERY_PID_SAVE:
			ledToggle(RGB_BLUE);
 8009e78:	2004      	movs	r0, #4
 8009e7a:	f001 fcbb 	bl	800b7f4 <ledToggle>
			writeFloat(0, posholdPID_PARAM.kP);
 8009e7e:	4b29      	ldr	r3, [pc, #164]	; (8009f24 <evaluateCommand+0x13b0>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4619      	mov	r1, r3
 8009e84:	2000      	movs	r0, #0
 8009e86:	f7f7 fe07 	bl	8001a98 <writeFloat>
			writeFloat(4, posholdPID_PARAM.kI);
 8009e8a:	4b26      	ldr	r3, [pc, #152]	; (8009f24 <evaluateCommand+0x13b0>)
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	2004      	movs	r0, #4
 8009e92:	f7f7 fe01 	bl	8001a98 <writeFloat>
			writeFloat(8, poshold_ratePID_PARAM.kP);
 8009e96:	4b24      	ldr	r3, [pc, #144]	; (8009f28 <evaluateCommand+0x13b4>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	2008      	movs	r0, #8
 8009e9e:	f7f7 fdfb 	bl	8001a98 <writeFloat>
			writeFloat(12, poshold_ratePID_PARAM.kI);
 8009ea2:	4b21      	ldr	r3, [pc, #132]	; (8009f28 <evaluateCommand+0x13b4>)
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	200c      	movs	r0, #12
 8009eaa:	f7f7 fdf5 	bl	8001a98 <writeFloat>
			writeFloat(16, poshold_ratePID_PARAM.kD);
 8009eae:	4b1e      	ldr	r3, [pc, #120]	; (8009f28 <evaluateCommand+0x13b4>)
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	2010      	movs	r0, #16
 8009eb6:	f7f7 fdef 	bl	8001a98 <writeFloat>
			writeFloat(20, navPID_PARAM.kP);
 8009eba:	4b1c      	ldr	r3, [pc, #112]	; (8009f2c <evaluateCommand+0x13b8>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	2014      	movs	r0, #20
 8009ec2:	f7f7 fde9 	bl	8001a98 <writeFloat>
			writeFloat(24, navPID_PARAM.kI);
 8009ec6:	4b19      	ldr	r3, [pc, #100]	; (8009f2c <evaluateCommand+0x13b8>)
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	2018      	movs	r0, #24
 8009ece:	f7f7 fde3 	bl	8001a98 <writeFloat>
			writeFloat(28, navPID_PARAM.kD);
 8009ed2:	4b16      	ldr	r3, [pc, #88]	; (8009f2c <evaluateCommand+0x13b8>)
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	201c      	movs	r0, #28
 8009eda:	f7f7 fddd 	bl	8001a98 <writeFloat>
			writeFloat(32, posholdPID_PARAM.Imax);
 8009ede:	4b11      	ldr	r3, [pc, #68]	; (8009f24 <evaluateCommand+0x13b0>)
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	2020      	movs	r0, #32
 8009ee6:	f7f7 fdd7 	bl	8001a98 <writeFloat>
			for(int i = 0; i < 3; i++){
 8009eea:	2300      	movs	r3, #0
 8009eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ef0:	e096      	b.n	800a020 <evaluateCommand+0x14ac>
 8009ef2:	bf00      	nop
 8009ef4:	20000acc 	.word	0x20000acc
 8009ef8:	20000264 	.word	0x20000264
 8009efc:	20000000 	.word	0x20000000
 8009f00:	20000ed4 	.word	0x20000ed4
 8009f04:	20000d40 	.word	0x20000d40
 8009f08:	20000260 	.word	0x20000260
 8009f0c:	20000ef0 	.word	0x20000ef0
 8009f10:	20000e20 	.word	0x20000e20
 8009f14:	41200000 	.word	0x41200000
 8009f18:	20000cc8 	.word	0x20000cc8
 8009f1c:	20000008 	.word	0x20000008
 8009f20:	20000664 	.word	0x20000664
 8009f24:	20000c64 	.word	0x20000c64
 8009f28:	20000b68 	.word	0x20000b68
 8009f2c:	20000b20 	.word	0x20000b20
				writeFloat( 36+(4*i), pid.kp1[i]);
 8009f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f34:	3309      	adds	r3, #9
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4618      	mov	r0, r3
 8009f3a:	4a52      	ldr	r2, [pc, #328]	; (800a084 <evaluateCommand+0x1510>)
 8009f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f40:	3304      	adds	r3, #4
 8009f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f46:	4619      	mov	r1, r3
 8009f48:	f7f7 fda6 	bl	8001a98 <writeFloat>
				writeFloat( 48+(4*i), pid.ki1[i]);
 8009f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f50:	330c      	adds	r3, #12
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4618      	mov	r0, r3
 8009f56:	4a4b      	ldr	r2, [pc, #300]	; (800a084 <evaluateCommand+0x1510>)
 8009f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f5c:	3310      	adds	r3, #16
 8009f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f62:	4619      	mov	r1, r3
 8009f64:	f7f7 fd98 	bl	8001a98 <writeFloat>
				writeFloat( 60+(4*i), pid.kp2[i]);
 8009f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f6c:	330f      	adds	r3, #15
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4618      	mov	r0, r3
 8009f72:	4a44      	ldr	r2, [pc, #272]	; (800a084 <evaluateCommand+0x1510>)
 8009f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f78:	3306      	adds	r3, #6
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	4619      	mov	r1, r3
 8009f82:	f7f7 fd89 	bl	8001a98 <writeFloat>
				writeFloat( 72+(4*i), pid.ki2[i]);
 8009f86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f8a:	3312      	adds	r3, #18
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4618      	mov	r0, r3
 8009f90:	4a3c      	ldr	r2, [pc, #240]	; (800a084 <evaluateCommand+0x1510>)
 8009f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f96:	3312      	adds	r3, #18
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	f7f7 fd7a 	bl	8001a98 <writeFloat>
				writeFloat( 84+(4*i), pid.kd2[i]);
 8009fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fa8:	3315      	adds	r3, #21
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4618      	mov	r0, r3
 8009fae:	4a35      	ldr	r2, [pc, #212]	; (800a084 <evaluateCommand+0x1510>)
 8009fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fb4:	331c      	adds	r3, #28
 8009fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	f7f7 fd6c 	bl	8001a98 <writeFloat>

				writeFloat( 96+(4*i), pid.kp_rate[i]);
 8009fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fc4:	3318      	adds	r3, #24
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4618      	mov	r0, r3
 8009fca:	4a2e      	ldr	r2, [pc, #184]	; (800a084 <evaluateCommand+0x1510>)
 8009fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fd0:	330a      	adds	r3, #10
 8009fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	f7f7 fd5e 	bl	8001a98 <writeFloat>
				writeFloat(108+(4*i), pid.ki_rate[i]);
 8009fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fe0:	331b      	adds	r3, #27
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	4a27      	ldr	r2, [pc, #156]	; (800a084 <evaluateCommand+0x1510>)
 8009fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fec:	3316      	adds	r3, #22
 8009fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	f7f7 fd50 	bl	8001a98 <writeFloat>
				writeFloat(120+(4*i), pid.kd_rate[i]);
 8009ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ffc:	331e      	adds	r3, #30
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4618      	mov	r0, r3
 800a002:	4a20      	ldr	r2, [pc, #128]	; (800a084 <evaluateCommand+0x1510>)
 800a004:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a008:	331e      	adds	r3, #30
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	4619      	mov	r1, r3
 800a012:	f7f7 fd41 	bl	8001a98 <writeFloat>
			for(int i = 0; i < 3; i++){
 800a016:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a01a:	3301      	adds	r3, #1
 800a01c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a020:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a024:	2b02      	cmp	r3, #2
 800a026:	dd83      	ble.n	8009f30 <evaluateCommand+0x13bc>
			}
			writeFloat(132, magBias[0]);
 800a028:	4b17      	ldr	r3, [pc, #92]	; (800a088 <evaluateCommand+0x1514>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4619      	mov	r1, r3
 800a02e:	2084      	movs	r0, #132	; 0x84
 800a030:	f7f7 fd32 	bl	8001a98 <writeFloat>
			writeFloat(136, magBias[1]);
 800a034:	4b14      	ldr	r3, [pc, #80]	; (800a088 <evaluateCommand+0x1514>)
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	4619      	mov	r1, r3
 800a03a:	2088      	movs	r0, #136	; 0x88
 800a03c:	f7f7 fd2c 	bl	8001a98 <writeFloat>
			writeFloat(140, magBias[2]);
 800a040:	4b11      	ldr	r3, [pc, #68]	; (800a088 <evaluateCommand+0x1514>)
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	4619      	mov	r1, r3
 800a046:	208c      	movs	r0, #140	; 0x8c
 800a048:	f7f7 fd26 	bl	8001a98 <writeFloat>
			writeFloat(144, magScale[0]);
 800a04c:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <evaluateCommand+0x1518>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4619      	mov	r1, r3
 800a052:	2090      	movs	r0, #144	; 0x90
 800a054:	f7f7 fd20 	bl	8001a98 <writeFloat>
			writeFloat(148, magScale[1]);
 800a058:	4b0c      	ldr	r3, [pc, #48]	; (800a08c <evaluateCommand+0x1518>)
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	4619      	mov	r1, r3
 800a05e:	2094      	movs	r0, #148	; 0x94
 800a060:	f7f7 fd1a 	bl	8001a98 <writeFloat>
			writeFloat(152, magScale[2]);
 800a064:	4b09      	ldr	r3, [pc, #36]	; (800a08c <evaluateCommand+0x1518>)
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	4619      	mov	r1, r3
 800a06a:	2098      	movs	r0, #152	; 0x98
 800a06c:	f7f7 fd14 	bl	8001a98 <writeFloat>
			break;
 800a070:	e004      	b.n	800a07c <evaluateCommand+0x1508>

		default:
			//headSerialError();
			//tailSerialReply();
			break;
 800a072:	bf00      	nop
 800a074:	e002      	b.n	800a07c <evaluateCommand+0x1508>
			break;
 800a076:	bf00      	nop
 800a078:	e000      	b.n	800a07c <evaluateCommand+0x1508>
			break;
 800a07a:	bf00      	nop
	}

}
 800a07c:	bf00      	nop
 800a07e:	37ac      	adds	r7, #172	; 0xac
 800a080:	46bd      	mov	sp, r7
 800a082:	bd90      	pop	{r4, r7, pc}
 800a084:	200009b0 	.word	0x200009b0
 800a088:	20000344 	.word	0x20000344
 800a08c:	20000f00 	.word	0x20000f00

0800a090 <SerialSerialize>:

void SerialSerialize(uint8_t port,uint8_t a) {
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	460a      	mov	r2, r1
 800a09a:	71fb      	strb	r3, [r7, #7]
 800a09c:	4613      	mov	r3, r2
 800a09e:	71bb      	strb	r3, [r7, #6]
	uint8_t t = serialHeadTX[port];
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	4a0e      	ldr	r2, [pc, #56]	; (800a0dc <SerialSerialize+0x4c>)
 800a0a4:	5cd3      	ldrb	r3, [r2, r3]
 800a0a6:	73fb      	strb	r3, [r7, #15]
	if (++t >= TX_BUFFER_SIZE) t = 0;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	73fb      	strb	r3, [r7, #15]
 800a0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	da01      	bge.n	800a0ba <SerialSerialize+0x2a>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]
	serialBufferTX[t][port] = a;
 800a0ba:	7bfa      	ldrb	r2, [r7, #15]
 800a0bc:	79fb      	ldrb	r3, [r7, #7]
 800a0be:	4908      	ldr	r1, [pc, #32]	; (800a0e0 <SerialSerialize+0x50>)
 800a0c0:	0052      	lsls	r2, r2, #1
 800a0c2:	440a      	add	r2, r1
 800a0c4:	4413      	add	r3, r2
 800a0c6:	79ba      	ldrb	r2, [r7, #6]
 800a0c8:	701a      	strb	r2, [r3, #0]
	serialHeadTX[port] = t;
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
 800a0cc:	4903      	ldr	r1, [pc, #12]	; (800a0dc <SerialSerialize+0x4c>)
 800a0ce:	7bfa      	ldrb	r2, [r7, #15]
 800a0d0:	54ca      	strb	r2, [r1, r3]
}
 800a0d2:	bf00      	nop
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bc80      	pop	{r7}
 800a0da:	4770      	bx	lr
 800a0dc:	20000458 	.word	0x20000458
 800a0e0:	20000460 	.word	0x20000460

0800a0e4 <UartSendData>:

void UartSendData(uint8_t port)
{
 800a0e4:	b590      	push	{r4, r7, lr}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	71fb      	strb	r3, [r7, #7]
	uint8_t t = serialTailTX[port];
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	4a37      	ldr	r2, [pc, #220]	; (800a1d0 <UartSendData+0xec>)
 800a0f2:	5cd3      	ldrb	r3, [r2, r3]
 800a0f4:	73fb      	strb	r3, [r7, #15]
	switch(port){
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d01c      	beq.n	800a136 <UartSendData+0x52>
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d04b      	beq.n	800a198 <UartSendData+0xb4>
			serialTailTX[port] = t;
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
			serialHead_1 = 0;
			break;
	}
}
 800a100:	e061      	b.n	800a1c6 <UartSendData+0xe2>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 800a102:	7bfb      	ldrb	r3, [r7, #15]
 800a104:	3301      	adds	r3, #1
 800a106:	73fb      	strb	r3, [r7, #15]
 800a108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	da01      	bge.n	800a114 <UartSendData+0x30>
 800a110:	2300      	movs	r3, #0
 800a112:	73fb      	strb	r3, [r7, #15]
				serialBufTx_0[serialHead_0++] = serialBufferTX[t][port];
 800a114:	7bf9      	ldrb	r1, [r7, #15]
 800a116:	79fa      	ldrb	r2, [r7, #7]
 800a118:	4b2e      	ldr	r3, [pc, #184]	; (800a1d4 <UartSendData+0xf0>)
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	1c58      	adds	r0, r3, #1
 800a120:	b2c4      	uxtb	r4, r0
 800a122:	482c      	ldr	r0, [pc, #176]	; (800a1d4 <UartSendData+0xf0>)
 800a124:	7004      	strb	r4, [r0, #0]
 800a126:	461c      	mov	r4, r3
 800a128:	482b      	ldr	r0, [pc, #172]	; (800a1d8 <UartSendData+0xf4>)
 800a12a:	004b      	lsls	r3, r1, #1
 800a12c:	4403      	add	r3, r0
 800a12e:	4413      	add	r3, r2
 800a130:	781a      	ldrb	r2, [r3, #0]
 800a132:	4b2a      	ldr	r3, [pc, #168]	; (800a1dc <UartSendData+0xf8>)
 800a134:	551a      	strb	r2, [r3, r4]
			while (serialHeadTX[port] != t)
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	4a29      	ldr	r2, [pc, #164]	; (800a1e0 <UartSendData+0xfc>)
 800a13a:	5cd3      	ldrb	r3, [r2, r3]
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	7bfa      	ldrb	r2, [r7, #15]
 800a140:	429a      	cmp	r2, r3
 800a142:	d1de      	bne.n	800a102 <UartSendData+0x1e>
			serialTailTX[port] = t;
 800a144:	79fb      	ldrb	r3, [r7, #7]
 800a146:	4922      	ldr	r1, [pc, #136]	; (800a1d0 <UartSendData+0xec>)
 800a148:	7bfa      	ldrb	r2, [r7, #15]
 800a14a:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART1, serialBufTx_0, serialHead_0);
 800a14c:	4b21      	ldr	r3, [pc, #132]	; (800a1d4 <UartSendData+0xf0>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	461a      	mov	r2, r3
 800a154:	4921      	ldr	r1, [pc, #132]	; (800a1dc <UartSendData+0xf8>)
 800a156:	2000      	movs	r0, #0
 800a158:	f002 f810 	bl	800c17c <uartWriteIT>
			serialHead_0 = 0;
 800a15c:	4b1d      	ldr	r3, [pc, #116]	; (800a1d4 <UartSendData+0xf0>)
 800a15e:	2200      	movs	r2, #0
 800a160:	701a      	strb	r2, [r3, #0]
			break;
 800a162:	e030      	b.n	800a1c6 <UartSendData+0xe2>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 800a164:	7bfb      	ldrb	r3, [r7, #15]
 800a166:	3301      	adds	r3, #1
 800a168:	73fb      	strb	r3, [r7, #15]
 800a16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	da01      	bge.n	800a176 <UartSendData+0x92>
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
				serialBufTx_1[serialHead_1++] = serialBufferTX[t][port];
 800a176:	7bf9      	ldrb	r1, [r7, #15]
 800a178:	79fa      	ldrb	r2, [r7, #7]
 800a17a:	4b1a      	ldr	r3, [pc, #104]	; (800a1e4 <UartSendData+0x100>)
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	1c58      	adds	r0, r3, #1
 800a182:	b2c4      	uxtb	r4, r0
 800a184:	4817      	ldr	r0, [pc, #92]	; (800a1e4 <UartSendData+0x100>)
 800a186:	7004      	strb	r4, [r0, #0]
 800a188:	461c      	mov	r4, r3
 800a18a:	4813      	ldr	r0, [pc, #76]	; (800a1d8 <UartSendData+0xf4>)
 800a18c:	004b      	lsls	r3, r1, #1
 800a18e:	4403      	add	r3, r0
 800a190:	4413      	add	r3, r2
 800a192:	781a      	ldrb	r2, [r3, #0]
 800a194:	4b14      	ldr	r3, [pc, #80]	; (800a1e8 <UartSendData+0x104>)
 800a196:	551a      	strb	r2, [r3, r4]
			while (serialHeadTX[port] != t)
 800a198:	79fb      	ldrb	r3, [r7, #7]
 800a19a:	4a11      	ldr	r2, [pc, #68]	; (800a1e0 <UartSendData+0xfc>)
 800a19c:	5cd3      	ldrb	r3, [r2, r3]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	7bfa      	ldrb	r2, [r7, #15]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d1de      	bne.n	800a164 <UartSendData+0x80>
			serialTailTX[port] = t;
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	4909      	ldr	r1, [pc, #36]	; (800a1d0 <UartSendData+0xec>)
 800a1aa:	7bfa      	ldrb	r2, [r7, #15]
 800a1ac:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
 800a1ae:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <UartSendData+0x100>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	490c      	ldr	r1, [pc, #48]	; (800a1e8 <UartSendData+0x104>)
 800a1b8:	2001      	movs	r0, #1
 800a1ba:	f001 ffdf 	bl	800c17c <uartWriteIT>
			serialHead_1 = 0;
 800a1be:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <UartSendData+0x100>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	701a      	strb	r2, [r3, #0]
			break;
 800a1c4:	bf00      	nop
}
 800a1c6:	bf00      	nop
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd90      	pop	{r4, r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	2000045c 	.word	0x2000045c
 800a1d4:	20000660 	.word	0x20000660
 800a1d8:	20000460 	.word	0x20000460
 800a1dc:	20000560 	.word	0x20000560
 800a1e0:	20000458 	.word	0x20000458
 800a1e4:	20000661 	.word	0x20000661
 800a1e8:	200005e0 	.word	0x200005e0

0800a1ec <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800a1f0:	4b1b      	ldr	r3, [pc, #108]	; (800a260 <cliInit+0x74>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800a1f6:	4b1a      	ldr	r3, [pc, #104]	; (800a260 <cliInit+0x74>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 800a1fc:	4b18      	ldr	r3, [pc, #96]	; (800a260 <cliInit+0x74>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800a202:	4b17      	ldr	r3, [pc, #92]	; (800a260 <cliInit+0x74>)
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800a20a:	4b15      	ldr	r3, [pc, #84]	; (800a260 <cliInit+0x74>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800a212:	4b13      	ldr	r3, [pc, #76]	; (800a260 <cliInit+0x74>)
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800a21a:	4b11      	ldr	r3, [pc, #68]	; (800a260 <cliInit+0x74>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800a222:	4b0f      	ldr	r3, [pc, #60]	; (800a260 <cliInit+0x74>)
 800a224:	4a0f      	ldr	r2, [pc, #60]	; (800a264 <cliInit+0x78>)
 800a226:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800a22a:	4b0d      	ldr	r3, [pc, #52]	; (800a260 <cliInit+0x74>)
 800a22c:	4a0e      	ldr	r2, [pc, #56]	; (800a268 <cliInit+0x7c>)
 800a22e:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800a232:	4b0b      	ldr	r3, [pc, #44]	; (800a260 <cliInit+0x74>)
 800a234:	4a0d      	ldr	r2, [pc, #52]	; (800a26c <cliInit+0x80>)
 800a236:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800a23a:	4b09      	ldr	r3, [pc, #36]	; (800a260 <cliInit+0x74>)
 800a23c:	4a0c      	ldr	r2, [pc, #48]	; (800a270 <cliInit+0x84>)
 800a23e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 800a242:	4807      	ldr	r0, [pc, #28]	; (800a260 <cliInit+0x74>)
 800a244:	f000 fb5c 	bl	800a900 <cliLineClean>


  cliAdd("help", cliShowList);
 800a248:	490a      	ldr	r1, [pc, #40]	; (800a274 <cliInit+0x88>)
 800a24a:	480b      	ldr	r0, [pc, #44]	; (800a278 <cliInit+0x8c>)
 800a24c:	f000 fe0c 	bl	800ae68 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800a250:	490a      	ldr	r1, [pc, #40]	; (800a27c <cliInit+0x90>)
 800a252:	480b      	ldr	r0, [pc, #44]	; (800a280 <cliInit+0x94>)
 800a254:	f000 fe08 	bl	800ae68 <cliAdd>

  return true;
 800a258:	2301      	movs	r3, #1
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	20000f18 	.word	0x20000f18
 800a264:	0800ad05 	.word	0x0800ad05
 800a268:	0800ad55 	.word	0x0800ad55
 800a26c:	0800ada5 	.word	0x0800ada5
 800a270:	0800ade9 	.word	0x0800ade9
 800a274:	0800aefd 	.word	0x0800aefd
 800a278:	08019c60 	.word	0x08019c60
 800a27c:	0800af6d 	.word	0x0800af6d
 800a280:	08019c68 	.word	0x08019c68

0800a284 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 800a290:	4a0a      	ldr	r2, [pc, #40]	; (800a2bc <cliOpen+0x38>)
 800a292:	79fb      	ldrb	r3, [r7, #7]
 800a294:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800a296:	4a09      	ldr	r2, [pc, #36]	; (800a2bc <cliOpen+0x38>)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 800a29c:	79fb      	ldrb	r3, [r7, #7]
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f001 fda7 	bl	800bdf4 <uartOpen>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4b04      	ldr	r3, [pc, #16]	; (800a2bc <cliOpen+0x38>)
 800a2ac:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800a2ae:	4b03      	ldr	r3, [pc, #12]	; (800a2bc <cliOpen+0x38>)
 800a2b0:	7a1b      	ldrb	r3, [r3, #8]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000f18 	.word	0x20000f18

0800a2c0 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800a2c8:	4b34      	ldr	r3, [pc, #208]	; (800a39c <cliShowLog+0xdc>)
 800a2ca:	7a5b      	ldrb	r3, [r3, #9]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d061      	beq.n	800a394 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	7a98      	ldrb	r0, [r3, #10]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800a2da:	461a      	mov	r2, r3
 800a2dc:	4930      	ldr	r1, [pc, #192]	; (800a3a0 <cliShowLog+0xe0>)
 800a2de:	f001 ff87 	bl	800c1f0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	7a98      	ldrb	r0, [r3, #10]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	492d      	ldr	r1, [pc, #180]	; (800a3a4 <cliShowLog+0xe4>)
 800a2f0:	f001 ff7e 	bl	800c1f0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	7a98      	ldrb	r0, [r3, #10]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800a2fe:	461a      	mov	r2, r3
 800a300:	4929      	ldr	r1, [pc, #164]	; (800a3a8 <cliShowLog+0xe8>)
 800a302:	f001 ff75 	bl	800c1f0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	7a98      	ldrb	r0, [r3, #10]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a310:	461a      	mov	r2, r3
 800a312:	4926      	ldr	r1, [pc, #152]	; (800a3ac <cliShowLog+0xec>)
 800a314:	f001 ff6c 	bl	800c1f0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	7a98      	ldrb	r0, [r3, #10]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800a322:	461a      	mov	r2, r3
 800a324:	4922      	ldr	r1, [pc, #136]	; (800a3b0 <cliShowLog+0xf0>)
 800a326:	f001 ff63 	bl	800c1f0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	7a98      	ldrb	r0, [r3, #10]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a334:	461a      	mov	r2, r3
 800a336:	491f      	ldr	r1, [pc, #124]	; (800a3b4 <cliShowLog+0xf4>)
 800a338:	f001 ff5a 	bl	800c1f0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	7a98      	ldrb	r0, [r3, #10]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a346:	461a      	mov	r2, r3
 800a348:	491b      	ldr	r1, [pc, #108]	; (800a3b8 <cliShowLog+0xf8>)
 800a34a:	f001 ff51 	bl	800c1f0 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 800a34e:	2300      	movs	r3, #0
 800a350:	60fb      	str	r3, [r7, #12]
 800a352:	e012      	b.n	800a37a <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	7a98      	ldrb	r0, [r3, #10]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	4613      	mov	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	00da      	lsls	r2, r3, #3
 800a362:	1ad2      	subs	r2, r2, r3
 800a364:	f502 73cc 	add.w	r3, r2, #408	; 0x198
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	4413      	add	r3, r2
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	4913      	ldr	r1, [pc, #76]	; (800a3bc <cliShowLog+0xfc>)
 800a370:	f001 ff3e 	bl	800c1f0 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	3301      	adds	r3, #1
 800a378:	60fb      	str	r3, [r7, #12]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a380:	461a      	mov	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	4293      	cmp	r3, r2
 800a386:	dbe5      	blt.n	800a354 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	7a9b      	ldrb	r3, [r3, #10]
 800a38c:	490c      	ldr	r1, [pc, #48]	; (800a3c0 <cliShowLog+0x100>)
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 ff2e 	bl	800c1f0 <uartPrintf>
  }
}
 800a394:	bf00      	nop
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	20000f18 	.word	0x20000f18
 800a3a0:	08019c6c 	.word	0x08019c6c
 800a3a4:	08019c7c 	.word	0x08019c7c
 800a3a8:	08019c8c 	.word	0x08019c8c
 800a3ac:	08019c9c 	.word	0x08019c9c
 800a3b0:	08019cac 	.word	0x08019cac
 800a3b4:	08019cbc 	.word	0x08019cbc
 800a3b8:	08019ccc 	.word	0x08019ccc
 800a3bc:	08019cdc 	.word	0x08019cdc
 800a3c0:	08019cec 	.word	0x08019cec

0800a3c4 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	4906      	ldr	r1, [pc, #24]	; (800a3ec <cliShowPrompt+0x28>)
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f001 ff0c 	bl	800c1f0 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	4904      	ldr	r1, [pc, #16]	; (800a3f0 <cliShowPrompt+0x2c>)
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f001 ff06 	bl	800c1f0 <uartPrintf>
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	08019cf0 	.word	0x08019cf0
 800a3f0:	08019cf4 	.word	0x08019cf4

0800a3f4 <cliMain>:

bool cliMain(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800a3f8:	4b0e      	ldr	r3, [pc, #56]	; (800a434 <cliMain+0x40>)
 800a3fa:	7a1b      	ldrb	r3, [r3, #8]
 800a3fc:	f083 0301 	eor.w	r3, r3, #1
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <cliMain+0x16>
  {
    return false;
 800a406:	2300      	movs	r3, #0
 800a408:	e012      	b.n	800a430 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 800a40a:	4b0a      	ldr	r3, [pc, #40]	; (800a434 <cliMain+0x40>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 fdf0 	bl	800bff4 <uartAvailable>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d009      	beq.n	800a42e <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800a41a:	4b06      	ldr	r3, [pc, #24]	; (800a434 <cliMain+0x40>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 fe4c 	bl	800c0bc <uartRead>
 800a424:	4603      	mov	r3, r0
 800a426:	4619      	mov	r1, r3
 800a428:	4802      	ldr	r0, [pc, #8]	; (800a434 <cliMain+0x40>)
 800a42a:	f000 f805 	bl	800a438 <cliUpdate>
  }

  return true;
 800a42e:	2301      	movs	r3, #1
}
 800a430:	4618      	mov	r0, r3
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000f18 	.word	0x20000f18

0800a438 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08c      	sub	sp, #48	; 0x30
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 800a444:	2300      	movs	r3, #0
 800a446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a450:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	7c1b      	ldrb	r3, [r3, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	f040 8165 	bne.w	800a726 <cliUpdate+0x2ee>
  {
    switch(rx_data)
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	2b0d      	cmp	r3, #13
 800a460:	d009      	beq.n	800a476 <cliUpdate+0x3e>
 800a462:	2b0d      	cmp	r3, #13
 800a464:	dc02      	bgt.n	800a46c <cliUpdate+0x34>
 800a466:	2b08      	cmp	r3, #8
 800a468:	d065      	beq.n	800a536 <cliUpdate+0xfe>
 800a46a:	e0d4      	b.n	800a616 <cliUpdate+0x1de>
 800a46c:	2b1b      	cmp	r3, #27
 800a46e:	d01c      	beq.n	800a4aa <cliUpdate+0x72>
 800a470:	2b7f      	cmp	r3, #127	; 0x7f
 800a472:	d01e      	beq.n	800a4b2 <cliUpdate+0x7a>
 800a474:	e0cf      	b.n	800a616 <cliUpdate+0x1de>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d005      	beq.n	800a48c <cliUpdate+0x54>
        {
          cliLineAdd(p_cli);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fa56 	bl	800a932 <cliLineAdd>
          cliRunCmd(p_cli);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fb42 	bl	800ab10 <cliRunCmd>
        }

        line->count = 0;
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff ff8e 	bl	800a3c4 <cliShowPrompt>
        break;
 800a4a8:	e144      	b.n	800a734 <cliUpdate+0x2fc>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	741a      	strb	r2, [r3, #16]
        break;
 800a4b0:	e140      	b.n	800a734 <cliUpdate+0x2fc>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	f080 8133 	bcs.w	800a72a <cliUpdate+0x2f2>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4d8:	e013      	b.n	800a502 <cliUpdate+0xca>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e4:	441a      	add	r2, r3
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	440b      	add	r3, r1
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	69f9      	ldr	r1, [r7, #28]
 800a4f6:	5c89      	ldrb	r1, [r1, r2]
 800a4f8:	69fa      	ldr	r2, [r7, #28]
 800a4fa:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fe:	3301      	adds	r3, #1
 800a500:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a502:	7efb      	ldrb	r3, [r7, #27]
 800a504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a506:	429a      	cmp	r2, r3
 800a508:	dbe7      	blt.n	800a4da <cliUpdate+0xa2>
          }

          line->count--;
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a510:	3b01      	subs	r3, #1
 800a512:	b2da      	uxtb	r2, r3
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a520:	461a      	mov	r2, r3
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	2100      	movs	r1, #0
 800a526:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	498e      	ldr	r1, [pc, #568]	; (800a768 <cliUpdate+0x330>)
 800a52e:	4618      	mov	r0, r3
 800a530:	f001 fe5e 	bl	800c1f0 <uartPrintf>
        }
        break;
 800a534:	e0f9      	b.n	800a72a <cliUpdate+0x2f2>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d055      	beq.n	800a5ec <cliUpdate+0x1b4>
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a546:	2b00      	cmp	r3, #0
 800a548:	d050      	beq.n	800a5ec <cliUpdate+0x1b4>
        {
          if (line->cursor == line->count)
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a556:	429a      	cmp	r2, r3
 800a558:	d10e      	bne.n	800a578 <cliUpdate+0x140>
          {
            line->count--;
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a560:	3b01      	subs	r3, #1
 800a562:	b2da      	uxtb	r2, r3
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a570:	461a      	mov	r2, r3
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	2100      	movs	r1, #0
 800a576:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a584:	429a      	cmp	r2, r3
 800a586:	d231      	bcs.n	800a5ec <cliUpdate+0x1b4>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a594:	1ad3      	subs	r3, r2, r3
 800a596:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 800a598:	2300      	movs	r3, #0
 800a59a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a59c:	e013      	b.n	800a5c6 <cliUpdate+0x18e>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	441a      	add	r2, r3
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	440b      	add	r3, r1
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	69f9      	ldr	r1, [r7, #28]
 800a5ba:	5c89      	ldrb	r1, [r1, r2]
 800a5bc:	69fa      	ldr	r2, [r7, #28]
 800a5be:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5c6:	7ebb      	ldrb	r3, [r7, #26]
 800a5c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	dbe7      	blt.n	800a59e <cliUpdate+0x166>
            }

            line->count--;
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 809b 	beq.w	800a72e <cliUpdate+0x2f6>
        {
          line->cursor--;
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5fe:	3b01      	subs	r3, #1
 800a600:	b2da      	uxtb	r2, r3
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	4957      	ldr	r1, [pc, #348]	; (800a76c <cliUpdate+0x334>)
 800a60e:	4618      	mov	r0, r3
 800a610:	f001 fdee 	bl	800c1f0 <uartPrintf>
        }
        break;
 800a614:	e08b      	b.n	800a72e <cliUpdate+0x2f6>


      default:
        if ((line->count + 1) < line->buf_len)
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a61c:	3301      	adds	r3, #1
 800a61e:	69fa      	ldr	r2, [r7, #28]
 800a620:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a624:	4293      	cmp	r3, r2
 800a626:	f280 8084 	bge.w	800a732 <cliUpdate+0x2fa>
        {
          if (line->cursor == line->count)
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a636:	429a      	cmp	r2, r3
 800a638:	d124      	bne.n	800a684 <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	1cf9      	adds	r1, r7, #3
 800a640:	2201      	movs	r2, #1
 800a642:	4618      	mov	r0, r3
 800a644:	f001 fd60 	bl	800c108 <uartWrite>

            line->buf[line->cursor] = rx_data;
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a64e:	461a      	mov	r2, r3
 800a650:	78f9      	ldrb	r1, [r7, #3]
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	5499      	strb	r1, [r3, r2]
            line->count++;
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a65c:	3301      	adds	r3, #1
 800a65e:	b2da      	uxtb	r2, r3
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a66c:	3301      	adds	r3, #1
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a67c:	461a      	mov	r2, r3
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	2100      	movs	r1, #0
 800a682:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a690:	429a      	cmp	r2, r3
 800a692:	d24e      	bcs.n	800a732 <cliUpdate+0x2fa>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a6a8:	e013      	b.n	800a6d2 <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	1e5a      	subs	r2, r3, #1
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	1acb      	subs	r3, r1, r3
 800a6c4:	69f9      	ldr	r1, [r7, #28]
 800a6c6:	5c89      	ldrb	r1, [r1, r2]
 800a6c8:	69fa      	ldr	r2, [r7, #28]
 800a6ca:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6d2:	7e7b      	ldrb	r3, [r7, #25]
 800a6d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	dbe7      	blt.n	800a6aa <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	78f9      	ldrb	r1, [r7, #3]
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	5499      	strb	r1, [r3, r2]
            line->count++;
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a6fe:	3301      	adds	r3, #1
 800a700:	b2da      	uxtb	r2, r3
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a70e:	461a      	mov	r2, r3
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	2100      	movs	r1, #0
 800a714:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	78fa      	ldrb	r2, [r7, #3]
 800a71c:	4914      	ldr	r1, [pc, #80]	; (800a770 <cliUpdate+0x338>)
 800a71e:	4618      	mov	r0, r3
 800a720:	f001 fd66 	bl	800c1f0 <uartPrintf>
          }
        }
        break;
 800a724:	e005      	b.n	800a732 <cliUpdate+0x2fa>
    }
  }
 800a726:	bf00      	nop
 800a728:	e004      	b.n	800a734 <cliUpdate+0x2fc>
        break;
 800a72a:	bf00      	nop
 800a72c:	e002      	b.n	800a734 <cliUpdate+0x2fc>
        break;
 800a72e:	bf00      	nop
 800a730:	e000      	b.n	800a734 <cliUpdate+0x2fc>
        break;
 800a732:	bf00      	nop

  switch(p_cli->state)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	7c1b      	ldrb	r3, [r3, #16]
 800a738:	3b01      	subs	r3, #1
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	f200 80d3 	bhi.w	800a8e6 <cliUpdate+0x4ae>
 800a740:	a201      	add	r2, pc, #4	; (adr r2, 800a748 <cliUpdate+0x310>)
 800a742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a746:	bf00      	nop
 800a748:	0800a759 	.word	0x0800a759
 800a74c:	0800a761 	.word	0x0800a761
 800a750:	0800a775 	.word	0x0800a775
 800a754:	0800a8dd 	.word	0x0800a8dd
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2202      	movs	r2, #2
 800a75c:	741a      	strb	r2, [r3, #16]
      break;
 800a75e:	e0c2      	b.n	800a8e6 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2203      	movs	r2, #3
 800a764:	741a      	strb	r2, [r3, #16]
      break;
 800a766:	e0be      	b.n	800a8e6 <cliUpdate+0x4ae>
 800a768:	08019cfc 	.word	0x08019cfc
 800a76c:	08019d04 	.word	0x08019d04
 800a770:	08019d0c 	.word	0x08019d0c

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800a77a:	78fb      	ldrb	r3, [r7, #3]
 800a77c:	2b44      	cmp	r3, #68	; 0x44
 800a77e:	d11a      	bne.n	800a7b6 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a786:	2b00      	cmp	r3, #0
 800a788:	d015      	beq.n	800a7b6 <cliUpdate+0x37e>
        {
          line->cursor--;
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a790:	3b01      	subs	r3, #1
 800a792:	b2da      	uxtb	r2, r3
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800a79a:	231b      	movs	r3, #27
 800a79c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800a79e:	235b      	movs	r3, #91	; 0x5b
 800a7a0:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800a7a2:	78fb      	ldrb	r3, [r7, #3]
 800a7a4:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	f107 010c 	add.w	r1, r7, #12
 800a7ae:	2203      	movs	r2, #3
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f001 fca9 	bl	800c108 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	2b43      	cmp	r3, #67	; 0x43
 800a7ba:	d11d      	bne.n	800a7f8 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->buf_len)
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d215      	bcs.n	800a7f8 <cliUpdate+0x3c0>
        {
          line->cursor++;
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	b2da      	uxtb	r2, r3
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800a7dc:	231b      	movs	r3, #27
 800a7de:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800a7e0:	235b      	movs	r3, #91	; 0x5b
 800a7e2:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	f107 010c 	add.w	r1, r7, #12
 800a7f0:	2203      	movs	r2, #3
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f001 fc88 	bl	800c108 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 800a7f8:	78fb      	ldrb	r3, [r7, #3]
 800a7fa:	2b41      	cmp	r3, #65	; 0x41
 800a7fc:	d10c      	bne.n	800a818 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800a7fe:	2101      	movs	r1, #1
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f8eb 	bl	800a9dc <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	781a      	ldrb	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a810:	4619      	mov	r1, r3
 800a812:	4610      	mov	r0, r2
 800a814:	f001 fcec 	bl	800c1f0 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	2b42      	cmp	r3, #66	; 0x42
 800a81c:	d10c      	bne.n	800a838 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 800a81e:	2100      	movs	r1, #0
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f8db 	bl	800a9dc <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	781a      	ldrb	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800a830:	4619      	mov	r1, r3
 800a832:	4610      	mov	r0, r2
 800a834:	f001 fcdc 	bl	800c1f0 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 800a838:	78fb      	ldrb	r3, [r7, #3]
 800a83a:	2b31      	cmp	r3, #49	; 0x31
 800a83c:	d10f      	bne.n	800a85e <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	7818      	ldrb	r0, [r3, #0]
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a848:	461a      	mov	r2, r3
 800a84a:	492b      	ldr	r1, [pc, #172]	; (800a8f8 <cliUpdate+0x4c0>)
 800a84c:	f001 fcd0 	bl	800c1f0 <uartPrintf>
        line->cursor = 0;
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2204      	movs	r2, #4
 800a85c:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	2b34      	cmp	r3, #52	; 0x34
 800a862:	d13f      	bne.n	800a8e4 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a870:	429a      	cmp	r2, r3
 800a872:	d210      	bcs.n	800a896 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a882:	b29b      	uxth	r3, r3
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	8afa      	ldrh	r2, [r7, #22]
 800a88e:	491b      	ldr	r1, [pc, #108]	; (800a8fc <cliUpdate+0x4c4>)
 800a890:	4618      	mov	r0, r3
 800a892:	f001 fcad 	bl	800c1f0 <uartPrintf>
        }
        if (line->cursor > line->count)
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d910      	bls.n	800a8c8 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	8afa      	ldrh	r2, [r7, #22]
 800a8c0:	490d      	ldr	r1, [pc, #52]	; (800a8f8 <cliUpdate+0x4c0>)
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f001 fc94 	bl	800c1f0 <uartPrintf>
        }
        line->cursor = line->count;
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2204      	movs	r2, #4
 800a8d8:	741a      	strb	r2, [r3, #16]
      }
      break;
 800a8da:	e003      	b.n	800a8e4 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	741a      	strb	r2, [r3, #16]
      break;
 800a8e2:	e000      	b.n	800a8e6 <cliUpdate+0x4ae>
      break;
 800a8e4:	bf00      	nop
  }



  cliShowLog(p_cli);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7ff fcea 	bl	800a2c0 <cliShowLog>

  return ret;
 800a8ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3730      	adds	r7, #48	; 0x30
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	08019d18 	.word	0x08019d18
 800a8fc:	08019d20 	.word	0x08019d20

0800a900 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	221f      	movs	r2, #31
 800a91c:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bc80      	pop	{r7}
 800a930:	4770      	bx	lr

0800a932 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 800a932:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a940:	461a      	mov	r2, r3
 800a942:	6879      	ldr	r1, [r7, #4]
 800a944:	4613      	mov	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	00da      	lsls	r2, r3, #3
 800a94c:	1ad2      	subs	r2, r2, r3
 800a94e:	188b      	adds	r3, r1, r2
 800a950:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f503 7409 	add.w	r4, r3, #548	; 0x224
 800a95a:	4694      	mov	ip, r2
 800a95c:	f104 0e20 	add.w	lr, r4, #32
 800a960:	4665      	mov	r5, ip
 800a962:	4626      	mov	r6, r4
 800a964:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a966:	6028      	str	r0, [r5, #0]
 800a968:	6069      	str	r1, [r5, #4]
 800a96a:	60aa      	str	r2, [r5, #8]
 800a96c:	60eb      	str	r3, [r5, #12]
 800a96e:	3410      	adds	r4, #16
 800a970:	f10c 0c10 	add.w	ip, ip, #16
 800a974:	4574      	cmp	r4, lr
 800a976:	d1f3      	bne.n	800a960 <cliLineAdd+0x2e>
 800a978:	4663      	mov	r3, ip
 800a97a:	4622      	mov	r2, r4
 800a97c:	8811      	ldrh	r1, [r2, #0]
 800a97e:	7892      	ldrb	r2, [r2, #2]
 800a980:	8019      	strh	r1, [r3, #0]
 800a982:	709a      	strb	r2, [r3, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d807      	bhi.n	800a99e <cliLineAdd+0x6c>
  {
    p_cli->hist_line_count++;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a994:	3301      	adds	r3, #1
 800a996:	b2da      	uxtb	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a9a4:	b25a      	sxtb	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	425a      	negs	r2, r3
 800a9b6:	f003 0303 	and.w	r3, r3, #3
 800a9ba:	f002 0203 	and.w	r2, r2, #3
 800a9be:	bf58      	it	pl
 800a9c0:	4253      	negpl	r3, r2
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 800a9d2:	bf00      	nop
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a9dc <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 8086 	beq.w	800ab00 <cliLineChange+0x124>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d008      	beq.n	800aa10 <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	7818      	ldrb	r0, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800aa08:	461a      	mov	r2, r3
 800aa0a:	493f      	ldr	r1, [pc, #252]	; (800ab08 <cliLineChange+0x12c>)
 800aa0c:	f001 fbf0 	bl	800c1f0 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d008      	beq.n	800aa2c <cliLineChange+0x50>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	7818      	ldrb	r0, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800aa24:	461a      	mov	r2, r3
 800aa26:	4939      	ldr	r1, [pc, #228]	; (800ab0c <cliLineChange+0x130>)
 800aa28:	f001 fbe2 	bl	800c1f0 <uartPrintf>
  }


  if (key_up == true)
 800aa2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d125      	bne.n	800aa80 <cliLineChange+0xa4>
  {
    if (p_cli->hist_line_new == true)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d006      	beq.n	800aa4c <cliLineChange+0x70>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800aa44:	b25a      	sxtb	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aa52:	461a      	mov	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800aa5a:	4413      	add	r3, r2
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800aa64:	fb93 f1f2 	sdiv	r1, r3, r2
 800aa68:	fb02 f201 	mul.w	r2, r2, r1
 800aa6c:	1a9b      	subs	r3, r3, r2
 800aa6e:	b25a      	sxtb	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aa7c:	73fb      	strb	r3, [r7, #15]
 800aa7e:	e013      	b.n	800aaa8 <cliLineChange+0xcc>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aa86:	3301      	adds	r3, #1
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800aa8e:	fb93 f1f2 	sdiv	r1, r3, r2
 800aa92:	fb02 f201 	mul.w	r2, r2, r1
 800aa96:	1a9b      	subs	r3, r3, r2
 800aa98:	b25a      	sxtb	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800aaa6:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800aaa8:	7bfa      	ldrb	r2, [r7, #15]
 800aaaa:	6879      	ldr	r1, [r7, #4]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	00da      	lsls	r2, r3, #3
 800aab6:	1ad2      	subs	r2, r2, r3
 800aab8:	1883      	adds	r3, r0, r2
 800aaba:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800aabe:	461c      	mov	r4, r3
 800aac0:	f501 7609 	add.w	r6, r1, #548	; 0x224
 800aac4:	f104 0c20 	add.w	ip, r4, #32
 800aac8:	4635      	mov	r5, r6
 800aaca:	4623      	mov	r3, r4
 800aacc:	6818      	ldr	r0, [r3, #0]
 800aace:	6859      	ldr	r1, [r3, #4]
 800aad0:	689a      	ldr	r2, [r3, #8]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aad6:	3410      	adds	r4, #16
 800aad8:	3610      	adds	r6, #16
 800aada:	4564      	cmp	r4, ip
 800aadc:	d1f4      	bne.n	800aac8 <cliLineChange+0xec>
 800aade:	4633      	mov	r3, r6
 800aae0:	4622      	mov	r2, r4
 800aae2:	8811      	ldrh	r1, [r2, #0]
 800aae4:	7892      	ldrb	r2, [r2, #2]
 800aae6:	8019      	strh	r1, [r3, #0]
 800aae8:	709a      	strb	r2, [r3, #2]
  p_cli->line.cursor = p_cli->line.count;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

  p_cli->hist_line_new = false;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800aafe:	e000      	b.n	800ab02 <cliLineChange+0x126>
    return;
 800ab00:	bf00      	nop
}
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab08:	08019d18 	.word	0x08019d18
 800ab0c:	08019d28 	.word	0x08019d28

0800ab10 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f851 	bl	800abc4 <cliParseArgs>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d046      	beq.n	800abb6 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 800ab28:	4825      	ldr	r0, [pc, #148]	; (800abc0 <cliRunCmd+0xb0>)
 800ab2a:	f000 f893 	bl	800ac54 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab34:	4618      	mov	r0, r3
 800ab36:	f000 f8b1 	bl	800ac9c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
 800ab3e:	e033      	b.n	800aba8 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	4413      	add	r3, r2
 800ab58:	3304      	adds	r3, #4
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	f7f5 fb08 	bl	8000170 <strcmp>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d11d      	bne.n	800aba2 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	4613      	mov	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	440b      	add	r3, r1
 800ab90:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	4798      	blx	r3
        break;
 800aba0:	e009      	b.n	800abb6 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3301      	adds	r3, #1
 800aba6:	60fb      	str	r3, [r7, #12]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800abae:	461a      	mov	r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4293      	cmp	r3, r2
 800abb4:	dbc4      	blt.n	800ab40 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800abb6:	7afb      	ldrb	r3, [r7, #11]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	08019d30 	.word	0x08019d30

0800abc4 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800abcc:	2300      	movs	r3, #0
 800abce:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  cmdline = (char *)p_cli->line.buf;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800abe2:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800abea:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800abec:	8afb      	ldrh	r3, [r7, #22]
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4413      	add	r3, r2
 800abf4:	2200      	movs	r2, #0
 800abf6:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800abf8:	4b15      	ldr	r3, [pc, #84]	; (800ac50 <cliParseArgs+0x8c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f107 0208 	add.w	r2, r7, #8
 800ac00:	4619      	mov	r1, r3
 800ac02:	6938      	ldr	r0, [r7, #16]
 800ac04:	f007 ff96 	bl	8012b34 <strtok_r>
 800ac08:	61b8      	str	r0, [r7, #24]
 800ac0a:	e010      	b.n	800ac2e <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800ac0c:	8afb      	ldrh	r3, [r7, #22]
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	82fa      	strh	r2, [r7, #22]
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4413      	add	r3, r2
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800ac1c:	4b0c      	ldr	r3, [pc, #48]	; (800ac50 <cliParseArgs+0x8c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f107 0208 	add.w	r2, r7, #8
 800ac24:	4619      	mov	r1, r3
 800ac26:	2000      	movs	r0, #0
 800ac28:	f007 ff84 	bl	8012b34 <strtok_r>
 800ac2c:	61b8      	str	r0, [r7, #24]
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1eb      	bne.n	800ac0c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	8afa      	ldrh	r2, [r7, #22]
 800ac38:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  if (argc > 0)
 800ac3c:	8afb      	ldrh	r3, [r7, #22]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <cliParseArgs+0x82>
  {
    ret = true;
 800ac42:	2301      	movs	r3, #1
 800ac44:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800ac46:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3720      	adds	r7, #32
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	2000002c 	.word	0x2000002c

0800ac54 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 800ac54:	b40f      	push	{r0, r1, r2, r3}
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800ac5c:	f107 031c 	add.w	r3, r7, #28
 800ac60:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800ac62:	4b0d      	ldr	r3, [pc, #52]	; (800ac98 <cliPrintf+0x44>)
 800ac64:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 255, fmt, arg);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f103 0011 	add.w	r0, r3, #17
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	69ba      	ldr	r2, [r7, #24]
 800ac70:	21ff      	movs	r1, #255	; 0xff
 800ac72:	f008 f81f 	bl	8012cb4 <vsniprintf>
 800ac76:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	7818      	ldrb	r0, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	3311      	adds	r3, #17
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	4619      	mov	r1, r3
 800ac84:	f001 fa40 	bl	800c108 <uartWrite>
}
 800ac88:	bf00      	nop
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac92:	b004      	add	sp, #16
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	20000f18 	.word	0x20000f18

0800ac9c <cliToUpper>:

void cliToUpper(char *str)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800aca4:	2300      	movs	r3, #0
 800aca6:	81fb      	strh	r3, [r7, #14]
 800aca8:	e018      	b.n	800acdc <cliToUpper+0x40>
  {
    str_ch = str[i];
 800acaa:	89fb      	ldrh	r3, [r7, #14]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	4413      	add	r3, r2
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 800acb4:	7b7b      	ldrb	r3, [r7, #13]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d014      	beq.n	800ace4 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800acba:	7b7b      	ldrb	r3, [r7, #13]
 800acbc:	2b60      	cmp	r3, #96	; 0x60
 800acbe:	d905      	bls.n	800accc <cliToUpper+0x30>
 800acc0:	7b7b      	ldrb	r3, [r7, #13]
 800acc2:	2b7a      	cmp	r3, #122	; 0x7a
 800acc4:	d802      	bhi.n	800accc <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800acc6:	7b7b      	ldrb	r3, [r7, #13]
 800acc8:	3b20      	subs	r3, #32
 800acca:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800accc:	89fb      	ldrh	r3, [r7, #14]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	4413      	add	r3, r2
 800acd2:	7b7a      	ldrb	r2, [r7, #13]
 800acd4:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800acd6:	89fb      	ldrh	r3, [r7, #14]
 800acd8:	3301      	adds	r3, #1
 800acda:	81fb      	strh	r3, [r7, #14]
 800acdc:	89fb      	ldrh	r3, [r7, #14]
 800acde:	2b0f      	cmp	r3, #15
 800ace0:	d9e3      	bls.n	800acaa <cliToUpper+0xe>
 800ace2:	e000      	b.n	800ace6 <cliToUpper+0x4a>
      break;
 800ace4:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800ace6:	89fb      	ldrh	r3, [r7, #14]
 800ace8:	2b10      	cmp	r3, #16
 800acea:	d105      	bne.n	800acf8 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800acec:	89fb      	ldrh	r3, [r7, #14]
 800acee:	3b01      	subs	r3, #1
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	4413      	add	r3, r2
 800acf4:	2200      	movs	r2, #0
 800acf6:	701a      	strb	r2, [r3, #0]
  }
}
 800acf8:	bf00      	nop
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bc80      	pop	{r7}
 800ad00:	4770      	bx	lr
	...

0800ad04 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800ad12:	4b0f      	ldr	r3, [pc, #60]	; (800ad50 <cliArgsGetData+0x4c>)
 800ad14:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800ad16:	79fb      	ldrb	r3, [r7, #7]
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d301      	bcc.n	800ad28 <cliArgsGetData+0x24>
  {
    return 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	e00e      	b.n	800ad46 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800ad2e:	79fb      	ldrb	r3, [r7, #7]
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2200      	movs	r2, #0
 800ad38:	2100      	movs	r1, #0
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f007 ff78 	bl	8012c30 <strtoul>
 800ad40:	4603      	mov	r3, r0
 800ad42:	60fb      	str	r3, [r7, #12]

  return ret;
 800ad44:	68fb      	ldr	r3, [r7, #12]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20000f18 	.word	0x20000f18

0800ad54 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800ad5e:	f04f 0300 	mov.w	r3, #0
 800ad62:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800ad64:	4b0e      	ldr	r3, [pc, #56]	; (800ada0 <cliArgsGetFloat+0x4c>)
 800ad66:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800ad68:	79fb      	ldrb	r3, [r7, #7]
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d302      	bcc.n	800ad7c <cliArgsGetFloat+0x28>
  {
    return 0;
 800ad76:	f04f 0300 	mov.w	r3, #0
 800ad7a:	e00c      	b.n	800ad96 <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800ad82:	79fb      	ldrb	r3, [r7, #7]
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f007 fe59 	bl	8012a44 <strtof>
 800ad92:	60f8      	str	r0, [r7, #12]

  return ret;
 800ad94:	68fb      	ldr	r3, [r7, #12]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	20000f18 	.word	0x20000f18

0800ada4 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	4603      	mov	r3, r0
 800adac:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800adb2:	4b0c      	ldr	r3, [pc, #48]	; (800ade4 <cliArgsGetStr+0x40>)
 800adb4:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800adb6:	79fb      	ldrb	r3, [r7, #7]
 800adb8:	b29a      	uxth	r2, r3
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d301      	bcc.n	800adc8 <cliArgsGetStr+0x24>
  {
    return 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	e008      	b.n	800adda <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800adce:	79fb      	ldrb	r3, [r7, #7]
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	60fb      	str	r3, [r7, #12]

  return ret;
 800add8:	68fb      	ldr	r3, [r7, #12]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	bc80      	pop	{r7}
 800ade2:	4770      	bx	lr
 800ade4:	20000f18 	.word	0x20000f18

0800ade8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	4603      	mov	r3, r0
 800adf0:	6039      	str	r1, [r7, #0]
 800adf2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 800adf8:	4b0f      	ldr	r3, [pc, #60]	; (800ae38 <cliArgsIsStr+0x50>)
 800adfa:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800adfc:	79fb      	ldrb	r3, [r7, #7]
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d301      	bcc.n	800ae0e <cliArgsIsStr+0x26>
  {
    return 0;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	e010      	b.n	800ae30 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6838      	ldr	r0, [r7, #0]
 800ae20:	f7f5 f9a6 	bl	8000170 <strcmp>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <cliArgsIsStr+0x46>
  {
    ret = true;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20000f18 	.word	0x20000f18

0800ae3c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800ae42:	4b08      	ldr	r3, [pc, #32]	; (800ae64 <cliKeepLoop+0x28>)
 800ae44:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f001 f8d2 	bl	800bff4 <uartAvailable>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <cliKeepLoop+0x1e>
  {
    return true;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e000      	b.n	800ae5c <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 800ae5a:	2300      	movs	r3, #0
  }
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	20000f18 	.word	0x20000f18

0800ae68 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800ae72:	2301      	movs	r3, #1
 800ae74:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800ae76:	4b20      	ldr	r3, [pc, #128]	; (800aef8 <cliAdd+0x90>)
 800ae78:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800ae80:	2b0f      	cmp	r3, #15
 800ae82:	d901      	bls.n	800ae88 <cliAdd+0x20>
  {
    return false;
 800ae84:	2300      	movs	r3, #0
 800ae86:	e032      	b.n	800aeee <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800ae8e:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800ae90:	89fa      	ldrh	r2, [r7, #14]
 800ae92:	4613      	mov	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	4413      	add	r3, r2
 800aea2:	3304      	adds	r3, #4
 800aea4:	6879      	ldr	r1, [r7, #4]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f006 ff90 	bl	8011dcc <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800aeac:	89fa      	ldrh	r2, [r7, #14]
 800aeae:	6939      	ldr	r1, [r7, #16]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4413      	add	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	440b      	add	r3, r1
 800aeba:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800aec2:	89fa      	ldrh	r2, [r7, #14]
 800aec4:	4613      	mov	r3, r2
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	4413      	add	r3, r2
 800aed4:	3304      	adds	r3, #4
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7ff fee0 	bl	800ac9c <cliToUpper>

  p_cli->cmd_count++;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800aee2:	3301      	adds	r3, #1
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3718      	adds	r7, #24
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20000f18 	.word	0x20000f18

0800aefc <cliShowList>:

void cliShowList(cli_args_t *args)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 800af04:	4b15      	ldr	r3, [pc, #84]	; (800af5c <cliShowList+0x60>)
 800af06:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 800af08:	4815      	ldr	r0, [pc, #84]	; (800af60 <cliShowList+0x64>)
 800af0a:	f7ff fea3 	bl	800ac54 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800af0e:	4815      	ldr	r0, [pc, #84]	; (800af64 <cliShowList+0x68>)
 800af10:	f7ff fea0 	bl	800ac54 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800af14:	2300      	movs	r3, #0
 800af16:	60fb      	str	r3, [r7, #12]
 800af18:	e012      	b.n	800af40 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	4613      	mov	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4413      	add	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	4413      	add	r3, r2
 800af2c:	3304      	adds	r3, #4
 800af2e:	4618      	mov	r0, r3
 800af30:	f7ff fe90 	bl	800ac54 <cliPrintf>
    cliPrintf("\r\n");
 800af34:	480a      	ldr	r0, [pc, #40]	; (800af60 <cliShowList+0x64>)
 800af36:	f7ff fe8d 	bl	800ac54 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	3301      	adds	r3, #1
 800af3e:	60fb      	str	r3, [r7, #12]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800af46:	461a      	mov	r2, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	4293      	cmp	r3, r2
 800af4c:	dbe5      	blt.n	800af1a <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800af4e:	4806      	ldr	r0, [pc, #24]	; (800af68 <cliShowList+0x6c>)
 800af50:	f7ff fe80 	bl	800ac54 <cliPrintf>
}
 800af54:	bf00      	nop
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20000f18 	.word	0x20000f18
 800af60:	08019d30 	.word	0x08019d30
 800af64:	08019d34 	.word	0x08019d34
 800af68:	08019d54 	.word	0x08019d54

0800af6c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08c      	sub	sp, #48	; 0x30
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 800af74:	2310      	movs	r3, #16
 800af76:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d103      	bne.n	800af94 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800af8c:	4840      	ldr	r0, [pc, #256]	; (800b090 <cliMemoryDump+0x124>)
 800af8e:	f7ff fe61 	bl	800ac54 <cliPrintf>
 800af92:	e07a      	b.n	800b08a <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	2b01      	cmp	r3, #1
 800af98:	dd09      	ble.n	800afae <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	3304      	adds	r3, #4
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2200      	movs	r2, #0
 800afa2:	2100      	movs	r1, #0
 800afa4:	4618      	mov	r0, r3
 800afa6:	f007 fe43 	bl	8012c30 <strtoul>
 800afaa:	4603      	mov	r3, r0
 800afac:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2200      	movs	r2, #0
 800afb4:	2100      	movs	r1, #0
 800afb6:	4618      	mov	r0, r3
 800afb8:	f007 fe3a 	bl	8012c30 <strtoul>
 800afbc:	4603      	mov	r3, r0
 800afbe:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 800afc4:	4833      	ldr	r0, [pc, #204]	; (800b094 <cliMemoryDump+0x128>)
 800afc6:	f7ff fe45 	bl	800ac54 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800afca:	2300      	movs	r3, #0
 800afcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afce:	e058      	b.n	800b082 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800afd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd2:	f003 0303 	and.w	r3, r3, #3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d104      	bne.n	800afe4 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	4619      	mov	r1, r3
 800afde:	482e      	ldr	r0, [pc, #184]	; (800b098 <cliMemoryDump+0x12c>)
 800afe0:	f7ff fe38 	bl	800ac54 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4619      	mov	r1, r3
 800afea:	482c      	ldr	r0, [pc, #176]	; (800b09c <cliMemoryDump+0x130>)
 800afec:	f7ff fe32 	bl	800ac54 <cliPrintf>

    if ((idx%4) == 3)
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	425a      	negs	r2, r3
 800aff4:	f003 0303 	and.w	r3, r3, #3
 800aff8:	f002 0203 	and.w	r2, r2, #3
 800affc:	bf58      	it	pl
 800affe:	4253      	negpl	r3, r2
 800b000:	2b03      	cmp	r3, #3
 800b002:	d138      	bne.n	800b076 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 800b004:	4826      	ldr	r0, [pc, #152]	; (800b0a0 <cliMemoryDump+0x134>)
 800b006:	f7ff fe25 	bl	800ac54 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800b00a:	2300      	movs	r3, #0
 800b00c:	623b      	str	r3, [r7, #32]
 800b00e:	e02c      	b.n	800b06a <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800b016:	2300      	movs	r3, #0
 800b018:	61fb      	str	r3, [r7, #28]
 800b01a:	e01d      	b.n	800b058 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800b01c:	f107 020c 	add.w	r2, r7, #12
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	4413      	add	r3, r2
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	2b1f      	cmp	r3, #31
 800b028:	d910      	bls.n	800b04c <cliMemoryDump+0xe0>
 800b02a:	f107 020c 	add.w	r2, r7, #12
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	4413      	add	r3, r2
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	2b7e      	cmp	r3, #126	; 0x7e
 800b036:	d809      	bhi.n	800b04c <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 800b038:	f107 020c 	add.w	r2, r7, #12
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	4413      	add	r3, r2
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	4619      	mov	r1, r3
 800b044:	4817      	ldr	r0, [pc, #92]	; (800b0a4 <cliMemoryDump+0x138>)
 800b046:	f7ff fe05 	bl	800ac54 <cliPrintf>
 800b04a:	e002      	b.n	800b052 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800b04c:	4816      	ldr	r0, [pc, #88]	; (800b0a8 <cliMemoryDump+0x13c>)
 800b04e:	f7ff fe01 	bl	800ac54 <cliPrintf>
        for (i=0;i<4;i++)
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	3301      	adds	r3, #1
 800b056:	61fb      	str	r3, [r7, #28]
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	ddde      	ble.n	800b01c <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	3304      	adds	r3, #4
 800b062:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800b064:	6a3b      	ldr	r3, [r7, #32]
 800b066:	3301      	adds	r3, #1
 800b068:	623b      	str	r3, [r7, #32]
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	ddcf      	ble.n	800b010 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800b070:	480e      	ldr	r0, [pc, #56]	; (800b0ac <cliMemoryDump+0x140>)
 800b072:	f7ff fdef 	bl	800ac54 <cliPrintf>
    }
    addr++;
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	3304      	adds	r3, #4
 800b07a:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 800b07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07e:	3301      	adds	r3, #1
 800b080:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b086:	429a      	cmp	r2, r3
 800b088:	dba2      	blt.n	800afd0 <cliMemoryDump+0x64>
  }
}
 800b08a:	3730      	adds	r7, #48	; 0x30
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	08019d74 	.word	0x08019d74
 800b094:	08019d88 	.word	0x08019d88
 800b098:	08019d90 	.word	0x08019d90
 800b09c:	08019d9c 	.word	0x08019d9c
 800b0a0:	08019da4 	.word	0x08019da4
 800b0a4:	08019da8 	.word	0x08019da8
 800b0a8:	08019dac 	.word	0x08019dac
 800b0ac:	08019db0 	.word	0x08019db0

0800b0b0 <i2cInit>:
I2C_HandleTypeDef hi2c2;

static void cliI2C(cli_args_t *args);

bool i2cInit(void)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
  bool ret = true;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	71fb      	strb	r3, [r7, #7]

  hi2c2.Instance = I2C2;
 800b0ba:	4b16      	ldr	r3, [pc, #88]	; (800b114 <i2cInit+0x64>)
 800b0bc:	4a16      	ldr	r2, [pc, #88]	; (800b118 <i2cInit+0x68>)
 800b0be:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800b0c0:	4b14      	ldr	r3, [pc, #80]	; (800b114 <i2cInit+0x64>)
 800b0c2:	4a16      	ldr	r2, [pc, #88]	; (800b11c <i2cInit+0x6c>)
 800b0c4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b0c6:	4b13      	ldr	r3, [pc, #76]	; (800b114 <i2cInit+0x64>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800b0cc:	4b11      	ldr	r3, [pc, #68]	; (800b114 <i2cInit+0x64>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b0d2:	4b10      	ldr	r3, [pc, #64]	; (800b114 <i2cInit+0x64>)
 800b0d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b0d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b0da:	4b0e      	ldr	r3, [pc, #56]	; (800b114 <i2cInit+0x64>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800b0e0:	4b0c      	ldr	r3, [pc, #48]	; (800b114 <i2cInit+0x64>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b0e6:	4b0b      	ldr	r3, [pc, #44]	; (800b114 <i2cInit+0x64>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b0ec:	4b09      	ldr	r3, [pc, #36]	; (800b114 <i2cInit+0x64>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b0f2:	4808      	ldr	r0, [pc, #32]	; (800b114 <i2cInit+0x64>)
 800b0f4:	f002 f866 	bl	800d1c4 <HAL_I2C_Init>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <i2cInit+0x52>
  {
    Error_Handler();
 800b0fe:	f7f6 fa59 	bl	80015b4 <Error_Handler>
  }
  cliAdd("i2c", cliI2C);
 800b102:	4907      	ldr	r1, [pc, #28]	; (800b120 <i2cInit+0x70>)
 800b104:	4807      	ldr	r0, [pc, #28]	; (800b124 <i2cInit+0x74>)
 800b106:	f7ff feaf 	bl	800ae68 <cliAdd>
  return ret;
 800b10a:	79fb      	ldrb	r3, [r7, #7]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	200012bc 	.word	0x200012bc
 800b118:	40005800 	.word	0x40005800
 800b11c:	00061a80 	.word	0x00061a80
 800b120:	0800b4e5 	.word	0x0800b4e5
 800b124:	08019dc0 	.word	0x08019dc0

0800b128 <I2C_ByteWrite>:


bool I2C_ByteWrite(uint8_t DevAddress, uint8_t MemAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 800b128:	b590      	push	{r4, r7, lr}
 800b12a:	b08b      	sub	sp, #44	; 0x2c
 800b12c:	af04      	add	r7, sp, #16
 800b12e:	4604      	mov	r4, r0
 800b130:	4608      	mov	r0, r1
 800b132:	4611      	mov	r1, r2
 800b134:	461a      	mov	r2, r3
 800b136:	4623      	mov	r3, r4
 800b138:	71fb      	strb	r3, [r7, #7]
 800b13a:	4603      	mov	r3, r0
 800b13c:	71bb      	strb	r3, [r7, #6]
 800b13e:	460b      	mov	r3, r1
 800b140:	717b      	strb	r3, [r7, #5]
 800b142:	4613      	mov	r3, r2
 800b144:	713b      	strb	r3, [r7, #4]
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t tmp;
	state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1000);
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	b299      	uxth	r1, r3
 800b14a:	79bb      	ldrb	r3, [r7, #6]
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b152:	9302      	str	r3, [sp, #8]
 800b154:	2301      	movs	r3, #1
 800b156:	9301      	str	r3, [sp, #4]
 800b158:	f107 030e 	add.w	r3, r7, #14
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	2301      	movs	r3, #1
 800b160:	4832      	ldr	r0, [pc, #200]	; (800b22c <I2C_ByteWrite+0x104>)
 800b162:	f002 fdb9 	bl	800dcd8 <HAL_I2C_Mem_Read>
 800b166:	4603      	mov	r3, r0
 800b168:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b16a:	4b30      	ldr	r3, [pc, #192]	; (800b22c <I2C_ByteWrite+0x104>)
 800b16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16e:	613b      	str	r3, [r7, #16]
//      Error.error = 2;
//      error_signal();
//      HAL_Delay(4);
//    }
//  }
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800b170:	793b      	ldrb	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	fa02 f303 	lsl.w	r3, r2, r3
 800b178:	1e5a      	subs	r2, r3, #1
 800b17a:	7979      	ldrb	r1, [r7, #5]
 800b17c:	793b      	ldrb	r3, [r7, #4]
 800b17e:	1acb      	subs	r3, r1, r3
 800b180:	3301      	adds	r3, #1
 800b182:	fa02 f303 	lsl.w	r3, r2, r3
 800b186:	73fb      	strb	r3, [r7, #15]
	data <<= (bitStart - length + 1); // shift data into correct position
 800b188:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b18c:	7979      	ldrb	r1, [r7, #5]
 800b18e:	793b      	ldrb	r3, [r7, #4]
 800b190:	1acb      	subs	r3, r1, r3
 800b192:	3301      	adds	r3, #1
 800b194:	fa02 f303 	lsl.w	r3, r2, r3
 800b198:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	data &= mask; // zero all non-important bits in data
 800b19c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tmp &= ~(mask); // zero all important bits in existing byte
 800b1a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1ac:	43db      	mvns	r3, r3
 800b1ae:	b25a      	sxtb	r2, r3
 800b1b0:	7bbb      	ldrb	r3, [r7, #14]
 800b1b2:	b25b      	sxtb	r3, r3
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	b25b      	sxtb	r3, r3
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	73bb      	strb	r3, [r7, #14]
	tmp |= data; // combine data with existing byte
 800b1bc:	7bba      	ldrb	r2, [r7, #14]
 800b1be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	73bb      	strb	r3, [r7, #14]
	state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1000);
 800b1c8:	79fb      	ldrb	r3, [r7, #7]
 800b1ca:	b299      	uxth	r1, r3
 800b1cc:	79bb      	ldrb	r3, [r7, #6]
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b1d4:	9302      	str	r3, [sp, #8]
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	9301      	str	r3, [sp, #4]
 800b1da:	f107 030e 	add.w	r3, r7, #14
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	4812      	ldr	r0, [pc, #72]	; (800b22c <I2C_ByteWrite+0x104>)
 800b1e4:	f002 fc7e 	bl	800dae4 <HAL_I2C_Mem_Write>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b1ec:	4b0f      	ldr	r3, [pc, #60]	; (800b22c <I2C_ByteWrite+0x104>)
 800b1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f0:	613b      	str	r3, [r7, #16]
  while(state)
 800b1f2:	e012      	b.n	800b21a <I2C_ByteWrite+0xf2>
  {
  	logPrintf("MPU9250_Tx(write)_Error : %d, %ld\r\n", state, ErrorCode);
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	480d      	ldr	r0, [pc, #52]	; (800b230 <I2C_ByteWrite+0x108>)
 800b1fc:	f006 fdce 	bl	8011d9c <iprintf>
    while (Error.error !=0)
 800b200:	e007      	b.n	800b212 <I2C_ByteWrite+0xea>
    {
      Error.error = 2;
 800b202:	4b0c      	ldr	r3, [pc, #48]	; (800b234 <I2C_ByteWrite+0x10c>)
 800b204:	2202      	movs	r2, #2
 800b206:	701a      	strb	r2, [r3, #0]
      error_signal();
 800b208:	f7f8 fd94 	bl	8003d34 <error_signal>
      HAL_Delay(4);
 800b20c:	2004      	movs	r0, #4
 800b20e:	f001 fab3 	bl	800c778 <HAL_Delay>
    while (Error.error !=0)
 800b212:	4b08      	ldr	r3, [pc, #32]	; (800b234 <I2C_ByteWrite+0x10c>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1f3      	bne.n	800b202 <I2C_ByteWrite+0xda>
  while(state)
 800b21a:	7dfb      	ldrb	r3, [r7, #23]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1e9      	bne.n	800b1f4 <I2C_ByteWrite+0xcc>
    }
  }
  return true;
 800b220:	2301      	movs	r3, #1
}
 800b222:	4618      	mov	r0, r3
 800b224:	371c      	adds	r7, #28
 800b226:	46bd      	mov	sp, r7
 800b228:	bd90      	pop	{r4, r7, pc}
 800b22a:	bf00      	nop
 800b22c:	200012bc 	.word	0x200012bc
 800b230:	08019dc4 	.word	0x08019dc4
 800b234:	20000acc 	.word	0x20000acc

0800b238 <I2C_ByteRead>:
//	tmp >>= (bitStart - length + 1);
//	*data = tmp;
//}

bool I2C_ByteRead(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b08a      	sub	sp, #40	; 0x28
 800b23c:	af04      	add	r7, sp, #16
 800b23e:	607b      	str	r3, [r7, #4]
 800b240:	4603      	mov	r3, r0
 800b242:	81fb      	strh	r3, [r7, #14]
 800b244:	460b      	mov	r3, r1
 800b246:	81bb      	strh	r3, [r7, #12]
 800b248:	4613      	mov	r3, r2
 800b24a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;
  state = HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 800b24c:	8978      	ldrh	r0, [r7, #10]
 800b24e:	89ba      	ldrh	r2, [r7, #12]
 800b250:	89f9      	ldrh	r1, [r7, #14]
 800b252:	2301      	movs	r3, #1
 800b254:	9302      	str	r3, [sp, #8]
 800b256:	8c3b      	ldrh	r3, [r7, #32]
 800b258:	9301      	str	r3, [sp, #4]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	4603      	mov	r3, r0
 800b260:	4811      	ldr	r0, [pc, #68]	; (800b2a8 <I2C_ByteRead+0x70>)
 800b262:	f002 fd39 	bl	800dcd8 <HAL_I2C_Mem_Read>
 800b266:	4603      	mov	r3, r0
 800b268:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b26a:	4b0f      	ldr	r3, [pc, #60]	; (800b2a8 <I2C_ByteRead+0x70>)
 800b26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26e:	613b      	str	r3, [r7, #16]
  while(state)
 800b270:	e012      	b.n	800b298 <I2C_ByteRead+0x60>
  {
  	logPrintf("MPU9250_Rx_Error : %d, %ld\r\n", state, ErrorCode);
 800b272:	7dfb      	ldrb	r3, [r7, #23]
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	4619      	mov	r1, r3
 800b278:	480c      	ldr	r0, [pc, #48]	; (800b2ac <I2C_ByteRead+0x74>)
 800b27a:	f006 fd8f 	bl	8011d9c <iprintf>
    while (Error.error !=0)
 800b27e:	e007      	b.n	800b290 <I2C_ByteRead+0x58>
    {
      Error.error = 2;
 800b280:	4b0b      	ldr	r3, [pc, #44]	; (800b2b0 <I2C_ByteRead+0x78>)
 800b282:	2202      	movs	r2, #2
 800b284:	701a      	strb	r2, [r3, #0]
      error_signal();
 800b286:	f7f8 fd55 	bl	8003d34 <error_signal>
      HAL_Delay(4);
 800b28a:	2004      	movs	r0, #4
 800b28c:	f001 fa74 	bl	800c778 <HAL_Delay>
    while (Error.error !=0)
 800b290:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <I2C_ByteRead+0x78>)
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1f3      	bne.n	800b280 <I2C_ByteRead+0x48>
  while(state)
 800b298:	7dfb      	ldrb	r3, [r7, #23]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1e9      	bne.n	800b272 <I2C_ByteRead+0x3a>
    }
  }
  return true;
 800b29e:	2301      	movs	r3, #1
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3718      	adds	r7, #24
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	200012bc 	.word	0x200012bc
 800b2ac:	08019de8 	.word	0x08019de8
 800b2b0:	20000acc 	.word	0x20000acc

0800b2b4 <I2C_ByteWrite_HAL>:

bool I2C_ByteWrite_HAL(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b08a      	sub	sp, #40	; 0x28
 800b2b8:	af04      	add	r7, sp, #16
 800b2ba:	607b      	str	r3, [r7, #4]
 800b2bc:	4603      	mov	r3, r0
 800b2be:	81fb      	strh	r3, [r7, #14]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	81bb      	strh	r3, [r7, #12]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;
  state = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, MemAddSize, pData, Size, 1);
 800b2c8:	8978      	ldrh	r0, [r7, #10]
 800b2ca:	89ba      	ldrh	r2, [r7, #12]
 800b2cc:	89f9      	ldrh	r1, [r7, #14]
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	8c3b      	ldrh	r3, [r7, #32]
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	4603      	mov	r3, r0
 800b2dc:	4811      	ldr	r0, [pc, #68]	; (800b324 <I2C_ByteWrite_HAL+0x70>)
 800b2de:	f002 fc01 	bl	800dae4 <HAL_I2C_Mem_Write>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	75fb      	strb	r3, [r7, #23]
  ErrorCode = hi2c2.ErrorCode;
 800b2e6:	4b0f      	ldr	r3, [pc, #60]	; (800b324 <I2C_ByteWrite_HAL+0x70>)
 800b2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ea:	613b      	str	r3, [r7, #16]
  while(state)
 800b2ec:	e012      	b.n	800b314 <I2C_ByteWrite_HAL+0x60>
  {
  	logPrintf("MPU9250_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	480c      	ldr	r0, [pc, #48]	; (800b328 <I2C_ByteWrite_HAL+0x74>)
 800b2f6:	f006 fd51 	bl	8011d9c <iprintf>
    while (Error.error !=0)
 800b2fa:	e007      	b.n	800b30c <I2C_ByteWrite_HAL+0x58>
    {
      Error.error = 2;
 800b2fc:	4b0b      	ldr	r3, [pc, #44]	; (800b32c <I2C_ByteWrite_HAL+0x78>)
 800b2fe:	2202      	movs	r2, #2
 800b300:	701a      	strb	r2, [r3, #0]
      error_signal();
 800b302:	f7f8 fd17 	bl	8003d34 <error_signal>
      HAL_Delay(4);
 800b306:	2004      	movs	r0, #4
 800b308:	f001 fa36 	bl	800c778 <HAL_Delay>
    while (Error.error !=0)
 800b30c:	4b07      	ldr	r3, [pc, #28]	; (800b32c <I2C_ByteWrite_HAL+0x78>)
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1f3      	bne.n	800b2fc <I2C_ByteWrite_HAL+0x48>
  while(state)
 800b314:	7dfb      	ldrb	r3, [r7, #23]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1e9      	bne.n	800b2ee <I2C_ByteWrite_HAL+0x3a>
    }
  }
  return true;
 800b31a:	2301      	movs	r3, #1
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	200012bc 	.word	0x200012bc
 800b328:	08019e08 	.word	0x08019e08
 800b32c:	20000acc 	.word	0x20000acc

0800b330 <I2C_Write>:
	HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, 1, &tmp, 1, 1000);
	*data = tmp & (1 << bitNum);
}

void I2C_Write(uint16_t DevAddress, uint8_t data, uint16_t Size)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af02      	add	r7, sp, #8
 800b336:	4603      	mov	r3, r0
 800b338:	80fb      	strh	r3, [r7, #6]
 800b33a:	460b      	mov	r3, r1
 800b33c:	717b      	strb	r3, [r7, #5]
 800b33e:	4613      	mov	r3, r2
 800b340:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 800b342:	4818      	ldr	r0, [pc, #96]	; (800b3a4 <I2C_Write+0x74>)
 800b344:	f003 f858 	bl	800e3f8 <HAL_I2C_GetState>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b20      	cmp	r3, #32
 800b34c:	d125      	bne.n	800b39a <I2C_Write+0x6a>

  state = HAL_I2C_Master_Transmit(&hi2c2, DevAddress, &data, Size, 1000);
 800b34e:	8878      	ldrh	r0, [r7, #2]
 800b350:	1d7a      	adds	r2, r7, #5
 800b352:	88f9      	ldrh	r1, [r7, #6]
 800b354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	4603      	mov	r3, r0
 800b35c:	4811      	ldr	r0, [pc, #68]	; (800b3a4 <I2C_Write+0x74>)
 800b35e:	f002 f869 	bl	800d434 <HAL_I2C_Master_Transmit>
 800b362:	4603      	mov	r3, r0
 800b364:	73fb      	strb	r3, [r7, #15]
  ErrorCode = hi2c2.ErrorCode;
 800b366:	4b0f      	ldr	r3, [pc, #60]	; (800b3a4 <I2C_Write+0x74>)
 800b368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36a:	60bb      	str	r3, [r7, #8]
   while(state)
 800b36c:	e012      	b.n	800b394 <I2C_Write+0x64>
   {
  	 logPrintf("MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 800b36e:	7bfb      	ldrb	r3, [r7, #15]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	4619      	mov	r1, r3
 800b374:	480c      	ldr	r0, [pc, #48]	; (800b3a8 <I2C_Write+0x78>)
 800b376:	f006 fd11 	bl	8011d9c <iprintf>
     while (Error.error !=0)
 800b37a:	e007      	b.n	800b38c <I2C_Write+0x5c>
     {
       Error.error = 2;
 800b37c:	4b0b      	ldr	r3, [pc, #44]	; (800b3ac <I2C_Write+0x7c>)
 800b37e:	2202      	movs	r2, #2
 800b380:	701a      	strb	r2, [r3, #0]
       error_signal();
 800b382:	f7f8 fcd7 	bl	8003d34 <error_signal>
       HAL_Delay(4);
 800b386:	2004      	movs	r0, #4
 800b388:	f001 f9f6 	bl	800c778 <HAL_Delay>
     while (Error.error !=0)
 800b38c:	4b07      	ldr	r3, [pc, #28]	; (800b3ac <I2C_Write+0x7c>)
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1f3      	bne.n	800b37c <I2C_Write+0x4c>
   while(state)
 800b394:	7bfb      	ldrb	r3, [r7, #15]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e9      	bne.n	800b36e <I2C_Write+0x3e>
     }
   }
  }
}
 800b39a:	bf00      	nop
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	200012bc 	.word	0x200012bc
 800b3a8:	08019e28 	.word	0x08019e28
 800b3ac:	20000acc 	.word	0x20000acc

0800b3b0 <I2C_Read>:

void I2C_Read(uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af02      	add	r7, sp, #8
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	6039      	str	r1, [r7, #0]
 800b3ba:	80fb      	strh	r3, [r7, #6]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef state;
  uint32_t ErrorCode;

  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY){
 800b3c0:	4817      	ldr	r0, [pc, #92]	; (800b420 <I2C_Read+0x70>)
 800b3c2:	f003 f819 	bl	800e3f8 <HAL_I2C_GetState>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b20      	cmp	r3, #32
 800b3ca:	d125      	bne.n	800b418 <I2C_Read+0x68>

  state = HAL_I2C_Master_Receive(&hi2c2, DevAddress, pData, Size, 1000);
 800b3cc:	88ba      	ldrh	r2, [r7, #4]
 800b3ce:	88f9      	ldrh	r1, [r7, #6]
 800b3d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	4811      	ldr	r0, [pc, #68]	; (800b420 <I2C_Read+0x70>)
 800b3dc:	f002 f928 	bl	800d630 <HAL_I2C_Master_Receive>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	73fb      	strb	r3, [r7, #15]
  ErrorCode = hi2c2.ErrorCode;
 800b3e4:	4b0e      	ldr	r3, [pc, #56]	; (800b420 <I2C_Read+0x70>)
 800b3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e8:	60bb      	str	r3, [r7, #8]
    while(state)
 800b3ea:	e012      	b.n	800b412 <I2C_Read+0x62>
    {
    	logPrintf("MS5611_Tx_Error : %d, %ld\r\n", state, ErrorCode);
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	480c      	ldr	r0, [pc, #48]	; (800b424 <I2C_Read+0x74>)
 800b3f4:	f006 fcd2 	bl	8011d9c <iprintf>
      while (Error.error !=0)
 800b3f8:	e007      	b.n	800b40a <I2C_Read+0x5a>
      {
        Error.error = 3;
 800b3fa:	4b0b      	ldr	r3, [pc, #44]	; (800b428 <I2C_Read+0x78>)
 800b3fc:	2203      	movs	r2, #3
 800b3fe:	701a      	strb	r2, [r3, #0]
        error_signal();
 800b400:	f7f8 fc98 	bl	8003d34 <error_signal>
        HAL_Delay(4);
 800b404:	2004      	movs	r0, #4
 800b406:	f001 f9b7 	bl	800c778 <HAL_Delay>
      while (Error.error !=0)
 800b40a:	4b07      	ldr	r3, [pc, #28]	; (800b428 <I2C_Read+0x78>)
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1f3      	bne.n	800b3fa <I2C_Read+0x4a>
    while(state)
 800b412:	7bfb      	ldrb	r3, [r7, #15]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1e9      	bne.n	800b3ec <I2C_Read+0x3c>
      }
    }
  }
}
 800b418:	bf00      	nop
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	200012bc 	.word	0x200012bc
 800b424:	08019e28 	.word	0x08019e28
 800b428:	20000acc 	.word	0x20000acc

0800b42c <i2cIsDeviceReady>:

bool i2cIsDeviceReady(uint8_t dev_addr)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	71fb      	strb	r3, [r7, #7]

  if (HAL_I2C_IsDeviceReady(&hi2c2, dev_addr << 1, 10, 10) == HAL_OK)
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	005b      	lsls	r3, r3, #1
 800b43c:	b299      	uxth	r1, r3
 800b43e:	230a      	movs	r3, #10
 800b440:	220a      	movs	r2, #10
 800b442:	4807      	ldr	r0, [pc, #28]	; (800b460 <i2cIsDeviceReady+0x34>)
 800b444:	f002 feaa 	bl	800e19c <HAL_I2C_IsDeviceReady>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <i2cIsDeviceReady+0x28>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800b44e:	b662      	cpsie	i
  {
    __enable_irq();
    return true;
 800b450:	2301      	movs	r3, #1
 800b452:	e000      	b.n	800b456 <i2cIsDeviceReady+0x2a>
  }

  return false;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	200012bc 	.word	0x200012bc

0800b464 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b088      	sub	sp, #32
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b46c:	f107 0310 	add.w	r3, r7, #16
 800b470:	2200      	movs	r2, #0
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	605a      	str	r2, [r3, #4]
 800b476:	609a      	str	r2, [r3, #8]
 800b478:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a16      	ldr	r2, [pc, #88]	; (800b4d8 <HAL_I2C_MspInit+0x74>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d124      	bne.n	800b4ce <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b484:	4b15      	ldr	r3, [pc, #84]	; (800b4dc <HAL_I2C_MspInit+0x78>)
 800b486:	699b      	ldr	r3, [r3, #24]
 800b488:	4a14      	ldr	r2, [pc, #80]	; (800b4dc <HAL_I2C_MspInit+0x78>)
 800b48a:	f043 0308 	orr.w	r3, r3, #8
 800b48e:	6193      	str	r3, [r2, #24]
 800b490:	4b12      	ldr	r3, [pc, #72]	; (800b4dc <HAL_I2C_MspInit+0x78>)
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	f003 0308 	and.w	r3, r3, #8
 800b498:	60fb      	str	r3, [r7, #12]
 800b49a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b49c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b4a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b4a2:	2312      	movs	r3, #18
 800b4a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4aa:	f107 0310 	add.w	r3, r7, #16
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	480b      	ldr	r0, [pc, #44]	; (800b4e0 <HAL_I2C_MspInit+0x7c>)
 800b4b2:	f001 fcfb 	bl	800ceac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b4b6:	4b09      	ldr	r3, [pc, #36]	; (800b4dc <HAL_I2C_MspInit+0x78>)
 800b4b8:	69db      	ldr	r3, [r3, #28]
 800b4ba:	4a08      	ldr	r2, [pc, #32]	; (800b4dc <HAL_I2C_MspInit+0x78>)
 800b4bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b4c0:	61d3      	str	r3, [r2, #28]
 800b4c2:	4b06      	ldr	r3, [pc, #24]	; (800b4dc <HAL_I2C_MspInit+0x78>)
 800b4c4:	69db      	ldr	r3, [r3, #28]
 800b4c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4ca:	60bb      	str	r3, [r7, #8]
 800b4cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b4ce:	bf00      	nop
 800b4d0:	3720      	adds	r7, #32
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	40005800 	.word	0x40005800
 800b4dc:	40021000 	.word	0x40021000
 800b4e0:	40010c00 	.word	0x40010c00

0800b4e4 <cliI2C>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

void cliI2C(cli_args_t *args)
{
 800b4e4:	b5b0      	push	{r4, r5, r7, lr}
 800b4e6:	b0aa      	sub	sp, #168	; 0xa8
 800b4e8:	af02      	add	r7, sp, #8
 800b4ea:	6078      	str	r0, [r7, #4]
  bool ret = true;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t i;
  uint8_t i2c_data[128];
  uint32_t pre_time;


  if (args->argc == 1)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d125      	bne.n	800b546 <cliI2C+0x62>
  {

    if(args->isStr(0, "scan") == true)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	496c      	ldr	r1, [pc, #432]	; (800b6b0 <cliI2C+0x1cc>)
 800b500:	2000      	movs	r0, #0
 800b502:	4798      	blx	r3
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	f000 80be 	beq.w	800b688 <cliI2C+0x1a4>
    {
      for (i=0x00; i<= 0x7F; i++)
 800b50c:	2300      	movs	r3, #0
 800b50e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b512:	e013      	b.n	800b53c <cliI2C+0x58>
      {
        if (i2cIsDeviceReady(i) == true)
 800b514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7ff ff86 	bl	800b42c <i2cIsDeviceReady>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d005      	beq.n	800b532 <cliI2C+0x4e>
        {
          cliPrintf("I2C CH%d Addr 0x%X : OK\n", 2, i);
 800b526:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b52a:	2102      	movs	r1, #2
 800b52c:	4861      	ldr	r0, [pc, #388]	; (800b6b4 <cliI2C+0x1d0>)
 800b52e:	f7ff fb91 	bl	800ac54 <cliPrintf>
      for (i=0x00; i<= 0x7F; i++)
 800b532:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b536:	3301      	adds	r3, #1
 800b538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b53c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b540:	2b7f      	cmp	r3, #127	; 0x7f
 800b542:	d9e7      	bls.n	800b514 <cliI2C+0x30>
 800b544:	e0a0      	b.n	800b688 <cliI2C+0x1a4>
        }
      }
    }
  }
  else if (args->argc == 4)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	2b04      	cmp	r3, #4
 800b54c:	f040 8099 	bne.w	800b682 <cliI2C+0x19e>
  {
    dev_addr = (uint16_t) args->getData(1);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	2001      	movs	r0, #1
 800b556:	4798      	blx	r3
 800b558:	4603      	mov	r3, r0
 800b55a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    reg_addr = (uint16_t) args->getData(2);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	2002      	movs	r0, #2
 800b564:	4798      	blx	r3
 800b566:	4603      	mov	r3, r0
 800b568:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    length   = (uint16_t) args->getData(3);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	2003      	movs	r0, #3
 800b572:	4798      	blx	r3
 800b574:	4603      	mov	r3, r0
 800b576:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

    if(args->isStr(0, "read") == true)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	494e      	ldr	r1, [pc, #312]	; (800b6b8 <cliI2C+0x1d4>)
 800b580:	2000      	movs	r0, #0
 800b582:	4798      	blx	r3
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d039      	beq.n	800b5fe <cliI2C+0x11a>
    {
      for (i=0; i<length; i++)
 800b58a:	2300      	movs	r3, #0
 800b58c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b590:	e02e      	b.n	800b5f0 <cliI2C+0x10c>
      {
        i2c_ret = I2C_ByteRead(dev_addr<<1, reg_addr+i, I2C_MEMADD_SIZE_8BIT, i2c_data, 1);
 800b592:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b596:	005b      	lsls	r3, r3, #1
 800b598:	b298      	uxth	r0, r3
 800b59a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b5a4:	4413      	add	r3, r2
 800b5a6:	b299      	uxth	r1, r3
 800b5a8:	f107 0208 	add.w	r2, r7, #8
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f7ff fe40 	bl	800b238 <I2C_ByteRead>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
        if (i2c_ret == true)
 800b5be:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00a      	beq.n	800b5dc <cliI2C+0xf8>
        {
          cliPrintf("%d I2C - 0x%02X : 0x%02X\n", reg_addr+i, i2c_data[0]);
 800b5c6:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800b5ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5ce:	4413      	add	r3, r2
 800b5d0:	7a3a      	ldrb	r2, [r7, #8]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	4839      	ldr	r0, [pc, #228]	; (800b6bc <cliI2C+0x1d8>)
 800b5d6:	f7ff fb3d 	bl	800ac54 <cliPrintf>
 800b5da:	e004      	b.n	800b5e6 <cliI2C+0x102>
        }
        else
        {
          cliPrintf("%d I2C - Fail \n", 2);
 800b5dc:	2102      	movs	r1, #2
 800b5de:	4838      	ldr	r0, [pc, #224]	; (800b6c0 <cliI2C+0x1dc>)
 800b5e0:	f7ff fb38 	bl	800ac54 <cliPrintf>
          break;
 800b5e4:	e050      	b.n	800b688 <cliI2C+0x1a4>
      for (i=0; i<length; i++)
 800b5e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b5f0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b5f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d3ca      	bcc.n	800b592 <cliI2C+0xae>
 800b5fc:	e044      	b.n	800b688 <cliI2C+0x1a4>
        }
      }
    }
    else if(args->isStr(0, "write") == true)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	695b      	ldr	r3, [r3, #20]
 800b602:	4930      	ldr	r1, [pc, #192]	; (800b6c4 <cliI2C+0x1e0>)
 800b604:	2000      	movs	r0, #0
 800b606:	4798      	blx	r3
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d035      	beq.n	800b67a <cliI2C+0x196>
    {
      pre_time = millis();
 800b60e:	f7f5 ff53 	bl	80014b8 <millis>
 800b612:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
      data = (uint8_t) length;
 800b616:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
      i2c_ret = I2C_ByteWrite_HAL(dev_addr<<1, reg_addr, I2C_MEMADD_SIZE_8BIT, &data, 1);
 800b620:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	b298      	uxth	r0, r3
 800b628:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 800b62c:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 800b630:	2301      	movs	r3, #1
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	4613      	mov	r3, r2
 800b636:	2201      	movs	r2, #1
 800b638:	f7ff fe3c 	bl	800b2b4 <I2C_ByteWrite_HAL>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
      if (i2c_ret == true)
 800b642:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800b646:	2b00      	cmp	r3, #0
 800b648:	d012      	beq.n	800b670 <cliI2C+0x18c>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d ms\n", 2, reg_addr, data, millis()-pre_time);
 800b64a:	f8b7 4094 	ldrh.w	r4, [r7, #148]	; 0x94
 800b64e:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800b652:	461d      	mov	r5, r3
 800b654:	f7f5 ff30 	bl	80014b8 <millis>
 800b658:	4602      	mov	r2, r0
 800b65a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	462b      	mov	r3, r5
 800b664:	4622      	mov	r2, r4
 800b666:	2102      	movs	r1, #2
 800b668:	4817      	ldr	r0, [pc, #92]	; (800b6c8 <cliI2C+0x1e4>)
 800b66a:	f7ff faf3 	bl	800ac54 <cliPrintf>
 800b66e:	e00b      	b.n	800b688 <cliI2C+0x1a4>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n", 2);
 800b670:	2102      	movs	r1, #2
 800b672:	4813      	ldr	r0, [pc, #76]	; (800b6c0 <cliI2C+0x1dc>)
 800b674:	f7ff faee 	bl	800ac54 <cliPrintf>
 800b678:	e006      	b.n	800b688 <cliI2C+0x1a4>
      }
    }
    else
    {
      ret = false;
 800b67a:	2300      	movs	r3, #0
 800b67c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800b680:	e002      	b.n	800b688 <cliI2C+0x1a4>
    }
  }
  else
  {
    ret = false;
 800b682:	2300      	movs	r3, #0
 800b684:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  }

  if (ret == false)
 800b688:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800b68c:	f083 0301 	eor.w	r3, r3, #1
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b00      	cmp	r3, #0
 800b694:	d008      	beq.n	800b6a8 <cliI2C+0x1c4>
  {
    cliPrintf( "i2c scan\n");
 800b696:	480d      	ldr	r0, [pc, #52]	; (800b6cc <cliI2C+0x1e8>)
 800b698:	f7ff fadc 	bl	800ac54 <cliPrintf>
    cliPrintf( "i2c read dev_addr reg_addr length\n");
 800b69c:	480c      	ldr	r0, [pc, #48]	; (800b6d0 <cliI2C+0x1ec>)
 800b69e:	f7ff fad9 	bl	800ac54 <cliPrintf>
    cliPrintf( "i2c write dev_addr reg_addr data\n");
 800b6a2:	480c      	ldr	r0, [pc, #48]	; (800b6d4 <cliI2C+0x1f0>)
 800b6a4:	f7ff fad6 	bl	800ac54 <cliPrintf>
  }
}
 800b6a8:	bf00      	nop
 800b6aa:	37a0      	adds	r7, #160	; 0xa0
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bdb0      	pop	{r4, r5, r7, pc}
 800b6b0:	08019e44 	.word	0x08019e44
 800b6b4:	08019e4c 	.word	0x08019e4c
 800b6b8:	08019e68 	.word	0x08019e68
 800b6bc:	08019e70 	.word	0x08019e70
 800b6c0:	08019e8c 	.word	0x08019e8c
 800b6c4:	08019e9c 	.word	0x08019e9c
 800b6c8:	08019ea4 	.word	0x08019ea4
 800b6cc:	08019ec8 	.word	0x08019ec8
 800b6d0:	08019ed4 	.word	0x08019ed4
 800b6d4:	08019ef8 	.word	0x08019ef8

0800b6d8 <ledInit>:
#ifdef _USE_HW_CLI
static void cliLed(cli_args_t *args);
#endif

bool ledInit(void)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b088      	sub	sp, #32
 800b6dc:	af00      	add	r7, sp, #0
  bool ret = true;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6e2:	f107 0308 	add.w	r3, r7, #8
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	601a      	str	r2, [r3, #0]
 800b6ea:	605a      	str	r2, [r3, #4]
 800b6ec:	609a      	str	r2, [r3, #8]
 800b6ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b6f0:	4b1b      	ldr	r3, [pc, #108]	; (800b760 <ledInit+0x88>)
 800b6f2:	699b      	ldr	r3, [r3, #24]
 800b6f4:	4a1a      	ldr	r2, [pc, #104]	; (800b760 <ledInit+0x88>)
 800b6f6:	f043 0308 	orr.w	r3, r3, #8
 800b6fa:	6193      	str	r3, [r2, #24]
 800b6fc:	4b18      	ldr	r3, [pc, #96]	; (800b760 <ledInit+0x88>)
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	f003 0308 	and.w	r3, r3, #8
 800b704:	607b      	str	r3, [r7, #4]
 800b706:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b708:	2301      	movs	r3, #1
 800b70a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b70c:	2300      	movs	r3, #0
 800b70e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b710:	2303      	movs	r3, #3
 800b712:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 800b714:	2300      	movs	r3, #0
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	e00f      	b.n	800b73a <ledInit+0x62>
  {
    GPIO_InitStruct.Pin |= led_tbl[i].pin;
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	4911      	ldr	r1, [pc, #68]	; (800b764 <ledInit+0x8c>)
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	440b      	add	r3, r1
 800b724:	889b      	ldrh	r3, [r3, #4]
 800b726:	4313      	orrs	r3, r2
 800b728:	60bb      	str	r3, [r7, #8]
    ledOff(i);
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 f840 	bl	800b7b4 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	3301      	adds	r3, #1
 800b738:	61fb      	str	r3, [r7, #28]
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	2b04      	cmp	r3, #4
 800b73e:	ddec      	ble.n	800b71a <ledInit+0x42>
  }

   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b740:	f107 0308 	add.w	r3, r7, #8
 800b744:	4619      	mov	r1, r3
 800b746:	4808      	ldr	r0, [pc, #32]	; (800b768 <ledInit+0x90>)
 800b748:	f001 fbb0 	bl	800ceac <HAL_GPIO_Init>

	#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 800b74c:	4907      	ldr	r1, [pc, #28]	; (800b76c <ledInit+0x94>)
 800b74e:	4808      	ldr	r0, [pc, #32]	; (800b770 <ledInit+0x98>)
 800b750:	f7ff fb8a 	bl	800ae68 <cliAdd>
	#endif

  return ret;
 800b754:	7efb      	ldrb	r3, [r7, #27]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3720      	adds	r7, #32
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	40021000 	.word	0x40021000
 800b764:	20000030 	.word	0x20000030
 800b768:	40010c00 	.word	0x40010c00
 800b76c:	0800b82d 	.word	0x0800b82d
 800b770:	08019f1c 	.word	0x08019f1c

0800b774 <ledOn>:

void ledOn(uint8_t ch)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	2b04      	cmp	r3, #4
 800b782:	d811      	bhi.n	800b7a8 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	4a0a      	ldr	r2, [pc, #40]	; (800b7b0 <ledOn+0x3c>)
 800b788:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	4a08      	ldr	r2, [pc, #32]	; (800b7b0 <ledOn+0x3c>)
 800b790:	00db      	lsls	r3, r3, #3
 800b792:	4413      	add	r3, r2
 800b794:	8899      	ldrh	r1, [r3, #4]
 800b796:	79fb      	ldrb	r3, [r7, #7]
 800b798:	4a05      	ldr	r2, [pc, #20]	; (800b7b0 <ledOn+0x3c>)
 800b79a:	00db      	lsls	r3, r3, #3
 800b79c:	4413      	add	r3, r2
 800b79e:	799b      	ldrb	r3, [r3, #6]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	f001 fcdd 	bl	800d160 <HAL_GPIO_WritePin>
 800b7a6:	e000      	b.n	800b7aa <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 800b7a8:	bf00      	nop
}
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20000030 	.word	0x20000030

0800b7b4 <ledOff>:

void ledOff(uint8_t ch)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800b7be:	79fb      	ldrb	r3, [r7, #7]
 800b7c0:	2b04      	cmp	r3, #4
 800b7c2:	d811      	bhi.n	800b7e8 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800b7c4:	79fb      	ldrb	r3, [r7, #7]
 800b7c6:	4a0a      	ldr	r2, [pc, #40]	; (800b7f0 <ledOff+0x3c>)
 800b7c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b7cc:	79fb      	ldrb	r3, [r7, #7]
 800b7ce:	4a08      	ldr	r2, [pc, #32]	; (800b7f0 <ledOff+0x3c>)
 800b7d0:	00db      	lsls	r3, r3, #3
 800b7d2:	4413      	add	r3, r2
 800b7d4:	8899      	ldrh	r1, [r3, #4]
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	4a05      	ldr	r2, [pc, #20]	; (800b7f0 <ledOff+0x3c>)
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	4413      	add	r3, r2
 800b7de:	79db      	ldrb	r3, [r3, #7]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f001 fcbd 	bl	800d160 <HAL_GPIO_WritePin>
 800b7e6:	e000      	b.n	800b7ea <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 800b7e8:	bf00      	nop
}
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	20000030 	.word	0x20000030

0800b7f4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800b7fe:	79fb      	ldrb	r3, [r7, #7]
 800b800:	2b04      	cmp	r3, #4
 800b802:	d80c      	bhi.n	800b81e <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	4a08      	ldr	r2, [pc, #32]	; (800b828 <ledToggle+0x34>)
 800b808:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b80c:	79fb      	ldrb	r3, [r7, #7]
 800b80e:	4a06      	ldr	r2, [pc, #24]	; (800b828 <ledToggle+0x34>)
 800b810:	00db      	lsls	r3, r3, #3
 800b812:	4413      	add	r3, r2
 800b814:	889b      	ldrh	r3, [r3, #4]
 800b816:	4619      	mov	r1, r3
 800b818:	f001 fcba 	bl	800d190 <HAL_GPIO_TogglePin>
 800b81c:	e000      	b.n	800b820 <ledToggle+0x2c>
  if (ch >= LED_MAX_CH) return;
 800b81e:	bf00      	nop
}
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	20000030 	.word	0x20000030

0800b82c <cliLed>:

#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800b834:	2300      	movs	r3, #0
 800b836:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	2b03      	cmp	r3, #3
 800b83e:	d133      	bne.n	800b8a8 <cliLed+0x7c>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	491f      	ldr	r1, [pc, #124]	; (800b8c4 <cliLed+0x98>)
 800b846:	2000      	movs	r0, #0
 800b848:	4798      	blx	r3
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d02b      	beq.n	800b8a8 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = args->getData(1);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	2001      	movs	r0, #1
 800b856:	4798      	blx	r3
 800b858:	4603      	mov	r3, r0
 800b85a:	75bb      	strb	r3, [r7, #22]
    toggle_time = args->getData(2);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	2002      	movs	r0, #2
 800b862:	4798      	blx	r3
 800b864:	4603      	mov	r3, r0
 800b866:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 800b868:	7dbb      	ldrb	r3, [r7, #22]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d002      	beq.n	800b874 <cliLed+0x48>
    {
      led_ch--;
 800b86e:	7dbb      	ldrb	r3, [r7, #22]
 800b870:	3b01      	subs	r3, #1
 800b872:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 800b874:	f7f5 fe20 	bl	80014b8 <millis>
 800b878:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800b87a:	e00e      	b.n	800b89a <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 800b87c:	f7f5 fe1c 	bl	80014b8 <millis>
 800b880:	4602      	mov	r2, r0
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d806      	bhi.n	800b89a <cliLed+0x6e>
      {
        pre_time = millis();
 800b88c:	f7f5 fe14 	bl	80014b8 <millis>
 800b890:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 800b892:	7dbb      	ldrb	r3, [r7, #22]
 800b894:	4618      	mov	r0, r3
 800b896:	f7ff ffad 	bl	800b7f4 <ledToggle>
    while(cliKeepLoop())
 800b89a:	f7ff facf 	bl	800ae3c <cliKeepLoop>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1eb      	bne.n	800b87c <cliLed+0x50>
      }
    }
    ret = true;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	75fb      	strb	r3, [r7, #23]
  }



  if (ret != true)
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
 800b8aa:	f083 0301 	eor.w	r3, r3, #1
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time(ms)\n", LED_MAX_CH);
 800b8b4:	2105      	movs	r1, #5
 800b8b6:	4804      	ldr	r0, [pc, #16]	; (800b8c8 <cliLed+0x9c>)
 800b8b8:	f7ff f9cc 	bl	800ac54 <cliPrintf>
  }
}
 800b8bc:	bf00      	nop
 800b8be:	3718      	adds	r7, #24
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	08019f20 	.word	0x08019f20
 800b8c8:	08019f28 	.word	0x08019f28

0800b8cc <timerInit>:
TIM_HandleTypeDef htim4;

static void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

bool timerInit(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b092      	sub	sp, #72	; 0x48
 800b8d0:	af00      	add	r7, sp, #0
	bool ret = true;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	//time4 init

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b8d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b8dc:	2200      	movs	r2, #0
 800b8de:	601a      	str	r2, [r3, #0]
 800b8e0:	605a      	str	r2, [r3, #4]
 800b8e2:	609a      	str	r2, [r3, #8]
 800b8e4:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b8e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	601a      	str	r2, [r3, #0]
 800b8ee:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800b8f0:	f107 0310 	add.w	r3, r7, #16
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	601a      	str	r2, [r3, #0]
 800b8f8:	605a      	str	r2, [r3, #4]
 800b8fa:	609a      	str	r2, [r3, #8]
 800b8fc:	60da      	str	r2, [r3, #12]
 800b8fe:	611a      	str	r2, [r3, #16]
 800b900:	615a      	str	r2, [r3, #20]
 800b902:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 800b904:	4bb3      	ldr	r3, [pc, #716]	; (800bbd4 <timerInit+0x308>)
 800b906:	4ab4      	ldr	r2, [pc, #720]	; (800bbd8 <timerInit+0x30c>)
 800b908:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72-1;
 800b90a:	4bb2      	ldr	r3, [pc, #712]	; (800bbd4 <timerInit+0x308>)
 800b90c:	2247      	movs	r2, #71	; 0x47
 800b90e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b910:	4bb0      	ldr	r3, [pc, #704]	; (800bbd4 <timerInit+0x308>)
 800b912:	2200      	movs	r2, #0
 800b914:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 2000-1; //500hz
 800b916:	4baf      	ldr	r3, [pc, #700]	; (800bbd4 <timerInit+0x308>)
 800b918:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800b91c:	60da      	str	r2, [r3, #12]
#ifdef MOTOR_ESC
	htim4.Init.Period = 2041-1;//490hz
 800b91e:	4bad      	ldr	r3, [pc, #692]	; (800bbd4 <timerInit+0x308>)
 800b920:	f44f 62ff 	mov.w	r2, #2040	; 0x7f8
 800b924:	60da      	str	r2, [r3, #12]
#endif
#ifdef MOTOR_ESC_OneShot125
	htim4.Init.Prescaler = 3; //4khz
 800b926:	4bab      	ldr	r3, [pc, #684]	; (800bbd4 <timerInit+0x308>)
 800b928:	2203      	movs	r2, #3
 800b92a:	605a      	str	r2, [r3, #4]
	htim4.Init.Period = 4500-1;
 800b92c:	4ba9      	ldr	r3, [pc, #676]	; (800bbd4 <timerInit+0x308>)
 800b92e:	f241 1293 	movw	r2, #4499	; 0x1193
 800b932:	60da      	str	r2, [r3, #12]
#endif
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b934:	4ba7      	ldr	r3, [pc, #668]	; (800bbd4 <timerInit+0x308>)
 800b936:	2200      	movs	r2, #0
 800b938:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b93a:	4ba6      	ldr	r3, [pc, #664]	; (800bbd4 <timerInit+0x308>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b940:	48a4      	ldr	r0, [pc, #656]	; (800bbd4 <timerInit+0x308>)
 800b942:	f003 fe2d 	bl	800f5a0 <HAL_TIM_Base_Init>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d001      	beq.n	800b950 <timerInit+0x84>
	{
		Error_Handler();
 800b94c:	f7f5 fe32 	bl	80015b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b954:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b956:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b95a:	4619      	mov	r1, r3
 800b95c:	489d      	ldr	r0, [pc, #628]	; (800bbd4 <timerInit+0x308>)
 800b95e:	f004 fb19 	bl	800ff94 <HAL_TIM_ConfigClockSource>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <timerInit+0xa0>
	{
		Error_Handler();
 800b968:	f7f5 fe24 	bl	80015b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800b96c:	4899      	ldr	r0, [pc, #612]	; (800bbd4 <timerInit+0x308>)
 800b96e:	f003 fe66 	bl	800f63e <HAL_TIM_PWM_Init>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <timerInit+0xb0>
	{
		Error_Handler();
 800b978:	f7f5 fe1c 	bl	80015b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b97c:	2300      	movs	r3, #0
 800b97e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b980:	2300      	movs	r3, #0
 800b982:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b988:	4619      	mov	r1, r3
 800b98a:	4892      	ldr	r0, [pc, #584]	; (800bbd4 <timerInit+0x308>)
 800b98c:	f004 ff90 	bl	80108b0 <HAL_TIMEx_MasterConfigSynchronization>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <timerInit+0xce>
	{
		Error_Handler();
 800b996:	f7f5 fe0d 	bl	80015b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b99a:	2360      	movs	r3, #96	; 0x60
 800b99c:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = 0;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	617b      	str	r3, [r7, #20]
#ifdef MOTOR_ESC
	sConfigOC.Pulse = 1000;
 800b9a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9a6:	617b      	str	r3, [r7, #20]
#endif
#ifdef MOTOR_ESC_OneShot125
	sConfigOC.Pulse = 2250;
 800b9a8:	f640 03ca 	movw	r3, #2250	; 0x8ca
 800b9ac:	617b      	str	r3, [r7, #20]
#endif
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b9b6:	f107 0310 	add.w	r3, r7, #16
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	4619      	mov	r1, r3
 800b9be:	4885      	ldr	r0, [pc, #532]	; (800bbd4 <timerInit+0x308>)
 800b9c0:	f004 fa2a 	bl	800fe18 <HAL_TIM_PWM_ConfigChannel>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <timerInit+0x102>
	{
		Error_Handler();
 800b9ca:	f7f5 fdf3 	bl	80015b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b9ce:	f107 0310 	add.w	r3, r7, #16
 800b9d2:	2204      	movs	r2, #4
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	487f      	ldr	r0, [pc, #508]	; (800bbd4 <timerInit+0x308>)
 800b9d8:	f004 fa1e 	bl	800fe18 <HAL_TIM_PWM_ConfigChannel>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d001      	beq.n	800b9e6 <timerInit+0x11a>
	{
		Error_Handler();
 800b9e2:	f7f5 fde7 	bl	80015b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b9e6:	f107 0310 	add.w	r3, r7, #16
 800b9ea:	2208      	movs	r2, #8
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4879      	ldr	r0, [pc, #484]	; (800bbd4 <timerInit+0x308>)
 800b9f0:	f004 fa12 	bl	800fe18 <HAL_TIM_PWM_ConfigChannel>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <timerInit+0x132>
	{
		Error_Handler();
 800b9fa:	f7f5 fddb 	bl	80015b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b9fe:	f107 0310 	add.w	r3, r7, #16
 800ba02:	220c      	movs	r2, #12
 800ba04:	4619      	mov	r1, r3
 800ba06:	4873      	ldr	r0, [pc, #460]	; (800bbd4 <timerInit+0x308>)
 800ba08:	f004 fa06 	bl	800fe18 <HAL_TIM_PWM_ConfigChannel>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <timerInit+0x14a>
	{
		Error_Handler();
 800ba12:	f7f5 fdcf 	bl	80015b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800ba16:	2100      	movs	r1, #0
 800ba18:	486e      	ldr	r0, [pc, #440]	; (800bbd4 <timerInit+0x308>)
 800ba1a:	f003 fe69 	bl	800f6f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800ba1e:	2104      	movs	r1, #4
 800ba20:	486c      	ldr	r0, [pc, #432]	; (800bbd4 <timerInit+0x308>)
 800ba22:	f003 fe65 	bl	800f6f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800ba26:	2108      	movs	r1, #8
 800ba28:	486a      	ldr	r0, [pc, #424]	; (800bbd4 <timerInit+0x308>)
 800ba2a:	f003 fe61 	bl	800f6f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800ba2e:	210c      	movs	r1, #12
 800ba30:	4868      	ldr	r0, [pc, #416]	; (800bbd4 <timerInit+0x308>)
 800ba32:	f003 fe5d 	bl	800f6f0 <HAL_TIM_PWM_Start>
	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800ba36:	4867      	ldr	r0, [pc, #412]	; (800bbd4 <timerInit+0x308>)
 800ba38:	f000 f98e 	bl	800bd58 <HAL_TIM_MspPostInit>


	//TIM2 Init
	TIM_IC_InitTypeDef sConfigIC = {0};
 800ba3c:	463b      	mov	r3, r7
 800ba3e:	2200      	movs	r2, #0
 800ba40:	601a      	str	r2, [r3, #0]
 800ba42:	605a      	str	r2, [r3, #4]
 800ba44:	609a      	str	r2, [r3, #8]
 800ba46:	60da      	str	r2, [r3, #12]

	htim2.Instance = TIM2;
 800ba48:	4b64      	ldr	r3, [pc, #400]	; (800bbdc <timerInit+0x310>)
 800ba4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ba4e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72-1;
 800ba50:	4b62      	ldr	r3, [pc, #392]	; (800bbdc <timerInit+0x310>)
 800ba52:	2247      	movs	r2, #71	; 0x47
 800ba54:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ba56:	4b61      	ldr	r3, [pc, #388]	; (800bbdc <timerInit+0x310>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xFFFF;
 800ba5c:	4b5f      	ldr	r3, [pc, #380]	; (800bbdc <timerInit+0x310>)
 800ba5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba62:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ba64:	4b5d      	ldr	r3, [pc, #372]	; (800bbdc <timerInit+0x310>)
 800ba66:	2200      	movs	r2, #0
 800ba68:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ba6a:	4b5c      	ldr	r3, [pc, #368]	; (800bbdc <timerInit+0x310>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800ba70:	485a      	ldr	r0, [pc, #360]	; (800bbdc <timerInit+0x310>)
 800ba72:	f003 fedf 	bl	800f834 <HAL_TIM_IC_Init>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <timerInit+0x1b4>
	{
		Error_Handler();
 800ba7c:	f7f5 fd9a 	bl	80015b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ba80:	2300      	movs	r3, #0
 800ba82:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ba84:	2300      	movs	r3, #0
 800ba86:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ba88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	4853      	ldr	r0, [pc, #332]	; (800bbdc <timerInit+0x310>)
 800ba90:	f004 ff0e 	bl	80108b0 <HAL_TIMEx_MasterConfigSynchronization>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <timerInit+0x1d2>
	{
		Error_Handler();
 800ba9a:	f7f5 fd8b 	bl	80015b4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800baa2:	2301      	movs	r3, #1
 800baa4:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800baae:	463b      	mov	r3, r7
 800bab0:	2200      	movs	r2, #0
 800bab2:	4619      	mov	r1, r3
 800bab4:	4849      	ldr	r0, [pc, #292]	; (800bbdc <timerInit+0x310>)
 800bab6:	f004 f91b 	bl	800fcf0 <HAL_TIM_IC_ConfigChannel>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <timerInit+0x1f8>
	{
		Error_Handler();
 800bac0:	f7f5 fd78 	bl	80015b4 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800bac4:	463b      	mov	r3, r7
 800bac6:	2204      	movs	r2, #4
 800bac8:	4619      	mov	r1, r3
 800baca:	4844      	ldr	r0, [pc, #272]	; (800bbdc <timerInit+0x310>)
 800bacc:	f004 f910 	bl	800fcf0 <HAL_TIM_IC_ConfigChannel>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <timerInit+0x20e>
	{
		Error_Handler();
 800bad6:	f7f5 fd6d 	bl	80015b4 <Error_Handler>
	}

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800bada:	2100      	movs	r1, #0
 800badc:	483f      	ldr	r0, [pc, #252]	; (800bbdc <timerInit+0x310>)
 800bade:	f003 fef9 	bl	800f8d4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800bae2:	2104      	movs	r1, #4
 800bae4:	483d      	ldr	r0, [pc, #244]	; (800bbdc <timerInit+0x310>)
 800bae6:	f003 fef5 	bl	800f8d4 <HAL_TIM_IC_Start_IT>


	//timer3 init

	htim3.Instance = TIM3;
 800baea:	4b3d      	ldr	r3, [pc, #244]	; (800bbe0 <timerInit+0x314>)
 800baec:	4a3d      	ldr	r2, [pc, #244]	; (800bbe4 <timerInit+0x318>)
 800baee:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72-1;
 800baf0:	4b3b      	ldr	r3, [pc, #236]	; (800bbe0 <timerInit+0x314>)
 800baf2:	2247      	movs	r2, #71	; 0x47
 800baf4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800baf6:	4b3a      	ldr	r3, [pc, #232]	; (800bbe0 <timerInit+0x314>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800bafc:	4b38      	ldr	r3, [pc, #224]	; (800bbe0 <timerInit+0x314>)
 800bafe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb02:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bb04:	4b36      	ldr	r3, [pc, #216]	; (800bbe0 <timerInit+0x314>)
 800bb06:	2200      	movs	r2, #0
 800bb08:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bb0a:	4b35      	ldr	r3, [pc, #212]	; (800bbe0 <timerInit+0x314>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800bb10:	4833      	ldr	r0, [pc, #204]	; (800bbe0 <timerInit+0x314>)
 800bb12:	f003 fe8f 	bl	800f834 <HAL_TIM_IC_Init>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <timerInit+0x254>
	{
		Error_Handler();
 800bb1c:	f7f5 fd4a 	bl	80015b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bb20:	2300      	movs	r3, #0
 800bb22:	62fb      	str	r3, [r7, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bb24:	2300      	movs	r3, #0
 800bb26:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800bb28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	482c      	ldr	r0, [pc, #176]	; (800bbe0 <timerInit+0x314>)
 800bb30:	f004 febe 	bl	80108b0 <HAL_TIMEx_MasterConfigSynchronization>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <timerInit+0x272>
	{
		Error_Handler();
 800bb3a:	f7f5 fd3b 	bl	80015b4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800bb42:	2301      	movs	r3, #1
 800bb44:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800bb46:	2300      	movs	r3, #0
 800bb48:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800bb4e:	463b      	mov	r3, r7
 800bb50:	2200      	movs	r2, #0
 800bb52:	4619      	mov	r1, r3
 800bb54:	4822      	ldr	r0, [pc, #136]	; (800bbe0 <timerInit+0x314>)
 800bb56:	f004 f8cb 	bl	800fcf0 <HAL_TIM_IC_ConfigChannel>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <timerInit+0x298>
	{
		Error_Handler();
 800bb60:	f7f5 fd28 	bl	80015b4 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800bb64:	463b      	mov	r3, r7
 800bb66:	2204      	movs	r2, #4
 800bb68:	4619      	mov	r1, r3
 800bb6a:	481d      	ldr	r0, [pc, #116]	; (800bbe0 <timerInit+0x314>)
 800bb6c:	f004 f8c0 	bl	800fcf0 <HAL_TIM_IC_ConfigChannel>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d001      	beq.n	800bb7a <timerInit+0x2ae>
	{
		Error_Handler();
 800bb76:	f7f5 fd1d 	bl	80015b4 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800bb7a:	463b      	mov	r3, r7
 800bb7c:	2208      	movs	r2, #8
 800bb7e:	4619      	mov	r1, r3
 800bb80:	4817      	ldr	r0, [pc, #92]	; (800bbe0 <timerInit+0x314>)
 800bb82:	f004 f8b5 	bl	800fcf0 <HAL_TIM_IC_ConfigChannel>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d001      	beq.n	800bb90 <timerInit+0x2c4>
	{
		Error_Handler();
 800bb8c:	f7f5 fd12 	bl	80015b4 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800bb90:	463b      	mov	r3, r7
 800bb92:	220c      	movs	r2, #12
 800bb94:	4619      	mov	r1, r3
 800bb96:	4812      	ldr	r0, [pc, #72]	; (800bbe0 <timerInit+0x314>)
 800bb98:	f004 f8aa 	bl	800fcf0 <HAL_TIM_IC_ConfigChannel>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <timerInit+0x2da>
	{
		Error_Handler();
 800bba2:	f7f5 fd07 	bl	80015b4 <Error_Handler>
	}

	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800bba6:	2100      	movs	r1, #0
 800bba8:	480d      	ldr	r0, [pc, #52]	; (800bbe0 <timerInit+0x314>)
 800bbaa:	f003 fe93 	bl	800f8d4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800bbae:	2104      	movs	r1, #4
 800bbb0:	480b      	ldr	r0, [pc, #44]	; (800bbe0 <timerInit+0x314>)
 800bbb2:	f003 fe8f 	bl	800f8d4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 800bbb6:	2108      	movs	r1, #8
 800bbb8:	4809      	ldr	r0, [pc, #36]	; (800bbe0 <timerInit+0x314>)
 800bbba:	f003 fe8b 	bl	800f8d4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 800bbbe:	210c      	movs	r1, #12
 800bbc0:	4807      	ldr	r0, [pc, #28]	; (800bbe0 <timerInit+0x314>)
 800bbc2:	f003 fe87 	bl	800f8d4 <HAL_TIM_IC_Start_IT>

	return ret;
 800bbc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3748      	adds	r7, #72	; 0x48
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20001310 	.word	0x20001310
 800bbd8:	40000800 	.word	0x40000800
 800bbdc:	200013a0 	.word	0x200013a0
 800bbe0:	20001358 	.word	0x20001358
 800bbe4:	40000400 	.word	0x40000400

0800bbe8 <HAL_TIM_IC_MspInit>:


void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08c      	sub	sp, #48	; 0x30
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbf0:	f107 0320 	add.w	r3, r7, #32
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	601a      	str	r2, [r3, #0]
 800bbf8:	605a      	str	r2, [r3, #4]
 800bbfa:	609a      	str	r2, [r3, #8]
 800bbfc:	60da      	str	r2, [r3, #12]
	if(tim_icHandle->Instance==TIM2)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc06:	d12c      	bne.n	800bc62 <HAL_TIM_IC_MspInit+0x7a>
	{
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 800bc08:	4b3c      	ldr	r3, [pc, #240]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc0a:	69db      	ldr	r3, [r3, #28]
 800bc0c:	4a3b      	ldr	r2, [pc, #236]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc0e:	f043 0301 	orr.w	r3, r3, #1
 800bc12:	61d3      	str	r3, [r2, #28]
 800bc14:	4b39      	ldr	r3, [pc, #228]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc16:	69db      	ldr	r3, [r3, #28]
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	61fb      	str	r3, [r7, #28]
 800bc1e:	69fb      	ldr	r3, [r7, #28]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800bc20:	4b36      	ldr	r3, [pc, #216]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	4a35      	ldr	r2, [pc, #212]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc26:	f043 0304 	orr.w	r3, r3, #4
 800bc2a:	6193      	str	r3, [r2, #24]
 800bc2c:	4b33      	ldr	r3, [pc, #204]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	f003 0304 	and.w	r3, r3, #4
 800bc34:	61bb      	str	r3, [r7, #24]
 800bc36:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP ------> TIM2_CH1
    PA1      ------> TIM2_CH2
    PA2      ------> TIM2_CH3  //UART2 reserved
    PA3      ------> TIM2_CH4  //UART2 reserved
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc40:	2300      	movs	r3, #0
 800bc42:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc44:	f107 0320 	add.w	r3, r7, #32
 800bc48:	4619      	mov	r1, r3
 800bc4a:	482d      	ldr	r0, [pc, #180]	; (800bd00 <HAL_TIM_IC_MspInit+0x118>)
 800bc4c:	f001 f92e 	bl	800ceac <HAL_GPIO_Init>

		/* TIM2 interrupt Init */
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800bc50:	2200      	movs	r2, #0
 800bc52:	2100      	movs	r1, #0
 800bc54:	201c      	movs	r0, #28
 800bc56:	f000 fe88 	bl	800c96a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800bc5a:	201c      	movs	r0, #28
 800bc5c:	f000 fea1 	bl	800c9a2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 800bc60:	e048      	b.n	800bcf4 <HAL_TIM_IC_MspInit+0x10c>
	else if(tim_icHandle->Instance==TIM3)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a27      	ldr	r2, [pc, #156]	; (800bd04 <HAL_TIM_IC_MspInit+0x11c>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d143      	bne.n	800bcf4 <HAL_TIM_IC_MspInit+0x10c>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800bc6c:	4b23      	ldr	r3, [pc, #140]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc6e:	69db      	ldr	r3, [r3, #28]
 800bc70:	4a22      	ldr	r2, [pc, #136]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc72:	f043 0302 	orr.w	r3, r3, #2
 800bc76:	61d3      	str	r3, [r2, #28]
 800bc78:	4b20      	ldr	r3, [pc, #128]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	f003 0302 	and.w	r3, r3, #2
 800bc80:	617b      	str	r3, [r7, #20]
 800bc82:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800bc84:	4b1d      	ldr	r3, [pc, #116]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc86:	699b      	ldr	r3, [r3, #24]
 800bc88:	4a1c      	ldr	r2, [pc, #112]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc8a:	f043 0304 	orr.w	r3, r3, #4
 800bc8e:	6193      	str	r3, [r2, #24]
 800bc90:	4b1a      	ldr	r3, [pc, #104]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	f003 0304 	and.w	r3, r3, #4
 800bc98:	613b      	str	r3, [r7, #16]
 800bc9a:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800bc9c:	4b17      	ldr	r3, [pc, #92]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bc9e:	699b      	ldr	r3, [r3, #24]
 800bca0:	4a16      	ldr	r2, [pc, #88]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bca2:	f043 0308 	orr.w	r3, r3, #8
 800bca6:	6193      	str	r3, [r2, #24]
 800bca8:	4b14      	ldr	r3, [pc, #80]	; (800bcfc <HAL_TIM_IC_MspInit+0x114>)
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	f003 0308 	and.w	r3, r3, #8
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bcb4:	23c0      	movs	r3, #192	; 0xc0
 800bcb6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bcc0:	f107 0320 	add.w	r3, r7, #32
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	480e      	ldr	r0, [pc, #56]	; (800bd00 <HAL_TIM_IC_MspInit+0x118>)
 800bcc8:	f001 f8f0 	bl	800ceac <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bccc:	2303      	movs	r3, #3
 800bcce:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bcd8:	f107 0320 	add.w	r3, r7, #32
 800bcdc:	4619      	mov	r1, r3
 800bcde:	480a      	ldr	r0, [pc, #40]	; (800bd08 <HAL_TIM_IC_MspInit+0x120>)
 800bce0:	f001 f8e4 	bl	800ceac <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800bce4:	2200      	movs	r2, #0
 800bce6:	2100      	movs	r1, #0
 800bce8:	201d      	movs	r0, #29
 800bcea:	f000 fe3e 	bl	800c96a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800bcee:	201d      	movs	r0, #29
 800bcf0:	f000 fe57 	bl	800c9a2 <HAL_NVIC_EnableIRQ>
}
 800bcf4:	bf00      	nop
 800bcf6:	3730      	adds	r7, #48	; 0x30
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	40021000 	.word	0x40021000
 800bd00:	40010800 	.word	0x40010800
 800bd04:	40000400 	.word	0x40000400
 800bd08:	40010c00 	.word	0x40010c00

0800bd0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]

	if(tim_baseHandle->Instance==TIM4)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a0d      	ldr	r2, [pc, #52]	; (800bd50 <HAL_TIM_Base_MspInit+0x44>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d113      	bne.n	800bd46 <HAL_TIM_Base_MspInit+0x3a>
	{
		/* USER CODE BEGIN TIM4_MspInit 0 */

		/* USER CODE END TIM4_MspInit 0 */
		/* TIM4 clock enable */
		__HAL_RCC_TIM4_CLK_ENABLE();
 800bd1e:	4b0d      	ldr	r3, [pc, #52]	; (800bd54 <HAL_TIM_Base_MspInit+0x48>)
 800bd20:	69db      	ldr	r3, [r3, #28]
 800bd22:	4a0c      	ldr	r2, [pc, #48]	; (800bd54 <HAL_TIM_Base_MspInit+0x48>)
 800bd24:	f043 0304 	orr.w	r3, r3, #4
 800bd28:	61d3      	str	r3, [r2, #28]
 800bd2a:	4b0a      	ldr	r3, [pc, #40]	; (800bd54 <HAL_TIM_Base_MspInit+0x48>)
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	f003 0304 	and.w	r3, r3, #4
 800bd32:	60fb      	str	r3, [r7, #12]
 800bd34:	68fb      	ldr	r3, [r7, #12]

		/* TIM4 interrupt Init */
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800bd36:	2200      	movs	r2, #0
 800bd38:	2100      	movs	r1, #0
 800bd3a:	201e      	movs	r0, #30
 800bd3c:	f000 fe15 	bl	800c96a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800bd40:	201e      	movs	r0, #30
 800bd42:	f000 fe2e 	bl	800c9a2 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	}
}
 800bd46:	bf00      	nop
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	40000800 	.word	0x40000800
 800bd54:	40021000 	.word	0x40021000

0800bd58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b088      	sub	sp, #32
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd60:	f107 0310 	add.w	r3, r7, #16
 800bd64:	2200      	movs	r2, #0
 800bd66:	601a      	str	r2, [r3, #0]
 800bd68:	605a      	str	r2, [r3, #4]
 800bd6a:	609a      	str	r2, [r3, #8]
 800bd6c:	60da      	str	r2, [r3, #12]
	if(timHandle->Instance==TIM4)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a10      	ldr	r2, [pc, #64]	; (800bdb4 <HAL_TIM_MspPostInit+0x5c>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d118      	bne.n	800bdaa <HAL_TIM_MspPostInit+0x52>
	{
		/* USER CODE BEGIN TIM4_MspPostInit 0 */

		/* USER CODE END TIM4_MspPostInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800bd78:	4b0f      	ldr	r3, [pc, #60]	; (800bdb8 <HAL_TIM_MspPostInit+0x60>)
 800bd7a:	699b      	ldr	r3, [r3, #24]
 800bd7c:	4a0e      	ldr	r2, [pc, #56]	; (800bdb8 <HAL_TIM_MspPostInit+0x60>)
 800bd7e:	f043 0308 	orr.w	r3, r3, #8
 800bd82:	6193      	str	r3, [r2, #24]
 800bd84:	4b0c      	ldr	r3, [pc, #48]	; (800bdb8 <HAL_TIM_MspPostInit+0x60>)
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	f003 0308 	and.w	r3, r3, #8
 800bd8c:	60fb      	str	r3, [r7, #12]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800bd90:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bd94:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd96:	2302      	movs	r3, #2
 800bd98:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bd9e:	f107 0310 	add.w	r3, r7, #16
 800bda2:	4619      	mov	r1, r3
 800bda4:	4805      	ldr	r0, [pc, #20]	; (800bdbc <HAL_TIM_MspPostInit+0x64>)
 800bda6:	f001 f881 	bl	800ceac <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM4_MspPostInit 1 */

		/* USER CODE END TIM4_MspPostInit 1 */
	}

}
 800bdaa:	bf00      	nop
 800bdac:	3720      	adds	r7, #32
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	40000800 	.word	0x40000800
 800bdb8:	40021000 	.word	0x40021000
 800bdbc:	40010c00 	.word	0x40010c00

0800bdc0 <uartInit>:

static void MX_DMA_Init(void);


bool uartInit(void)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	607b      	str	r3, [r7, #4]
 800bdca:	e007      	b.n	800bddc <uartInit+0x1c>
  {
    is_open[i] = false;
 800bdcc:	4a08      	ldr	r2, [pc, #32]	; (800bdf0 <uartInit+0x30>)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	607b      	str	r3, [r7, #4]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	ddf4      	ble.n	800bdcc <uartInit+0xc>
  }

  MX_DMA_Init();
 800bde2:	f000 fbfd 	bl	800c5e0 <MX_DMA_Init>
  return true;
 800bde6:	2301      	movs	r3, #1
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	2000078c 	.word	0x2000078c

0800bdf4 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	6039      	str	r1, [r7, #0]
 800bdfe:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800be00:	2300      	movs	r3, #0
 800be02:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 800be04:	79fb      	ldrb	r3, [r7, #7]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <uartOpen+0x1c>
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d06c      	beq.n	800bee8 <uartOpen+0xf4>
 800be0e:	e0d7      	b.n	800bfc0 <uartOpen+0x1cc>
  {
    case _DEF_UART1:
    	huart1.Instance = USART1;
 800be10:	4b6e      	ldr	r3, [pc, #440]	; (800bfcc <uartOpen+0x1d8>)
 800be12:	4a6f      	ldr	r2, [pc, #444]	; (800bfd0 <uartOpen+0x1dc>)
 800be14:	601a      	str	r2, [r3, #0]
    	huart1.Init.BaudRate = baud;
 800be16:	4a6d      	ldr	r2, [pc, #436]	; (800bfcc <uartOpen+0x1d8>)
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	6053      	str	r3, [r2, #4]
    	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800be1c:	4b6b      	ldr	r3, [pc, #428]	; (800bfcc <uartOpen+0x1d8>)
 800be1e:	2200      	movs	r2, #0
 800be20:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 800be22:	4b6a      	ldr	r3, [pc, #424]	; (800bfcc <uartOpen+0x1d8>)
 800be24:	2200      	movs	r2, #0
 800be26:	60da      	str	r2, [r3, #12]
    	huart1.Init.Parity = UART_PARITY_NONE;
 800be28:	4b68      	ldr	r3, [pc, #416]	; (800bfcc <uartOpen+0x1d8>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	611a      	str	r2, [r3, #16]
    	huart1.Init.Mode = UART_MODE_TX_RX;
 800be2e:	4b67      	ldr	r3, [pc, #412]	; (800bfcc <uartOpen+0x1d8>)
 800be30:	220c      	movs	r2, #12
 800be32:	615a      	str	r2, [r3, #20]
    	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800be34:	4b65      	ldr	r3, [pc, #404]	; (800bfcc <uartOpen+0x1d8>)
 800be36:	2200      	movs	r2, #0
 800be38:	619a      	str	r2, [r3, #24]
    	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800be3a:	4b64      	ldr	r3, [pc, #400]	; (800bfcc <uartOpen+0x1d8>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	61da      	str	r2, [r3, #28]

    	QueueCreate(&ring_buffer[ch], &u1_rx_buf[0], MAX_SIZE);
 800be40:	79fa      	ldrb	r2, [r7, #7]
 800be42:	4613      	mov	r3, r2
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	4413      	add	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4a62      	ldr	r2, [pc, #392]	; (800bfd4 <uartOpen+0x1e0>)
 800be4c:	4413      	add	r3, r2
 800be4e:	22ff      	movs	r2, #255	; 0xff
 800be50:	4961      	ldr	r1, [pc, #388]	; (800bfd8 <uartOpen+0x1e4>)
 800be52:	4618      	mov	r0, r3
 800be54:	f7fa f8fe 	bl	8006054 <QueueCreate>

    	if (HAL_UART_Init(&huart1) != HAL_OK)
 800be58:	485c      	ldr	r0, [pc, #368]	; (800bfcc <uartOpen+0x1d8>)
 800be5a:	f004 fd99 	bl	8010990 <HAL_UART_Init>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <uartOpen+0x76>
    	{
    	  Error_Handler();
 800be64:	f7f5 fba6 	bl	80015b4 <Error_Handler>
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart1_rx.Instance->CNDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
    	}
      break;
 800be68:	e0aa      	b.n	800bfc0 <uartOpen+0x1cc>
    		ret = true;
 800be6a:	2301      	movs	r3, #1
 800be6c:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 800be6e:	79fb      	ldrb	r3, [r7, #7]
 800be70:	4a5a      	ldr	r2, [pc, #360]	; (800bfdc <uartOpen+0x1e8>)
 800be72:	2101      	movs	r1, #1
 800be74:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&u1_rx_buf[0], MAX_SIZE) != HAL_OK)
 800be76:	22ff      	movs	r2, #255	; 0xff
 800be78:	4957      	ldr	r1, [pc, #348]	; (800bfd8 <uartOpen+0x1e4>)
 800be7a:	4854      	ldr	r0, [pc, #336]	; (800bfcc <uartOpen+0x1d8>)
 800be7c:	f004 feac 	bl	8010bd8 <HAL_UART_Receive_DMA>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d001      	beq.n	800be8a <uartOpen+0x96>
          ret = false;
 800be86:	2300      	movs	r3, #0
 800be88:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart1_rx.Instance->CNDTR;
 800be8a:	79fa      	ldrb	r2, [r7, #7]
 800be8c:	4951      	ldr	r1, [pc, #324]	; (800bfd4 <uartOpen+0x1e0>)
 800be8e:	4613      	mov	r3, r2
 800be90:	005b      	lsls	r3, r3, #1
 800be92:	4413      	add	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	440b      	add	r3, r1
 800be98:	3306      	adds	r3, #6
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	b2d9      	uxtb	r1, r3
 800be9e:	4b50      	ldr	r3, [pc, #320]	; (800bfe0 <uartOpen+0x1ec>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	79fa      	ldrb	r2, [r7, #7]
 800bea8:	1acb      	subs	r3, r1, r3
 800beaa:	b2d8      	uxtb	r0, r3
 800beac:	4949      	ldr	r1, [pc, #292]	; (800bfd4 <uartOpen+0x1e0>)
 800beae:	4613      	mov	r3, r2
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	4413      	add	r3, r2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	440b      	add	r3, r1
 800beb8:	3304      	adds	r3, #4
 800beba:	4602      	mov	r2, r0
 800bebc:	701a      	strb	r2, [r3, #0]
        ring_buffer[ch].tail = ring_buffer[ch].head;
 800bebe:	79f9      	ldrb	r1, [r7, #7]
 800bec0:	79fa      	ldrb	r2, [r7, #7]
 800bec2:	4844      	ldr	r0, [pc, #272]	; (800bfd4 <uartOpen+0x1e0>)
 800bec4:	460b      	mov	r3, r1
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	440b      	add	r3, r1
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4403      	add	r3, r0
 800bece:	3304      	adds	r3, #4
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	b2d8      	uxtb	r0, r3
 800bed4:	493f      	ldr	r1, [pc, #252]	; (800bfd4 <uartOpen+0x1e0>)
 800bed6:	4613      	mov	r3, r2
 800bed8:	005b      	lsls	r3, r3, #1
 800beda:	4413      	add	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	440b      	add	r3, r1
 800bee0:	3305      	adds	r3, #5
 800bee2:	4602      	mov	r2, r0
 800bee4:	701a      	strb	r2, [r3, #0]
      break;
 800bee6:	e06b      	b.n	800bfc0 <uartOpen+0x1cc>

    case _DEF_UART2:
      huart2.Instance = USART2;
 800bee8:	4b3e      	ldr	r3, [pc, #248]	; (800bfe4 <uartOpen+0x1f0>)
 800beea:	4a3f      	ldr	r2, [pc, #252]	; (800bfe8 <uartOpen+0x1f4>)
 800beec:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 800beee:	4a3d      	ldr	r2, [pc, #244]	; (800bfe4 <uartOpen+0x1f0>)
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800bef4:	4b3b      	ldr	r3, [pc, #236]	; (800bfe4 <uartOpen+0x1f0>)
 800bef6:	2200      	movs	r2, #0
 800bef8:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 800befa:	4b3a      	ldr	r3, [pc, #232]	; (800bfe4 <uartOpen+0x1f0>)
 800befc:	2200      	movs	r2, #0
 800befe:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 800bf00:	4b38      	ldr	r3, [pc, #224]	; (800bfe4 <uartOpen+0x1f0>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 800bf06:	4b37      	ldr	r3, [pc, #220]	; (800bfe4 <uartOpen+0x1f0>)
 800bf08:	220c      	movs	r2, #12
 800bf0a:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bf0c:	4b35      	ldr	r3, [pc, #212]	; (800bfe4 <uartOpen+0x1f0>)
 800bf0e:	2200      	movs	r2, #0
 800bf10:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800bf12:	4b34      	ldr	r3, [pc, #208]	; (800bfe4 <uartOpen+0x1f0>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	61da      	str	r2, [r3, #28]

      QueueCreate(&ring_buffer[ch], &u2_rx_buf[0], MAX_SIZE);
 800bf18:	79fa      	ldrb	r2, [r7, #7]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	005b      	lsls	r3, r3, #1
 800bf1e:	4413      	add	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4a2c      	ldr	r2, [pc, #176]	; (800bfd4 <uartOpen+0x1e0>)
 800bf24:	4413      	add	r3, r2
 800bf26:	22ff      	movs	r2, #255	; 0xff
 800bf28:	4930      	ldr	r1, [pc, #192]	; (800bfec <uartOpen+0x1f8>)
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fa f892 	bl	8006054 <QueueCreate>

      if (HAL_UART_Init(&huart2) != HAL_OK)
 800bf30:	482c      	ldr	r0, [pc, #176]	; (800bfe4 <uartOpen+0x1f0>)
 800bf32:	f004 fd2d 	bl	8010990 <HAL_UART_Init>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d002      	beq.n	800bf42 <uartOpen+0x14e>
      {
        ret = false;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	73fb      	strb	r3, [r7, #15]
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart2_rx.Instance->CNDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
      }
      break;
 800bf40:	e03d      	b.n	800bfbe <uartOpen+0x1ca>
        ret = true;
 800bf42:	2301      	movs	r3, #1
 800bf44:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 800bf46:	79fb      	ldrb	r3, [r7, #7]
 800bf48:	4a24      	ldr	r2, [pc, #144]	; (800bfdc <uartOpen+0x1e8>)
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&u2_rx_buf[0], MAX_SIZE) != HAL_OK)
 800bf4e:	22ff      	movs	r2, #255	; 0xff
 800bf50:	4926      	ldr	r1, [pc, #152]	; (800bfec <uartOpen+0x1f8>)
 800bf52:	4824      	ldr	r0, [pc, #144]	; (800bfe4 <uartOpen+0x1f0>)
 800bf54:	f004 fe40 	bl	8010bd8 <HAL_UART_Receive_DMA>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d001      	beq.n	800bf62 <uartOpen+0x16e>
          ret = false;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	73fb      	strb	r3, [r7, #15]
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart2_rx.Instance->CNDTR;
 800bf62:	79fa      	ldrb	r2, [r7, #7]
 800bf64:	491b      	ldr	r1, [pc, #108]	; (800bfd4 <uartOpen+0x1e0>)
 800bf66:	4613      	mov	r3, r2
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	440b      	add	r3, r1
 800bf70:	3306      	adds	r3, #6
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	b2d9      	uxtb	r1, r3
 800bf76:	4b1e      	ldr	r3, [pc, #120]	; (800bff0 <uartOpen+0x1fc>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	79fa      	ldrb	r2, [r7, #7]
 800bf80:	1acb      	subs	r3, r1, r3
 800bf82:	b2d8      	uxtb	r0, r3
 800bf84:	4913      	ldr	r1, [pc, #76]	; (800bfd4 <uartOpen+0x1e0>)
 800bf86:	4613      	mov	r3, r2
 800bf88:	005b      	lsls	r3, r3, #1
 800bf8a:	4413      	add	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	440b      	add	r3, r1
 800bf90:	3304      	adds	r3, #4
 800bf92:	4602      	mov	r2, r0
 800bf94:	701a      	strb	r2, [r3, #0]
        ring_buffer[ch].tail = ring_buffer[ch].head;
 800bf96:	79f9      	ldrb	r1, [r7, #7]
 800bf98:	79fa      	ldrb	r2, [r7, #7]
 800bf9a:	480e      	ldr	r0, [pc, #56]	; (800bfd4 <uartOpen+0x1e0>)
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	005b      	lsls	r3, r3, #1
 800bfa0:	440b      	add	r3, r1
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	4403      	add	r3, r0
 800bfa6:	3304      	adds	r3, #4
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	b2d8      	uxtb	r0, r3
 800bfac:	4909      	ldr	r1, [pc, #36]	; (800bfd4 <uartOpen+0x1e0>)
 800bfae:	4613      	mov	r3, r2
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	4413      	add	r3, r2
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	440b      	add	r3, r1
 800bfb8:	3305      	adds	r3, #5
 800bfba:	4602      	mov	r2, r0
 800bfbc:	701a      	strb	r2, [r3, #0]
      break;
 800bfbe:	bf00      	nop
  }

  return ret;
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	200014f8 	.word	0x200014f8
 800bfd0:	40013800 	.word	0x40013800
 800bfd4:	20000790 	.word	0x20000790
 800bfd8:	200007a8 	.word	0x200007a8
 800bfdc:	2000078c 	.word	0x2000078c
 800bfe0:	20001470 	.word	0x20001470
 800bfe4:	20001538 	.word	0x20001538
 800bfe8:	40004400 	.word	0x40004400
 800bfec:	200008a8 	.word	0x200008a8
 800bff0:	200013e8 	.word	0x200013e8

0800bff4 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	4603      	mov	r3, r0
 800bffc:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800c002:	79fb      	ldrb	r3, [r7, #7]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <uartAvailable+0x1a>
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d026      	beq.n	800c05a <uartAvailable+0x66>
 800c00c:	e04b      	b.n	800c0a6 <uartAvailable+0xb2>
  {
    case _DEF_UART1:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_usart1_rx.Instance->CNDTR);
 800c00e:	79fa      	ldrb	r2, [r7, #7]
 800c010:	4927      	ldr	r1, [pc, #156]	; (800c0b0 <uartAvailable+0xbc>)
 800c012:	4613      	mov	r3, r2
 800c014:	005b      	lsls	r3, r3, #1
 800c016:	4413      	add	r3, r2
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	440b      	add	r3, r1
 800c01c:	3306      	adds	r3, #6
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	b2d9      	uxtb	r1, r3
 800c022:	4b24      	ldr	r3, [pc, #144]	; (800c0b4 <uartAvailable+0xc0>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	79fa      	ldrb	r2, [r7, #7]
 800c02c:	1acb      	subs	r3, r1, r3
 800c02e:	b2d8      	uxtb	r0, r3
 800c030:	491f      	ldr	r1, [pc, #124]	; (800c0b0 <uartAvailable+0xbc>)
 800c032:	4613      	mov	r3, r2
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	4413      	add	r3, r2
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	440b      	add	r3, r1
 800c03c:	3304      	adds	r3, #4
 800c03e:	4602      	mov	r2, r0
 800c040:	701a      	strb	r2, [r3, #0]
      ret = QueueAvailable(&ring_buffer[ch]);
 800c042:	79fa      	ldrb	r2, [r7, #7]
 800c044:	4613      	mov	r3, r2
 800c046:	005b      	lsls	r3, r3, #1
 800c048:	4413      	add	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4a18      	ldr	r2, [pc, #96]	; (800c0b0 <uartAvailable+0xbc>)
 800c04e:	4413      	add	r3, r2
 800c050:	4618      	mov	r0, r3
 800c052:	f7fa f871 	bl	8006138 <QueueAvailable>
 800c056:	60f8      	str	r0, [r7, #12]
      break;
 800c058:	e025      	b.n	800c0a6 <uartAvailable+0xb2>

    case _DEF_UART2:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_usart2_rx.Instance->CNDTR);
 800c05a:	79fa      	ldrb	r2, [r7, #7]
 800c05c:	4914      	ldr	r1, [pc, #80]	; (800c0b0 <uartAvailable+0xbc>)
 800c05e:	4613      	mov	r3, r2
 800c060:	005b      	lsls	r3, r3, #1
 800c062:	4413      	add	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	440b      	add	r3, r1
 800c068:	3306      	adds	r3, #6
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	b2d9      	uxtb	r1, r3
 800c06e:	4b12      	ldr	r3, [pc, #72]	; (800c0b8 <uartAvailable+0xc4>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	b2db      	uxtb	r3, r3
 800c076:	79fa      	ldrb	r2, [r7, #7]
 800c078:	1acb      	subs	r3, r1, r3
 800c07a:	b2d8      	uxtb	r0, r3
 800c07c:	490c      	ldr	r1, [pc, #48]	; (800c0b0 <uartAvailable+0xbc>)
 800c07e:	4613      	mov	r3, r2
 800c080:	005b      	lsls	r3, r3, #1
 800c082:	4413      	add	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	440b      	add	r3, r1
 800c088:	3304      	adds	r3, #4
 800c08a:	4602      	mov	r2, r0
 800c08c:	701a      	strb	r2, [r3, #0]
      ret = QueueAvailable(&ring_buffer[ch]);
 800c08e:	79fa      	ldrb	r2, [r7, #7]
 800c090:	4613      	mov	r3, r2
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	4413      	add	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4a05      	ldr	r2, [pc, #20]	; (800c0b0 <uartAvailable+0xbc>)
 800c09a:	4413      	add	r3, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fa f84b 	bl	8006138 <QueueAvailable>
 800c0a2:	60f8      	str	r0, [r7, #12]
      break;
 800c0a4:	bf00      	nop
  }

  return ret;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	20000790 	.word	0x20000790
 800c0b4:	20001470 	.word	0x20001470
 800c0b8:	200013e8 	.word	0x200013e8

0800c0bc <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800c0ca:	79fb      	ldrb	r3, [r7, #7]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <uartRead+0x1a>
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d008      	beq.n	800c0e6 <uartRead+0x2a>
 800c0d4:	e00f      	b.n	800c0f6 <uartRead+0x3a>
  {
    case _DEF_UART1:
    	Q_read(&ring_buffer[_DEF_UART1], &ret, 1);
 800c0d6:	f107 030f 	add.w	r3, r7, #15
 800c0da:	2201      	movs	r2, #1
 800c0dc:	4619      	mov	r1, r3
 800c0de:	4808      	ldr	r0, [pc, #32]	; (800c100 <uartRead+0x44>)
 800c0e0:	f7f9 ffec 	bl	80060bc <Q_read>
      break;
 800c0e4:	e007      	b.n	800c0f6 <uartRead+0x3a>

    case _DEF_UART2:
    	Q_read(&ring_buffer[_DEF_UART2], &ret, 1);
 800c0e6:	f107 030f 	add.w	r3, r7, #15
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	4805      	ldr	r0, [pc, #20]	; (800c104 <uartRead+0x48>)
 800c0f0:	f7f9 ffe4 	bl	80060bc <Q_read>
      break;
 800c0f4:	bf00      	nop
  }

  return ret;
 800c0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	20000790 	.word	0x20000790
 800c104:	2000079c 	.word	0x2000079c

0800c108 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b086      	sub	sp, #24
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
 800c114:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800c116:	2300      	movs	r3, #0
 800c118:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d002      	beq.n	800c126 <uartWrite+0x1e>
 800c120:	2b01      	cmp	r3, #1
 800c122:	d00f      	beq.n	800c144 <uartWrite+0x3c>
 800c124:	e020      	b.n	800c168 <uartWrite+0x60>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	b29a      	uxth	r2, r3
 800c12a:	2364      	movs	r3, #100	; 0x64
 800c12c:	68b9      	ldr	r1, [r7, #8]
 800c12e:	4811      	ldr	r0, [pc, #68]	; (800c174 <uartWrite+0x6c>)
 800c130:	f004 fc7b 	bl	8010a2a <HAL_UART_Transmit>
 800c134:	4603      	mov	r3, r0
 800c136:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800c138:	7cfb      	ldrb	r3, [r7, #19]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d111      	bne.n	800c162 <uartWrite+0x5a>
      {
        ret = length;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	617b      	str	r3, [r7, #20]
      }
      break;
 800c142:	e00e      	b.n	800c162 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart2, p_data, length, 100);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	b29a      	uxth	r2, r3
 800c148:	2364      	movs	r3, #100	; 0x64
 800c14a:	68b9      	ldr	r1, [r7, #8]
 800c14c:	480a      	ldr	r0, [pc, #40]	; (800c178 <uartWrite+0x70>)
 800c14e:	f004 fc6c 	bl	8010a2a <HAL_UART_Transmit>
 800c152:	4603      	mov	r3, r0
 800c154:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800c156:	7cfb      	ldrb	r3, [r7, #19]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d104      	bne.n	800c166 <uartWrite+0x5e>
      {
        ret = length;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	617b      	str	r3, [r7, #20]
      }
      break;
 800c160:	e001      	b.n	800c166 <uartWrite+0x5e>
      break;
 800c162:	bf00      	nop
 800c164:	e000      	b.n	800c168 <uartWrite+0x60>
      break;
 800c166:	bf00      	nop
  }

  return ret;
 800c168:	697b      	ldr	r3, [r7, #20]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3718      	adds	r7, #24
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	200014f8 	.word	0x200014f8
 800c178:	20001538 	.word	0x20001538

0800c17c <uartWriteIT>:

uint32_t uartWriteIT(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	4603      	mov	r3, r0
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 800c18e:	7bfb      	ldrb	r3, [r7, #15]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d002      	beq.n	800c19a <uartWriteIT+0x1e>
 800c194:	2b01      	cmp	r3, #1
 800c196:	d00f      	beq.n	800c1b8 <uartWriteIT+0x3c>
 800c198:	e020      	b.n	800c1dc <uartWriteIT+0x60>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit_IT(&huart1, p_data, length);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	461a      	mov	r2, r3
 800c1a0:	68b9      	ldr	r1, [r7, #8]
 800c1a2:	4811      	ldr	r0, [pc, #68]	; (800c1e8 <uartWriteIT+0x6c>)
 800c1a4:	f004 fcd3 	bl	8010b4e <HAL_UART_Transmit_IT>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800c1ac:	7cfb      	ldrb	r3, [r7, #19]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d111      	bne.n	800c1d6 <uartWriteIT+0x5a>
      {
        ret = length;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	617b      	str	r3, [r7, #20]
      }
      break;
 800c1b6:	e00e      	b.n	800c1d6 <uartWriteIT+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit_IT(&huart2, p_data, length);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	461a      	mov	r2, r3
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	480a      	ldr	r0, [pc, #40]	; (800c1ec <uartWriteIT+0x70>)
 800c1c2:	f004 fcc4 	bl	8010b4e <HAL_UART_Transmit_IT>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800c1ca:	7cfb      	ldrb	r3, [r7, #19]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d104      	bne.n	800c1da <uartWriteIT+0x5e>
      {
        ret = length;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	617b      	str	r3, [r7, #20]
      }
      break;
 800c1d4:	e001      	b.n	800c1da <uartWriteIT+0x5e>
      break;
 800c1d6:	bf00      	nop
 800c1d8:	e000      	b.n	800c1dc <uartWriteIT+0x60>
      break;
 800c1da:	bf00      	nop
  }

  return ret;
 800c1dc:	697b      	ldr	r3, [r7, #20]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3718      	adds	r7, #24
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	200014f8 	.word	0x200014f8
 800c1ec:	20001538 	.word	0x20001538

0800c1f0 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800c1f0:	b40e      	push	{r1, r2, r3}
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b0c7      	sub	sp, #284	; 0x11c
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	1dfb      	adds	r3, r7, #7
 800c1fc:	701a      	strb	r2, [r3, #0]
  char buf[MAX_SIZE];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800c1fe:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800c202:	f107 030c 	add.w	r3, r7, #12
 800c206:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, MAX_SIZE, fmt, args);
 800c208:	f107 030c 	add.w	r3, r7, #12
 800c20c:	f107 0010 	add.w	r0, r7, #16
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c216:	21ff      	movs	r1, #255	; 0xff
 800c218:	f006 fd4c 	bl	8012cb4 <vsniprintf>
 800c21c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800c220:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800c224:	f107 0110 	add.w	r1, r7, #16
 800c228:	1dfb      	adds	r3, r7, #7
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7ff ff6b 	bl	800c108 <uartWrite>
 800c232:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 800c236:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800c240:	46bd      	mov	sp, r7
 800c242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c246:	b003      	add	sp, #12
 800c248:	4770      	bx	lr
	...

0800c24c <uartGetBaud>:

  return ret;
}

uint32_t uartGetBaud(uint8_t ch)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	4603      	mov	r3, r0
 800c254:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	60fb      	str	r3, [r7, #12]


  switch(ch)
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <uartGetBaud+0x1a>
 800c260:	2b01      	cmp	r3, #1
 800c262:	d004      	beq.n	800c26e <uartGetBaud+0x22>
 800c264:	e007      	b.n	800c276 <uartGetBaud+0x2a>
  {
    case _DEF_UART1:
      ret = huart1.Init.BaudRate;
 800c266:	4b07      	ldr	r3, [pc, #28]	; (800c284 <uartGetBaud+0x38>)
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	60fb      	str	r3, [r7, #12]
      break;
 800c26c:	e003      	b.n	800c276 <uartGetBaud+0x2a>

    case _DEF_UART2:
      ret = huart2.Init.BaudRate;
 800c26e:	4b06      	ldr	r3, [pc, #24]	; (800c288 <uartGetBaud+0x3c>)
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	60fb      	str	r3, [r7, #12]
      break;
 800c274:	bf00      	nop
  }

  return ret;
 800c276:	68fb      	ldr	r3, [r7, #12]
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3714      	adds	r7, #20
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bc80      	pop	{r7}
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	200014f8 	.word	0x200014f8
 800c288:	20001538 	.word	0x20001538

0800c28c <uartSetBaud>:

bool uartSetBaud(uint8_t ch, uint32_t baud)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	6039      	str	r1, [r7, #0]
 800c296:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 800c298:	2300      	movs	r3, #0
 800c29a:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 800c29c:	79fb      	ldrb	r3, [r7, #7]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d002      	beq.n	800c2a8 <uartSetBaud+0x1c>
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d00f      	beq.n	800c2c6 <uartSetBaud+0x3a>
 800c2a6:	e01d      	b.n	800c2e4 <uartSetBaud+0x58>
	{
		case _DEF_UART1:
			huart1.Init.BaudRate = baud;
 800c2a8:	4a11      	ldr	r2, [pc, #68]	; (800c2f0 <uartSetBaud+0x64>)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart1) != HAL_OK)
 800c2ae:	4810      	ldr	r0, [pc, #64]	; (800c2f0 <uartSetBaud+0x64>)
 800c2b0:	f004 fb6e 	bl	8010990 <HAL_UART_Init>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d002      	beq.n	800c2c0 <uartSetBaud+0x34>
    	{
    	  Error_Handler();
 800c2ba:	f7f5 f97b 	bl	80015b4 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 800c2be:	e011      	b.n	800c2e4 <uartSetBaud+0x58>
    		ret = true;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	73fb      	strb	r3, [r7, #15]
			break;
 800c2c4:	e00e      	b.n	800c2e4 <uartSetBaud+0x58>

		case _DEF_UART2:
			huart2.Init.BaudRate = baud;
 800c2c6:	4a0b      	ldr	r2, [pc, #44]	; (800c2f4 <uartSetBaud+0x68>)
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	6053      	str	r3, [r2, #4]
    	if (HAL_UART_Init(&huart2) != HAL_OK)
 800c2cc:	4809      	ldr	r0, [pc, #36]	; (800c2f4 <uartSetBaud+0x68>)
 800c2ce:	f004 fb5f 	bl	8010990 <HAL_UART_Init>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d002      	beq.n	800c2de <uartSetBaud+0x52>
    	{
    	  Error_Handler();
 800c2d8:	f7f5 f96c 	bl	80015b4 <Error_Handler>
    	}else
    	{
    		ret = true;
    	}
			break;
 800c2dc:	e001      	b.n	800c2e2 <uartSetBaud+0x56>
    		ret = true;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	73fb      	strb	r3, [r7, #15]
			break;
 800c2e2:	bf00      	nop
	}

	return ret;
 800c2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	200014f8 	.word	0x200014f8
 800c2f4:	20001538 	.word	0x20001538

0800c2f8 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }

  if(huart->ErrorCode == HAL_UART_ERROR_FE) //current USART
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c304:	2b04      	cmp	r3, #4
 800c306:	d109      	bne.n	800c31c <HAL_UART_ErrorCallback+0x24>
  {
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)&u1_rx_buf[0], 1);
 800c308:	2201      	movs	r2, #1
 800c30a:	490d      	ldr	r1, [pc, #52]	; (800c340 <HAL_UART_ErrorCallback+0x48>)
 800c30c:	480d      	ldr	r0, [pc, #52]	; (800c344 <HAL_UART_ErrorCallback+0x4c>)
 800c30e:	f004 fc63 	bl	8010bd8 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, (uint8_t*)&u2_rx_buf[0], 1);
 800c312:	2201      	movs	r2, #1
 800c314:	490c      	ldr	r1, [pc, #48]	; (800c348 <HAL_UART_ErrorCallback+0x50>)
 800c316:	480d      	ldr	r0, [pc, #52]	; (800c34c <HAL_UART_ErrorCallback+0x54>)
 800c318:	f004 fc5e 	bl	8010bd8 <HAL_UART_Receive_DMA>
  }
  if(huart->ErrorCode == HAL_UART_ERROR_NE) //current USART
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c320:	2b02      	cmp	r3, #2
 800c322:	d109      	bne.n	800c338 <HAL_UART_ErrorCallback+0x40>
  {
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)&u1_rx_buf[0], 1);
 800c324:	2201      	movs	r2, #1
 800c326:	4906      	ldr	r1, [pc, #24]	; (800c340 <HAL_UART_ErrorCallback+0x48>)
 800c328:	4806      	ldr	r0, [pc, #24]	; (800c344 <HAL_UART_ErrorCallback+0x4c>)
 800c32a:	f004 fc55 	bl	8010bd8 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, (uint8_t*)&u2_rx_buf[0], 1);
 800c32e:	2201      	movs	r2, #1
 800c330:	4905      	ldr	r1, [pc, #20]	; (800c348 <HAL_UART_ErrorCallback+0x50>)
 800c332:	4806      	ldr	r0, [pc, #24]	; (800c34c <HAL_UART_ErrorCallback+0x54>)
 800c334:	f004 fc50 	bl	8010bd8 <HAL_UART_Receive_DMA>
  }
}
 800c338:	bf00      	nop
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	200007a8 	.word	0x200007a8
 800c344:	200014f8 	.word	0x200014f8
 800c348:	200008a8 	.word	0x200008a8
 800c34c:	20001538 	.word	0x20001538

0800c350 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
//  }
//  else if(huart->Instance == USART2)
//  {
//  	Q_write(&ring_buffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//  }
}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bc80      	pop	{r7}
 800c360:	4770      	bx	lr
	...

0800c364 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08a      	sub	sp, #40	; 0x28
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c36c:	f107 0318 	add.w	r3, r7, #24
 800c370:	2200      	movs	r2, #0
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	605a      	str	r2, [r3, #4]
 800c376:	609a      	str	r2, [r3, #8]
 800c378:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a8c      	ldr	r2, [pc, #560]	; (800c5b0 <HAL_UART_MspInit+0x24c>)
 800c380:	4293      	cmp	r3, r2
 800c382:	f040 8087 	bne.w	800c494 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c386:	4b8b      	ldr	r3, [pc, #556]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c388:	699b      	ldr	r3, [r3, #24]
 800c38a:	4a8a      	ldr	r2, [pc, #552]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c38c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c390:	6193      	str	r3, [r2, #24]
 800c392:	4b88      	ldr	r3, [pc, #544]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c39a:	617b      	str	r3, [r7, #20]
 800c39c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c39e:	4b85      	ldr	r3, [pc, #532]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	4a84      	ldr	r2, [pc, #528]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c3a4:	f043 0304 	orr.w	r3, r3, #4
 800c3a8:	6193      	str	r3, [r2, #24]
 800c3aa:	4b82      	ldr	r3, [pc, #520]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	f003 0304 	and.w	r3, r3, #4
 800c3b2:	613b      	str	r3, [r7, #16]
 800c3b4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c3b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3bc:	2302      	movs	r3, #2
 800c3be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3c4:	f107 0318 	add.w	r3, r7, #24
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	487b      	ldr	r0, [pc, #492]	; (800c5b8 <HAL_UART_MspInit+0x254>)
 800c3cc:	f000 fd6e 	bl	800ceac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800c3d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3de:	f107 0318 	add.w	r3, r7, #24
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4874      	ldr	r0, [pc, #464]	; (800c5b8 <HAL_UART_MspInit+0x254>)
 800c3e6:	f000 fd61 	bl	800ceac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800c3ea:	4b74      	ldr	r3, [pc, #464]	; (800c5bc <HAL_UART_MspInit+0x258>)
 800c3ec:	4a74      	ldr	r2, [pc, #464]	; (800c5c0 <HAL_UART_MspInit+0x25c>)
 800c3ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c3f0:	4b72      	ldr	r3, [pc, #456]	; (800c5bc <HAL_UART_MspInit+0x258>)
 800c3f2:	2210      	movs	r2, #16
 800c3f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c3f6:	4b71      	ldr	r3, [pc, #452]	; (800c5bc <HAL_UART_MspInit+0x258>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c3fc:	4b6f      	ldr	r3, [pc, #444]	; (800c5bc <HAL_UART_MspInit+0x258>)
 800c3fe:	2280      	movs	r2, #128	; 0x80
 800c400:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c402:	4b6e      	ldr	r3, [pc, #440]	; (800c5bc <HAL_UART_MspInit+0x258>)
 800c404:	2200      	movs	r2, #0
 800c406:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c408:	4b6c      	ldr	r3, [pc, #432]	; (800c5bc <HAL_UART_MspInit+0x258>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800c40e:	4b6b      	ldr	r3, [pc, #428]	; (800c5bc <HAL_UART_MspInit+0x258>)
 800c410:	2200      	movs	r2, #0
 800c412:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c414:	4b69      	ldr	r3, [pc, #420]	; (800c5bc <HAL_UART_MspInit+0x258>)
 800c416:	2200      	movs	r2, #0
 800c418:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800c41a:	4868      	ldr	r0, [pc, #416]	; (800c5bc <HAL_UART_MspInit+0x258>)
 800c41c:	f000 fae2 	bl	800c9e4 <HAL_DMA_Init>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d001      	beq.n	800c42a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800c426:	f7f5 f8c5 	bl	80015b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4a63      	ldr	r2, [pc, #396]	; (800c5bc <HAL_UART_MspInit+0x258>)
 800c42e:	631a      	str	r2, [r3, #48]	; 0x30
 800c430:	4a62      	ldr	r2, [pc, #392]	; (800c5bc <HAL_UART_MspInit+0x258>)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800c436:	4b63      	ldr	r3, [pc, #396]	; (800c5c4 <HAL_UART_MspInit+0x260>)
 800c438:	4a63      	ldr	r2, [pc, #396]	; (800c5c8 <HAL_UART_MspInit+0x264>)
 800c43a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c43c:	4b61      	ldr	r3, [pc, #388]	; (800c5c4 <HAL_UART_MspInit+0x260>)
 800c43e:	2200      	movs	r2, #0
 800c440:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c442:	4b60      	ldr	r3, [pc, #384]	; (800c5c4 <HAL_UART_MspInit+0x260>)
 800c444:	2200      	movs	r2, #0
 800c446:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c448:	4b5e      	ldr	r3, [pc, #376]	; (800c5c4 <HAL_UART_MspInit+0x260>)
 800c44a:	2280      	movs	r2, #128	; 0x80
 800c44c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c44e:	4b5d      	ldr	r3, [pc, #372]	; (800c5c4 <HAL_UART_MspInit+0x260>)
 800c450:	2200      	movs	r2, #0
 800c452:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c454:	4b5b      	ldr	r3, [pc, #364]	; (800c5c4 <HAL_UART_MspInit+0x260>)
 800c456:	2200      	movs	r2, #0
 800c458:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800c45a:	4b5a      	ldr	r3, [pc, #360]	; (800c5c4 <HAL_UART_MspInit+0x260>)
 800c45c:	2220      	movs	r2, #32
 800c45e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c460:	4b58      	ldr	r3, [pc, #352]	; (800c5c4 <HAL_UART_MspInit+0x260>)
 800c462:	2200      	movs	r2, #0
 800c464:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800c466:	4857      	ldr	r0, [pc, #348]	; (800c5c4 <HAL_UART_MspInit+0x260>)
 800c468:	f000 fabc 	bl	800c9e4 <HAL_DMA_Init>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d001      	beq.n	800c476 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800c472:	f7f5 f89f 	bl	80015b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a52      	ldr	r2, [pc, #328]	; (800c5c4 <HAL_UART_MspInit+0x260>)
 800c47a:	635a      	str	r2, [r3, #52]	; 0x34
 800c47c:	4a51      	ldr	r2, [pc, #324]	; (800c5c4 <HAL_UART_MspInit+0x260>)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c482:	2200      	movs	r2, #0
 800c484:	2100      	movs	r1, #0
 800c486:	2025      	movs	r0, #37	; 0x25
 800c488:	f000 fa6f 	bl	800c96a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c48c:	2025      	movs	r0, #37	; 0x25
 800c48e:	f000 fa88 	bl	800c9a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800c492:	e089      	b.n	800c5a8 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a4c      	ldr	r2, [pc, #304]	; (800c5cc <HAL_UART_MspInit+0x268>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	f040 8084 	bne.w	800c5a8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 800c4a0:	4b44      	ldr	r3, [pc, #272]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c4a2:	69db      	ldr	r3, [r3, #28]
 800c4a4:	4a43      	ldr	r2, [pc, #268]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c4a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4aa:	61d3      	str	r3, [r2, #28]
 800c4ac:	4b41      	ldr	r3, [pc, #260]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c4ae:	69db      	ldr	r3, [r3, #28]
 800c4b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4b4:	60fb      	str	r3, [r7, #12]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4b8:	4b3e      	ldr	r3, [pc, #248]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	4a3d      	ldr	r2, [pc, #244]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c4be:	f043 0304 	orr.w	r3, r3, #4
 800c4c2:	6193      	str	r3, [r2, #24]
 800c4c4:	4b3b      	ldr	r3, [pc, #236]	; (800c5b4 <HAL_UART_MspInit+0x250>)
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	f003 0304 	and.w	r3, r3, #4
 800c4cc:	60bb      	str	r3, [r7, #8]
 800c4ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c4d0:	2304      	movs	r3, #4
 800c4d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4dc:	f107 0318 	add.w	r3, r7, #24
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	4835      	ldr	r0, [pc, #212]	; (800c5b8 <HAL_UART_MspInit+0x254>)
 800c4e4:	f000 fce2 	bl	800ceac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c4e8:	2308      	movs	r3, #8
 800c4ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4f4:	f107 0318 	add.w	r3, r7, #24
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	482f      	ldr	r0, [pc, #188]	; (800c5b8 <HAL_UART_MspInit+0x254>)
 800c4fc:	f000 fcd6 	bl	800ceac <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800c500:	4b33      	ldr	r3, [pc, #204]	; (800c5d0 <HAL_UART_MspInit+0x26c>)
 800c502:	4a34      	ldr	r2, [pc, #208]	; (800c5d4 <HAL_UART_MspInit+0x270>)
 800c504:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c506:	4b32      	ldr	r3, [pc, #200]	; (800c5d0 <HAL_UART_MspInit+0x26c>)
 800c508:	2210      	movs	r2, #16
 800c50a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c50c:	4b30      	ldr	r3, [pc, #192]	; (800c5d0 <HAL_UART_MspInit+0x26c>)
 800c50e:	2200      	movs	r2, #0
 800c510:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c512:	4b2f      	ldr	r3, [pc, #188]	; (800c5d0 <HAL_UART_MspInit+0x26c>)
 800c514:	2280      	movs	r2, #128	; 0x80
 800c516:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c518:	4b2d      	ldr	r3, [pc, #180]	; (800c5d0 <HAL_UART_MspInit+0x26c>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c51e:	4b2c      	ldr	r3, [pc, #176]	; (800c5d0 <HAL_UART_MspInit+0x26c>)
 800c520:	2200      	movs	r2, #0
 800c522:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800c524:	4b2a      	ldr	r3, [pc, #168]	; (800c5d0 <HAL_UART_MspInit+0x26c>)
 800c526:	2200      	movs	r2, #0
 800c528:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c52a:	4b29      	ldr	r3, [pc, #164]	; (800c5d0 <HAL_UART_MspInit+0x26c>)
 800c52c:	2200      	movs	r2, #0
 800c52e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800c530:	4827      	ldr	r0, [pc, #156]	; (800c5d0 <HAL_UART_MspInit+0x26c>)
 800c532:	f000 fa57 	bl	800c9e4 <HAL_DMA_Init>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 800c53c:	f7f5 f83a 	bl	80015b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a23      	ldr	r2, [pc, #140]	; (800c5d0 <HAL_UART_MspInit+0x26c>)
 800c544:	631a      	str	r2, [r3, #48]	; 0x30
 800c546:	4a22      	ldr	r2, [pc, #136]	; (800c5d0 <HAL_UART_MspInit+0x26c>)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800c54c:	4b22      	ldr	r3, [pc, #136]	; (800c5d8 <HAL_UART_MspInit+0x274>)
 800c54e:	4a23      	ldr	r2, [pc, #140]	; (800c5dc <HAL_UART_MspInit+0x278>)
 800c550:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c552:	4b21      	ldr	r3, [pc, #132]	; (800c5d8 <HAL_UART_MspInit+0x274>)
 800c554:	2200      	movs	r2, #0
 800c556:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c558:	4b1f      	ldr	r3, [pc, #124]	; (800c5d8 <HAL_UART_MspInit+0x274>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c55e:	4b1e      	ldr	r3, [pc, #120]	; (800c5d8 <HAL_UART_MspInit+0x274>)
 800c560:	2280      	movs	r2, #128	; 0x80
 800c562:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c564:	4b1c      	ldr	r3, [pc, #112]	; (800c5d8 <HAL_UART_MspInit+0x274>)
 800c566:	2200      	movs	r2, #0
 800c568:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c56a:	4b1b      	ldr	r3, [pc, #108]	; (800c5d8 <HAL_UART_MspInit+0x274>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800c570:	4b19      	ldr	r3, [pc, #100]	; (800c5d8 <HAL_UART_MspInit+0x274>)
 800c572:	2220      	movs	r2, #32
 800c574:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c576:	4b18      	ldr	r3, [pc, #96]	; (800c5d8 <HAL_UART_MspInit+0x274>)
 800c578:	2200      	movs	r2, #0
 800c57a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800c57c:	4816      	ldr	r0, [pc, #88]	; (800c5d8 <HAL_UART_MspInit+0x274>)
 800c57e:	f000 fa31 	bl	800c9e4 <HAL_DMA_Init>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d001      	beq.n	800c58c <HAL_UART_MspInit+0x228>
      Error_Handler();
 800c588:	f7f5 f814 	bl	80015b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a12      	ldr	r2, [pc, #72]	; (800c5d8 <HAL_UART_MspInit+0x274>)
 800c590:	635a      	str	r2, [r3, #52]	; 0x34
 800c592:	4a11      	ldr	r2, [pc, #68]	; (800c5d8 <HAL_UART_MspInit+0x274>)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800c598:	2200      	movs	r2, #0
 800c59a:	2100      	movs	r1, #0
 800c59c:	2026      	movs	r0, #38	; 0x26
 800c59e:	f000 f9e4 	bl	800c96a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c5a2:	2026      	movs	r0, #38	; 0x26
 800c5a4:	f000 f9fd 	bl	800c9a2 <HAL_NVIC_EnableIRQ>
}
 800c5a8:	bf00      	nop
 800c5aa:	3728      	adds	r7, #40	; 0x28
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	40013800 	.word	0x40013800
 800c5b4:	40021000 	.word	0x40021000
 800c5b8:	40010800 	.word	0x40010800
 800c5bc:	2000142c 	.word	0x2000142c
 800c5c0:	40020044 	.word	0x40020044
 800c5c4:	20001470 	.word	0x20001470
 800c5c8:	40020058 	.word	0x40020058
 800c5cc:	40004400 	.word	0x40004400
 800c5d0:	200014b4 	.word	0x200014b4
 800c5d4:	40020080 	.word	0x40020080
 800c5d8:	200013e8 	.word	0x200013e8
 800c5dc:	4002006c 	.word	0x4002006c

0800c5e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c5e6:	4b18      	ldr	r3, [pc, #96]	; (800c648 <MX_DMA_Init+0x68>)
 800c5e8:	695b      	ldr	r3, [r3, #20]
 800c5ea:	4a17      	ldr	r2, [pc, #92]	; (800c648 <MX_DMA_Init+0x68>)
 800c5ec:	f043 0301 	orr.w	r3, r3, #1
 800c5f0:	6153      	str	r3, [r2, #20]
 800c5f2:	4b15      	ldr	r3, [pc, #84]	; (800c648 <MX_DMA_Init+0x68>)
 800c5f4:	695b      	ldr	r3, [r3, #20]
 800c5f6:	f003 0301 	and.w	r3, r3, #1
 800c5fa:	607b      	str	r3, [r7, #4]
 800c5fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800c5fe:	2200      	movs	r2, #0
 800c600:	2100      	movs	r1, #0
 800c602:	200e      	movs	r0, #14
 800c604:	f000 f9b1 	bl	800c96a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800c608:	200e      	movs	r0, #14
 800c60a:	f000 f9ca 	bl	800c9a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800c60e:	2200      	movs	r2, #0
 800c610:	2100      	movs	r1, #0
 800c612:	200f      	movs	r0, #15
 800c614:	f000 f9a9 	bl	800c96a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800c618:	200f      	movs	r0, #15
 800c61a:	f000 f9c2 	bl	800c9a2 <HAL_NVIC_EnableIRQ>

  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800c61e:	2200      	movs	r2, #0
 800c620:	2100      	movs	r1, #0
 800c622:	2010      	movs	r0, #16
 800c624:	f000 f9a1 	bl	800c96a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800c628:	2010      	movs	r0, #16
 800c62a:	f000 f9ba 	bl	800c9a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800c62e:	2200      	movs	r2, #0
 800c630:	2100      	movs	r1, #0
 800c632:	2011      	movs	r0, #17
 800c634:	f000 f999 	bl	800c96a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800c638:	2011      	movs	r0, #17
 800c63a:	f000 f9b2 	bl	800c9a2 <HAL_NVIC_EnableIRQ>

}
 800c63e:	bf00      	nop
 800c640:	3708      	adds	r7, #8
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	40021000 	.word	0x40021000

0800c64c <hwInit>:




void hwInit(void)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
  bspInit();
 800c652:	f7f4 ff0b 	bl	800146c <bspInit>
  timerInit();
 800c656:	f7ff f939 	bl	800b8cc <timerInit>
  cliInit();
 800c65a:	f7fd fdc7 	bl	800a1ec <cliInit>
  ledInit();
 800c65e:	f7ff f83b 	bl	800b6d8 <ledInit>
  i2cInit();
 800c662:	f7fe fd25 	bl	800b0b0 <i2cInit>
  uartInit();
 800c666:	f7ff fbab 	bl	800bdc0 <uartInit>

	ledOn(ST1);
 800c66a:	2000      	movs	r0, #0
 800c66c:	f7ff f882 	bl	800b774 <ledOn>
  ledOff(ST2);
 800c670:	2001      	movs	r0, #1
 800c672:	f7ff f89f 	bl	800b7b4 <ledOff>
  for (int i = 0; i < 10; i++){
 800c676:	2300      	movs	r3, #0
 800c678:	607b      	str	r3, [r7, #4]
 800c67a:	e00e      	b.n	800c69a <hwInit+0x4e>
    ledToggle(ST1);
 800c67c:	2000      	movs	r0, #0
 800c67e:	f7ff f8b9 	bl	800b7f4 <ledToggle>
    ledToggle(ST2);
 800c682:	2001      	movs	r0, #1
 800c684:	f7ff f8b6 	bl	800b7f4 <ledToggle>
    HAL_Delay(25);
 800c688:	2019      	movs	r0, #25
 800c68a:	f000 f875 	bl	800c778 <HAL_Delay>
    //BEEP_ON;
    HAL_Delay(25);
 800c68e:	2019      	movs	r0, #25
 800c690:	f000 f872 	bl	800c778 <HAL_Delay>
  for (int i = 0; i < 10; i++){
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	3301      	adds	r3, #1
 800c698:	607b      	str	r3, [r7, #4]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b09      	cmp	r3, #9
 800c69e:	dded      	ble.n	800c67c <hwInit+0x30>
    //BEEP_OFF;
  }
  ledOff(ST1);
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	f7ff f887 	bl	800b7b4 <ledOff>
  ledOff(ST2);
 800c6a6:	2001      	movs	r0, #1
 800c6a8:	f7ff f884 	bl	800b7b4 <ledOff>
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c6b8:	4b08      	ldr	r3, [pc, #32]	; (800c6dc <HAL_Init+0x28>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a07      	ldr	r2, [pc, #28]	; (800c6dc <HAL_Init+0x28>)
 800c6be:	f043 0310 	orr.w	r3, r3, #16
 800c6c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c6c4:	2003      	movs	r0, #3
 800c6c6:	f000 f945 	bl	800c954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	f000 f808 	bl	800c6e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c6d0:	f7f4 ff76 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	40022000 	.word	0x40022000

0800c6e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c6e8:	4b12      	ldr	r3, [pc, #72]	; (800c734 <HAL_InitTick+0x54>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	4b12      	ldr	r3, [pc, #72]	; (800c738 <HAL_InitTick+0x58>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 f95d 	bl	800c9be <HAL_SYSTICK_Config>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d001      	beq.n	800c70e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e00e      	b.n	800c72c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b0f      	cmp	r3, #15
 800c712:	d80a      	bhi.n	800c72a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c714:	2200      	movs	r2, #0
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	f04f 30ff 	mov.w	r0, #4294967295
 800c71c:	f000 f925 	bl	800c96a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c720:	4a06      	ldr	r2, [pc, #24]	; (800c73c <HAL_InitTick+0x5c>)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c726:	2300      	movs	r3, #0
 800c728:	e000      	b.n	800c72c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	20000004 	.word	0x20000004
 800c738:	2000005c 	.word	0x2000005c
 800c73c:	20000058 	.word	0x20000058

0800c740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c740:	b480      	push	{r7}
 800c742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c744:	4b05      	ldr	r3, [pc, #20]	; (800c75c <HAL_IncTick+0x1c>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	461a      	mov	r2, r3
 800c74a:	4b05      	ldr	r3, [pc, #20]	; (800c760 <HAL_IncTick+0x20>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4413      	add	r3, r2
 800c750:	4a03      	ldr	r2, [pc, #12]	; (800c760 <HAL_IncTick+0x20>)
 800c752:	6013      	str	r3, [r2, #0]
}
 800c754:	bf00      	nop
 800c756:	46bd      	mov	sp, r7
 800c758:	bc80      	pop	{r7}
 800c75a:	4770      	bx	lr
 800c75c:	2000005c 	.word	0x2000005c
 800c760:	20001578 	.word	0x20001578

0800c764 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c764:	b480      	push	{r7}
 800c766:	af00      	add	r7, sp, #0
  return uwTick;
 800c768:	4b02      	ldr	r3, [pc, #8]	; (800c774 <HAL_GetTick+0x10>)
 800c76a:	681b      	ldr	r3, [r3, #0]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	46bd      	mov	sp, r7
 800c770:	bc80      	pop	{r7}
 800c772:	4770      	bx	lr
 800c774:	20001578 	.word	0x20001578

0800c778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c780:	f7ff fff0 	bl	800c764 <HAL_GetTick>
 800c784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c790:	d005      	beq.n	800c79e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c792:	4b09      	ldr	r3, [pc, #36]	; (800c7b8 <HAL_Delay+0x40>)
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	461a      	mov	r2, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	4413      	add	r3, r2
 800c79c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c79e:	bf00      	nop
 800c7a0:	f7ff ffe0 	bl	800c764 <HAL_GetTick>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d8f7      	bhi.n	800c7a0 <HAL_Delay+0x28>
  {
  }
}
 800c7b0:	bf00      	nop
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	2000005c 	.word	0x2000005c

0800c7bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c7cc:	4b0c      	ldr	r3, [pc, #48]	; (800c800 <__NVIC_SetPriorityGrouping+0x44>)
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c7d2:	68ba      	ldr	r2, [r7, #8]
 800c7d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c7d8:	4013      	ands	r3, r2
 800c7da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c7e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c7e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c7ee:	4a04      	ldr	r2, [pc, #16]	; (800c800 <__NVIC_SetPriorityGrouping+0x44>)
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	60d3      	str	r3, [r2, #12]
}
 800c7f4:	bf00      	nop
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bc80      	pop	{r7}
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	e000ed00 	.word	0xe000ed00

0800c804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c804:	b480      	push	{r7}
 800c806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c808:	4b04      	ldr	r3, [pc, #16]	; (800c81c <__NVIC_GetPriorityGrouping+0x18>)
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	0a1b      	lsrs	r3, r3, #8
 800c80e:	f003 0307 	and.w	r3, r3, #7
}
 800c812:	4618      	mov	r0, r3
 800c814:	46bd      	mov	sp, r7
 800c816:	bc80      	pop	{r7}
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	e000ed00 	.word	0xe000ed00

0800c820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	4603      	mov	r3, r0
 800c828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c82a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	db0b      	blt.n	800c84a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c832:	79fb      	ldrb	r3, [r7, #7]
 800c834:	f003 021f 	and.w	r2, r3, #31
 800c838:	4906      	ldr	r1, [pc, #24]	; (800c854 <__NVIC_EnableIRQ+0x34>)
 800c83a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c83e:	095b      	lsrs	r3, r3, #5
 800c840:	2001      	movs	r0, #1
 800c842:	fa00 f202 	lsl.w	r2, r0, r2
 800c846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c84a:	bf00      	nop
 800c84c:	370c      	adds	r7, #12
 800c84e:	46bd      	mov	sp, r7
 800c850:	bc80      	pop	{r7}
 800c852:	4770      	bx	lr
 800c854:	e000e100 	.word	0xe000e100

0800c858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	4603      	mov	r3, r0
 800c860:	6039      	str	r1, [r7, #0]
 800c862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	db0a      	blt.n	800c882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	490c      	ldr	r1, [pc, #48]	; (800c8a4 <__NVIC_SetPriority+0x4c>)
 800c872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c876:	0112      	lsls	r2, r2, #4
 800c878:	b2d2      	uxtb	r2, r2
 800c87a:	440b      	add	r3, r1
 800c87c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c880:	e00a      	b.n	800c898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	b2da      	uxtb	r2, r3
 800c886:	4908      	ldr	r1, [pc, #32]	; (800c8a8 <__NVIC_SetPriority+0x50>)
 800c888:	79fb      	ldrb	r3, [r7, #7]
 800c88a:	f003 030f 	and.w	r3, r3, #15
 800c88e:	3b04      	subs	r3, #4
 800c890:	0112      	lsls	r2, r2, #4
 800c892:	b2d2      	uxtb	r2, r2
 800c894:	440b      	add	r3, r1
 800c896:	761a      	strb	r2, [r3, #24]
}
 800c898:	bf00      	nop
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bc80      	pop	{r7}
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	e000e100 	.word	0xe000e100
 800c8a8:	e000ed00 	.word	0xe000ed00

0800c8ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b089      	sub	sp, #36	; 0x24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f003 0307 	and.w	r3, r3, #7
 800c8be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	f1c3 0307 	rsb	r3, r3, #7
 800c8c6:	2b04      	cmp	r3, #4
 800c8c8:	bf28      	it	cs
 800c8ca:	2304      	movcs	r3, #4
 800c8cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	2b06      	cmp	r3, #6
 800c8d4:	d902      	bls.n	800c8dc <NVIC_EncodePriority+0x30>
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	3b03      	subs	r3, #3
 800c8da:	e000      	b.n	800c8de <NVIC_EncodePriority+0x32>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ea:	43da      	mvns	r2, r3
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	401a      	ands	r2, r3
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c8f4:	f04f 31ff 	mov.w	r1, #4294967295
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c8fe:	43d9      	mvns	r1, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c904:	4313      	orrs	r3, r2
         );
}
 800c906:	4618      	mov	r0, r3
 800c908:	3724      	adds	r7, #36	; 0x24
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bc80      	pop	{r7}
 800c90e:	4770      	bx	lr

0800c910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	3b01      	subs	r3, #1
 800c91c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c920:	d301      	bcc.n	800c926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c922:	2301      	movs	r3, #1
 800c924:	e00f      	b.n	800c946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c926:	4a0a      	ldr	r2, [pc, #40]	; (800c950 <SysTick_Config+0x40>)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	3b01      	subs	r3, #1
 800c92c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c92e:	210f      	movs	r1, #15
 800c930:	f04f 30ff 	mov.w	r0, #4294967295
 800c934:	f7ff ff90 	bl	800c858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c938:	4b05      	ldr	r3, [pc, #20]	; (800c950 <SysTick_Config+0x40>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c93e:	4b04      	ldr	r3, [pc, #16]	; (800c950 <SysTick_Config+0x40>)
 800c940:	2207      	movs	r2, #7
 800c942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	e000e010 	.word	0xe000e010

0800c954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7ff ff2d 	bl	800c7bc <__NVIC_SetPriorityGrouping>
}
 800c962:	bf00      	nop
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b086      	sub	sp, #24
 800c96e:	af00      	add	r7, sp, #0
 800c970:	4603      	mov	r3, r0
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	607a      	str	r2, [r7, #4]
 800c976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c978:	2300      	movs	r3, #0
 800c97a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c97c:	f7ff ff42 	bl	800c804 <__NVIC_GetPriorityGrouping>
 800c980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	68b9      	ldr	r1, [r7, #8]
 800c986:	6978      	ldr	r0, [r7, #20]
 800c988:	f7ff ff90 	bl	800c8ac <NVIC_EncodePriority>
 800c98c:	4602      	mov	r2, r0
 800c98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f7ff ff5f 	bl	800c858 <__NVIC_SetPriority>
}
 800c99a:	bf00      	nop
 800c99c:	3718      	adds	r7, #24
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c9ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7ff ff35 	bl	800c820 <__NVIC_EnableIRQ>
}
 800c9b6:	bf00      	nop
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b082      	sub	sp, #8
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7ff ffa2 	bl	800c910 <SysTick_Config>
 800c9cc:	4603      	mov	r3, r0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800c9da:	f7f4 fd39 	bl	8001450 <HAL_SYSTICK_Callback>
}
 800c9de:	bf00      	nop
 800c9e0:	bd80      	pop	{r7, pc}
	...

0800c9e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d101      	bne.n	800c9fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e043      	b.n	800ca82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	4b22      	ldr	r3, [pc, #136]	; (800ca8c <HAL_DMA_Init+0xa8>)
 800ca02:	4413      	add	r3, r2
 800ca04:	4a22      	ldr	r2, [pc, #136]	; (800ca90 <HAL_DMA_Init+0xac>)
 800ca06:	fba2 2303 	umull	r2, r3, r2, r3
 800ca0a:	091b      	lsrs	r3, r3, #4
 800ca0c:	009a      	lsls	r2, r3, #2
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a1f      	ldr	r2, [pc, #124]	; (800ca94 <HAL_DMA_Init+0xb0>)
 800ca16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2202      	movs	r2, #2
 800ca1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800ca2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ca32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800ca3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	695b      	ldr	r3, [r3, #20]
 800ca4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	69db      	ldr	r3, [r3, #28]
 800ca5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3714      	adds	r7, #20
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bc80      	pop	{r7}
 800ca8a:	4770      	bx	lr
 800ca8c:	bffdfff8 	.word	0xbffdfff8
 800ca90:	cccccccd 	.word	0xcccccccd
 800ca94:	40020000 	.word	0x40020000

0800ca98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
 800caa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d101      	bne.n	800cab8 <HAL_DMA_Start_IT+0x20>
 800cab4:	2302      	movs	r3, #2
 800cab6:	e04a      	b.n	800cb4e <HAL_DMA_Start_IT+0xb6>
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d13a      	bne.n	800cb40 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2202      	movs	r2, #2
 800cace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f022 0201 	bic.w	r2, r2, #1
 800cae6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	68b9      	ldr	r1, [r7, #8]
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f000 f9ae 	bl	800ce50 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d008      	beq.n	800cb0e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f042 020e 	orr.w	r2, r2, #14
 800cb0a:	601a      	str	r2, [r3, #0]
 800cb0c:	e00f      	b.n	800cb2e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f022 0204 	bic.w	r2, r2, #4
 800cb1c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f042 020a 	orr.w	r2, r2, #10
 800cb2c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f042 0201 	orr.w	r2, r2, #1
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	e005      	b.n	800cb4c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800cb48:	2302      	movs	r3, #2
 800cb4a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800cb4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
	...

0800cb58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb60:	2300      	movs	r3, #0
 800cb62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d005      	beq.n	800cb7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2204      	movs	r2, #4
 800cb72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	73fb      	strb	r3, [r7, #15]
 800cb78:	e051      	b.n	800cc1e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f022 020e 	bic.w	r2, r2, #14
 800cb88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f022 0201 	bic.w	r2, r2, #1
 800cb98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a22      	ldr	r2, [pc, #136]	; (800cc28 <HAL_DMA_Abort_IT+0xd0>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d029      	beq.n	800cbf8 <HAL_DMA_Abort_IT+0xa0>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a20      	ldr	r2, [pc, #128]	; (800cc2c <HAL_DMA_Abort_IT+0xd4>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d022      	beq.n	800cbf4 <HAL_DMA_Abort_IT+0x9c>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a1f      	ldr	r2, [pc, #124]	; (800cc30 <HAL_DMA_Abort_IT+0xd8>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d01a      	beq.n	800cbee <HAL_DMA_Abort_IT+0x96>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a1d      	ldr	r2, [pc, #116]	; (800cc34 <HAL_DMA_Abort_IT+0xdc>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d012      	beq.n	800cbe8 <HAL_DMA_Abort_IT+0x90>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a1c      	ldr	r2, [pc, #112]	; (800cc38 <HAL_DMA_Abort_IT+0xe0>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d00a      	beq.n	800cbe2 <HAL_DMA_Abort_IT+0x8a>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a1a      	ldr	r2, [pc, #104]	; (800cc3c <HAL_DMA_Abort_IT+0xe4>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d102      	bne.n	800cbdc <HAL_DMA_Abort_IT+0x84>
 800cbd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cbda:	e00e      	b.n	800cbfa <HAL_DMA_Abort_IT+0xa2>
 800cbdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cbe0:	e00b      	b.n	800cbfa <HAL_DMA_Abort_IT+0xa2>
 800cbe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cbe6:	e008      	b.n	800cbfa <HAL_DMA_Abort_IT+0xa2>
 800cbe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbec:	e005      	b.n	800cbfa <HAL_DMA_Abort_IT+0xa2>
 800cbee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbf2:	e002      	b.n	800cbfa <HAL_DMA_Abort_IT+0xa2>
 800cbf4:	2310      	movs	r3, #16
 800cbf6:	e000      	b.n	800cbfa <HAL_DMA_Abort_IT+0xa2>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	4a11      	ldr	r2, [pc, #68]	; (800cc40 <HAL_DMA_Abort_IT+0xe8>)
 800cbfc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2201      	movs	r2, #1
 800cc02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d003      	beq.n	800cc1e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	4798      	blx	r3
    } 
  }
  return status;
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	40020008 	.word	0x40020008
 800cc2c:	4002001c 	.word	0x4002001c
 800cc30:	40020030 	.word	0x40020030
 800cc34:	40020044 	.word	0x40020044
 800cc38:	40020058 	.word	0x40020058
 800cc3c:	4002006c 	.word	0x4002006c
 800cc40:	40020000 	.word	0x40020000

0800cc44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc60:	2204      	movs	r2, #4
 800cc62:	409a      	lsls	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	4013      	ands	r3, r2
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d04f      	beq.n	800cd0c <HAL_DMA_IRQHandler+0xc8>
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	f003 0304 	and.w	r3, r3, #4
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d04a      	beq.n	800cd0c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f003 0320 	and.w	r3, r3, #32
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d107      	bne.n	800cc94 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f022 0204 	bic.w	r2, r2, #4
 800cc92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a66      	ldr	r2, [pc, #408]	; (800ce34 <HAL_DMA_IRQHandler+0x1f0>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d029      	beq.n	800ccf2 <HAL_DMA_IRQHandler+0xae>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4a65      	ldr	r2, [pc, #404]	; (800ce38 <HAL_DMA_IRQHandler+0x1f4>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d022      	beq.n	800ccee <HAL_DMA_IRQHandler+0xaa>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a63      	ldr	r2, [pc, #396]	; (800ce3c <HAL_DMA_IRQHandler+0x1f8>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d01a      	beq.n	800cce8 <HAL_DMA_IRQHandler+0xa4>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a62      	ldr	r2, [pc, #392]	; (800ce40 <HAL_DMA_IRQHandler+0x1fc>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d012      	beq.n	800cce2 <HAL_DMA_IRQHandler+0x9e>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a60      	ldr	r2, [pc, #384]	; (800ce44 <HAL_DMA_IRQHandler+0x200>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d00a      	beq.n	800ccdc <HAL_DMA_IRQHandler+0x98>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a5f      	ldr	r2, [pc, #380]	; (800ce48 <HAL_DMA_IRQHandler+0x204>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d102      	bne.n	800ccd6 <HAL_DMA_IRQHandler+0x92>
 800ccd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ccd4:	e00e      	b.n	800ccf4 <HAL_DMA_IRQHandler+0xb0>
 800ccd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ccda:	e00b      	b.n	800ccf4 <HAL_DMA_IRQHandler+0xb0>
 800ccdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cce0:	e008      	b.n	800ccf4 <HAL_DMA_IRQHandler+0xb0>
 800cce2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cce6:	e005      	b.n	800ccf4 <HAL_DMA_IRQHandler+0xb0>
 800cce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccec:	e002      	b.n	800ccf4 <HAL_DMA_IRQHandler+0xb0>
 800ccee:	2340      	movs	r3, #64	; 0x40
 800ccf0:	e000      	b.n	800ccf4 <HAL_DMA_IRQHandler+0xb0>
 800ccf2:	2304      	movs	r3, #4
 800ccf4:	4a55      	ldr	r2, [pc, #340]	; (800ce4c <HAL_DMA_IRQHandler+0x208>)
 800ccf6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f000 8094 	beq.w	800ce2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800cd0a:	e08e      	b.n	800ce2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd10:	2202      	movs	r2, #2
 800cd12:	409a      	lsls	r2, r3
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	4013      	ands	r3, r2
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d056      	beq.n	800cdca <HAL_DMA_IRQHandler+0x186>
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f003 0302 	and.w	r3, r3, #2
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d051      	beq.n	800cdca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f003 0320 	and.w	r3, r3, #32
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10b      	bne.n	800cd4c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f022 020a 	bic.w	r2, r2, #10
 800cd42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a38      	ldr	r2, [pc, #224]	; (800ce34 <HAL_DMA_IRQHandler+0x1f0>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d029      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x166>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a37      	ldr	r2, [pc, #220]	; (800ce38 <HAL_DMA_IRQHandler+0x1f4>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d022      	beq.n	800cda6 <HAL_DMA_IRQHandler+0x162>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a35      	ldr	r2, [pc, #212]	; (800ce3c <HAL_DMA_IRQHandler+0x1f8>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d01a      	beq.n	800cda0 <HAL_DMA_IRQHandler+0x15c>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a34      	ldr	r2, [pc, #208]	; (800ce40 <HAL_DMA_IRQHandler+0x1fc>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d012      	beq.n	800cd9a <HAL_DMA_IRQHandler+0x156>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a32      	ldr	r2, [pc, #200]	; (800ce44 <HAL_DMA_IRQHandler+0x200>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d00a      	beq.n	800cd94 <HAL_DMA_IRQHandler+0x150>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a31      	ldr	r2, [pc, #196]	; (800ce48 <HAL_DMA_IRQHandler+0x204>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d102      	bne.n	800cd8e <HAL_DMA_IRQHandler+0x14a>
 800cd88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cd8c:	e00e      	b.n	800cdac <HAL_DMA_IRQHandler+0x168>
 800cd8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cd92:	e00b      	b.n	800cdac <HAL_DMA_IRQHandler+0x168>
 800cd94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cd98:	e008      	b.n	800cdac <HAL_DMA_IRQHandler+0x168>
 800cd9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd9e:	e005      	b.n	800cdac <HAL_DMA_IRQHandler+0x168>
 800cda0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cda4:	e002      	b.n	800cdac <HAL_DMA_IRQHandler+0x168>
 800cda6:	2320      	movs	r3, #32
 800cda8:	e000      	b.n	800cdac <HAL_DMA_IRQHandler+0x168>
 800cdaa:	2302      	movs	r3, #2
 800cdac:	4a27      	ldr	r2, [pc, #156]	; (800ce4c <HAL_DMA_IRQHandler+0x208>)
 800cdae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d034      	beq.n	800ce2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800cdc8:	e02f      	b.n	800ce2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdce:	2208      	movs	r2, #8
 800cdd0:	409a      	lsls	r2, r3
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	4013      	ands	r3, r2
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d028      	beq.n	800ce2c <HAL_DMA_IRQHandler+0x1e8>
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	f003 0308 	and.w	r3, r3, #8
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d023      	beq.n	800ce2c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f022 020e 	bic.w	r2, r2, #14
 800cdf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdfc:	2101      	movs	r1, #1
 800cdfe:	fa01 f202 	lsl.w	r2, r1, r2
 800ce02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d004      	beq.n	800ce2c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	4798      	blx	r3
    }
  }
  return;
 800ce2a:	bf00      	nop
 800ce2c:	bf00      	nop
}
 800ce2e:	3710      	adds	r7, #16
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	40020008 	.word	0x40020008
 800ce38:	4002001c 	.word	0x4002001c
 800ce3c:	40020030 	.word	0x40020030
 800ce40:	40020044 	.word	0x40020044
 800ce44:	40020058 	.word	0x40020058
 800ce48:	4002006c 	.word	0x4002006c
 800ce4c:	40020000 	.word	0x40020000

0800ce50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce66:	2101      	movs	r1, #1
 800ce68:	fa01 f202 	lsl.w	r2, r1, r2
 800ce6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	683a      	ldr	r2, [r7, #0]
 800ce74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	2b10      	cmp	r3, #16
 800ce7c:	d108      	bne.n	800ce90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ce8e:	e007      	b.n	800cea0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	60da      	str	r2, [r3, #12]
}
 800cea0:	bf00      	nop
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bc80      	pop	{r7}
 800cea8:	4770      	bx	lr
	...

0800ceac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b08b      	sub	sp, #44	; 0x2c
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800ceba:	2300      	movs	r3, #0
 800cebc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cebe:	e127      	b.n	800d110 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800cec0:	2201      	movs	r2, #1
 800cec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec4:	fa02 f303 	lsl.w	r3, r2, r3
 800cec8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	69fa      	ldr	r2, [r7, #28]
 800ced0:	4013      	ands	r3, r2
 800ced2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800ced4:	69ba      	ldr	r2, [r7, #24]
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	f040 8116 	bne.w	800d10a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	2b12      	cmp	r3, #18
 800cee4:	d034      	beq.n	800cf50 <HAL_GPIO_Init+0xa4>
 800cee6:	2b12      	cmp	r3, #18
 800cee8:	d80d      	bhi.n	800cf06 <HAL_GPIO_Init+0x5a>
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d02b      	beq.n	800cf46 <HAL_GPIO_Init+0x9a>
 800ceee:	2b02      	cmp	r3, #2
 800cef0:	d804      	bhi.n	800cefc <HAL_GPIO_Init+0x50>
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d031      	beq.n	800cf5a <HAL_GPIO_Init+0xae>
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d01c      	beq.n	800cf34 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800cefa:	e048      	b.n	800cf8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800cefc:	2b03      	cmp	r3, #3
 800cefe:	d043      	beq.n	800cf88 <HAL_GPIO_Init+0xdc>
 800cf00:	2b11      	cmp	r3, #17
 800cf02:	d01b      	beq.n	800cf3c <HAL_GPIO_Init+0x90>
          break;
 800cf04:	e043      	b.n	800cf8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800cf06:	4a89      	ldr	r2, [pc, #548]	; (800d12c <HAL_GPIO_Init+0x280>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d026      	beq.n	800cf5a <HAL_GPIO_Init+0xae>
 800cf0c:	4a87      	ldr	r2, [pc, #540]	; (800d12c <HAL_GPIO_Init+0x280>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d806      	bhi.n	800cf20 <HAL_GPIO_Init+0x74>
 800cf12:	4a87      	ldr	r2, [pc, #540]	; (800d130 <HAL_GPIO_Init+0x284>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d020      	beq.n	800cf5a <HAL_GPIO_Init+0xae>
 800cf18:	4a86      	ldr	r2, [pc, #536]	; (800d134 <HAL_GPIO_Init+0x288>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d01d      	beq.n	800cf5a <HAL_GPIO_Init+0xae>
          break;
 800cf1e:	e036      	b.n	800cf8e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800cf20:	4a85      	ldr	r2, [pc, #532]	; (800d138 <HAL_GPIO_Init+0x28c>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d019      	beq.n	800cf5a <HAL_GPIO_Init+0xae>
 800cf26:	4a85      	ldr	r2, [pc, #532]	; (800d13c <HAL_GPIO_Init+0x290>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d016      	beq.n	800cf5a <HAL_GPIO_Init+0xae>
 800cf2c:	4a84      	ldr	r2, [pc, #528]	; (800d140 <HAL_GPIO_Init+0x294>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d013      	beq.n	800cf5a <HAL_GPIO_Init+0xae>
          break;
 800cf32:	e02c      	b.n	800cf8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	623b      	str	r3, [r7, #32]
          break;
 800cf3a:	e028      	b.n	800cf8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	3304      	adds	r3, #4
 800cf42:	623b      	str	r3, [r7, #32]
          break;
 800cf44:	e023      	b.n	800cf8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	623b      	str	r3, [r7, #32]
          break;
 800cf4e:	e01e      	b.n	800cf8e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	330c      	adds	r3, #12
 800cf56:	623b      	str	r3, [r7, #32]
          break;
 800cf58:	e019      	b.n	800cf8e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d102      	bne.n	800cf68 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800cf62:	2304      	movs	r3, #4
 800cf64:	623b      	str	r3, [r7, #32]
          break;
 800cf66:	e012      	b.n	800cf8e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d105      	bne.n	800cf7c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800cf70:	2308      	movs	r3, #8
 800cf72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	69fa      	ldr	r2, [r7, #28]
 800cf78:	611a      	str	r2, [r3, #16]
          break;
 800cf7a:	e008      	b.n	800cf8e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800cf7c:	2308      	movs	r3, #8
 800cf7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	69fa      	ldr	r2, [r7, #28]
 800cf84:	615a      	str	r2, [r3, #20]
          break;
 800cf86:	e002      	b.n	800cf8e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	623b      	str	r3, [r7, #32]
          break;
 800cf8c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	2bff      	cmp	r3, #255	; 0xff
 800cf92:	d801      	bhi.n	800cf98 <HAL_GPIO_Init+0xec>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	e001      	b.n	800cf9c <HAL_GPIO_Init+0xf0>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	3304      	adds	r3, #4
 800cf9c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	2bff      	cmp	r3, #255	; 0xff
 800cfa2:	d802      	bhi.n	800cfaa <HAL_GPIO_Init+0xfe>
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	e002      	b.n	800cfb0 <HAL_GPIO_Init+0x104>
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfac:	3b08      	subs	r3, #8
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	210f      	movs	r1, #15
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	fa01 f303 	lsl.w	r3, r1, r3
 800cfbe:	43db      	mvns	r3, r3
 800cfc0:	401a      	ands	r2, r3
 800cfc2:	6a39      	ldr	r1, [r7, #32]
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	fa01 f303 	lsl.w	r3, r1, r3
 800cfca:	431a      	orrs	r2, r3
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 8096 	beq.w	800d10a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800cfde:	4b59      	ldr	r3, [pc, #356]	; (800d144 <HAL_GPIO_Init+0x298>)
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	4a58      	ldr	r2, [pc, #352]	; (800d144 <HAL_GPIO_Init+0x298>)
 800cfe4:	f043 0301 	orr.w	r3, r3, #1
 800cfe8:	6193      	str	r3, [r2, #24]
 800cfea:	4b56      	ldr	r3, [pc, #344]	; (800d144 <HAL_GPIO_Init+0x298>)
 800cfec:	699b      	ldr	r3, [r3, #24]
 800cfee:	f003 0301 	and.w	r3, r3, #1
 800cff2:	60bb      	str	r3, [r7, #8]
 800cff4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800cff6:	4a54      	ldr	r2, [pc, #336]	; (800d148 <HAL_GPIO_Init+0x29c>)
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	089b      	lsrs	r3, r3, #2
 800cffc:	3302      	adds	r3, #2
 800cffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d002:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800d004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d006:	f003 0303 	and.w	r3, r3, #3
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	220f      	movs	r2, #15
 800d00e:	fa02 f303 	lsl.w	r3, r2, r3
 800d012:	43db      	mvns	r3, r3
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	4013      	ands	r3, r2
 800d018:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	4a4b      	ldr	r2, [pc, #300]	; (800d14c <HAL_GPIO_Init+0x2a0>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d013      	beq.n	800d04a <HAL_GPIO_Init+0x19e>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4a4a      	ldr	r2, [pc, #296]	; (800d150 <HAL_GPIO_Init+0x2a4>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d00d      	beq.n	800d046 <HAL_GPIO_Init+0x19a>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4a49      	ldr	r2, [pc, #292]	; (800d154 <HAL_GPIO_Init+0x2a8>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d007      	beq.n	800d042 <HAL_GPIO_Init+0x196>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a48      	ldr	r2, [pc, #288]	; (800d158 <HAL_GPIO_Init+0x2ac>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d101      	bne.n	800d03e <HAL_GPIO_Init+0x192>
 800d03a:	2303      	movs	r3, #3
 800d03c:	e006      	b.n	800d04c <HAL_GPIO_Init+0x1a0>
 800d03e:	2304      	movs	r3, #4
 800d040:	e004      	b.n	800d04c <HAL_GPIO_Init+0x1a0>
 800d042:	2302      	movs	r3, #2
 800d044:	e002      	b.n	800d04c <HAL_GPIO_Init+0x1a0>
 800d046:	2301      	movs	r3, #1
 800d048:	e000      	b.n	800d04c <HAL_GPIO_Init+0x1a0>
 800d04a:	2300      	movs	r3, #0
 800d04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d04e:	f002 0203 	and.w	r2, r2, #3
 800d052:	0092      	lsls	r2, r2, #2
 800d054:	4093      	lsls	r3, r2
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	4313      	orrs	r3, r2
 800d05a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800d05c:	493a      	ldr	r1, [pc, #232]	; (800d148 <HAL_GPIO_Init+0x29c>)
 800d05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d060:	089b      	lsrs	r3, r3, #2
 800d062:	3302      	adds	r3, #2
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d072:	2b00      	cmp	r3, #0
 800d074:	d006      	beq.n	800d084 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800d076:	4b39      	ldr	r3, [pc, #228]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	4938      	ldr	r1, [pc, #224]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	4313      	orrs	r3, r2
 800d080:	600b      	str	r3, [r1, #0]
 800d082:	e006      	b.n	800d092 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800d084:	4b35      	ldr	r3, [pc, #212]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	43db      	mvns	r3, r3
 800d08c:	4933      	ldr	r1, [pc, #204]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d08e:	4013      	ands	r3, r2
 800d090:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d006      	beq.n	800d0ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800d09e:	4b2f      	ldr	r3, [pc, #188]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	492e      	ldr	r1, [pc, #184]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	604b      	str	r3, [r1, #4]
 800d0aa:	e006      	b.n	800d0ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800d0ac:	4b2b      	ldr	r3, [pc, #172]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	43db      	mvns	r3, r3
 800d0b4:	4929      	ldr	r1, [pc, #164]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d0b6:	4013      	ands	r3, r2
 800d0b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d006      	beq.n	800d0d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800d0c6:	4b25      	ldr	r3, [pc, #148]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d0c8:	689a      	ldr	r2, [r3, #8]
 800d0ca:	4924      	ldr	r1, [pc, #144]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	608b      	str	r3, [r1, #8]
 800d0d2:	e006      	b.n	800d0e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800d0d4:	4b21      	ldr	r3, [pc, #132]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d0d6:	689a      	ldr	r2, [r3, #8]
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	43db      	mvns	r3, r3
 800d0dc:	491f      	ldr	r1, [pc, #124]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d0de:	4013      	ands	r3, r2
 800d0e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d006      	beq.n	800d0fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800d0ee:	4b1b      	ldr	r3, [pc, #108]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d0f0:	68da      	ldr	r2, [r3, #12]
 800d0f2:	491a      	ldr	r1, [pc, #104]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	60cb      	str	r3, [r1, #12]
 800d0fa:	e006      	b.n	800d10a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800d0fc:	4b17      	ldr	r3, [pc, #92]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d0fe:	68da      	ldr	r2, [r3, #12]
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	43db      	mvns	r3, r3
 800d104:	4915      	ldr	r1, [pc, #84]	; (800d15c <HAL_GPIO_Init+0x2b0>)
 800d106:	4013      	ands	r3, r2
 800d108:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800d10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10c:	3301      	adds	r3, #1
 800d10e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d116:	fa22 f303 	lsr.w	r3, r2, r3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f47f aed0 	bne.w	800cec0 <HAL_GPIO_Init+0x14>
  }
}
 800d120:	bf00      	nop
 800d122:	372c      	adds	r7, #44	; 0x2c
 800d124:	46bd      	mov	sp, r7
 800d126:	bc80      	pop	{r7}
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	10210000 	.word	0x10210000
 800d130:	10110000 	.word	0x10110000
 800d134:	10120000 	.word	0x10120000
 800d138:	10310000 	.word	0x10310000
 800d13c:	10320000 	.word	0x10320000
 800d140:	10220000 	.word	0x10220000
 800d144:	40021000 	.word	0x40021000
 800d148:	40010000 	.word	0x40010000
 800d14c:	40010800 	.word	0x40010800
 800d150:	40010c00 	.word	0x40010c00
 800d154:	40011000 	.word	0x40011000
 800d158:	40011400 	.word	0x40011400
 800d15c:	40010400 	.word	0x40010400

0800d160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	460b      	mov	r3, r1
 800d16a:	807b      	strh	r3, [r7, #2]
 800d16c:	4613      	mov	r3, r2
 800d16e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d170:	787b      	ldrb	r3, [r7, #1]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d003      	beq.n	800d17e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d176:	887a      	ldrh	r2, [r7, #2]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800d17c:	e003      	b.n	800d186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800d17e:	887b      	ldrh	r3, [r7, #2]
 800d180:	041a      	lsls	r2, r3, #16
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	611a      	str	r2, [r3, #16]
}
 800d186:	bf00      	nop
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bc80      	pop	{r7}
 800d18e:	4770      	bx	lr

0800d190 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d1a2:	887a      	ldrh	r2, [r7, #2]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	4013      	ands	r3, r2
 800d1a8:	041a      	lsls	r2, r3, #16
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	43d9      	mvns	r1, r3
 800d1ae:	887b      	ldrh	r3, [r7, #2]
 800d1b0:	400b      	ands	r3, r1
 800d1b2:	431a      	orrs	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	611a      	str	r2, [r3, #16]
}
 800d1b8:	bf00      	nop
 800d1ba:	3714      	adds	r7, #20
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bc80      	pop	{r7}
 800d1c0:	4770      	bx	lr
	...

0800d1c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d101      	bne.n	800d1d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e11f      	b.n	800d416 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7fe f93a 	bl	800b464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2224      	movs	r2, #36	; 0x24
 800d1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f022 0201 	bic.w	r2, r2, #1
 800d206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d228:	f002 f974 	bl	800f514 <HAL_RCC_GetPCLK1Freq>
 800d22c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	4a7b      	ldr	r2, [pc, #492]	; (800d420 <HAL_I2C_Init+0x25c>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d807      	bhi.n	800d248 <HAL_I2C_Init+0x84>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	4a7a      	ldr	r2, [pc, #488]	; (800d424 <HAL_I2C_Init+0x260>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	bf94      	ite	ls
 800d240:	2301      	movls	r3, #1
 800d242:	2300      	movhi	r3, #0
 800d244:	b2db      	uxtb	r3, r3
 800d246:	e006      	b.n	800d256 <HAL_I2C_Init+0x92>
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	4a77      	ldr	r2, [pc, #476]	; (800d428 <HAL_I2C_Init+0x264>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	bf94      	ite	ls
 800d250:	2301      	movls	r3, #1
 800d252:	2300      	movhi	r3, #0
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b00      	cmp	r3, #0
 800d258:	d001      	beq.n	800d25e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e0db      	b.n	800d416 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	4a72      	ldr	r2, [pc, #456]	; (800d42c <HAL_I2C_Init+0x268>)
 800d262:	fba2 2303 	umull	r2, r3, r2, r3
 800d266:	0c9b      	lsrs	r3, r3, #18
 800d268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	68ba      	ldr	r2, [r7, #8]
 800d27a:	430a      	orrs	r2, r1
 800d27c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	6a1b      	ldr	r3, [r3, #32]
 800d284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	4a64      	ldr	r2, [pc, #400]	; (800d420 <HAL_I2C_Init+0x25c>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d802      	bhi.n	800d298 <HAL_I2C_Init+0xd4>
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	3301      	adds	r3, #1
 800d296:	e009      	b.n	800d2ac <HAL_I2C_Init+0xe8>
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d29e:	fb02 f303 	mul.w	r3, r2, r3
 800d2a2:	4a63      	ldr	r2, [pc, #396]	; (800d430 <HAL_I2C_Init+0x26c>)
 800d2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d2a8:	099b      	lsrs	r3, r3, #6
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	6812      	ldr	r2, [r2, #0]
 800d2b0:	430b      	orrs	r3, r1
 800d2b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d2be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	4956      	ldr	r1, [pc, #344]	; (800d420 <HAL_I2C_Init+0x25c>)
 800d2c8:	428b      	cmp	r3, r1
 800d2ca:	d80d      	bhi.n	800d2e8 <HAL_I2C_Init+0x124>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	1e59      	subs	r1, r3, #1
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800d2da:	3301      	adds	r3, #1
 800d2dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2e0:	2b04      	cmp	r3, #4
 800d2e2:	bf38      	it	cc
 800d2e4:	2304      	movcc	r3, #4
 800d2e6:	e04f      	b.n	800d388 <HAL_I2C_Init+0x1c4>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d111      	bne.n	800d314 <HAL_I2C_Init+0x150>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	1e58      	subs	r0, r3, #1
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6859      	ldr	r1, [r3, #4]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	005b      	lsls	r3, r3, #1
 800d2fc:	440b      	add	r3, r1
 800d2fe:	fbb0 f3f3 	udiv	r3, r0, r3
 800d302:	3301      	adds	r3, #1
 800d304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d308:	2b00      	cmp	r3, #0
 800d30a:	bf0c      	ite	eq
 800d30c:	2301      	moveq	r3, #1
 800d30e:	2300      	movne	r3, #0
 800d310:	b2db      	uxtb	r3, r3
 800d312:	e012      	b.n	800d33a <HAL_I2C_Init+0x176>
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	1e58      	subs	r0, r3, #1
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6859      	ldr	r1, [r3, #4]
 800d31c:	460b      	mov	r3, r1
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	440b      	add	r3, r1
 800d322:	0099      	lsls	r1, r3, #2
 800d324:	440b      	add	r3, r1
 800d326:	fbb0 f3f3 	udiv	r3, r0, r3
 800d32a:	3301      	adds	r3, #1
 800d32c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d330:	2b00      	cmp	r3, #0
 800d332:	bf0c      	ite	eq
 800d334:	2301      	moveq	r3, #1
 800d336:	2300      	movne	r3, #0
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <HAL_I2C_Init+0x17e>
 800d33e:	2301      	movs	r3, #1
 800d340:	e022      	b.n	800d388 <HAL_I2C_Init+0x1c4>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10e      	bne.n	800d368 <HAL_I2C_Init+0x1a4>
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	1e58      	subs	r0, r3, #1
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6859      	ldr	r1, [r3, #4]
 800d352:	460b      	mov	r3, r1
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	440b      	add	r3, r1
 800d358:	fbb0 f3f3 	udiv	r3, r0, r3
 800d35c:	3301      	adds	r3, #1
 800d35e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d366:	e00f      	b.n	800d388 <HAL_I2C_Init+0x1c4>
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	1e58      	subs	r0, r3, #1
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6859      	ldr	r1, [r3, #4]
 800d370:	460b      	mov	r3, r1
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	440b      	add	r3, r1
 800d376:	0099      	lsls	r1, r3, #2
 800d378:	440b      	add	r3, r1
 800d37a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d37e:	3301      	adds	r3, #1
 800d380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d388:	6879      	ldr	r1, [r7, #4]
 800d38a:	6809      	ldr	r1, [r1, #0]
 800d38c:	4313      	orrs	r3, r2
 800d38e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	69da      	ldr	r2, [r3, #28]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a1b      	ldr	r3, [r3, #32]
 800d3a2:	431a      	orrs	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	430a      	orrs	r2, r1
 800d3aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d3b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	6911      	ldr	r1, [r2, #16]
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	68d2      	ldr	r2, [r2, #12]
 800d3c2:	4311      	orrs	r1, r2
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	6812      	ldr	r2, [r2, #0]
 800d3c8:	430b      	orrs	r3, r1
 800d3ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	695a      	ldr	r2, [r3, #20]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	431a      	orrs	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	430a      	orrs	r2, r1
 800d3e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f042 0201 	orr.w	r2, r2, #1
 800d3f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2220      	movs	r2, #32
 800d402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	000186a0 	.word	0x000186a0
 800d424:	001e847f 	.word	0x001e847f
 800d428:	003d08ff 	.word	0x003d08ff
 800d42c:	431bde83 	.word	0x431bde83
 800d430:	10624dd3 	.word	0x10624dd3

0800d434 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b088      	sub	sp, #32
 800d438:	af02      	add	r7, sp, #8
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	607a      	str	r2, [r7, #4]
 800d43e:	461a      	mov	r2, r3
 800d440:	460b      	mov	r3, r1
 800d442:	817b      	strh	r3, [r7, #10]
 800d444:	4613      	mov	r3, r2
 800d446:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d448:	f7ff f98c 	bl	800c764 <HAL_GetTick>
 800d44c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d454:	b2db      	uxtb	r3, r3
 800d456:	2b20      	cmp	r3, #32
 800d458:	f040 80e0 	bne.w	800d61c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	2319      	movs	r3, #25
 800d462:	2201      	movs	r2, #1
 800d464:	4970      	ldr	r1, [pc, #448]	; (800d628 <HAL_I2C_Master_Transmit+0x1f4>)
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f001 faa2 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d001      	beq.n	800d476 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d472:	2302      	movs	r3, #2
 800d474:	e0d3      	b.n	800d61e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d101      	bne.n	800d484 <HAL_I2C_Master_Transmit+0x50>
 800d480:	2302      	movs	r3, #2
 800d482:	e0cc      	b.n	800d61e <HAL_I2C_Master_Transmit+0x1ea>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f003 0301 	and.w	r3, r3, #1
 800d496:	2b01      	cmp	r3, #1
 800d498:	d007      	beq.n	800d4aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f042 0201 	orr.w	r2, r2, #1
 800d4a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d4b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2221      	movs	r2, #33	; 0x21
 800d4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2210      	movs	r2, #16
 800d4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	893a      	ldrh	r2, [r7, #8]
 800d4da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	4a50      	ldr	r2, [pc, #320]	; (800d62c <HAL_I2C_Master_Transmit+0x1f8>)
 800d4ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d4ec:	8979      	ldrh	r1, [r7, #10]
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	6a3a      	ldr	r2, [r7, #32]
 800d4f2:	68f8      	ldr	r0, [r7, #12]
 800d4f4:	f000 ff8e 	bl	800e414 <I2C_MasterRequestWrite>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	e08d      	b.n	800d61e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d502:	2300      	movs	r3, #0
 800d504:	613b      	str	r3, [r7, #16]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	695b      	ldr	r3, [r3, #20]
 800d50c:	613b      	str	r3, [r7, #16]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	699b      	ldr	r3, [r3, #24]
 800d514:	613b      	str	r3, [r7, #16]
 800d516:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d518:	e066      	b.n	800d5e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	6a39      	ldr	r1, [r7, #32]
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	f001 fb1c 	bl	800eb5c <I2C_WaitOnTXEFlagUntilTimeout>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00d      	beq.n	800d546 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d52e:	2b04      	cmp	r3, #4
 800d530:	d107      	bne.n	800d542 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d540:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	e06b      	b.n	800d61e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54a:	781a      	ldrb	r2, [r3, #0]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d556:	1c5a      	adds	r2, r3, #1
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d560:	b29b      	uxth	r3, r3
 800d562:	3b01      	subs	r3, #1
 800d564:	b29a      	uxth	r2, r3
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d56e:	3b01      	subs	r3, #1
 800d570:	b29a      	uxth	r2, r3
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	695b      	ldr	r3, [r3, #20]
 800d57c:	f003 0304 	and.w	r3, r3, #4
 800d580:	2b04      	cmp	r3, #4
 800d582:	d11b      	bne.n	800d5bc <HAL_I2C_Master_Transmit+0x188>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d017      	beq.n	800d5bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d590:	781a      	ldrb	r2, [r3, #0]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59c:	1c5a      	adds	r2, r3, #1
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d5bc:	697a      	ldr	r2, [r7, #20]
 800d5be:	6a39      	ldr	r1, [r7, #32]
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f001 fb0c 	bl	800ebde <I2C_WaitOnBTFFlagUntilTimeout>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00d      	beq.n	800d5e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d0:	2b04      	cmp	r3, #4
 800d5d2:	d107      	bne.n	800d5e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e01a      	b.n	800d61e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d194      	bne.n	800d51a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2220      	movs	r2, #32
 800d604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2200      	movs	r2, #0
 800d614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d618:	2300      	movs	r3, #0
 800d61a:	e000      	b.n	800d61e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d61c:	2302      	movs	r3, #2
  }
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3718      	adds	r7, #24
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	00100002 	.word	0x00100002
 800d62c:	ffff0000 	.word	0xffff0000

0800d630 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b08c      	sub	sp, #48	; 0x30
 800d634:	af02      	add	r7, sp, #8
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	607a      	str	r2, [r7, #4]
 800d63a:	461a      	mov	r2, r3
 800d63c:	460b      	mov	r3, r1
 800d63e:	817b      	strh	r3, [r7, #10]
 800d640:	4613      	mov	r3, r2
 800d642:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800d644:	2300      	movs	r3, #0
 800d646:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d648:	f7ff f88c 	bl	800c764 <HAL_GetTick>
 800d64c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b20      	cmp	r3, #32
 800d658:	f040 8238 	bne.w	800dacc <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	2319      	movs	r3, #25
 800d662:	2201      	movs	r2, #1
 800d664:	497e      	ldr	r1, [pc, #504]	; (800d860 <HAL_I2C_Master_Receive+0x230>)
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f001 f9a2 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800d672:	2302      	movs	r3, #2
 800d674:	e22b      	b.n	800dace <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d101      	bne.n	800d684 <HAL_I2C_Master_Receive+0x54>
 800d680:	2302      	movs	r3, #2
 800d682:	e224      	b.n	800dace <HAL_I2C_Master_Receive+0x49e>
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2201      	movs	r2, #1
 800d688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f003 0301 	and.w	r3, r3, #1
 800d696:	2b01      	cmp	r3, #1
 800d698:	d007      	beq.n	800d6aa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f042 0201 	orr.w	r2, r2, #1
 800d6a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2222      	movs	r2, #34	; 0x22
 800d6be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2210      	movs	r2, #16
 800d6c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	893a      	ldrh	r2, [r7, #8]
 800d6da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	4a5e      	ldr	r2, [pc, #376]	; (800d864 <HAL_I2C_Master_Receive+0x234>)
 800d6ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d6ec:	8979      	ldrh	r1, [r7, #10]
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	f000 ff10 	bl	800e518 <I2C_MasterRequestRead>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e1e5      	b.n	800dace <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d706:	2b00      	cmp	r3, #0
 800d708:	d113      	bne.n	800d732 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d70a:	2300      	movs	r3, #0
 800d70c:	61fb      	str	r3, [r7, #28]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	695b      	ldr	r3, [r3, #20]
 800d714:	61fb      	str	r3, [r7, #28]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	699b      	ldr	r3, [r3, #24]
 800d71c:	61fb      	str	r3, [r7, #28]
 800d71e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	e1b9      	b.n	800daa6 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d736:	2b01      	cmp	r3, #1
 800d738:	d11d      	bne.n	800d776 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d748:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d74a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d74c:	2300      	movs	r3, #0
 800d74e:	61bb      	str	r3, [r7, #24]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	695b      	ldr	r3, [r3, #20]
 800d756:	61bb      	str	r3, [r7, #24]
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	699b      	ldr	r3, [r3, #24]
 800d75e:	61bb      	str	r3, [r7, #24]
 800d760:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d770:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d772:	b662      	cpsie	i
 800d774:	e197      	b.n	800daa6 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d11d      	bne.n	800d7ba <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d78c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800d78e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d790:	2300      	movs	r3, #0
 800d792:	617b      	str	r3, [r7, #20]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	695b      	ldr	r3, [r3, #20]
 800d79a:	617b      	str	r3, [r7, #20]
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	699b      	ldr	r3, [r3, #24]
 800d7a2:	617b      	str	r3, [r7, #20]
 800d7a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d7b6:	b662      	cpsie	i
 800d7b8:	e175      	b.n	800daa6 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d7c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	613b      	str	r3, [r7, #16]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	695b      	ldr	r3, [r3, #20]
 800d7d4:	613b      	str	r3, [r7, #16]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	699b      	ldr	r3, [r3, #24]
 800d7dc:	613b      	str	r3, [r7, #16]
 800d7de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800d7e0:	e161      	b.n	800daa6 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	f200 811a 	bhi.w	800da20 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d123      	bne.n	800d83c <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	f001 fa31 	bl	800ec60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d001      	beq.n	800d808 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800d804:	2301      	movs	r3, #1
 800d806:	e162      	b.n	800dace <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	691a      	ldr	r2, [r3, #16]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d812:	b2d2      	uxtb	r2, r2
 800d814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81a:	1c5a      	adds	r2, r3, #1
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d824:	3b01      	subs	r3, #1
 800d826:	b29a      	uxth	r2, r3
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d830:	b29b      	uxth	r3, r3
 800d832:	3b01      	subs	r3, #1
 800d834:	b29a      	uxth	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d83a:	e134      	b.n	800daa6 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d840:	2b02      	cmp	r3, #2
 800d842:	d150      	bne.n	800d8e6 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84a:	2200      	movs	r2, #0
 800d84c:	4906      	ldr	r1, [pc, #24]	; (800d868 <HAL_I2C_Master_Receive+0x238>)
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f001 f8ae 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d008      	beq.n	800d86c <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800d85a:	2301      	movs	r3, #1
 800d85c:	e137      	b.n	800dace <HAL_I2C_Master_Receive+0x49e>
 800d85e:	bf00      	nop
 800d860:	00100002 	.word	0x00100002
 800d864:	ffff0000 	.word	0xffff0000
 800d868:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800d86c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d87c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	691a      	ldr	r2, [r3, #16]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d888:	b2d2      	uxtb	r2, r2
 800d88a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d890:	1c5a      	adds	r2, r3, #1
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d89a:	3b01      	subs	r3, #1
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800d8b0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	691a      	ldr	r2, [r3, #16]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8bc:	b2d2      	uxtb	r2, r2
 800d8be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c4:	1c5a      	adds	r2, r3, #1
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8ce:	3b01      	subs	r3, #1
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d8e4:	e0df      	b.n	800daa6 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e8:	9300      	str	r3, [sp, #0]
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	497a      	ldr	r1, [pc, #488]	; (800dad8 <HAL_I2C_Master_Receive+0x4a8>)
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f001 f85d 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d001      	beq.n	800d900 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	e0e6      	b.n	800dace <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d90e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800d910:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	691a      	ldr	r2, [r3, #16]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91c:	b2d2      	uxtb	r2, r2
 800d91e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d924:	1c5a      	adds	r2, r3, #1
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d92e:	3b01      	subs	r3, #1
 800d930:	b29a      	uxth	r2, r3
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	3b01      	subs	r3, #1
 800d93e:	b29a      	uxth	r2, r3
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d944:	4b65      	ldr	r3, [pc, #404]	; (800dadc <HAL_I2C_Master_Receive+0x4ac>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	08db      	lsrs	r3, r3, #3
 800d94a:	4a65      	ldr	r2, [pc, #404]	; (800dae0 <HAL_I2C_Master_Receive+0x4b0>)
 800d94c:	fba2 2303 	umull	r2, r3, r2, r3
 800d950:	0a1a      	lsrs	r2, r3, #8
 800d952:	4613      	mov	r3, r2
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	4413      	add	r3, r2
 800d958:	00da      	lsls	r2, r3, #3
 800d95a:	1ad3      	subs	r3, r2, r3
 800d95c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800d95e:	6a3b      	ldr	r3, [r7, #32]
 800d960:	3b01      	subs	r3, #1
 800d962:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800d964:	6a3b      	ldr	r3, [r7, #32]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d117      	bne.n	800d99a <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2200      	movs	r2, #0
 800d96e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2220      	movs	r2, #32
 800d974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d984:	f043 0220 	orr.w	r2, r3, #32
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800d98c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	e099      	b.n	800dace <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	695b      	ldr	r3, [r3, #20]
 800d9a0:	f003 0304 	and.w	r3, r3, #4
 800d9a4:	2b04      	cmp	r3, #4
 800d9a6:	d1da      	bne.n	800d95e <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	691a      	ldr	r2, [r3, #16]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c2:	b2d2      	uxtb	r2, r2
 800d9c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ca:	1c5a      	adds	r2, r3, #1
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	3b01      	subs	r3, #1
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d9ea:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	691a      	ldr	r2, [r3, #16]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f6:	b2d2      	uxtb	r2, r2
 800d9f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fe:	1c5a      	adds	r2, r3, #1
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da08:	3b01      	subs	r3, #1
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da14:	b29b      	uxth	r3, r3
 800da16:	3b01      	subs	r3, #1
 800da18:	b29a      	uxth	r2, r3
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800da1e:	e042      	b.n	800daa6 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	f001 f91b 	bl	800ec60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d001      	beq.n	800da34 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800da30:	2301      	movs	r3, #1
 800da32:	e04c      	b.n	800dace <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	691a      	ldr	r2, [r3, #16]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3e:	b2d2      	uxtb	r2, r2
 800da40:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da46:	1c5a      	adds	r2, r3, #1
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da50:	3b01      	subs	r3, #1
 800da52:	b29a      	uxth	r2, r3
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	3b01      	subs	r3, #1
 800da60:	b29a      	uxth	r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	695b      	ldr	r3, [r3, #20]
 800da6c:	f003 0304 	and.w	r3, r3, #4
 800da70:	2b04      	cmp	r3, #4
 800da72:	d118      	bne.n	800daa6 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	691a      	ldr	r2, [r3, #16]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7e:	b2d2      	uxtb	r2, r2
 800da80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da86:	1c5a      	adds	r2, r3, #1
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da90:	3b01      	subs	r3, #1
 800da92:	b29a      	uxth	r2, r3
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	3b01      	subs	r3, #1
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f47f ae99 	bne.w	800d7e2 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2220      	movs	r2, #32
 800dab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2200      	movs	r2, #0
 800dabc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2200      	movs	r2, #0
 800dac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dac8:	2300      	movs	r3, #0
 800daca:	e000      	b.n	800dace <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800dacc:	2302      	movs	r3, #2
  }
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3728      	adds	r7, #40	; 0x28
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	00010004 	.word	0x00010004
 800dadc:	20000004 	.word	0x20000004
 800dae0:	14f8b589 	.word	0x14f8b589

0800dae4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b088      	sub	sp, #32
 800dae8:	af02      	add	r7, sp, #8
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	4608      	mov	r0, r1
 800daee:	4611      	mov	r1, r2
 800daf0:	461a      	mov	r2, r3
 800daf2:	4603      	mov	r3, r0
 800daf4:	817b      	strh	r3, [r7, #10]
 800daf6:	460b      	mov	r3, r1
 800daf8:	813b      	strh	r3, [r7, #8]
 800dafa:	4613      	mov	r3, r2
 800dafc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dafe:	f7fe fe31 	bl	800c764 <HAL_GetTick>
 800db02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	2b20      	cmp	r3, #32
 800db0e:	f040 80d9 	bne.w	800dcc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	9300      	str	r3, [sp, #0]
 800db16:	2319      	movs	r3, #25
 800db18:	2201      	movs	r2, #1
 800db1a:	496d      	ldr	r1, [pc, #436]	; (800dcd0 <HAL_I2C_Mem_Write+0x1ec>)
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f000 ff47 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d001      	beq.n	800db2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800db28:	2302      	movs	r3, #2
 800db2a:	e0cc      	b.n	800dcc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db32:	2b01      	cmp	r3, #1
 800db34:	d101      	bne.n	800db3a <HAL_I2C_Mem_Write+0x56>
 800db36:	2302      	movs	r3, #2
 800db38:	e0c5      	b.n	800dcc6 <HAL_I2C_Mem_Write+0x1e2>
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2201      	movs	r2, #1
 800db3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f003 0301 	and.w	r3, r3, #1
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d007      	beq.n	800db60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f042 0201 	orr.w	r2, r2, #1
 800db5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2221      	movs	r2, #33	; 0x21
 800db74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	2240      	movs	r2, #64	; 0x40
 800db7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2200      	movs	r2, #0
 800db84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	6a3a      	ldr	r2, [r7, #32]
 800db8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db96:	b29a      	uxth	r2, r3
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	4a4d      	ldr	r2, [pc, #308]	; (800dcd4 <HAL_I2C_Mem_Write+0x1f0>)
 800dba0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dba2:	88f8      	ldrh	r0, [r7, #6]
 800dba4:	893a      	ldrh	r2, [r7, #8]
 800dba6:	8979      	ldrh	r1, [r7, #10]
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	9301      	str	r3, [sp, #4]
 800dbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f000 fd7e 	bl	800e6b4 <I2C_RequestMemoryWrite>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d052      	beq.n	800dc64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e081      	b.n	800dcc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dbc6:	68f8      	ldr	r0, [r7, #12]
 800dbc8:	f000 ffc8 	bl	800eb5c <I2C_WaitOnTXEFlagUntilTimeout>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00d      	beq.n	800dbee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd6:	2b04      	cmp	r3, #4
 800dbd8:	d107      	bne.n	800dbea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbe8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dbea:	2301      	movs	r3, #1
 800dbec:	e06b      	b.n	800dcc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf2:	781a      	ldrb	r2, [r3, #0]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfe:	1c5a      	adds	r2, r3, #1
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	3b01      	subs	r3, #1
 800dc18:	b29a      	uxth	r2, r3
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	695b      	ldr	r3, [r3, #20]
 800dc24:	f003 0304 	and.w	r3, r3, #4
 800dc28:	2b04      	cmp	r3, #4
 800dc2a:	d11b      	bne.n	800dc64 <HAL_I2C_Mem_Write+0x180>
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d017      	beq.n	800dc64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc38:	781a      	ldrb	r2, [r3, #0]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc44:	1c5a      	adds	r2, r3, #1
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1aa      	bne.n	800dbc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc6c:	697a      	ldr	r2, [r7, #20]
 800dc6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f000 ffb4 	bl	800ebde <I2C_WaitOnBTFFlagUntilTimeout>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00d      	beq.n	800dc98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc80:	2b04      	cmp	r3, #4
 800dc82:	d107      	bne.n	800dc94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800dc94:	2301      	movs	r3, #1
 800dc96:	e016      	b.n	800dcc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2220      	movs	r2, #32
 800dcac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	e000      	b.n	800dcc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800dcc4:	2302      	movs	r3, #2
  }
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3718      	adds	r7, #24
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	00100002 	.word	0x00100002
 800dcd4:	ffff0000 	.word	0xffff0000

0800dcd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b08c      	sub	sp, #48	; 0x30
 800dcdc:	af02      	add	r7, sp, #8
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	4608      	mov	r0, r1
 800dce2:	4611      	mov	r1, r2
 800dce4:	461a      	mov	r2, r3
 800dce6:	4603      	mov	r3, r0
 800dce8:	817b      	strh	r3, [r7, #10]
 800dcea:	460b      	mov	r3, r1
 800dcec:	813b      	strh	r3, [r7, #8]
 800dcee:	4613      	mov	r3, r2
 800dcf0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dcf6:	f7fe fd35 	bl	800c764 <HAL_GetTick>
 800dcfa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	2b20      	cmp	r3, #32
 800dd06:	f040 823d 	bne.w	800e184 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	2319      	movs	r3, #25
 800dd10:	2201      	movs	r2, #1
 800dd12:	4981      	ldr	r1, [pc, #516]	; (800df18 <HAL_I2C_Mem_Read+0x240>)
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f000 fe4b 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d001      	beq.n	800dd24 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800dd20:	2302      	movs	r3, #2
 800dd22:	e230      	b.n	800e186 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d101      	bne.n	800dd32 <HAL_I2C_Mem_Read+0x5a>
 800dd2e:	2302      	movs	r3, #2
 800dd30:	e229      	b.n	800e186 <HAL_I2C_Mem_Read+0x4ae>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2201      	movs	r2, #1
 800dd36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f003 0301 	and.w	r3, r3, #1
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d007      	beq.n	800dd58 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f042 0201 	orr.w	r2, r2, #1
 800dd56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2222      	movs	r2, #34	; 0x22
 800dd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2240      	movs	r2, #64	; 0x40
 800dd74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800dd88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	4a61      	ldr	r2, [pc, #388]	; (800df1c <HAL_I2C_Mem_Read+0x244>)
 800dd98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dd9a:	88f8      	ldrh	r0, [r7, #6]
 800dd9c:	893a      	ldrh	r2, [r7, #8]
 800dd9e:	8979      	ldrh	r1, [r7, #10]
 800dda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda2:	9301      	str	r3, [sp, #4]
 800dda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda6:	9300      	str	r3, [sp, #0]
 800dda8:	4603      	mov	r3, r0
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f000 fd18 	bl	800e7e0 <I2C_RequestMemoryRead>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d001      	beq.n	800ddba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e1e5      	b.n	800e186 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d113      	bne.n	800ddea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	61fb      	str	r3, [r7, #28]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	695b      	ldr	r3, [r3, #20]
 800ddcc:	61fb      	str	r3, [r7, #28]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	699b      	ldr	r3, [r3, #24]
 800ddd4:	61fb      	str	r3, [r7, #28]
 800ddd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dde6:	601a      	str	r2, [r3, #0]
 800dde8:	e1b9      	b.n	800e15e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d11d      	bne.n	800de2e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800de02:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de04:	2300      	movs	r3, #0
 800de06:	61bb      	str	r3, [r7, #24]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	61bb      	str	r3, [r7, #24]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	699b      	ldr	r3, [r3, #24]
 800de16:	61bb      	str	r3, [r7, #24]
 800de18:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800de2a:	b662      	cpsie	i
 800de2c:	e197      	b.n	800e15e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de32:	2b02      	cmp	r3, #2
 800de34:	d11d      	bne.n	800de72 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800de46:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de48:	2300      	movs	r3, #0
 800de4a:	617b      	str	r3, [r7, #20]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	695b      	ldr	r3, [r3, #20]
 800de52:	617b      	str	r3, [r7, #20]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	699b      	ldr	r3, [r3, #24]
 800de5a:	617b      	str	r3, [r7, #20]
 800de5c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800de6e:	b662      	cpsie	i
 800de70:	e175      	b.n	800e15e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de80:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de82:	2300      	movs	r3, #0
 800de84:	613b      	str	r3, [r7, #16]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	695b      	ldr	r3, [r3, #20]
 800de8c:	613b      	str	r3, [r7, #16]
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	699b      	ldr	r3, [r3, #24]
 800de94:	613b      	str	r3, [r7, #16]
 800de96:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800de98:	e161      	b.n	800e15e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de9e:	2b03      	cmp	r3, #3
 800dea0:	f200 811a 	bhi.w	800e0d8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d123      	bne.n	800def4 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800deac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 fed5 	bl	800ec60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d001      	beq.n	800dec0 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 800debc:	2301      	movs	r3, #1
 800debe:	e162      	b.n	800e186 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	691a      	ldr	r2, [r3, #16]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deca:	b2d2      	uxtb	r2, r2
 800decc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded2:	1c5a      	adds	r2, r3, #1
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dedc:	3b01      	subs	r3, #1
 800dede:	b29a      	uxth	r2, r3
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dee8:	b29b      	uxth	r3, r3
 800deea:	3b01      	subs	r3, #1
 800deec:	b29a      	uxth	r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800def2:	e134      	b.n	800e15e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800def8:	2b02      	cmp	r3, #2
 800defa:	d150      	bne.n	800df9e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df02:	2200      	movs	r2, #0
 800df04:	4906      	ldr	r1, [pc, #24]	; (800df20 <HAL_I2C_Mem_Read+0x248>)
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f000 fd52 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d008      	beq.n	800df24 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800df12:	2301      	movs	r3, #1
 800df14:	e137      	b.n	800e186 <HAL_I2C_Mem_Read+0x4ae>
 800df16:	bf00      	nop
 800df18:	00100002 	.word	0x00100002
 800df1c:	ffff0000 	.word	0xffff0000
 800df20:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800df24:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df34:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	691a      	ldr	r2, [r3, #16]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df40:	b2d2      	uxtb	r2, r2
 800df42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df48:	1c5a      	adds	r2, r3, #1
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df52:	3b01      	subs	r3, #1
 800df54:	b29a      	uxth	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df5e:	b29b      	uxth	r3, r3
 800df60:	3b01      	subs	r3, #1
 800df62:	b29a      	uxth	r2, r3
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800df68:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	691a      	ldr	r2, [r3, #16]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df74:	b2d2      	uxtb	r2, r2
 800df76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7c:	1c5a      	adds	r2, r3, #1
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df86:	3b01      	subs	r3, #1
 800df88:	b29a      	uxth	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df92:	b29b      	uxth	r3, r3
 800df94:	3b01      	subs	r3, #1
 800df96:	b29a      	uxth	r2, r3
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800df9c:	e0df      	b.n	800e15e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800df9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	497a      	ldr	r1, [pc, #488]	; (800e190 <HAL_I2C_Mem_Read+0x4b8>)
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f000 fd01 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e0e6      	b.n	800e186 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800dfc8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	691a      	ldr	r2, [r3, #16]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd4:	b2d2      	uxtb	r2, r2
 800dfd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfdc:	1c5a      	adds	r2, r3, #1
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	3b01      	subs	r3, #1
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800dffc:	4b65      	ldr	r3, [pc, #404]	; (800e194 <HAL_I2C_Mem_Read+0x4bc>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	08db      	lsrs	r3, r3, #3
 800e002:	4a65      	ldr	r2, [pc, #404]	; (800e198 <HAL_I2C_Mem_Read+0x4c0>)
 800e004:	fba2 2303 	umull	r2, r3, r2, r3
 800e008:	0a1a      	lsrs	r2, r3, #8
 800e00a:	4613      	mov	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	4413      	add	r3, r2
 800e010:	00da      	lsls	r2, r3, #3
 800e012:	1ad3      	subs	r3, r2, r3
 800e014:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	3b01      	subs	r3, #1
 800e01a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800e01c:	6a3b      	ldr	r3, [r7, #32]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d117      	bne.n	800e052 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2220      	movs	r2, #32
 800e02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2200      	movs	r2, #0
 800e034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e03c:	f043 0220 	orr.w	r2, r3, #32
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800e044:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2200      	movs	r2, #0
 800e04a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800e04e:	2301      	movs	r3, #1
 800e050:	e099      	b.n	800e186 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	695b      	ldr	r3, [r3, #20]
 800e058:	f003 0304 	and.w	r3, r3, #4
 800e05c:	2b04      	cmp	r3, #4
 800e05e:	d1da      	bne.n	800e016 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e06e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	691a      	ldr	r2, [r3, #16]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07a:	b2d2      	uxtb	r2, r2
 800e07c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e082:	1c5a      	adds	r2, r3, #1
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e08c:	3b01      	subs	r3, #1
 800e08e:	b29a      	uxth	r2, r3
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e098:	b29b      	uxth	r3, r3
 800e09a:	3b01      	subs	r3, #1
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e0a2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	691a      	ldr	r2, [r3, #16]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ae:	b2d2      	uxtb	r2, r2
 800e0b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b6:	1c5a      	adds	r2, r3, #1
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e0d6:	e042      	b.n	800e15e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e0dc:	68f8      	ldr	r0, [r7, #12]
 800e0de:	f000 fdbf 	bl	800ec60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e04c      	b.n	800e186 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	691a      	ldr	r2, [r3, #16]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f6:	b2d2      	uxtb	r2, r2
 800e0f8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	1c5a      	adds	r2, r3, #1
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e108:	3b01      	subs	r3, #1
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e114:	b29b      	uxth	r3, r3
 800e116:	3b01      	subs	r3, #1
 800e118:	b29a      	uxth	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	695b      	ldr	r3, [r3, #20]
 800e124:	f003 0304 	and.w	r3, r3, #4
 800e128:	2b04      	cmp	r3, #4
 800e12a:	d118      	bne.n	800e15e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	691a      	ldr	r2, [r3, #16]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e136:	b2d2      	uxtb	r2, r2
 800e138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13e:	1c5a      	adds	r2, r3, #1
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e148:	3b01      	subs	r3, #1
 800e14a:	b29a      	uxth	r2, r3
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e154:	b29b      	uxth	r3, r3
 800e156:	3b01      	subs	r3, #1
 800e158:	b29a      	uxth	r2, r3
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e162:	2b00      	cmp	r3, #0
 800e164:	f47f ae99 	bne.w	800de9a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2220      	movs	r2, #32
 800e16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2200      	movs	r2, #0
 800e174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	e000      	b.n	800e186 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 800e184:	2302      	movs	r3, #2
  }
}
 800e186:	4618      	mov	r0, r3
 800e188:	3728      	adds	r7, #40	; 0x28
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	00010004 	.word	0x00010004
 800e194:	20000004 	.word	0x20000004
 800e198:	14f8b589 	.word	0x14f8b589

0800e19c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b08a      	sub	sp, #40	; 0x28
 800e1a0:	af02      	add	r7, sp, #8
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	607a      	str	r2, [r7, #4]
 800e1a6:	603b      	str	r3, [r7, #0]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800e1ac:	f7fe fada 	bl	800c764 <HAL_GetTick>
 800e1b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b20      	cmp	r3, #32
 800e1c0:	f040 8111 	bne.w	800e3e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	2319      	movs	r3, #25
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	4988      	ldr	r1, [pc, #544]	; (800e3f0 <HAL_I2C_IsDeviceReady+0x254>)
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f000 fbee 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d001      	beq.n	800e1de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800e1da:	2302      	movs	r3, #2
 800e1dc:	e104      	b.n	800e3e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d101      	bne.n	800e1ec <HAL_I2C_IsDeviceReady+0x50>
 800e1e8:	2302      	movs	r3, #2
 800e1ea:	e0fd      	b.n	800e3e8 <HAL_I2C_IsDeviceReady+0x24c>
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f003 0301 	and.w	r3, r3, #1
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d007      	beq.n	800e212 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f042 0201 	orr.w	r2, r2, #1
 800e210:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e220:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2224      	movs	r2, #36	; 0x24
 800e226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2200      	movs	r2, #0
 800e22e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	4a70      	ldr	r2, [pc, #448]	; (800e3f4 <HAL_I2C_IsDeviceReady+0x258>)
 800e234:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e244:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	2200      	movs	r2, #0
 800e24e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f000 fbac 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00d      	beq.n	800e27a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e26c:	d103      	bne.n	800e276 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e274:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800e276:	2303      	movs	r3, #3
 800e278:	e0b6      	b.n	800e3e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e27a:	897b      	ldrh	r3, [r7, #10]
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	461a      	mov	r2, r3
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e288:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800e28a:	f7fe fa6b 	bl	800c764 <HAL_GetTick>
 800e28e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	695b      	ldr	r3, [r3, #20]
 800e296:	f003 0302 	and.w	r3, r3, #2
 800e29a:	2b02      	cmp	r3, #2
 800e29c:	bf0c      	ite	eq
 800e29e:	2301      	moveq	r3, #1
 800e2a0:	2300      	movne	r3, #0
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	695b      	ldr	r3, [r3, #20]
 800e2ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e2b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2b4:	bf0c      	ite	eq
 800e2b6:	2301      	moveq	r3, #1
 800e2b8:	2300      	movne	r3, #0
 800e2ba:	b2db      	uxtb	r3, r3
 800e2bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800e2be:	e025      	b.n	800e30c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e2c0:	f7fe fa50 	bl	800c764 <HAL_GetTick>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	1ad3      	subs	r3, r2, r3
 800e2ca:	683a      	ldr	r2, [r7, #0]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d302      	bcc.n	800e2d6 <HAL_I2C_IsDeviceReady+0x13a>
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d103      	bne.n	800e2de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	22a0      	movs	r2, #160	; 0xa0
 800e2da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	f003 0302 	and.w	r3, r3, #2
 800e2e8:	2b02      	cmp	r3, #2
 800e2ea:	bf0c      	ite	eq
 800e2ec:	2301      	moveq	r3, #1
 800e2ee:	2300      	movne	r3, #0
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	695b      	ldr	r3, [r3, #20]
 800e2fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e2fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e302:	bf0c      	ite	eq
 800e304:	2301      	moveq	r3, #1
 800e306:	2300      	movne	r3, #0
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e312:	b2db      	uxtb	r3, r3
 800e314:	2ba0      	cmp	r3, #160	; 0xa0
 800e316:	d005      	beq.n	800e324 <HAL_I2C_IsDeviceReady+0x188>
 800e318:	7dfb      	ldrb	r3, [r7, #23]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d102      	bne.n	800e324 <HAL_I2C_IsDeviceReady+0x188>
 800e31e:	7dbb      	ldrb	r3, [r7, #22]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d0cd      	beq.n	800e2c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2220      	movs	r2, #32
 800e328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	695b      	ldr	r3, [r3, #20]
 800e332:	f003 0302 	and.w	r3, r3, #2
 800e336:	2b02      	cmp	r3, #2
 800e338:	d129      	bne.n	800e38e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e348:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e34a:	2300      	movs	r3, #0
 800e34c:	613b      	str	r3, [r7, #16]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	695b      	ldr	r3, [r3, #20]
 800e354:	613b      	str	r3, [r7, #16]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	699b      	ldr	r3, [r3, #24]
 800e35c:	613b      	str	r3, [r7, #16]
 800e35e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	9300      	str	r3, [sp, #0]
 800e364:	2319      	movs	r3, #25
 800e366:	2201      	movs	r2, #1
 800e368:	4921      	ldr	r1, [pc, #132]	; (800e3f0 <HAL_I2C_IsDeviceReady+0x254>)
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f000 fb20 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	d001      	beq.n	800e37a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800e376:	2301      	movs	r3, #1
 800e378:	e036      	b.n	800e3e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2220      	movs	r2, #32
 800e37e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	e02c      	b.n	800e3e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e39c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e3a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	9300      	str	r3, [sp, #0]
 800e3ac:	2319      	movs	r3, #25
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	490f      	ldr	r1, [pc, #60]	; (800e3f0 <HAL_I2C_IsDeviceReady+0x254>)
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f000 fafc 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d001      	beq.n	800e3c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	e012      	b.n	800e3e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800e3c8:	69ba      	ldr	r2, [r7, #24]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	f4ff af32 	bcc.w	800e236 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2220      	movs	r2, #32
 800e3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	e000      	b.n	800e3e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800e3e6:	2302      	movs	r3, #2
  }
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3720      	adds	r7, #32
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	00100002 	.word	0x00100002
 800e3f4:	ffff0000 	.word	0xffff0000

0800e3f8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e406:	b2db      	uxtb	r3, r3
}
 800e408:	4618      	mov	r0, r3
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bc80      	pop	{r7}
 800e410:	4770      	bx	lr
	...

0800e414 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b088      	sub	sp, #32
 800e418:	af02      	add	r7, sp, #8
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	607a      	str	r2, [r7, #4]
 800e41e:	603b      	str	r3, [r7, #0]
 800e420:	460b      	mov	r3, r1
 800e422:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e428:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	2b08      	cmp	r3, #8
 800e42e:	d006      	beq.n	800e43e <I2C_MasterRequestWrite+0x2a>
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	2b01      	cmp	r3, #1
 800e434:	d003      	beq.n	800e43e <I2C_MasterRequestWrite+0x2a>
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e43c:	d108      	bne.n	800e450 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e44c:	601a      	str	r2, [r3, #0]
 800e44e:	e00b      	b.n	800e468 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e454:	2b12      	cmp	r3, #18
 800e456:	d107      	bne.n	800e468 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f000 fa9b 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00d      	beq.n	800e49c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e48e:	d103      	bne.n	800e498 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e496:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e498:	2303      	movs	r3, #3
 800e49a:	e035      	b.n	800e508 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	691b      	ldr	r3, [r3, #16]
 800e4a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4a4:	d108      	bne.n	800e4b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e4a6:	897b      	ldrh	r3, [r7, #10]
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e4b4:	611a      	str	r2, [r3, #16]
 800e4b6:	e01b      	b.n	800e4f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e4b8:	897b      	ldrh	r3, [r7, #10]
 800e4ba:	11db      	asrs	r3, r3, #7
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	f003 0306 	and.w	r3, r3, #6
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	f063 030f 	orn	r3, r3, #15
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	490e      	ldr	r1, [pc, #56]	; (800e510 <I2C_MasterRequestWrite+0xfc>)
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	f000 fac1 	bl	800ea5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e010      	b.n	800e508 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e4e6:	897b      	ldrh	r3, [r7, #10]
 800e4e8:	b2da      	uxtb	r2, r3
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	4907      	ldr	r1, [pc, #28]	; (800e514 <I2C_MasterRequestWrite+0x100>)
 800e4f6:	68f8      	ldr	r0, [r7, #12]
 800e4f8:	f000 fab1 	bl	800ea5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e502:	2301      	movs	r3, #1
 800e504:	e000      	b.n	800e508 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e506:	2300      	movs	r3, #0
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3718      	adds	r7, #24
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	00010008 	.word	0x00010008
 800e514:	00010002 	.word	0x00010002

0800e518 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b088      	sub	sp, #32
 800e51c:	af02      	add	r7, sp, #8
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	607a      	str	r2, [r7, #4]
 800e522:	603b      	str	r3, [r7, #0]
 800e524:	460b      	mov	r3, r1
 800e526:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e53c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	2b08      	cmp	r3, #8
 800e542:	d006      	beq.n	800e552 <I2C_MasterRequestRead+0x3a>
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	2b01      	cmp	r3, #1
 800e548:	d003      	beq.n	800e552 <I2C_MasterRequestRead+0x3a>
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e550:	d108      	bne.n	800e564 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	e00b      	b.n	800e57c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e568:	2b11      	cmp	r3, #17
 800e56a:	d107      	bne.n	800e57c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e57a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f000 fa11 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00d      	beq.n	800e5b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5a2:	d103      	bne.n	800e5ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e5aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	e079      	b.n	800e6a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	691b      	ldr	r3, [r3, #16]
 800e5b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e5b8:	d108      	bne.n	800e5cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e5ba:	897b      	ldrh	r3, [r7, #10]
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	f043 0301 	orr.w	r3, r3, #1
 800e5c2:	b2da      	uxtb	r2, r3
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	611a      	str	r2, [r3, #16]
 800e5ca:	e05f      	b.n	800e68c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e5cc:	897b      	ldrh	r3, [r7, #10]
 800e5ce:	11db      	asrs	r3, r3, #7
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	f003 0306 	and.w	r3, r3, #6
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	f063 030f 	orn	r3, r3, #15
 800e5dc:	b2da      	uxtb	r2, r3
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	4930      	ldr	r1, [pc, #192]	; (800e6ac <I2C_MasterRequestRead+0x194>)
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f000 fa37 	bl	800ea5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d001      	beq.n	800e5fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e054      	b.n	800e6a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e5fa:	897b      	ldrh	r3, [r7, #10]
 800e5fc:	b2da      	uxtb	r2, r3
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	4929      	ldr	r1, [pc, #164]	; (800e6b0 <I2C_MasterRequestRead+0x198>)
 800e60a:	68f8      	ldr	r0, [r7, #12]
 800e60c:	f000 fa27 	bl	800ea5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d001      	beq.n	800e61a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e616:	2301      	movs	r3, #1
 800e618:	e044      	b.n	800e6a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e61a:	2300      	movs	r3, #0
 800e61c:	613b      	str	r3, [r7, #16]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	695b      	ldr	r3, [r3, #20]
 800e624:	613b      	str	r3, [r7, #16]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	699b      	ldr	r3, [r3, #24]
 800e62c:	613b      	str	r3, [r7, #16]
 800e62e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e63e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f000 f9af 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800e652:	4603      	mov	r3, r0
 800e654:	2b00      	cmp	r3, #0
 800e656:	d00d      	beq.n	800e674 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e666:	d103      	bne.n	800e670 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e66e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e670:	2303      	movs	r3, #3
 800e672:	e017      	b.n	800e6a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e674:	897b      	ldrh	r3, [r7, #10]
 800e676:	11db      	asrs	r3, r3, #7
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	f003 0306 	and.w	r3, r3, #6
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	f063 030e 	orn	r3, r3, #14
 800e684:	b2da      	uxtb	r2, r3
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	4907      	ldr	r1, [pc, #28]	; (800e6b0 <I2C_MasterRequestRead+0x198>)
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f000 f9e3 	bl	800ea5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d001      	beq.n	800e6a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e000      	b.n	800e6a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3718      	adds	r7, #24
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	00010008 	.word	0x00010008
 800e6b0:	00010002 	.word	0x00010002

0800e6b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b088      	sub	sp, #32
 800e6b8:	af02      	add	r7, sp, #8
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	4608      	mov	r0, r1
 800e6be:	4611      	mov	r1, r2
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	817b      	strh	r3, [r7, #10]
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	813b      	strh	r3, [r7, #8]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e0:	9300      	str	r3, [sp, #0]
 800e6e2:	6a3b      	ldr	r3, [r7, #32]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f000 f960 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00d      	beq.n	800e712 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e704:	d103      	bne.n	800e70e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e70c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e70e:	2303      	movs	r3, #3
 800e710:	e05f      	b.n	800e7d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e712:	897b      	ldrh	r3, [r7, #10]
 800e714:	b2db      	uxtb	r3, r3
 800e716:	461a      	mov	r2, r3
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e720:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e724:	6a3a      	ldr	r2, [r7, #32]
 800e726:	492d      	ldr	r1, [pc, #180]	; (800e7dc <I2C_RequestMemoryWrite+0x128>)
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f000 f998 	bl	800ea5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d001      	beq.n	800e738 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e734:	2301      	movs	r3, #1
 800e736:	e04c      	b.n	800e7d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e738:	2300      	movs	r3, #0
 800e73a:	617b      	str	r3, [r7, #20]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	695b      	ldr	r3, [r3, #20]
 800e742:	617b      	str	r3, [r7, #20]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	699b      	ldr	r3, [r3, #24]
 800e74a:	617b      	str	r3, [r7, #20]
 800e74c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e74e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e750:	6a39      	ldr	r1, [r7, #32]
 800e752:	68f8      	ldr	r0, [r7, #12]
 800e754:	f000 fa02 	bl	800eb5c <I2C_WaitOnTXEFlagUntilTimeout>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d00d      	beq.n	800e77a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e762:	2b04      	cmp	r3, #4
 800e764:	d107      	bne.n	800e776 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e774:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e776:	2301      	movs	r3, #1
 800e778:	e02b      	b.n	800e7d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e77a:	88fb      	ldrh	r3, [r7, #6]
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d105      	bne.n	800e78c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e780:	893b      	ldrh	r3, [r7, #8]
 800e782:	b2da      	uxtb	r2, r3
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	611a      	str	r2, [r3, #16]
 800e78a:	e021      	b.n	800e7d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e78c:	893b      	ldrh	r3, [r7, #8]
 800e78e:	0a1b      	lsrs	r3, r3, #8
 800e790:	b29b      	uxth	r3, r3
 800e792:	b2da      	uxtb	r2, r3
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e79a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e79c:	6a39      	ldr	r1, [r7, #32]
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f000 f9dc 	bl	800eb5c <I2C_WaitOnTXEFlagUntilTimeout>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00d      	beq.n	800e7c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ae:	2b04      	cmp	r3, #4
 800e7b0:	d107      	bne.n	800e7c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e005      	b.n	800e7d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e7c6:	893b      	ldrh	r3, [r7, #8]
 800e7c8:	b2da      	uxtb	r2, r3
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e7d0:	2300      	movs	r3, #0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3718      	adds	r7, #24
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	00010002 	.word	0x00010002

0800e7e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b088      	sub	sp, #32
 800e7e4:	af02      	add	r7, sp, #8
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	4608      	mov	r0, r1
 800e7ea:	4611      	mov	r1, r2
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	817b      	strh	r3, [r7, #10]
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	813b      	strh	r3, [r7, #8]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e808:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e818:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	6a3b      	ldr	r3, [r7, #32]
 800e820:	2200      	movs	r2, #0
 800e822:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f000 f8c2 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00d      	beq.n	800e84e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e83c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e840:	d103      	bne.n	800e84a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e848:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e84a:	2303      	movs	r3, #3
 800e84c:	e0aa      	b.n	800e9a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e84e:	897b      	ldrh	r3, [r7, #10]
 800e850:	b2db      	uxtb	r3, r3
 800e852:	461a      	mov	r2, r3
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e85c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e860:	6a3a      	ldr	r2, [r7, #32]
 800e862:	4952      	ldr	r1, [pc, #328]	; (800e9ac <I2C_RequestMemoryRead+0x1cc>)
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f000 f8fa 	bl	800ea5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d001      	beq.n	800e874 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	e097      	b.n	800e9a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e874:	2300      	movs	r3, #0
 800e876:	617b      	str	r3, [r7, #20]
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	695b      	ldr	r3, [r3, #20]
 800e87e:	617b      	str	r3, [r7, #20]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	699b      	ldr	r3, [r3, #24]
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e88a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e88c:	6a39      	ldr	r1, [r7, #32]
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	f000 f964 	bl	800eb5c <I2C_WaitOnTXEFlagUntilTimeout>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00d      	beq.n	800e8b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89e:	2b04      	cmp	r3, #4
 800e8a0:	d107      	bne.n	800e8b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e076      	b.n	800e9a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e8b6:	88fb      	ldrh	r3, [r7, #6]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d105      	bne.n	800e8c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e8bc:	893b      	ldrh	r3, [r7, #8]
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	611a      	str	r2, [r3, #16]
 800e8c6:	e021      	b.n	800e90c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e8c8:	893b      	ldrh	r3, [r7, #8]
 800e8ca:	0a1b      	lsrs	r3, r3, #8
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	b2da      	uxtb	r2, r3
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e8d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8d8:	6a39      	ldr	r1, [r7, #32]
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f000 f93e 	bl	800eb5c <I2C_WaitOnTXEFlagUntilTimeout>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00d      	beq.n	800e902 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ea:	2b04      	cmp	r3, #4
 800e8ec:	d107      	bne.n	800e8fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	681a      	ldr	r2, [r3, #0]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e8fe:	2301      	movs	r3, #1
 800e900:	e050      	b.n	800e9a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e902:	893b      	ldrh	r3, [r7, #8]
 800e904:	b2da      	uxtb	r2, r3
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e90e:	6a39      	ldr	r1, [r7, #32]
 800e910:	68f8      	ldr	r0, [r7, #12]
 800e912:	f000 f923 	bl	800eb5c <I2C_WaitOnTXEFlagUntilTimeout>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00d      	beq.n	800e938 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e920:	2b04      	cmp	r3, #4
 800e922:	d107      	bne.n	800e934 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e932:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e934:	2301      	movs	r3, #1
 800e936:	e035      	b.n	800e9a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e946:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	6a3b      	ldr	r3, [r7, #32]
 800e94e:	2200      	movs	r2, #0
 800e950:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f000 f82b 	bl	800e9b0 <I2C_WaitOnFlagUntilTimeout>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d00d      	beq.n	800e97c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e96a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e96e:	d103      	bne.n	800e978 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e976:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e978:	2303      	movs	r3, #3
 800e97a:	e013      	b.n	800e9a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e97c:	897b      	ldrh	r3, [r7, #10]
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	f043 0301 	orr.w	r3, r3, #1
 800e984:	b2da      	uxtb	r2, r3
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98e:	6a3a      	ldr	r2, [r7, #32]
 800e990:	4906      	ldr	r1, [pc, #24]	; (800e9ac <I2C_RequestMemoryRead+0x1cc>)
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	f000 f863 	bl	800ea5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d001      	beq.n	800e9a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	e000      	b.n	800e9a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e9a2:	2300      	movs	r3, #0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3718      	adds	r7, #24
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	00010002 	.word	0x00010002

0800e9b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	603b      	str	r3, [r7, #0]
 800e9bc:	4613      	mov	r3, r2
 800e9be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e9c0:	e025      	b.n	800ea0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c8:	d021      	beq.n	800ea0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9ca:	f7fd fecb 	bl	800c764 <HAL_GetTick>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	1ad3      	subs	r3, r2, r3
 800e9d4:	683a      	ldr	r2, [r7, #0]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d302      	bcc.n	800e9e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d116      	bne.n	800ea0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2220      	movs	r2, #32
 800e9ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9fa:	f043 0220 	orr.w	r2, r3, #32
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e023      	b.n	800ea56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	0c1b      	lsrs	r3, r3, #16
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d10d      	bne.n	800ea34 <I2C_WaitOnFlagUntilTimeout+0x84>
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	695b      	ldr	r3, [r3, #20]
 800ea1e:	43da      	mvns	r2, r3
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	4013      	ands	r3, r2
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	bf0c      	ite	eq
 800ea2a:	2301      	moveq	r3, #1
 800ea2c:	2300      	movne	r3, #0
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	461a      	mov	r2, r3
 800ea32:	e00c      	b.n	800ea4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	699b      	ldr	r3, [r3, #24]
 800ea3a:	43da      	mvns	r2, r3
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	4013      	ands	r3, r2
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	bf0c      	ite	eq
 800ea46:	2301      	moveq	r3, #1
 800ea48:	2300      	movne	r3, #0
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	79fb      	ldrb	r3, [r7, #7]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d0b6      	beq.n	800e9c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ea54:	2300      	movs	r3, #0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b084      	sub	sp, #16
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	60f8      	str	r0, [r7, #12]
 800ea66:	60b9      	str	r1, [r7, #8]
 800ea68:	607a      	str	r2, [r7, #4]
 800ea6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ea6c:	e051      	b.n	800eb12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	695b      	ldr	r3, [r3, #20]
 800ea74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ea78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea7c:	d123      	bne.n	800eac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ea96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2220      	movs	r2, #32
 800eaa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eab2:	f043 0204 	orr.w	r2, r3, #4
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800eac2:	2301      	movs	r3, #1
 800eac4:	e046      	b.n	800eb54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eacc:	d021      	beq.n	800eb12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eace:	f7fd fe49 	bl	800c764 <HAL_GetTick>
 800ead2:	4602      	mov	r2, r0
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d302      	bcc.n	800eae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d116      	bne.n	800eb12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2200      	movs	r2, #0
 800eae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2220      	movs	r2, #32
 800eaee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafe:	f043 0220 	orr.w	r2, r3, #32
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800eb0e:	2301      	movs	r3, #1
 800eb10:	e020      	b.n	800eb54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	0c1b      	lsrs	r3, r3, #16
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d10c      	bne.n	800eb36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	695b      	ldr	r3, [r3, #20]
 800eb22:	43da      	mvns	r2, r3
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	4013      	ands	r3, r2
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	bf14      	ite	ne
 800eb2e:	2301      	movne	r3, #1
 800eb30:	2300      	moveq	r3, #0
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	e00b      	b.n	800eb4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	699b      	ldr	r3, [r3, #24]
 800eb3c:	43da      	mvns	r2, r3
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	4013      	ands	r3, r2
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	bf14      	ite	ne
 800eb48:	2301      	movne	r3, #1
 800eb4a:	2300      	moveq	r3, #0
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d18d      	bne.n	800ea6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3710      	adds	r7, #16
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eb68:	e02d      	b.n	800ebc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	f000 f8ce 	bl	800ed0c <I2C_IsAcknowledgeFailed>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800eb76:	2301      	movs	r3, #1
 800eb78:	e02d      	b.n	800ebd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb80:	d021      	beq.n	800ebc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb82:	f7fd fdef 	bl	800c764 <HAL_GetTick>
 800eb86:	4602      	mov	r2, r0
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	1ad3      	subs	r3, r2, r3
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d302      	bcc.n	800eb98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d116      	bne.n	800ebc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2220      	movs	r2, #32
 800eba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb2:	f043 0220 	orr.w	r2, r3, #32
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e007      	b.n	800ebd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	695b      	ldr	r3, [r3, #20]
 800ebcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebd0:	2b80      	cmp	r3, #128	; 0x80
 800ebd2:	d1ca      	bne.n	800eb6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3710      	adds	r7, #16
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b084      	sub	sp, #16
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	60f8      	str	r0, [r7, #12]
 800ebe6:	60b9      	str	r1, [r7, #8]
 800ebe8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ebea:	e02d      	b.n	800ec48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f000 f88d 	bl	800ed0c <I2C_IsAcknowledgeFailed>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d001      	beq.n	800ebfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	e02d      	b.n	800ec58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec02:	d021      	beq.n	800ec48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec04:	f7fd fdae 	bl	800c764 <HAL_GetTick>
 800ec08:	4602      	mov	r2, r0
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	1ad3      	subs	r3, r2, r3
 800ec0e:	68ba      	ldr	r2, [r7, #8]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d302      	bcc.n	800ec1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d116      	bne.n	800ec48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2220      	movs	r2, #32
 800ec24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec34:	f043 0220 	orr.w	r2, r3, #32
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ec44:	2301      	movs	r3, #1
 800ec46:	e007      	b.n	800ec58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	695b      	ldr	r3, [r3, #20]
 800ec4e:	f003 0304 	and.w	r3, r3, #4
 800ec52:	2b04      	cmp	r3, #4
 800ec54:	d1ca      	bne.n	800ebec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ec56:	2300      	movs	r3, #0
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ec6c:	e042      	b.n	800ecf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	695b      	ldr	r3, [r3, #20]
 800ec74:	f003 0310 	and.w	r3, r3, #16
 800ec78:	2b10      	cmp	r3, #16
 800ec7a:	d119      	bne.n	800ecb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f06f 0210 	mvn.w	r2, #16
 800ec84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2220      	movs	r2, #32
 800ec90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2200      	movs	r2, #0
 800ec98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2200      	movs	r2, #0
 800eca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ecac:	2301      	movs	r3, #1
 800ecae:	e029      	b.n	800ed04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecb0:	f7fd fd58 	bl	800c764 <HAL_GetTick>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	1ad3      	subs	r3, r2, r3
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d302      	bcc.n	800ecc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d116      	bne.n	800ecf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2220      	movs	r2, #32
 800ecd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece0:	f043 0220 	orr.w	r2, r3, #32
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2200      	movs	r2, #0
 800ecec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	e007      	b.n	800ed04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	695b      	ldr	r3, [r3, #20]
 800ecfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecfe:	2b40      	cmp	r3, #64	; 0x40
 800ed00:	d1b5      	bne.n	800ec6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ed02:	2300      	movs	r3, #0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3710      	adds	r7, #16
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	695b      	ldr	r3, [r3, #20]
 800ed1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed22:	d11b      	bne.n	800ed5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ed2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2220      	movs	r2, #32
 800ed38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed48:	f043 0204 	orr.w	r2, r3, #4
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2200      	movs	r2, #0
 800ed54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e000      	b.n	800ed5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ed5c:	2300      	movs	r3, #0
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	370c      	adds	r7, #12
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bc80      	pop	{r7}
 800ed66:	4770      	bx	lr

0800ed68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d101      	bne.n	800ed7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ed76:	2301      	movs	r3, #1
 800ed78:	e26c      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f000 8087 	beq.w	800ee96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ed88:	4b92      	ldr	r3, [pc, #584]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	f003 030c 	and.w	r3, r3, #12
 800ed90:	2b04      	cmp	r3, #4
 800ed92:	d00c      	beq.n	800edae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ed94:	4b8f      	ldr	r3, [pc, #572]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	f003 030c 	and.w	r3, r3, #12
 800ed9c:	2b08      	cmp	r3, #8
 800ed9e:	d112      	bne.n	800edc6 <HAL_RCC_OscConfig+0x5e>
 800eda0:	4b8c      	ldr	r3, [pc, #560]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eda8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edac:	d10b      	bne.n	800edc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800edae:	4b89      	ldr	r3, [pc, #548]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d06c      	beq.n	800ee94 <HAL_RCC_OscConfig+0x12c>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d168      	bne.n	800ee94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e246      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edce:	d106      	bne.n	800edde <HAL_RCC_OscConfig+0x76>
 800edd0:	4b80      	ldr	r3, [pc, #512]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a7f      	ldr	r2, [pc, #508]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800edd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800edda:	6013      	str	r3, [r2, #0]
 800eddc:	e02e      	b.n	800ee3c <HAL_RCC_OscConfig+0xd4>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d10c      	bne.n	800ee00 <HAL_RCC_OscConfig+0x98>
 800ede6:	4b7b      	ldr	r3, [pc, #492]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4a7a      	ldr	r2, [pc, #488]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800edec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800edf0:	6013      	str	r3, [r2, #0]
 800edf2:	4b78      	ldr	r3, [pc, #480]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a77      	ldr	r2, [pc, #476]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800edf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800edfc:	6013      	str	r3, [r2, #0]
 800edfe:	e01d      	b.n	800ee3c <HAL_RCC_OscConfig+0xd4>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ee08:	d10c      	bne.n	800ee24 <HAL_RCC_OscConfig+0xbc>
 800ee0a:	4b72      	ldr	r3, [pc, #456]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	4a71      	ldr	r2, [pc, #452]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ee10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ee14:	6013      	str	r3, [r2, #0]
 800ee16:	4b6f      	ldr	r3, [pc, #444]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4a6e      	ldr	r2, [pc, #440]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ee1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee20:	6013      	str	r3, [r2, #0]
 800ee22:	e00b      	b.n	800ee3c <HAL_RCC_OscConfig+0xd4>
 800ee24:	4b6b      	ldr	r3, [pc, #428]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a6a      	ldr	r2, [pc, #424]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ee2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee2e:	6013      	str	r3, [r2, #0]
 800ee30:	4b68      	ldr	r3, [pc, #416]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a67      	ldr	r2, [pc, #412]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ee36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ee3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d013      	beq.n	800ee6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee44:	f7fd fc8e 	bl	800c764 <HAL_GetTick>
 800ee48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee4a:	e008      	b.n	800ee5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ee4c:	f7fd fc8a 	bl	800c764 <HAL_GetTick>
 800ee50:	4602      	mov	r2, r0
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	1ad3      	subs	r3, r2, r3
 800ee56:	2b64      	cmp	r3, #100	; 0x64
 800ee58:	d901      	bls.n	800ee5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ee5a:	2303      	movs	r3, #3
 800ee5c:	e1fa      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee5e:	4b5d      	ldr	r3, [pc, #372]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d0f0      	beq.n	800ee4c <HAL_RCC_OscConfig+0xe4>
 800ee6a:	e014      	b.n	800ee96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee6c:	f7fd fc7a 	bl	800c764 <HAL_GetTick>
 800ee70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee72:	e008      	b.n	800ee86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ee74:	f7fd fc76 	bl	800c764 <HAL_GetTick>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	1ad3      	subs	r3, r2, r3
 800ee7e:	2b64      	cmp	r3, #100	; 0x64
 800ee80:	d901      	bls.n	800ee86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ee82:	2303      	movs	r3, #3
 800ee84:	e1e6      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee86:	4b53      	ldr	r3, [pc, #332]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d1f0      	bne.n	800ee74 <HAL_RCC_OscConfig+0x10c>
 800ee92:	e000      	b.n	800ee96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f003 0302 	and.w	r3, r3, #2
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d063      	beq.n	800ef6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800eea2:	4b4c      	ldr	r3, [pc, #304]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	f003 030c 	and.w	r3, r3, #12
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00b      	beq.n	800eec6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800eeae:	4b49      	ldr	r3, [pc, #292]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	f003 030c 	and.w	r3, r3, #12
 800eeb6:	2b08      	cmp	r3, #8
 800eeb8:	d11c      	bne.n	800eef4 <HAL_RCC_OscConfig+0x18c>
 800eeba:	4b46      	ldr	r3, [pc, #280]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d116      	bne.n	800eef4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eec6:	4b43      	ldr	r3, [pc, #268]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f003 0302 	and.w	r3, r3, #2
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d005      	beq.n	800eede <HAL_RCC_OscConfig+0x176>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d001      	beq.n	800eede <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800eeda:	2301      	movs	r3, #1
 800eedc:	e1ba      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eede:	4b3d      	ldr	r3, [pc, #244]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	695b      	ldr	r3, [r3, #20]
 800eeea:	00db      	lsls	r3, r3, #3
 800eeec:	4939      	ldr	r1, [pc, #228]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800eeee:	4313      	orrs	r3, r2
 800eef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eef2:	e03a      	b.n	800ef6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	691b      	ldr	r3, [r3, #16]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d020      	beq.n	800ef3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eefc:	4b36      	ldr	r3, [pc, #216]	; (800efd8 <HAL_RCC_OscConfig+0x270>)
 800eefe:	2201      	movs	r2, #1
 800ef00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef02:	f7fd fc2f 	bl	800c764 <HAL_GetTick>
 800ef06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef08:	e008      	b.n	800ef1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ef0a:	f7fd fc2b 	bl	800c764 <HAL_GetTick>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	1ad3      	subs	r3, r2, r3
 800ef14:	2b02      	cmp	r3, #2
 800ef16:	d901      	bls.n	800ef1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ef18:	2303      	movs	r3, #3
 800ef1a:	e19b      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef1c:	4b2d      	ldr	r3, [pc, #180]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f003 0302 	and.w	r3, r3, #2
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d0f0      	beq.n	800ef0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef28:	4b2a      	ldr	r3, [pc, #168]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	695b      	ldr	r3, [r3, #20]
 800ef34:	00db      	lsls	r3, r3, #3
 800ef36:	4927      	ldr	r1, [pc, #156]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	600b      	str	r3, [r1, #0]
 800ef3c:	e015      	b.n	800ef6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ef3e:	4b26      	ldr	r3, [pc, #152]	; (800efd8 <HAL_RCC_OscConfig+0x270>)
 800ef40:	2200      	movs	r2, #0
 800ef42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef44:	f7fd fc0e 	bl	800c764 <HAL_GetTick>
 800ef48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef4a:	e008      	b.n	800ef5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ef4c:	f7fd fc0a 	bl	800c764 <HAL_GetTick>
 800ef50:	4602      	mov	r2, r0
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	2b02      	cmp	r3, #2
 800ef58:	d901      	bls.n	800ef5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ef5a:	2303      	movs	r3, #3
 800ef5c:	e17a      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef5e:	4b1d      	ldr	r3, [pc, #116]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f003 0302 	and.w	r3, r3, #2
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1f0      	bne.n	800ef4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f003 0308 	and.w	r3, r3, #8
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d03a      	beq.n	800efec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	699b      	ldr	r3, [r3, #24]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d019      	beq.n	800efb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ef7e:	4b17      	ldr	r3, [pc, #92]	; (800efdc <HAL_RCC_OscConfig+0x274>)
 800ef80:	2201      	movs	r2, #1
 800ef82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef84:	f7fd fbee 	bl	800c764 <HAL_GetTick>
 800ef88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ef8a:	e008      	b.n	800ef9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ef8c:	f7fd fbea 	bl	800c764 <HAL_GetTick>
 800ef90:	4602      	mov	r2, r0
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	1ad3      	subs	r3, r2, r3
 800ef96:	2b02      	cmp	r3, #2
 800ef98:	d901      	bls.n	800ef9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ef9a:	2303      	movs	r3, #3
 800ef9c:	e15a      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ef9e:	4b0d      	ldr	r3, [pc, #52]	; (800efd4 <HAL_RCC_OscConfig+0x26c>)
 800efa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa2:	f003 0302 	and.w	r3, r3, #2
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d0f0      	beq.n	800ef8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800efaa:	2001      	movs	r0, #1
 800efac:	f000 fada 	bl	800f564 <RCC_Delay>
 800efb0:	e01c      	b.n	800efec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800efb2:	4b0a      	ldr	r3, [pc, #40]	; (800efdc <HAL_RCC_OscConfig+0x274>)
 800efb4:	2200      	movs	r2, #0
 800efb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800efb8:	f7fd fbd4 	bl	800c764 <HAL_GetTick>
 800efbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800efbe:	e00f      	b.n	800efe0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800efc0:	f7fd fbd0 	bl	800c764 <HAL_GetTick>
 800efc4:	4602      	mov	r2, r0
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	2b02      	cmp	r3, #2
 800efcc:	d908      	bls.n	800efe0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800efce:	2303      	movs	r3, #3
 800efd0:	e140      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
 800efd2:	bf00      	nop
 800efd4:	40021000 	.word	0x40021000
 800efd8:	42420000 	.word	0x42420000
 800efdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800efe0:	4b9e      	ldr	r3, [pc, #632]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800efe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe4:	f003 0302 	and.w	r3, r3, #2
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d1e9      	bne.n	800efc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f003 0304 	and.w	r3, r3, #4
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	f000 80a6 	beq.w	800f146 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800effa:	2300      	movs	r3, #0
 800effc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800effe:	4b97      	ldr	r3, [pc, #604]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f000:	69db      	ldr	r3, [r3, #28]
 800f002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f006:	2b00      	cmp	r3, #0
 800f008:	d10d      	bne.n	800f026 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f00a:	4b94      	ldr	r3, [pc, #592]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f00c:	69db      	ldr	r3, [r3, #28]
 800f00e:	4a93      	ldr	r2, [pc, #588]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f014:	61d3      	str	r3, [r2, #28]
 800f016:	4b91      	ldr	r3, [pc, #580]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f018:	69db      	ldr	r3, [r3, #28]
 800f01a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f01e:	60bb      	str	r3, [r7, #8]
 800f020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f022:	2301      	movs	r3, #1
 800f024:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f026:	4b8e      	ldr	r3, [pc, #568]	; (800f260 <HAL_RCC_OscConfig+0x4f8>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d118      	bne.n	800f064 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f032:	4b8b      	ldr	r3, [pc, #556]	; (800f260 <HAL_RCC_OscConfig+0x4f8>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4a8a      	ldr	r2, [pc, #552]	; (800f260 <HAL_RCC_OscConfig+0x4f8>)
 800f038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f03c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f03e:	f7fd fb91 	bl	800c764 <HAL_GetTick>
 800f042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f044:	e008      	b.n	800f058 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f046:	f7fd fb8d 	bl	800c764 <HAL_GetTick>
 800f04a:	4602      	mov	r2, r0
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	1ad3      	subs	r3, r2, r3
 800f050:	2b64      	cmp	r3, #100	; 0x64
 800f052:	d901      	bls.n	800f058 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800f054:	2303      	movs	r3, #3
 800f056:	e0fd      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f058:	4b81      	ldr	r3, [pc, #516]	; (800f260 <HAL_RCC_OscConfig+0x4f8>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f060:	2b00      	cmp	r3, #0
 800f062:	d0f0      	beq.n	800f046 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d106      	bne.n	800f07a <HAL_RCC_OscConfig+0x312>
 800f06c:	4b7b      	ldr	r3, [pc, #492]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f06e:	6a1b      	ldr	r3, [r3, #32]
 800f070:	4a7a      	ldr	r2, [pc, #488]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f072:	f043 0301 	orr.w	r3, r3, #1
 800f076:	6213      	str	r3, [r2, #32]
 800f078:	e02d      	b.n	800f0d6 <HAL_RCC_OscConfig+0x36e>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d10c      	bne.n	800f09c <HAL_RCC_OscConfig+0x334>
 800f082:	4b76      	ldr	r3, [pc, #472]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f084:	6a1b      	ldr	r3, [r3, #32]
 800f086:	4a75      	ldr	r2, [pc, #468]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f088:	f023 0301 	bic.w	r3, r3, #1
 800f08c:	6213      	str	r3, [r2, #32]
 800f08e:	4b73      	ldr	r3, [pc, #460]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f090:	6a1b      	ldr	r3, [r3, #32]
 800f092:	4a72      	ldr	r2, [pc, #456]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f094:	f023 0304 	bic.w	r3, r3, #4
 800f098:	6213      	str	r3, [r2, #32]
 800f09a:	e01c      	b.n	800f0d6 <HAL_RCC_OscConfig+0x36e>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	2b05      	cmp	r3, #5
 800f0a2:	d10c      	bne.n	800f0be <HAL_RCC_OscConfig+0x356>
 800f0a4:	4b6d      	ldr	r3, [pc, #436]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f0a6:	6a1b      	ldr	r3, [r3, #32]
 800f0a8:	4a6c      	ldr	r2, [pc, #432]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f0aa:	f043 0304 	orr.w	r3, r3, #4
 800f0ae:	6213      	str	r3, [r2, #32]
 800f0b0:	4b6a      	ldr	r3, [pc, #424]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f0b2:	6a1b      	ldr	r3, [r3, #32]
 800f0b4:	4a69      	ldr	r2, [pc, #420]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f0b6:	f043 0301 	orr.w	r3, r3, #1
 800f0ba:	6213      	str	r3, [r2, #32]
 800f0bc:	e00b      	b.n	800f0d6 <HAL_RCC_OscConfig+0x36e>
 800f0be:	4b67      	ldr	r3, [pc, #412]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f0c0:	6a1b      	ldr	r3, [r3, #32]
 800f0c2:	4a66      	ldr	r2, [pc, #408]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f0c4:	f023 0301 	bic.w	r3, r3, #1
 800f0c8:	6213      	str	r3, [r2, #32]
 800f0ca:	4b64      	ldr	r3, [pc, #400]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f0cc:	6a1b      	ldr	r3, [r3, #32]
 800f0ce:	4a63      	ldr	r2, [pc, #396]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f0d0:	f023 0304 	bic.w	r3, r3, #4
 800f0d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d015      	beq.n	800f10a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f0de:	f7fd fb41 	bl	800c764 <HAL_GetTick>
 800f0e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f0e4:	e00a      	b.n	800f0fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f0e6:	f7fd fb3d 	bl	800c764 <HAL_GetTick>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d901      	bls.n	800f0fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800f0f8:	2303      	movs	r3, #3
 800f0fa:	e0ab      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f0fc:	4b57      	ldr	r3, [pc, #348]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f0fe:	6a1b      	ldr	r3, [r3, #32]
 800f100:	f003 0302 	and.w	r3, r3, #2
 800f104:	2b00      	cmp	r3, #0
 800f106:	d0ee      	beq.n	800f0e6 <HAL_RCC_OscConfig+0x37e>
 800f108:	e014      	b.n	800f134 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f10a:	f7fd fb2b 	bl	800c764 <HAL_GetTick>
 800f10e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f110:	e00a      	b.n	800f128 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f112:	f7fd fb27 	bl	800c764 <HAL_GetTick>
 800f116:	4602      	mov	r2, r0
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	1ad3      	subs	r3, r2, r3
 800f11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f120:	4293      	cmp	r3, r2
 800f122:	d901      	bls.n	800f128 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800f124:	2303      	movs	r3, #3
 800f126:	e095      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f128:	4b4c      	ldr	r3, [pc, #304]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f12a:	6a1b      	ldr	r3, [r3, #32]
 800f12c:	f003 0302 	and.w	r3, r3, #2
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1ee      	bne.n	800f112 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800f134:	7dfb      	ldrb	r3, [r7, #23]
 800f136:	2b01      	cmp	r3, #1
 800f138:	d105      	bne.n	800f146 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f13a:	4b48      	ldr	r3, [pc, #288]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f13c:	69db      	ldr	r3, [r3, #28]
 800f13e:	4a47      	ldr	r2, [pc, #284]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f144:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	69db      	ldr	r3, [r3, #28]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f000 8081 	beq.w	800f252 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f150:	4b42      	ldr	r3, [pc, #264]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	f003 030c 	and.w	r3, r3, #12
 800f158:	2b08      	cmp	r3, #8
 800f15a:	d061      	beq.n	800f220 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	69db      	ldr	r3, [r3, #28]
 800f160:	2b02      	cmp	r3, #2
 800f162:	d146      	bne.n	800f1f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f164:	4b3f      	ldr	r3, [pc, #252]	; (800f264 <HAL_RCC_OscConfig+0x4fc>)
 800f166:	2200      	movs	r2, #0
 800f168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f16a:	f7fd fafb 	bl	800c764 <HAL_GetTick>
 800f16e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f170:	e008      	b.n	800f184 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f172:	f7fd faf7 	bl	800c764 <HAL_GetTick>
 800f176:	4602      	mov	r2, r0
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	1ad3      	subs	r3, r2, r3
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	d901      	bls.n	800f184 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800f180:	2303      	movs	r3, #3
 800f182:	e067      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f184:	4b35      	ldr	r3, [pc, #212]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1f0      	bne.n	800f172 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6a1b      	ldr	r3, [r3, #32]
 800f194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f198:	d108      	bne.n	800f1ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800f19a:	4b30      	ldr	r3, [pc, #192]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	492d      	ldr	r1, [pc, #180]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f1ac:	4b2b      	ldr	r3, [pc, #172]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6a19      	ldr	r1, [r3, #32]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1bc:	430b      	orrs	r3, r1
 800f1be:	4927      	ldr	r1, [pc, #156]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f1c4:	4b27      	ldr	r3, [pc, #156]	; (800f264 <HAL_RCC_OscConfig+0x4fc>)
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f1ca:	f7fd facb 	bl	800c764 <HAL_GetTick>
 800f1ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800f1d0:	e008      	b.n	800f1e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f1d2:	f7fd fac7 	bl	800c764 <HAL_GetTick>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	2b02      	cmp	r3, #2
 800f1de:	d901      	bls.n	800f1e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800f1e0:	2303      	movs	r3, #3
 800f1e2:	e037      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800f1e4:	4b1d      	ldr	r3, [pc, #116]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d0f0      	beq.n	800f1d2 <HAL_RCC_OscConfig+0x46a>
 800f1f0:	e02f      	b.n	800f252 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f1f2:	4b1c      	ldr	r3, [pc, #112]	; (800f264 <HAL_RCC_OscConfig+0x4fc>)
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f1f8:	f7fd fab4 	bl	800c764 <HAL_GetTick>
 800f1fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f1fe:	e008      	b.n	800f212 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f200:	f7fd fab0 	bl	800c764 <HAL_GetTick>
 800f204:	4602      	mov	r2, r0
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	1ad3      	subs	r3, r2, r3
 800f20a:	2b02      	cmp	r3, #2
 800f20c:	d901      	bls.n	800f212 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800f20e:	2303      	movs	r3, #3
 800f210:	e020      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f212:	4b12      	ldr	r3, [pc, #72]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d1f0      	bne.n	800f200 <HAL_RCC_OscConfig+0x498>
 800f21e:	e018      	b.n	800f252 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	69db      	ldr	r3, [r3, #28]
 800f224:	2b01      	cmp	r3, #1
 800f226:	d101      	bne.n	800f22c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800f228:	2301      	movs	r3, #1
 800f22a:	e013      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800f22c:	4b0b      	ldr	r3, [pc, #44]	; (800f25c <HAL_RCC_OscConfig+0x4f4>)
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6a1b      	ldr	r3, [r3, #32]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d106      	bne.n	800f24e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d001      	beq.n	800f252 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800f24e:	2301      	movs	r3, #1
 800f250:	e000      	b.n	800f254 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800f252:	2300      	movs	r3, #0
}
 800f254:	4618      	mov	r0, r3
 800f256:	3718      	adds	r7, #24
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	40021000 	.word	0x40021000
 800f260:	40007000 	.word	0x40007000
 800f264:	42420060 	.word	0x42420060

0800f268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d101      	bne.n	800f27c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f278:	2301      	movs	r3, #1
 800f27a:	e0d0      	b.n	800f41e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f27c:	4b6a      	ldr	r3, [pc, #424]	; (800f428 <HAL_RCC_ClockConfig+0x1c0>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f003 0307 	and.w	r3, r3, #7
 800f284:	683a      	ldr	r2, [r7, #0]
 800f286:	429a      	cmp	r2, r3
 800f288:	d910      	bls.n	800f2ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f28a:	4b67      	ldr	r3, [pc, #412]	; (800f428 <HAL_RCC_ClockConfig+0x1c0>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f023 0207 	bic.w	r2, r3, #7
 800f292:	4965      	ldr	r1, [pc, #404]	; (800f428 <HAL_RCC_ClockConfig+0x1c0>)
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	4313      	orrs	r3, r2
 800f298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f29a:	4b63      	ldr	r3, [pc, #396]	; (800f428 <HAL_RCC_ClockConfig+0x1c0>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f003 0307 	and.w	r3, r3, #7
 800f2a2:	683a      	ldr	r2, [r7, #0]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d001      	beq.n	800f2ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	e0b8      	b.n	800f41e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f003 0302 	and.w	r3, r3, #2
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d020      	beq.n	800f2fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f003 0304 	and.w	r3, r3, #4
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d005      	beq.n	800f2d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f2c4:	4b59      	ldr	r3, [pc, #356]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	4a58      	ldr	r2, [pc, #352]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f2ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800f2ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f003 0308 	and.w	r3, r3, #8
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d005      	beq.n	800f2e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f2dc:	4b53      	ldr	r3, [pc, #332]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	4a52      	ldr	r2, [pc, #328]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f2e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800f2e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f2e8:	4b50      	ldr	r3, [pc, #320]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	494d      	ldr	r1, [pc, #308]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f003 0301 	and.w	r3, r3, #1
 800f302:	2b00      	cmp	r3, #0
 800f304:	d040      	beq.n	800f388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d107      	bne.n	800f31e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f30e:	4b47      	ldr	r3, [pc, #284]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f316:	2b00      	cmp	r3, #0
 800f318:	d115      	bne.n	800f346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f31a:	2301      	movs	r3, #1
 800f31c:	e07f      	b.n	800f41e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	2b02      	cmp	r3, #2
 800f324:	d107      	bne.n	800f336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f326:	4b41      	ldr	r3, [pc, #260]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d109      	bne.n	800f346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f332:	2301      	movs	r3, #1
 800f334:	e073      	b.n	800f41e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f336:	4b3d      	ldr	r3, [pc, #244]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f003 0302 	and.w	r3, r3, #2
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d101      	bne.n	800f346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f342:	2301      	movs	r3, #1
 800f344:	e06b      	b.n	800f41e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f346:	4b39      	ldr	r3, [pc, #228]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	f023 0203 	bic.w	r2, r3, #3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	4936      	ldr	r1, [pc, #216]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f354:	4313      	orrs	r3, r2
 800f356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f358:	f7fd fa04 	bl	800c764 <HAL_GetTick>
 800f35c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f35e:	e00a      	b.n	800f376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f360:	f7fd fa00 	bl	800c764 <HAL_GetTick>
 800f364:	4602      	mov	r2, r0
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	1ad3      	subs	r3, r2, r3
 800f36a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f36e:	4293      	cmp	r3, r2
 800f370:	d901      	bls.n	800f376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f372:	2303      	movs	r3, #3
 800f374:	e053      	b.n	800f41e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f376:	4b2d      	ldr	r3, [pc, #180]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	f003 020c 	and.w	r2, r3, #12
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	429a      	cmp	r2, r3
 800f386:	d1eb      	bne.n	800f360 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f388:	4b27      	ldr	r3, [pc, #156]	; (800f428 <HAL_RCC_ClockConfig+0x1c0>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	f003 0307 	and.w	r3, r3, #7
 800f390:	683a      	ldr	r2, [r7, #0]
 800f392:	429a      	cmp	r2, r3
 800f394:	d210      	bcs.n	800f3b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f396:	4b24      	ldr	r3, [pc, #144]	; (800f428 <HAL_RCC_ClockConfig+0x1c0>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f023 0207 	bic.w	r2, r3, #7
 800f39e:	4922      	ldr	r1, [pc, #136]	; (800f428 <HAL_RCC_ClockConfig+0x1c0>)
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	4313      	orrs	r3, r2
 800f3a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3a6:	4b20      	ldr	r3, [pc, #128]	; (800f428 <HAL_RCC_ClockConfig+0x1c0>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f003 0307 	and.w	r3, r3, #7
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d001      	beq.n	800f3b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e032      	b.n	800f41e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f003 0304 	and.w	r3, r3, #4
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d008      	beq.n	800f3d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f3c4:	4b19      	ldr	r3, [pc, #100]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	4916      	ldr	r1, [pc, #88]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f003 0308 	and.w	r3, r3, #8
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d009      	beq.n	800f3f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f3e2:	4b12      	ldr	r3, [pc, #72]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	691b      	ldr	r3, [r3, #16]
 800f3ee:	00db      	lsls	r3, r3, #3
 800f3f0:	490e      	ldr	r1, [pc, #56]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f3f6:	f000 f821 	bl	800f43c <HAL_RCC_GetSysClockFreq>
 800f3fa:	4601      	mov	r1, r0
 800f3fc:	4b0b      	ldr	r3, [pc, #44]	; (800f42c <HAL_RCC_ClockConfig+0x1c4>)
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	091b      	lsrs	r3, r3, #4
 800f402:	f003 030f 	and.w	r3, r3, #15
 800f406:	4a0a      	ldr	r2, [pc, #40]	; (800f430 <HAL_RCC_ClockConfig+0x1c8>)
 800f408:	5cd3      	ldrb	r3, [r2, r3]
 800f40a:	fa21 f303 	lsr.w	r3, r1, r3
 800f40e:	4a09      	ldr	r2, [pc, #36]	; (800f434 <HAL_RCC_ClockConfig+0x1cc>)
 800f410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800f412:	4b09      	ldr	r3, [pc, #36]	; (800f438 <HAL_RCC_ClockConfig+0x1d0>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	4618      	mov	r0, r3
 800f418:	f7fd f962 	bl	800c6e0 <HAL_InitTick>

  return HAL_OK;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3710      	adds	r7, #16
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	40022000 	.word	0x40022000
 800f42c:	40021000 	.word	0x40021000
 800f430:	08019f5c 	.word	0x08019f5c
 800f434:	20000004 	.word	0x20000004
 800f438:	20000058 	.word	0x20000058

0800f43c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f43c:	b490      	push	{r4, r7}
 800f43e:	b08a      	sub	sp, #40	; 0x28
 800f440:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800f442:	4b2a      	ldr	r3, [pc, #168]	; (800f4ec <HAL_RCC_GetSysClockFreq+0xb0>)
 800f444:	1d3c      	adds	r4, r7, #4
 800f446:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800f44c:	4b28      	ldr	r3, [pc, #160]	; (800f4f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800f44e:	881b      	ldrh	r3, [r3, #0]
 800f450:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800f452:	2300      	movs	r3, #0
 800f454:	61fb      	str	r3, [r7, #28]
 800f456:	2300      	movs	r3, #0
 800f458:	61bb      	str	r3, [r7, #24]
 800f45a:	2300      	movs	r3, #0
 800f45c:	627b      	str	r3, [r7, #36]	; 0x24
 800f45e:	2300      	movs	r3, #0
 800f460:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800f462:	2300      	movs	r3, #0
 800f464:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800f466:	4b23      	ldr	r3, [pc, #140]	; (800f4f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	f003 030c 	and.w	r3, r3, #12
 800f472:	2b04      	cmp	r3, #4
 800f474:	d002      	beq.n	800f47c <HAL_RCC_GetSysClockFreq+0x40>
 800f476:	2b08      	cmp	r3, #8
 800f478:	d003      	beq.n	800f482 <HAL_RCC_GetSysClockFreq+0x46>
 800f47a:	e02d      	b.n	800f4d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f47c:	4b1e      	ldr	r3, [pc, #120]	; (800f4f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800f47e:	623b      	str	r3, [r7, #32]
      break;
 800f480:	e02d      	b.n	800f4de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	0c9b      	lsrs	r3, r3, #18
 800f486:	f003 030f 	and.w	r3, r3, #15
 800f48a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f48e:	4413      	add	r3, r2
 800f490:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800f494:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d013      	beq.n	800f4c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800f4a0:	4b14      	ldr	r3, [pc, #80]	; (800f4f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	0c5b      	lsrs	r3, r3, #17
 800f4a6:	f003 0301 	and.w	r3, r3, #1
 800f4aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f4ae:	4413      	add	r3, r2
 800f4b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800f4b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	4a0f      	ldr	r2, [pc, #60]	; (800f4f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800f4ba:	fb02 f203 	mul.w	r2, r2, r3
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4c4:	627b      	str	r3, [r7, #36]	; 0x24
 800f4c6:	e004      	b.n	800f4d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	4a0c      	ldr	r2, [pc, #48]	; (800f4fc <HAL_RCC_GetSysClockFreq+0xc0>)
 800f4cc:	fb02 f303 	mul.w	r3, r2, r3
 800f4d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d4:	623b      	str	r3, [r7, #32]
      break;
 800f4d6:	e002      	b.n	800f4de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800f4d8:	4b07      	ldr	r3, [pc, #28]	; (800f4f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800f4da:	623b      	str	r3, [r7, #32]
      break;
 800f4dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f4de:	6a3b      	ldr	r3, [r7, #32]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3728      	adds	r7, #40	; 0x28
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bc90      	pop	{r4, r7}
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	08019f48 	.word	0x08019f48
 800f4f0:	08019f58 	.word	0x08019f58
 800f4f4:	40021000 	.word	0x40021000
 800f4f8:	007a1200 	.word	0x007a1200
 800f4fc:	003d0900 	.word	0x003d0900

0800f500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f500:	b480      	push	{r7}
 800f502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f504:	4b02      	ldr	r3, [pc, #8]	; (800f510 <HAL_RCC_GetHCLKFreq+0x10>)
 800f506:	681b      	ldr	r3, [r3, #0]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bc80      	pop	{r7}
 800f50e:	4770      	bx	lr
 800f510:	20000004 	.word	0x20000004

0800f514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f518:	f7ff fff2 	bl	800f500 <HAL_RCC_GetHCLKFreq>
 800f51c:	4601      	mov	r1, r0
 800f51e:	4b05      	ldr	r3, [pc, #20]	; (800f534 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	0a1b      	lsrs	r3, r3, #8
 800f524:	f003 0307 	and.w	r3, r3, #7
 800f528:	4a03      	ldr	r2, [pc, #12]	; (800f538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f52a:	5cd3      	ldrb	r3, [r2, r3]
 800f52c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f530:	4618      	mov	r0, r3
 800f532:	bd80      	pop	{r7, pc}
 800f534:	40021000 	.word	0x40021000
 800f538:	08019f6c 	.word	0x08019f6c

0800f53c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f540:	f7ff ffde 	bl	800f500 <HAL_RCC_GetHCLKFreq>
 800f544:	4601      	mov	r1, r0
 800f546:	4b05      	ldr	r3, [pc, #20]	; (800f55c <HAL_RCC_GetPCLK2Freq+0x20>)
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	0adb      	lsrs	r3, r3, #11
 800f54c:	f003 0307 	and.w	r3, r3, #7
 800f550:	4a03      	ldr	r2, [pc, #12]	; (800f560 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f552:	5cd3      	ldrb	r3, [r2, r3]
 800f554:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f558:	4618      	mov	r0, r3
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	40021000 	.word	0x40021000
 800f560:	08019f6c 	.word	0x08019f6c

0800f564 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800f564:	b480      	push	{r7}
 800f566:	b085      	sub	sp, #20
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800f56c:	4b0a      	ldr	r3, [pc, #40]	; (800f598 <RCC_Delay+0x34>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4a0a      	ldr	r2, [pc, #40]	; (800f59c <RCC_Delay+0x38>)
 800f572:	fba2 2303 	umull	r2, r3, r2, r3
 800f576:	0a5b      	lsrs	r3, r3, #9
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	fb02 f303 	mul.w	r3, r2, r3
 800f57e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800f580:	bf00      	nop
  }
  while (Delay --);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	1e5a      	subs	r2, r3, #1
 800f586:	60fa      	str	r2, [r7, #12]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d1f9      	bne.n	800f580 <RCC_Delay+0x1c>
}
 800f58c:	bf00      	nop
 800f58e:	3714      	adds	r7, #20
 800f590:	46bd      	mov	sp, r7
 800f592:	bc80      	pop	{r7}
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop
 800f598:	20000004 	.word	0x20000004
 800f59c:	10624dd3 	.word	0x10624dd3

0800f5a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d101      	bne.n	800f5b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e041      	b.n	800f636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d106      	bne.n	800f5cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f7fc fba0 	bl	800bd0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2202      	movs	r2, #2
 800f5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	3304      	adds	r3, #4
 800f5dc:	4619      	mov	r1, r3
 800f5de:	4610      	mov	r0, r2
 800f5e0:	f000 fdb4 	bl	801014c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2201      	movs	r2, #1
 800f600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2201      	movs	r2, #1
 800f608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2201      	movs	r2, #1
 800f610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2201      	movs	r2, #1
 800f618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2201      	movs	r2, #1
 800f620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2201      	movs	r2, #1
 800f628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2201      	movs	r2, #1
 800f630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3708      	adds	r7, #8
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}

0800f63e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f63e:	b580      	push	{r7, lr}
 800f640:	b082      	sub	sp, #8
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d101      	bne.n	800f650 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f64c:	2301      	movs	r3, #1
 800f64e:	e041      	b.n	800f6d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f656:	b2db      	uxtb	r3, r3
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d106      	bne.n	800f66a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f000 f839 	bl	800f6dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2202      	movs	r2, #2
 800f66e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	3304      	adds	r3, #4
 800f67a:	4619      	mov	r1, r3
 800f67c:	4610      	mov	r0, r2
 800f67e:	f000 fd65 	bl	801014c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2201      	movs	r2, #1
 800f686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2201      	movs	r2, #1
 800f68e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2201      	movs	r2, #1
 800f696:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2201      	movs	r2, #1
 800f69e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f6d2:	2300      	movs	r3, #0
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f6e4:	bf00      	nop
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bc80      	pop	{r7}
 800f6ec:	4770      	bx	lr
	...

0800f6f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b084      	sub	sp, #16
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d109      	bne.n	800f714 <HAL_TIM_PWM_Start+0x24>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f706:	b2db      	uxtb	r3, r3
 800f708:	2b01      	cmp	r3, #1
 800f70a:	bf14      	ite	ne
 800f70c:	2301      	movne	r3, #1
 800f70e:	2300      	moveq	r3, #0
 800f710:	b2db      	uxtb	r3, r3
 800f712:	e022      	b.n	800f75a <HAL_TIM_PWM_Start+0x6a>
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	2b04      	cmp	r3, #4
 800f718:	d109      	bne.n	800f72e <HAL_TIM_PWM_Start+0x3e>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f720:	b2db      	uxtb	r3, r3
 800f722:	2b01      	cmp	r3, #1
 800f724:	bf14      	ite	ne
 800f726:	2301      	movne	r3, #1
 800f728:	2300      	moveq	r3, #0
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	e015      	b.n	800f75a <HAL_TIM_PWM_Start+0x6a>
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	2b08      	cmp	r3, #8
 800f732:	d109      	bne.n	800f748 <HAL_TIM_PWM_Start+0x58>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	bf14      	ite	ne
 800f740:	2301      	movne	r3, #1
 800f742:	2300      	moveq	r3, #0
 800f744:	b2db      	uxtb	r3, r3
 800f746:	e008      	b.n	800f75a <HAL_TIM_PWM_Start+0x6a>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	2b01      	cmp	r3, #1
 800f752:	bf14      	ite	ne
 800f754:	2301      	movne	r3, #1
 800f756:	2300      	moveq	r3, #0
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d001      	beq.n	800f762 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f75e:	2301      	movs	r3, #1
 800f760:	e05e      	b.n	800f820 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d104      	bne.n	800f772 <HAL_TIM_PWM_Start+0x82>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2202      	movs	r2, #2
 800f76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f770:	e013      	b.n	800f79a <HAL_TIM_PWM_Start+0xaa>
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	2b04      	cmp	r3, #4
 800f776:	d104      	bne.n	800f782 <HAL_TIM_PWM_Start+0x92>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2202      	movs	r2, #2
 800f77c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f780:	e00b      	b.n	800f79a <HAL_TIM_PWM_Start+0xaa>
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	2b08      	cmp	r3, #8
 800f786:	d104      	bne.n	800f792 <HAL_TIM_PWM_Start+0xa2>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2202      	movs	r2, #2
 800f78c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f790:	e003      	b.n	800f79a <HAL_TIM_PWM_Start+0xaa>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2202      	movs	r2, #2
 800f796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2201      	movs	r2, #1
 800f7a0:	6839      	ldr	r1, [r7, #0]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f001 f85f 	bl	8010866 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a1e      	ldr	r2, [pc, #120]	; (800f828 <HAL_TIM_PWM_Start+0x138>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d107      	bne.n	800f7c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f7c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4a18      	ldr	r2, [pc, #96]	; (800f828 <HAL_TIM_PWM_Start+0x138>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d00e      	beq.n	800f7ea <HAL_TIM_PWM_Start+0xfa>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7d4:	d009      	beq.n	800f7ea <HAL_TIM_PWM_Start+0xfa>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a14      	ldr	r2, [pc, #80]	; (800f82c <HAL_TIM_PWM_Start+0x13c>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d004      	beq.n	800f7ea <HAL_TIM_PWM_Start+0xfa>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4a12      	ldr	r2, [pc, #72]	; (800f830 <HAL_TIM_PWM_Start+0x140>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d111      	bne.n	800f80e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	f003 0307 	and.w	r3, r3, #7
 800f7f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2b06      	cmp	r3, #6
 800f7fa:	d010      	beq.n	800f81e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f042 0201 	orr.w	r2, r2, #1
 800f80a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f80c:	e007      	b.n	800f81e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	681a      	ldr	r2, [r3, #0]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f042 0201 	orr.w	r2, r2, #1
 800f81c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f81e:	2300      	movs	r3, #0
}
 800f820:	4618      	mov	r0, r3
 800f822:	3710      	adds	r7, #16
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	40012c00 	.word	0x40012c00
 800f82c:	40000400 	.word	0x40000400
 800f830:	40000800 	.word	0x40000800

0800f834 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d101      	bne.n	800f846 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f842:	2301      	movs	r3, #1
 800f844:	e041      	b.n	800f8ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d106      	bne.n	800f860 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2200      	movs	r2, #0
 800f856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f7fc f9c4 	bl	800bbe8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2202      	movs	r2, #2
 800f864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	3304      	adds	r3, #4
 800f870:	4619      	mov	r1, r3
 800f872:	4610      	mov	r0, r2
 800f874:	f000 fc6a 	bl	801014c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2201      	movs	r2, #1
 800f87c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2201      	movs	r2, #1
 800f884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2201      	movs	r2, #1
 800f894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2201      	movs	r2, #1
 800f89c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2201      	movs	r2, #1
 800f8ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f8c8:	2300      	movs	r3, #0
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3708      	adds	r7, #8
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
	...

0800f8d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d104      	bne.n	800f8ee <HAL_TIM_IC_Start_IT+0x1a>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	e013      	b.n	800f916 <HAL_TIM_IC_Start_IT+0x42>
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	2b04      	cmp	r3, #4
 800f8f2:	d104      	bne.n	800f8fe <HAL_TIM_IC_Start_IT+0x2a>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	e00b      	b.n	800f916 <HAL_TIM_IC_Start_IT+0x42>
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	2b08      	cmp	r3, #8
 800f902:	d104      	bne.n	800f90e <HAL_TIM_IC_Start_IT+0x3a>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	e003      	b.n	800f916 <HAL_TIM_IC_Start_IT+0x42>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f914:	b2db      	uxtb	r3, r3
 800f916:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d104      	bne.n	800f928 <HAL_TIM_IC_Start_IT+0x54>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f924:	b2db      	uxtb	r3, r3
 800f926:	e013      	b.n	800f950 <HAL_TIM_IC_Start_IT+0x7c>
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	2b04      	cmp	r3, #4
 800f92c:	d104      	bne.n	800f938 <HAL_TIM_IC_Start_IT+0x64>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f934:	b2db      	uxtb	r3, r3
 800f936:	e00b      	b.n	800f950 <HAL_TIM_IC_Start_IT+0x7c>
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	2b08      	cmp	r3, #8
 800f93c:	d104      	bne.n	800f948 <HAL_TIM_IC_Start_IT+0x74>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f944:	b2db      	uxtb	r3, r3
 800f946:	e003      	b.n	800f950 <HAL_TIM_IC_Start_IT+0x7c>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800f952:	7bfb      	ldrb	r3, [r7, #15]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d102      	bne.n	800f95e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800f958:	7bbb      	ldrb	r3, [r7, #14]
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	d001      	beq.n	800f962 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800f95e:	2301      	movs	r3, #1
 800f960:	e0b3      	b.n	800faca <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d104      	bne.n	800f972 <HAL_TIM_IC_Start_IT+0x9e>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2202      	movs	r2, #2
 800f96c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f970:	e013      	b.n	800f99a <HAL_TIM_IC_Start_IT+0xc6>
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	2b04      	cmp	r3, #4
 800f976:	d104      	bne.n	800f982 <HAL_TIM_IC_Start_IT+0xae>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2202      	movs	r2, #2
 800f97c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f980:	e00b      	b.n	800f99a <HAL_TIM_IC_Start_IT+0xc6>
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	2b08      	cmp	r3, #8
 800f986:	d104      	bne.n	800f992 <HAL_TIM_IC_Start_IT+0xbe>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2202      	movs	r2, #2
 800f98c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f990:	e003      	b.n	800f99a <HAL_TIM_IC_Start_IT+0xc6>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2202      	movs	r2, #2
 800f996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d104      	bne.n	800f9aa <HAL_TIM_IC_Start_IT+0xd6>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2202      	movs	r2, #2
 800f9a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9a8:	e013      	b.n	800f9d2 <HAL_TIM_IC_Start_IT+0xfe>
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	2b04      	cmp	r3, #4
 800f9ae:	d104      	bne.n	800f9ba <HAL_TIM_IC_Start_IT+0xe6>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2202      	movs	r2, #2
 800f9b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f9b8:	e00b      	b.n	800f9d2 <HAL_TIM_IC_Start_IT+0xfe>
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	2b08      	cmp	r3, #8
 800f9be:	d104      	bne.n	800f9ca <HAL_TIM_IC_Start_IT+0xf6>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2202      	movs	r2, #2
 800f9c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9c8:	e003      	b.n	800f9d2 <HAL_TIM_IC_Start_IT+0xfe>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2202      	movs	r2, #2
 800f9ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	2b0c      	cmp	r3, #12
 800f9d6:	d841      	bhi.n	800fa5c <HAL_TIM_IC_Start_IT+0x188>
 800f9d8:	a201      	add	r2, pc, #4	; (adr r2, 800f9e0 <HAL_TIM_IC_Start_IT+0x10c>)
 800f9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9de:	bf00      	nop
 800f9e0:	0800fa15 	.word	0x0800fa15
 800f9e4:	0800fa5d 	.word	0x0800fa5d
 800f9e8:	0800fa5d 	.word	0x0800fa5d
 800f9ec:	0800fa5d 	.word	0x0800fa5d
 800f9f0:	0800fa27 	.word	0x0800fa27
 800f9f4:	0800fa5d 	.word	0x0800fa5d
 800f9f8:	0800fa5d 	.word	0x0800fa5d
 800f9fc:	0800fa5d 	.word	0x0800fa5d
 800fa00:	0800fa39 	.word	0x0800fa39
 800fa04:	0800fa5d 	.word	0x0800fa5d
 800fa08:	0800fa5d 	.word	0x0800fa5d
 800fa0c:	0800fa5d 	.word	0x0800fa5d
 800fa10:	0800fa4b 	.word	0x0800fa4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	68da      	ldr	r2, [r3, #12]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f042 0202 	orr.w	r2, r2, #2
 800fa22:	60da      	str	r2, [r3, #12]
      break;
 800fa24:	e01b      	b.n	800fa5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	68da      	ldr	r2, [r3, #12]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f042 0204 	orr.w	r2, r2, #4
 800fa34:	60da      	str	r2, [r3, #12]
      break;
 800fa36:	e012      	b.n	800fa5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68da      	ldr	r2, [r3, #12]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f042 0208 	orr.w	r2, r2, #8
 800fa46:	60da      	str	r2, [r3, #12]
      break;
 800fa48:	e009      	b.n	800fa5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	68da      	ldr	r2, [r3, #12]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f042 0210 	orr.w	r2, r2, #16
 800fa58:	60da      	str	r2, [r3, #12]
      break;
 800fa5a:	e000      	b.n	800fa5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800fa5c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	2201      	movs	r2, #1
 800fa64:	6839      	ldr	r1, [r7, #0]
 800fa66:	4618      	mov	r0, r3
 800fa68:	f000 fefd 	bl	8010866 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a18      	ldr	r2, [pc, #96]	; (800fad4 <HAL_TIM_IC_Start_IT+0x200>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d00e      	beq.n	800fa94 <HAL_TIM_IC_Start_IT+0x1c0>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa7e:	d009      	beq.n	800fa94 <HAL_TIM_IC_Start_IT+0x1c0>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4a14      	ldr	r2, [pc, #80]	; (800fad8 <HAL_TIM_IC_Start_IT+0x204>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d004      	beq.n	800fa94 <HAL_TIM_IC_Start_IT+0x1c0>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a13      	ldr	r2, [pc, #76]	; (800fadc <HAL_TIM_IC_Start_IT+0x208>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d111      	bne.n	800fab8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	f003 0307 	and.w	r3, r3, #7
 800fa9e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	2b06      	cmp	r3, #6
 800faa4:	d010      	beq.n	800fac8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f042 0201 	orr.w	r2, r2, #1
 800fab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fab6:	e007      	b.n	800fac8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	681a      	ldr	r2, [r3, #0]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f042 0201 	orr.w	r2, r2, #1
 800fac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fac8:	2300      	movs	r3, #0
}
 800faca:	4618      	mov	r0, r3
 800facc:	3710      	adds	r7, #16
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	40012c00 	.word	0x40012c00
 800fad8:	40000400 	.word	0x40000400
 800fadc:	40000800 	.word	0x40000800

0800fae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	691b      	ldr	r3, [r3, #16]
 800faee:	f003 0302 	and.w	r3, r3, #2
 800faf2:	2b02      	cmp	r3, #2
 800faf4:	d122      	bne.n	800fb3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	68db      	ldr	r3, [r3, #12]
 800fafc:	f003 0302 	and.w	r3, r3, #2
 800fb00:	2b02      	cmp	r3, #2
 800fb02:	d11b      	bne.n	800fb3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f06f 0202 	mvn.w	r2, #2
 800fb0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2201      	movs	r2, #1
 800fb12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	699b      	ldr	r3, [r3, #24]
 800fb1a:	f003 0303 	and.w	r3, r3, #3
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d003      	beq.n	800fb2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7f5 fe78 	bl	8005818 <HAL_TIM_IC_CaptureCallback>
 800fb28:	e005      	b.n	800fb36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f000 faf2 	bl	8010114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 faf8 	bl	8010126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	691b      	ldr	r3, [r3, #16]
 800fb42:	f003 0304 	and.w	r3, r3, #4
 800fb46:	2b04      	cmp	r3, #4
 800fb48:	d122      	bne.n	800fb90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	f003 0304 	and.w	r3, r3, #4
 800fb54:	2b04      	cmp	r3, #4
 800fb56:	d11b      	bne.n	800fb90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f06f 0204 	mvn.w	r2, #4
 800fb60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2202      	movs	r2, #2
 800fb66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	699b      	ldr	r3, [r3, #24]
 800fb6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d003      	beq.n	800fb7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f7f5 fe4e 	bl	8005818 <HAL_TIM_IC_CaptureCallback>
 800fb7c:	e005      	b.n	800fb8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f000 fac8 	bl	8010114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f000 face 	bl	8010126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	691b      	ldr	r3, [r3, #16]
 800fb96:	f003 0308 	and.w	r3, r3, #8
 800fb9a:	2b08      	cmp	r3, #8
 800fb9c:	d122      	bne.n	800fbe4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	f003 0308 	and.w	r3, r3, #8
 800fba8:	2b08      	cmp	r3, #8
 800fbaa:	d11b      	bne.n	800fbe4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	f06f 0208 	mvn.w	r2, #8
 800fbb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2204      	movs	r2, #4
 800fbba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	69db      	ldr	r3, [r3, #28]
 800fbc2:	f003 0303 	and.w	r3, r3, #3
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d003      	beq.n	800fbd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f7f5 fe24 	bl	8005818 <HAL_TIM_IC_CaptureCallback>
 800fbd0:	e005      	b.n	800fbde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f000 fa9e 	bl	8010114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 faa4 	bl	8010126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	691b      	ldr	r3, [r3, #16]
 800fbea:	f003 0310 	and.w	r3, r3, #16
 800fbee:	2b10      	cmp	r3, #16
 800fbf0:	d122      	bne.n	800fc38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	f003 0310 	and.w	r3, r3, #16
 800fbfc:	2b10      	cmp	r3, #16
 800fbfe:	d11b      	bne.n	800fc38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f06f 0210 	mvn.w	r2, #16
 800fc08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2208      	movs	r2, #8
 800fc0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	69db      	ldr	r3, [r3, #28]
 800fc16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d003      	beq.n	800fc26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f7f5 fdfa 	bl	8005818 <HAL_TIM_IC_CaptureCallback>
 800fc24:	e005      	b.n	800fc32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f000 fa74 	bl	8010114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 fa7a 	bl	8010126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	691b      	ldr	r3, [r3, #16]
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d10e      	bne.n	800fc64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	f003 0301 	and.w	r3, r3, #1
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d107      	bne.n	800fc64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	f06f 0201 	mvn.w	r2, #1
 800fc5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 fa4f 	bl	8010102 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	691b      	ldr	r3, [r3, #16]
 800fc6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc6e:	2b80      	cmp	r3, #128	; 0x80
 800fc70:	d10e      	bne.n	800fc90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc7c:	2b80      	cmp	r3, #128	; 0x80
 800fc7e:	d107      	bne.n	800fc90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fc88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 fe77 	bl	801097e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	691b      	ldr	r3, [r3, #16]
 800fc96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc9a:	2b40      	cmp	r3, #64	; 0x40
 800fc9c:	d10e      	bne.n	800fcbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	68db      	ldr	r3, [r3, #12]
 800fca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fca8:	2b40      	cmp	r3, #64	; 0x40
 800fcaa:	d107      	bne.n	800fcbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fcb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f000 fa3e 	bl	8010138 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	691b      	ldr	r3, [r3, #16]
 800fcc2:	f003 0320 	and.w	r3, r3, #32
 800fcc6:	2b20      	cmp	r3, #32
 800fcc8:	d10e      	bne.n	800fce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	f003 0320 	and.w	r3, r3, #32
 800fcd4:	2b20      	cmp	r3, #32
 800fcd6:	d107      	bne.n	800fce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f06f 0220 	mvn.w	r2, #32
 800fce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 fe42 	bl	801096c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fce8:	bf00      	nop
 800fcea:	3708      	adds	r7, #8
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}

0800fcf0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d101      	bne.n	800fd0a <HAL_TIM_IC_ConfigChannel+0x1a>
 800fd06:	2302      	movs	r3, #2
 800fd08:	e082      	b.n	800fe10 <HAL_TIM_IC_ConfigChannel+0x120>
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d11b      	bne.n	800fd50 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6818      	ldr	r0, [r3, #0]
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	6819      	ldr	r1, [r3, #0]
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	685a      	ldr	r2, [r3, #4]
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	68db      	ldr	r3, [r3, #12]
 800fd28:	f000 fbfa 	bl	8010520 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	699a      	ldr	r2, [r3, #24]
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f022 020c 	bic.w	r2, r2, #12
 800fd3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	6999      	ldr	r1, [r3, #24]
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	689a      	ldr	r2, [r3, #8]
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	430a      	orrs	r2, r1
 800fd4c:	619a      	str	r2, [r3, #24]
 800fd4e:	e05a      	b.n	800fe06 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2b04      	cmp	r3, #4
 800fd54:	d11c      	bne.n	800fd90 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6818      	ldr	r0, [r3, #0]
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	6819      	ldr	r1, [r3, #0]
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	685a      	ldr	r2, [r3, #4]
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	f000 fc63 	bl	8010630 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	699a      	ldr	r2, [r3, #24]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fd78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	6999      	ldr	r1, [r3, #24]
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	689b      	ldr	r3, [r3, #8]
 800fd84:	021a      	lsls	r2, r3, #8
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	430a      	orrs	r2, r1
 800fd8c:	619a      	str	r2, [r3, #24]
 800fd8e:	e03a      	b.n	800fe06 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2b08      	cmp	r3, #8
 800fd94:	d11b      	bne.n	800fdce <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	6818      	ldr	r0, [r3, #0]
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	6819      	ldr	r1, [r3, #0]
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	685a      	ldr	r2, [r3, #4]
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	f000 fcae 	bl	8010706 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	69da      	ldr	r2, [r3, #28]
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f022 020c 	bic.w	r2, r2, #12
 800fdb8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	69d9      	ldr	r1, [r3, #28]
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	689a      	ldr	r2, [r3, #8]
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	430a      	orrs	r2, r1
 800fdca:	61da      	str	r2, [r3, #28]
 800fdcc:	e01b      	b.n	800fe06 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	6818      	ldr	r0, [r3, #0]
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	6819      	ldr	r1, [r3, #0]
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	685a      	ldr	r2, [r3, #4]
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	f000 fccd 	bl	801077c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	69da      	ldr	r2, [r3, #28]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fdf0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	69d9      	ldr	r1, [r3, #28]
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	021a      	lsls	r2, r3, #8
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	430a      	orrs	r2, r1
 800fe04:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe0e:	2300      	movs	r3, #0
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3710      	adds	r7, #16
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d101      	bne.n	800fe32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800fe2e:	2302      	movs	r3, #2
 800fe30:	e0ac      	b.n	800ff8c <HAL_TIM_PWM_ConfigChannel+0x174>
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2201      	movs	r2, #1
 800fe36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2b0c      	cmp	r3, #12
 800fe3e:	f200 809f 	bhi.w	800ff80 <HAL_TIM_PWM_ConfigChannel+0x168>
 800fe42:	a201      	add	r2, pc, #4	; (adr r2, 800fe48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800fe44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe48:	0800fe7d 	.word	0x0800fe7d
 800fe4c:	0800ff81 	.word	0x0800ff81
 800fe50:	0800ff81 	.word	0x0800ff81
 800fe54:	0800ff81 	.word	0x0800ff81
 800fe58:	0800febd 	.word	0x0800febd
 800fe5c:	0800ff81 	.word	0x0800ff81
 800fe60:	0800ff81 	.word	0x0800ff81
 800fe64:	0800ff81 	.word	0x0800ff81
 800fe68:	0800feff 	.word	0x0800feff
 800fe6c:	0800ff81 	.word	0x0800ff81
 800fe70:	0800ff81 	.word	0x0800ff81
 800fe74:	0800ff81 	.word	0x0800ff81
 800fe78:	0800ff3f 	.word	0x0800ff3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	68b9      	ldr	r1, [r7, #8]
 800fe82:	4618      	mov	r0, r3
 800fe84:	f000 f9c4 	bl	8010210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	699a      	ldr	r2, [r3, #24]
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f042 0208 	orr.w	r2, r2, #8
 800fe96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	699a      	ldr	r2, [r3, #24]
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f022 0204 	bic.w	r2, r2, #4
 800fea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	6999      	ldr	r1, [r3, #24]
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	691a      	ldr	r2, [r3, #16]
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	430a      	orrs	r2, r1
 800feb8:	619a      	str	r2, [r3, #24]
      break;
 800feba:	e062      	b.n	800ff82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	68b9      	ldr	r1, [r7, #8]
 800fec2:	4618      	mov	r0, r3
 800fec4:	f000 fa0a 	bl	80102dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	699a      	ldr	r2, [r3, #24]
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	699a      	ldr	r2, [r3, #24]
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	6999      	ldr	r1, [r3, #24]
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	021a      	lsls	r2, r3, #8
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	430a      	orrs	r2, r1
 800fefa:	619a      	str	r2, [r3, #24]
      break;
 800fefc:	e041      	b.n	800ff82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	68b9      	ldr	r1, [r7, #8]
 800ff04:	4618      	mov	r0, r3
 800ff06:	f000 fa53 	bl	80103b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	69da      	ldr	r2, [r3, #28]
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f042 0208 	orr.w	r2, r2, #8
 800ff18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	69da      	ldr	r2, [r3, #28]
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f022 0204 	bic.w	r2, r2, #4
 800ff28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	69d9      	ldr	r1, [r3, #28]
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	691a      	ldr	r2, [r3, #16]
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	430a      	orrs	r2, r1
 800ff3a:	61da      	str	r2, [r3, #28]
      break;
 800ff3c:	e021      	b.n	800ff82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68b9      	ldr	r1, [r7, #8]
 800ff44:	4618      	mov	r0, r3
 800ff46:	f000 fa9d 	bl	8010484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	69da      	ldr	r2, [r3, #28]
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	69da      	ldr	r2, [r3, #28]
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	69d9      	ldr	r1, [r3, #28]
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	691b      	ldr	r3, [r3, #16]
 800ff74:	021a      	lsls	r2, r3, #8
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	430a      	orrs	r2, r1
 800ff7c:	61da      	str	r2, [r3, #28]
      break;
 800ff7e:	e000      	b.n	800ff82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800ff80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2200      	movs	r2, #0
 800ff86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d101      	bne.n	800ffac <HAL_TIM_ConfigClockSource+0x18>
 800ffa8:	2302      	movs	r3, #2
 800ffaa:	e0a6      	b.n	80100fa <HAL_TIM_ConfigClockSource+0x166>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2202      	movs	r2, #2
 800ffb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ffca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ffd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	68fa      	ldr	r2, [r7, #12]
 800ffda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	2b40      	cmp	r3, #64	; 0x40
 800ffe2:	d067      	beq.n	80100b4 <HAL_TIM_ConfigClockSource+0x120>
 800ffe4:	2b40      	cmp	r3, #64	; 0x40
 800ffe6:	d80b      	bhi.n	8010000 <HAL_TIM_ConfigClockSource+0x6c>
 800ffe8:	2b10      	cmp	r3, #16
 800ffea:	d073      	beq.n	80100d4 <HAL_TIM_ConfigClockSource+0x140>
 800ffec:	2b10      	cmp	r3, #16
 800ffee:	d802      	bhi.n	800fff6 <HAL_TIM_ConfigClockSource+0x62>
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d06f      	beq.n	80100d4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800fff4:	e078      	b.n	80100e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fff6:	2b20      	cmp	r3, #32
 800fff8:	d06c      	beq.n	80100d4 <HAL_TIM_ConfigClockSource+0x140>
 800fffa:	2b30      	cmp	r3, #48	; 0x30
 800fffc:	d06a      	beq.n	80100d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800fffe:	e073      	b.n	80100e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010000:	2b70      	cmp	r3, #112	; 0x70
 8010002:	d00d      	beq.n	8010020 <HAL_TIM_ConfigClockSource+0x8c>
 8010004:	2b70      	cmp	r3, #112	; 0x70
 8010006:	d804      	bhi.n	8010012 <HAL_TIM_ConfigClockSource+0x7e>
 8010008:	2b50      	cmp	r3, #80	; 0x50
 801000a:	d033      	beq.n	8010074 <HAL_TIM_ConfigClockSource+0xe0>
 801000c:	2b60      	cmp	r3, #96	; 0x60
 801000e:	d041      	beq.n	8010094 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8010010:	e06a      	b.n	80100e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8010012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010016:	d066      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x152>
 8010018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801001c:	d017      	beq.n	801004e <HAL_TIM_ConfigClockSource+0xba>
      break;
 801001e:	e063      	b.n	80100e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6818      	ldr	r0, [r3, #0]
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	6899      	ldr	r1, [r3, #8]
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	685a      	ldr	r2, [r3, #4]
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	f000 fbfa 	bl	8010828 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010042:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	68fa      	ldr	r2, [r7, #12]
 801004a:	609a      	str	r2, [r3, #8]
      break;
 801004c:	e04c      	b.n	80100e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6818      	ldr	r0, [r3, #0]
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	6899      	ldr	r1, [r3, #8]
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	685a      	ldr	r2, [r3, #4]
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	f000 fbe3 	bl	8010828 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	689a      	ldr	r2, [r3, #8]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010070:	609a      	str	r2, [r3, #8]
      break;
 8010072:	e039      	b.n	80100e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6818      	ldr	r0, [r3, #0]
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	6859      	ldr	r1, [r3, #4]
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	68db      	ldr	r3, [r3, #12]
 8010080:	461a      	mov	r2, r3
 8010082:	f000 faa7 	bl	80105d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2150      	movs	r1, #80	; 0x50
 801008c:	4618      	mov	r0, r3
 801008e:	f000 fbb1 	bl	80107f4 <TIM_ITRx_SetConfig>
      break;
 8010092:	e029      	b.n	80100e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6818      	ldr	r0, [r3, #0]
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	6859      	ldr	r1, [r3, #4]
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	461a      	mov	r2, r3
 80100a2:	f000 fb01 	bl	80106a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2160      	movs	r1, #96	; 0x60
 80100ac:	4618      	mov	r0, r3
 80100ae:	f000 fba1 	bl	80107f4 <TIM_ITRx_SetConfig>
      break;
 80100b2:	e019      	b.n	80100e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6818      	ldr	r0, [r3, #0]
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	6859      	ldr	r1, [r3, #4]
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	461a      	mov	r2, r3
 80100c2:	f000 fa87 	bl	80105d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	2140      	movs	r1, #64	; 0x40
 80100cc:	4618      	mov	r0, r3
 80100ce:	f000 fb91 	bl	80107f4 <TIM_ITRx_SetConfig>
      break;
 80100d2:	e009      	b.n	80100e8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4619      	mov	r1, r3
 80100de:	4610      	mov	r0, r2
 80100e0:	f000 fb88 	bl	80107f4 <TIM_ITRx_SetConfig>
        break;
 80100e4:	e000      	b.n	80100e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80100e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2201      	movs	r2, #1
 80100ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2200      	movs	r2, #0
 80100f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100f8:	2300      	movs	r3, #0
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010102:	b480      	push	{r7}
 8010104:	b083      	sub	sp, #12
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801010a:	bf00      	nop
 801010c:	370c      	adds	r7, #12
 801010e:	46bd      	mov	sp, r7
 8010110:	bc80      	pop	{r7}
 8010112:	4770      	bx	lr

08010114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801011c:	bf00      	nop
 801011e:	370c      	adds	r7, #12
 8010120:	46bd      	mov	sp, r7
 8010122:	bc80      	pop	{r7}
 8010124:	4770      	bx	lr

08010126 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010126:	b480      	push	{r7}
 8010128:	b083      	sub	sp, #12
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801012e:	bf00      	nop
 8010130:	370c      	adds	r7, #12
 8010132:	46bd      	mov	sp, r7
 8010134:	bc80      	pop	{r7}
 8010136:	4770      	bx	lr

08010138 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010138:	b480      	push	{r7}
 801013a:	b083      	sub	sp, #12
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010140:	bf00      	nop
 8010142:	370c      	adds	r7, #12
 8010144:	46bd      	mov	sp, r7
 8010146:	bc80      	pop	{r7}
 8010148:	4770      	bx	lr
	...

0801014c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801014c:	b480      	push	{r7}
 801014e:	b085      	sub	sp, #20
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4a29      	ldr	r2, [pc, #164]	; (8010204 <TIM_Base_SetConfig+0xb8>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d00b      	beq.n	801017c <TIM_Base_SetConfig+0x30>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801016a:	d007      	beq.n	801017c <TIM_Base_SetConfig+0x30>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4a26      	ldr	r2, [pc, #152]	; (8010208 <TIM_Base_SetConfig+0xbc>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d003      	beq.n	801017c <TIM_Base_SetConfig+0x30>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	4a25      	ldr	r2, [pc, #148]	; (801020c <TIM_Base_SetConfig+0xc0>)
 8010178:	4293      	cmp	r3, r2
 801017a:	d108      	bne.n	801018e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	68fa      	ldr	r2, [r7, #12]
 801018a:	4313      	orrs	r3, r2
 801018c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4a1c      	ldr	r2, [pc, #112]	; (8010204 <TIM_Base_SetConfig+0xb8>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d00b      	beq.n	80101ae <TIM_Base_SetConfig+0x62>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801019c:	d007      	beq.n	80101ae <TIM_Base_SetConfig+0x62>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4a19      	ldr	r2, [pc, #100]	; (8010208 <TIM_Base_SetConfig+0xbc>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d003      	beq.n	80101ae <TIM_Base_SetConfig+0x62>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4a18      	ldr	r2, [pc, #96]	; (801020c <TIM_Base_SetConfig+0xc0>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d108      	bne.n	80101c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	68db      	ldr	r3, [r3, #12]
 80101ba:	68fa      	ldr	r2, [r7, #12]
 80101bc:	4313      	orrs	r3, r2
 80101be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	695b      	ldr	r3, [r3, #20]
 80101ca:	4313      	orrs	r3, r2
 80101cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	68fa      	ldr	r2, [r7, #12]
 80101d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	689a      	ldr	r2, [r3, #8]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	4a07      	ldr	r2, [pc, #28]	; (8010204 <TIM_Base_SetConfig+0xb8>)
 80101e8:	4293      	cmp	r3, r2
 80101ea:	d103      	bne.n	80101f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	691a      	ldr	r2, [r3, #16]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2201      	movs	r2, #1
 80101f8:	615a      	str	r2, [r3, #20]
}
 80101fa:	bf00      	nop
 80101fc:	3714      	adds	r7, #20
 80101fe:	46bd      	mov	sp, r7
 8010200:	bc80      	pop	{r7}
 8010202:	4770      	bx	lr
 8010204:	40012c00 	.word	0x40012c00
 8010208:	40000400 	.word	0x40000400
 801020c:	40000800 	.word	0x40000800

08010210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010210:	b480      	push	{r7}
 8010212:	b087      	sub	sp, #28
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6a1b      	ldr	r3, [r3, #32]
 801021e:	f023 0201 	bic.w	r2, r3, #1
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6a1b      	ldr	r3, [r3, #32]
 801022a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	699b      	ldr	r3, [r3, #24]
 8010236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801023e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	f023 0303 	bic.w	r3, r3, #3
 8010246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	68fa      	ldr	r2, [r7, #12]
 801024e:	4313      	orrs	r3, r2
 8010250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	f023 0302 	bic.w	r3, r3, #2
 8010258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	697a      	ldr	r2, [r7, #20]
 8010260:	4313      	orrs	r3, r2
 8010262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	4a1c      	ldr	r2, [pc, #112]	; (80102d8 <TIM_OC1_SetConfig+0xc8>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d10c      	bne.n	8010286 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	f023 0308 	bic.w	r3, r3, #8
 8010272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	697a      	ldr	r2, [r7, #20]
 801027a:	4313      	orrs	r3, r2
 801027c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	f023 0304 	bic.w	r3, r3, #4
 8010284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4a13      	ldr	r2, [pc, #76]	; (80102d8 <TIM_OC1_SetConfig+0xc8>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d111      	bne.n	80102b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801029c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	695b      	ldr	r3, [r3, #20]
 80102a2:	693a      	ldr	r2, [r7, #16]
 80102a4:	4313      	orrs	r3, r2
 80102a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	699b      	ldr	r3, [r3, #24]
 80102ac:	693a      	ldr	r2, [r7, #16]
 80102ae:	4313      	orrs	r3, r2
 80102b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	693a      	ldr	r2, [r7, #16]
 80102b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	68fa      	ldr	r2, [r7, #12]
 80102bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	685a      	ldr	r2, [r3, #4]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	697a      	ldr	r2, [r7, #20]
 80102ca:	621a      	str	r2, [r3, #32]
}
 80102cc:	bf00      	nop
 80102ce:	371c      	adds	r7, #28
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bc80      	pop	{r7}
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	40012c00 	.word	0x40012c00

080102dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80102dc:	b480      	push	{r7}
 80102de:	b087      	sub	sp, #28
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6a1b      	ldr	r3, [r3, #32]
 80102ea:	f023 0210 	bic.w	r2, r3, #16
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6a1b      	ldr	r3, [r3, #32]
 80102f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	699b      	ldr	r3, [r3, #24]
 8010302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801030a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	021b      	lsls	r3, r3, #8
 801031a:	68fa      	ldr	r2, [r7, #12]
 801031c:	4313      	orrs	r3, r2
 801031e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	f023 0320 	bic.w	r3, r3, #32
 8010326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	689b      	ldr	r3, [r3, #8]
 801032c:	011b      	lsls	r3, r3, #4
 801032e:	697a      	ldr	r2, [r7, #20]
 8010330:	4313      	orrs	r3, r2
 8010332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	4a1d      	ldr	r2, [pc, #116]	; (80103ac <TIM_OC2_SetConfig+0xd0>)
 8010338:	4293      	cmp	r3, r2
 801033a:	d10d      	bne.n	8010358 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	011b      	lsls	r3, r3, #4
 801034a:	697a      	ldr	r2, [r7, #20]
 801034c:	4313      	orrs	r3, r2
 801034e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	4a14      	ldr	r2, [pc, #80]	; (80103ac <TIM_OC2_SetConfig+0xd0>)
 801035c:	4293      	cmp	r3, r2
 801035e:	d113      	bne.n	8010388 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801036e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	695b      	ldr	r3, [r3, #20]
 8010374:	009b      	lsls	r3, r3, #2
 8010376:	693a      	ldr	r2, [r7, #16]
 8010378:	4313      	orrs	r3, r2
 801037a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	699b      	ldr	r3, [r3, #24]
 8010380:	009b      	lsls	r3, r3, #2
 8010382:	693a      	ldr	r2, [r7, #16]
 8010384:	4313      	orrs	r3, r2
 8010386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	693a      	ldr	r2, [r7, #16]
 801038c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	68fa      	ldr	r2, [r7, #12]
 8010392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	685a      	ldr	r2, [r3, #4]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	697a      	ldr	r2, [r7, #20]
 80103a0:	621a      	str	r2, [r3, #32]
}
 80103a2:	bf00      	nop
 80103a4:	371c      	adds	r7, #28
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bc80      	pop	{r7}
 80103aa:	4770      	bx	lr
 80103ac:	40012c00 	.word	0x40012c00

080103b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80103b0:	b480      	push	{r7}
 80103b2:	b087      	sub	sp, #28
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6a1b      	ldr	r3, [r3, #32]
 80103be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6a1b      	ldr	r3, [r3, #32]
 80103ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	69db      	ldr	r3, [r3, #28]
 80103d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f023 0303 	bic.w	r3, r3, #3
 80103e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	4313      	orrs	r3, r2
 80103f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80103f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	689b      	ldr	r3, [r3, #8]
 80103fe:	021b      	lsls	r3, r3, #8
 8010400:	697a      	ldr	r2, [r7, #20]
 8010402:	4313      	orrs	r3, r2
 8010404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4a1d      	ldr	r2, [pc, #116]	; (8010480 <TIM_OC3_SetConfig+0xd0>)
 801040a:	4293      	cmp	r3, r2
 801040c:	d10d      	bne.n	801042a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	68db      	ldr	r3, [r3, #12]
 801041a:	021b      	lsls	r3, r3, #8
 801041c:	697a      	ldr	r2, [r7, #20]
 801041e:	4313      	orrs	r3, r2
 8010420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	4a14      	ldr	r2, [pc, #80]	; (8010480 <TIM_OC3_SetConfig+0xd0>)
 801042e:	4293      	cmp	r3, r2
 8010430:	d113      	bne.n	801045a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	695b      	ldr	r3, [r3, #20]
 8010446:	011b      	lsls	r3, r3, #4
 8010448:	693a      	ldr	r2, [r7, #16]
 801044a:	4313      	orrs	r3, r2
 801044c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	699b      	ldr	r3, [r3, #24]
 8010452:	011b      	lsls	r3, r3, #4
 8010454:	693a      	ldr	r2, [r7, #16]
 8010456:	4313      	orrs	r3, r2
 8010458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	693a      	ldr	r2, [r7, #16]
 801045e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	68fa      	ldr	r2, [r7, #12]
 8010464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	685a      	ldr	r2, [r3, #4]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	697a      	ldr	r2, [r7, #20]
 8010472:	621a      	str	r2, [r3, #32]
}
 8010474:	bf00      	nop
 8010476:	371c      	adds	r7, #28
 8010478:	46bd      	mov	sp, r7
 801047a:	bc80      	pop	{r7}
 801047c:	4770      	bx	lr
 801047e:	bf00      	nop
 8010480:	40012c00 	.word	0x40012c00

08010484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010484:	b480      	push	{r7}
 8010486:	b087      	sub	sp, #28
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6a1b      	ldr	r3, [r3, #32]
 8010492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6a1b      	ldr	r3, [r3, #32]
 801049e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	69db      	ldr	r3, [r3, #28]
 80104aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80104ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	021b      	lsls	r3, r3, #8
 80104c2:	68fa      	ldr	r2, [r7, #12]
 80104c4:	4313      	orrs	r3, r2
 80104c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80104c8:	693b      	ldr	r3, [r7, #16]
 80104ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80104ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	689b      	ldr	r3, [r3, #8]
 80104d4:	031b      	lsls	r3, r3, #12
 80104d6:	693a      	ldr	r2, [r7, #16]
 80104d8:	4313      	orrs	r3, r2
 80104da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	4a0f      	ldr	r2, [pc, #60]	; (801051c <TIM_OC4_SetConfig+0x98>)
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d109      	bne.n	80104f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80104ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	695b      	ldr	r3, [r3, #20]
 80104f0:	019b      	lsls	r3, r3, #6
 80104f2:	697a      	ldr	r2, [r7, #20]
 80104f4:	4313      	orrs	r3, r2
 80104f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	697a      	ldr	r2, [r7, #20]
 80104fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	68fa      	ldr	r2, [r7, #12]
 8010502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	685a      	ldr	r2, [r3, #4]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	693a      	ldr	r2, [r7, #16]
 8010510:	621a      	str	r2, [r3, #32]
}
 8010512:	bf00      	nop
 8010514:	371c      	adds	r7, #28
 8010516:	46bd      	mov	sp, r7
 8010518:	bc80      	pop	{r7}
 801051a:	4770      	bx	lr
 801051c:	40012c00 	.word	0x40012c00

08010520 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010520:	b480      	push	{r7}
 8010522:	b087      	sub	sp, #28
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
 801052c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	6a1b      	ldr	r3, [r3, #32]
 8010532:	f023 0201 	bic.w	r2, r3, #1
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	699b      	ldr	r3, [r3, #24]
 801053e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6a1b      	ldr	r3, [r3, #32]
 8010544:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	4a1f      	ldr	r2, [pc, #124]	; (80105c8 <TIM_TI1_SetConfig+0xa8>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d00b      	beq.n	8010566 <TIM_TI1_SetConfig+0x46>
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010554:	d007      	beq.n	8010566 <TIM_TI1_SetConfig+0x46>
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	4a1c      	ldr	r2, [pc, #112]	; (80105cc <TIM_TI1_SetConfig+0xac>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d003      	beq.n	8010566 <TIM_TI1_SetConfig+0x46>
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	4a1b      	ldr	r2, [pc, #108]	; (80105d0 <TIM_TI1_SetConfig+0xb0>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d101      	bne.n	801056a <TIM_TI1_SetConfig+0x4a>
 8010566:	2301      	movs	r3, #1
 8010568:	e000      	b.n	801056c <TIM_TI1_SetConfig+0x4c>
 801056a:	2300      	movs	r3, #0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d008      	beq.n	8010582 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	f023 0303 	bic.w	r3, r3, #3
 8010576:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4313      	orrs	r3, r2
 801057e:	617b      	str	r3, [r7, #20]
 8010580:	e003      	b.n	801058a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	f043 0301 	orr.w	r3, r3, #1
 8010588:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	011b      	lsls	r3, r3, #4
 8010596:	b2db      	uxtb	r3, r3
 8010598:	697a      	ldr	r2, [r7, #20]
 801059a:	4313      	orrs	r3, r2
 801059c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	f023 030a 	bic.w	r3, r3, #10
 80105a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	f003 030a 	and.w	r3, r3, #10
 80105ac:	693a      	ldr	r2, [r7, #16]
 80105ae:	4313      	orrs	r3, r2
 80105b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	697a      	ldr	r2, [r7, #20]
 80105b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	693a      	ldr	r2, [r7, #16]
 80105bc:	621a      	str	r2, [r3, #32]
}
 80105be:	bf00      	nop
 80105c0:	371c      	adds	r7, #28
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bc80      	pop	{r7}
 80105c6:	4770      	bx	lr
 80105c8:	40012c00 	.word	0x40012c00
 80105cc:	40000400 	.word	0x40000400
 80105d0:	40000800 	.word	0x40000800

080105d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80105d4:	b480      	push	{r7}
 80105d6:	b087      	sub	sp, #28
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	6a1b      	ldr	r3, [r3, #32]
 80105e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6a1b      	ldr	r3, [r3, #32]
 80105ea:	f023 0201 	bic.w	r2, r3, #1
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	699b      	ldr	r3, [r3, #24]
 80105f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80105fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	011b      	lsls	r3, r3, #4
 8010604:	693a      	ldr	r2, [r7, #16]
 8010606:	4313      	orrs	r3, r2
 8010608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	f023 030a 	bic.w	r3, r3, #10
 8010610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010612:	697a      	ldr	r2, [r7, #20]
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	4313      	orrs	r3, r2
 8010618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	693a      	ldr	r2, [r7, #16]
 801061e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	697a      	ldr	r2, [r7, #20]
 8010624:	621a      	str	r2, [r3, #32]
}
 8010626:	bf00      	nop
 8010628:	371c      	adds	r7, #28
 801062a:	46bd      	mov	sp, r7
 801062c:	bc80      	pop	{r7}
 801062e:	4770      	bx	lr

08010630 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010630:	b480      	push	{r7}
 8010632:	b087      	sub	sp, #28
 8010634:	af00      	add	r7, sp, #0
 8010636:	60f8      	str	r0, [r7, #12]
 8010638:	60b9      	str	r1, [r7, #8]
 801063a:	607a      	str	r2, [r7, #4]
 801063c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	6a1b      	ldr	r3, [r3, #32]
 8010642:	f023 0210 	bic.w	r2, r3, #16
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	699b      	ldr	r3, [r3, #24]
 801064e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	6a1b      	ldr	r3, [r3, #32]
 8010654:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801065c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	021b      	lsls	r3, r3, #8
 8010662:	697a      	ldr	r2, [r7, #20]
 8010664:	4313      	orrs	r3, r2
 8010666:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801066e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	031b      	lsls	r3, r3, #12
 8010674:	b29b      	uxth	r3, r3
 8010676:	697a      	ldr	r2, [r7, #20]
 8010678:	4313      	orrs	r3, r2
 801067a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010682:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	011b      	lsls	r3, r3, #4
 8010688:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801068c:	693a      	ldr	r2, [r7, #16]
 801068e:	4313      	orrs	r3, r2
 8010690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	697a      	ldr	r2, [r7, #20]
 8010696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	693a      	ldr	r2, [r7, #16]
 801069c:	621a      	str	r2, [r3, #32]
}
 801069e:	bf00      	nop
 80106a0:	371c      	adds	r7, #28
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bc80      	pop	{r7}
 80106a6:	4770      	bx	lr

080106a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b087      	sub	sp, #28
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	6a1b      	ldr	r3, [r3, #32]
 80106b8:	f023 0210 	bic.w	r2, r3, #16
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	699b      	ldr	r3, [r3, #24]
 80106c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	6a1b      	ldr	r3, [r3, #32]
 80106ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80106d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	031b      	lsls	r3, r3, #12
 80106d8:	697a      	ldr	r2, [r7, #20]
 80106da:	4313      	orrs	r3, r2
 80106dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80106e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	011b      	lsls	r3, r3, #4
 80106ea:	693a      	ldr	r2, [r7, #16]
 80106ec:	4313      	orrs	r3, r2
 80106ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	697a      	ldr	r2, [r7, #20]
 80106f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	621a      	str	r2, [r3, #32]
}
 80106fc:	bf00      	nop
 80106fe:	371c      	adds	r7, #28
 8010700:	46bd      	mov	sp, r7
 8010702:	bc80      	pop	{r7}
 8010704:	4770      	bx	lr

08010706 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010706:	b480      	push	{r7}
 8010708:	b087      	sub	sp, #28
 801070a:	af00      	add	r7, sp, #0
 801070c:	60f8      	str	r0, [r7, #12]
 801070e:	60b9      	str	r1, [r7, #8]
 8010710:	607a      	str	r2, [r7, #4]
 8010712:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	6a1b      	ldr	r3, [r3, #32]
 8010718:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	69db      	ldr	r3, [r3, #28]
 8010724:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	6a1b      	ldr	r3, [r3, #32]
 801072a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	f023 0303 	bic.w	r3, r3, #3
 8010732:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8010734:	697a      	ldr	r2, [r7, #20]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	4313      	orrs	r3, r2
 801073a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010742:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	011b      	lsls	r3, r3, #4
 8010748:	b2db      	uxtb	r3, r3
 801074a:	697a      	ldr	r2, [r7, #20]
 801074c:	4313      	orrs	r3, r2
 801074e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010756:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	021b      	lsls	r3, r3, #8
 801075c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010760:	693a      	ldr	r2, [r7, #16]
 8010762:	4313      	orrs	r3, r2
 8010764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	697a      	ldr	r2, [r7, #20]
 801076a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	693a      	ldr	r2, [r7, #16]
 8010770:	621a      	str	r2, [r3, #32]
}
 8010772:	bf00      	nop
 8010774:	371c      	adds	r7, #28
 8010776:	46bd      	mov	sp, r7
 8010778:	bc80      	pop	{r7}
 801077a:	4770      	bx	lr

0801077c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801077c:	b480      	push	{r7}
 801077e:	b087      	sub	sp, #28
 8010780:	af00      	add	r7, sp, #0
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	607a      	str	r2, [r7, #4]
 8010788:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	6a1b      	ldr	r3, [r3, #32]
 801078e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	69db      	ldr	r3, [r3, #28]
 801079a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	6a1b      	ldr	r3, [r3, #32]
 80107a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	021b      	lsls	r3, r3, #8
 80107ae:	697a      	ldr	r2, [r7, #20]
 80107b0:	4313      	orrs	r3, r2
 80107b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80107ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	031b      	lsls	r3, r3, #12
 80107c0:	b29b      	uxth	r3, r3
 80107c2:	697a      	ldr	r2, [r7, #20]
 80107c4:	4313      	orrs	r3, r2
 80107c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80107ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	031b      	lsls	r3, r3, #12
 80107d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80107d8:	693a      	ldr	r2, [r7, #16]
 80107da:	4313      	orrs	r3, r2
 80107dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	697a      	ldr	r2, [r7, #20]
 80107e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	693a      	ldr	r2, [r7, #16]
 80107e8:	621a      	str	r2, [r3, #32]
}
 80107ea:	bf00      	nop
 80107ec:	371c      	adds	r7, #28
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bc80      	pop	{r7}
 80107f2:	4770      	bx	lr

080107f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b085      	sub	sp, #20
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	689b      	ldr	r3, [r3, #8]
 8010802:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801080a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801080c:	683a      	ldr	r2, [r7, #0]
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	4313      	orrs	r3, r2
 8010812:	f043 0307 	orr.w	r3, r3, #7
 8010816:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	68fa      	ldr	r2, [r7, #12]
 801081c:	609a      	str	r2, [r3, #8]
}
 801081e:	bf00      	nop
 8010820:	3714      	adds	r7, #20
 8010822:	46bd      	mov	sp, r7
 8010824:	bc80      	pop	{r7}
 8010826:	4770      	bx	lr

08010828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010828:	b480      	push	{r7}
 801082a:	b087      	sub	sp, #28
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]
 8010834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	689b      	ldr	r3, [r3, #8]
 801083a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	021a      	lsls	r2, r3, #8
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	431a      	orrs	r2, r3
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	4313      	orrs	r3, r2
 8010850:	697a      	ldr	r2, [r7, #20]
 8010852:	4313      	orrs	r3, r2
 8010854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	697a      	ldr	r2, [r7, #20]
 801085a:	609a      	str	r2, [r3, #8]
}
 801085c:	bf00      	nop
 801085e:	371c      	adds	r7, #28
 8010860:	46bd      	mov	sp, r7
 8010862:	bc80      	pop	{r7}
 8010864:	4770      	bx	lr

08010866 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010866:	b480      	push	{r7}
 8010868:	b087      	sub	sp, #28
 801086a:	af00      	add	r7, sp, #0
 801086c:	60f8      	str	r0, [r7, #12]
 801086e:	60b9      	str	r1, [r7, #8]
 8010870:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	f003 031f 	and.w	r3, r3, #31
 8010878:	2201      	movs	r2, #1
 801087a:	fa02 f303 	lsl.w	r3, r2, r3
 801087e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	6a1a      	ldr	r2, [r3, #32]
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	43db      	mvns	r3, r3
 8010888:	401a      	ands	r2, r3
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	6a1a      	ldr	r2, [r3, #32]
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	f003 031f 	and.w	r3, r3, #31
 8010898:	6879      	ldr	r1, [r7, #4]
 801089a:	fa01 f303 	lsl.w	r3, r1, r3
 801089e:	431a      	orrs	r2, r3
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	621a      	str	r2, [r3, #32]
}
 80108a4:	bf00      	nop
 80108a6:	371c      	adds	r7, #28
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bc80      	pop	{r7}
 80108ac:	4770      	bx	lr
	...

080108b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b085      	sub	sp, #20
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108c0:	2b01      	cmp	r3, #1
 80108c2:	d101      	bne.n	80108c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80108c4:	2302      	movs	r3, #2
 80108c6:	e046      	b.n	8010956 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2201      	movs	r2, #1
 80108cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2202      	movs	r2, #2
 80108d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	689b      	ldr	r3, [r3, #8]
 80108e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	68fa      	ldr	r2, [r7, #12]
 80108f6:	4313      	orrs	r3, r2
 80108f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	68fa      	ldr	r2, [r7, #12]
 8010900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4a16      	ldr	r2, [pc, #88]	; (8010960 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8010908:	4293      	cmp	r3, r2
 801090a:	d00e      	beq.n	801092a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010914:	d009      	beq.n	801092a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	4a12      	ldr	r2, [pc, #72]	; (8010964 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d004      	beq.n	801092a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4a10      	ldr	r2, [pc, #64]	; (8010968 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d10c      	bne.n	8010944 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	68ba      	ldr	r2, [r7, #8]
 8010938:	4313      	orrs	r3, r2
 801093a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	68ba      	ldr	r2, [r7, #8]
 8010942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2201      	movs	r2, #1
 8010948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010954:	2300      	movs	r3, #0
}
 8010956:	4618      	mov	r0, r3
 8010958:	3714      	adds	r7, #20
 801095a:	46bd      	mov	sp, r7
 801095c:	bc80      	pop	{r7}
 801095e:	4770      	bx	lr
 8010960:	40012c00 	.word	0x40012c00
 8010964:	40000400 	.word	0x40000400
 8010968:	40000800 	.word	0x40000800

0801096c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801096c:	b480      	push	{r7}
 801096e:	b083      	sub	sp, #12
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010974:	bf00      	nop
 8010976:	370c      	adds	r7, #12
 8010978:	46bd      	mov	sp, r7
 801097a:	bc80      	pop	{r7}
 801097c:	4770      	bx	lr

0801097e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801097e:	b480      	push	{r7}
 8010980:	b083      	sub	sp, #12
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010986:	bf00      	nop
 8010988:	370c      	adds	r7, #12
 801098a:	46bd      	mov	sp, r7
 801098c:	bc80      	pop	{r7}
 801098e:	4770      	bx	lr

08010990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d101      	bne.n	80109a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801099e:	2301      	movs	r3, #1
 80109a0:	e03f      	b.n	8010a22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80109a8:	b2db      	uxtb	r3, r3
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d106      	bne.n	80109bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2200      	movs	r2, #0
 80109b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f7fb fcd4 	bl	800c364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2224      	movs	r2, #36	; 0x24
 80109c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	68da      	ldr	r2, [r3, #12]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80109d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f000 fc95 	bl	8011304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	691a      	ldr	r2, [r3, #16]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80109e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	695a      	ldr	r2, [r3, #20]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80109f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	68da      	ldr	r2, [r3, #12]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2220      	movs	r2, #32
 8010a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2220      	movs	r2, #32
 8010a1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010a20:	2300      	movs	r3, #0
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3708      	adds	r7, #8
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b08a      	sub	sp, #40	; 0x28
 8010a2e:	af02      	add	r7, sp, #8
 8010a30:	60f8      	str	r0, [r7, #12]
 8010a32:	60b9      	str	r1, [r7, #8]
 8010a34:	603b      	str	r3, [r7, #0]
 8010a36:	4613      	mov	r3, r2
 8010a38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	2b20      	cmp	r3, #32
 8010a48:	d17c      	bne.n	8010b44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d002      	beq.n	8010a56 <HAL_UART_Transmit+0x2c>
 8010a50:	88fb      	ldrh	r3, [r7, #6]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d101      	bne.n	8010a5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010a56:	2301      	movs	r3, #1
 8010a58:	e075      	b.n	8010b46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	d101      	bne.n	8010a68 <HAL_UART_Transmit+0x3e>
 8010a64:	2302      	movs	r3, #2
 8010a66:	e06e      	b.n	8010b46 <HAL_UART_Transmit+0x11c>
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2200      	movs	r2, #0
 8010a74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2221      	movs	r2, #33	; 0x21
 8010a7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010a7e:	f7fb fe71 	bl	800c764 <HAL_GetTick>
 8010a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	88fa      	ldrh	r2, [r7, #6]
 8010a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	88fa      	ldrh	r2, [r7, #6]
 8010a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	689b      	ldr	r3, [r3, #8]
 8010a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a98:	d108      	bne.n	8010aac <HAL_UART_Transmit+0x82>
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	691b      	ldr	r3, [r3, #16]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d104      	bne.n	8010aac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	61bb      	str	r3, [r7, #24]
 8010aaa:	e003      	b.n	8010ab4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8010abc:	e02a      	b.n	8010b14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	9300      	str	r3, [sp, #0]
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	2180      	movs	r1, #128	; 0x80
 8010ac8:	68f8      	ldr	r0, [r7, #12]
 8010aca:	f000 faa3 	bl	8011014 <UART_WaitOnFlagUntilTimeout>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d001      	beq.n	8010ad8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8010ad4:	2303      	movs	r3, #3
 8010ad6:	e036      	b.n	8010b46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d10b      	bne.n	8010af6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010ade:	69bb      	ldr	r3, [r7, #24]
 8010ae0:	881b      	ldrh	r3, [r3, #0]
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010aee:	69bb      	ldr	r3, [r7, #24]
 8010af0:	3302      	adds	r3, #2
 8010af2:	61bb      	str	r3, [r7, #24]
 8010af4:	e007      	b.n	8010b06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	781a      	ldrb	r2, [r3, #0]
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	3301      	adds	r3, #1
 8010b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	3b01      	subs	r3, #1
 8010b0e:	b29a      	uxth	r2, r3
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d1cf      	bne.n	8010abe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	9300      	str	r3, [sp, #0]
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	2200      	movs	r2, #0
 8010b26:	2140      	movs	r1, #64	; 0x40
 8010b28:	68f8      	ldr	r0, [r7, #12]
 8010b2a:	f000 fa73 	bl	8011014 <UART_WaitOnFlagUntilTimeout>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d001      	beq.n	8010b38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010b34:	2303      	movs	r3, #3
 8010b36:	e006      	b.n	8010b46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2220      	movs	r2, #32
 8010b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8010b40:	2300      	movs	r3, #0
 8010b42:	e000      	b.n	8010b46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010b44:	2302      	movs	r3, #2
  }
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3720      	adds	r7, #32
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}

08010b4e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b4e:	b480      	push	{r7}
 8010b50:	b085      	sub	sp, #20
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	60f8      	str	r0, [r7, #12]
 8010b56:	60b9      	str	r1, [r7, #8]
 8010b58:	4613      	mov	r3, r2
 8010b5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	2b20      	cmp	r3, #32
 8010b66:	d130      	bne.n	8010bca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d002      	beq.n	8010b74 <HAL_UART_Transmit_IT+0x26>
 8010b6e:	88fb      	ldrh	r3, [r7, #6]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d101      	bne.n	8010b78 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8010b74:	2301      	movs	r3, #1
 8010b76:	e029      	b.n	8010bcc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010b7e:	2b01      	cmp	r3, #1
 8010b80:	d101      	bne.n	8010b86 <HAL_UART_Transmit_IT+0x38>
 8010b82:	2302      	movs	r3, #2
 8010b84:	e022      	b.n	8010bcc <HAL_UART_Transmit_IT+0x7e>
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2201      	movs	r2, #1
 8010b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	68ba      	ldr	r2, [r7, #8]
 8010b92:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	88fa      	ldrh	r2, [r7, #6]
 8010b98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	88fa      	ldrh	r2, [r7, #6]
 8010b9e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2221      	movs	r2, #33	; 0x21
 8010baa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	68da      	ldr	r2, [r3, #12]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010bc4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	e000      	b.n	8010bcc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8010bca:	2302      	movs	r3, #2
  }
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3714      	adds	r7, #20
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bc80      	pop	{r7}
 8010bd4:	4770      	bx	lr
	...

08010bd8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b086      	sub	sp, #24
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	4613      	mov	r3, r2
 8010be4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	2b20      	cmp	r3, #32
 8010bf0:	d166      	bne.n	8010cc0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <HAL_UART_Receive_DMA+0x26>
 8010bf8:	88fb      	ldrh	r3, [r7, #6]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d101      	bne.n	8010c02 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010bfe:	2301      	movs	r3, #1
 8010c00:	e05f      	b.n	8010cc2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	d101      	bne.n	8010c10 <HAL_UART_Receive_DMA+0x38>
 8010c0c:	2302      	movs	r3, #2
 8010c0e:	e058      	b.n	8010cc2 <HAL_UART_Receive_DMA+0xea>
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2201      	movs	r2, #1
 8010c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8010c18:	68ba      	ldr	r2, [r7, #8]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	88fa      	ldrh	r2, [r7, #6]
 8010c22:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	2200      	movs	r2, #0
 8010c28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2222      	movs	r2, #34	; 0x22
 8010c2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c36:	4a25      	ldr	r2, [pc, #148]	; (8010ccc <HAL_UART_Receive_DMA+0xf4>)
 8010c38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c3e:	4a24      	ldr	r2, [pc, #144]	; (8010cd0 <HAL_UART_Receive_DMA+0xf8>)
 8010c40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c46:	4a23      	ldr	r2, [pc, #140]	; (8010cd4 <HAL_UART_Receive_DMA+0xfc>)
 8010c48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c4e:	2200      	movs	r2, #0
 8010c50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8010c52:	f107 0308 	add.w	r3, r7, #8
 8010c56:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	3304      	adds	r3, #4
 8010c62:	4619      	mov	r1, r3
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	88fb      	ldrh	r3, [r7, #6]
 8010c6a:	f7fb ff15 	bl	800ca98 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8010c6e:	2300      	movs	r3, #0
 8010c70:	613b      	str	r3, [r7, #16]
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	613b      	str	r3, [r7, #16]
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	613b      	str	r3, [r7, #16]
 8010c82:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	2200      	movs	r2, #0
 8010c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	68da      	ldr	r2, [r3, #12]
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c9a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	695a      	ldr	r2, [r3, #20]
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	f042 0201 	orr.w	r2, r2, #1
 8010caa:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	695a      	ldr	r2, [r3, #20]
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010cba:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	e000      	b.n	8010cc2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010cc0:	2302      	movs	r3, #2
  }
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3718      	adds	r7, #24
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	08010efd 	.word	0x08010efd
 8010cd0:	08010f65 	.word	0x08010f65
 8010cd4:	08010f81 	.word	0x08010f81

08010cd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b088      	sub	sp, #32
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	68db      	ldr	r3, [r3, #12]
 8010cee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	695b      	ldr	r3, [r3, #20]
 8010cf6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	f003 030f 	and.w	r3, r3, #15
 8010d06:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010d08:	693b      	ldr	r3, [r7, #16]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d10d      	bne.n	8010d2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010d0e:	69fb      	ldr	r3, [r7, #28]
 8010d10:	f003 0320 	and.w	r3, r3, #32
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d008      	beq.n	8010d2a <HAL_UART_IRQHandler+0x52>
 8010d18:	69bb      	ldr	r3, [r7, #24]
 8010d1a:	f003 0320 	and.w	r3, r3, #32
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d003      	beq.n	8010d2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f000 fa6d 	bl	8011202 <UART_Receive_IT>
      return;
 8010d28:	e0d1      	b.n	8010ece <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f000 80b0 	beq.w	8010e92 <HAL_UART_IRQHandler+0x1ba>
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	f003 0301 	and.w	r3, r3, #1
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d105      	bne.n	8010d48 <HAL_UART_IRQHandler+0x70>
 8010d3c:	69bb      	ldr	r3, [r7, #24]
 8010d3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	f000 80a5 	beq.w	8010e92 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010d48:	69fb      	ldr	r3, [r7, #28]
 8010d4a:	f003 0301 	and.w	r3, r3, #1
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d00a      	beq.n	8010d68 <HAL_UART_IRQHandler+0x90>
 8010d52:	69bb      	ldr	r3, [r7, #24]
 8010d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d005      	beq.n	8010d68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d60:	f043 0201 	orr.w	r2, r3, #1
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010d68:	69fb      	ldr	r3, [r7, #28]
 8010d6a:	f003 0304 	and.w	r3, r3, #4
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d00a      	beq.n	8010d88 <HAL_UART_IRQHandler+0xb0>
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	f003 0301 	and.w	r3, r3, #1
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d005      	beq.n	8010d88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d80:	f043 0202 	orr.w	r2, r3, #2
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	f003 0302 	and.w	r3, r3, #2
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d00a      	beq.n	8010da8 <HAL_UART_IRQHandler+0xd0>
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	f003 0301 	and.w	r3, r3, #1
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d005      	beq.n	8010da8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010da0:	f043 0204 	orr.w	r2, r3, #4
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	f003 0308 	and.w	r3, r3, #8
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00f      	beq.n	8010dd2 <HAL_UART_IRQHandler+0xfa>
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	f003 0320 	and.w	r3, r3, #32
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d104      	bne.n	8010dc6 <HAL_UART_IRQHandler+0xee>
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	f003 0301 	and.w	r3, r3, #1
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d005      	beq.n	8010dd2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dca:	f043 0208 	orr.w	r2, r3, #8
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d078      	beq.n	8010ecc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	f003 0320 	and.w	r3, r3, #32
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d007      	beq.n	8010df4 <HAL_UART_IRQHandler+0x11c>
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	f003 0320 	and.w	r3, r3, #32
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d002      	beq.n	8010df4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f000 fa07 	bl	8011202 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	695b      	ldr	r3, [r3, #20]
 8010dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	bf14      	ite	ne
 8010e02:	2301      	movne	r3, #1
 8010e04:	2300      	moveq	r3, #0
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e0e:	f003 0308 	and.w	r3, r3, #8
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d102      	bne.n	8010e1c <HAL_UART_IRQHandler+0x144>
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d031      	beq.n	8010e80 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f000 f958 	bl	80110d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	695b      	ldr	r3, [r3, #20]
 8010e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d023      	beq.n	8010e78 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	695a      	ldr	r2, [r3, #20]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e3e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d013      	beq.n	8010e70 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4c:	4a21      	ldr	r2, [pc, #132]	; (8010ed4 <HAL_UART_IRQHandler+0x1fc>)
 8010e4e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7fb fe7f 	bl	800cb58 <HAL_DMA_Abort_IT>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d016      	beq.n	8010e8e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010e6a:	4610      	mov	r0, r2
 8010e6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e6e:	e00e      	b.n	8010e8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f7fb fa41 	bl	800c2f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e76:	e00a      	b.n	8010e8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f7fb fa3d 	bl	800c2f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e7e:	e006      	b.n	8010e8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7fb fa39 	bl	800c2f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010e8c:	e01e      	b.n	8010ecc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e8e:	bf00      	nop
    return;
 8010e90:	e01c      	b.n	8010ecc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d008      	beq.n	8010eae <HAL_UART_IRQHandler+0x1d6>
 8010e9c:	69bb      	ldr	r3, [r7, #24]
 8010e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d003      	beq.n	8010eae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f000 f944 	bl	8011134 <UART_Transmit_IT>
    return;
 8010eac:	e00f      	b.n	8010ece <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010eae:	69fb      	ldr	r3, [r7, #28]
 8010eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d00a      	beq.n	8010ece <HAL_UART_IRQHandler+0x1f6>
 8010eb8:	69bb      	ldr	r3, [r7, #24]
 8010eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d005      	beq.n	8010ece <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f000 f985 	bl	80111d2 <UART_EndTransmit_IT>
    return;
 8010ec8:	bf00      	nop
 8010eca:	e000      	b.n	8010ece <HAL_UART_IRQHandler+0x1f6>
    return;
 8010ecc:	bf00      	nop
  }
}
 8010ece:	3720      	adds	r7, #32
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	0801110d 	.word	0x0801110d

08010ed8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010ed8:	b480      	push	{r7}
 8010eda:	b083      	sub	sp, #12
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010ee0:	bf00      	nop
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bc80      	pop	{r7}
 8010ee8:	4770      	bx	lr

08010eea <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010eea:	b480      	push	{r7}
 8010eec:	b083      	sub	sp, #12
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010ef2:	bf00      	nop
 8010ef4:	370c      	adds	r7, #12
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bc80      	pop	{r7}
 8010efa:	4770      	bx	lr

08010efc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b084      	sub	sp, #16
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f08:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f003 0320 	and.w	r3, r3, #32
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d11e      	bne.n	8010f56 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	68da      	ldr	r2, [r3, #12]
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010f2c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	695a      	ldr	r2, [r3, #20]
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	f022 0201 	bic.w	r2, r2, #1
 8010f3c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	695a      	ldr	r2, [r3, #20]
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f4c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2220      	movs	r2, #32
 8010f52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010f56:	68f8      	ldr	r0, [r7, #12]
 8010f58:	f7fb f9fa 	bl	800c350 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f5c:	bf00      	nop
 8010f5e:	3710      	adds	r7, #16
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}

08010f64 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b084      	sub	sp, #16
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f70:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f7ff ffb9 	bl	8010eea <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f78:	bf00      	nop
 8010f7a:	3710      	adds	r7, #16
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f90:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	695b      	ldr	r3, [r3, #20]
 8010f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	bf14      	ite	ne
 8010fa0:	2301      	movne	r3, #1
 8010fa2:	2300      	moveq	r3, #0
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	2b21      	cmp	r3, #33	; 0x21
 8010fb2:	d108      	bne.n	8010fc6 <UART_DMAError+0x46>
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d005      	beq.n	8010fc6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010fc0:	68b8      	ldr	r0, [r7, #8]
 8010fc2:	f000 f871 	bl	80110a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	695b      	ldr	r3, [r3, #20]
 8010fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	bf14      	ite	ne
 8010fd4:	2301      	movne	r3, #1
 8010fd6:	2300      	moveq	r3, #0
 8010fd8:	b2db      	uxtb	r3, r3
 8010fda:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010fe2:	b2db      	uxtb	r3, r3
 8010fe4:	2b22      	cmp	r3, #34	; 0x22
 8010fe6:	d108      	bne.n	8010ffa <UART_DMAError+0x7a>
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d005      	beq.n	8010ffa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010ff4:	68b8      	ldr	r0, [r7, #8]
 8010ff6:	f000 f86c 	bl	80110d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ffe:	f043 0210 	orr.w	r2, r3, #16
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011006:	68b8      	ldr	r0, [r7, #8]
 8011008:	f7fb f976 	bl	800c2f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801100c:	bf00      	nop
 801100e:	3710      	adds	r7, #16
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	603b      	str	r3, [r7, #0]
 8011020:	4613      	mov	r3, r2
 8011022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011024:	e02c      	b.n	8011080 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011026:	69bb      	ldr	r3, [r7, #24]
 8011028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801102c:	d028      	beq.n	8011080 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801102e:	69bb      	ldr	r3, [r7, #24]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d007      	beq.n	8011044 <UART_WaitOnFlagUntilTimeout+0x30>
 8011034:	f7fb fb96 	bl	800c764 <HAL_GetTick>
 8011038:	4602      	mov	r2, r0
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	1ad3      	subs	r3, r2, r3
 801103e:	69ba      	ldr	r2, [r7, #24]
 8011040:	429a      	cmp	r2, r3
 8011042:	d21d      	bcs.n	8011080 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	68da      	ldr	r2, [r3, #12]
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011052:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	695a      	ldr	r2, [r3, #20]
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	f022 0201 	bic.w	r2, r2, #1
 8011062:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	2220      	movs	r2, #32
 8011068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	2220      	movs	r2, #32
 8011070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2200      	movs	r2, #0
 8011078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801107c:	2303      	movs	r3, #3
 801107e:	e00f      	b.n	80110a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	681a      	ldr	r2, [r3, #0]
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	4013      	ands	r3, r2
 801108a:	68ba      	ldr	r2, [r7, #8]
 801108c:	429a      	cmp	r2, r3
 801108e:	bf0c      	ite	eq
 8011090:	2301      	moveq	r3, #1
 8011092:	2300      	movne	r3, #0
 8011094:	b2db      	uxtb	r3, r3
 8011096:	461a      	mov	r2, r3
 8011098:	79fb      	ldrb	r3, [r7, #7]
 801109a:	429a      	cmp	r2, r3
 801109c:	d0c3      	beq.n	8011026 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3710      	adds	r7, #16
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	68da      	ldr	r2, [r3, #12]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80110be:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2220      	movs	r2, #32
 80110c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80110c8:	bf00      	nop
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bc80      	pop	{r7}
 80110d0:	4770      	bx	lr

080110d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80110d2:	b480      	push	{r7}
 80110d4:	b083      	sub	sp, #12
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	68da      	ldr	r2, [r3, #12]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80110e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	695a      	ldr	r2, [r3, #20]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f022 0201 	bic.w	r2, r2, #1
 80110f8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2220      	movs	r2, #32
 80110fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8011102:	bf00      	nop
 8011104:	370c      	adds	r7, #12
 8011106:	46bd      	mov	sp, r7
 8011108:	bc80      	pop	{r7}
 801110a:	4770      	bx	lr

0801110c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b084      	sub	sp, #16
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011118:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2200      	movs	r2, #0
 801111e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	2200      	movs	r2, #0
 8011124:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011126:	68f8      	ldr	r0, [r7, #12]
 8011128:	f7fb f8e6 	bl	800c2f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801112c:	bf00      	nop
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011134:	b480      	push	{r7}
 8011136:	b085      	sub	sp, #20
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011142:	b2db      	uxtb	r3, r3
 8011144:	2b21      	cmp	r3, #33	; 0x21
 8011146:	d13e      	bne.n	80111c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	689b      	ldr	r3, [r3, #8]
 801114c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011150:	d114      	bne.n	801117c <UART_Transmit_IT+0x48>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	691b      	ldr	r3, [r3, #16]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d110      	bne.n	801117c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6a1b      	ldr	r3, [r3, #32]
 801115e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	881b      	ldrh	r3, [r3, #0]
 8011164:	461a      	mov	r2, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801116e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6a1b      	ldr	r3, [r3, #32]
 8011174:	1c9a      	adds	r2, r3, #2
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	621a      	str	r2, [r3, #32]
 801117a:	e008      	b.n	801118e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6a1b      	ldr	r3, [r3, #32]
 8011180:	1c59      	adds	r1, r3, #1
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	6211      	str	r1, [r2, #32]
 8011186:	781a      	ldrb	r2, [r3, #0]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011192:	b29b      	uxth	r3, r3
 8011194:	3b01      	subs	r3, #1
 8011196:	b29b      	uxth	r3, r3
 8011198:	687a      	ldr	r2, [r7, #4]
 801119a:	4619      	mov	r1, r3
 801119c:	84d1      	strh	r1, [r2, #38]	; 0x26
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d10f      	bne.n	80111c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	68da      	ldr	r2, [r3, #12]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80111b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	68da      	ldr	r2, [r3, #12]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80111c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80111c2:	2300      	movs	r3, #0
 80111c4:	e000      	b.n	80111c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80111c6:	2302      	movs	r3, #2
  }
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3714      	adds	r7, #20
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bc80      	pop	{r7}
 80111d0:	4770      	bx	lr

080111d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b082      	sub	sp, #8
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	68da      	ldr	r2, [r3, #12]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80111e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2220      	movs	r2, #32
 80111ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f7ff fe70 	bl	8010ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3708      	adds	r7, #8
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b084      	sub	sp, #16
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011210:	b2db      	uxtb	r3, r3
 8011212:	2b22      	cmp	r3, #34	; 0x22
 8011214:	d170      	bne.n	80112f8 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	689b      	ldr	r3, [r3, #8]
 801121a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801121e:	d117      	bne.n	8011250 <UART_Receive_IT+0x4e>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	691b      	ldr	r3, [r3, #16]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d113      	bne.n	8011250 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8011228:	2300      	movs	r3, #0
 801122a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011230:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	b29b      	uxth	r3, r3
 801123a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801123e:	b29a      	uxth	r2, r3
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011248:	1c9a      	adds	r2, r3, #2
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	629a      	str	r2, [r3, #40]	; 0x28
 801124e:	e026      	b.n	801129e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011254:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8011256:	2300      	movs	r3, #0
 8011258:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	689b      	ldr	r3, [r3, #8]
 801125e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011262:	d007      	beq.n	8011274 <UART_Receive_IT+0x72>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	689b      	ldr	r3, [r3, #8]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d10a      	bne.n	8011282 <UART_Receive_IT+0x80>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	691b      	ldr	r3, [r3, #16]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d106      	bne.n	8011282 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	b2da      	uxtb	r2, r3
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	701a      	strb	r2, [r3, #0]
 8011280:	e008      	b.n	8011294 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	b2db      	uxtb	r3, r3
 801128a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801128e:	b2da      	uxtb	r2, r3
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011298:	1c5a      	adds	r2, r3, #1
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	3b01      	subs	r3, #1
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	687a      	ldr	r2, [r7, #4]
 80112aa:	4619      	mov	r1, r3
 80112ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d120      	bne.n	80112f4 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	68da      	ldr	r2, [r3, #12]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f022 0220 	bic.w	r2, r2, #32
 80112c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	68da      	ldr	r2, [r3, #12]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80112d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	695a      	ldr	r2, [r3, #20]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f022 0201 	bic.w	r2, r2, #1
 80112e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2220      	movs	r2, #32
 80112e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f7fb f830 	bl	800c350 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80112f0:	2300      	movs	r3, #0
 80112f2:	e002      	b.n	80112fa <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80112f4:	2300      	movs	r3, #0
 80112f6:	e000      	b.n	80112fa <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80112f8:	2302      	movs	r3, #2
  }
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3710      	adds	r7, #16
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
	...

08011304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	691b      	ldr	r3, [r3, #16]
 8011312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	68da      	ldr	r2, [r3, #12]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	430a      	orrs	r2, r1
 8011320:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	689a      	ldr	r2, [r3, #8]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	691b      	ldr	r3, [r3, #16]
 801132a:	431a      	orrs	r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	695b      	ldr	r3, [r3, #20]
 8011330:	4313      	orrs	r3, r2
 8011332:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 801133e:	f023 030c 	bic.w	r3, r3, #12
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	6812      	ldr	r2, [r2, #0]
 8011346:	68b9      	ldr	r1, [r7, #8]
 8011348:	430b      	orrs	r3, r1
 801134a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	695b      	ldr	r3, [r3, #20]
 8011352:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	699a      	ldr	r2, [r3, #24]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	430a      	orrs	r2, r1
 8011360:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	4a2c      	ldr	r2, [pc, #176]	; (8011418 <UART_SetConfig+0x114>)
 8011368:	4293      	cmp	r3, r2
 801136a:	d103      	bne.n	8011374 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 801136c:	f7fe f8e6 	bl	800f53c <HAL_RCC_GetPCLK2Freq>
 8011370:	60f8      	str	r0, [r7, #12]
 8011372:	e002      	b.n	801137a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8011374:	f7fe f8ce 	bl	800f514 <HAL_RCC_GetPCLK1Freq>
 8011378:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801137a:	68fa      	ldr	r2, [r7, #12]
 801137c:	4613      	mov	r3, r2
 801137e:	009b      	lsls	r3, r3, #2
 8011380:	4413      	add	r3, r2
 8011382:	009a      	lsls	r2, r3, #2
 8011384:	441a      	add	r2, r3
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011390:	4a22      	ldr	r2, [pc, #136]	; (801141c <UART_SetConfig+0x118>)
 8011392:	fba2 2303 	umull	r2, r3, r2, r3
 8011396:	095b      	lsrs	r3, r3, #5
 8011398:	0119      	lsls	r1, r3, #4
 801139a:	68fa      	ldr	r2, [r7, #12]
 801139c:	4613      	mov	r3, r2
 801139e:	009b      	lsls	r3, r3, #2
 80113a0:	4413      	add	r3, r2
 80113a2:	009a      	lsls	r2, r3, #2
 80113a4:	441a      	add	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80113b0:	4b1a      	ldr	r3, [pc, #104]	; (801141c <UART_SetConfig+0x118>)
 80113b2:	fba3 0302 	umull	r0, r3, r3, r2
 80113b6:	095b      	lsrs	r3, r3, #5
 80113b8:	2064      	movs	r0, #100	; 0x64
 80113ba:	fb00 f303 	mul.w	r3, r0, r3
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	011b      	lsls	r3, r3, #4
 80113c2:	3332      	adds	r3, #50	; 0x32
 80113c4:	4a15      	ldr	r2, [pc, #84]	; (801141c <UART_SetConfig+0x118>)
 80113c6:	fba2 2303 	umull	r2, r3, r2, r3
 80113ca:	095b      	lsrs	r3, r3, #5
 80113cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113d0:	4419      	add	r1, r3
 80113d2:	68fa      	ldr	r2, [r7, #12]
 80113d4:	4613      	mov	r3, r2
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	4413      	add	r3, r2
 80113da:	009a      	lsls	r2, r3, #2
 80113dc:	441a      	add	r2, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80113e8:	4b0c      	ldr	r3, [pc, #48]	; (801141c <UART_SetConfig+0x118>)
 80113ea:	fba3 0302 	umull	r0, r3, r3, r2
 80113ee:	095b      	lsrs	r3, r3, #5
 80113f0:	2064      	movs	r0, #100	; 0x64
 80113f2:	fb00 f303 	mul.w	r3, r0, r3
 80113f6:	1ad3      	subs	r3, r2, r3
 80113f8:	011b      	lsls	r3, r3, #4
 80113fa:	3332      	adds	r3, #50	; 0x32
 80113fc:	4a07      	ldr	r2, [pc, #28]	; (801141c <UART_SetConfig+0x118>)
 80113fe:	fba2 2303 	umull	r2, r3, r2, r3
 8011402:	095b      	lsrs	r3, r3, #5
 8011404:	f003 020f 	and.w	r2, r3, #15
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	440a      	add	r2, r1
 801140e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8011410:	bf00      	nop
 8011412:	3710      	adds	r7, #16
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	40013800 	.word	0x40013800
 801141c:	51eb851f 	.word	0x51eb851f

08011420 <main>:




int main(void)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	af00      	add	r7, sp, #0
  hwInit();
 8011424:	f7fb f912 	bl	800c64c <hwInit>
  apInit();
 8011428:	f7ef fee8 	bl	80011fc <apInit>

  apMain();
 801142c:	f7ef ff12 	bl	8001254 <apMain>

  return 0;
 8011430:	2300      	movs	r3, #0
}
 8011432:	4618      	mov	r0, r3
 8011434:	bd80      	pop	{r7, pc}

08011436 <atof>:
 8011436:	2100      	movs	r1, #0
 8011438:	f001 baf2 	b.w	8012a20 <strtod>

0801143c <__errno>:
 801143c:	4b01      	ldr	r3, [pc, #4]	; (8011444 <__errno+0x8>)
 801143e:	6818      	ldr	r0, [r3, #0]
 8011440:	4770      	bx	lr
 8011442:	bf00      	nop
 8011444:	20000060 	.word	0x20000060

08011448 <__libc_init_array>:
 8011448:	b570      	push	{r4, r5, r6, lr}
 801144a:	2500      	movs	r5, #0
 801144c:	4e0c      	ldr	r6, [pc, #48]	; (8011480 <__libc_init_array+0x38>)
 801144e:	4c0d      	ldr	r4, [pc, #52]	; (8011484 <__libc_init_array+0x3c>)
 8011450:	1ba4      	subs	r4, r4, r6
 8011452:	10a4      	asrs	r4, r4, #2
 8011454:	42a5      	cmp	r5, r4
 8011456:	d109      	bne.n	801146c <__libc_init_array+0x24>
 8011458:	f008 fb70 	bl	8019b3c <_init>
 801145c:	2500      	movs	r5, #0
 801145e:	4e0a      	ldr	r6, [pc, #40]	; (8011488 <__libc_init_array+0x40>)
 8011460:	4c0a      	ldr	r4, [pc, #40]	; (801148c <__libc_init_array+0x44>)
 8011462:	1ba4      	subs	r4, r4, r6
 8011464:	10a4      	asrs	r4, r4, #2
 8011466:	42a5      	cmp	r5, r4
 8011468:	d105      	bne.n	8011476 <__libc_init_array+0x2e>
 801146a:	bd70      	pop	{r4, r5, r6, pc}
 801146c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011470:	4798      	blx	r3
 8011472:	3501      	adds	r5, #1
 8011474:	e7ee      	b.n	8011454 <__libc_init_array+0xc>
 8011476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801147a:	4798      	blx	r3
 801147c:	3501      	adds	r5, #1
 801147e:	e7f2      	b.n	8011466 <__libc_init_array+0x1e>
 8011480:	0801a9a0 	.word	0x0801a9a0
 8011484:	0801a9a0 	.word	0x0801a9a0
 8011488:	0801a9a0 	.word	0x0801a9a0
 801148c:	0801a9a4 	.word	0x0801a9a4

08011490 <__locale_ctype_ptr_l>:
 8011490:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011494:	4770      	bx	lr
	...

08011498 <__locale_ctype_ptr>:
 8011498:	4b04      	ldr	r3, [pc, #16]	; (80114ac <__locale_ctype_ptr+0x14>)
 801149a:	4a05      	ldr	r2, [pc, #20]	; (80114b0 <__locale_ctype_ptr+0x18>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	6a1b      	ldr	r3, [r3, #32]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	bf08      	it	eq
 80114a4:	4613      	moveq	r3, r2
 80114a6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80114aa:	4770      	bx	lr
 80114ac:	20000060 	.word	0x20000060
 80114b0:	200000c4 	.word	0x200000c4

080114b4 <__ascii_mbtowc>:
 80114b4:	b082      	sub	sp, #8
 80114b6:	b901      	cbnz	r1, 80114ba <__ascii_mbtowc+0x6>
 80114b8:	a901      	add	r1, sp, #4
 80114ba:	b142      	cbz	r2, 80114ce <__ascii_mbtowc+0x1a>
 80114bc:	b14b      	cbz	r3, 80114d2 <__ascii_mbtowc+0x1e>
 80114be:	7813      	ldrb	r3, [r2, #0]
 80114c0:	600b      	str	r3, [r1, #0]
 80114c2:	7812      	ldrb	r2, [r2, #0]
 80114c4:	1c10      	adds	r0, r2, #0
 80114c6:	bf18      	it	ne
 80114c8:	2001      	movne	r0, #1
 80114ca:	b002      	add	sp, #8
 80114cc:	4770      	bx	lr
 80114ce:	4610      	mov	r0, r2
 80114d0:	e7fb      	b.n	80114ca <__ascii_mbtowc+0x16>
 80114d2:	f06f 0001 	mvn.w	r0, #1
 80114d6:	e7f8      	b.n	80114ca <__ascii_mbtowc+0x16>

080114d8 <memcpy>:
 80114d8:	b510      	push	{r4, lr}
 80114da:	1e43      	subs	r3, r0, #1
 80114dc:	440a      	add	r2, r1
 80114de:	4291      	cmp	r1, r2
 80114e0:	d100      	bne.n	80114e4 <memcpy+0xc>
 80114e2:	bd10      	pop	{r4, pc}
 80114e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114ec:	e7f7      	b.n	80114de <memcpy+0x6>

080114ee <memset>:
 80114ee:	4603      	mov	r3, r0
 80114f0:	4402      	add	r2, r0
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d100      	bne.n	80114f8 <memset+0xa>
 80114f6:	4770      	bx	lr
 80114f8:	f803 1b01 	strb.w	r1, [r3], #1
 80114fc:	e7f9      	b.n	80114f2 <memset+0x4>

080114fe <__cvt>:
 80114fe:	2b00      	cmp	r3, #0
 8011500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011504:	461e      	mov	r6, r3
 8011506:	bfbb      	ittet	lt
 8011508:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801150c:	461e      	movlt	r6, r3
 801150e:	2300      	movge	r3, #0
 8011510:	232d      	movlt	r3, #45	; 0x2d
 8011512:	b088      	sub	sp, #32
 8011514:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011516:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 801151a:	f027 0720 	bic.w	r7, r7, #32
 801151e:	2f46      	cmp	r7, #70	; 0x46
 8011520:	4614      	mov	r4, r2
 8011522:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011524:	700b      	strb	r3, [r1, #0]
 8011526:	d004      	beq.n	8011532 <__cvt+0x34>
 8011528:	2f45      	cmp	r7, #69	; 0x45
 801152a:	d100      	bne.n	801152e <__cvt+0x30>
 801152c:	3501      	adds	r5, #1
 801152e:	2302      	movs	r3, #2
 8011530:	e000      	b.n	8011534 <__cvt+0x36>
 8011532:	2303      	movs	r3, #3
 8011534:	aa07      	add	r2, sp, #28
 8011536:	9204      	str	r2, [sp, #16]
 8011538:	aa06      	add	r2, sp, #24
 801153a:	e9cd a202 	strd	sl, r2, [sp, #8]
 801153e:	e9cd 3500 	strd	r3, r5, [sp]
 8011542:	4622      	mov	r2, r4
 8011544:	4633      	mov	r3, r6
 8011546:	f001 fc5f 	bl	8012e08 <_dtoa_r>
 801154a:	2f47      	cmp	r7, #71	; 0x47
 801154c:	4680      	mov	r8, r0
 801154e:	d102      	bne.n	8011556 <__cvt+0x58>
 8011550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011552:	07db      	lsls	r3, r3, #31
 8011554:	d526      	bpl.n	80115a4 <__cvt+0xa6>
 8011556:	2f46      	cmp	r7, #70	; 0x46
 8011558:	eb08 0905 	add.w	r9, r8, r5
 801155c:	d111      	bne.n	8011582 <__cvt+0x84>
 801155e:	f898 3000 	ldrb.w	r3, [r8]
 8011562:	2b30      	cmp	r3, #48	; 0x30
 8011564:	d10a      	bne.n	801157c <__cvt+0x7e>
 8011566:	2200      	movs	r2, #0
 8011568:	2300      	movs	r3, #0
 801156a:	4620      	mov	r0, r4
 801156c:	4631      	mov	r1, r6
 801156e:	f7ef fa35 	bl	80009dc <__aeabi_dcmpeq>
 8011572:	b918      	cbnz	r0, 801157c <__cvt+0x7e>
 8011574:	f1c5 0501 	rsb	r5, r5, #1
 8011578:	f8ca 5000 	str.w	r5, [sl]
 801157c:	f8da 3000 	ldr.w	r3, [sl]
 8011580:	4499      	add	r9, r3
 8011582:	2200      	movs	r2, #0
 8011584:	2300      	movs	r3, #0
 8011586:	4620      	mov	r0, r4
 8011588:	4631      	mov	r1, r6
 801158a:	f7ef fa27 	bl	80009dc <__aeabi_dcmpeq>
 801158e:	b938      	cbnz	r0, 80115a0 <__cvt+0xa2>
 8011590:	2230      	movs	r2, #48	; 0x30
 8011592:	9b07      	ldr	r3, [sp, #28]
 8011594:	454b      	cmp	r3, r9
 8011596:	d205      	bcs.n	80115a4 <__cvt+0xa6>
 8011598:	1c59      	adds	r1, r3, #1
 801159a:	9107      	str	r1, [sp, #28]
 801159c:	701a      	strb	r2, [r3, #0]
 801159e:	e7f8      	b.n	8011592 <__cvt+0x94>
 80115a0:	f8cd 901c 	str.w	r9, [sp, #28]
 80115a4:	4640      	mov	r0, r8
 80115a6:	9b07      	ldr	r3, [sp, #28]
 80115a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80115aa:	eba3 0308 	sub.w	r3, r3, r8
 80115ae:	6013      	str	r3, [r2, #0]
 80115b0:	b008      	add	sp, #32
 80115b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080115b6 <__exponent>:
 80115b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115b8:	2900      	cmp	r1, #0
 80115ba:	bfb4      	ite	lt
 80115bc:	232d      	movlt	r3, #45	; 0x2d
 80115be:	232b      	movge	r3, #43	; 0x2b
 80115c0:	4604      	mov	r4, r0
 80115c2:	bfb8      	it	lt
 80115c4:	4249      	neglt	r1, r1
 80115c6:	2909      	cmp	r1, #9
 80115c8:	f804 2b02 	strb.w	r2, [r4], #2
 80115cc:	7043      	strb	r3, [r0, #1]
 80115ce:	dd21      	ble.n	8011614 <__exponent+0x5e>
 80115d0:	f10d 0307 	add.w	r3, sp, #7
 80115d4:	461f      	mov	r7, r3
 80115d6:	260a      	movs	r6, #10
 80115d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80115dc:	fb06 1115 	mls	r1, r6, r5, r1
 80115e0:	2d09      	cmp	r5, #9
 80115e2:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80115e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80115ea:	f103 32ff 	add.w	r2, r3, #4294967295
 80115ee:	4629      	mov	r1, r5
 80115f0:	dc09      	bgt.n	8011606 <__exponent+0x50>
 80115f2:	3130      	adds	r1, #48	; 0x30
 80115f4:	3b02      	subs	r3, #2
 80115f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80115fa:	42bb      	cmp	r3, r7
 80115fc:	4622      	mov	r2, r4
 80115fe:	d304      	bcc.n	801160a <__exponent+0x54>
 8011600:	1a10      	subs	r0, r2, r0
 8011602:	b003      	add	sp, #12
 8011604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011606:	4613      	mov	r3, r2
 8011608:	e7e6      	b.n	80115d8 <__exponent+0x22>
 801160a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801160e:	f804 2b01 	strb.w	r2, [r4], #1
 8011612:	e7f2      	b.n	80115fa <__exponent+0x44>
 8011614:	2330      	movs	r3, #48	; 0x30
 8011616:	4419      	add	r1, r3
 8011618:	7083      	strb	r3, [r0, #2]
 801161a:	1d02      	adds	r2, r0, #4
 801161c:	70c1      	strb	r1, [r0, #3]
 801161e:	e7ef      	b.n	8011600 <__exponent+0x4a>

08011620 <_printf_float>:
 8011620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011624:	b091      	sub	sp, #68	; 0x44
 8011626:	460c      	mov	r4, r1
 8011628:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801162a:	4693      	mov	fp, r2
 801162c:	461e      	mov	r6, r3
 801162e:	4605      	mov	r5, r0
 8011630:	f002 fd92 	bl	8014158 <_localeconv_r>
 8011634:	6803      	ldr	r3, [r0, #0]
 8011636:	4618      	mov	r0, r3
 8011638:	9309      	str	r3, [sp, #36]	; 0x24
 801163a:	f7ee fda3 	bl	8000184 <strlen>
 801163e:	2300      	movs	r3, #0
 8011640:	930e      	str	r3, [sp, #56]	; 0x38
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	900a      	str	r0, [sp, #40]	; 0x28
 8011646:	3307      	adds	r3, #7
 8011648:	f023 0307 	bic.w	r3, r3, #7
 801164c:	f103 0208 	add.w	r2, r3, #8
 8011650:	f894 8018 	ldrb.w	r8, [r4, #24]
 8011654:	f8d4 a000 	ldr.w	sl, [r4]
 8011658:	603a      	str	r2, [r7, #0]
 801165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011662:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8011666:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801166a:	930b      	str	r3, [sp, #44]	; 0x2c
 801166c:	f04f 32ff 	mov.w	r2, #4294967295
 8011670:	4ba6      	ldr	r3, [pc, #664]	; (801190c <_printf_float+0x2ec>)
 8011672:	4638      	mov	r0, r7
 8011674:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011676:	f7ef f9e3 	bl	8000a40 <__aeabi_dcmpun>
 801167a:	bb68      	cbnz	r0, 80116d8 <_printf_float+0xb8>
 801167c:	f04f 32ff 	mov.w	r2, #4294967295
 8011680:	4ba2      	ldr	r3, [pc, #648]	; (801190c <_printf_float+0x2ec>)
 8011682:	4638      	mov	r0, r7
 8011684:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011686:	f7ef f9bd 	bl	8000a04 <__aeabi_dcmple>
 801168a:	bb28      	cbnz	r0, 80116d8 <_printf_float+0xb8>
 801168c:	2200      	movs	r2, #0
 801168e:	2300      	movs	r3, #0
 8011690:	4638      	mov	r0, r7
 8011692:	4649      	mov	r1, r9
 8011694:	f7ef f9ac 	bl	80009f0 <__aeabi_dcmplt>
 8011698:	b110      	cbz	r0, 80116a0 <_printf_float+0x80>
 801169a:	232d      	movs	r3, #45	; 0x2d
 801169c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116a0:	4f9b      	ldr	r7, [pc, #620]	; (8011910 <_printf_float+0x2f0>)
 80116a2:	4b9c      	ldr	r3, [pc, #624]	; (8011914 <_printf_float+0x2f4>)
 80116a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80116a8:	bf98      	it	ls
 80116aa:	461f      	movls	r7, r3
 80116ac:	2303      	movs	r3, #3
 80116ae:	f04f 0900 	mov.w	r9, #0
 80116b2:	6123      	str	r3, [r4, #16]
 80116b4:	f02a 0304 	bic.w	r3, sl, #4
 80116b8:	6023      	str	r3, [r4, #0]
 80116ba:	9600      	str	r6, [sp, #0]
 80116bc:	465b      	mov	r3, fp
 80116be:	aa0f      	add	r2, sp, #60	; 0x3c
 80116c0:	4621      	mov	r1, r4
 80116c2:	4628      	mov	r0, r5
 80116c4:	f000 f9e2 	bl	8011a8c <_printf_common>
 80116c8:	3001      	adds	r0, #1
 80116ca:	f040 8090 	bne.w	80117ee <_printf_float+0x1ce>
 80116ce:	f04f 30ff 	mov.w	r0, #4294967295
 80116d2:	b011      	add	sp, #68	; 0x44
 80116d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116d8:	463a      	mov	r2, r7
 80116da:	464b      	mov	r3, r9
 80116dc:	4638      	mov	r0, r7
 80116de:	4649      	mov	r1, r9
 80116e0:	f7ef f9ae 	bl	8000a40 <__aeabi_dcmpun>
 80116e4:	b110      	cbz	r0, 80116ec <_printf_float+0xcc>
 80116e6:	4f8c      	ldr	r7, [pc, #560]	; (8011918 <_printf_float+0x2f8>)
 80116e8:	4b8c      	ldr	r3, [pc, #560]	; (801191c <_printf_float+0x2fc>)
 80116ea:	e7db      	b.n	80116a4 <_printf_float+0x84>
 80116ec:	6863      	ldr	r3, [r4, #4]
 80116ee:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80116f2:	1c59      	adds	r1, r3, #1
 80116f4:	a80d      	add	r0, sp, #52	; 0x34
 80116f6:	a90e      	add	r1, sp, #56	; 0x38
 80116f8:	d140      	bne.n	801177c <_printf_float+0x15c>
 80116fa:	2306      	movs	r3, #6
 80116fc:	6063      	str	r3, [r4, #4]
 80116fe:	f04f 0c00 	mov.w	ip, #0
 8011702:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8011706:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801170a:	6863      	ldr	r3, [r4, #4]
 801170c:	6022      	str	r2, [r4, #0]
 801170e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8011712:	9300      	str	r3, [sp, #0]
 8011714:	463a      	mov	r2, r7
 8011716:	464b      	mov	r3, r9
 8011718:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 801171c:	4628      	mov	r0, r5
 801171e:	f7ff feee 	bl	80114fe <__cvt>
 8011722:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8011726:	2b47      	cmp	r3, #71	; 0x47
 8011728:	4607      	mov	r7, r0
 801172a:	d109      	bne.n	8011740 <_printf_float+0x120>
 801172c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801172e:	1cd8      	adds	r0, r3, #3
 8011730:	db02      	blt.n	8011738 <_printf_float+0x118>
 8011732:	6862      	ldr	r2, [r4, #4]
 8011734:	4293      	cmp	r3, r2
 8011736:	dd47      	ble.n	80117c8 <_printf_float+0x1a8>
 8011738:	f1a8 0802 	sub.w	r8, r8, #2
 801173c:	fa5f f888 	uxtb.w	r8, r8
 8011740:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8011744:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011746:	d824      	bhi.n	8011792 <_printf_float+0x172>
 8011748:	3901      	subs	r1, #1
 801174a:	4642      	mov	r2, r8
 801174c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011750:	910d      	str	r1, [sp, #52]	; 0x34
 8011752:	f7ff ff30 	bl	80115b6 <__exponent>
 8011756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011758:	4681      	mov	r9, r0
 801175a:	1813      	adds	r3, r2, r0
 801175c:	2a01      	cmp	r2, #1
 801175e:	6123      	str	r3, [r4, #16]
 8011760:	dc02      	bgt.n	8011768 <_printf_float+0x148>
 8011762:	6822      	ldr	r2, [r4, #0]
 8011764:	07d1      	lsls	r1, r2, #31
 8011766:	d501      	bpl.n	801176c <_printf_float+0x14c>
 8011768:	3301      	adds	r3, #1
 801176a:	6123      	str	r3, [r4, #16]
 801176c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011770:	2b00      	cmp	r3, #0
 8011772:	d0a2      	beq.n	80116ba <_printf_float+0x9a>
 8011774:	232d      	movs	r3, #45	; 0x2d
 8011776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801177a:	e79e      	b.n	80116ba <_printf_float+0x9a>
 801177c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8011780:	f000 816e 	beq.w	8011a60 <_printf_float+0x440>
 8011784:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011788:	d1b9      	bne.n	80116fe <_printf_float+0xde>
 801178a:	2b00      	cmp	r3, #0
 801178c:	d1b7      	bne.n	80116fe <_printf_float+0xde>
 801178e:	2301      	movs	r3, #1
 8011790:	e7b4      	b.n	80116fc <_printf_float+0xdc>
 8011792:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8011796:	d119      	bne.n	80117cc <_printf_float+0x1ac>
 8011798:	2900      	cmp	r1, #0
 801179a:	6863      	ldr	r3, [r4, #4]
 801179c:	dd0c      	ble.n	80117b8 <_printf_float+0x198>
 801179e:	6121      	str	r1, [r4, #16]
 80117a0:	b913      	cbnz	r3, 80117a8 <_printf_float+0x188>
 80117a2:	6822      	ldr	r2, [r4, #0]
 80117a4:	07d2      	lsls	r2, r2, #31
 80117a6:	d502      	bpl.n	80117ae <_printf_float+0x18e>
 80117a8:	3301      	adds	r3, #1
 80117aa:	440b      	add	r3, r1
 80117ac:	6123      	str	r3, [r4, #16]
 80117ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117b0:	f04f 0900 	mov.w	r9, #0
 80117b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80117b6:	e7d9      	b.n	801176c <_printf_float+0x14c>
 80117b8:	b913      	cbnz	r3, 80117c0 <_printf_float+0x1a0>
 80117ba:	6822      	ldr	r2, [r4, #0]
 80117bc:	07d0      	lsls	r0, r2, #31
 80117be:	d501      	bpl.n	80117c4 <_printf_float+0x1a4>
 80117c0:	3302      	adds	r3, #2
 80117c2:	e7f3      	b.n	80117ac <_printf_float+0x18c>
 80117c4:	2301      	movs	r3, #1
 80117c6:	e7f1      	b.n	80117ac <_printf_float+0x18c>
 80117c8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80117cc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80117d0:	4293      	cmp	r3, r2
 80117d2:	db05      	blt.n	80117e0 <_printf_float+0x1c0>
 80117d4:	6822      	ldr	r2, [r4, #0]
 80117d6:	6123      	str	r3, [r4, #16]
 80117d8:	07d1      	lsls	r1, r2, #31
 80117da:	d5e8      	bpl.n	80117ae <_printf_float+0x18e>
 80117dc:	3301      	adds	r3, #1
 80117de:	e7e5      	b.n	80117ac <_printf_float+0x18c>
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	bfcc      	ite	gt
 80117e4:	2301      	movgt	r3, #1
 80117e6:	f1c3 0302 	rsble	r3, r3, #2
 80117ea:	4413      	add	r3, r2
 80117ec:	e7de      	b.n	80117ac <_printf_float+0x18c>
 80117ee:	6823      	ldr	r3, [r4, #0]
 80117f0:	055a      	lsls	r2, r3, #21
 80117f2:	d407      	bmi.n	8011804 <_printf_float+0x1e4>
 80117f4:	6923      	ldr	r3, [r4, #16]
 80117f6:	463a      	mov	r2, r7
 80117f8:	4659      	mov	r1, fp
 80117fa:	4628      	mov	r0, r5
 80117fc:	47b0      	blx	r6
 80117fe:	3001      	adds	r0, #1
 8011800:	d129      	bne.n	8011856 <_printf_float+0x236>
 8011802:	e764      	b.n	80116ce <_printf_float+0xae>
 8011804:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8011808:	f240 80d7 	bls.w	80119ba <_printf_float+0x39a>
 801180c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011810:	2200      	movs	r2, #0
 8011812:	2300      	movs	r3, #0
 8011814:	f7ef f8e2 	bl	80009dc <__aeabi_dcmpeq>
 8011818:	b388      	cbz	r0, 801187e <_printf_float+0x25e>
 801181a:	2301      	movs	r3, #1
 801181c:	4a40      	ldr	r2, [pc, #256]	; (8011920 <_printf_float+0x300>)
 801181e:	4659      	mov	r1, fp
 8011820:	4628      	mov	r0, r5
 8011822:	47b0      	blx	r6
 8011824:	3001      	adds	r0, #1
 8011826:	f43f af52 	beq.w	80116ce <_printf_float+0xae>
 801182a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801182e:	429a      	cmp	r2, r3
 8011830:	db02      	blt.n	8011838 <_printf_float+0x218>
 8011832:	6823      	ldr	r3, [r4, #0]
 8011834:	07d8      	lsls	r0, r3, #31
 8011836:	d50e      	bpl.n	8011856 <_printf_float+0x236>
 8011838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801183c:	4659      	mov	r1, fp
 801183e:	4628      	mov	r0, r5
 8011840:	47b0      	blx	r6
 8011842:	3001      	adds	r0, #1
 8011844:	f43f af43 	beq.w	80116ce <_printf_float+0xae>
 8011848:	2700      	movs	r7, #0
 801184a:	f104 081a 	add.w	r8, r4, #26
 801184e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011850:	3b01      	subs	r3, #1
 8011852:	42bb      	cmp	r3, r7
 8011854:	dc09      	bgt.n	801186a <_printf_float+0x24a>
 8011856:	6823      	ldr	r3, [r4, #0]
 8011858:	079f      	lsls	r7, r3, #30
 801185a:	f100 80fd 	bmi.w	8011a58 <_printf_float+0x438>
 801185e:	68e0      	ldr	r0, [r4, #12]
 8011860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011862:	4298      	cmp	r0, r3
 8011864:	bfb8      	it	lt
 8011866:	4618      	movlt	r0, r3
 8011868:	e733      	b.n	80116d2 <_printf_float+0xb2>
 801186a:	2301      	movs	r3, #1
 801186c:	4642      	mov	r2, r8
 801186e:	4659      	mov	r1, fp
 8011870:	4628      	mov	r0, r5
 8011872:	47b0      	blx	r6
 8011874:	3001      	adds	r0, #1
 8011876:	f43f af2a 	beq.w	80116ce <_printf_float+0xae>
 801187a:	3701      	adds	r7, #1
 801187c:	e7e7      	b.n	801184e <_printf_float+0x22e>
 801187e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011880:	2b00      	cmp	r3, #0
 8011882:	dc2b      	bgt.n	80118dc <_printf_float+0x2bc>
 8011884:	2301      	movs	r3, #1
 8011886:	4a26      	ldr	r2, [pc, #152]	; (8011920 <_printf_float+0x300>)
 8011888:	4659      	mov	r1, fp
 801188a:	4628      	mov	r0, r5
 801188c:	47b0      	blx	r6
 801188e:	3001      	adds	r0, #1
 8011890:	f43f af1d 	beq.w	80116ce <_printf_float+0xae>
 8011894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011896:	b923      	cbnz	r3, 80118a2 <_printf_float+0x282>
 8011898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801189a:	b913      	cbnz	r3, 80118a2 <_printf_float+0x282>
 801189c:	6823      	ldr	r3, [r4, #0]
 801189e:	07d9      	lsls	r1, r3, #31
 80118a0:	d5d9      	bpl.n	8011856 <_printf_float+0x236>
 80118a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118a6:	4659      	mov	r1, fp
 80118a8:	4628      	mov	r0, r5
 80118aa:	47b0      	blx	r6
 80118ac:	3001      	adds	r0, #1
 80118ae:	f43f af0e 	beq.w	80116ce <_printf_float+0xae>
 80118b2:	f04f 0800 	mov.w	r8, #0
 80118b6:	f104 091a 	add.w	r9, r4, #26
 80118ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118bc:	425b      	negs	r3, r3
 80118be:	4543      	cmp	r3, r8
 80118c0:	dc01      	bgt.n	80118c6 <_printf_float+0x2a6>
 80118c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118c4:	e797      	b.n	80117f6 <_printf_float+0x1d6>
 80118c6:	2301      	movs	r3, #1
 80118c8:	464a      	mov	r2, r9
 80118ca:	4659      	mov	r1, fp
 80118cc:	4628      	mov	r0, r5
 80118ce:	47b0      	blx	r6
 80118d0:	3001      	adds	r0, #1
 80118d2:	f43f aefc 	beq.w	80116ce <_printf_float+0xae>
 80118d6:	f108 0801 	add.w	r8, r8, #1
 80118da:	e7ee      	b.n	80118ba <_printf_float+0x29a>
 80118dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80118e0:	429a      	cmp	r2, r3
 80118e2:	bfa8      	it	ge
 80118e4:	461a      	movge	r2, r3
 80118e6:	2a00      	cmp	r2, #0
 80118e8:	4690      	mov	r8, r2
 80118ea:	dd07      	ble.n	80118fc <_printf_float+0x2dc>
 80118ec:	4613      	mov	r3, r2
 80118ee:	4659      	mov	r1, fp
 80118f0:	463a      	mov	r2, r7
 80118f2:	4628      	mov	r0, r5
 80118f4:	47b0      	blx	r6
 80118f6:	3001      	adds	r0, #1
 80118f8:	f43f aee9 	beq.w	80116ce <_printf_float+0xae>
 80118fc:	f104 031a 	add.w	r3, r4, #26
 8011900:	f04f 0a00 	mov.w	sl, #0
 8011904:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8011908:	930b      	str	r3, [sp, #44]	; 0x2c
 801190a:	e015      	b.n	8011938 <_printf_float+0x318>
 801190c:	7fefffff 	.word	0x7fefffff
 8011910:	0801a318 	.word	0x0801a318
 8011914:	08019ffa 	.word	0x08019ffa
 8011918:	0801a002 	.word	0x0801a002
 801191c:	08019ffe 	.word	0x08019ffe
 8011920:	0801a006 	.word	0x0801a006
 8011924:	2301      	movs	r3, #1
 8011926:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011928:	4659      	mov	r1, fp
 801192a:	4628      	mov	r0, r5
 801192c:	47b0      	blx	r6
 801192e:	3001      	adds	r0, #1
 8011930:	f43f aecd 	beq.w	80116ce <_printf_float+0xae>
 8011934:	f10a 0a01 	add.w	sl, sl, #1
 8011938:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801193c:	eba9 0308 	sub.w	r3, r9, r8
 8011940:	4553      	cmp	r3, sl
 8011942:	dcef      	bgt.n	8011924 <_printf_float+0x304>
 8011944:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011948:	429a      	cmp	r2, r3
 801194a:	444f      	add	r7, r9
 801194c:	db14      	blt.n	8011978 <_printf_float+0x358>
 801194e:	6823      	ldr	r3, [r4, #0]
 8011950:	07da      	lsls	r2, r3, #31
 8011952:	d411      	bmi.n	8011978 <_printf_float+0x358>
 8011954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011956:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011958:	eba3 0209 	sub.w	r2, r3, r9
 801195c:	eba3 0901 	sub.w	r9, r3, r1
 8011960:	4591      	cmp	r9, r2
 8011962:	bfa8      	it	ge
 8011964:	4691      	movge	r9, r2
 8011966:	f1b9 0f00 	cmp.w	r9, #0
 801196a:	dc0d      	bgt.n	8011988 <_printf_float+0x368>
 801196c:	2700      	movs	r7, #0
 801196e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011972:	f104 081a 	add.w	r8, r4, #26
 8011976:	e018      	b.n	80119aa <_printf_float+0x38a>
 8011978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801197c:	4659      	mov	r1, fp
 801197e:	4628      	mov	r0, r5
 8011980:	47b0      	blx	r6
 8011982:	3001      	adds	r0, #1
 8011984:	d1e6      	bne.n	8011954 <_printf_float+0x334>
 8011986:	e6a2      	b.n	80116ce <_printf_float+0xae>
 8011988:	464b      	mov	r3, r9
 801198a:	463a      	mov	r2, r7
 801198c:	4659      	mov	r1, fp
 801198e:	4628      	mov	r0, r5
 8011990:	47b0      	blx	r6
 8011992:	3001      	adds	r0, #1
 8011994:	d1ea      	bne.n	801196c <_printf_float+0x34c>
 8011996:	e69a      	b.n	80116ce <_printf_float+0xae>
 8011998:	2301      	movs	r3, #1
 801199a:	4642      	mov	r2, r8
 801199c:	4659      	mov	r1, fp
 801199e:	4628      	mov	r0, r5
 80119a0:	47b0      	blx	r6
 80119a2:	3001      	adds	r0, #1
 80119a4:	f43f ae93 	beq.w	80116ce <_printf_float+0xae>
 80119a8:	3701      	adds	r7, #1
 80119aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80119ae:	1a9b      	subs	r3, r3, r2
 80119b0:	eba3 0309 	sub.w	r3, r3, r9
 80119b4:	42bb      	cmp	r3, r7
 80119b6:	dcef      	bgt.n	8011998 <_printf_float+0x378>
 80119b8:	e74d      	b.n	8011856 <_printf_float+0x236>
 80119ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119bc:	2a01      	cmp	r2, #1
 80119be:	dc01      	bgt.n	80119c4 <_printf_float+0x3a4>
 80119c0:	07db      	lsls	r3, r3, #31
 80119c2:	d538      	bpl.n	8011a36 <_printf_float+0x416>
 80119c4:	2301      	movs	r3, #1
 80119c6:	463a      	mov	r2, r7
 80119c8:	4659      	mov	r1, fp
 80119ca:	4628      	mov	r0, r5
 80119cc:	47b0      	blx	r6
 80119ce:	3001      	adds	r0, #1
 80119d0:	f43f ae7d 	beq.w	80116ce <_printf_float+0xae>
 80119d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119d8:	4659      	mov	r1, fp
 80119da:	4628      	mov	r0, r5
 80119dc:	47b0      	blx	r6
 80119de:	3001      	adds	r0, #1
 80119e0:	f107 0701 	add.w	r7, r7, #1
 80119e4:	f43f ae73 	beq.w	80116ce <_printf_float+0xae>
 80119e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119ee:	2200      	movs	r2, #0
 80119f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80119f4:	2300      	movs	r3, #0
 80119f6:	f7ee fff1 	bl	80009dc <__aeabi_dcmpeq>
 80119fa:	b9c0      	cbnz	r0, 8011a2e <_printf_float+0x40e>
 80119fc:	4643      	mov	r3, r8
 80119fe:	463a      	mov	r2, r7
 8011a00:	4659      	mov	r1, fp
 8011a02:	4628      	mov	r0, r5
 8011a04:	47b0      	blx	r6
 8011a06:	3001      	adds	r0, #1
 8011a08:	d10d      	bne.n	8011a26 <_printf_float+0x406>
 8011a0a:	e660      	b.n	80116ce <_printf_float+0xae>
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	4642      	mov	r2, r8
 8011a10:	4659      	mov	r1, fp
 8011a12:	4628      	mov	r0, r5
 8011a14:	47b0      	blx	r6
 8011a16:	3001      	adds	r0, #1
 8011a18:	f43f ae59 	beq.w	80116ce <_printf_float+0xae>
 8011a1c:	3701      	adds	r7, #1
 8011a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a20:	3b01      	subs	r3, #1
 8011a22:	42bb      	cmp	r3, r7
 8011a24:	dcf2      	bgt.n	8011a0c <_printf_float+0x3ec>
 8011a26:	464b      	mov	r3, r9
 8011a28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011a2c:	e6e4      	b.n	80117f8 <_printf_float+0x1d8>
 8011a2e:	2700      	movs	r7, #0
 8011a30:	f104 081a 	add.w	r8, r4, #26
 8011a34:	e7f3      	b.n	8011a1e <_printf_float+0x3fe>
 8011a36:	2301      	movs	r3, #1
 8011a38:	e7e1      	b.n	80119fe <_printf_float+0x3de>
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	4642      	mov	r2, r8
 8011a3e:	4659      	mov	r1, fp
 8011a40:	4628      	mov	r0, r5
 8011a42:	47b0      	blx	r6
 8011a44:	3001      	adds	r0, #1
 8011a46:	f43f ae42 	beq.w	80116ce <_printf_float+0xae>
 8011a4a:	3701      	adds	r7, #1
 8011a4c:	68e3      	ldr	r3, [r4, #12]
 8011a4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a50:	1a9b      	subs	r3, r3, r2
 8011a52:	42bb      	cmp	r3, r7
 8011a54:	dcf1      	bgt.n	8011a3a <_printf_float+0x41a>
 8011a56:	e702      	b.n	801185e <_printf_float+0x23e>
 8011a58:	2700      	movs	r7, #0
 8011a5a:	f104 0819 	add.w	r8, r4, #25
 8011a5e:	e7f5      	b.n	8011a4c <_printf_float+0x42c>
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	f43f ae94 	beq.w	801178e <_printf_float+0x16e>
 8011a66:	f04f 0c00 	mov.w	ip, #0
 8011a6a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8011a6e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8011a72:	6022      	str	r2, [r4, #0]
 8011a74:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8011a78:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011a7c:	9300      	str	r3, [sp, #0]
 8011a7e:	463a      	mov	r2, r7
 8011a80:	464b      	mov	r3, r9
 8011a82:	4628      	mov	r0, r5
 8011a84:	f7ff fd3b 	bl	80114fe <__cvt>
 8011a88:	4607      	mov	r7, r0
 8011a8a:	e64f      	b.n	801172c <_printf_float+0x10c>

08011a8c <_printf_common>:
 8011a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a90:	4691      	mov	r9, r2
 8011a92:	461f      	mov	r7, r3
 8011a94:	688a      	ldr	r2, [r1, #8]
 8011a96:	690b      	ldr	r3, [r1, #16]
 8011a98:	4606      	mov	r6, r0
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	bfb8      	it	lt
 8011a9e:	4613      	movlt	r3, r2
 8011aa0:	f8c9 3000 	str.w	r3, [r9]
 8011aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011aa8:	460c      	mov	r4, r1
 8011aaa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011aae:	b112      	cbz	r2, 8011ab6 <_printf_common+0x2a>
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	f8c9 3000 	str.w	r3, [r9]
 8011ab6:	6823      	ldr	r3, [r4, #0]
 8011ab8:	0699      	lsls	r1, r3, #26
 8011aba:	bf42      	ittt	mi
 8011abc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011ac0:	3302      	addmi	r3, #2
 8011ac2:	f8c9 3000 	strmi.w	r3, [r9]
 8011ac6:	6825      	ldr	r5, [r4, #0]
 8011ac8:	f015 0506 	ands.w	r5, r5, #6
 8011acc:	d107      	bne.n	8011ade <_printf_common+0x52>
 8011ace:	f104 0a19 	add.w	sl, r4, #25
 8011ad2:	68e3      	ldr	r3, [r4, #12]
 8011ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8011ad8:	1a9b      	subs	r3, r3, r2
 8011ada:	42ab      	cmp	r3, r5
 8011adc:	dc29      	bgt.n	8011b32 <_printf_common+0xa6>
 8011ade:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011ae2:	6822      	ldr	r2, [r4, #0]
 8011ae4:	3300      	adds	r3, #0
 8011ae6:	bf18      	it	ne
 8011ae8:	2301      	movne	r3, #1
 8011aea:	0692      	lsls	r2, r2, #26
 8011aec:	d42e      	bmi.n	8011b4c <_printf_common+0xc0>
 8011aee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011af2:	4639      	mov	r1, r7
 8011af4:	4630      	mov	r0, r6
 8011af6:	47c0      	blx	r8
 8011af8:	3001      	adds	r0, #1
 8011afa:	d021      	beq.n	8011b40 <_printf_common+0xb4>
 8011afc:	6823      	ldr	r3, [r4, #0]
 8011afe:	68e5      	ldr	r5, [r4, #12]
 8011b00:	f003 0306 	and.w	r3, r3, #6
 8011b04:	2b04      	cmp	r3, #4
 8011b06:	bf18      	it	ne
 8011b08:	2500      	movne	r5, #0
 8011b0a:	f8d9 2000 	ldr.w	r2, [r9]
 8011b0e:	f04f 0900 	mov.w	r9, #0
 8011b12:	bf08      	it	eq
 8011b14:	1aad      	subeq	r5, r5, r2
 8011b16:	68a3      	ldr	r3, [r4, #8]
 8011b18:	6922      	ldr	r2, [r4, #16]
 8011b1a:	bf08      	it	eq
 8011b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b20:	4293      	cmp	r3, r2
 8011b22:	bfc4      	itt	gt
 8011b24:	1a9b      	subgt	r3, r3, r2
 8011b26:	18ed      	addgt	r5, r5, r3
 8011b28:	341a      	adds	r4, #26
 8011b2a:	454d      	cmp	r5, r9
 8011b2c:	d11a      	bne.n	8011b64 <_printf_common+0xd8>
 8011b2e:	2000      	movs	r0, #0
 8011b30:	e008      	b.n	8011b44 <_printf_common+0xb8>
 8011b32:	2301      	movs	r3, #1
 8011b34:	4652      	mov	r2, sl
 8011b36:	4639      	mov	r1, r7
 8011b38:	4630      	mov	r0, r6
 8011b3a:	47c0      	blx	r8
 8011b3c:	3001      	adds	r0, #1
 8011b3e:	d103      	bne.n	8011b48 <_printf_common+0xbc>
 8011b40:	f04f 30ff 	mov.w	r0, #4294967295
 8011b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b48:	3501      	adds	r5, #1
 8011b4a:	e7c2      	b.n	8011ad2 <_printf_common+0x46>
 8011b4c:	2030      	movs	r0, #48	; 0x30
 8011b4e:	18e1      	adds	r1, r4, r3
 8011b50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b54:	1c5a      	adds	r2, r3, #1
 8011b56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b5a:	4422      	add	r2, r4
 8011b5c:	3302      	adds	r3, #2
 8011b5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b62:	e7c4      	b.n	8011aee <_printf_common+0x62>
 8011b64:	2301      	movs	r3, #1
 8011b66:	4622      	mov	r2, r4
 8011b68:	4639      	mov	r1, r7
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	47c0      	blx	r8
 8011b6e:	3001      	adds	r0, #1
 8011b70:	d0e6      	beq.n	8011b40 <_printf_common+0xb4>
 8011b72:	f109 0901 	add.w	r9, r9, #1
 8011b76:	e7d8      	b.n	8011b2a <_printf_common+0x9e>

08011b78 <_printf_i>:
 8011b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011b80:	460c      	mov	r4, r1
 8011b82:	7e09      	ldrb	r1, [r1, #24]
 8011b84:	b085      	sub	sp, #20
 8011b86:	296e      	cmp	r1, #110	; 0x6e
 8011b88:	4617      	mov	r7, r2
 8011b8a:	4606      	mov	r6, r0
 8011b8c:	4698      	mov	r8, r3
 8011b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b90:	f000 80b3 	beq.w	8011cfa <_printf_i+0x182>
 8011b94:	d822      	bhi.n	8011bdc <_printf_i+0x64>
 8011b96:	2963      	cmp	r1, #99	; 0x63
 8011b98:	d036      	beq.n	8011c08 <_printf_i+0x90>
 8011b9a:	d80a      	bhi.n	8011bb2 <_printf_i+0x3a>
 8011b9c:	2900      	cmp	r1, #0
 8011b9e:	f000 80b9 	beq.w	8011d14 <_printf_i+0x19c>
 8011ba2:	2958      	cmp	r1, #88	; 0x58
 8011ba4:	f000 8083 	beq.w	8011cae <_printf_i+0x136>
 8011ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011bac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011bb0:	e032      	b.n	8011c18 <_printf_i+0xa0>
 8011bb2:	2964      	cmp	r1, #100	; 0x64
 8011bb4:	d001      	beq.n	8011bba <_printf_i+0x42>
 8011bb6:	2969      	cmp	r1, #105	; 0x69
 8011bb8:	d1f6      	bne.n	8011ba8 <_printf_i+0x30>
 8011bba:	6820      	ldr	r0, [r4, #0]
 8011bbc:	6813      	ldr	r3, [r2, #0]
 8011bbe:	0605      	lsls	r5, r0, #24
 8011bc0:	f103 0104 	add.w	r1, r3, #4
 8011bc4:	d52a      	bpl.n	8011c1c <_printf_i+0xa4>
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	6011      	str	r1, [r2, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	da03      	bge.n	8011bd6 <_printf_i+0x5e>
 8011bce:	222d      	movs	r2, #45	; 0x2d
 8011bd0:	425b      	negs	r3, r3
 8011bd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011bd6:	486f      	ldr	r0, [pc, #444]	; (8011d94 <_printf_i+0x21c>)
 8011bd8:	220a      	movs	r2, #10
 8011bda:	e039      	b.n	8011c50 <_printf_i+0xd8>
 8011bdc:	2973      	cmp	r1, #115	; 0x73
 8011bde:	f000 809d 	beq.w	8011d1c <_printf_i+0x1a4>
 8011be2:	d808      	bhi.n	8011bf6 <_printf_i+0x7e>
 8011be4:	296f      	cmp	r1, #111	; 0x6f
 8011be6:	d020      	beq.n	8011c2a <_printf_i+0xb2>
 8011be8:	2970      	cmp	r1, #112	; 0x70
 8011bea:	d1dd      	bne.n	8011ba8 <_printf_i+0x30>
 8011bec:	6823      	ldr	r3, [r4, #0]
 8011bee:	f043 0320 	orr.w	r3, r3, #32
 8011bf2:	6023      	str	r3, [r4, #0]
 8011bf4:	e003      	b.n	8011bfe <_printf_i+0x86>
 8011bf6:	2975      	cmp	r1, #117	; 0x75
 8011bf8:	d017      	beq.n	8011c2a <_printf_i+0xb2>
 8011bfa:	2978      	cmp	r1, #120	; 0x78
 8011bfc:	d1d4      	bne.n	8011ba8 <_printf_i+0x30>
 8011bfe:	2378      	movs	r3, #120	; 0x78
 8011c00:	4865      	ldr	r0, [pc, #404]	; (8011d98 <_printf_i+0x220>)
 8011c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c06:	e055      	b.n	8011cb4 <_printf_i+0x13c>
 8011c08:	6813      	ldr	r3, [r2, #0]
 8011c0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c0e:	1d19      	adds	r1, r3, #4
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	6011      	str	r1, [r2, #0]
 8011c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c18:	2301      	movs	r3, #1
 8011c1a:	e08c      	b.n	8011d36 <_printf_i+0x1be>
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c22:	6011      	str	r1, [r2, #0]
 8011c24:	bf18      	it	ne
 8011c26:	b21b      	sxthne	r3, r3
 8011c28:	e7cf      	b.n	8011bca <_printf_i+0x52>
 8011c2a:	6813      	ldr	r3, [r2, #0]
 8011c2c:	6825      	ldr	r5, [r4, #0]
 8011c2e:	1d18      	adds	r0, r3, #4
 8011c30:	6010      	str	r0, [r2, #0]
 8011c32:	0628      	lsls	r0, r5, #24
 8011c34:	d501      	bpl.n	8011c3a <_printf_i+0xc2>
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	e002      	b.n	8011c40 <_printf_i+0xc8>
 8011c3a:	0668      	lsls	r0, r5, #25
 8011c3c:	d5fb      	bpl.n	8011c36 <_printf_i+0xbe>
 8011c3e:	881b      	ldrh	r3, [r3, #0]
 8011c40:	296f      	cmp	r1, #111	; 0x6f
 8011c42:	bf14      	ite	ne
 8011c44:	220a      	movne	r2, #10
 8011c46:	2208      	moveq	r2, #8
 8011c48:	4852      	ldr	r0, [pc, #328]	; (8011d94 <_printf_i+0x21c>)
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c50:	6865      	ldr	r5, [r4, #4]
 8011c52:	2d00      	cmp	r5, #0
 8011c54:	60a5      	str	r5, [r4, #8]
 8011c56:	f2c0 8095 	blt.w	8011d84 <_printf_i+0x20c>
 8011c5a:	6821      	ldr	r1, [r4, #0]
 8011c5c:	f021 0104 	bic.w	r1, r1, #4
 8011c60:	6021      	str	r1, [r4, #0]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d13d      	bne.n	8011ce2 <_printf_i+0x16a>
 8011c66:	2d00      	cmp	r5, #0
 8011c68:	f040 808e 	bne.w	8011d88 <_printf_i+0x210>
 8011c6c:	4665      	mov	r5, ip
 8011c6e:	2a08      	cmp	r2, #8
 8011c70:	d10b      	bne.n	8011c8a <_printf_i+0x112>
 8011c72:	6823      	ldr	r3, [r4, #0]
 8011c74:	07db      	lsls	r3, r3, #31
 8011c76:	d508      	bpl.n	8011c8a <_printf_i+0x112>
 8011c78:	6923      	ldr	r3, [r4, #16]
 8011c7a:	6862      	ldr	r2, [r4, #4]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	bfde      	ittt	le
 8011c80:	2330      	movle	r3, #48	; 0x30
 8011c82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011c86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011c8a:	ebac 0305 	sub.w	r3, ip, r5
 8011c8e:	6123      	str	r3, [r4, #16]
 8011c90:	f8cd 8000 	str.w	r8, [sp]
 8011c94:	463b      	mov	r3, r7
 8011c96:	aa03      	add	r2, sp, #12
 8011c98:	4621      	mov	r1, r4
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	f7ff fef6 	bl	8011a8c <_printf_common>
 8011ca0:	3001      	adds	r0, #1
 8011ca2:	d14d      	bne.n	8011d40 <_printf_i+0x1c8>
 8011ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca8:	b005      	add	sp, #20
 8011caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cae:	4839      	ldr	r0, [pc, #228]	; (8011d94 <_printf_i+0x21c>)
 8011cb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011cb4:	6813      	ldr	r3, [r2, #0]
 8011cb6:	6821      	ldr	r1, [r4, #0]
 8011cb8:	1d1d      	adds	r5, r3, #4
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	6015      	str	r5, [r2, #0]
 8011cbe:	060a      	lsls	r2, r1, #24
 8011cc0:	d50b      	bpl.n	8011cda <_printf_i+0x162>
 8011cc2:	07ca      	lsls	r2, r1, #31
 8011cc4:	bf44      	itt	mi
 8011cc6:	f041 0120 	orrmi.w	r1, r1, #32
 8011cca:	6021      	strmi	r1, [r4, #0]
 8011ccc:	b91b      	cbnz	r3, 8011cd6 <_printf_i+0x15e>
 8011cce:	6822      	ldr	r2, [r4, #0]
 8011cd0:	f022 0220 	bic.w	r2, r2, #32
 8011cd4:	6022      	str	r2, [r4, #0]
 8011cd6:	2210      	movs	r2, #16
 8011cd8:	e7b7      	b.n	8011c4a <_printf_i+0xd2>
 8011cda:	064d      	lsls	r5, r1, #25
 8011cdc:	bf48      	it	mi
 8011cde:	b29b      	uxthmi	r3, r3
 8011ce0:	e7ef      	b.n	8011cc2 <_printf_i+0x14a>
 8011ce2:	4665      	mov	r5, ip
 8011ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ce8:	fb02 3311 	mls	r3, r2, r1, r3
 8011cec:	5cc3      	ldrb	r3, [r0, r3]
 8011cee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011cf2:	460b      	mov	r3, r1
 8011cf4:	2900      	cmp	r1, #0
 8011cf6:	d1f5      	bne.n	8011ce4 <_printf_i+0x16c>
 8011cf8:	e7b9      	b.n	8011c6e <_printf_i+0xf6>
 8011cfa:	6813      	ldr	r3, [r2, #0]
 8011cfc:	6825      	ldr	r5, [r4, #0]
 8011cfe:	1d18      	adds	r0, r3, #4
 8011d00:	6961      	ldr	r1, [r4, #20]
 8011d02:	6010      	str	r0, [r2, #0]
 8011d04:	0628      	lsls	r0, r5, #24
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	d501      	bpl.n	8011d0e <_printf_i+0x196>
 8011d0a:	6019      	str	r1, [r3, #0]
 8011d0c:	e002      	b.n	8011d14 <_printf_i+0x19c>
 8011d0e:	066a      	lsls	r2, r5, #25
 8011d10:	d5fb      	bpl.n	8011d0a <_printf_i+0x192>
 8011d12:	8019      	strh	r1, [r3, #0]
 8011d14:	2300      	movs	r3, #0
 8011d16:	4665      	mov	r5, ip
 8011d18:	6123      	str	r3, [r4, #16]
 8011d1a:	e7b9      	b.n	8011c90 <_printf_i+0x118>
 8011d1c:	6813      	ldr	r3, [r2, #0]
 8011d1e:	1d19      	adds	r1, r3, #4
 8011d20:	6011      	str	r1, [r2, #0]
 8011d22:	681d      	ldr	r5, [r3, #0]
 8011d24:	6862      	ldr	r2, [r4, #4]
 8011d26:	2100      	movs	r1, #0
 8011d28:	4628      	mov	r0, r5
 8011d2a:	f002 fa2b 	bl	8014184 <memchr>
 8011d2e:	b108      	cbz	r0, 8011d34 <_printf_i+0x1bc>
 8011d30:	1b40      	subs	r0, r0, r5
 8011d32:	6060      	str	r0, [r4, #4]
 8011d34:	6863      	ldr	r3, [r4, #4]
 8011d36:	6123      	str	r3, [r4, #16]
 8011d38:	2300      	movs	r3, #0
 8011d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d3e:	e7a7      	b.n	8011c90 <_printf_i+0x118>
 8011d40:	6923      	ldr	r3, [r4, #16]
 8011d42:	462a      	mov	r2, r5
 8011d44:	4639      	mov	r1, r7
 8011d46:	4630      	mov	r0, r6
 8011d48:	47c0      	blx	r8
 8011d4a:	3001      	adds	r0, #1
 8011d4c:	d0aa      	beq.n	8011ca4 <_printf_i+0x12c>
 8011d4e:	6823      	ldr	r3, [r4, #0]
 8011d50:	079b      	lsls	r3, r3, #30
 8011d52:	d413      	bmi.n	8011d7c <_printf_i+0x204>
 8011d54:	68e0      	ldr	r0, [r4, #12]
 8011d56:	9b03      	ldr	r3, [sp, #12]
 8011d58:	4298      	cmp	r0, r3
 8011d5a:	bfb8      	it	lt
 8011d5c:	4618      	movlt	r0, r3
 8011d5e:	e7a3      	b.n	8011ca8 <_printf_i+0x130>
 8011d60:	2301      	movs	r3, #1
 8011d62:	464a      	mov	r2, r9
 8011d64:	4639      	mov	r1, r7
 8011d66:	4630      	mov	r0, r6
 8011d68:	47c0      	blx	r8
 8011d6a:	3001      	adds	r0, #1
 8011d6c:	d09a      	beq.n	8011ca4 <_printf_i+0x12c>
 8011d6e:	3501      	adds	r5, #1
 8011d70:	68e3      	ldr	r3, [r4, #12]
 8011d72:	9a03      	ldr	r2, [sp, #12]
 8011d74:	1a9b      	subs	r3, r3, r2
 8011d76:	42ab      	cmp	r3, r5
 8011d78:	dcf2      	bgt.n	8011d60 <_printf_i+0x1e8>
 8011d7a:	e7eb      	b.n	8011d54 <_printf_i+0x1dc>
 8011d7c:	2500      	movs	r5, #0
 8011d7e:	f104 0919 	add.w	r9, r4, #25
 8011d82:	e7f5      	b.n	8011d70 <_printf_i+0x1f8>
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d1ac      	bne.n	8011ce2 <_printf_i+0x16a>
 8011d88:	7803      	ldrb	r3, [r0, #0]
 8011d8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d92:	e76c      	b.n	8011c6e <_printf_i+0xf6>
 8011d94:	0801a008 	.word	0x0801a008
 8011d98:	0801a019 	.word	0x0801a019

08011d9c <iprintf>:
 8011d9c:	b40f      	push	{r0, r1, r2, r3}
 8011d9e:	4b0a      	ldr	r3, [pc, #40]	; (8011dc8 <iprintf+0x2c>)
 8011da0:	b513      	push	{r0, r1, r4, lr}
 8011da2:	681c      	ldr	r4, [r3, #0]
 8011da4:	b124      	cbz	r4, 8011db0 <iprintf+0x14>
 8011da6:	69a3      	ldr	r3, [r4, #24]
 8011da8:	b913      	cbnz	r3, 8011db0 <iprintf+0x14>
 8011daa:	4620      	mov	r0, r4
 8011dac:	f001 fe20 	bl	80139f0 <__sinit>
 8011db0:	ab05      	add	r3, sp, #20
 8011db2:	9a04      	ldr	r2, [sp, #16]
 8011db4:	68a1      	ldr	r1, [r4, #8]
 8011db6:	4620      	mov	r0, r4
 8011db8:	9301      	str	r3, [sp, #4]
 8011dba:	f003 f817 	bl	8014dec <_vfiprintf_r>
 8011dbe:	b002      	add	sp, #8
 8011dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dc4:	b004      	add	sp, #16
 8011dc6:	4770      	bx	lr
 8011dc8:	20000060 	.word	0x20000060

08011dcc <strcpy>:
 8011dcc:	4603      	mov	r3, r0
 8011dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011dd2:	f803 2b01 	strb.w	r2, [r3], #1
 8011dd6:	2a00      	cmp	r2, #0
 8011dd8:	d1f9      	bne.n	8011dce <strcpy+0x2>
 8011dda:	4770      	bx	lr

08011ddc <sulp>:
 8011ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de0:	460f      	mov	r7, r1
 8011de2:	4690      	mov	r8, r2
 8011de4:	f002 fca6 	bl	8014734 <__ulp>
 8011de8:	4604      	mov	r4, r0
 8011dea:	460d      	mov	r5, r1
 8011dec:	f1b8 0f00 	cmp.w	r8, #0
 8011df0:	d011      	beq.n	8011e16 <sulp+0x3a>
 8011df2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8011df6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	dd0b      	ble.n	8011e16 <sulp+0x3a>
 8011dfe:	2400      	movs	r4, #0
 8011e00:	051b      	lsls	r3, r3, #20
 8011e02:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011e06:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011e0a:	4622      	mov	r2, r4
 8011e0c:	462b      	mov	r3, r5
 8011e0e:	f7ee fb7d 	bl	800050c <__aeabi_dmul>
 8011e12:	4604      	mov	r4, r0
 8011e14:	460d      	mov	r5, r1
 8011e16:	4620      	mov	r0, r4
 8011e18:	4629      	mov	r1, r5
 8011e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011e20 <_strtod_l>:
 8011e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e24:	461f      	mov	r7, r3
 8011e26:	2300      	movs	r3, #0
 8011e28:	b0a1      	sub	sp, #132	; 0x84
 8011e2a:	4683      	mov	fp, r0
 8011e2c:	4638      	mov	r0, r7
 8011e2e:	460e      	mov	r6, r1
 8011e30:	9217      	str	r2, [sp, #92]	; 0x5c
 8011e32:	931c      	str	r3, [sp, #112]	; 0x70
 8011e34:	f002 f98e 	bl	8014154 <__localeconv_l>
 8011e38:	4680      	mov	r8, r0
 8011e3a:	6800      	ldr	r0, [r0, #0]
 8011e3c:	f7ee f9a2 	bl	8000184 <strlen>
 8011e40:	f04f 0900 	mov.w	r9, #0
 8011e44:	4604      	mov	r4, r0
 8011e46:	f04f 0a00 	mov.w	sl, #0
 8011e4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8011e4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011e4e:	781a      	ldrb	r2, [r3, #0]
 8011e50:	2a0d      	cmp	r2, #13
 8011e52:	d832      	bhi.n	8011eba <_strtod_l+0x9a>
 8011e54:	2a09      	cmp	r2, #9
 8011e56:	d236      	bcs.n	8011ec6 <_strtod_l+0xa6>
 8011e58:	2a00      	cmp	r2, #0
 8011e5a:	d03e      	beq.n	8011eda <_strtod_l+0xba>
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	930d      	str	r3, [sp, #52]	; 0x34
 8011e60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011e62:	782b      	ldrb	r3, [r5, #0]
 8011e64:	2b30      	cmp	r3, #48	; 0x30
 8011e66:	f040 80ac 	bne.w	8011fc2 <_strtod_l+0x1a2>
 8011e6a:	786b      	ldrb	r3, [r5, #1]
 8011e6c:	2b58      	cmp	r3, #88	; 0x58
 8011e6e:	d001      	beq.n	8011e74 <_strtod_l+0x54>
 8011e70:	2b78      	cmp	r3, #120	; 0x78
 8011e72:	d167      	bne.n	8011f44 <_strtod_l+0x124>
 8011e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e76:	9702      	str	r7, [sp, #8]
 8011e78:	9301      	str	r3, [sp, #4]
 8011e7a:	ab1c      	add	r3, sp, #112	; 0x70
 8011e7c:	9300      	str	r3, [sp, #0]
 8011e7e:	4a89      	ldr	r2, [pc, #548]	; (80120a4 <_strtod_l+0x284>)
 8011e80:	ab1d      	add	r3, sp, #116	; 0x74
 8011e82:	a91b      	add	r1, sp, #108	; 0x6c
 8011e84:	4658      	mov	r0, fp
 8011e86:	f001 fe8d 	bl	8013ba4 <__gethex>
 8011e8a:	f010 0407 	ands.w	r4, r0, #7
 8011e8e:	4606      	mov	r6, r0
 8011e90:	d005      	beq.n	8011e9e <_strtod_l+0x7e>
 8011e92:	2c06      	cmp	r4, #6
 8011e94:	d12b      	bne.n	8011eee <_strtod_l+0xce>
 8011e96:	2300      	movs	r3, #0
 8011e98:	3501      	adds	r5, #1
 8011e9a:	951b      	str	r5, [sp, #108]	; 0x6c
 8011e9c:	930d      	str	r3, [sp, #52]	; 0x34
 8011e9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	f040 85a6 	bne.w	80129f2 <_strtod_l+0xbd2>
 8011ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ea8:	b1e3      	cbz	r3, 8011ee4 <_strtod_l+0xc4>
 8011eaa:	464a      	mov	r2, r9
 8011eac:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8011eb0:	4610      	mov	r0, r2
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	b021      	add	sp, #132	; 0x84
 8011eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eba:	2a2b      	cmp	r2, #43	; 0x2b
 8011ebc:	d015      	beq.n	8011eea <_strtod_l+0xca>
 8011ebe:	2a2d      	cmp	r2, #45	; 0x2d
 8011ec0:	d004      	beq.n	8011ecc <_strtod_l+0xac>
 8011ec2:	2a20      	cmp	r2, #32
 8011ec4:	d1ca      	bne.n	8011e5c <_strtod_l+0x3c>
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	931b      	str	r3, [sp, #108]	; 0x6c
 8011eca:	e7bf      	b.n	8011e4c <_strtod_l+0x2c>
 8011ecc:	2201      	movs	r2, #1
 8011ece:	920d      	str	r2, [sp, #52]	; 0x34
 8011ed0:	1c5a      	adds	r2, r3, #1
 8011ed2:	921b      	str	r2, [sp, #108]	; 0x6c
 8011ed4:	785b      	ldrb	r3, [r3, #1]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d1c2      	bne.n	8011e60 <_strtod_l+0x40>
 8011eda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011edc:	961b      	str	r6, [sp, #108]	; 0x6c
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	f040 8585 	bne.w	80129ee <_strtod_l+0xbce>
 8011ee4:	464a      	mov	r2, r9
 8011ee6:	4653      	mov	r3, sl
 8011ee8:	e7e2      	b.n	8011eb0 <_strtod_l+0x90>
 8011eea:	2200      	movs	r2, #0
 8011eec:	e7ef      	b.n	8011ece <_strtod_l+0xae>
 8011eee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011ef0:	b13a      	cbz	r2, 8011f02 <_strtod_l+0xe2>
 8011ef2:	2135      	movs	r1, #53	; 0x35
 8011ef4:	a81e      	add	r0, sp, #120	; 0x78
 8011ef6:	f002 fd10 	bl	801491a <__copybits>
 8011efa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011efc:	4658      	mov	r0, fp
 8011efe:	f002 f983 	bl	8014208 <_Bfree>
 8011f02:	3c01      	subs	r4, #1
 8011f04:	2c04      	cmp	r4, #4
 8011f06:	d806      	bhi.n	8011f16 <_strtod_l+0xf6>
 8011f08:	e8df f004 	tbb	[pc, r4]
 8011f0c:	1714030a 	.word	0x1714030a
 8011f10:	0a          	.byte	0x0a
 8011f11:	00          	.byte	0x00
 8011f12:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8011f16:	0731      	lsls	r1, r6, #28
 8011f18:	d5c1      	bpl.n	8011e9e <_strtod_l+0x7e>
 8011f1a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8011f1e:	e7be      	b.n	8011e9e <_strtod_l+0x7e>
 8011f20:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011f22:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8011f26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011f2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011f2e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8011f32:	e7f0      	b.n	8011f16 <_strtod_l+0xf6>
 8011f34:	f8df a170 	ldr.w	sl, [pc, #368]	; 80120a8 <_strtod_l+0x288>
 8011f38:	e7ed      	b.n	8011f16 <_strtod_l+0xf6>
 8011f3a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8011f3e:	f04f 39ff 	mov.w	r9, #4294967295
 8011f42:	e7e8      	b.n	8011f16 <_strtod_l+0xf6>
 8011f44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f46:	1c5a      	adds	r2, r3, #1
 8011f48:	921b      	str	r2, [sp, #108]	; 0x6c
 8011f4a:	785b      	ldrb	r3, [r3, #1]
 8011f4c:	2b30      	cmp	r3, #48	; 0x30
 8011f4e:	d0f9      	beq.n	8011f44 <_strtod_l+0x124>
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d0a4      	beq.n	8011e9e <_strtod_l+0x7e>
 8011f54:	2301      	movs	r3, #1
 8011f56:	2500      	movs	r5, #0
 8011f58:	220a      	movs	r2, #10
 8011f5a:	9307      	str	r3, [sp, #28]
 8011f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f5e:	9506      	str	r5, [sp, #24]
 8011f60:	9308      	str	r3, [sp, #32]
 8011f62:	9504      	str	r5, [sp, #16]
 8011f64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011f66:	7807      	ldrb	r7, [r0, #0]
 8011f68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011f6c:	b2d9      	uxtb	r1, r3
 8011f6e:	2909      	cmp	r1, #9
 8011f70:	d929      	bls.n	8011fc6 <_strtod_l+0x1a6>
 8011f72:	4622      	mov	r2, r4
 8011f74:	f8d8 1000 	ldr.w	r1, [r8]
 8011f78:	f003 f8a5 	bl	80150c6 <strncmp>
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	d031      	beq.n	8011fe4 <_strtod_l+0x1c4>
 8011f80:	2000      	movs	r0, #0
 8011f82:	463b      	mov	r3, r7
 8011f84:	4602      	mov	r2, r0
 8011f86:	9c04      	ldr	r4, [sp, #16]
 8011f88:	9005      	str	r0, [sp, #20]
 8011f8a:	2b65      	cmp	r3, #101	; 0x65
 8011f8c:	d001      	beq.n	8011f92 <_strtod_l+0x172>
 8011f8e:	2b45      	cmp	r3, #69	; 0x45
 8011f90:	d114      	bne.n	8011fbc <_strtod_l+0x19c>
 8011f92:	b924      	cbnz	r4, 8011f9e <_strtod_l+0x17e>
 8011f94:	b910      	cbnz	r0, 8011f9c <_strtod_l+0x17c>
 8011f96:	9b07      	ldr	r3, [sp, #28]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d09e      	beq.n	8011eda <_strtod_l+0xba>
 8011f9c:	2400      	movs	r4, #0
 8011f9e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011fa0:	1c73      	adds	r3, r6, #1
 8011fa2:	931b      	str	r3, [sp, #108]	; 0x6c
 8011fa4:	7873      	ldrb	r3, [r6, #1]
 8011fa6:	2b2b      	cmp	r3, #43	; 0x2b
 8011fa8:	d078      	beq.n	801209c <_strtod_l+0x27c>
 8011faa:	2b2d      	cmp	r3, #45	; 0x2d
 8011fac:	d070      	beq.n	8012090 <_strtod_l+0x270>
 8011fae:	f04f 0c00 	mov.w	ip, #0
 8011fb2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8011fb6:	2f09      	cmp	r7, #9
 8011fb8:	d97c      	bls.n	80120b4 <_strtod_l+0x294>
 8011fba:	961b      	str	r6, [sp, #108]	; 0x6c
 8011fbc:	f04f 0e00 	mov.w	lr, #0
 8011fc0:	e09a      	b.n	80120f8 <_strtod_l+0x2d8>
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	e7c7      	b.n	8011f56 <_strtod_l+0x136>
 8011fc6:	9904      	ldr	r1, [sp, #16]
 8011fc8:	3001      	adds	r0, #1
 8011fca:	2908      	cmp	r1, #8
 8011fcc:	bfd7      	itett	le
 8011fce:	9906      	ldrle	r1, [sp, #24]
 8011fd0:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011fd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8011fd8:	9306      	strle	r3, [sp, #24]
 8011fda:	9b04      	ldr	r3, [sp, #16]
 8011fdc:	901b      	str	r0, [sp, #108]	; 0x6c
 8011fde:	3301      	adds	r3, #1
 8011fe0:	9304      	str	r3, [sp, #16]
 8011fe2:	e7bf      	b.n	8011f64 <_strtod_l+0x144>
 8011fe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011fe6:	191a      	adds	r2, r3, r4
 8011fe8:	921b      	str	r2, [sp, #108]	; 0x6c
 8011fea:	9a04      	ldr	r2, [sp, #16]
 8011fec:	5d1b      	ldrb	r3, [r3, r4]
 8011fee:	2a00      	cmp	r2, #0
 8011ff0:	d037      	beq.n	8012062 <_strtod_l+0x242>
 8011ff2:	4602      	mov	r2, r0
 8011ff4:	9c04      	ldr	r4, [sp, #16]
 8011ff6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011ffa:	2909      	cmp	r1, #9
 8011ffc:	d913      	bls.n	8012026 <_strtod_l+0x206>
 8011ffe:	2101      	movs	r1, #1
 8012000:	9105      	str	r1, [sp, #20]
 8012002:	e7c2      	b.n	8011f8a <_strtod_l+0x16a>
 8012004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012006:	3001      	adds	r0, #1
 8012008:	1c5a      	adds	r2, r3, #1
 801200a:	921b      	str	r2, [sp, #108]	; 0x6c
 801200c:	785b      	ldrb	r3, [r3, #1]
 801200e:	2b30      	cmp	r3, #48	; 0x30
 8012010:	d0f8      	beq.n	8012004 <_strtod_l+0x1e4>
 8012012:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012016:	2a08      	cmp	r2, #8
 8012018:	f200 84f0 	bhi.w	80129fc <_strtod_l+0xbdc>
 801201c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801201e:	9208      	str	r2, [sp, #32]
 8012020:	4602      	mov	r2, r0
 8012022:	2000      	movs	r0, #0
 8012024:	4604      	mov	r4, r0
 8012026:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801202a:	f100 0101 	add.w	r1, r0, #1
 801202e:	d012      	beq.n	8012056 <_strtod_l+0x236>
 8012030:	440a      	add	r2, r1
 8012032:	270a      	movs	r7, #10
 8012034:	4621      	mov	r1, r4
 8012036:	eb00 0c04 	add.w	ip, r0, r4
 801203a:	458c      	cmp	ip, r1
 801203c:	d113      	bne.n	8012066 <_strtod_l+0x246>
 801203e:	1821      	adds	r1, r4, r0
 8012040:	2908      	cmp	r1, #8
 8012042:	f104 0401 	add.w	r4, r4, #1
 8012046:	4404      	add	r4, r0
 8012048:	dc19      	bgt.n	801207e <_strtod_l+0x25e>
 801204a:	210a      	movs	r1, #10
 801204c:	9b06      	ldr	r3, [sp, #24]
 801204e:	fb01 e303 	mla	r3, r1, r3, lr
 8012052:	9306      	str	r3, [sp, #24]
 8012054:	2100      	movs	r1, #0
 8012056:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012058:	1c58      	adds	r0, r3, #1
 801205a:	901b      	str	r0, [sp, #108]	; 0x6c
 801205c:	785b      	ldrb	r3, [r3, #1]
 801205e:	4608      	mov	r0, r1
 8012060:	e7c9      	b.n	8011ff6 <_strtod_l+0x1d6>
 8012062:	9804      	ldr	r0, [sp, #16]
 8012064:	e7d3      	b.n	801200e <_strtod_l+0x1ee>
 8012066:	2908      	cmp	r1, #8
 8012068:	f101 0101 	add.w	r1, r1, #1
 801206c:	dc03      	bgt.n	8012076 <_strtod_l+0x256>
 801206e:	9b06      	ldr	r3, [sp, #24]
 8012070:	437b      	muls	r3, r7
 8012072:	9306      	str	r3, [sp, #24]
 8012074:	e7e1      	b.n	801203a <_strtod_l+0x21a>
 8012076:	2910      	cmp	r1, #16
 8012078:	bfd8      	it	le
 801207a:	437d      	mulle	r5, r7
 801207c:	e7dd      	b.n	801203a <_strtod_l+0x21a>
 801207e:	2c10      	cmp	r4, #16
 8012080:	bfdc      	itt	le
 8012082:	210a      	movle	r1, #10
 8012084:	fb01 e505 	mlale	r5, r1, r5, lr
 8012088:	e7e4      	b.n	8012054 <_strtod_l+0x234>
 801208a:	2301      	movs	r3, #1
 801208c:	9305      	str	r3, [sp, #20]
 801208e:	e781      	b.n	8011f94 <_strtod_l+0x174>
 8012090:	f04f 0c01 	mov.w	ip, #1
 8012094:	1cb3      	adds	r3, r6, #2
 8012096:	931b      	str	r3, [sp, #108]	; 0x6c
 8012098:	78b3      	ldrb	r3, [r6, #2]
 801209a:	e78a      	b.n	8011fb2 <_strtod_l+0x192>
 801209c:	f04f 0c00 	mov.w	ip, #0
 80120a0:	e7f8      	b.n	8012094 <_strtod_l+0x274>
 80120a2:	bf00      	nop
 80120a4:	0801a02c 	.word	0x0801a02c
 80120a8:	7ff00000 	.word	0x7ff00000
 80120ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80120ae:	1c5f      	adds	r7, r3, #1
 80120b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80120b2:	785b      	ldrb	r3, [r3, #1]
 80120b4:	2b30      	cmp	r3, #48	; 0x30
 80120b6:	d0f9      	beq.n	80120ac <_strtod_l+0x28c>
 80120b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80120bc:	2f08      	cmp	r7, #8
 80120be:	f63f af7d 	bhi.w	8011fbc <_strtod_l+0x19c>
 80120c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80120c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80120c8:	9309      	str	r3, [sp, #36]	; 0x24
 80120ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80120cc:	1c5f      	adds	r7, r3, #1
 80120ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80120d0:	785b      	ldrb	r3, [r3, #1]
 80120d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80120d6:	f1b8 0f09 	cmp.w	r8, #9
 80120da:	d937      	bls.n	801214c <_strtod_l+0x32c>
 80120dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80120de:	1a7f      	subs	r7, r7, r1
 80120e0:	2f08      	cmp	r7, #8
 80120e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80120e6:	dc37      	bgt.n	8012158 <_strtod_l+0x338>
 80120e8:	45be      	cmp	lr, r7
 80120ea:	bfa8      	it	ge
 80120ec:	46be      	movge	lr, r7
 80120ee:	f1bc 0f00 	cmp.w	ip, #0
 80120f2:	d001      	beq.n	80120f8 <_strtod_l+0x2d8>
 80120f4:	f1ce 0e00 	rsb	lr, lr, #0
 80120f8:	2c00      	cmp	r4, #0
 80120fa:	d151      	bne.n	80121a0 <_strtod_l+0x380>
 80120fc:	2800      	cmp	r0, #0
 80120fe:	f47f aece 	bne.w	8011e9e <_strtod_l+0x7e>
 8012102:	9a07      	ldr	r2, [sp, #28]
 8012104:	2a00      	cmp	r2, #0
 8012106:	f47f aeca 	bne.w	8011e9e <_strtod_l+0x7e>
 801210a:	9a05      	ldr	r2, [sp, #20]
 801210c:	2a00      	cmp	r2, #0
 801210e:	f47f aee4 	bne.w	8011eda <_strtod_l+0xba>
 8012112:	2b4e      	cmp	r3, #78	; 0x4e
 8012114:	d027      	beq.n	8012166 <_strtod_l+0x346>
 8012116:	dc21      	bgt.n	801215c <_strtod_l+0x33c>
 8012118:	2b49      	cmp	r3, #73	; 0x49
 801211a:	f47f aede 	bne.w	8011eda <_strtod_l+0xba>
 801211e:	49a4      	ldr	r1, [pc, #656]	; (80123b0 <_strtod_l+0x590>)
 8012120:	a81b      	add	r0, sp, #108	; 0x6c
 8012122:	f001 ff73 	bl	801400c <__match>
 8012126:	2800      	cmp	r0, #0
 8012128:	f43f aed7 	beq.w	8011eda <_strtod_l+0xba>
 801212c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801212e:	49a1      	ldr	r1, [pc, #644]	; (80123b4 <_strtod_l+0x594>)
 8012130:	3b01      	subs	r3, #1
 8012132:	a81b      	add	r0, sp, #108	; 0x6c
 8012134:	931b      	str	r3, [sp, #108]	; 0x6c
 8012136:	f001 ff69 	bl	801400c <__match>
 801213a:	b910      	cbnz	r0, 8012142 <_strtod_l+0x322>
 801213c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801213e:	3301      	adds	r3, #1
 8012140:	931b      	str	r3, [sp, #108]	; 0x6c
 8012142:	f8df a284 	ldr.w	sl, [pc, #644]	; 80123c8 <_strtod_l+0x5a8>
 8012146:	f04f 0900 	mov.w	r9, #0
 801214a:	e6a8      	b.n	8011e9e <_strtod_l+0x7e>
 801214c:	210a      	movs	r1, #10
 801214e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012152:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012156:	e7b8      	b.n	80120ca <_strtod_l+0x2aa>
 8012158:	46be      	mov	lr, r7
 801215a:	e7c8      	b.n	80120ee <_strtod_l+0x2ce>
 801215c:	2b69      	cmp	r3, #105	; 0x69
 801215e:	d0de      	beq.n	801211e <_strtod_l+0x2fe>
 8012160:	2b6e      	cmp	r3, #110	; 0x6e
 8012162:	f47f aeba 	bne.w	8011eda <_strtod_l+0xba>
 8012166:	4994      	ldr	r1, [pc, #592]	; (80123b8 <_strtod_l+0x598>)
 8012168:	a81b      	add	r0, sp, #108	; 0x6c
 801216a:	f001 ff4f 	bl	801400c <__match>
 801216e:	2800      	cmp	r0, #0
 8012170:	f43f aeb3 	beq.w	8011eda <_strtod_l+0xba>
 8012174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	2b28      	cmp	r3, #40	; 0x28
 801217a:	d10e      	bne.n	801219a <_strtod_l+0x37a>
 801217c:	aa1e      	add	r2, sp, #120	; 0x78
 801217e:	498f      	ldr	r1, [pc, #572]	; (80123bc <_strtod_l+0x59c>)
 8012180:	a81b      	add	r0, sp, #108	; 0x6c
 8012182:	f001 ff57 	bl	8014034 <__hexnan>
 8012186:	2805      	cmp	r0, #5
 8012188:	d107      	bne.n	801219a <_strtod_l+0x37a>
 801218a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801218c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8012190:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8012194:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8012198:	e681      	b.n	8011e9e <_strtod_l+0x7e>
 801219a:	f8df a234 	ldr.w	sl, [pc, #564]	; 80123d0 <_strtod_l+0x5b0>
 801219e:	e7d2      	b.n	8012146 <_strtod_l+0x326>
 80121a0:	ebae 0302 	sub.w	r3, lr, r2
 80121a4:	9307      	str	r3, [sp, #28]
 80121a6:	9b04      	ldr	r3, [sp, #16]
 80121a8:	9806      	ldr	r0, [sp, #24]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	bf08      	it	eq
 80121ae:	4623      	moveq	r3, r4
 80121b0:	2c10      	cmp	r4, #16
 80121b2:	9304      	str	r3, [sp, #16]
 80121b4:	46a0      	mov	r8, r4
 80121b6:	bfa8      	it	ge
 80121b8:	f04f 0810 	movge.w	r8, #16
 80121bc:	f7ee f92c 	bl	8000418 <__aeabi_ui2d>
 80121c0:	2c09      	cmp	r4, #9
 80121c2:	4681      	mov	r9, r0
 80121c4:	468a      	mov	sl, r1
 80121c6:	dc13      	bgt.n	80121f0 <_strtod_l+0x3d0>
 80121c8:	9b07      	ldr	r3, [sp, #28]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	f43f ae67 	beq.w	8011e9e <_strtod_l+0x7e>
 80121d0:	9b07      	ldr	r3, [sp, #28]
 80121d2:	dd7e      	ble.n	80122d2 <_strtod_l+0x4b2>
 80121d4:	2b16      	cmp	r3, #22
 80121d6:	dc65      	bgt.n	80122a4 <_strtod_l+0x484>
 80121d8:	4a79      	ldr	r2, [pc, #484]	; (80123c0 <_strtod_l+0x5a0>)
 80121da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80121de:	464a      	mov	r2, r9
 80121e0:	e9de 0100 	ldrd	r0, r1, [lr]
 80121e4:	4653      	mov	r3, sl
 80121e6:	f7ee f991 	bl	800050c <__aeabi_dmul>
 80121ea:	4681      	mov	r9, r0
 80121ec:	468a      	mov	sl, r1
 80121ee:	e656      	b.n	8011e9e <_strtod_l+0x7e>
 80121f0:	4b73      	ldr	r3, [pc, #460]	; (80123c0 <_strtod_l+0x5a0>)
 80121f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80121f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80121fa:	f7ee f987 	bl	800050c <__aeabi_dmul>
 80121fe:	4606      	mov	r6, r0
 8012200:	4628      	mov	r0, r5
 8012202:	460f      	mov	r7, r1
 8012204:	f7ee f908 	bl	8000418 <__aeabi_ui2d>
 8012208:	4602      	mov	r2, r0
 801220a:	460b      	mov	r3, r1
 801220c:	4630      	mov	r0, r6
 801220e:	4639      	mov	r1, r7
 8012210:	f7ed ffc6 	bl	80001a0 <__adddf3>
 8012214:	2c0f      	cmp	r4, #15
 8012216:	4681      	mov	r9, r0
 8012218:	468a      	mov	sl, r1
 801221a:	ddd5      	ble.n	80121c8 <_strtod_l+0x3a8>
 801221c:	9b07      	ldr	r3, [sp, #28]
 801221e:	eba4 0808 	sub.w	r8, r4, r8
 8012222:	4498      	add	r8, r3
 8012224:	f1b8 0f00 	cmp.w	r8, #0
 8012228:	f340 809a 	ble.w	8012360 <_strtod_l+0x540>
 801222c:	f018 030f 	ands.w	r3, r8, #15
 8012230:	d00a      	beq.n	8012248 <_strtod_l+0x428>
 8012232:	4963      	ldr	r1, [pc, #396]	; (80123c0 <_strtod_l+0x5a0>)
 8012234:	464a      	mov	r2, r9
 8012236:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801223a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801223e:	4653      	mov	r3, sl
 8012240:	f7ee f964 	bl	800050c <__aeabi_dmul>
 8012244:	4681      	mov	r9, r0
 8012246:	468a      	mov	sl, r1
 8012248:	f038 080f 	bics.w	r8, r8, #15
 801224c:	d077      	beq.n	801233e <_strtod_l+0x51e>
 801224e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012252:	dd4b      	ble.n	80122ec <_strtod_l+0x4cc>
 8012254:	f04f 0800 	mov.w	r8, #0
 8012258:	f8cd 8010 	str.w	r8, [sp, #16]
 801225c:	f8cd 8020 	str.w	r8, [sp, #32]
 8012260:	f8cd 8018 	str.w	r8, [sp, #24]
 8012264:	2322      	movs	r3, #34	; 0x22
 8012266:	f04f 0900 	mov.w	r9, #0
 801226a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80123c8 <_strtod_l+0x5a8>
 801226e:	f8cb 3000 	str.w	r3, [fp]
 8012272:	9b08      	ldr	r3, [sp, #32]
 8012274:	2b00      	cmp	r3, #0
 8012276:	f43f ae12 	beq.w	8011e9e <_strtod_l+0x7e>
 801227a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801227c:	4658      	mov	r0, fp
 801227e:	f001 ffc3 	bl	8014208 <_Bfree>
 8012282:	9906      	ldr	r1, [sp, #24]
 8012284:	4658      	mov	r0, fp
 8012286:	f001 ffbf 	bl	8014208 <_Bfree>
 801228a:	9904      	ldr	r1, [sp, #16]
 801228c:	4658      	mov	r0, fp
 801228e:	f001 ffbb 	bl	8014208 <_Bfree>
 8012292:	9908      	ldr	r1, [sp, #32]
 8012294:	4658      	mov	r0, fp
 8012296:	f001 ffb7 	bl	8014208 <_Bfree>
 801229a:	4641      	mov	r1, r8
 801229c:	4658      	mov	r0, fp
 801229e:	f001 ffb3 	bl	8014208 <_Bfree>
 80122a2:	e5fc      	b.n	8011e9e <_strtod_l+0x7e>
 80122a4:	9a07      	ldr	r2, [sp, #28]
 80122a6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80122aa:	4293      	cmp	r3, r2
 80122ac:	dbb6      	blt.n	801221c <_strtod_l+0x3fc>
 80122ae:	4d44      	ldr	r5, [pc, #272]	; (80123c0 <_strtod_l+0x5a0>)
 80122b0:	f1c4 040f 	rsb	r4, r4, #15
 80122b4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80122b8:	464a      	mov	r2, r9
 80122ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122be:	4653      	mov	r3, sl
 80122c0:	f7ee f924 	bl	800050c <__aeabi_dmul>
 80122c4:	9b07      	ldr	r3, [sp, #28]
 80122c6:	1b1c      	subs	r4, r3, r4
 80122c8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80122cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80122d0:	e789      	b.n	80121e6 <_strtod_l+0x3c6>
 80122d2:	f113 0f16 	cmn.w	r3, #22
 80122d6:	dba1      	blt.n	801221c <_strtod_l+0x3fc>
 80122d8:	4a39      	ldr	r2, [pc, #228]	; (80123c0 <_strtod_l+0x5a0>)
 80122da:	4648      	mov	r0, r9
 80122dc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80122e0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80122e4:	4651      	mov	r1, sl
 80122e6:	f7ee fa3b 	bl	8000760 <__aeabi_ddiv>
 80122ea:	e77e      	b.n	80121ea <_strtod_l+0x3ca>
 80122ec:	2300      	movs	r3, #0
 80122ee:	4648      	mov	r0, r9
 80122f0:	4651      	mov	r1, sl
 80122f2:	461d      	mov	r5, r3
 80122f4:	4e33      	ldr	r6, [pc, #204]	; (80123c4 <_strtod_l+0x5a4>)
 80122f6:	ea4f 1828 	mov.w	r8, r8, asr #4
 80122fa:	f1b8 0f01 	cmp.w	r8, #1
 80122fe:	dc21      	bgt.n	8012344 <_strtod_l+0x524>
 8012300:	b10b      	cbz	r3, 8012306 <_strtod_l+0x4e6>
 8012302:	4681      	mov	r9, r0
 8012304:	468a      	mov	sl, r1
 8012306:	4b2f      	ldr	r3, [pc, #188]	; (80123c4 <_strtod_l+0x5a4>)
 8012308:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 801230c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012310:	464a      	mov	r2, r9
 8012312:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012316:	4653      	mov	r3, sl
 8012318:	f7ee f8f8 	bl	800050c <__aeabi_dmul>
 801231c:	4b2a      	ldr	r3, [pc, #168]	; (80123c8 <_strtod_l+0x5a8>)
 801231e:	460a      	mov	r2, r1
 8012320:	400b      	ands	r3, r1
 8012322:	492a      	ldr	r1, [pc, #168]	; (80123cc <_strtod_l+0x5ac>)
 8012324:	4681      	mov	r9, r0
 8012326:	428b      	cmp	r3, r1
 8012328:	d894      	bhi.n	8012254 <_strtod_l+0x434>
 801232a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801232e:	428b      	cmp	r3, r1
 8012330:	bf86      	itte	hi
 8012332:	f04f 39ff 	movhi.w	r9, #4294967295
 8012336:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80123d4 <_strtod_l+0x5b4>
 801233a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 801233e:	2300      	movs	r3, #0
 8012340:	9305      	str	r3, [sp, #20]
 8012342:	e07b      	b.n	801243c <_strtod_l+0x61c>
 8012344:	f018 0f01 	tst.w	r8, #1
 8012348:	d006      	beq.n	8012358 <_strtod_l+0x538>
 801234a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012352:	f7ee f8db 	bl	800050c <__aeabi_dmul>
 8012356:	2301      	movs	r3, #1
 8012358:	3501      	adds	r5, #1
 801235a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801235e:	e7cc      	b.n	80122fa <_strtod_l+0x4da>
 8012360:	d0ed      	beq.n	801233e <_strtod_l+0x51e>
 8012362:	f1c8 0800 	rsb	r8, r8, #0
 8012366:	f018 020f 	ands.w	r2, r8, #15
 801236a:	d00a      	beq.n	8012382 <_strtod_l+0x562>
 801236c:	4b14      	ldr	r3, [pc, #80]	; (80123c0 <_strtod_l+0x5a0>)
 801236e:	4648      	mov	r0, r9
 8012370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012374:	4651      	mov	r1, sl
 8012376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237a:	f7ee f9f1 	bl	8000760 <__aeabi_ddiv>
 801237e:	4681      	mov	r9, r0
 8012380:	468a      	mov	sl, r1
 8012382:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012386:	d0da      	beq.n	801233e <_strtod_l+0x51e>
 8012388:	f1b8 0f1f 	cmp.w	r8, #31
 801238c:	dd24      	ble.n	80123d8 <_strtod_l+0x5b8>
 801238e:	f04f 0800 	mov.w	r8, #0
 8012392:	f8cd 8010 	str.w	r8, [sp, #16]
 8012396:	f8cd 8020 	str.w	r8, [sp, #32]
 801239a:	f8cd 8018 	str.w	r8, [sp, #24]
 801239e:	2322      	movs	r3, #34	; 0x22
 80123a0:	f04f 0900 	mov.w	r9, #0
 80123a4:	f04f 0a00 	mov.w	sl, #0
 80123a8:	f8cb 3000 	str.w	r3, [fp]
 80123ac:	e761      	b.n	8012272 <_strtod_l+0x452>
 80123ae:	bf00      	nop
 80123b0:	0801a319 	.word	0x0801a319
 80123b4:	0801a184 	.word	0x0801a184
 80123b8:	0801a003 	.word	0x0801a003
 80123bc:	0801a040 	.word	0x0801a040
 80123c0:	0801a218 	.word	0x0801a218
 80123c4:	0801a1f0 	.word	0x0801a1f0
 80123c8:	7ff00000 	.word	0x7ff00000
 80123cc:	7ca00000 	.word	0x7ca00000
 80123d0:	fff80000 	.word	0xfff80000
 80123d4:	7fefffff 	.word	0x7fefffff
 80123d8:	f018 0310 	ands.w	r3, r8, #16
 80123dc:	bf18      	it	ne
 80123de:	236a      	movne	r3, #106	; 0x6a
 80123e0:	4648      	mov	r0, r9
 80123e2:	9305      	str	r3, [sp, #20]
 80123e4:	4651      	mov	r1, sl
 80123e6:	2300      	movs	r3, #0
 80123e8:	4da1      	ldr	r5, [pc, #644]	; (8012670 <_strtod_l+0x850>)
 80123ea:	f1b8 0f00 	cmp.w	r8, #0
 80123ee:	f300 8113 	bgt.w	8012618 <_strtod_l+0x7f8>
 80123f2:	b10b      	cbz	r3, 80123f8 <_strtod_l+0x5d8>
 80123f4:	4681      	mov	r9, r0
 80123f6:	468a      	mov	sl, r1
 80123f8:	9b05      	ldr	r3, [sp, #20]
 80123fa:	b1bb      	cbz	r3, 801242c <_strtod_l+0x60c>
 80123fc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8012400:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012404:	2b00      	cmp	r3, #0
 8012406:	4651      	mov	r1, sl
 8012408:	dd10      	ble.n	801242c <_strtod_l+0x60c>
 801240a:	2b1f      	cmp	r3, #31
 801240c:	f340 8110 	ble.w	8012630 <_strtod_l+0x810>
 8012410:	2b34      	cmp	r3, #52	; 0x34
 8012412:	bfd8      	it	le
 8012414:	f04f 32ff 	movle.w	r2, #4294967295
 8012418:	f04f 0900 	mov.w	r9, #0
 801241c:	bfcf      	iteee	gt
 801241e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8012422:	3b20      	suble	r3, #32
 8012424:	fa02 f303 	lslle.w	r3, r2, r3
 8012428:	ea03 0a01 	andle.w	sl, r3, r1
 801242c:	2200      	movs	r2, #0
 801242e:	2300      	movs	r3, #0
 8012430:	4648      	mov	r0, r9
 8012432:	4651      	mov	r1, sl
 8012434:	f7ee fad2 	bl	80009dc <__aeabi_dcmpeq>
 8012438:	2800      	cmp	r0, #0
 801243a:	d1a8      	bne.n	801238e <_strtod_l+0x56e>
 801243c:	9b06      	ldr	r3, [sp, #24]
 801243e:	9a04      	ldr	r2, [sp, #16]
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	9908      	ldr	r1, [sp, #32]
 8012444:	4623      	mov	r3, r4
 8012446:	4658      	mov	r0, fp
 8012448:	f001 ff30 	bl	80142ac <__s2b>
 801244c:	9008      	str	r0, [sp, #32]
 801244e:	2800      	cmp	r0, #0
 8012450:	f43f af00 	beq.w	8012254 <_strtod_l+0x434>
 8012454:	9a07      	ldr	r2, [sp, #28]
 8012456:	9b07      	ldr	r3, [sp, #28]
 8012458:	2a00      	cmp	r2, #0
 801245a:	f1c3 0300 	rsb	r3, r3, #0
 801245e:	bfa8      	it	ge
 8012460:	2300      	movge	r3, #0
 8012462:	f04f 0800 	mov.w	r8, #0
 8012466:	930e      	str	r3, [sp, #56]	; 0x38
 8012468:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801246c:	9316      	str	r3, [sp, #88]	; 0x58
 801246e:	f8cd 8010 	str.w	r8, [sp, #16]
 8012472:	9b08      	ldr	r3, [sp, #32]
 8012474:	4658      	mov	r0, fp
 8012476:	6859      	ldr	r1, [r3, #4]
 8012478:	f001 fe92 	bl	80141a0 <_Balloc>
 801247c:	9006      	str	r0, [sp, #24]
 801247e:	2800      	cmp	r0, #0
 8012480:	f43f aef0 	beq.w	8012264 <_strtod_l+0x444>
 8012484:	9b08      	ldr	r3, [sp, #32]
 8012486:	300c      	adds	r0, #12
 8012488:	691a      	ldr	r2, [r3, #16]
 801248a:	f103 010c 	add.w	r1, r3, #12
 801248e:	3202      	adds	r2, #2
 8012490:	0092      	lsls	r2, r2, #2
 8012492:	f7ff f821 	bl	80114d8 <memcpy>
 8012496:	ab1e      	add	r3, sp, #120	; 0x78
 8012498:	9301      	str	r3, [sp, #4]
 801249a:	ab1d      	add	r3, sp, #116	; 0x74
 801249c:	9300      	str	r3, [sp, #0]
 801249e:	464a      	mov	r2, r9
 80124a0:	4653      	mov	r3, sl
 80124a2:	4658      	mov	r0, fp
 80124a4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80124a8:	f002 f9ba 	bl	8014820 <__d2b>
 80124ac:	901c      	str	r0, [sp, #112]	; 0x70
 80124ae:	2800      	cmp	r0, #0
 80124b0:	f43f aed8 	beq.w	8012264 <_strtod_l+0x444>
 80124b4:	2101      	movs	r1, #1
 80124b6:	4658      	mov	r0, fp
 80124b8:	f001 ff84 	bl	80143c4 <__i2b>
 80124bc:	9004      	str	r0, [sp, #16]
 80124be:	4603      	mov	r3, r0
 80124c0:	2800      	cmp	r0, #0
 80124c2:	f43f aecf 	beq.w	8012264 <_strtod_l+0x444>
 80124c6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80124c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80124ca:	2d00      	cmp	r5, #0
 80124cc:	bfab      	itete	ge
 80124ce:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80124d0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80124d2:	18ee      	addge	r6, r5, r3
 80124d4:	1b5c      	sublt	r4, r3, r5
 80124d6:	9b05      	ldr	r3, [sp, #20]
 80124d8:	bfa8      	it	ge
 80124da:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80124dc:	eba5 0503 	sub.w	r5, r5, r3
 80124e0:	4415      	add	r5, r2
 80124e2:	4b64      	ldr	r3, [pc, #400]	; (8012674 <_strtod_l+0x854>)
 80124e4:	f105 35ff 	add.w	r5, r5, #4294967295
 80124e8:	bfb8      	it	lt
 80124ea:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80124ec:	429d      	cmp	r5, r3
 80124ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80124f2:	f280 80af 	bge.w	8012654 <_strtod_l+0x834>
 80124f6:	1b5b      	subs	r3, r3, r5
 80124f8:	2b1f      	cmp	r3, #31
 80124fa:	eba2 0203 	sub.w	r2, r2, r3
 80124fe:	f04f 0701 	mov.w	r7, #1
 8012502:	f300 809c 	bgt.w	801263e <_strtod_l+0x81e>
 8012506:	2500      	movs	r5, #0
 8012508:	fa07 f303 	lsl.w	r3, r7, r3
 801250c:	930f      	str	r3, [sp, #60]	; 0x3c
 801250e:	18b7      	adds	r7, r6, r2
 8012510:	9b05      	ldr	r3, [sp, #20]
 8012512:	42be      	cmp	r6, r7
 8012514:	4414      	add	r4, r2
 8012516:	441c      	add	r4, r3
 8012518:	4633      	mov	r3, r6
 801251a:	bfa8      	it	ge
 801251c:	463b      	movge	r3, r7
 801251e:	42a3      	cmp	r3, r4
 8012520:	bfa8      	it	ge
 8012522:	4623      	movge	r3, r4
 8012524:	2b00      	cmp	r3, #0
 8012526:	bfc2      	ittt	gt
 8012528:	1aff      	subgt	r7, r7, r3
 801252a:	1ae4      	subgt	r4, r4, r3
 801252c:	1af6      	subgt	r6, r6, r3
 801252e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012530:	b1bb      	cbz	r3, 8012562 <_strtod_l+0x742>
 8012532:	461a      	mov	r2, r3
 8012534:	9904      	ldr	r1, [sp, #16]
 8012536:	4658      	mov	r0, fp
 8012538:	f001 ffe2 	bl	8014500 <__pow5mult>
 801253c:	9004      	str	r0, [sp, #16]
 801253e:	2800      	cmp	r0, #0
 8012540:	f43f ae90 	beq.w	8012264 <_strtod_l+0x444>
 8012544:	4601      	mov	r1, r0
 8012546:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012548:	4658      	mov	r0, fp
 801254a:	f001 ff44 	bl	80143d6 <__multiply>
 801254e:	9009      	str	r0, [sp, #36]	; 0x24
 8012550:	2800      	cmp	r0, #0
 8012552:	f43f ae87 	beq.w	8012264 <_strtod_l+0x444>
 8012556:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012558:	4658      	mov	r0, fp
 801255a:	f001 fe55 	bl	8014208 <_Bfree>
 801255e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012560:	931c      	str	r3, [sp, #112]	; 0x70
 8012562:	2f00      	cmp	r7, #0
 8012564:	dc7a      	bgt.n	801265c <_strtod_l+0x83c>
 8012566:	9b07      	ldr	r3, [sp, #28]
 8012568:	2b00      	cmp	r3, #0
 801256a:	dd08      	ble.n	801257e <_strtod_l+0x75e>
 801256c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801256e:	9906      	ldr	r1, [sp, #24]
 8012570:	4658      	mov	r0, fp
 8012572:	f001 ffc5 	bl	8014500 <__pow5mult>
 8012576:	9006      	str	r0, [sp, #24]
 8012578:	2800      	cmp	r0, #0
 801257a:	f43f ae73 	beq.w	8012264 <_strtod_l+0x444>
 801257e:	2c00      	cmp	r4, #0
 8012580:	dd08      	ble.n	8012594 <_strtod_l+0x774>
 8012582:	4622      	mov	r2, r4
 8012584:	9906      	ldr	r1, [sp, #24]
 8012586:	4658      	mov	r0, fp
 8012588:	f002 f808 	bl	801459c <__lshift>
 801258c:	9006      	str	r0, [sp, #24]
 801258e:	2800      	cmp	r0, #0
 8012590:	f43f ae68 	beq.w	8012264 <_strtod_l+0x444>
 8012594:	2e00      	cmp	r6, #0
 8012596:	dd08      	ble.n	80125aa <_strtod_l+0x78a>
 8012598:	4632      	mov	r2, r6
 801259a:	9904      	ldr	r1, [sp, #16]
 801259c:	4658      	mov	r0, fp
 801259e:	f001 fffd 	bl	801459c <__lshift>
 80125a2:	9004      	str	r0, [sp, #16]
 80125a4:	2800      	cmp	r0, #0
 80125a6:	f43f ae5d 	beq.w	8012264 <_strtod_l+0x444>
 80125aa:	9a06      	ldr	r2, [sp, #24]
 80125ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 80125ae:	4658      	mov	r0, fp
 80125b0:	f002 f862 	bl	8014678 <__mdiff>
 80125b4:	4680      	mov	r8, r0
 80125b6:	2800      	cmp	r0, #0
 80125b8:	f43f ae54 	beq.w	8012264 <_strtod_l+0x444>
 80125bc:	2400      	movs	r4, #0
 80125be:	68c3      	ldr	r3, [r0, #12]
 80125c0:	9904      	ldr	r1, [sp, #16]
 80125c2:	60c4      	str	r4, [r0, #12]
 80125c4:	930c      	str	r3, [sp, #48]	; 0x30
 80125c6:	f002 f83d 	bl	8014644 <__mcmp>
 80125ca:	42a0      	cmp	r0, r4
 80125cc:	da54      	bge.n	8012678 <_strtod_l+0x858>
 80125ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125d0:	b9f3      	cbnz	r3, 8012610 <_strtod_l+0x7f0>
 80125d2:	f1b9 0f00 	cmp.w	r9, #0
 80125d6:	d11b      	bne.n	8012610 <_strtod_l+0x7f0>
 80125d8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80125dc:	b9c3      	cbnz	r3, 8012610 <_strtod_l+0x7f0>
 80125de:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80125e2:	0d1b      	lsrs	r3, r3, #20
 80125e4:	051b      	lsls	r3, r3, #20
 80125e6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80125ea:	d911      	bls.n	8012610 <_strtod_l+0x7f0>
 80125ec:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80125f0:	b91b      	cbnz	r3, 80125fa <_strtod_l+0x7da>
 80125f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	dd0a      	ble.n	8012610 <_strtod_l+0x7f0>
 80125fa:	4641      	mov	r1, r8
 80125fc:	2201      	movs	r2, #1
 80125fe:	4658      	mov	r0, fp
 8012600:	f001 ffcc 	bl	801459c <__lshift>
 8012604:	9904      	ldr	r1, [sp, #16]
 8012606:	4680      	mov	r8, r0
 8012608:	f002 f81c 	bl	8014644 <__mcmp>
 801260c:	2800      	cmp	r0, #0
 801260e:	dc68      	bgt.n	80126e2 <_strtod_l+0x8c2>
 8012610:	9b05      	ldr	r3, [sp, #20]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d172      	bne.n	80126fc <_strtod_l+0x8dc>
 8012616:	e630      	b.n	801227a <_strtod_l+0x45a>
 8012618:	f018 0f01 	tst.w	r8, #1
 801261c:	d004      	beq.n	8012628 <_strtod_l+0x808>
 801261e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012622:	f7ed ff73 	bl	800050c <__aeabi_dmul>
 8012626:	2301      	movs	r3, #1
 8012628:	ea4f 0868 	mov.w	r8, r8, asr #1
 801262c:	3508      	adds	r5, #8
 801262e:	e6dc      	b.n	80123ea <_strtod_l+0x5ca>
 8012630:	f04f 32ff 	mov.w	r2, #4294967295
 8012634:	fa02 f303 	lsl.w	r3, r2, r3
 8012638:	ea03 0909 	and.w	r9, r3, r9
 801263c:	e6f6      	b.n	801242c <_strtod_l+0x60c>
 801263e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8012642:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8012646:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 801264a:	35e2      	adds	r5, #226	; 0xe2
 801264c:	fa07 f505 	lsl.w	r5, r7, r5
 8012650:	970f      	str	r7, [sp, #60]	; 0x3c
 8012652:	e75c      	b.n	801250e <_strtod_l+0x6ee>
 8012654:	2301      	movs	r3, #1
 8012656:	2500      	movs	r5, #0
 8012658:	930f      	str	r3, [sp, #60]	; 0x3c
 801265a:	e758      	b.n	801250e <_strtod_l+0x6ee>
 801265c:	463a      	mov	r2, r7
 801265e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012660:	4658      	mov	r0, fp
 8012662:	f001 ff9b 	bl	801459c <__lshift>
 8012666:	901c      	str	r0, [sp, #112]	; 0x70
 8012668:	2800      	cmp	r0, #0
 801266a:	f47f af7c 	bne.w	8012566 <_strtod_l+0x746>
 801266e:	e5f9      	b.n	8012264 <_strtod_l+0x444>
 8012670:	0801a058 	.word	0x0801a058
 8012674:	fffffc02 	.word	0xfffffc02
 8012678:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801267c:	f040 8089 	bne.w	8012792 <_strtod_l+0x972>
 8012680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012682:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8012686:	b342      	cbz	r2, 80126da <_strtod_l+0x8ba>
 8012688:	4aaf      	ldr	r2, [pc, #700]	; (8012948 <_strtod_l+0xb28>)
 801268a:	4293      	cmp	r3, r2
 801268c:	d156      	bne.n	801273c <_strtod_l+0x91c>
 801268e:	9b05      	ldr	r3, [sp, #20]
 8012690:	4648      	mov	r0, r9
 8012692:	b1eb      	cbz	r3, 80126d0 <_strtod_l+0x8b0>
 8012694:	4653      	mov	r3, sl
 8012696:	4aad      	ldr	r2, [pc, #692]	; (801294c <_strtod_l+0xb2c>)
 8012698:	f04f 31ff 	mov.w	r1, #4294967295
 801269c:	401a      	ands	r2, r3
 801269e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80126a2:	d818      	bhi.n	80126d6 <_strtod_l+0x8b6>
 80126a4:	0d12      	lsrs	r2, r2, #20
 80126a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80126aa:	fa01 f303 	lsl.w	r3, r1, r3
 80126ae:	4298      	cmp	r0, r3
 80126b0:	d144      	bne.n	801273c <_strtod_l+0x91c>
 80126b2:	4ba7      	ldr	r3, [pc, #668]	; (8012950 <_strtod_l+0xb30>)
 80126b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d102      	bne.n	80126c0 <_strtod_l+0x8a0>
 80126ba:	3001      	adds	r0, #1
 80126bc:	f43f add2 	beq.w	8012264 <_strtod_l+0x444>
 80126c0:	4ba2      	ldr	r3, [pc, #648]	; (801294c <_strtod_l+0xb2c>)
 80126c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126c4:	f04f 0900 	mov.w	r9, #0
 80126c8:	401a      	ands	r2, r3
 80126ca:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80126ce:	e79f      	b.n	8012610 <_strtod_l+0x7f0>
 80126d0:	f04f 33ff 	mov.w	r3, #4294967295
 80126d4:	e7eb      	b.n	80126ae <_strtod_l+0x88e>
 80126d6:	460b      	mov	r3, r1
 80126d8:	e7e9      	b.n	80126ae <_strtod_l+0x88e>
 80126da:	bb7b      	cbnz	r3, 801273c <_strtod_l+0x91c>
 80126dc:	f1b9 0f00 	cmp.w	r9, #0
 80126e0:	d12c      	bne.n	801273c <_strtod_l+0x91c>
 80126e2:	9905      	ldr	r1, [sp, #20]
 80126e4:	4653      	mov	r3, sl
 80126e6:	4a99      	ldr	r2, [pc, #612]	; (801294c <_strtod_l+0xb2c>)
 80126e8:	b1f1      	cbz	r1, 8012728 <_strtod_l+0x908>
 80126ea:	ea02 010a 	and.w	r1, r2, sl
 80126ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80126f2:	dc19      	bgt.n	8012728 <_strtod_l+0x908>
 80126f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80126f8:	f77f ae51 	ble.w	801239e <_strtod_l+0x57e>
 80126fc:	2300      	movs	r3, #0
 80126fe:	4a95      	ldr	r2, [pc, #596]	; (8012954 <_strtod_l+0xb34>)
 8012700:	4648      	mov	r0, r9
 8012702:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012706:	4651      	mov	r1, sl
 8012708:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801270c:	f7ed fefe 	bl	800050c <__aeabi_dmul>
 8012710:	4681      	mov	r9, r0
 8012712:	468a      	mov	sl, r1
 8012714:	2900      	cmp	r1, #0
 8012716:	f47f adb0 	bne.w	801227a <_strtod_l+0x45a>
 801271a:	2800      	cmp	r0, #0
 801271c:	f47f adad 	bne.w	801227a <_strtod_l+0x45a>
 8012720:	2322      	movs	r3, #34	; 0x22
 8012722:	f8cb 3000 	str.w	r3, [fp]
 8012726:	e5a8      	b.n	801227a <_strtod_l+0x45a>
 8012728:	4013      	ands	r3, r2
 801272a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801272e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8012732:	f04f 39ff 	mov.w	r9, #4294967295
 8012736:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 801273a:	e769      	b.n	8012610 <_strtod_l+0x7f0>
 801273c:	b19d      	cbz	r5, 8012766 <_strtod_l+0x946>
 801273e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012740:	421d      	tst	r5, r3
 8012742:	f43f af65 	beq.w	8012610 <_strtod_l+0x7f0>
 8012746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012748:	9a05      	ldr	r2, [sp, #20]
 801274a:	4648      	mov	r0, r9
 801274c:	4651      	mov	r1, sl
 801274e:	b173      	cbz	r3, 801276e <_strtod_l+0x94e>
 8012750:	f7ff fb44 	bl	8011ddc <sulp>
 8012754:	4602      	mov	r2, r0
 8012756:	460b      	mov	r3, r1
 8012758:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801275c:	f7ed fd20 	bl	80001a0 <__adddf3>
 8012760:	4681      	mov	r9, r0
 8012762:	468a      	mov	sl, r1
 8012764:	e754      	b.n	8012610 <_strtod_l+0x7f0>
 8012766:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012768:	ea13 0f09 	tst.w	r3, r9
 801276c:	e7e9      	b.n	8012742 <_strtod_l+0x922>
 801276e:	f7ff fb35 	bl	8011ddc <sulp>
 8012772:	4602      	mov	r2, r0
 8012774:	460b      	mov	r3, r1
 8012776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801277a:	f7ed fd0f 	bl	800019c <__aeabi_dsub>
 801277e:	2200      	movs	r2, #0
 8012780:	2300      	movs	r3, #0
 8012782:	4681      	mov	r9, r0
 8012784:	468a      	mov	sl, r1
 8012786:	f7ee f929 	bl	80009dc <__aeabi_dcmpeq>
 801278a:	2800      	cmp	r0, #0
 801278c:	f47f ae07 	bne.w	801239e <_strtod_l+0x57e>
 8012790:	e73e      	b.n	8012610 <_strtod_l+0x7f0>
 8012792:	9904      	ldr	r1, [sp, #16]
 8012794:	4640      	mov	r0, r8
 8012796:	f002 f892 	bl	80148be <__ratio>
 801279a:	2200      	movs	r2, #0
 801279c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80127a0:	4606      	mov	r6, r0
 80127a2:	460f      	mov	r7, r1
 80127a4:	f7ee f92e 	bl	8000a04 <__aeabi_dcmple>
 80127a8:	2800      	cmp	r0, #0
 80127aa:	d075      	beq.n	8012898 <_strtod_l+0xa78>
 80127ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d047      	beq.n	8012842 <_strtod_l+0xa22>
 80127b2:	2600      	movs	r6, #0
 80127b4:	4f68      	ldr	r7, [pc, #416]	; (8012958 <_strtod_l+0xb38>)
 80127b6:	4d68      	ldr	r5, [pc, #416]	; (8012958 <_strtod_l+0xb38>)
 80127b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127be:	0d1b      	lsrs	r3, r3, #20
 80127c0:	051b      	lsls	r3, r3, #20
 80127c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80127c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80127c6:	4b65      	ldr	r3, [pc, #404]	; (801295c <_strtod_l+0xb3c>)
 80127c8:	429a      	cmp	r2, r3
 80127ca:	f040 80cf 	bne.w	801296c <_strtod_l+0xb4c>
 80127ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80127d2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80127d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127d8:	4648      	mov	r0, r9
 80127da:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80127de:	4651      	mov	r1, sl
 80127e0:	f001 ffa8 	bl	8014734 <__ulp>
 80127e4:	4602      	mov	r2, r0
 80127e6:	460b      	mov	r3, r1
 80127e8:	4630      	mov	r0, r6
 80127ea:	4639      	mov	r1, r7
 80127ec:	f7ed fe8e 	bl	800050c <__aeabi_dmul>
 80127f0:	464a      	mov	r2, r9
 80127f2:	4653      	mov	r3, sl
 80127f4:	f7ed fcd4 	bl	80001a0 <__adddf3>
 80127f8:	460b      	mov	r3, r1
 80127fa:	4954      	ldr	r1, [pc, #336]	; (801294c <_strtod_l+0xb2c>)
 80127fc:	4a58      	ldr	r2, [pc, #352]	; (8012960 <_strtod_l+0xb40>)
 80127fe:	4019      	ands	r1, r3
 8012800:	4291      	cmp	r1, r2
 8012802:	4681      	mov	r9, r0
 8012804:	d95e      	bls.n	80128c4 <_strtod_l+0xaa4>
 8012806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012808:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801280c:	4293      	cmp	r3, r2
 801280e:	d103      	bne.n	8012818 <_strtod_l+0x9f8>
 8012810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012812:	3301      	adds	r3, #1
 8012814:	f43f ad26 	beq.w	8012264 <_strtod_l+0x444>
 8012818:	f04f 39ff 	mov.w	r9, #4294967295
 801281c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8012950 <_strtod_l+0xb30>
 8012820:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012822:	4658      	mov	r0, fp
 8012824:	f001 fcf0 	bl	8014208 <_Bfree>
 8012828:	9906      	ldr	r1, [sp, #24]
 801282a:	4658      	mov	r0, fp
 801282c:	f001 fcec 	bl	8014208 <_Bfree>
 8012830:	9904      	ldr	r1, [sp, #16]
 8012832:	4658      	mov	r0, fp
 8012834:	f001 fce8 	bl	8014208 <_Bfree>
 8012838:	4641      	mov	r1, r8
 801283a:	4658      	mov	r0, fp
 801283c:	f001 fce4 	bl	8014208 <_Bfree>
 8012840:	e617      	b.n	8012472 <_strtod_l+0x652>
 8012842:	f1b9 0f00 	cmp.w	r9, #0
 8012846:	d119      	bne.n	801287c <_strtod_l+0xa5c>
 8012848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801284a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801284e:	b9e3      	cbnz	r3, 801288a <_strtod_l+0xa6a>
 8012850:	2200      	movs	r2, #0
 8012852:	4b41      	ldr	r3, [pc, #260]	; (8012958 <_strtod_l+0xb38>)
 8012854:	4630      	mov	r0, r6
 8012856:	4639      	mov	r1, r7
 8012858:	f7ee f8ca 	bl	80009f0 <__aeabi_dcmplt>
 801285c:	b9c8      	cbnz	r0, 8012892 <_strtod_l+0xa72>
 801285e:	2200      	movs	r2, #0
 8012860:	4b40      	ldr	r3, [pc, #256]	; (8012964 <_strtod_l+0xb44>)
 8012862:	4630      	mov	r0, r6
 8012864:	4639      	mov	r1, r7
 8012866:	f7ed fe51 	bl	800050c <__aeabi_dmul>
 801286a:	4604      	mov	r4, r0
 801286c:	460d      	mov	r5, r1
 801286e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8012872:	9418      	str	r4, [sp, #96]	; 0x60
 8012874:	9319      	str	r3, [sp, #100]	; 0x64
 8012876:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 801287a:	e79d      	b.n	80127b8 <_strtod_l+0x998>
 801287c:	f1b9 0f01 	cmp.w	r9, #1
 8012880:	d103      	bne.n	801288a <_strtod_l+0xa6a>
 8012882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012884:	2b00      	cmp	r3, #0
 8012886:	f43f ad8a 	beq.w	801239e <_strtod_l+0x57e>
 801288a:	2600      	movs	r6, #0
 801288c:	4f36      	ldr	r7, [pc, #216]	; (8012968 <_strtod_l+0xb48>)
 801288e:	2400      	movs	r4, #0
 8012890:	e791      	b.n	80127b6 <_strtod_l+0x996>
 8012892:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012894:	4d33      	ldr	r5, [pc, #204]	; (8012964 <_strtod_l+0xb44>)
 8012896:	e7ea      	b.n	801286e <_strtod_l+0xa4e>
 8012898:	4b32      	ldr	r3, [pc, #200]	; (8012964 <_strtod_l+0xb44>)
 801289a:	2200      	movs	r2, #0
 801289c:	4630      	mov	r0, r6
 801289e:	4639      	mov	r1, r7
 80128a0:	f7ed fe34 	bl	800050c <__aeabi_dmul>
 80128a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128a6:	4604      	mov	r4, r0
 80128a8:	460d      	mov	r5, r1
 80128aa:	b933      	cbnz	r3, 80128ba <_strtod_l+0xa9a>
 80128ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128b0:	9010      	str	r0, [sp, #64]	; 0x40
 80128b2:	9311      	str	r3, [sp, #68]	; 0x44
 80128b4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80128b8:	e77e      	b.n	80127b8 <_strtod_l+0x998>
 80128ba:	4602      	mov	r2, r0
 80128bc:	460b      	mov	r3, r1
 80128be:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80128c2:	e7f7      	b.n	80128b4 <_strtod_l+0xa94>
 80128c4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80128c8:	9b05      	ldr	r3, [sp, #20]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d1a8      	bne.n	8012820 <_strtod_l+0xa00>
 80128ce:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80128d2:	0d1b      	lsrs	r3, r3, #20
 80128d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80128d6:	051b      	lsls	r3, r3, #20
 80128d8:	429a      	cmp	r2, r3
 80128da:	4656      	mov	r6, sl
 80128dc:	d1a0      	bne.n	8012820 <_strtod_l+0xa00>
 80128de:	4629      	mov	r1, r5
 80128e0:	4620      	mov	r0, r4
 80128e2:	f7ee f8c3 	bl	8000a6c <__aeabi_d2iz>
 80128e6:	f7ed fda7 	bl	8000438 <__aeabi_i2d>
 80128ea:	460b      	mov	r3, r1
 80128ec:	4602      	mov	r2, r0
 80128ee:	4629      	mov	r1, r5
 80128f0:	4620      	mov	r0, r4
 80128f2:	f7ed fc53 	bl	800019c <__aeabi_dsub>
 80128f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128f8:	4604      	mov	r4, r0
 80128fa:	460d      	mov	r5, r1
 80128fc:	b933      	cbnz	r3, 801290c <_strtod_l+0xaec>
 80128fe:	f1b9 0f00 	cmp.w	r9, #0
 8012902:	d103      	bne.n	801290c <_strtod_l+0xaec>
 8012904:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8012908:	2e00      	cmp	r6, #0
 801290a:	d06a      	beq.n	80129e2 <_strtod_l+0xbc2>
 801290c:	a30a      	add	r3, pc, #40	; (adr r3, 8012938 <_strtod_l+0xb18>)
 801290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012912:	4620      	mov	r0, r4
 8012914:	4629      	mov	r1, r5
 8012916:	f7ee f86b 	bl	80009f0 <__aeabi_dcmplt>
 801291a:	2800      	cmp	r0, #0
 801291c:	f47f acad 	bne.w	801227a <_strtod_l+0x45a>
 8012920:	a307      	add	r3, pc, #28	; (adr r3, 8012940 <_strtod_l+0xb20>)
 8012922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012926:	4620      	mov	r0, r4
 8012928:	4629      	mov	r1, r5
 801292a:	f7ee f87f 	bl	8000a2c <__aeabi_dcmpgt>
 801292e:	2800      	cmp	r0, #0
 8012930:	f43f af76 	beq.w	8012820 <_strtod_l+0xa00>
 8012934:	e4a1      	b.n	801227a <_strtod_l+0x45a>
 8012936:	bf00      	nop
 8012938:	94a03595 	.word	0x94a03595
 801293c:	3fdfffff 	.word	0x3fdfffff
 8012940:	35afe535 	.word	0x35afe535
 8012944:	3fe00000 	.word	0x3fe00000
 8012948:	000fffff 	.word	0x000fffff
 801294c:	7ff00000 	.word	0x7ff00000
 8012950:	7fefffff 	.word	0x7fefffff
 8012954:	39500000 	.word	0x39500000
 8012958:	3ff00000 	.word	0x3ff00000
 801295c:	7fe00000 	.word	0x7fe00000
 8012960:	7c9fffff 	.word	0x7c9fffff
 8012964:	3fe00000 	.word	0x3fe00000
 8012968:	bff00000 	.word	0xbff00000
 801296c:	9b05      	ldr	r3, [sp, #20]
 801296e:	b313      	cbz	r3, 80129b6 <_strtod_l+0xb96>
 8012970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012972:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012976:	d81e      	bhi.n	80129b6 <_strtod_l+0xb96>
 8012978:	a325      	add	r3, pc, #148	; (adr r3, 8012a10 <_strtod_l+0xbf0>)
 801297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297e:	4620      	mov	r0, r4
 8012980:	4629      	mov	r1, r5
 8012982:	f7ee f83f 	bl	8000a04 <__aeabi_dcmple>
 8012986:	b190      	cbz	r0, 80129ae <_strtod_l+0xb8e>
 8012988:	4629      	mov	r1, r5
 801298a:	4620      	mov	r0, r4
 801298c:	f7ee f896 	bl	8000abc <__aeabi_d2uiz>
 8012990:	2800      	cmp	r0, #0
 8012992:	bf08      	it	eq
 8012994:	2001      	moveq	r0, #1
 8012996:	f7ed fd3f 	bl	8000418 <__aeabi_ui2d>
 801299a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801299c:	4604      	mov	r4, r0
 801299e:	460d      	mov	r5, r1
 80129a0:	b9d3      	cbnz	r3, 80129d8 <_strtod_l+0xbb8>
 80129a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129a6:	9012      	str	r0, [sp, #72]	; 0x48
 80129a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80129aa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80129ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80129b0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80129b4:	1a9f      	subs	r7, r3, r2
 80129b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80129ba:	f001 febb 	bl	8014734 <__ulp>
 80129be:	4602      	mov	r2, r0
 80129c0:	460b      	mov	r3, r1
 80129c2:	4630      	mov	r0, r6
 80129c4:	4639      	mov	r1, r7
 80129c6:	f7ed fda1 	bl	800050c <__aeabi_dmul>
 80129ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80129ce:	f7ed fbe7 	bl	80001a0 <__adddf3>
 80129d2:	4681      	mov	r9, r0
 80129d4:	468a      	mov	sl, r1
 80129d6:	e777      	b.n	80128c8 <_strtod_l+0xaa8>
 80129d8:	4602      	mov	r2, r0
 80129da:	460b      	mov	r3, r1
 80129dc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80129e0:	e7e3      	b.n	80129aa <_strtod_l+0xb8a>
 80129e2:	a30d      	add	r3, pc, #52	; (adr r3, 8012a18 <_strtod_l+0xbf8>)
 80129e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e8:	f7ee f802 	bl	80009f0 <__aeabi_dcmplt>
 80129ec:	e79f      	b.n	801292e <_strtod_l+0xb0e>
 80129ee:	2300      	movs	r3, #0
 80129f0:	930d      	str	r3, [sp, #52]	; 0x34
 80129f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80129f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80129f6:	6013      	str	r3, [r2, #0]
 80129f8:	f7ff ba55 	b.w	8011ea6 <_strtod_l+0x86>
 80129fc:	2b65      	cmp	r3, #101	; 0x65
 80129fe:	f04f 0200 	mov.w	r2, #0
 8012a02:	f43f ab42 	beq.w	801208a <_strtod_l+0x26a>
 8012a06:	2101      	movs	r1, #1
 8012a08:	4614      	mov	r4, r2
 8012a0a:	9105      	str	r1, [sp, #20]
 8012a0c:	f7ff babf 	b.w	8011f8e <_strtod_l+0x16e>
 8012a10:	ffc00000 	.word	0xffc00000
 8012a14:	41dfffff 	.word	0x41dfffff
 8012a18:	94a03595 	.word	0x94a03595
 8012a1c:	3fcfffff 	.word	0x3fcfffff

08012a20 <strtod>:
 8012a20:	4b06      	ldr	r3, [pc, #24]	; (8012a3c <strtod+0x1c>)
 8012a22:	b410      	push	{r4}
 8012a24:	681c      	ldr	r4, [r3, #0]
 8012a26:	4a06      	ldr	r2, [pc, #24]	; (8012a40 <strtod+0x20>)
 8012a28:	6a23      	ldr	r3, [r4, #32]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	bf08      	it	eq
 8012a2e:	4613      	moveq	r3, r2
 8012a30:	460a      	mov	r2, r1
 8012a32:	4601      	mov	r1, r0
 8012a34:	4620      	mov	r0, r4
 8012a36:	bc10      	pop	{r4}
 8012a38:	f7ff b9f2 	b.w	8011e20 <_strtod_l>
 8012a3c:	20000060 	.word	0x20000060
 8012a40:	200000c4 	.word	0x200000c4

08012a44 <strtof>:
 8012a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a48:	4e21      	ldr	r6, [pc, #132]	; (8012ad0 <strtof+0x8c>)
 8012a4a:	4a22      	ldr	r2, [pc, #136]	; (8012ad4 <strtof+0x90>)
 8012a4c:	6834      	ldr	r4, [r6, #0]
 8012a4e:	6a23      	ldr	r3, [r4, #32]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	bf08      	it	eq
 8012a54:	4613      	moveq	r3, r2
 8012a56:	460a      	mov	r2, r1
 8012a58:	4601      	mov	r1, r0
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f7ff f9e0 	bl	8011e20 <_strtod_l>
 8012a60:	4605      	mov	r5, r0
 8012a62:	460c      	mov	r4, r1
 8012a64:	4602      	mov	r2, r0
 8012a66:	460b      	mov	r3, r1
 8012a68:	4628      	mov	r0, r5
 8012a6a:	4621      	mov	r1, r4
 8012a6c:	f7ed ffe8 	bl	8000a40 <__aeabi_dcmpun>
 8012a70:	b120      	cbz	r0, 8012a7c <strtof+0x38>
 8012a72:	2000      	movs	r0, #0
 8012a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a78:	f002 bade 	b.w	8015038 <nanf>
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	4628      	mov	r0, r5
 8012a80:	f7ee f83c 	bl	8000afc <__aeabi_d2f>
 8012a84:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8012a88:	4607      	mov	r7, r0
 8012a8a:	4913      	ldr	r1, [pc, #76]	; (8012ad8 <strtof+0x94>)
 8012a8c:	4640      	mov	r0, r8
 8012a8e:	f7ee fb59 	bl	8001144 <__aeabi_fcmpun>
 8012a92:	b9c8      	cbnz	r0, 8012ac8 <strtof+0x84>
 8012a94:	4910      	ldr	r1, [pc, #64]	; (8012ad8 <strtof+0x94>)
 8012a96:	4640      	mov	r0, r8
 8012a98:	f7ee fb36 	bl	8001108 <__aeabi_fcmple>
 8012a9c:	b9a0      	cbnz	r0, 8012ac8 <strtof+0x84>
 8012a9e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8012aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8012aa6:	4b0d      	ldr	r3, [pc, #52]	; (8012adc <strtof+0x98>)
 8012aa8:	4628      	mov	r0, r5
 8012aaa:	4621      	mov	r1, r4
 8012aac:	f7ed ffc8 	bl	8000a40 <__aeabi_dcmpun>
 8012ab0:	b938      	cbnz	r0, 8012ac2 <strtof+0x7e>
 8012ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ab6:	4b09      	ldr	r3, [pc, #36]	; (8012adc <strtof+0x98>)
 8012ab8:	4628      	mov	r0, r5
 8012aba:	4621      	mov	r1, r4
 8012abc:	f7ed ffa2 	bl	8000a04 <__aeabi_dcmple>
 8012ac0:	b110      	cbz	r0, 8012ac8 <strtof+0x84>
 8012ac2:	2222      	movs	r2, #34	; 0x22
 8012ac4:	6833      	ldr	r3, [r6, #0]
 8012ac6:	601a      	str	r2, [r3, #0]
 8012ac8:	4638      	mov	r0, r7
 8012aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ace:	bf00      	nop
 8012ad0:	20000060 	.word	0x20000060
 8012ad4:	200000c4 	.word	0x200000c4
 8012ad8:	7f7fffff 	.word	0x7f7fffff
 8012adc:	7fefffff 	.word	0x7fefffff

08012ae0 <__strtok_r>:
 8012ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ae2:	b918      	cbnz	r0, 8012aec <__strtok_r+0xc>
 8012ae4:	6810      	ldr	r0, [r2, #0]
 8012ae6:	b908      	cbnz	r0, 8012aec <__strtok_r+0xc>
 8012ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012aea:	4620      	mov	r0, r4
 8012aec:	4604      	mov	r4, r0
 8012aee:	460f      	mov	r7, r1
 8012af0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012af4:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012af8:	b91e      	cbnz	r6, 8012b02 <__strtok_r+0x22>
 8012afa:	b96d      	cbnz	r5, 8012b18 <__strtok_r+0x38>
 8012afc:	6015      	str	r5, [r2, #0]
 8012afe:	4628      	mov	r0, r5
 8012b00:	e7f2      	b.n	8012ae8 <__strtok_r+0x8>
 8012b02:	42b5      	cmp	r5, r6
 8012b04:	d1f6      	bne.n	8012af4 <__strtok_r+0x14>
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d1ef      	bne.n	8012aea <__strtok_r+0xa>
 8012b0a:	6014      	str	r4, [r2, #0]
 8012b0c:	7003      	strb	r3, [r0, #0]
 8012b0e:	e7eb      	b.n	8012ae8 <__strtok_r+0x8>
 8012b10:	462b      	mov	r3, r5
 8012b12:	e00d      	b.n	8012b30 <__strtok_r+0x50>
 8012b14:	b926      	cbnz	r6, 8012b20 <__strtok_r+0x40>
 8012b16:	461c      	mov	r4, r3
 8012b18:	4623      	mov	r3, r4
 8012b1a:	460f      	mov	r7, r1
 8012b1c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8012b20:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012b24:	42b5      	cmp	r5, r6
 8012b26:	d1f5      	bne.n	8012b14 <__strtok_r+0x34>
 8012b28:	2d00      	cmp	r5, #0
 8012b2a:	d0f1      	beq.n	8012b10 <__strtok_r+0x30>
 8012b2c:	2100      	movs	r1, #0
 8012b2e:	7021      	strb	r1, [r4, #0]
 8012b30:	6013      	str	r3, [r2, #0]
 8012b32:	e7d9      	b.n	8012ae8 <__strtok_r+0x8>

08012b34 <strtok_r>:
 8012b34:	2301      	movs	r3, #1
 8012b36:	f7ff bfd3 	b.w	8012ae0 <__strtok_r>

08012b3a <_strtoul_l.isra.0>:
 8012b3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b3e:	4680      	mov	r8, r0
 8012b40:	4689      	mov	r9, r1
 8012b42:	4692      	mov	sl, r2
 8012b44:	461e      	mov	r6, r3
 8012b46:	460f      	mov	r7, r1
 8012b48:	463d      	mov	r5, r7
 8012b4a:	9808      	ldr	r0, [sp, #32]
 8012b4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b50:	f7fe fc9e 	bl	8011490 <__locale_ctype_ptr_l>
 8012b54:	4420      	add	r0, r4
 8012b56:	7843      	ldrb	r3, [r0, #1]
 8012b58:	f013 0308 	ands.w	r3, r3, #8
 8012b5c:	d130      	bne.n	8012bc0 <_strtoul_l.isra.0+0x86>
 8012b5e:	2c2d      	cmp	r4, #45	; 0x2d
 8012b60:	d130      	bne.n	8012bc4 <_strtoul_l.isra.0+0x8a>
 8012b62:	2101      	movs	r1, #1
 8012b64:	787c      	ldrb	r4, [r7, #1]
 8012b66:	1cbd      	adds	r5, r7, #2
 8012b68:	2e00      	cmp	r6, #0
 8012b6a:	d05c      	beq.n	8012c26 <_strtoul_l.isra.0+0xec>
 8012b6c:	2e10      	cmp	r6, #16
 8012b6e:	d109      	bne.n	8012b84 <_strtoul_l.isra.0+0x4a>
 8012b70:	2c30      	cmp	r4, #48	; 0x30
 8012b72:	d107      	bne.n	8012b84 <_strtoul_l.isra.0+0x4a>
 8012b74:	782b      	ldrb	r3, [r5, #0]
 8012b76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012b7a:	2b58      	cmp	r3, #88	; 0x58
 8012b7c:	d14e      	bne.n	8012c1c <_strtoul_l.isra.0+0xe2>
 8012b7e:	2610      	movs	r6, #16
 8012b80:	786c      	ldrb	r4, [r5, #1]
 8012b82:	3502      	adds	r5, #2
 8012b84:	f04f 32ff 	mov.w	r2, #4294967295
 8012b88:	fbb2 f2f6 	udiv	r2, r2, r6
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	fb06 fc02 	mul.w	ip, r6, r2
 8012b92:	4618      	mov	r0, r3
 8012b94:	ea6f 0c0c 	mvn.w	ip, ip
 8012b98:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012b9c:	2f09      	cmp	r7, #9
 8012b9e:	d817      	bhi.n	8012bd0 <_strtoul_l.isra.0+0x96>
 8012ba0:	463c      	mov	r4, r7
 8012ba2:	42a6      	cmp	r6, r4
 8012ba4:	dd23      	ble.n	8012bee <_strtoul_l.isra.0+0xb4>
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	db1e      	blt.n	8012be8 <_strtoul_l.isra.0+0xae>
 8012baa:	4282      	cmp	r2, r0
 8012bac:	d31c      	bcc.n	8012be8 <_strtoul_l.isra.0+0xae>
 8012bae:	d101      	bne.n	8012bb4 <_strtoul_l.isra.0+0x7a>
 8012bb0:	45a4      	cmp	ip, r4
 8012bb2:	db19      	blt.n	8012be8 <_strtoul_l.isra.0+0xae>
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	fb00 4006 	mla	r0, r0, r6, r4
 8012bba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012bbe:	e7eb      	b.n	8012b98 <_strtoul_l.isra.0+0x5e>
 8012bc0:	462f      	mov	r7, r5
 8012bc2:	e7c1      	b.n	8012b48 <_strtoul_l.isra.0+0xe>
 8012bc4:	2c2b      	cmp	r4, #43	; 0x2b
 8012bc6:	bf04      	itt	eq
 8012bc8:	1cbd      	addeq	r5, r7, #2
 8012bca:	787c      	ldrbeq	r4, [r7, #1]
 8012bcc:	4619      	mov	r1, r3
 8012bce:	e7cb      	b.n	8012b68 <_strtoul_l.isra.0+0x2e>
 8012bd0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012bd4:	2f19      	cmp	r7, #25
 8012bd6:	d801      	bhi.n	8012bdc <_strtoul_l.isra.0+0xa2>
 8012bd8:	3c37      	subs	r4, #55	; 0x37
 8012bda:	e7e2      	b.n	8012ba2 <_strtoul_l.isra.0+0x68>
 8012bdc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012be0:	2f19      	cmp	r7, #25
 8012be2:	d804      	bhi.n	8012bee <_strtoul_l.isra.0+0xb4>
 8012be4:	3c57      	subs	r4, #87	; 0x57
 8012be6:	e7dc      	b.n	8012ba2 <_strtoul_l.isra.0+0x68>
 8012be8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bec:	e7e5      	b.n	8012bba <_strtoul_l.isra.0+0x80>
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	da09      	bge.n	8012c06 <_strtoul_l.isra.0+0xcc>
 8012bf2:	2322      	movs	r3, #34	; 0x22
 8012bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8012bf8:	f8c8 3000 	str.w	r3, [r8]
 8012bfc:	f1ba 0f00 	cmp.w	sl, #0
 8012c00:	d107      	bne.n	8012c12 <_strtoul_l.isra.0+0xd8>
 8012c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c06:	b101      	cbz	r1, 8012c0a <_strtoul_l.isra.0+0xd0>
 8012c08:	4240      	negs	r0, r0
 8012c0a:	f1ba 0f00 	cmp.w	sl, #0
 8012c0e:	d0f8      	beq.n	8012c02 <_strtoul_l.isra.0+0xc8>
 8012c10:	b10b      	cbz	r3, 8012c16 <_strtoul_l.isra.0+0xdc>
 8012c12:	f105 39ff 	add.w	r9, r5, #4294967295
 8012c16:	f8ca 9000 	str.w	r9, [sl]
 8012c1a:	e7f2      	b.n	8012c02 <_strtoul_l.isra.0+0xc8>
 8012c1c:	2430      	movs	r4, #48	; 0x30
 8012c1e:	2e00      	cmp	r6, #0
 8012c20:	d1b0      	bne.n	8012b84 <_strtoul_l.isra.0+0x4a>
 8012c22:	2608      	movs	r6, #8
 8012c24:	e7ae      	b.n	8012b84 <_strtoul_l.isra.0+0x4a>
 8012c26:	2c30      	cmp	r4, #48	; 0x30
 8012c28:	d0a4      	beq.n	8012b74 <_strtoul_l.isra.0+0x3a>
 8012c2a:	260a      	movs	r6, #10
 8012c2c:	e7aa      	b.n	8012b84 <_strtoul_l.isra.0+0x4a>
	...

08012c30 <strtoul>:
 8012c30:	4b08      	ldr	r3, [pc, #32]	; (8012c54 <strtoul+0x24>)
 8012c32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c34:	681c      	ldr	r4, [r3, #0]
 8012c36:	4d08      	ldr	r5, [pc, #32]	; (8012c58 <strtoul+0x28>)
 8012c38:	6a23      	ldr	r3, [r4, #32]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	bf08      	it	eq
 8012c3e:	462b      	moveq	r3, r5
 8012c40:	9300      	str	r3, [sp, #0]
 8012c42:	4613      	mov	r3, r2
 8012c44:	460a      	mov	r2, r1
 8012c46:	4601      	mov	r1, r0
 8012c48:	4620      	mov	r0, r4
 8012c4a:	f7ff ff76 	bl	8012b3a <_strtoul_l.isra.0>
 8012c4e:	b003      	add	sp, #12
 8012c50:	bd30      	pop	{r4, r5, pc}
 8012c52:	bf00      	nop
 8012c54:	20000060 	.word	0x20000060
 8012c58:	200000c4 	.word	0x200000c4

08012c5c <_vsniprintf_r>:
 8012c5c:	b530      	push	{r4, r5, lr}
 8012c5e:	1e14      	subs	r4, r2, #0
 8012c60:	4605      	mov	r5, r0
 8012c62:	b09b      	sub	sp, #108	; 0x6c
 8012c64:	4618      	mov	r0, r3
 8012c66:	da05      	bge.n	8012c74 <_vsniprintf_r+0x18>
 8012c68:	238b      	movs	r3, #139	; 0x8b
 8012c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8012c6e:	602b      	str	r3, [r5, #0]
 8012c70:	b01b      	add	sp, #108	; 0x6c
 8012c72:	bd30      	pop	{r4, r5, pc}
 8012c74:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012c78:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012c7c:	bf0c      	ite	eq
 8012c7e:	4623      	moveq	r3, r4
 8012c80:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012c84:	9302      	str	r3, [sp, #8]
 8012c86:	9305      	str	r3, [sp, #20]
 8012c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c8c:	9100      	str	r1, [sp, #0]
 8012c8e:	9104      	str	r1, [sp, #16]
 8012c90:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012c94:	4602      	mov	r2, r0
 8012c96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012c98:	4669      	mov	r1, sp
 8012c9a:	4628      	mov	r0, r5
 8012c9c:	f001 ff86 	bl	8014bac <_svfiprintf_r>
 8012ca0:	1c43      	adds	r3, r0, #1
 8012ca2:	bfbc      	itt	lt
 8012ca4:	238b      	movlt	r3, #139	; 0x8b
 8012ca6:	602b      	strlt	r3, [r5, #0]
 8012ca8:	2c00      	cmp	r4, #0
 8012caa:	d0e1      	beq.n	8012c70 <_vsniprintf_r+0x14>
 8012cac:	2200      	movs	r2, #0
 8012cae:	9b00      	ldr	r3, [sp, #0]
 8012cb0:	701a      	strb	r2, [r3, #0]
 8012cb2:	e7dd      	b.n	8012c70 <_vsniprintf_r+0x14>

08012cb4 <vsniprintf>:
 8012cb4:	b507      	push	{r0, r1, r2, lr}
 8012cb6:	9300      	str	r3, [sp, #0]
 8012cb8:	4613      	mov	r3, r2
 8012cba:	460a      	mov	r2, r1
 8012cbc:	4601      	mov	r1, r0
 8012cbe:	4803      	ldr	r0, [pc, #12]	; (8012ccc <vsniprintf+0x18>)
 8012cc0:	6800      	ldr	r0, [r0, #0]
 8012cc2:	f7ff ffcb 	bl	8012c5c <_vsniprintf_r>
 8012cc6:	b003      	add	sp, #12
 8012cc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ccc:	20000060 	.word	0x20000060

08012cd0 <__ascii_wctomb>:
 8012cd0:	b149      	cbz	r1, 8012ce6 <__ascii_wctomb+0x16>
 8012cd2:	2aff      	cmp	r2, #255	; 0xff
 8012cd4:	bf8b      	itete	hi
 8012cd6:	238a      	movhi	r3, #138	; 0x8a
 8012cd8:	700a      	strbls	r2, [r1, #0]
 8012cda:	6003      	strhi	r3, [r0, #0]
 8012cdc:	2001      	movls	r0, #1
 8012cde:	bf88      	it	hi
 8012ce0:	f04f 30ff 	movhi.w	r0, #4294967295
 8012ce4:	4770      	bx	lr
 8012ce6:	4608      	mov	r0, r1
 8012ce8:	4770      	bx	lr

08012cea <quorem>:
 8012cea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cee:	6903      	ldr	r3, [r0, #16]
 8012cf0:	690c      	ldr	r4, [r1, #16]
 8012cf2:	4680      	mov	r8, r0
 8012cf4:	42a3      	cmp	r3, r4
 8012cf6:	f2c0 8084 	blt.w	8012e02 <quorem+0x118>
 8012cfa:	3c01      	subs	r4, #1
 8012cfc:	f101 0714 	add.w	r7, r1, #20
 8012d00:	f100 0614 	add.w	r6, r0, #20
 8012d04:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012d08:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012d0c:	3501      	adds	r5, #1
 8012d0e:	fbb0 f5f5 	udiv	r5, r0, r5
 8012d12:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012d16:	eb06 030c 	add.w	r3, r6, ip
 8012d1a:	eb07 090c 	add.w	r9, r7, ip
 8012d1e:	9301      	str	r3, [sp, #4]
 8012d20:	b39d      	cbz	r5, 8012d8a <quorem+0xa0>
 8012d22:	f04f 0a00 	mov.w	sl, #0
 8012d26:	4638      	mov	r0, r7
 8012d28:	46b6      	mov	lr, r6
 8012d2a:	46d3      	mov	fp, sl
 8012d2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8012d30:	b293      	uxth	r3, r2
 8012d32:	fb05 a303 	mla	r3, r5, r3, sl
 8012d36:	0c12      	lsrs	r2, r2, #16
 8012d38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012d3c:	fb05 a202 	mla	r2, r5, r2, sl
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	ebab 0303 	sub.w	r3, fp, r3
 8012d46:	f8de b000 	ldr.w	fp, [lr]
 8012d4a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012d4e:	fa1f fb8b 	uxth.w	fp, fp
 8012d52:	445b      	add	r3, fp
 8012d54:	fa1f fb82 	uxth.w	fp, r2
 8012d58:	f8de 2000 	ldr.w	r2, [lr]
 8012d5c:	4581      	cmp	r9, r0
 8012d5e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012d62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d66:	b29b      	uxth	r3, r3
 8012d68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d6c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012d70:	f84e 3b04 	str.w	r3, [lr], #4
 8012d74:	d2da      	bcs.n	8012d2c <quorem+0x42>
 8012d76:	f856 300c 	ldr.w	r3, [r6, ip]
 8012d7a:	b933      	cbnz	r3, 8012d8a <quorem+0xa0>
 8012d7c:	9b01      	ldr	r3, [sp, #4]
 8012d7e:	3b04      	subs	r3, #4
 8012d80:	429e      	cmp	r6, r3
 8012d82:	461a      	mov	r2, r3
 8012d84:	d331      	bcc.n	8012dea <quorem+0x100>
 8012d86:	f8c8 4010 	str.w	r4, [r8, #16]
 8012d8a:	4640      	mov	r0, r8
 8012d8c:	f001 fc5a 	bl	8014644 <__mcmp>
 8012d90:	2800      	cmp	r0, #0
 8012d92:	db26      	blt.n	8012de2 <quorem+0xf8>
 8012d94:	4630      	mov	r0, r6
 8012d96:	f04f 0c00 	mov.w	ip, #0
 8012d9a:	3501      	adds	r5, #1
 8012d9c:	f857 1b04 	ldr.w	r1, [r7], #4
 8012da0:	f8d0 e000 	ldr.w	lr, [r0]
 8012da4:	b28b      	uxth	r3, r1
 8012da6:	ebac 0303 	sub.w	r3, ip, r3
 8012daa:	fa1f f28e 	uxth.w	r2, lr
 8012dae:	4413      	add	r3, r2
 8012db0:	0c0a      	lsrs	r2, r1, #16
 8012db2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012db6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012dba:	b29b      	uxth	r3, r3
 8012dbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012dc0:	45b9      	cmp	r9, r7
 8012dc2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012dc6:	f840 3b04 	str.w	r3, [r0], #4
 8012dca:	d2e7      	bcs.n	8012d9c <quorem+0xb2>
 8012dcc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012dd0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012dd4:	b92a      	cbnz	r2, 8012de2 <quorem+0xf8>
 8012dd6:	3b04      	subs	r3, #4
 8012dd8:	429e      	cmp	r6, r3
 8012dda:	461a      	mov	r2, r3
 8012ddc:	d30b      	bcc.n	8012df6 <quorem+0x10c>
 8012dde:	f8c8 4010 	str.w	r4, [r8, #16]
 8012de2:	4628      	mov	r0, r5
 8012de4:	b003      	add	sp, #12
 8012de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dea:	6812      	ldr	r2, [r2, #0]
 8012dec:	3b04      	subs	r3, #4
 8012dee:	2a00      	cmp	r2, #0
 8012df0:	d1c9      	bne.n	8012d86 <quorem+0x9c>
 8012df2:	3c01      	subs	r4, #1
 8012df4:	e7c4      	b.n	8012d80 <quorem+0x96>
 8012df6:	6812      	ldr	r2, [r2, #0]
 8012df8:	3b04      	subs	r3, #4
 8012dfa:	2a00      	cmp	r2, #0
 8012dfc:	d1ef      	bne.n	8012dde <quorem+0xf4>
 8012dfe:	3c01      	subs	r4, #1
 8012e00:	e7ea      	b.n	8012dd8 <quorem+0xee>
 8012e02:	2000      	movs	r0, #0
 8012e04:	e7ee      	b.n	8012de4 <quorem+0xfa>
	...

08012e08 <_dtoa_r>:
 8012e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e0c:	4616      	mov	r6, r2
 8012e0e:	461f      	mov	r7, r3
 8012e10:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012e12:	b095      	sub	sp, #84	; 0x54
 8012e14:	4604      	mov	r4, r0
 8012e16:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8012e1a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012e1e:	b93d      	cbnz	r5, 8012e30 <_dtoa_r+0x28>
 8012e20:	2010      	movs	r0, #16
 8012e22:	f001 f9a7 	bl	8014174 <malloc>
 8012e26:	6260      	str	r0, [r4, #36]	; 0x24
 8012e28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012e2c:	6005      	str	r5, [r0, #0]
 8012e2e:	60c5      	str	r5, [r0, #12]
 8012e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e32:	6819      	ldr	r1, [r3, #0]
 8012e34:	b151      	cbz	r1, 8012e4c <_dtoa_r+0x44>
 8012e36:	685a      	ldr	r2, [r3, #4]
 8012e38:	2301      	movs	r3, #1
 8012e3a:	4093      	lsls	r3, r2
 8012e3c:	604a      	str	r2, [r1, #4]
 8012e3e:	608b      	str	r3, [r1, #8]
 8012e40:	4620      	mov	r0, r4
 8012e42:	f001 f9e1 	bl	8014208 <_Bfree>
 8012e46:	2200      	movs	r2, #0
 8012e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e4a:	601a      	str	r2, [r3, #0]
 8012e4c:	1e3b      	subs	r3, r7, #0
 8012e4e:	bfaf      	iteee	ge
 8012e50:	2300      	movge	r3, #0
 8012e52:	2201      	movlt	r2, #1
 8012e54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012e58:	9303      	strlt	r3, [sp, #12]
 8012e5a:	bfac      	ite	ge
 8012e5c:	f8c8 3000 	strge.w	r3, [r8]
 8012e60:	f8c8 2000 	strlt.w	r2, [r8]
 8012e64:	4bae      	ldr	r3, [pc, #696]	; (8013120 <_dtoa_r+0x318>)
 8012e66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012e6a:	ea33 0308 	bics.w	r3, r3, r8
 8012e6e:	d11b      	bne.n	8012ea8 <_dtoa_r+0xa0>
 8012e70:	f242 730f 	movw	r3, #9999	; 0x270f
 8012e74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012e76:	6013      	str	r3, [r2, #0]
 8012e78:	9b02      	ldr	r3, [sp, #8]
 8012e7a:	b923      	cbnz	r3, 8012e86 <_dtoa_r+0x7e>
 8012e7c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012e80:	2800      	cmp	r0, #0
 8012e82:	f000 8545 	beq.w	8013910 <_dtoa_r+0xb08>
 8012e86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012e88:	b953      	cbnz	r3, 8012ea0 <_dtoa_r+0x98>
 8012e8a:	4ba6      	ldr	r3, [pc, #664]	; (8013124 <_dtoa_r+0x31c>)
 8012e8c:	e021      	b.n	8012ed2 <_dtoa_r+0xca>
 8012e8e:	4ba6      	ldr	r3, [pc, #664]	; (8013128 <_dtoa_r+0x320>)
 8012e90:	9306      	str	r3, [sp, #24]
 8012e92:	3308      	adds	r3, #8
 8012e94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012e96:	6013      	str	r3, [r2, #0]
 8012e98:	9806      	ldr	r0, [sp, #24]
 8012e9a:	b015      	add	sp, #84	; 0x54
 8012e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea0:	4ba0      	ldr	r3, [pc, #640]	; (8013124 <_dtoa_r+0x31c>)
 8012ea2:	9306      	str	r3, [sp, #24]
 8012ea4:	3303      	adds	r3, #3
 8012ea6:	e7f5      	b.n	8012e94 <_dtoa_r+0x8c>
 8012ea8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012eac:	2200      	movs	r2, #0
 8012eae:	2300      	movs	r3, #0
 8012eb0:	4630      	mov	r0, r6
 8012eb2:	4639      	mov	r1, r7
 8012eb4:	f7ed fd92 	bl	80009dc <__aeabi_dcmpeq>
 8012eb8:	4682      	mov	sl, r0
 8012eba:	b160      	cbz	r0, 8012ed6 <_dtoa_r+0xce>
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012ec0:	6013      	str	r3, [r2, #0]
 8012ec2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	f000 8520 	beq.w	801390a <_dtoa_r+0xb02>
 8012eca:	4b98      	ldr	r3, [pc, #608]	; (801312c <_dtoa_r+0x324>)
 8012ecc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012ece:	6013      	str	r3, [r2, #0]
 8012ed0:	3b01      	subs	r3, #1
 8012ed2:	9306      	str	r3, [sp, #24]
 8012ed4:	e7e0      	b.n	8012e98 <_dtoa_r+0x90>
 8012ed6:	ab12      	add	r3, sp, #72	; 0x48
 8012ed8:	9301      	str	r3, [sp, #4]
 8012eda:	ab13      	add	r3, sp, #76	; 0x4c
 8012edc:	9300      	str	r3, [sp, #0]
 8012ede:	4632      	mov	r2, r6
 8012ee0:	463b      	mov	r3, r7
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	f001 fc9c 	bl	8014820 <__d2b>
 8012ee8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012eec:	4683      	mov	fp, r0
 8012eee:	2d00      	cmp	r5, #0
 8012ef0:	d07d      	beq.n	8012fee <_dtoa_r+0x1e6>
 8012ef2:	46b0      	mov	r8, r6
 8012ef4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012ef8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8012efc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8012f00:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012f04:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8012f08:	2200      	movs	r2, #0
 8012f0a:	4b89      	ldr	r3, [pc, #548]	; (8013130 <_dtoa_r+0x328>)
 8012f0c:	4640      	mov	r0, r8
 8012f0e:	4649      	mov	r1, r9
 8012f10:	f7ed f944 	bl	800019c <__aeabi_dsub>
 8012f14:	a37c      	add	r3, pc, #496	; (adr r3, 8013108 <_dtoa_r+0x300>)
 8012f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1a:	f7ed faf7 	bl	800050c <__aeabi_dmul>
 8012f1e:	a37c      	add	r3, pc, #496	; (adr r3, 8013110 <_dtoa_r+0x308>)
 8012f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f24:	f7ed f93c 	bl	80001a0 <__adddf3>
 8012f28:	4606      	mov	r6, r0
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	460f      	mov	r7, r1
 8012f2e:	f7ed fa83 	bl	8000438 <__aeabi_i2d>
 8012f32:	a379      	add	r3, pc, #484	; (adr r3, 8013118 <_dtoa_r+0x310>)
 8012f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f38:	f7ed fae8 	bl	800050c <__aeabi_dmul>
 8012f3c:	4602      	mov	r2, r0
 8012f3e:	460b      	mov	r3, r1
 8012f40:	4630      	mov	r0, r6
 8012f42:	4639      	mov	r1, r7
 8012f44:	f7ed f92c 	bl	80001a0 <__adddf3>
 8012f48:	4606      	mov	r6, r0
 8012f4a:	460f      	mov	r7, r1
 8012f4c:	f7ed fd8e 	bl	8000a6c <__aeabi_d2iz>
 8012f50:	2200      	movs	r2, #0
 8012f52:	4682      	mov	sl, r0
 8012f54:	2300      	movs	r3, #0
 8012f56:	4630      	mov	r0, r6
 8012f58:	4639      	mov	r1, r7
 8012f5a:	f7ed fd49 	bl	80009f0 <__aeabi_dcmplt>
 8012f5e:	b148      	cbz	r0, 8012f74 <_dtoa_r+0x16c>
 8012f60:	4650      	mov	r0, sl
 8012f62:	f7ed fa69 	bl	8000438 <__aeabi_i2d>
 8012f66:	4632      	mov	r2, r6
 8012f68:	463b      	mov	r3, r7
 8012f6a:	f7ed fd37 	bl	80009dc <__aeabi_dcmpeq>
 8012f6e:	b908      	cbnz	r0, 8012f74 <_dtoa_r+0x16c>
 8012f70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f74:	f1ba 0f16 	cmp.w	sl, #22
 8012f78:	d85a      	bhi.n	8013030 <_dtoa_r+0x228>
 8012f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012f7e:	496d      	ldr	r1, [pc, #436]	; (8013134 <_dtoa_r+0x32c>)
 8012f80:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f88:	f7ed fd50 	bl	8000a2c <__aeabi_dcmpgt>
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	d051      	beq.n	8013034 <_dtoa_r+0x22c>
 8012f90:	2300      	movs	r3, #0
 8012f92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f96:	930d      	str	r3, [sp, #52]	; 0x34
 8012f98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012f9a:	1b5d      	subs	r5, r3, r5
 8012f9c:	1e6b      	subs	r3, r5, #1
 8012f9e:	9307      	str	r3, [sp, #28]
 8012fa0:	bf43      	ittte	mi
 8012fa2:	2300      	movmi	r3, #0
 8012fa4:	f1c5 0901 	rsbmi	r9, r5, #1
 8012fa8:	9307      	strmi	r3, [sp, #28]
 8012faa:	f04f 0900 	movpl.w	r9, #0
 8012fae:	f1ba 0f00 	cmp.w	sl, #0
 8012fb2:	db41      	blt.n	8013038 <_dtoa_r+0x230>
 8012fb4:	9b07      	ldr	r3, [sp, #28]
 8012fb6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8012fba:	4453      	add	r3, sl
 8012fbc:	9307      	str	r3, [sp, #28]
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	9308      	str	r3, [sp, #32]
 8012fc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012fc4:	2b09      	cmp	r3, #9
 8012fc6:	f200 808f 	bhi.w	80130e8 <_dtoa_r+0x2e0>
 8012fca:	2b05      	cmp	r3, #5
 8012fcc:	bfc4      	itt	gt
 8012fce:	3b04      	subgt	r3, #4
 8012fd0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8012fd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012fd4:	bfc8      	it	gt
 8012fd6:	2500      	movgt	r5, #0
 8012fd8:	f1a3 0302 	sub.w	r3, r3, #2
 8012fdc:	bfd8      	it	le
 8012fde:	2501      	movle	r5, #1
 8012fe0:	2b03      	cmp	r3, #3
 8012fe2:	f200 808d 	bhi.w	8013100 <_dtoa_r+0x2f8>
 8012fe6:	e8df f003 	tbb	[pc, r3]
 8012fea:	7d7b      	.short	0x7d7b
 8012fec:	6f2f      	.short	0x6f2f
 8012fee:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012ff2:	441d      	add	r5, r3
 8012ff4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012ff8:	2820      	cmp	r0, #32
 8012ffa:	dd13      	ble.n	8013024 <_dtoa_r+0x21c>
 8012ffc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013000:	9b02      	ldr	r3, [sp, #8]
 8013002:	fa08 f800 	lsl.w	r8, r8, r0
 8013006:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801300a:	fa23 f000 	lsr.w	r0, r3, r0
 801300e:	ea48 0000 	orr.w	r0, r8, r0
 8013012:	f7ed fa01 	bl	8000418 <__aeabi_ui2d>
 8013016:	2301      	movs	r3, #1
 8013018:	4680      	mov	r8, r0
 801301a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 801301e:	3d01      	subs	r5, #1
 8013020:	9310      	str	r3, [sp, #64]	; 0x40
 8013022:	e771      	b.n	8012f08 <_dtoa_r+0x100>
 8013024:	9b02      	ldr	r3, [sp, #8]
 8013026:	f1c0 0020 	rsb	r0, r0, #32
 801302a:	fa03 f000 	lsl.w	r0, r3, r0
 801302e:	e7f0      	b.n	8013012 <_dtoa_r+0x20a>
 8013030:	2301      	movs	r3, #1
 8013032:	e7b0      	b.n	8012f96 <_dtoa_r+0x18e>
 8013034:	900d      	str	r0, [sp, #52]	; 0x34
 8013036:	e7af      	b.n	8012f98 <_dtoa_r+0x190>
 8013038:	f1ca 0300 	rsb	r3, sl, #0
 801303c:	9308      	str	r3, [sp, #32]
 801303e:	2300      	movs	r3, #0
 8013040:	eba9 090a 	sub.w	r9, r9, sl
 8013044:	930c      	str	r3, [sp, #48]	; 0x30
 8013046:	e7bc      	b.n	8012fc2 <_dtoa_r+0x1ba>
 8013048:	2301      	movs	r3, #1
 801304a:	9309      	str	r3, [sp, #36]	; 0x24
 801304c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801304e:	2b00      	cmp	r3, #0
 8013050:	dd74      	ble.n	801313c <_dtoa_r+0x334>
 8013052:	4698      	mov	r8, r3
 8013054:	9304      	str	r3, [sp, #16]
 8013056:	2200      	movs	r2, #0
 8013058:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801305a:	6072      	str	r2, [r6, #4]
 801305c:	2204      	movs	r2, #4
 801305e:	f102 0014 	add.w	r0, r2, #20
 8013062:	4298      	cmp	r0, r3
 8013064:	6871      	ldr	r1, [r6, #4]
 8013066:	d96e      	bls.n	8013146 <_dtoa_r+0x33e>
 8013068:	4620      	mov	r0, r4
 801306a:	f001 f899 	bl	80141a0 <_Balloc>
 801306e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013070:	6030      	str	r0, [r6, #0]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	f1b8 0f0e 	cmp.w	r8, #14
 8013078:	9306      	str	r3, [sp, #24]
 801307a:	f200 80ed 	bhi.w	8013258 <_dtoa_r+0x450>
 801307e:	2d00      	cmp	r5, #0
 8013080:	f000 80ea 	beq.w	8013258 <_dtoa_r+0x450>
 8013084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013088:	f1ba 0f00 	cmp.w	sl, #0
 801308c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013090:	dd77      	ble.n	8013182 <_dtoa_r+0x37a>
 8013092:	4a28      	ldr	r2, [pc, #160]	; (8013134 <_dtoa_r+0x32c>)
 8013094:	f00a 030f 	and.w	r3, sl, #15
 8013098:	ea4f 162a 	mov.w	r6, sl, asr #4
 801309c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80130a0:	06f0      	lsls	r0, r6, #27
 80130a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80130aa:	d568      	bpl.n	801317e <_dtoa_r+0x376>
 80130ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80130b0:	4b21      	ldr	r3, [pc, #132]	; (8013138 <_dtoa_r+0x330>)
 80130b2:	2503      	movs	r5, #3
 80130b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80130b8:	f7ed fb52 	bl	8000760 <__aeabi_ddiv>
 80130bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130c0:	f006 060f 	and.w	r6, r6, #15
 80130c4:	4f1c      	ldr	r7, [pc, #112]	; (8013138 <_dtoa_r+0x330>)
 80130c6:	e04f      	b.n	8013168 <_dtoa_r+0x360>
 80130c8:	2301      	movs	r3, #1
 80130ca:	9309      	str	r3, [sp, #36]	; 0x24
 80130cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80130ce:	4453      	add	r3, sl
 80130d0:	f103 0801 	add.w	r8, r3, #1
 80130d4:	9304      	str	r3, [sp, #16]
 80130d6:	4643      	mov	r3, r8
 80130d8:	2b01      	cmp	r3, #1
 80130da:	bfb8      	it	lt
 80130dc:	2301      	movlt	r3, #1
 80130de:	e7ba      	b.n	8013056 <_dtoa_r+0x24e>
 80130e0:	2300      	movs	r3, #0
 80130e2:	e7b2      	b.n	801304a <_dtoa_r+0x242>
 80130e4:	2300      	movs	r3, #0
 80130e6:	e7f0      	b.n	80130ca <_dtoa_r+0x2c2>
 80130e8:	2501      	movs	r5, #1
 80130ea:	2300      	movs	r3, #0
 80130ec:	9509      	str	r5, [sp, #36]	; 0x24
 80130ee:	931e      	str	r3, [sp, #120]	; 0x78
 80130f0:	f04f 33ff 	mov.w	r3, #4294967295
 80130f4:	2200      	movs	r2, #0
 80130f6:	9304      	str	r3, [sp, #16]
 80130f8:	4698      	mov	r8, r3
 80130fa:	2312      	movs	r3, #18
 80130fc:	921f      	str	r2, [sp, #124]	; 0x7c
 80130fe:	e7aa      	b.n	8013056 <_dtoa_r+0x24e>
 8013100:	2301      	movs	r3, #1
 8013102:	9309      	str	r3, [sp, #36]	; 0x24
 8013104:	e7f4      	b.n	80130f0 <_dtoa_r+0x2e8>
 8013106:	bf00      	nop
 8013108:	636f4361 	.word	0x636f4361
 801310c:	3fd287a7 	.word	0x3fd287a7
 8013110:	8b60c8b3 	.word	0x8b60c8b3
 8013114:	3fc68a28 	.word	0x3fc68a28
 8013118:	509f79fb 	.word	0x509f79fb
 801311c:	3fd34413 	.word	0x3fd34413
 8013120:	7ff00000 	.word	0x7ff00000
 8013124:	0801a18a 	.word	0x0801a18a
 8013128:	0801a181 	.word	0x0801a181
 801312c:	0801a007 	.word	0x0801a007
 8013130:	3ff80000 	.word	0x3ff80000
 8013134:	0801a218 	.word	0x0801a218
 8013138:	0801a1f0 	.word	0x0801a1f0
 801313c:	2301      	movs	r3, #1
 801313e:	9304      	str	r3, [sp, #16]
 8013140:	4698      	mov	r8, r3
 8013142:	461a      	mov	r2, r3
 8013144:	e7da      	b.n	80130fc <_dtoa_r+0x2f4>
 8013146:	3101      	adds	r1, #1
 8013148:	6071      	str	r1, [r6, #4]
 801314a:	0052      	lsls	r2, r2, #1
 801314c:	e787      	b.n	801305e <_dtoa_r+0x256>
 801314e:	07f1      	lsls	r1, r6, #31
 8013150:	d508      	bpl.n	8013164 <_dtoa_r+0x35c>
 8013152:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013156:	e9d7 2300 	ldrd	r2, r3, [r7]
 801315a:	f7ed f9d7 	bl	800050c <__aeabi_dmul>
 801315e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013162:	3501      	adds	r5, #1
 8013164:	1076      	asrs	r6, r6, #1
 8013166:	3708      	adds	r7, #8
 8013168:	2e00      	cmp	r6, #0
 801316a:	d1f0      	bne.n	801314e <_dtoa_r+0x346>
 801316c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013174:	f7ed faf4 	bl	8000760 <__aeabi_ddiv>
 8013178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801317c:	e01b      	b.n	80131b6 <_dtoa_r+0x3ae>
 801317e:	2502      	movs	r5, #2
 8013180:	e7a0      	b.n	80130c4 <_dtoa_r+0x2bc>
 8013182:	f000 80a4 	beq.w	80132ce <_dtoa_r+0x4c6>
 8013186:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801318a:	f1ca 0600 	rsb	r6, sl, #0
 801318e:	4ba0      	ldr	r3, [pc, #640]	; (8013410 <_dtoa_r+0x608>)
 8013190:	f006 020f 	and.w	r2, r6, #15
 8013194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319c:	f7ed f9b6 	bl	800050c <__aeabi_dmul>
 80131a0:	2502      	movs	r5, #2
 80131a2:	2300      	movs	r3, #0
 80131a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131a8:	4f9a      	ldr	r7, [pc, #616]	; (8013414 <_dtoa_r+0x60c>)
 80131aa:	1136      	asrs	r6, r6, #4
 80131ac:	2e00      	cmp	r6, #0
 80131ae:	f040 8083 	bne.w	80132b8 <_dtoa_r+0x4b0>
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d1e0      	bne.n	8013178 <_dtoa_r+0x370>
 80131b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	f000 808a 	beq.w	80132d2 <_dtoa_r+0x4ca>
 80131be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80131c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80131c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80131ca:	2200      	movs	r2, #0
 80131cc:	4b92      	ldr	r3, [pc, #584]	; (8013418 <_dtoa_r+0x610>)
 80131ce:	f7ed fc0f 	bl	80009f0 <__aeabi_dcmplt>
 80131d2:	2800      	cmp	r0, #0
 80131d4:	d07d      	beq.n	80132d2 <_dtoa_r+0x4ca>
 80131d6:	f1b8 0f00 	cmp.w	r8, #0
 80131da:	d07a      	beq.n	80132d2 <_dtoa_r+0x4ca>
 80131dc:	9b04      	ldr	r3, [sp, #16]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	dd36      	ble.n	8013250 <_dtoa_r+0x448>
 80131e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80131e6:	2200      	movs	r2, #0
 80131e8:	4b8c      	ldr	r3, [pc, #560]	; (801341c <_dtoa_r+0x614>)
 80131ea:	f7ed f98f 	bl	800050c <__aeabi_dmul>
 80131ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131f2:	9e04      	ldr	r6, [sp, #16]
 80131f4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80131f8:	3501      	adds	r5, #1
 80131fa:	4628      	mov	r0, r5
 80131fc:	f7ed f91c 	bl	8000438 <__aeabi_i2d>
 8013200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013204:	f7ed f982 	bl	800050c <__aeabi_dmul>
 8013208:	2200      	movs	r2, #0
 801320a:	4b85      	ldr	r3, [pc, #532]	; (8013420 <_dtoa_r+0x618>)
 801320c:	f7ec ffc8 	bl	80001a0 <__adddf3>
 8013210:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8013214:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013218:	950b      	str	r5, [sp, #44]	; 0x2c
 801321a:	2e00      	cmp	r6, #0
 801321c:	d15c      	bne.n	80132d8 <_dtoa_r+0x4d0>
 801321e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013222:	2200      	movs	r2, #0
 8013224:	4b7f      	ldr	r3, [pc, #508]	; (8013424 <_dtoa_r+0x61c>)
 8013226:	f7ec ffb9 	bl	800019c <__aeabi_dsub>
 801322a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801322c:	462b      	mov	r3, r5
 801322e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013232:	f7ed fbfb 	bl	8000a2c <__aeabi_dcmpgt>
 8013236:	2800      	cmp	r0, #0
 8013238:	f040 8281 	bne.w	801373e <_dtoa_r+0x936>
 801323c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013242:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8013246:	f7ed fbd3 	bl	80009f0 <__aeabi_dcmplt>
 801324a:	2800      	cmp	r0, #0
 801324c:	f040 8275 	bne.w	801373a <_dtoa_r+0x932>
 8013250:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013254:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801325a:	2b00      	cmp	r3, #0
 801325c:	f2c0 814b 	blt.w	80134f6 <_dtoa_r+0x6ee>
 8013260:	f1ba 0f0e 	cmp.w	sl, #14
 8013264:	f300 8147 	bgt.w	80134f6 <_dtoa_r+0x6ee>
 8013268:	4b69      	ldr	r3, [pc, #420]	; (8013410 <_dtoa_r+0x608>)
 801326a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013272:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013276:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013278:	2b00      	cmp	r3, #0
 801327a:	f280 80d7 	bge.w	801342c <_dtoa_r+0x624>
 801327e:	f1b8 0f00 	cmp.w	r8, #0
 8013282:	f300 80d3 	bgt.w	801342c <_dtoa_r+0x624>
 8013286:	f040 8257 	bne.w	8013738 <_dtoa_r+0x930>
 801328a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801328e:	2200      	movs	r2, #0
 8013290:	4b64      	ldr	r3, [pc, #400]	; (8013424 <_dtoa_r+0x61c>)
 8013292:	f7ed f93b 	bl	800050c <__aeabi_dmul>
 8013296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801329a:	f7ed fbbd 	bl	8000a18 <__aeabi_dcmpge>
 801329e:	4646      	mov	r6, r8
 80132a0:	4647      	mov	r7, r8
 80132a2:	2800      	cmp	r0, #0
 80132a4:	f040 822d 	bne.w	8013702 <_dtoa_r+0x8fa>
 80132a8:	9b06      	ldr	r3, [sp, #24]
 80132aa:	9a06      	ldr	r2, [sp, #24]
 80132ac:	1c5d      	adds	r5, r3, #1
 80132ae:	2331      	movs	r3, #49	; 0x31
 80132b0:	f10a 0a01 	add.w	sl, sl, #1
 80132b4:	7013      	strb	r3, [r2, #0]
 80132b6:	e228      	b.n	801370a <_dtoa_r+0x902>
 80132b8:	07f2      	lsls	r2, r6, #31
 80132ba:	d505      	bpl.n	80132c8 <_dtoa_r+0x4c0>
 80132bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80132c0:	f7ed f924 	bl	800050c <__aeabi_dmul>
 80132c4:	2301      	movs	r3, #1
 80132c6:	3501      	adds	r5, #1
 80132c8:	1076      	asrs	r6, r6, #1
 80132ca:	3708      	adds	r7, #8
 80132cc:	e76e      	b.n	80131ac <_dtoa_r+0x3a4>
 80132ce:	2502      	movs	r5, #2
 80132d0:	e771      	b.n	80131b6 <_dtoa_r+0x3ae>
 80132d2:	4657      	mov	r7, sl
 80132d4:	4646      	mov	r6, r8
 80132d6:	e790      	b.n	80131fa <_dtoa_r+0x3f2>
 80132d8:	4b4d      	ldr	r3, [pc, #308]	; (8013410 <_dtoa_r+0x608>)
 80132da:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80132de:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80132e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d048      	beq.n	801337a <_dtoa_r+0x572>
 80132e8:	4602      	mov	r2, r0
 80132ea:	460b      	mov	r3, r1
 80132ec:	2000      	movs	r0, #0
 80132ee:	494e      	ldr	r1, [pc, #312]	; (8013428 <_dtoa_r+0x620>)
 80132f0:	f7ed fa36 	bl	8000760 <__aeabi_ddiv>
 80132f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80132f8:	f7ec ff50 	bl	800019c <__aeabi_dsub>
 80132fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013300:	9d06      	ldr	r5, [sp, #24]
 8013302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013306:	f7ed fbb1 	bl	8000a6c <__aeabi_d2iz>
 801330a:	9011      	str	r0, [sp, #68]	; 0x44
 801330c:	f7ed f894 	bl	8000438 <__aeabi_i2d>
 8013310:	4602      	mov	r2, r0
 8013312:	460b      	mov	r3, r1
 8013314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013318:	f7ec ff40 	bl	800019c <__aeabi_dsub>
 801331c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801331e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013322:	3330      	adds	r3, #48	; 0x30
 8013324:	f805 3b01 	strb.w	r3, [r5], #1
 8013328:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801332c:	f7ed fb60 	bl	80009f0 <__aeabi_dcmplt>
 8013330:	2800      	cmp	r0, #0
 8013332:	d163      	bne.n	80133fc <_dtoa_r+0x5f4>
 8013334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013338:	2000      	movs	r0, #0
 801333a:	4937      	ldr	r1, [pc, #220]	; (8013418 <_dtoa_r+0x610>)
 801333c:	f7ec ff2e 	bl	800019c <__aeabi_dsub>
 8013340:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013344:	f7ed fb54 	bl	80009f0 <__aeabi_dcmplt>
 8013348:	2800      	cmp	r0, #0
 801334a:	f040 80b5 	bne.w	80134b8 <_dtoa_r+0x6b0>
 801334e:	9b06      	ldr	r3, [sp, #24]
 8013350:	1aeb      	subs	r3, r5, r3
 8013352:	429e      	cmp	r6, r3
 8013354:	f77f af7c 	ble.w	8013250 <_dtoa_r+0x448>
 8013358:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801335c:	2200      	movs	r2, #0
 801335e:	4b2f      	ldr	r3, [pc, #188]	; (801341c <_dtoa_r+0x614>)
 8013360:	f7ed f8d4 	bl	800050c <__aeabi_dmul>
 8013364:	2200      	movs	r2, #0
 8013366:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801336a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801336e:	4b2b      	ldr	r3, [pc, #172]	; (801341c <_dtoa_r+0x614>)
 8013370:	f7ed f8cc 	bl	800050c <__aeabi_dmul>
 8013374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013378:	e7c3      	b.n	8013302 <_dtoa_r+0x4fa>
 801337a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801337e:	f7ed f8c5 	bl	800050c <__aeabi_dmul>
 8013382:	9b06      	ldr	r3, [sp, #24]
 8013384:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013388:	199d      	adds	r5, r3, r6
 801338a:	461e      	mov	r6, r3
 801338c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013390:	f7ed fb6c 	bl	8000a6c <__aeabi_d2iz>
 8013394:	9011      	str	r0, [sp, #68]	; 0x44
 8013396:	f7ed f84f 	bl	8000438 <__aeabi_i2d>
 801339a:	4602      	mov	r2, r0
 801339c:	460b      	mov	r3, r1
 801339e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133a2:	f7ec fefb 	bl	800019c <__aeabi_dsub>
 80133a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80133a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133ac:	3330      	adds	r3, #48	; 0x30
 80133ae:	f806 3b01 	strb.w	r3, [r6], #1
 80133b2:	42ae      	cmp	r6, r5
 80133b4:	f04f 0200 	mov.w	r2, #0
 80133b8:	d124      	bne.n	8013404 <_dtoa_r+0x5fc>
 80133ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80133be:	4b1a      	ldr	r3, [pc, #104]	; (8013428 <_dtoa_r+0x620>)
 80133c0:	f7ec feee 	bl	80001a0 <__adddf3>
 80133c4:	4602      	mov	r2, r0
 80133c6:	460b      	mov	r3, r1
 80133c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133cc:	f7ed fb2e 	bl	8000a2c <__aeabi_dcmpgt>
 80133d0:	2800      	cmp	r0, #0
 80133d2:	d171      	bne.n	80134b8 <_dtoa_r+0x6b0>
 80133d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80133d8:	2000      	movs	r0, #0
 80133da:	4913      	ldr	r1, [pc, #76]	; (8013428 <_dtoa_r+0x620>)
 80133dc:	f7ec fede 	bl	800019c <__aeabi_dsub>
 80133e0:	4602      	mov	r2, r0
 80133e2:	460b      	mov	r3, r1
 80133e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133e8:	f7ed fb02 	bl	80009f0 <__aeabi_dcmplt>
 80133ec:	2800      	cmp	r0, #0
 80133ee:	f43f af2f 	beq.w	8013250 <_dtoa_r+0x448>
 80133f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80133f6:	1e6a      	subs	r2, r5, #1
 80133f8:	2b30      	cmp	r3, #48	; 0x30
 80133fa:	d001      	beq.n	8013400 <_dtoa_r+0x5f8>
 80133fc:	46ba      	mov	sl, r7
 80133fe:	e04a      	b.n	8013496 <_dtoa_r+0x68e>
 8013400:	4615      	mov	r5, r2
 8013402:	e7f6      	b.n	80133f2 <_dtoa_r+0x5ea>
 8013404:	4b05      	ldr	r3, [pc, #20]	; (801341c <_dtoa_r+0x614>)
 8013406:	f7ed f881 	bl	800050c <__aeabi_dmul>
 801340a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801340e:	e7bd      	b.n	801338c <_dtoa_r+0x584>
 8013410:	0801a218 	.word	0x0801a218
 8013414:	0801a1f0 	.word	0x0801a1f0
 8013418:	3ff00000 	.word	0x3ff00000
 801341c:	40240000 	.word	0x40240000
 8013420:	401c0000 	.word	0x401c0000
 8013424:	40140000 	.word	0x40140000
 8013428:	3fe00000 	.word	0x3fe00000
 801342c:	9d06      	ldr	r5, [sp, #24]
 801342e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013436:	4630      	mov	r0, r6
 8013438:	4639      	mov	r1, r7
 801343a:	f7ed f991 	bl	8000760 <__aeabi_ddiv>
 801343e:	f7ed fb15 	bl	8000a6c <__aeabi_d2iz>
 8013442:	4681      	mov	r9, r0
 8013444:	f7ec fff8 	bl	8000438 <__aeabi_i2d>
 8013448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801344c:	f7ed f85e 	bl	800050c <__aeabi_dmul>
 8013450:	4602      	mov	r2, r0
 8013452:	460b      	mov	r3, r1
 8013454:	4630      	mov	r0, r6
 8013456:	4639      	mov	r1, r7
 8013458:	f7ec fea0 	bl	800019c <__aeabi_dsub>
 801345c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8013460:	f805 6b01 	strb.w	r6, [r5], #1
 8013464:	9e06      	ldr	r6, [sp, #24]
 8013466:	4602      	mov	r2, r0
 8013468:	1bae      	subs	r6, r5, r6
 801346a:	45b0      	cmp	r8, r6
 801346c:	460b      	mov	r3, r1
 801346e:	d135      	bne.n	80134dc <_dtoa_r+0x6d4>
 8013470:	f7ec fe96 	bl	80001a0 <__adddf3>
 8013474:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013478:	4606      	mov	r6, r0
 801347a:	460f      	mov	r7, r1
 801347c:	f7ed fad6 	bl	8000a2c <__aeabi_dcmpgt>
 8013480:	b9c8      	cbnz	r0, 80134b6 <_dtoa_r+0x6ae>
 8013482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013486:	4630      	mov	r0, r6
 8013488:	4639      	mov	r1, r7
 801348a:	f7ed faa7 	bl	80009dc <__aeabi_dcmpeq>
 801348e:	b110      	cbz	r0, 8013496 <_dtoa_r+0x68e>
 8013490:	f019 0f01 	tst.w	r9, #1
 8013494:	d10f      	bne.n	80134b6 <_dtoa_r+0x6ae>
 8013496:	4659      	mov	r1, fp
 8013498:	4620      	mov	r0, r4
 801349a:	f000 feb5 	bl	8014208 <_Bfree>
 801349e:	2300      	movs	r3, #0
 80134a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80134a2:	702b      	strb	r3, [r5, #0]
 80134a4:	f10a 0301 	add.w	r3, sl, #1
 80134a8:	6013      	str	r3, [r2, #0]
 80134aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f43f acf3 	beq.w	8012e98 <_dtoa_r+0x90>
 80134b2:	601d      	str	r5, [r3, #0]
 80134b4:	e4f0      	b.n	8012e98 <_dtoa_r+0x90>
 80134b6:	4657      	mov	r7, sl
 80134b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80134bc:	1e6b      	subs	r3, r5, #1
 80134be:	2a39      	cmp	r2, #57	; 0x39
 80134c0:	d106      	bne.n	80134d0 <_dtoa_r+0x6c8>
 80134c2:	9a06      	ldr	r2, [sp, #24]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d107      	bne.n	80134d8 <_dtoa_r+0x6d0>
 80134c8:	2330      	movs	r3, #48	; 0x30
 80134ca:	7013      	strb	r3, [r2, #0]
 80134cc:	4613      	mov	r3, r2
 80134ce:	3701      	adds	r7, #1
 80134d0:	781a      	ldrb	r2, [r3, #0]
 80134d2:	3201      	adds	r2, #1
 80134d4:	701a      	strb	r2, [r3, #0]
 80134d6:	e791      	b.n	80133fc <_dtoa_r+0x5f4>
 80134d8:	461d      	mov	r5, r3
 80134da:	e7ed      	b.n	80134b8 <_dtoa_r+0x6b0>
 80134dc:	2200      	movs	r2, #0
 80134de:	4b99      	ldr	r3, [pc, #612]	; (8013744 <_dtoa_r+0x93c>)
 80134e0:	f7ed f814 	bl	800050c <__aeabi_dmul>
 80134e4:	2200      	movs	r2, #0
 80134e6:	2300      	movs	r3, #0
 80134e8:	4606      	mov	r6, r0
 80134ea:	460f      	mov	r7, r1
 80134ec:	f7ed fa76 	bl	80009dc <__aeabi_dcmpeq>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d09e      	beq.n	8013432 <_dtoa_r+0x62a>
 80134f4:	e7cf      	b.n	8013496 <_dtoa_r+0x68e>
 80134f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134f8:	2a00      	cmp	r2, #0
 80134fa:	f000 8088 	beq.w	801360e <_dtoa_r+0x806>
 80134fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013500:	2a01      	cmp	r2, #1
 8013502:	dc6d      	bgt.n	80135e0 <_dtoa_r+0x7d8>
 8013504:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013506:	2a00      	cmp	r2, #0
 8013508:	d066      	beq.n	80135d8 <_dtoa_r+0x7d0>
 801350a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801350e:	464d      	mov	r5, r9
 8013510:	9e08      	ldr	r6, [sp, #32]
 8013512:	9a07      	ldr	r2, [sp, #28]
 8013514:	2101      	movs	r1, #1
 8013516:	441a      	add	r2, r3
 8013518:	4620      	mov	r0, r4
 801351a:	4499      	add	r9, r3
 801351c:	9207      	str	r2, [sp, #28]
 801351e:	f000 ff51 	bl	80143c4 <__i2b>
 8013522:	4607      	mov	r7, r0
 8013524:	2d00      	cmp	r5, #0
 8013526:	dd0b      	ble.n	8013540 <_dtoa_r+0x738>
 8013528:	9b07      	ldr	r3, [sp, #28]
 801352a:	2b00      	cmp	r3, #0
 801352c:	dd08      	ble.n	8013540 <_dtoa_r+0x738>
 801352e:	42ab      	cmp	r3, r5
 8013530:	bfa8      	it	ge
 8013532:	462b      	movge	r3, r5
 8013534:	9a07      	ldr	r2, [sp, #28]
 8013536:	eba9 0903 	sub.w	r9, r9, r3
 801353a:	1aed      	subs	r5, r5, r3
 801353c:	1ad3      	subs	r3, r2, r3
 801353e:	9307      	str	r3, [sp, #28]
 8013540:	9b08      	ldr	r3, [sp, #32]
 8013542:	b1eb      	cbz	r3, 8013580 <_dtoa_r+0x778>
 8013544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013546:	2b00      	cmp	r3, #0
 8013548:	d065      	beq.n	8013616 <_dtoa_r+0x80e>
 801354a:	b18e      	cbz	r6, 8013570 <_dtoa_r+0x768>
 801354c:	4639      	mov	r1, r7
 801354e:	4632      	mov	r2, r6
 8013550:	4620      	mov	r0, r4
 8013552:	f000 ffd5 	bl	8014500 <__pow5mult>
 8013556:	465a      	mov	r2, fp
 8013558:	4601      	mov	r1, r0
 801355a:	4607      	mov	r7, r0
 801355c:	4620      	mov	r0, r4
 801355e:	f000 ff3a 	bl	80143d6 <__multiply>
 8013562:	4659      	mov	r1, fp
 8013564:	900a      	str	r0, [sp, #40]	; 0x28
 8013566:	4620      	mov	r0, r4
 8013568:	f000 fe4e 	bl	8014208 <_Bfree>
 801356c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801356e:	469b      	mov	fp, r3
 8013570:	9b08      	ldr	r3, [sp, #32]
 8013572:	1b9a      	subs	r2, r3, r6
 8013574:	d004      	beq.n	8013580 <_dtoa_r+0x778>
 8013576:	4659      	mov	r1, fp
 8013578:	4620      	mov	r0, r4
 801357a:	f000 ffc1 	bl	8014500 <__pow5mult>
 801357e:	4683      	mov	fp, r0
 8013580:	2101      	movs	r1, #1
 8013582:	4620      	mov	r0, r4
 8013584:	f000 ff1e 	bl	80143c4 <__i2b>
 8013588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801358a:	4606      	mov	r6, r0
 801358c:	2b00      	cmp	r3, #0
 801358e:	f000 81c6 	beq.w	801391e <_dtoa_r+0xb16>
 8013592:	461a      	mov	r2, r3
 8013594:	4601      	mov	r1, r0
 8013596:	4620      	mov	r0, r4
 8013598:	f000 ffb2 	bl	8014500 <__pow5mult>
 801359c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801359e:	4606      	mov	r6, r0
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	dc3e      	bgt.n	8013622 <_dtoa_r+0x81a>
 80135a4:	9b02      	ldr	r3, [sp, #8]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d137      	bne.n	801361a <_dtoa_r+0x812>
 80135aa:	9b03      	ldr	r3, [sp, #12]
 80135ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d134      	bne.n	801361e <_dtoa_r+0x816>
 80135b4:	9b03      	ldr	r3, [sp, #12]
 80135b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80135ba:	0d1b      	lsrs	r3, r3, #20
 80135bc:	051b      	lsls	r3, r3, #20
 80135be:	b12b      	cbz	r3, 80135cc <_dtoa_r+0x7c4>
 80135c0:	9b07      	ldr	r3, [sp, #28]
 80135c2:	f109 0901 	add.w	r9, r9, #1
 80135c6:	3301      	adds	r3, #1
 80135c8:	9307      	str	r3, [sp, #28]
 80135ca:	2301      	movs	r3, #1
 80135cc:	9308      	str	r3, [sp, #32]
 80135ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d128      	bne.n	8013626 <_dtoa_r+0x81e>
 80135d4:	2001      	movs	r0, #1
 80135d6:	e02e      	b.n	8013636 <_dtoa_r+0x82e>
 80135d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80135da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80135de:	e796      	b.n	801350e <_dtoa_r+0x706>
 80135e0:	9b08      	ldr	r3, [sp, #32]
 80135e2:	f108 36ff 	add.w	r6, r8, #4294967295
 80135e6:	42b3      	cmp	r3, r6
 80135e8:	bfb7      	itett	lt
 80135ea:	9b08      	ldrlt	r3, [sp, #32]
 80135ec:	1b9e      	subge	r6, r3, r6
 80135ee:	1af2      	sublt	r2, r6, r3
 80135f0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80135f2:	bfbf      	itttt	lt
 80135f4:	9608      	strlt	r6, [sp, #32]
 80135f6:	189b      	addlt	r3, r3, r2
 80135f8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80135fa:	2600      	movlt	r6, #0
 80135fc:	f1b8 0f00 	cmp.w	r8, #0
 8013600:	bfb9      	ittee	lt
 8013602:	eba9 0508 	sublt.w	r5, r9, r8
 8013606:	2300      	movlt	r3, #0
 8013608:	464d      	movge	r5, r9
 801360a:	4643      	movge	r3, r8
 801360c:	e781      	b.n	8013512 <_dtoa_r+0x70a>
 801360e:	9e08      	ldr	r6, [sp, #32]
 8013610:	464d      	mov	r5, r9
 8013612:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013614:	e786      	b.n	8013524 <_dtoa_r+0x71c>
 8013616:	9a08      	ldr	r2, [sp, #32]
 8013618:	e7ad      	b.n	8013576 <_dtoa_r+0x76e>
 801361a:	2300      	movs	r3, #0
 801361c:	e7d6      	b.n	80135cc <_dtoa_r+0x7c4>
 801361e:	9b02      	ldr	r3, [sp, #8]
 8013620:	e7d4      	b.n	80135cc <_dtoa_r+0x7c4>
 8013622:	2300      	movs	r3, #0
 8013624:	9308      	str	r3, [sp, #32]
 8013626:	6933      	ldr	r3, [r6, #16]
 8013628:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801362c:	6918      	ldr	r0, [r3, #16]
 801362e:	f000 fe7b 	bl	8014328 <__hi0bits>
 8013632:	f1c0 0020 	rsb	r0, r0, #32
 8013636:	9b07      	ldr	r3, [sp, #28]
 8013638:	4418      	add	r0, r3
 801363a:	f010 001f 	ands.w	r0, r0, #31
 801363e:	d047      	beq.n	80136d0 <_dtoa_r+0x8c8>
 8013640:	f1c0 0320 	rsb	r3, r0, #32
 8013644:	2b04      	cmp	r3, #4
 8013646:	dd3b      	ble.n	80136c0 <_dtoa_r+0x8b8>
 8013648:	9b07      	ldr	r3, [sp, #28]
 801364a:	f1c0 001c 	rsb	r0, r0, #28
 801364e:	4481      	add	r9, r0
 8013650:	4405      	add	r5, r0
 8013652:	4403      	add	r3, r0
 8013654:	9307      	str	r3, [sp, #28]
 8013656:	f1b9 0f00 	cmp.w	r9, #0
 801365a:	dd05      	ble.n	8013668 <_dtoa_r+0x860>
 801365c:	4659      	mov	r1, fp
 801365e:	464a      	mov	r2, r9
 8013660:	4620      	mov	r0, r4
 8013662:	f000 ff9b 	bl	801459c <__lshift>
 8013666:	4683      	mov	fp, r0
 8013668:	9b07      	ldr	r3, [sp, #28]
 801366a:	2b00      	cmp	r3, #0
 801366c:	dd05      	ble.n	801367a <_dtoa_r+0x872>
 801366e:	4631      	mov	r1, r6
 8013670:	461a      	mov	r2, r3
 8013672:	4620      	mov	r0, r4
 8013674:	f000 ff92 	bl	801459c <__lshift>
 8013678:	4606      	mov	r6, r0
 801367a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801367c:	b353      	cbz	r3, 80136d4 <_dtoa_r+0x8cc>
 801367e:	4631      	mov	r1, r6
 8013680:	4658      	mov	r0, fp
 8013682:	f000 ffdf 	bl	8014644 <__mcmp>
 8013686:	2800      	cmp	r0, #0
 8013688:	da24      	bge.n	80136d4 <_dtoa_r+0x8cc>
 801368a:	2300      	movs	r3, #0
 801368c:	4659      	mov	r1, fp
 801368e:	220a      	movs	r2, #10
 8013690:	4620      	mov	r0, r4
 8013692:	f000 fdd0 	bl	8014236 <__multadd>
 8013696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013698:	f10a 3aff 	add.w	sl, sl, #4294967295
 801369c:	4683      	mov	fp, r0
 801369e:	2b00      	cmp	r3, #0
 80136a0:	f000 8144 	beq.w	801392c <_dtoa_r+0xb24>
 80136a4:	2300      	movs	r3, #0
 80136a6:	4639      	mov	r1, r7
 80136a8:	220a      	movs	r2, #10
 80136aa:	4620      	mov	r0, r4
 80136ac:	f000 fdc3 	bl	8014236 <__multadd>
 80136b0:	9b04      	ldr	r3, [sp, #16]
 80136b2:	4607      	mov	r7, r0
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	dc4d      	bgt.n	8013754 <_dtoa_r+0x94c>
 80136b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80136ba:	2b02      	cmp	r3, #2
 80136bc:	dd4a      	ble.n	8013754 <_dtoa_r+0x94c>
 80136be:	e011      	b.n	80136e4 <_dtoa_r+0x8dc>
 80136c0:	d0c9      	beq.n	8013656 <_dtoa_r+0x84e>
 80136c2:	9a07      	ldr	r2, [sp, #28]
 80136c4:	331c      	adds	r3, #28
 80136c6:	441a      	add	r2, r3
 80136c8:	4499      	add	r9, r3
 80136ca:	441d      	add	r5, r3
 80136cc:	4613      	mov	r3, r2
 80136ce:	e7c1      	b.n	8013654 <_dtoa_r+0x84c>
 80136d0:	4603      	mov	r3, r0
 80136d2:	e7f6      	b.n	80136c2 <_dtoa_r+0x8ba>
 80136d4:	f1b8 0f00 	cmp.w	r8, #0
 80136d8:	dc36      	bgt.n	8013748 <_dtoa_r+0x940>
 80136da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80136dc:	2b02      	cmp	r3, #2
 80136de:	dd33      	ble.n	8013748 <_dtoa_r+0x940>
 80136e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80136e4:	9b04      	ldr	r3, [sp, #16]
 80136e6:	b963      	cbnz	r3, 8013702 <_dtoa_r+0x8fa>
 80136e8:	4631      	mov	r1, r6
 80136ea:	2205      	movs	r2, #5
 80136ec:	4620      	mov	r0, r4
 80136ee:	f000 fda2 	bl	8014236 <__multadd>
 80136f2:	4601      	mov	r1, r0
 80136f4:	4606      	mov	r6, r0
 80136f6:	4658      	mov	r0, fp
 80136f8:	f000 ffa4 	bl	8014644 <__mcmp>
 80136fc:	2800      	cmp	r0, #0
 80136fe:	f73f add3 	bgt.w	80132a8 <_dtoa_r+0x4a0>
 8013702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013704:	9d06      	ldr	r5, [sp, #24]
 8013706:	ea6f 0a03 	mvn.w	sl, r3
 801370a:	f04f 0900 	mov.w	r9, #0
 801370e:	4631      	mov	r1, r6
 8013710:	4620      	mov	r0, r4
 8013712:	f000 fd79 	bl	8014208 <_Bfree>
 8013716:	2f00      	cmp	r7, #0
 8013718:	f43f aebd 	beq.w	8013496 <_dtoa_r+0x68e>
 801371c:	f1b9 0f00 	cmp.w	r9, #0
 8013720:	d005      	beq.n	801372e <_dtoa_r+0x926>
 8013722:	45b9      	cmp	r9, r7
 8013724:	d003      	beq.n	801372e <_dtoa_r+0x926>
 8013726:	4649      	mov	r1, r9
 8013728:	4620      	mov	r0, r4
 801372a:	f000 fd6d 	bl	8014208 <_Bfree>
 801372e:	4639      	mov	r1, r7
 8013730:	4620      	mov	r0, r4
 8013732:	f000 fd69 	bl	8014208 <_Bfree>
 8013736:	e6ae      	b.n	8013496 <_dtoa_r+0x68e>
 8013738:	2600      	movs	r6, #0
 801373a:	4637      	mov	r7, r6
 801373c:	e7e1      	b.n	8013702 <_dtoa_r+0x8fa>
 801373e:	46ba      	mov	sl, r7
 8013740:	4637      	mov	r7, r6
 8013742:	e5b1      	b.n	80132a8 <_dtoa_r+0x4a0>
 8013744:	40240000 	.word	0x40240000
 8013748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801374a:	f8cd 8010 	str.w	r8, [sp, #16]
 801374e:	2b00      	cmp	r3, #0
 8013750:	f000 80f3 	beq.w	801393a <_dtoa_r+0xb32>
 8013754:	2d00      	cmp	r5, #0
 8013756:	dd05      	ble.n	8013764 <_dtoa_r+0x95c>
 8013758:	4639      	mov	r1, r7
 801375a:	462a      	mov	r2, r5
 801375c:	4620      	mov	r0, r4
 801375e:	f000 ff1d 	bl	801459c <__lshift>
 8013762:	4607      	mov	r7, r0
 8013764:	9b08      	ldr	r3, [sp, #32]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d04c      	beq.n	8013804 <_dtoa_r+0x9fc>
 801376a:	6879      	ldr	r1, [r7, #4]
 801376c:	4620      	mov	r0, r4
 801376e:	f000 fd17 	bl	80141a0 <_Balloc>
 8013772:	4605      	mov	r5, r0
 8013774:	693a      	ldr	r2, [r7, #16]
 8013776:	f107 010c 	add.w	r1, r7, #12
 801377a:	3202      	adds	r2, #2
 801377c:	0092      	lsls	r2, r2, #2
 801377e:	300c      	adds	r0, #12
 8013780:	f7fd feaa 	bl	80114d8 <memcpy>
 8013784:	2201      	movs	r2, #1
 8013786:	4629      	mov	r1, r5
 8013788:	4620      	mov	r0, r4
 801378a:	f000 ff07 	bl	801459c <__lshift>
 801378e:	46b9      	mov	r9, r7
 8013790:	4607      	mov	r7, r0
 8013792:	9b06      	ldr	r3, [sp, #24]
 8013794:	9307      	str	r3, [sp, #28]
 8013796:	9b02      	ldr	r3, [sp, #8]
 8013798:	f003 0301 	and.w	r3, r3, #1
 801379c:	9308      	str	r3, [sp, #32]
 801379e:	4631      	mov	r1, r6
 80137a0:	4658      	mov	r0, fp
 80137a2:	f7ff faa2 	bl	8012cea <quorem>
 80137a6:	4649      	mov	r1, r9
 80137a8:	4605      	mov	r5, r0
 80137aa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80137ae:	4658      	mov	r0, fp
 80137b0:	f000 ff48 	bl	8014644 <__mcmp>
 80137b4:	463a      	mov	r2, r7
 80137b6:	9002      	str	r0, [sp, #8]
 80137b8:	4631      	mov	r1, r6
 80137ba:	4620      	mov	r0, r4
 80137bc:	f000 ff5c 	bl	8014678 <__mdiff>
 80137c0:	68c3      	ldr	r3, [r0, #12]
 80137c2:	4602      	mov	r2, r0
 80137c4:	bb03      	cbnz	r3, 8013808 <_dtoa_r+0xa00>
 80137c6:	4601      	mov	r1, r0
 80137c8:	9009      	str	r0, [sp, #36]	; 0x24
 80137ca:	4658      	mov	r0, fp
 80137cc:	f000 ff3a 	bl	8014644 <__mcmp>
 80137d0:	4603      	mov	r3, r0
 80137d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137d4:	4611      	mov	r1, r2
 80137d6:	4620      	mov	r0, r4
 80137d8:	9309      	str	r3, [sp, #36]	; 0x24
 80137da:	f000 fd15 	bl	8014208 <_Bfree>
 80137de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137e0:	b9a3      	cbnz	r3, 801380c <_dtoa_r+0xa04>
 80137e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80137e4:	b992      	cbnz	r2, 801380c <_dtoa_r+0xa04>
 80137e6:	9a08      	ldr	r2, [sp, #32]
 80137e8:	b982      	cbnz	r2, 801380c <_dtoa_r+0xa04>
 80137ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80137ee:	d029      	beq.n	8013844 <_dtoa_r+0xa3c>
 80137f0:	9b02      	ldr	r3, [sp, #8]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	dd01      	ble.n	80137fa <_dtoa_r+0x9f2>
 80137f6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80137fa:	9b07      	ldr	r3, [sp, #28]
 80137fc:	1c5d      	adds	r5, r3, #1
 80137fe:	f883 8000 	strb.w	r8, [r3]
 8013802:	e784      	b.n	801370e <_dtoa_r+0x906>
 8013804:	4638      	mov	r0, r7
 8013806:	e7c2      	b.n	801378e <_dtoa_r+0x986>
 8013808:	2301      	movs	r3, #1
 801380a:	e7e3      	b.n	80137d4 <_dtoa_r+0x9cc>
 801380c:	9a02      	ldr	r2, [sp, #8]
 801380e:	2a00      	cmp	r2, #0
 8013810:	db04      	blt.n	801381c <_dtoa_r+0xa14>
 8013812:	d123      	bne.n	801385c <_dtoa_r+0xa54>
 8013814:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013816:	bb0a      	cbnz	r2, 801385c <_dtoa_r+0xa54>
 8013818:	9a08      	ldr	r2, [sp, #32]
 801381a:	b9fa      	cbnz	r2, 801385c <_dtoa_r+0xa54>
 801381c:	2b00      	cmp	r3, #0
 801381e:	ddec      	ble.n	80137fa <_dtoa_r+0x9f2>
 8013820:	4659      	mov	r1, fp
 8013822:	2201      	movs	r2, #1
 8013824:	4620      	mov	r0, r4
 8013826:	f000 feb9 	bl	801459c <__lshift>
 801382a:	4631      	mov	r1, r6
 801382c:	4683      	mov	fp, r0
 801382e:	f000 ff09 	bl	8014644 <__mcmp>
 8013832:	2800      	cmp	r0, #0
 8013834:	dc03      	bgt.n	801383e <_dtoa_r+0xa36>
 8013836:	d1e0      	bne.n	80137fa <_dtoa_r+0x9f2>
 8013838:	f018 0f01 	tst.w	r8, #1
 801383c:	d0dd      	beq.n	80137fa <_dtoa_r+0x9f2>
 801383e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013842:	d1d8      	bne.n	80137f6 <_dtoa_r+0x9ee>
 8013844:	9b07      	ldr	r3, [sp, #28]
 8013846:	9a07      	ldr	r2, [sp, #28]
 8013848:	1c5d      	adds	r5, r3, #1
 801384a:	2339      	movs	r3, #57	; 0x39
 801384c:	7013      	strb	r3, [r2, #0]
 801384e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013852:	1e6a      	subs	r2, r5, #1
 8013854:	2b39      	cmp	r3, #57	; 0x39
 8013856:	d04d      	beq.n	80138f4 <_dtoa_r+0xaec>
 8013858:	3301      	adds	r3, #1
 801385a:	e052      	b.n	8013902 <_dtoa_r+0xafa>
 801385c:	9a07      	ldr	r2, [sp, #28]
 801385e:	2b00      	cmp	r3, #0
 8013860:	f102 0501 	add.w	r5, r2, #1
 8013864:	dd06      	ble.n	8013874 <_dtoa_r+0xa6c>
 8013866:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801386a:	d0eb      	beq.n	8013844 <_dtoa_r+0xa3c>
 801386c:	f108 0801 	add.w	r8, r8, #1
 8013870:	9b07      	ldr	r3, [sp, #28]
 8013872:	e7c4      	b.n	80137fe <_dtoa_r+0x9f6>
 8013874:	9b06      	ldr	r3, [sp, #24]
 8013876:	9a04      	ldr	r2, [sp, #16]
 8013878:	1aeb      	subs	r3, r5, r3
 801387a:	4293      	cmp	r3, r2
 801387c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013880:	d021      	beq.n	80138c6 <_dtoa_r+0xabe>
 8013882:	4659      	mov	r1, fp
 8013884:	2300      	movs	r3, #0
 8013886:	220a      	movs	r2, #10
 8013888:	4620      	mov	r0, r4
 801388a:	f000 fcd4 	bl	8014236 <__multadd>
 801388e:	45b9      	cmp	r9, r7
 8013890:	4683      	mov	fp, r0
 8013892:	f04f 0300 	mov.w	r3, #0
 8013896:	f04f 020a 	mov.w	r2, #10
 801389a:	4649      	mov	r1, r9
 801389c:	4620      	mov	r0, r4
 801389e:	d105      	bne.n	80138ac <_dtoa_r+0xaa4>
 80138a0:	f000 fcc9 	bl	8014236 <__multadd>
 80138a4:	4681      	mov	r9, r0
 80138a6:	4607      	mov	r7, r0
 80138a8:	9507      	str	r5, [sp, #28]
 80138aa:	e778      	b.n	801379e <_dtoa_r+0x996>
 80138ac:	f000 fcc3 	bl	8014236 <__multadd>
 80138b0:	4639      	mov	r1, r7
 80138b2:	4681      	mov	r9, r0
 80138b4:	2300      	movs	r3, #0
 80138b6:	220a      	movs	r2, #10
 80138b8:	4620      	mov	r0, r4
 80138ba:	f000 fcbc 	bl	8014236 <__multadd>
 80138be:	4607      	mov	r7, r0
 80138c0:	e7f2      	b.n	80138a8 <_dtoa_r+0xaa0>
 80138c2:	f04f 0900 	mov.w	r9, #0
 80138c6:	4659      	mov	r1, fp
 80138c8:	2201      	movs	r2, #1
 80138ca:	4620      	mov	r0, r4
 80138cc:	f000 fe66 	bl	801459c <__lshift>
 80138d0:	4631      	mov	r1, r6
 80138d2:	4683      	mov	fp, r0
 80138d4:	f000 feb6 	bl	8014644 <__mcmp>
 80138d8:	2800      	cmp	r0, #0
 80138da:	dcb8      	bgt.n	801384e <_dtoa_r+0xa46>
 80138dc:	d102      	bne.n	80138e4 <_dtoa_r+0xadc>
 80138de:	f018 0f01 	tst.w	r8, #1
 80138e2:	d1b4      	bne.n	801384e <_dtoa_r+0xa46>
 80138e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80138e8:	1e6a      	subs	r2, r5, #1
 80138ea:	2b30      	cmp	r3, #48	; 0x30
 80138ec:	f47f af0f 	bne.w	801370e <_dtoa_r+0x906>
 80138f0:	4615      	mov	r5, r2
 80138f2:	e7f7      	b.n	80138e4 <_dtoa_r+0xadc>
 80138f4:	9b06      	ldr	r3, [sp, #24]
 80138f6:	4293      	cmp	r3, r2
 80138f8:	d105      	bne.n	8013906 <_dtoa_r+0xafe>
 80138fa:	2331      	movs	r3, #49	; 0x31
 80138fc:	9a06      	ldr	r2, [sp, #24]
 80138fe:	f10a 0a01 	add.w	sl, sl, #1
 8013902:	7013      	strb	r3, [r2, #0]
 8013904:	e703      	b.n	801370e <_dtoa_r+0x906>
 8013906:	4615      	mov	r5, r2
 8013908:	e7a1      	b.n	801384e <_dtoa_r+0xa46>
 801390a:	4b17      	ldr	r3, [pc, #92]	; (8013968 <_dtoa_r+0xb60>)
 801390c:	f7ff bae1 	b.w	8012ed2 <_dtoa_r+0xca>
 8013910:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013912:	2b00      	cmp	r3, #0
 8013914:	f47f aabb 	bne.w	8012e8e <_dtoa_r+0x86>
 8013918:	4b14      	ldr	r3, [pc, #80]	; (801396c <_dtoa_r+0xb64>)
 801391a:	f7ff bada 	b.w	8012ed2 <_dtoa_r+0xca>
 801391e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013920:	2b01      	cmp	r3, #1
 8013922:	f77f ae3f 	ble.w	80135a4 <_dtoa_r+0x79c>
 8013926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013928:	9308      	str	r3, [sp, #32]
 801392a:	e653      	b.n	80135d4 <_dtoa_r+0x7cc>
 801392c:	9b04      	ldr	r3, [sp, #16]
 801392e:	2b00      	cmp	r3, #0
 8013930:	dc03      	bgt.n	801393a <_dtoa_r+0xb32>
 8013932:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013934:	2b02      	cmp	r3, #2
 8013936:	f73f aed5 	bgt.w	80136e4 <_dtoa_r+0x8dc>
 801393a:	9d06      	ldr	r5, [sp, #24]
 801393c:	4631      	mov	r1, r6
 801393e:	4658      	mov	r0, fp
 8013940:	f7ff f9d3 	bl	8012cea <quorem>
 8013944:	9b06      	ldr	r3, [sp, #24]
 8013946:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801394a:	f805 8b01 	strb.w	r8, [r5], #1
 801394e:	9a04      	ldr	r2, [sp, #16]
 8013950:	1aeb      	subs	r3, r5, r3
 8013952:	429a      	cmp	r2, r3
 8013954:	ddb5      	ble.n	80138c2 <_dtoa_r+0xaba>
 8013956:	4659      	mov	r1, fp
 8013958:	2300      	movs	r3, #0
 801395a:	220a      	movs	r2, #10
 801395c:	4620      	mov	r0, r4
 801395e:	f000 fc6a 	bl	8014236 <__multadd>
 8013962:	4683      	mov	fp, r0
 8013964:	e7ea      	b.n	801393c <_dtoa_r+0xb34>
 8013966:	bf00      	nop
 8013968:	0801a006 	.word	0x0801a006
 801396c:	0801a181 	.word	0x0801a181

08013970 <std>:
 8013970:	2300      	movs	r3, #0
 8013972:	b510      	push	{r4, lr}
 8013974:	4604      	mov	r4, r0
 8013976:	e9c0 3300 	strd	r3, r3, [r0]
 801397a:	6083      	str	r3, [r0, #8]
 801397c:	8181      	strh	r1, [r0, #12]
 801397e:	6643      	str	r3, [r0, #100]	; 0x64
 8013980:	81c2      	strh	r2, [r0, #14]
 8013982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013986:	6183      	str	r3, [r0, #24]
 8013988:	4619      	mov	r1, r3
 801398a:	2208      	movs	r2, #8
 801398c:	305c      	adds	r0, #92	; 0x5c
 801398e:	f7fd fdae 	bl	80114ee <memset>
 8013992:	4b05      	ldr	r3, [pc, #20]	; (80139a8 <std+0x38>)
 8013994:	6224      	str	r4, [r4, #32]
 8013996:	6263      	str	r3, [r4, #36]	; 0x24
 8013998:	4b04      	ldr	r3, [pc, #16]	; (80139ac <std+0x3c>)
 801399a:	62a3      	str	r3, [r4, #40]	; 0x28
 801399c:	4b04      	ldr	r3, [pc, #16]	; (80139b0 <std+0x40>)
 801399e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80139a0:	4b04      	ldr	r3, [pc, #16]	; (80139b4 <std+0x44>)
 80139a2:	6323      	str	r3, [r4, #48]	; 0x30
 80139a4:	bd10      	pop	{r4, pc}
 80139a6:	bf00      	nop
 80139a8:	08015041 	.word	0x08015041
 80139ac:	08015063 	.word	0x08015063
 80139b0:	0801509b 	.word	0x0801509b
 80139b4:	080150bf 	.word	0x080150bf

080139b8 <_cleanup_r>:
 80139b8:	4901      	ldr	r1, [pc, #4]	; (80139c0 <_cleanup_r+0x8>)
 80139ba:	f000 b885 	b.w	8013ac8 <_fwalk_reent>
 80139be:	bf00      	nop
 80139c0:	080153bd 	.word	0x080153bd

080139c4 <__sfmoreglue>:
 80139c4:	b570      	push	{r4, r5, r6, lr}
 80139c6:	2568      	movs	r5, #104	; 0x68
 80139c8:	1e4a      	subs	r2, r1, #1
 80139ca:	4355      	muls	r5, r2
 80139cc:	460e      	mov	r6, r1
 80139ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80139d2:	f001 f837 	bl	8014a44 <_malloc_r>
 80139d6:	4604      	mov	r4, r0
 80139d8:	b140      	cbz	r0, 80139ec <__sfmoreglue+0x28>
 80139da:	2100      	movs	r1, #0
 80139dc:	e9c0 1600 	strd	r1, r6, [r0]
 80139e0:	300c      	adds	r0, #12
 80139e2:	60a0      	str	r0, [r4, #8]
 80139e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80139e8:	f7fd fd81 	bl	80114ee <memset>
 80139ec:	4620      	mov	r0, r4
 80139ee:	bd70      	pop	{r4, r5, r6, pc}

080139f0 <__sinit>:
 80139f0:	6983      	ldr	r3, [r0, #24]
 80139f2:	b510      	push	{r4, lr}
 80139f4:	4604      	mov	r4, r0
 80139f6:	bb33      	cbnz	r3, 8013a46 <__sinit+0x56>
 80139f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80139fc:	6503      	str	r3, [r0, #80]	; 0x50
 80139fe:	4b12      	ldr	r3, [pc, #72]	; (8013a48 <__sinit+0x58>)
 8013a00:	4a12      	ldr	r2, [pc, #72]	; (8013a4c <__sinit+0x5c>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	6282      	str	r2, [r0, #40]	; 0x28
 8013a06:	4298      	cmp	r0, r3
 8013a08:	bf04      	itt	eq
 8013a0a:	2301      	moveq	r3, #1
 8013a0c:	6183      	streq	r3, [r0, #24]
 8013a0e:	f000 f81f 	bl	8013a50 <__sfp>
 8013a12:	6060      	str	r0, [r4, #4]
 8013a14:	4620      	mov	r0, r4
 8013a16:	f000 f81b 	bl	8013a50 <__sfp>
 8013a1a:	60a0      	str	r0, [r4, #8]
 8013a1c:	4620      	mov	r0, r4
 8013a1e:	f000 f817 	bl	8013a50 <__sfp>
 8013a22:	2200      	movs	r2, #0
 8013a24:	60e0      	str	r0, [r4, #12]
 8013a26:	2104      	movs	r1, #4
 8013a28:	6860      	ldr	r0, [r4, #4]
 8013a2a:	f7ff ffa1 	bl	8013970 <std>
 8013a2e:	2201      	movs	r2, #1
 8013a30:	2109      	movs	r1, #9
 8013a32:	68a0      	ldr	r0, [r4, #8]
 8013a34:	f7ff ff9c 	bl	8013970 <std>
 8013a38:	2202      	movs	r2, #2
 8013a3a:	2112      	movs	r1, #18
 8013a3c:	68e0      	ldr	r0, [r4, #12]
 8013a3e:	f7ff ff97 	bl	8013970 <std>
 8013a42:	2301      	movs	r3, #1
 8013a44:	61a3      	str	r3, [r4, #24]
 8013a46:	bd10      	pop	{r4, pc}
 8013a48:	08019fec 	.word	0x08019fec
 8013a4c:	080139b9 	.word	0x080139b9

08013a50 <__sfp>:
 8013a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a52:	4b1b      	ldr	r3, [pc, #108]	; (8013ac0 <__sfp+0x70>)
 8013a54:	4607      	mov	r7, r0
 8013a56:	681e      	ldr	r6, [r3, #0]
 8013a58:	69b3      	ldr	r3, [r6, #24]
 8013a5a:	b913      	cbnz	r3, 8013a62 <__sfp+0x12>
 8013a5c:	4630      	mov	r0, r6
 8013a5e:	f7ff ffc7 	bl	80139f0 <__sinit>
 8013a62:	3648      	adds	r6, #72	; 0x48
 8013a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013a68:	3b01      	subs	r3, #1
 8013a6a:	d503      	bpl.n	8013a74 <__sfp+0x24>
 8013a6c:	6833      	ldr	r3, [r6, #0]
 8013a6e:	b133      	cbz	r3, 8013a7e <__sfp+0x2e>
 8013a70:	6836      	ldr	r6, [r6, #0]
 8013a72:	e7f7      	b.n	8013a64 <__sfp+0x14>
 8013a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013a78:	b16d      	cbz	r5, 8013a96 <__sfp+0x46>
 8013a7a:	3468      	adds	r4, #104	; 0x68
 8013a7c:	e7f4      	b.n	8013a68 <__sfp+0x18>
 8013a7e:	2104      	movs	r1, #4
 8013a80:	4638      	mov	r0, r7
 8013a82:	f7ff ff9f 	bl	80139c4 <__sfmoreglue>
 8013a86:	6030      	str	r0, [r6, #0]
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	d1f1      	bne.n	8013a70 <__sfp+0x20>
 8013a8c:	230c      	movs	r3, #12
 8013a8e:	4604      	mov	r4, r0
 8013a90:	603b      	str	r3, [r7, #0]
 8013a92:	4620      	mov	r0, r4
 8013a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a96:	4b0b      	ldr	r3, [pc, #44]	; (8013ac4 <__sfp+0x74>)
 8013a98:	6665      	str	r5, [r4, #100]	; 0x64
 8013a9a:	e9c4 5500 	strd	r5, r5, [r4]
 8013a9e:	60a5      	str	r5, [r4, #8]
 8013aa0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013aa4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013aa8:	2208      	movs	r2, #8
 8013aaa:	4629      	mov	r1, r5
 8013aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013ab0:	f7fd fd1d 	bl	80114ee <memset>
 8013ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013abc:	e7e9      	b.n	8013a92 <__sfp+0x42>
 8013abe:	bf00      	nop
 8013ac0:	08019fec 	.word	0x08019fec
 8013ac4:	ffff0001 	.word	0xffff0001

08013ac8 <_fwalk_reent>:
 8013ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013acc:	4680      	mov	r8, r0
 8013ace:	4689      	mov	r9, r1
 8013ad0:	2600      	movs	r6, #0
 8013ad2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013ad6:	b914      	cbnz	r4, 8013ade <_fwalk_reent+0x16>
 8013ad8:	4630      	mov	r0, r6
 8013ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ade:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013ae2:	3f01      	subs	r7, #1
 8013ae4:	d501      	bpl.n	8013aea <_fwalk_reent+0x22>
 8013ae6:	6824      	ldr	r4, [r4, #0]
 8013ae8:	e7f5      	b.n	8013ad6 <_fwalk_reent+0xe>
 8013aea:	89ab      	ldrh	r3, [r5, #12]
 8013aec:	2b01      	cmp	r3, #1
 8013aee:	d907      	bls.n	8013b00 <_fwalk_reent+0x38>
 8013af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013af4:	3301      	adds	r3, #1
 8013af6:	d003      	beq.n	8013b00 <_fwalk_reent+0x38>
 8013af8:	4629      	mov	r1, r5
 8013afa:	4640      	mov	r0, r8
 8013afc:	47c8      	blx	r9
 8013afe:	4306      	orrs	r6, r0
 8013b00:	3568      	adds	r5, #104	; 0x68
 8013b02:	e7ee      	b.n	8013ae2 <_fwalk_reent+0x1a>

08013b04 <rshift>:
 8013b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b06:	6906      	ldr	r6, [r0, #16]
 8013b08:	114b      	asrs	r3, r1, #5
 8013b0a:	429e      	cmp	r6, r3
 8013b0c:	f100 0414 	add.w	r4, r0, #20
 8013b10:	dd31      	ble.n	8013b76 <rshift+0x72>
 8013b12:	f011 011f 	ands.w	r1, r1, #31
 8013b16:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8013b1a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8013b1e:	d108      	bne.n	8013b32 <rshift+0x2e>
 8013b20:	4621      	mov	r1, r4
 8013b22:	42b2      	cmp	r2, r6
 8013b24:	460b      	mov	r3, r1
 8013b26:	d211      	bcs.n	8013b4c <rshift+0x48>
 8013b28:	f852 3b04 	ldr.w	r3, [r2], #4
 8013b2c:	f841 3b04 	str.w	r3, [r1], #4
 8013b30:	e7f7      	b.n	8013b22 <rshift+0x1e>
 8013b32:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013b36:	4623      	mov	r3, r4
 8013b38:	f1c1 0c20 	rsb	ip, r1, #32
 8013b3c:	40cd      	lsrs	r5, r1
 8013b3e:	3204      	adds	r2, #4
 8013b40:	42b2      	cmp	r2, r6
 8013b42:	4617      	mov	r7, r2
 8013b44:	d30d      	bcc.n	8013b62 <rshift+0x5e>
 8013b46:	601d      	str	r5, [r3, #0]
 8013b48:	b105      	cbz	r5, 8013b4c <rshift+0x48>
 8013b4a:	3304      	adds	r3, #4
 8013b4c:	42a3      	cmp	r3, r4
 8013b4e:	eba3 0204 	sub.w	r2, r3, r4
 8013b52:	bf08      	it	eq
 8013b54:	2300      	moveq	r3, #0
 8013b56:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013b5a:	6102      	str	r2, [r0, #16]
 8013b5c:	bf08      	it	eq
 8013b5e:	6143      	streq	r3, [r0, #20]
 8013b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b62:	683f      	ldr	r7, [r7, #0]
 8013b64:	fa07 f70c 	lsl.w	r7, r7, ip
 8013b68:	433d      	orrs	r5, r7
 8013b6a:	f843 5b04 	str.w	r5, [r3], #4
 8013b6e:	f852 5b04 	ldr.w	r5, [r2], #4
 8013b72:	40cd      	lsrs	r5, r1
 8013b74:	e7e4      	b.n	8013b40 <rshift+0x3c>
 8013b76:	4623      	mov	r3, r4
 8013b78:	e7e8      	b.n	8013b4c <rshift+0x48>

08013b7a <__hexdig_fun>:
 8013b7a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013b7e:	2b09      	cmp	r3, #9
 8013b80:	d802      	bhi.n	8013b88 <__hexdig_fun+0xe>
 8013b82:	3820      	subs	r0, #32
 8013b84:	b2c0      	uxtb	r0, r0
 8013b86:	4770      	bx	lr
 8013b88:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013b8c:	2b05      	cmp	r3, #5
 8013b8e:	d801      	bhi.n	8013b94 <__hexdig_fun+0x1a>
 8013b90:	3847      	subs	r0, #71	; 0x47
 8013b92:	e7f7      	b.n	8013b84 <__hexdig_fun+0xa>
 8013b94:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013b98:	2b05      	cmp	r3, #5
 8013b9a:	d801      	bhi.n	8013ba0 <__hexdig_fun+0x26>
 8013b9c:	3827      	subs	r0, #39	; 0x27
 8013b9e:	e7f1      	b.n	8013b84 <__hexdig_fun+0xa>
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	4770      	bx	lr

08013ba4 <__gethex>:
 8013ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba8:	b08b      	sub	sp, #44	; 0x2c
 8013baa:	9002      	str	r0, [sp, #8]
 8013bac:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013bae:	468a      	mov	sl, r1
 8013bb0:	4690      	mov	r8, r2
 8013bb2:	9306      	str	r3, [sp, #24]
 8013bb4:	f000 face 	bl	8014154 <__localeconv_l>
 8013bb8:	6803      	ldr	r3, [r0, #0]
 8013bba:	f04f 0b00 	mov.w	fp, #0
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	9303      	str	r3, [sp, #12]
 8013bc2:	f7ec fadf 	bl	8000184 <strlen>
 8013bc6:	9b03      	ldr	r3, [sp, #12]
 8013bc8:	9001      	str	r0, [sp, #4]
 8013bca:	4403      	add	r3, r0
 8013bcc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013bd0:	9307      	str	r3, [sp, #28]
 8013bd2:	f8da 3000 	ldr.w	r3, [sl]
 8013bd6:	3302      	adds	r3, #2
 8013bd8:	461f      	mov	r7, r3
 8013bda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013bde:	2830      	cmp	r0, #48	; 0x30
 8013be0:	d06c      	beq.n	8013cbc <__gethex+0x118>
 8013be2:	f7ff ffca 	bl	8013b7a <__hexdig_fun>
 8013be6:	4604      	mov	r4, r0
 8013be8:	2800      	cmp	r0, #0
 8013bea:	d16a      	bne.n	8013cc2 <__gethex+0x11e>
 8013bec:	9a01      	ldr	r2, [sp, #4]
 8013bee:	9903      	ldr	r1, [sp, #12]
 8013bf0:	4638      	mov	r0, r7
 8013bf2:	f001 fa68 	bl	80150c6 <strncmp>
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	d166      	bne.n	8013cc8 <__gethex+0x124>
 8013bfa:	9b01      	ldr	r3, [sp, #4]
 8013bfc:	5cf8      	ldrb	r0, [r7, r3]
 8013bfe:	18fe      	adds	r6, r7, r3
 8013c00:	f7ff ffbb 	bl	8013b7a <__hexdig_fun>
 8013c04:	2800      	cmp	r0, #0
 8013c06:	d062      	beq.n	8013cce <__gethex+0x12a>
 8013c08:	4633      	mov	r3, r6
 8013c0a:	7818      	ldrb	r0, [r3, #0]
 8013c0c:	461f      	mov	r7, r3
 8013c0e:	2830      	cmp	r0, #48	; 0x30
 8013c10:	f103 0301 	add.w	r3, r3, #1
 8013c14:	d0f9      	beq.n	8013c0a <__gethex+0x66>
 8013c16:	f7ff ffb0 	bl	8013b7a <__hexdig_fun>
 8013c1a:	fab0 f580 	clz	r5, r0
 8013c1e:	4634      	mov	r4, r6
 8013c20:	f04f 0b01 	mov.w	fp, #1
 8013c24:	096d      	lsrs	r5, r5, #5
 8013c26:	463a      	mov	r2, r7
 8013c28:	4616      	mov	r6, r2
 8013c2a:	7830      	ldrb	r0, [r6, #0]
 8013c2c:	3201      	adds	r2, #1
 8013c2e:	f7ff ffa4 	bl	8013b7a <__hexdig_fun>
 8013c32:	2800      	cmp	r0, #0
 8013c34:	d1f8      	bne.n	8013c28 <__gethex+0x84>
 8013c36:	9a01      	ldr	r2, [sp, #4]
 8013c38:	9903      	ldr	r1, [sp, #12]
 8013c3a:	4630      	mov	r0, r6
 8013c3c:	f001 fa43 	bl	80150c6 <strncmp>
 8013c40:	b950      	cbnz	r0, 8013c58 <__gethex+0xb4>
 8013c42:	b954      	cbnz	r4, 8013c5a <__gethex+0xb6>
 8013c44:	9b01      	ldr	r3, [sp, #4]
 8013c46:	18f4      	adds	r4, r6, r3
 8013c48:	4622      	mov	r2, r4
 8013c4a:	4616      	mov	r6, r2
 8013c4c:	7830      	ldrb	r0, [r6, #0]
 8013c4e:	3201      	adds	r2, #1
 8013c50:	f7ff ff93 	bl	8013b7a <__hexdig_fun>
 8013c54:	2800      	cmp	r0, #0
 8013c56:	d1f8      	bne.n	8013c4a <__gethex+0xa6>
 8013c58:	b10c      	cbz	r4, 8013c5e <__gethex+0xba>
 8013c5a:	1ba4      	subs	r4, r4, r6
 8013c5c:	00a4      	lsls	r4, r4, #2
 8013c5e:	7833      	ldrb	r3, [r6, #0]
 8013c60:	2b50      	cmp	r3, #80	; 0x50
 8013c62:	d001      	beq.n	8013c68 <__gethex+0xc4>
 8013c64:	2b70      	cmp	r3, #112	; 0x70
 8013c66:	d140      	bne.n	8013cea <__gethex+0x146>
 8013c68:	7873      	ldrb	r3, [r6, #1]
 8013c6a:	2b2b      	cmp	r3, #43	; 0x2b
 8013c6c:	d031      	beq.n	8013cd2 <__gethex+0x12e>
 8013c6e:	2b2d      	cmp	r3, #45	; 0x2d
 8013c70:	d033      	beq.n	8013cda <__gethex+0x136>
 8013c72:	f04f 0900 	mov.w	r9, #0
 8013c76:	1c71      	adds	r1, r6, #1
 8013c78:	7808      	ldrb	r0, [r1, #0]
 8013c7a:	f7ff ff7e 	bl	8013b7a <__hexdig_fun>
 8013c7e:	1e43      	subs	r3, r0, #1
 8013c80:	b2db      	uxtb	r3, r3
 8013c82:	2b18      	cmp	r3, #24
 8013c84:	d831      	bhi.n	8013cea <__gethex+0x146>
 8013c86:	f1a0 0210 	sub.w	r2, r0, #16
 8013c8a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013c8e:	f7ff ff74 	bl	8013b7a <__hexdig_fun>
 8013c92:	1e43      	subs	r3, r0, #1
 8013c94:	b2db      	uxtb	r3, r3
 8013c96:	2b18      	cmp	r3, #24
 8013c98:	d922      	bls.n	8013ce0 <__gethex+0x13c>
 8013c9a:	f1b9 0f00 	cmp.w	r9, #0
 8013c9e:	d000      	beq.n	8013ca2 <__gethex+0xfe>
 8013ca0:	4252      	negs	r2, r2
 8013ca2:	4414      	add	r4, r2
 8013ca4:	f8ca 1000 	str.w	r1, [sl]
 8013ca8:	b30d      	cbz	r5, 8013cee <__gethex+0x14a>
 8013caa:	f1bb 0f00 	cmp.w	fp, #0
 8013cae:	bf0c      	ite	eq
 8013cb0:	2706      	moveq	r7, #6
 8013cb2:	2700      	movne	r7, #0
 8013cb4:	4638      	mov	r0, r7
 8013cb6:	b00b      	add	sp, #44	; 0x2c
 8013cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cbc:	f10b 0b01 	add.w	fp, fp, #1
 8013cc0:	e78a      	b.n	8013bd8 <__gethex+0x34>
 8013cc2:	2500      	movs	r5, #0
 8013cc4:	462c      	mov	r4, r5
 8013cc6:	e7ae      	b.n	8013c26 <__gethex+0x82>
 8013cc8:	463e      	mov	r6, r7
 8013cca:	2501      	movs	r5, #1
 8013ccc:	e7c7      	b.n	8013c5e <__gethex+0xba>
 8013cce:	4604      	mov	r4, r0
 8013cd0:	e7fb      	b.n	8013cca <__gethex+0x126>
 8013cd2:	f04f 0900 	mov.w	r9, #0
 8013cd6:	1cb1      	adds	r1, r6, #2
 8013cd8:	e7ce      	b.n	8013c78 <__gethex+0xd4>
 8013cda:	f04f 0901 	mov.w	r9, #1
 8013cde:	e7fa      	b.n	8013cd6 <__gethex+0x132>
 8013ce0:	230a      	movs	r3, #10
 8013ce2:	fb03 0202 	mla	r2, r3, r2, r0
 8013ce6:	3a10      	subs	r2, #16
 8013ce8:	e7cf      	b.n	8013c8a <__gethex+0xe6>
 8013cea:	4631      	mov	r1, r6
 8013cec:	e7da      	b.n	8013ca4 <__gethex+0x100>
 8013cee:	4629      	mov	r1, r5
 8013cf0:	1bf3      	subs	r3, r6, r7
 8013cf2:	3b01      	subs	r3, #1
 8013cf4:	2b07      	cmp	r3, #7
 8013cf6:	dc49      	bgt.n	8013d8c <__gethex+0x1e8>
 8013cf8:	9802      	ldr	r0, [sp, #8]
 8013cfa:	f000 fa51 	bl	80141a0 <_Balloc>
 8013cfe:	f04f 0b00 	mov.w	fp, #0
 8013d02:	4605      	mov	r5, r0
 8013d04:	46da      	mov	sl, fp
 8013d06:	9b01      	ldr	r3, [sp, #4]
 8013d08:	f100 0914 	add.w	r9, r0, #20
 8013d0c:	f1c3 0301 	rsb	r3, r3, #1
 8013d10:	f8cd 9010 	str.w	r9, [sp, #16]
 8013d14:	9308      	str	r3, [sp, #32]
 8013d16:	42b7      	cmp	r7, r6
 8013d18:	d33b      	bcc.n	8013d92 <__gethex+0x1ee>
 8013d1a:	9804      	ldr	r0, [sp, #16]
 8013d1c:	f840 ab04 	str.w	sl, [r0], #4
 8013d20:	eba0 0009 	sub.w	r0, r0, r9
 8013d24:	1080      	asrs	r0, r0, #2
 8013d26:	6128      	str	r0, [r5, #16]
 8013d28:	0147      	lsls	r7, r0, #5
 8013d2a:	4650      	mov	r0, sl
 8013d2c:	f000 fafc 	bl	8014328 <__hi0bits>
 8013d30:	f8d8 6000 	ldr.w	r6, [r8]
 8013d34:	1a3f      	subs	r7, r7, r0
 8013d36:	42b7      	cmp	r7, r6
 8013d38:	dd64      	ble.n	8013e04 <__gethex+0x260>
 8013d3a:	1bbf      	subs	r7, r7, r6
 8013d3c:	4639      	mov	r1, r7
 8013d3e:	4628      	mov	r0, r5
 8013d40:	f000 fe05 	bl	801494e <__any_on>
 8013d44:	4682      	mov	sl, r0
 8013d46:	b178      	cbz	r0, 8013d68 <__gethex+0x1c4>
 8013d48:	f04f 0a01 	mov.w	sl, #1
 8013d4c:	1e7b      	subs	r3, r7, #1
 8013d4e:	1159      	asrs	r1, r3, #5
 8013d50:	f003 021f 	and.w	r2, r3, #31
 8013d54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013d58:	fa0a f202 	lsl.w	r2, sl, r2
 8013d5c:	420a      	tst	r2, r1
 8013d5e:	d003      	beq.n	8013d68 <__gethex+0x1c4>
 8013d60:	4553      	cmp	r3, sl
 8013d62:	dc46      	bgt.n	8013df2 <__gethex+0x24e>
 8013d64:	f04f 0a02 	mov.w	sl, #2
 8013d68:	4639      	mov	r1, r7
 8013d6a:	4628      	mov	r0, r5
 8013d6c:	f7ff feca 	bl	8013b04 <rshift>
 8013d70:	443c      	add	r4, r7
 8013d72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d76:	42a3      	cmp	r3, r4
 8013d78:	da52      	bge.n	8013e20 <__gethex+0x27c>
 8013d7a:	4629      	mov	r1, r5
 8013d7c:	9802      	ldr	r0, [sp, #8]
 8013d7e:	f000 fa43 	bl	8014208 <_Bfree>
 8013d82:	2300      	movs	r3, #0
 8013d84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013d86:	27a3      	movs	r7, #163	; 0xa3
 8013d88:	6013      	str	r3, [r2, #0]
 8013d8a:	e793      	b.n	8013cb4 <__gethex+0x110>
 8013d8c:	3101      	adds	r1, #1
 8013d8e:	105b      	asrs	r3, r3, #1
 8013d90:	e7b0      	b.n	8013cf4 <__gethex+0x150>
 8013d92:	1e73      	subs	r3, r6, #1
 8013d94:	9305      	str	r3, [sp, #20]
 8013d96:	9a07      	ldr	r2, [sp, #28]
 8013d98:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013d9c:	4293      	cmp	r3, r2
 8013d9e:	d018      	beq.n	8013dd2 <__gethex+0x22e>
 8013da0:	f1bb 0f20 	cmp.w	fp, #32
 8013da4:	d107      	bne.n	8013db6 <__gethex+0x212>
 8013da6:	9b04      	ldr	r3, [sp, #16]
 8013da8:	f8c3 a000 	str.w	sl, [r3]
 8013dac:	f04f 0a00 	mov.w	sl, #0
 8013db0:	46d3      	mov	fp, sl
 8013db2:	3304      	adds	r3, #4
 8013db4:	9304      	str	r3, [sp, #16]
 8013db6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013dba:	f7ff fede 	bl	8013b7a <__hexdig_fun>
 8013dbe:	f000 000f 	and.w	r0, r0, #15
 8013dc2:	fa00 f00b 	lsl.w	r0, r0, fp
 8013dc6:	ea4a 0a00 	orr.w	sl, sl, r0
 8013dca:	f10b 0b04 	add.w	fp, fp, #4
 8013dce:	9b05      	ldr	r3, [sp, #20]
 8013dd0:	e00d      	b.n	8013dee <__gethex+0x24a>
 8013dd2:	9b05      	ldr	r3, [sp, #20]
 8013dd4:	9a08      	ldr	r2, [sp, #32]
 8013dd6:	4413      	add	r3, r2
 8013dd8:	42bb      	cmp	r3, r7
 8013dda:	d3e1      	bcc.n	8013da0 <__gethex+0x1fc>
 8013ddc:	4618      	mov	r0, r3
 8013dde:	9a01      	ldr	r2, [sp, #4]
 8013de0:	9903      	ldr	r1, [sp, #12]
 8013de2:	9309      	str	r3, [sp, #36]	; 0x24
 8013de4:	f001 f96f 	bl	80150c6 <strncmp>
 8013de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dea:	2800      	cmp	r0, #0
 8013dec:	d1d8      	bne.n	8013da0 <__gethex+0x1fc>
 8013dee:	461e      	mov	r6, r3
 8013df0:	e791      	b.n	8013d16 <__gethex+0x172>
 8013df2:	1eb9      	subs	r1, r7, #2
 8013df4:	4628      	mov	r0, r5
 8013df6:	f000 fdaa 	bl	801494e <__any_on>
 8013dfa:	2800      	cmp	r0, #0
 8013dfc:	d0b2      	beq.n	8013d64 <__gethex+0x1c0>
 8013dfe:	f04f 0a03 	mov.w	sl, #3
 8013e02:	e7b1      	b.n	8013d68 <__gethex+0x1c4>
 8013e04:	da09      	bge.n	8013e1a <__gethex+0x276>
 8013e06:	1bf7      	subs	r7, r6, r7
 8013e08:	4629      	mov	r1, r5
 8013e0a:	463a      	mov	r2, r7
 8013e0c:	9802      	ldr	r0, [sp, #8]
 8013e0e:	f000 fbc5 	bl	801459c <__lshift>
 8013e12:	4605      	mov	r5, r0
 8013e14:	1be4      	subs	r4, r4, r7
 8013e16:	f100 0914 	add.w	r9, r0, #20
 8013e1a:	f04f 0a00 	mov.w	sl, #0
 8013e1e:	e7a8      	b.n	8013d72 <__gethex+0x1ce>
 8013e20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013e24:	42a0      	cmp	r0, r4
 8013e26:	dd6b      	ble.n	8013f00 <__gethex+0x35c>
 8013e28:	1b04      	subs	r4, r0, r4
 8013e2a:	42a6      	cmp	r6, r4
 8013e2c:	dc2e      	bgt.n	8013e8c <__gethex+0x2e8>
 8013e2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013e32:	2b02      	cmp	r3, #2
 8013e34:	d022      	beq.n	8013e7c <__gethex+0x2d8>
 8013e36:	2b03      	cmp	r3, #3
 8013e38:	d024      	beq.n	8013e84 <__gethex+0x2e0>
 8013e3a:	2b01      	cmp	r3, #1
 8013e3c:	d115      	bne.n	8013e6a <__gethex+0x2c6>
 8013e3e:	42a6      	cmp	r6, r4
 8013e40:	d113      	bne.n	8013e6a <__gethex+0x2c6>
 8013e42:	2e01      	cmp	r6, #1
 8013e44:	dc0b      	bgt.n	8013e5e <__gethex+0x2ba>
 8013e46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013e4a:	9a06      	ldr	r2, [sp, #24]
 8013e4c:	2762      	movs	r7, #98	; 0x62
 8013e4e:	6013      	str	r3, [r2, #0]
 8013e50:	2301      	movs	r3, #1
 8013e52:	612b      	str	r3, [r5, #16]
 8013e54:	f8c9 3000 	str.w	r3, [r9]
 8013e58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e5a:	601d      	str	r5, [r3, #0]
 8013e5c:	e72a      	b.n	8013cb4 <__gethex+0x110>
 8013e5e:	1e71      	subs	r1, r6, #1
 8013e60:	4628      	mov	r0, r5
 8013e62:	f000 fd74 	bl	801494e <__any_on>
 8013e66:	2800      	cmp	r0, #0
 8013e68:	d1ed      	bne.n	8013e46 <__gethex+0x2a2>
 8013e6a:	4629      	mov	r1, r5
 8013e6c:	9802      	ldr	r0, [sp, #8]
 8013e6e:	f000 f9cb 	bl	8014208 <_Bfree>
 8013e72:	2300      	movs	r3, #0
 8013e74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e76:	2750      	movs	r7, #80	; 0x50
 8013e78:	6013      	str	r3, [r2, #0]
 8013e7a:	e71b      	b.n	8013cb4 <__gethex+0x110>
 8013e7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d0e1      	beq.n	8013e46 <__gethex+0x2a2>
 8013e82:	e7f2      	b.n	8013e6a <__gethex+0x2c6>
 8013e84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d1dd      	bne.n	8013e46 <__gethex+0x2a2>
 8013e8a:	e7ee      	b.n	8013e6a <__gethex+0x2c6>
 8013e8c:	1e67      	subs	r7, r4, #1
 8013e8e:	f1ba 0f00 	cmp.w	sl, #0
 8013e92:	d132      	bne.n	8013efa <__gethex+0x356>
 8013e94:	b127      	cbz	r7, 8013ea0 <__gethex+0x2fc>
 8013e96:	4639      	mov	r1, r7
 8013e98:	4628      	mov	r0, r5
 8013e9a:	f000 fd58 	bl	801494e <__any_on>
 8013e9e:	4682      	mov	sl, r0
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	117a      	asrs	r2, r7, #5
 8013ea4:	f007 071f 	and.w	r7, r7, #31
 8013ea8:	fa03 f707 	lsl.w	r7, r3, r7
 8013eac:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013eb0:	4621      	mov	r1, r4
 8013eb2:	421f      	tst	r7, r3
 8013eb4:	f04f 0702 	mov.w	r7, #2
 8013eb8:	4628      	mov	r0, r5
 8013eba:	bf18      	it	ne
 8013ebc:	f04a 0a02 	orrne.w	sl, sl, #2
 8013ec0:	1b36      	subs	r6, r6, r4
 8013ec2:	f7ff fe1f 	bl	8013b04 <rshift>
 8013ec6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013eca:	f1ba 0f00 	cmp.w	sl, #0
 8013ece:	d048      	beq.n	8013f62 <__gethex+0x3be>
 8013ed0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013ed4:	2b02      	cmp	r3, #2
 8013ed6:	d015      	beq.n	8013f04 <__gethex+0x360>
 8013ed8:	2b03      	cmp	r3, #3
 8013eda:	d017      	beq.n	8013f0c <__gethex+0x368>
 8013edc:	2b01      	cmp	r3, #1
 8013ede:	d109      	bne.n	8013ef4 <__gethex+0x350>
 8013ee0:	f01a 0f02 	tst.w	sl, #2
 8013ee4:	d006      	beq.n	8013ef4 <__gethex+0x350>
 8013ee6:	f8d9 3000 	ldr.w	r3, [r9]
 8013eea:	ea4a 0a03 	orr.w	sl, sl, r3
 8013eee:	f01a 0f01 	tst.w	sl, #1
 8013ef2:	d10e      	bne.n	8013f12 <__gethex+0x36e>
 8013ef4:	f047 0710 	orr.w	r7, r7, #16
 8013ef8:	e033      	b.n	8013f62 <__gethex+0x3be>
 8013efa:	f04f 0a01 	mov.w	sl, #1
 8013efe:	e7cf      	b.n	8013ea0 <__gethex+0x2fc>
 8013f00:	2701      	movs	r7, #1
 8013f02:	e7e2      	b.n	8013eca <__gethex+0x326>
 8013f04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f06:	f1c3 0301 	rsb	r3, r3, #1
 8013f0a:	9315      	str	r3, [sp, #84]	; 0x54
 8013f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d0f0      	beq.n	8013ef4 <__gethex+0x350>
 8013f12:	f04f 0c00 	mov.w	ip, #0
 8013f16:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013f1a:	f105 0314 	add.w	r3, r5, #20
 8013f1e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8013f22:	eb03 010a 	add.w	r1, r3, sl
 8013f26:	4618      	mov	r0, r3
 8013f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013f30:	d01c      	beq.n	8013f6c <__gethex+0x3c8>
 8013f32:	3201      	adds	r2, #1
 8013f34:	6002      	str	r2, [r0, #0]
 8013f36:	2f02      	cmp	r7, #2
 8013f38:	f105 0314 	add.w	r3, r5, #20
 8013f3c:	d138      	bne.n	8013fb0 <__gethex+0x40c>
 8013f3e:	f8d8 2000 	ldr.w	r2, [r8]
 8013f42:	3a01      	subs	r2, #1
 8013f44:	42b2      	cmp	r2, r6
 8013f46:	d10a      	bne.n	8013f5e <__gethex+0x3ba>
 8013f48:	2201      	movs	r2, #1
 8013f4a:	1171      	asrs	r1, r6, #5
 8013f4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013f50:	f006 061f 	and.w	r6, r6, #31
 8013f54:	fa02 f606 	lsl.w	r6, r2, r6
 8013f58:	421e      	tst	r6, r3
 8013f5a:	bf18      	it	ne
 8013f5c:	4617      	movne	r7, r2
 8013f5e:	f047 0720 	orr.w	r7, r7, #32
 8013f62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013f64:	601d      	str	r5, [r3, #0]
 8013f66:	9b06      	ldr	r3, [sp, #24]
 8013f68:	601c      	str	r4, [r3, #0]
 8013f6a:	e6a3      	b.n	8013cb4 <__gethex+0x110>
 8013f6c:	4299      	cmp	r1, r3
 8013f6e:	f843 cc04 	str.w	ip, [r3, #-4]
 8013f72:	d8d8      	bhi.n	8013f26 <__gethex+0x382>
 8013f74:	68ab      	ldr	r3, [r5, #8]
 8013f76:	4599      	cmp	r9, r3
 8013f78:	db12      	blt.n	8013fa0 <__gethex+0x3fc>
 8013f7a:	6869      	ldr	r1, [r5, #4]
 8013f7c:	9802      	ldr	r0, [sp, #8]
 8013f7e:	3101      	adds	r1, #1
 8013f80:	f000 f90e 	bl	80141a0 <_Balloc>
 8013f84:	4683      	mov	fp, r0
 8013f86:	692a      	ldr	r2, [r5, #16]
 8013f88:	f105 010c 	add.w	r1, r5, #12
 8013f8c:	3202      	adds	r2, #2
 8013f8e:	0092      	lsls	r2, r2, #2
 8013f90:	300c      	adds	r0, #12
 8013f92:	f7fd faa1 	bl	80114d8 <memcpy>
 8013f96:	4629      	mov	r1, r5
 8013f98:	9802      	ldr	r0, [sp, #8]
 8013f9a:	f000 f935 	bl	8014208 <_Bfree>
 8013f9e:	465d      	mov	r5, fp
 8013fa0:	692b      	ldr	r3, [r5, #16]
 8013fa2:	1c5a      	adds	r2, r3, #1
 8013fa4:	612a      	str	r2, [r5, #16]
 8013fa6:	2201      	movs	r2, #1
 8013fa8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013fac:	615a      	str	r2, [r3, #20]
 8013fae:	e7c2      	b.n	8013f36 <__gethex+0x392>
 8013fb0:	692a      	ldr	r2, [r5, #16]
 8013fb2:	454a      	cmp	r2, r9
 8013fb4:	dd0b      	ble.n	8013fce <__gethex+0x42a>
 8013fb6:	2101      	movs	r1, #1
 8013fb8:	4628      	mov	r0, r5
 8013fba:	f7ff fda3 	bl	8013b04 <rshift>
 8013fbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013fc2:	3401      	adds	r4, #1
 8013fc4:	42a3      	cmp	r3, r4
 8013fc6:	f6ff aed8 	blt.w	8013d7a <__gethex+0x1d6>
 8013fca:	2701      	movs	r7, #1
 8013fcc:	e7c7      	b.n	8013f5e <__gethex+0x3ba>
 8013fce:	f016 061f 	ands.w	r6, r6, #31
 8013fd2:	d0fa      	beq.n	8013fca <__gethex+0x426>
 8013fd4:	449a      	add	sl, r3
 8013fd6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013fda:	f000 f9a5 	bl	8014328 <__hi0bits>
 8013fde:	f1c6 0620 	rsb	r6, r6, #32
 8013fe2:	42b0      	cmp	r0, r6
 8013fe4:	dbe7      	blt.n	8013fb6 <__gethex+0x412>
 8013fe6:	e7f0      	b.n	8013fca <__gethex+0x426>

08013fe8 <L_shift>:
 8013fe8:	f1c2 0208 	rsb	r2, r2, #8
 8013fec:	0092      	lsls	r2, r2, #2
 8013fee:	b570      	push	{r4, r5, r6, lr}
 8013ff0:	f1c2 0620 	rsb	r6, r2, #32
 8013ff4:	6843      	ldr	r3, [r0, #4]
 8013ff6:	6804      	ldr	r4, [r0, #0]
 8013ff8:	fa03 f506 	lsl.w	r5, r3, r6
 8013ffc:	432c      	orrs	r4, r5
 8013ffe:	40d3      	lsrs	r3, r2
 8014000:	6004      	str	r4, [r0, #0]
 8014002:	f840 3f04 	str.w	r3, [r0, #4]!
 8014006:	4288      	cmp	r0, r1
 8014008:	d3f4      	bcc.n	8013ff4 <L_shift+0xc>
 801400a:	bd70      	pop	{r4, r5, r6, pc}

0801400c <__match>:
 801400c:	b530      	push	{r4, r5, lr}
 801400e:	6803      	ldr	r3, [r0, #0]
 8014010:	3301      	adds	r3, #1
 8014012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014016:	b914      	cbnz	r4, 801401e <__match+0x12>
 8014018:	6003      	str	r3, [r0, #0]
 801401a:	2001      	movs	r0, #1
 801401c:	bd30      	pop	{r4, r5, pc}
 801401e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014022:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014026:	2d19      	cmp	r5, #25
 8014028:	bf98      	it	ls
 801402a:	3220      	addls	r2, #32
 801402c:	42a2      	cmp	r2, r4
 801402e:	d0f0      	beq.n	8014012 <__match+0x6>
 8014030:	2000      	movs	r0, #0
 8014032:	e7f3      	b.n	801401c <__match+0x10>

08014034 <__hexnan>:
 8014034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014038:	2500      	movs	r5, #0
 801403a:	680b      	ldr	r3, [r1, #0]
 801403c:	4682      	mov	sl, r0
 801403e:	115f      	asrs	r7, r3, #5
 8014040:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8014044:	f013 031f 	ands.w	r3, r3, #31
 8014048:	bf18      	it	ne
 801404a:	3704      	addne	r7, #4
 801404c:	1f3e      	subs	r6, r7, #4
 801404e:	4690      	mov	r8, r2
 8014050:	46b1      	mov	r9, r6
 8014052:	4634      	mov	r4, r6
 8014054:	46ab      	mov	fp, r5
 8014056:	b087      	sub	sp, #28
 8014058:	6801      	ldr	r1, [r0, #0]
 801405a:	9301      	str	r3, [sp, #4]
 801405c:	f847 5c04 	str.w	r5, [r7, #-4]
 8014060:	9502      	str	r5, [sp, #8]
 8014062:	784a      	ldrb	r2, [r1, #1]
 8014064:	1c4b      	adds	r3, r1, #1
 8014066:	9303      	str	r3, [sp, #12]
 8014068:	b342      	cbz	r2, 80140bc <__hexnan+0x88>
 801406a:	4610      	mov	r0, r2
 801406c:	9105      	str	r1, [sp, #20]
 801406e:	9204      	str	r2, [sp, #16]
 8014070:	f7ff fd83 	bl	8013b7a <__hexdig_fun>
 8014074:	2800      	cmp	r0, #0
 8014076:	d143      	bne.n	8014100 <__hexnan+0xcc>
 8014078:	9a04      	ldr	r2, [sp, #16]
 801407a:	9905      	ldr	r1, [sp, #20]
 801407c:	2a20      	cmp	r2, #32
 801407e:	d818      	bhi.n	80140b2 <__hexnan+0x7e>
 8014080:	9b02      	ldr	r3, [sp, #8]
 8014082:	459b      	cmp	fp, r3
 8014084:	dd13      	ble.n	80140ae <__hexnan+0x7a>
 8014086:	454c      	cmp	r4, r9
 8014088:	d206      	bcs.n	8014098 <__hexnan+0x64>
 801408a:	2d07      	cmp	r5, #7
 801408c:	dc04      	bgt.n	8014098 <__hexnan+0x64>
 801408e:	462a      	mov	r2, r5
 8014090:	4649      	mov	r1, r9
 8014092:	4620      	mov	r0, r4
 8014094:	f7ff ffa8 	bl	8013fe8 <L_shift>
 8014098:	4544      	cmp	r4, r8
 801409a:	d944      	bls.n	8014126 <__hexnan+0xf2>
 801409c:	2300      	movs	r3, #0
 801409e:	f1a4 0904 	sub.w	r9, r4, #4
 80140a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80140a6:	461d      	mov	r5, r3
 80140a8:	464c      	mov	r4, r9
 80140aa:	f8cd b008 	str.w	fp, [sp, #8]
 80140ae:	9903      	ldr	r1, [sp, #12]
 80140b0:	e7d7      	b.n	8014062 <__hexnan+0x2e>
 80140b2:	2a29      	cmp	r2, #41	; 0x29
 80140b4:	d14a      	bne.n	801414c <__hexnan+0x118>
 80140b6:	3102      	adds	r1, #2
 80140b8:	f8ca 1000 	str.w	r1, [sl]
 80140bc:	f1bb 0f00 	cmp.w	fp, #0
 80140c0:	d044      	beq.n	801414c <__hexnan+0x118>
 80140c2:	454c      	cmp	r4, r9
 80140c4:	d206      	bcs.n	80140d4 <__hexnan+0xa0>
 80140c6:	2d07      	cmp	r5, #7
 80140c8:	dc04      	bgt.n	80140d4 <__hexnan+0xa0>
 80140ca:	462a      	mov	r2, r5
 80140cc:	4649      	mov	r1, r9
 80140ce:	4620      	mov	r0, r4
 80140d0:	f7ff ff8a 	bl	8013fe8 <L_shift>
 80140d4:	4544      	cmp	r4, r8
 80140d6:	d928      	bls.n	801412a <__hexnan+0xf6>
 80140d8:	4643      	mov	r3, r8
 80140da:	f854 2b04 	ldr.w	r2, [r4], #4
 80140de:	42a6      	cmp	r6, r4
 80140e0:	f843 2b04 	str.w	r2, [r3], #4
 80140e4:	d2f9      	bcs.n	80140da <__hexnan+0xa6>
 80140e6:	2200      	movs	r2, #0
 80140e8:	f843 2b04 	str.w	r2, [r3], #4
 80140ec:	429e      	cmp	r6, r3
 80140ee:	d2fb      	bcs.n	80140e8 <__hexnan+0xb4>
 80140f0:	6833      	ldr	r3, [r6, #0]
 80140f2:	b91b      	cbnz	r3, 80140fc <__hexnan+0xc8>
 80140f4:	4546      	cmp	r6, r8
 80140f6:	d127      	bne.n	8014148 <__hexnan+0x114>
 80140f8:	2301      	movs	r3, #1
 80140fa:	6033      	str	r3, [r6, #0]
 80140fc:	2005      	movs	r0, #5
 80140fe:	e026      	b.n	801414e <__hexnan+0x11a>
 8014100:	3501      	adds	r5, #1
 8014102:	2d08      	cmp	r5, #8
 8014104:	f10b 0b01 	add.w	fp, fp, #1
 8014108:	dd06      	ble.n	8014118 <__hexnan+0xe4>
 801410a:	4544      	cmp	r4, r8
 801410c:	d9cf      	bls.n	80140ae <__hexnan+0x7a>
 801410e:	2300      	movs	r3, #0
 8014110:	2501      	movs	r5, #1
 8014112:	f844 3c04 	str.w	r3, [r4, #-4]
 8014116:	3c04      	subs	r4, #4
 8014118:	6822      	ldr	r2, [r4, #0]
 801411a:	f000 000f 	and.w	r0, r0, #15
 801411e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014122:	6020      	str	r0, [r4, #0]
 8014124:	e7c3      	b.n	80140ae <__hexnan+0x7a>
 8014126:	2508      	movs	r5, #8
 8014128:	e7c1      	b.n	80140ae <__hexnan+0x7a>
 801412a:	9b01      	ldr	r3, [sp, #4]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d0df      	beq.n	80140f0 <__hexnan+0xbc>
 8014130:	f04f 32ff 	mov.w	r2, #4294967295
 8014134:	f1c3 0320 	rsb	r3, r3, #32
 8014138:	fa22 f303 	lsr.w	r3, r2, r3
 801413c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014140:	401a      	ands	r2, r3
 8014142:	f847 2c04 	str.w	r2, [r7, #-4]
 8014146:	e7d3      	b.n	80140f0 <__hexnan+0xbc>
 8014148:	3e04      	subs	r6, #4
 801414a:	e7d1      	b.n	80140f0 <__hexnan+0xbc>
 801414c:	2004      	movs	r0, #4
 801414e:	b007      	add	sp, #28
 8014150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014154 <__localeconv_l>:
 8014154:	30f0      	adds	r0, #240	; 0xf0
 8014156:	4770      	bx	lr

08014158 <_localeconv_r>:
 8014158:	4b04      	ldr	r3, [pc, #16]	; (801416c <_localeconv_r+0x14>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	6a18      	ldr	r0, [r3, #32]
 801415e:	4b04      	ldr	r3, [pc, #16]	; (8014170 <_localeconv_r+0x18>)
 8014160:	2800      	cmp	r0, #0
 8014162:	bf08      	it	eq
 8014164:	4618      	moveq	r0, r3
 8014166:	30f0      	adds	r0, #240	; 0xf0
 8014168:	4770      	bx	lr
 801416a:	bf00      	nop
 801416c:	20000060 	.word	0x20000060
 8014170:	200000c4 	.word	0x200000c4

08014174 <malloc>:
 8014174:	4b02      	ldr	r3, [pc, #8]	; (8014180 <malloc+0xc>)
 8014176:	4601      	mov	r1, r0
 8014178:	6818      	ldr	r0, [r3, #0]
 801417a:	f000 bc63 	b.w	8014a44 <_malloc_r>
 801417e:	bf00      	nop
 8014180:	20000060 	.word	0x20000060

08014184 <memchr>:
 8014184:	b510      	push	{r4, lr}
 8014186:	b2c9      	uxtb	r1, r1
 8014188:	4402      	add	r2, r0
 801418a:	4290      	cmp	r0, r2
 801418c:	4603      	mov	r3, r0
 801418e:	d101      	bne.n	8014194 <memchr+0x10>
 8014190:	2300      	movs	r3, #0
 8014192:	e003      	b.n	801419c <memchr+0x18>
 8014194:	781c      	ldrb	r4, [r3, #0]
 8014196:	3001      	adds	r0, #1
 8014198:	428c      	cmp	r4, r1
 801419a:	d1f6      	bne.n	801418a <memchr+0x6>
 801419c:	4618      	mov	r0, r3
 801419e:	bd10      	pop	{r4, pc}

080141a0 <_Balloc>:
 80141a0:	b570      	push	{r4, r5, r6, lr}
 80141a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80141a4:	4604      	mov	r4, r0
 80141a6:	460e      	mov	r6, r1
 80141a8:	b93d      	cbnz	r5, 80141ba <_Balloc+0x1a>
 80141aa:	2010      	movs	r0, #16
 80141ac:	f7ff ffe2 	bl	8014174 <malloc>
 80141b0:	6260      	str	r0, [r4, #36]	; 0x24
 80141b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80141b6:	6005      	str	r5, [r0, #0]
 80141b8:	60c5      	str	r5, [r0, #12]
 80141ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80141bc:	68eb      	ldr	r3, [r5, #12]
 80141be:	b183      	cbz	r3, 80141e2 <_Balloc+0x42>
 80141c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80141c8:	b9b8      	cbnz	r0, 80141fa <_Balloc+0x5a>
 80141ca:	2101      	movs	r1, #1
 80141cc:	fa01 f506 	lsl.w	r5, r1, r6
 80141d0:	1d6a      	adds	r2, r5, #5
 80141d2:	0092      	lsls	r2, r2, #2
 80141d4:	4620      	mov	r0, r4
 80141d6:	f000 fbdb 	bl	8014990 <_calloc_r>
 80141da:	b160      	cbz	r0, 80141f6 <_Balloc+0x56>
 80141dc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80141e0:	e00e      	b.n	8014200 <_Balloc+0x60>
 80141e2:	2221      	movs	r2, #33	; 0x21
 80141e4:	2104      	movs	r1, #4
 80141e6:	4620      	mov	r0, r4
 80141e8:	f000 fbd2 	bl	8014990 <_calloc_r>
 80141ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141ee:	60e8      	str	r0, [r5, #12]
 80141f0:	68db      	ldr	r3, [r3, #12]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d1e4      	bne.n	80141c0 <_Balloc+0x20>
 80141f6:	2000      	movs	r0, #0
 80141f8:	bd70      	pop	{r4, r5, r6, pc}
 80141fa:	6802      	ldr	r2, [r0, #0]
 80141fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014200:	2300      	movs	r3, #0
 8014202:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014206:	e7f7      	b.n	80141f8 <_Balloc+0x58>

08014208 <_Bfree>:
 8014208:	b570      	push	{r4, r5, r6, lr}
 801420a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801420c:	4606      	mov	r6, r0
 801420e:	460d      	mov	r5, r1
 8014210:	b93c      	cbnz	r4, 8014222 <_Bfree+0x1a>
 8014212:	2010      	movs	r0, #16
 8014214:	f7ff ffae 	bl	8014174 <malloc>
 8014218:	6270      	str	r0, [r6, #36]	; 0x24
 801421a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801421e:	6004      	str	r4, [r0, #0]
 8014220:	60c4      	str	r4, [r0, #12]
 8014222:	b13d      	cbz	r5, 8014234 <_Bfree+0x2c>
 8014224:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014226:	686a      	ldr	r2, [r5, #4]
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801422e:	6029      	str	r1, [r5, #0]
 8014230:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014234:	bd70      	pop	{r4, r5, r6, pc}

08014236 <__multadd>:
 8014236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801423a:	461f      	mov	r7, r3
 801423c:	4606      	mov	r6, r0
 801423e:	460c      	mov	r4, r1
 8014240:	2300      	movs	r3, #0
 8014242:	690d      	ldr	r5, [r1, #16]
 8014244:	f101 0c14 	add.w	ip, r1, #20
 8014248:	f8dc 0000 	ldr.w	r0, [ip]
 801424c:	3301      	adds	r3, #1
 801424e:	b281      	uxth	r1, r0
 8014250:	fb02 7101 	mla	r1, r2, r1, r7
 8014254:	0c00      	lsrs	r0, r0, #16
 8014256:	0c0f      	lsrs	r7, r1, #16
 8014258:	fb02 7000 	mla	r0, r2, r0, r7
 801425c:	b289      	uxth	r1, r1
 801425e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014262:	429d      	cmp	r5, r3
 8014264:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014268:	f84c 1b04 	str.w	r1, [ip], #4
 801426c:	dcec      	bgt.n	8014248 <__multadd+0x12>
 801426e:	b1d7      	cbz	r7, 80142a6 <__multadd+0x70>
 8014270:	68a3      	ldr	r3, [r4, #8]
 8014272:	42ab      	cmp	r3, r5
 8014274:	dc12      	bgt.n	801429c <__multadd+0x66>
 8014276:	6861      	ldr	r1, [r4, #4]
 8014278:	4630      	mov	r0, r6
 801427a:	3101      	adds	r1, #1
 801427c:	f7ff ff90 	bl	80141a0 <_Balloc>
 8014280:	4680      	mov	r8, r0
 8014282:	6922      	ldr	r2, [r4, #16]
 8014284:	f104 010c 	add.w	r1, r4, #12
 8014288:	3202      	adds	r2, #2
 801428a:	0092      	lsls	r2, r2, #2
 801428c:	300c      	adds	r0, #12
 801428e:	f7fd f923 	bl	80114d8 <memcpy>
 8014292:	4621      	mov	r1, r4
 8014294:	4630      	mov	r0, r6
 8014296:	f7ff ffb7 	bl	8014208 <_Bfree>
 801429a:	4644      	mov	r4, r8
 801429c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80142a0:	3501      	adds	r5, #1
 80142a2:	615f      	str	r7, [r3, #20]
 80142a4:	6125      	str	r5, [r4, #16]
 80142a6:	4620      	mov	r0, r4
 80142a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142ac <__s2b>:
 80142ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142b0:	4615      	mov	r5, r2
 80142b2:	2209      	movs	r2, #9
 80142b4:	461f      	mov	r7, r3
 80142b6:	3308      	adds	r3, #8
 80142b8:	460c      	mov	r4, r1
 80142ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80142be:	4606      	mov	r6, r0
 80142c0:	2201      	movs	r2, #1
 80142c2:	2100      	movs	r1, #0
 80142c4:	429a      	cmp	r2, r3
 80142c6:	db20      	blt.n	801430a <__s2b+0x5e>
 80142c8:	4630      	mov	r0, r6
 80142ca:	f7ff ff69 	bl	80141a0 <_Balloc>
 80142ce:	9b08      	ldr	r3, [sp, #32]
 80142d0:	2d09      	cmp	r5, #9
 80142d2:	6143      	str	r3, [r0, #20]
 80142d4:	f04f 0301 	mov.w	r3, #1
 80142d8:	6103      	str	r3, [r0, #16]
 80142da:	dd19      	ble.n	8014310 <__s2b+0x64>
 80142dc:	f104 0809 	add.w	r8, r4, #9
 80142e0:	46c1      	mov	r9, r8
 80142e2:	442c      	add	r4, r5
 80142e4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80142e8:	4601      	mov	r1, r0
 80142ea:	3b30      	subs	r3, #48	; 0x30
 80142ec:	220a      	movs	r2, #10
 80142ee:	4630      	mov	r0, r6
 80142f0:	f7ff ffa1 	bl	8014236 <__multadd>
 80142f4:	45a1      	cmp	r9, r4
 80142f6:	d1f5      	bne.n	80142e4 <__s2b+0x38>
 80142f8:	eb08 0405 	add.w	r4, r8, r5
 80142fc:	3c08      	subs	r4, #8
 80142fe:	1b2d      	subs	r5, r5, r4
 8014300:	1963      	adds	r3, r4, r5
 8014302:	42bb      	cmp	r3, r7
 8014304:	db07      	blt.n	8014316 <__s2b+0x6a>
 8014306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801430a:	0052      	lsls	r2, r2, #1
 801430c:	3101      	adds	r1, #1
 801430e:	e7d9      	b.n	80142c4 <__s2b+0x18>
 8014310:	340a      	adds	r4, #10
 8014312:	2509      	movs	r5, #9
 8014314:	e7f3      	b.n	80142fe <__s2b+0x52>
 8014316:	f814 3b01 	ldrb.w	r3, [r4], #1
 801431a:	4601      	mov	r1, r0
 801431c:	3b30      	subs	r3, #48	; 0x30
 801431e:	220a      	movs	r2, #10
 8014320:	4630      	mov	r0, r6
 8014322:	f7ff ff88 	bl	8014236 <__multadd>
 8014326:	e7eb      	b.n	8014300 <__s2b+0x54>

08014328 <__hi0bits>:
 8014328:	0c02      	lsrs	r2, r0, #16
 801432a:	0412      	lsls	r2, r2, #16
 801432c:	4603      	mov	r3, r0
 801432e:	b9b2      	cbnz	r2, 801435e <__hi0bits+0x36>
 8014330:	0403      	lsls	r3, r0, #16
 8014332:	2010      	movs	r0, #16
 8014334:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014338:	bf04      	itt	eq
 801433a:	021b      	lsleq	r3, r3, #8
 801433c:	3008      	addeq	r0, #8
 801433e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014342:	bf04      	itt	eq
 8014344:	011b      	lsleq	r3, r3, #4
 8014346:	3004      	addeq	r0, #4
 8014348:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801434c:	bf04      	itt	eq
 801434e:	009b      	lsleq	r3, r3, #2
 8014350:	3002      	addeq	r0, #2
 8014352:	2b00      	cmp	r3, #0
 8014354:	db06      	blt.n	8014364 <__hi0bits+0x3c>
 8014356:	005b      	lsls	r3, r3, #1
 8014358:	d503      	bpl.n	8014362 <__hi0bits+0x3a>
 801435a:	3001      	adds	r0, #1
 801435c:	4770      	bx	lr
 801435e:	2000      	movs	r0, #0
 8014360:	e7e8      	b.n	8014334 <__hi0bits+0xc>
 8014362:	2020      	movs	r0, #32
 8014364:	4770      	bx	lr

08014366 <__lo0bits>:
 8014366:	6803      	ldr	r3, [r0, #0]
 8014368:	4601      	mov	r1, r0
 801436a:	f013 0207 	ands.w	r2, r3, #7
 801436e:	d00b      	beq.n	8014388 <__lo0bits+0x22>
 8014370:	07da      	lsls	r2, r3, #31
 8014372:	d423      	bmi.n	80143bc <__lo0bits+0x56>
 8014374:	0798      	lsls	r0, r3, #30
 8014376:	bf49      	itett	mi
 8014378:	085b      	lsrmi	r3, r3, #1
 801437a:	089b      	lsrpl	r3, r3, #2
 801437c:	2001      	movmi	r0, #1
 801437e:	600b      	strmi	r3, [r1, #0]
 8014380:	bf5c      	itt	pl
 8014382:	600b      	strpl	r3, [r1, #0]
 8014384:	2002      	movpl	r0, #2
 8014386:	4770      	bx	lr
 8014388:	b298      	uxth	r0, r3
 801438a:	b9a8      	cbnz	r0, 80143b8 <__lo0bits+0x52>
 801438c:	2010      	movs	r0, #16
 801438e:	0c1b      	lsrs	r3, r3, #16
 8014390:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014394:	bf04      	itt	eq
 8014396:	0a1b      	lsreq	r3, r3, #8
 8014398:	3008      	addeq	r0, #8
 801439a:	071a      	lsls	r2, r3, #28
 801439c:	bf04      	itt	eq
 801439e:	091b      	lsreq	r3, r3, #4
 80143a0:	3004      	addeq	r0, #4
 80143a2:	079a      	lsls	r2, r3, #30
 80143a4:	bf04      	itt	eq
 80143a6:	089b      	lsreq	r3, r3, #2
 80143a8:	3002      	addeq	r0, #2
 80143aa:	07da      	lsls	r2, r3, #31
 80143ac:	d402      	bmi.n	80143b4 <__lo0bits+0x4e>
 80143ae:	085b      	lsrs	r3, r3, #1
 80143b0:	d006      	beq.n	80143c0 <__lo0bits+0x5a>
 80143b2:	3001      	adds	r0, #1
 80143b4:	600b      	str	r3, [r1, #0]
 80143b6:	4770      	bx	lr
 80143b8:	4610      	mov	r0, r2
 80143ba:	e7e9      	b.n	8014390 <__lo0bits+0x2a>
 80143bc:	2000      	movs	r0, #0
 80143be:	4770      	bx	lr
 80143c0:	2020      	movs	r0, #32
 80143c2:	4770      	bx	lr

080143c4 <__i2b>:
 80143c4:	b510      	push	{r4, lr}
 80143c6:	460c      	mov	r4, r1
 80143c8:	2101      	movs	r1, #1
 80143ca:	f7ff fee9 	bl	80141a0 <_Balloc>
 80143ce:	2201      	movs	r2, #1
 80143d0:	6144      	str	r4, [r0, #20]
 80143d2:	6102      	str	r2, [r0, #16]
 80143d4:	bd10      	pop	{r4, pc}

080143d6 <__multiply>:
 80143d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143da:	4614      	mov	r4, r2
 80143dc:	690a      	ldr	r2, [r1, #16]
 80143de:	6923      	ldr	r3, [r4, #16]
 80143e0:	4688      	mov	r8, r1
 80143e2:	429a      	cmp	r2, r3
 80143e4:	bfbe      	ittt	lt
 80143e6:	460b      	movlt	r3, r1
 80143e8:	46a0      	movlt	r8, r4
 80143ea:	461c      	movlt	r4, r3
 80143ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80143f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80143f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80143f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80143fc:	eb07 0609 	add.w	r6, r7, r9
 8014400:	42b3      	cmp	r3, r6
 8014402:	bfb8      	it	lt
 8014404:	3101      	addlt	r1, #1
 8014406:	f7ff fecb 	bl	80141a0 <_Balloc>
 801440a:	f100 0514 	add.w	r5, r0, #20
 801440e:	462b      	mov	r3, r5
 8014410:	2200      	movs	r2, #0
 8014412:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014416:	4573      	cmp	r3, lr
 8014418:	d316      	bcc.n	8014448 <__multiply+0x72>
 801441a:	f104 0214 	add.w	r2, r4, #20
 801441e:	f108 0114 	add.w	r1, r8, #20
 8014422:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014426:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801442a:	9300      	str	r3, [sp, #0]
 801442c:	9b00      	ldr	r3, [sp, #0]
 801442e:	9201      	str	r2, [sp, #4]
 8014430:	4293      	cmp	r3, r2
 8014432:	d80c      	bhi.n	801444e <__multiply+0x78>
 8014434:	2e00      	cmp	r6, #0
 8014436:	dd03      	ble.n	8014440 <__multiply+0x6a>
 8014438:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801443c:	2b00      	cmp	r3, #0
 801443e:	d05d      	beq.n	80144fc <__multiply+0x126>
 8014440:	6106      	str	r6, [r0, #16]
 8014442:	b003      	add	sp, #12
 8014444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014448:	f843 2b04 	str.w	r2, [r3], #4
 801444c:	e7e3      	b.n	8014416 <__multiply+0x40>
 801444e:	f8b2 b000 	ldrh.w	fp, [r2]
 8014452:	f1bb 0f00 	cmp.w	fp, #0
 8014456:	d023      	beq.n	80144a0 <__multiply+0xca>
 8014458:	4689      	mov	r9, r1
 801445a:	46ac      	mov	ip, r5
 801445c:	f04f 0800 	mov.w	r8, #0
 8014460:	f859 4b04 	ldr.w	r4, [r9], #4
 8014464:	f8dc a000 	ldr.w	sl, [ip]
 8014468:	b2a3      	uxth	r3, r4
 801446a:	fa1f fa8a 	uxth.w	sl, sl
 801446e:	fb0b a303 	mla	r3, fp, r3, sl
 8014472:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014476:	f8dc 4000 	ldr.w	r4, [ip]
 801447a:	4443      	add	r3, r8
 801447c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014480:	fb0b 840a 	mla	r4, fp, sl, r8
 8014484:	46e2      	mov	sl, ip
 8014486:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801448a:	b29b      	uxth	r3, r3
 801448c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014490:	454f      	cmp	r7, r9
 8014492:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014496:	f84a 3b04 	str.w	r3, [sl], #4
 801449a:	d82b      	bhi.n	80144f4 <__multiply+0x11e>
 801449c:	f8cc 8004 	str.w	r8, [ip, #4]
 80144a0:	9b01      	ldr	r3, [sp, #4]
 80144a2:	3204      	adds	r2, #4
 80144a4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80144a8:	f1ba 0f00 	cmp.w	sl, #0
 80144ac:	d020      	beq.n	80144f0 <__multiply+0x11a>
 80144ae:	4689      	mov	r9, r1
 80144b0:	46a8      	mov	r8, r5
 80144b2:	f04f 0b00 	mov.w	fp, #0
 80144b6:	682b      	ldr	r3, [r5, #0]
 80144b8:	f8b9 c000 	ldrh.w	ip, [r9]
 80144bc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80144c0:	b29b      	uxth	r3, r3
 80144c2:	fb0a 440c 	mla	r4, sl, ip, r4
 80144c6:	46c4      	mov	ip, r8
 80144c8:	445c      	add	r4, fp
 80144ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80144ce:	f84c 3b04 	str.w	r3, [ip], #4
 80144d2:	f859 3b04 	ldr.w	r3, [r9], #4
 80144d6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80144da:	0c1b      	lsrs	r3, r3, #16
 80144dc:	fb0a b303 	mla	r3, sl, r3, fp
 80144e0:	454f      	cmp	r7, r9
 80144e2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80144e6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80144ea:	d805      	bhi.n	80144f8 <__multiply+0x122>
 80144ec:	f8c8 3004 	str.w	r3, [r8, #4]
 80144f0:	3504      	adds	r5, #4
 80144f2:	e79b      	b.n	801442c <__multiply+0x56>
 80144f4:	46d4      	mov	ip, sl
 80144f6:	e7b3      	b.n	8014460 <__multiply+0x8a>
 80144f8:	46e0      	mov	r8, ip
 80144fa:	e7dd      	b.n	80144b8 <__multiply+0xe2>
 80144fc:	3e01      	subs	r6, #1
 80144fe:	e799      	b.n	8014434 <__multiply+0x5e>

08014500 <__pow5mult>:
 8014500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014504:	4615      	mov	r5, r2
 8014506:	f012 0203 	ands.w	r2, r2, #3
 801450a:	4606      	mov	r6, r0
 801450c:	460f      	mov	r7, r1
 801450e:	d007      	beq.n	8014520 <__pow5mult+0x20>
 8014510:	4c21      	ldr	r4, [pc, #132]	; (8014598 <__pow5mult+0x98>)
 8014512:	3a01      	subs	r2, #1
 8014514:	2300      	movs	r3, #0
 8014516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801451a:	f7ff fe8c 	bl	8014236 <__multadd>
 801451e:	4607      	mov	r7, r0
 8014520:	10ad      	asrs	r5, r5, #2
 8014522:	d035      	beq.n	8014590 <__pow5mult+0x90>
 8014524:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014526:	b93c      	cbnz	r4, 8014538 <__pow5mult+0x38>
 8014528:	2010      	movs	r0, #16
 801452a:	f7ff fe23 	bl	8014174 <malloc>
 801452e:	6270      	str	r0, [r6, #36]	; 0x24
 8014530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014534:	6004      	str	r4, [r0, #0]
 8014536:	60c4      	str	r4, [r0, #12]
 8014538:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801453c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014540:	b94c      	cbnz	r4, 8014556 <__pow5mult+0x56>
 8014542:	f240 2171 	movw	r1, #625	; 0x271
 8014546:	4630      	mov	r0, r6
 8014548:	f7ff ff3c 	bl	80143c4 <__i2b>
 801454c:	2300      	movs	r3, #0
 801454e:	4604      	mov	r4, r0
 8014550:	f8c8 0008 	str.w	r0, [r8, #8]
 8014554:	6003      	str	r3, [r0, #0]
 8014556:	f04f 0800 	mov.w	r8, #0
 801455a:	07eb      	lsls	r3, r5, #31
 801455c:	d50a      	bpl.n	8014574 <__pow5mult+0x74>
 801455e:	4639      	mov	r1, r7
 8014560:	4622      	mov	r2, r4
 8014562:	4630      	mov	r0, r6
 8014564:	f7ff ff37 	bl	80143d6 <__multiply>
 8014568:	4681      	mov	r9, r0
 801456a:	4639      	mov	r1, r7
 801456c:	4630      	mov	r0, r6
 801456e:	f7ff fe4b 	bl	8014208 <_Bfree>
 8014572:	464f      	mov	r7, r9
 8014574:	106d      	asrs	r5, r5, #1
 8014576:	d00b      	beq.n	8014590 <__pow5mult+0x90>
 8014578:	6820      	ldr	r0, [r4, #0]
 801457a:	b938      	cbnz	r0, 801458c <__pow5mult+0x8c>
 801457c:	4622      	mov	r2, r4
 801457e:	4621      	mov	r1, r4
 8014580:	4630      	mov	r0, r6
 8014582:	f7ff ff28 	bl	80143d6 <__multiply>
 8014586:	6020      	str	r0, [r4, #0]
 8014588:	f8c0 8000 	str.w	r8, [r0]
 801458c:	4604      	mov	r4, r0
 801458e:	e7e4      	b.n	801455a <__pow5mult+0x5a>
 8014590:	4638      	mov	r0, r7
 8014592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014596:	bf00      	nop
 8014598:	0801a2e0 	.word	0x0801a2e0

0801459c <__lshift>:
 801459c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145a0:	460c      	mov	r4, r1
 80145a2:	4607      	mov	r7, r0
 80145a4:	4616      	mov	r6, r2
 80145a6:	6923      	ldr	r3, [r4, #16]
 80145a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80145ac:	eb0a 0903 	add.w	r9, sl, r3
 80145b0:	6849      	ldr	r1, [r1, #4]
 80145b2:	68a3      	ldr	r3, [r4, #8]
 80145b4:	f109 0501 	add.w	r5, r9, #1
 80145b8:	42ab      	cmp	r3, r5
 80145ba:	db32      	blt.n	8014622 <__lshift+0x86>
 80145bc:	4638      	mov	r0, r7
 80145be:	f7ff fdef 	bl	80141a0 <_Balloc>
 80145c2:	2300      	movs	r3, #0
 80145c4:	4680      	mov	r8, r0
 80145c6:	461a      	mov	r2, r3
 80145c8:	f100 0114 	add.w	r1, r0, #20
 80145cc:	4553      	cmp	r3, sl
 80145ce:	db2b      	blt.n	8014628 <__lshift+0x8c>
 80145d0:	6920      	ldr	r0, [r4, #16]
 80145d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80145d6:	f104 0314 	add.w	r3, r4, #20
 80145da:	f016 021f 	ands.w	r2, r6, #31
 80145de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80145e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80145e6:	d025      	beq.n	8014634 <__lshift+0x98>
 80145e8:	2000      	movs	r0, #0
 80145ea:	f1c2 0e20 	rsb	lr, r2, #32
 80145ee:	468a      	mov	sl, r1
 80145f0:	681e      	ldr	r6, [r3, #0]
 80145f2:	4096      	lsls	r6, r2
 80145f4:	4330      	orrs	r0, r6
 80145f6:	f84a 0b04 	str.w	r0, [sl], #4
 80145fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80145fe:	459c      	cmp	ip, r3
 8014600:	fa20 f00e 	lsr.w	r0, r0, lr
 8014604:	d814      	bhi.n	8014630 <__lshift+0x94>
 8014606:	6048      	str	r0, [r1, #4]
 8014608:	b108      	cbz	r0, 801460e <__lshift+0x72>
 801460a:	f109 0502 	add.w	r5, r9, #2
 801460e:	3d01      	subs	r5, #1
 8014610:	4638      	mov	r0, r7
 8014612:	f8c8 5010 	str.w	r5, [r8, #16]
 8014616:	4621      	mov	r1, r4
 8014618:	f7ff fdf6 	bl	8014208 <_Bfree>
 801461c:	4640      	mov	r0, r8
 801461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014622:	3101      	adds	r1, #1
 8014624:	005b      	lsls	r3, r3, #1
 8014626:	e7c7      	b.n	80145b8 <__lshift+0x1c>
 8014628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801462c:	3301      	adds	r3, #1
 801462e:	e7cd      	b.n	80145cc <__lshift+0x30>
 8014630:	4651      	mov	r1, sl
 8014632:	e7dc      	b.n	80145ee <__lshift+0x52>
 8014634:	3904      	subs	r1, #4
 8014636:	f853 2b04 	ldr.w	r2, [r3], #4
 801463a:	459c      	cmp	ip, r3
 801463c:	f841 2f04 	str.w	r2, [r1, #4]!
 8014640:	d8f9      	bhi.n	8014636 <__lshift+0x9a>
 8014642:	e7e4      	b.n	801460e <__lshift+0x72>

08014644 <__mcmp>:
 8014644:	6903      	ldr	r3, [r0, #16]
 8014646:	690a      	ldr	r2, [r1, #16]
 8014648:	b530      	push	{r4, r5, lr}
 801464a:	1a9b      	subs	r3, r3, r2
 801464c:	d10c      	bne.n	8014668 <__mcmp+0x24>
 801464e:	0092      	lsls	r2, r2, #2
 8014650:	3014      	adds	r0, #20
 8014652:	3114      	adds	r1, #20
 8014654:	1884      	adds	r4, r0, r2
 8014656:	4411      	add	r1, r2
 8014658:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801465c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014660:	4295      	cmp	r5, r2
 8014662:	d003      	beq.n	801466c <__mcmp+0x28>
 8014664:	d305      	bcc.n	8014672 <__mcmp+0x2e>
 8014666:	2301      	movs	r3, #1
 8014668:	4618      	mov	r0, r3
 801466a:	bd30      	pop	{r4, r5, pc}
 801466c:	42a0      	cmp	r0, r4
 801466e:	d3f3      	bcc.n	8014658 <__mcmp+0x14>
 8014670:	e7fa      	b.n	8014668 <__mcmp+0x24>
 8014672:	f04f 33ff 	mov.w	r3, #4294967295
 8014676:	e7f7      	b.n	8014668 <__mcmp+0x24>

08014678 <__mdiff>:
 8014678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801467c:	460d      	mov	r5, r1
 801467e:	4607      	mov	r7, r0
 8014680:	4611      	mov	r1, r2
 8014682:	4628      	mov	r0, r5
 8014684:	4614      	mov	r4, r2
 8014686:	f7ff ffdd 	bl	8014644 <__mcmp>
 801468a:	1e06      	subs	r6, r0, #0
 801468c:	d108      	bne.n	80146a0 <__mdiff+0x28>
 801468e:	4631      	mov	r1, r6
 8014690:	4638      	mov	r0, r7
 8014692:	f7ff fd85 	bl	80141a0 <_Balloc>
 8014696:	2301      	movs	r3, #1
 8014698:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801469c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146a0:	bfa4      	itt	ge
 80146a2:	4623      	movge	r3, r4
 80146a4:	462c      	movge	r4, r5
 80146a6:	4638      	mov	r0, r7
 80146a8:	6861      	ldr	r1, [r4, #4]
 80146aa:	bfa6      	itte	ge
 80146ac:	461d      	movge	r5, r3
 80146ae:	2600      	movge	r6, #0
 80146b0:	2601      	movlt	r6, #1
 80146b2:	f7ff fd75 	bl	80141a0 <_Balloc>
 80146b6:	f04f 0e00 	mov.w	lr, #0
 80146ba:	60c6      	str	r6, [r0, #12]
 80146bc:	692b      	ldr	r3, [r5, #16]
 80146be:	6926      	ldr	r6, [r4, #16]
 80146c0:	f104 0214 	add.w	r2, r4, #20
 80146c4:	f105 0914 	add.w	r9, r5, #20
 80146c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80146cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80146d0:	f100 0114 	add.w	r1, r0, #20
 80146d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80146d8:	f859 5b04 	ldr.w	r5, [r9], #4
 80146dc:	fa1f f38a 	uxth.w	r3, sl
 80146e0:	4473      	add	r3, lr
 80146e2:	b2ac      	uxth	r4, r5
 80146e4:	1b1b      	subs	r3, r3, r4
 80146e6:	0c2c      	lsrs	r4, r5, #16
 80146e8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80146ec:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80146f0:	b29b      	uxth	r3, r3
 80146f2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80146f6:	45c8      	cmp	r8, r9
 80146f8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80146fc:	4694      	mov	ip, r2
 80146fe:	f841 4b04 	str.w	r4, [r1], #4
 8014702:	d8e7      	bhi.n	80146d4 <__mdiff+0x5c>
 8014704:	45bc      	cmp	ip, r7
 8014706:	d304      	bcc.n	8014712 <__mdiff+0x9a>
 8014708:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801470c:	b183      	cbz	r3, 8014730 <__mdiff+0xb8>
 801470e:	6106      	str	r6, [r0, #16]
 8014710:	e7c4      	b.n	801469c <__mdiff+0x24>
 8014712:	f85c 4b04 	ldr.w	r4, [ip], #4
 8014716:	b2a2      	uxth	r2, r4
 8014718:	4472      	add	r2, lr
 801471a:	1413      	asrs	r3, r2, #16
 801471c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014720:	b292      	uxth	r2, r2
 8014722:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014726:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801472a:	f841 2b04 	str.w	r2, [r1], #4
 801472e:	e7e9      	b.n	8014704 <__mdiff+0x8c>
 8014730:	3e01      	subs	r6, #1
 8014732:	e7e9      	b.n	8014708 <__mdiff+0x90>

08014734 <__ulp>:
 8014734:	4b10      	ldr	r3, [pc, #64]	; (8014778 <__ulp+0x44>)
 8014736:	400b      	ands	r3, r1
 8014738:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801473c:	2b00      	cmp	r3, #0
 801473e:	dd02      	ble.n	8014746 <__ulp+0x12>
 8014740:	2000      	movs	r0, #0
 8014742:	4619      	mov	r1, r3
 8014744:	4770      	bx	lr
 8014746:	425b      	negs	r3, r3
 8014748:	151b      	asrs	r3, r3, #20
 801474a:	2b13      	cmp	r3, #19
 801474c:	f04f 0000 	mov.w	r0, #0
 8014750:	f04f 0100 	mov.w	r1, #0
 8014754:	dc04      	bgt.n	8014760 <__ulp+0x2c>
 8014756:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801475a:	fa42 f103 	asr.w	r1, r2, r3
 801475e:	4770      	bx	lr
 8014760:	2201      	movs	r2, #1
 8014762:	3b14      	subs	r3, #20
 8014764:	2b1e      	cmp	r3, #30
 8014766:	bfce      	itee	gt
 8014768:	4613      	movgt	r3, r2
 801476a:	f1c3 031f 	rsble	r3, r3, #31
 801476e:	fa02 f303 	lslle.w	r3, r2, r3
 8014772:	4618      	mov	r0, r3
 8014774:	4770      	bx	lr
 8014776:	bf00      	nop
 8014778:	7ff00000 	.word	0x7ff00000

0801477c <__b2d>:
 801477c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014780:	6907      	ldr	r7, [r0, #16]
 8014782:	f100 0914 	add.w	r9, r0, #20
 8014786:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801478a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801478e:	f1a7 0804 	sub.w	r8, r7, #4
 8014792:	4630      	mov	r0, r6
 8014794:	f7ff fdc8 	bl	8014328 <__hi0bits>
 8014798:	f1c0 0320 	rsb	r3, r0, #32
 801479c:	280a      	cmp	r0, #10
 801479e:	600b      	str	r3, [r1, #0]
 80147a0:	491e      	ldr	r1, [pc, #120]	; (801481c <__b2d+0xa0>)
 80147a2:	dc17      	bgt.n	80147d4 <__b2d+0x58>
 80147a4:	45c1      	cmp	r9, r8
 80147a6:	bf28      	it	cs
 80147a8:	2200      	movcs	r2, #0
 80147aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80147ae:	fa26 f30c 	lsr.w	r3, r6, ip
 80147b2:	bf38      	it	cc
 80147b4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80147b8:	ea43 0501 	orr.w	r5, r3, r1
 80147bc:	f100 0315 	add.w	r3, r0, #21
 80147c0:	fa06 f303 	lsl.w	r3, r6, r3
 80147c4:	fa22 f20c 	lsr.w	r2, r2, ip
 80147c8:	ea43 0402 	orr.w	r4, r3, r2
 80147cc:	4620      	mov	r0, r4
 80147ce:	4629      	mov	r1, r5
 80147d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147d4:	45c1      	cmp	r9, r8
 80147d6:	bf3a      	itte	cc
 80147d8:	f1a7 0808 	subcc.w	r8, r7, #8
 80147dc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80147e0:	2200      	movcs	r2, #0
 80147e2:	f1b0 030b 	subs.w	r3, r0, #11
 80147e6:	d015      	beq.n	8014814 <__b2d+0x98>
 80147e8:	409e      	lsls	r6, r3
 80147ea:	f1c3 0720 	rsb	r7, r3, #32
 80147ee:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80147f2:	fa22 f107 	lsr.w	r1, r2, r7
 80147f6:	45c8      	cmp	r8, r9
 80147f8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80147fc:	ea46 0501 	orr.w	r5, r6, r1
 8014800:	bf94      	ite	ls
 8014802:	2100      	movls	r1, #0
 8014804:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8014808:	fa02 f003 	lsl.w	r0, r2, r3
 801480c:	40f9      	lsrs	r1, r7
 801480e:	ea40 0401 	orr.w	r4, r0, r1
 8014812:	e7db      	b.n	80147cc <__b2d+0x50>
 8014814:	ea46 0501 	orr.w	r5, r6, r1
 8014818:	4614      	mov	r4, r2
 801481a:	e7d7      	b.n	80147cc <__b2d+0x50>
 801481c:	3ff00000 	.word	0x3ff00000

08014820 <__d2b>:
 8014820:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014824:	461c      	mov	r4, r3
 8014826:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 801482a:	2101      	movs	r1, #1
 801482c:	4690      	mov	r8, r2
 801482e:	f7ff fcb7 	bl	80141a0 <_Balloc>
 8014832:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8014836:	f3c4 540a 	ubfx	r4, r4, #20, #11
 801483a:	4607      	mov	r7, r0
 801483c:	bb34      	cbnz	r4, 801488c <__d2b+0x6c>
 801483e:	9201      	str	r2, [sp, #4]
 8014840:	f1b8 0200 	subs.w	r2, r8, #0
 8014844:	d027      	beq.n	8014896 <__d2b+0x76>
 8014846:	a802      	add	r0, sp, #8
 8014848:	f840 2d08 	str.w	r2, [r0, #-8]!
 801484c:	f7ff fd8b 	bl	8014366 <__lo0bits>
 8014850:	9900      	ldr	r1, [sp, #0]
 8014852:	b1f0      	cbz	r0, 8014892 <__d2b+0x72>
 8014854:	9a01      	ldr	r2, [sp, #4]
 8014856:	f1c0 0320 	rsb	r3, r0, #32
 801485a:	fa02 f303 	lsl.w	r3, r2, r3
 801485e:	430b      	orrs	r3, r1
 8014860:	40c2      	lsrs	r2, r0
 8014862:	617b      	str	r3, [r7, #20]
 8014864:	9201      	str	r2, [sp, #4]
 8014866:	9b01      	ldr	r3, [sp, #4]
 8014868:	2b00      	cmp	r3, #0
 801486a:	bf14      	ite	ne
 801486c:	2102      	movne	r1, #2
 801486e:	2101      	moveq	r1, #1
 8014870:	61bb      	str	r3, [r7, #24]
 8014872:	6139      	str	r1, [r7, #16]
 8014874:	b1c4      	cbz	r4, 80148a8 <__d2b+0x88>
 8014876:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801487a:	4404      	add	r4, r0
 801487c:	6034      	str	r4, [r6, #0]
 801487e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014882:	6028      	str	r0, [r5, #0]
 8014884:	4638      	mov	r0, r7
 8014886:	b002      	add	sp, #8
 8014888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801488c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014890:	e7d5      	b.n	801483e <__d2b+0x1e>
 8014892:	6179      	str	r1, [r7, #20]
 8014894:	e7e7      	b.n	8014866 <__d2b+0x46>
 8014896:	a801      	add	r0, sp, #4
 8014898:	f7ff fd65 	bl	8014366 <__lo0bits>
 801489c:	2101      	movs	r1, #1
 801489e:	9b01      	ldr	r3, [sp, #4]
 80148a0:	6139      	str	r1, [r7, #16]
 80148a2:	617b      	str	r3, [r7, #20]
 80148a4:	3020      	adds	r0, #32
 80148a6:	e7e5      	b.n	8014874 <__d2b+0x54>
 80148a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80148ac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80148b0:	6030      	str	r0, [r6, #0]
 80148b2:	6918      	ldr	r0, [r3, #16]
 80148b4:	f7ff fd38 	bl	8014328 <__hi0bits>
 80148b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80148bc:	e7e1      	b.n	8014882 <__d2b+0x62>

080148be <__ratio>:
 80148be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c2:	4688      	mov	r8, r1
 80148c4:	4669      	mov	r1, sp
 80148c6:	4681      	mov	r9, r0
 80148c8:	f7ff ff58 	bl	801477c <__b2d>
 80148cc:	468b      	mov	fp, r1
 80148ce:	4606      	mov	r6, r0
 80148d0:	460f      	mov	r7, r1
 80148d2:	4640      	mov	r0, r8
 80148d4:	a901      	add	r1, sp, #4
 80148d6:	f7ff ff51 	bl	801477c <__b2d>
 80148da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80148de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80148e2:	460d      	mov	r5, r1
 80148e4:	eba3 0c02 	sub.w	ip, r3, r2
 80148e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80148ec:	1a9b      	subs	r3, r3, r2
 80148ee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	bfd5      	itete	le
 80148f6:	460a      	movle	r2, r1
 80148f8:	463a      	movgt	r2, r7
 80148fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80148fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8014902:	bfd8      	it	le
 8014904:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8014908:	462b      	mov	r3, r5
 801490a:	4602      	mov	r2, r0
 801490c:	4659      	mov	r1, fp
 801490e:	4630      	mov	r0, r6
 8014910:	f7eb ff26 	bl	8000760 <__aeabi_ddiv>
 8014914:	b003      	add	sp, #12
 8014916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801491a <__copybits>:
 801491a:	3901      	subs	r1, #1
 801491c:	b510      	push	{r4, lr}
 801491e:	1149      	asrs	r1, r1, #5
 8014920:	6914      	ldr	r4, [r2, #16]
 8014922:	3101      	adds	r1, #1
 8014924:	f102 0314 	add.w	r3, r2, #20
 8014928:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801492c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014930:	42a3      	cmp	r3, r4
 8014932:	4602      	mov	r2, r0
 8014934:	d303      	bcc.n	801493e <__copybits+0x24>
 8014936:	2300      	movs	r3, #0
 8014938:	428a      	cmp	r2, r1
 801493a:	d305      	bcc.n	8014948 <__copybits+0x2e>
 801493c:	bd10      	pop	{r4, pc}
 801493e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014942:	f840 2b04 	str.w	r2, [r0], #4
 8014946:	e7f3      	b.n	8014930 <__copybits+0x16>
 8014948:	f842 3b04 	str.w	r3, [r2], #4
 801494c:	e7f4      	b.n	8014938 <__copybits+0x1e>

0801494e <__any_on>:
 801494e:	f100 0214 	add.w	r2, r0, #20
 8014952:	6900      	ldr	r0, [r0, #16]
 8014954:	114b      	asrs	r3, r1, #5
 8014956:	4298      	cmp	r0, r3
 8014958:	b510      	push	{r4, lr}
 801495a:	db11      	blt.n	8014980 <__any_on+0x32>
 801495c:	dd0a      	ble.n	8014974 <__any_on+0x26>
 801495e:	f011 011f 	ands.w	r1, r1, #31
 8014962:	d007      	beq.n	8014974 <__any_on+0x26>
 8014964:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014968:	fa24 f001 	lsr.w	r0, r4, r1
 801496c:	fa00 f101 	lsl.w	r1, r0, r1
 8014970:	428c      	cmp	r4, r1
 8014972:	d10b      	bne.n	801498c <__any_on+0x3e>
 8014974:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014978:	4293      	cmp	r3, r2
 801497a:	d803      	bhi.n	8014984 <__any_on+0x36>
 801497c:	2000      	movs	r0, #0
 801497e:	bd10      	pop	{r4, pc}
 8014980:	4603      	mov	r3, r0
 8014982:	e7f7      	b.n	8014974 <__any_on+0x26>
 8014984:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014988:	2900      	cmp	r1, #0
 801498a:	d0f5      	beq.n	8014978 <__any_on+0x2a>
 801498c:	2001      	movs	r0, #1
 801498e:	e7f6      	b.n	801497e <__any_on+0x30>

08014990 <_calloc_r>:
 8014990:	b538      	push	{r3, r4, r5, lr}
 8014992:	fb02 f401 	mul.w	r4, r2, r1
 8014996:	4621      	mov	r1, r4
 8014998:	f000 f854 	bl	8014a44 <_malloc_r>
 801499c:	4605      	mov	r5, r0
 801499e:	b118      	cbz	r0, 80149a8 <_calloc_r+0x18>
 80149a0:	4622      	mov	r2, r4
 80149a2:	2100      	movs	r1, #0
 80149a4:	f7fc fda3 	bl	80114ee <memset>
 80149a8:	4628      	mov	r0, r5
 80149aa:	bd38      	pop	{r3, r4, r5, pc}

080149ac <_free_r>:
 80149ac:	b538      	push	{r3, r4, r5, lr}
 80149ae:	4605      	mov	r5, r0
 80149b0:	2900      	cmp	r1, #0
 80149b2:	d043      	beq.n	8014a3c <_free_r+0x90>
 80149b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149b8:	1f0c      	subs	r4, r1, #4
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	bfb8      	it	lt
 80149be:	18e4      	addlt	r4, r4, r3
 80149c0:	f000 fdb5 	bl	801552e <__malloc_lock>
 80149c4:	4a1e      	ldr	r2, [pc, #120]	; (8014a40 <_free_r+0x94>)
 80149c6:	6813      	ldr	r3, [r2, #0]
 80149c8:	4610      	mov	r0, r2
 80149ca:	b933      	cbnz	r3, 80149da <_free_r+0x2e>
 80149cc:	6063      	str	r3, [r4, #4]
 80149ce:	6014      	str	r4, [r2, #0]
 80149d0:	4628      	mov	r0, r5
 80149d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149d6:	f000 bdab 	b.w	8015530 <__malloc_unlock>
 80149da:	42a3      	cmp	r3, r4
 80149dc:	d90b      	bls.n	80149f6 <_free_r+0x4a>
 80149de:	6821      	ldr	r1, [r4, #0]
 80149e0:	1862      	adds	r2, r4, r1
 80149e2:	4293      	cmp	r3, r2
 80149e4:	bf01      	itttt	eq
 80149e6:	681a      	ldreq	r2, [r3, #0]
 80149e8:	685b      	ldreq	r3, [r3, #4]
 80149ea:	1852      	addeq	r2, r2, r1
 80149ec:	6022      	streq	r2, [r4, #0]
 80149ee:	6063      	str	r3, [r4, #4]
 80149f0:	6004      	str	r4, [r0, #0]
 80149f2:	e7ed      	b.n	80149d0 <_free_r+0x24>
 80149f4:	4613      	mov	r3, r2
 80149f6:	685a      	ldr	r2, [r3, #4]
 80149f8:	b10a      	cbz	r2, 80149fe <_free_r+0x52>
 80149fa:	42a2      	cmp	r2, r4
 80149fc:	d9fa      	bls.n	80149f4 <_free_r+0x48>
 80149fe:	6819      	ldr	r1, [r3, #0]
 8014a00:	1858      	adds	r0, r3, r1
 8014a02:	42a0      	cmp	r0, r4
 8014a04:	d10b      	bne.n	8014a1e <_free_r+0x72>
 8014a06:	6820      	ldr	r0, [r4, #0]
 8014a08:	4401      	add	r1, r0
 8014a0a:	1858      	adds	r0, r3, r1
 8014a0c:	4282      	cmp	r2, r0
 8014a0e:	6019      	str	r1, [r3, #0]
 8014a10:	d1de      	bne.n	80149d0 <_free_r+0x24>
 8014a12:	6810      	ldr	r0, [r2, #0]
 8014a14:	6852      	ldr	r2, [r2, #4]
 8014a16:	4401      	add	r1, r0
 8014a18:	6019      	str	r1, [r3, #0]
 8014a1a:	605a      	str	r2, [r3, #4]
 8014a1c:	e7d8      	b.n	80149d0 <_free_r+0x24>
 8014a1e:	d902      	bls.n	8014a26 <_free_r+0x7a>
 8014a20:	230c      	movs	r3, #12
 8014a22:	602b      	str	r3, [r5, #0]
 8014a24:	e7d4      	b.n	80149d0 <_free_r+0x24>
 8014a26:	6820      	ldr	r0, [r4, #0]
 8014a28:	1821      	adds	r1, r4, r0
 8014a2a:	428a      	cmp	r2, r1
 8014a2c:	bf01      	itttt	eq
 8014a2e:	6811      	ldreq	r1, [r2, #0]
 8014a30:	6852      	ldreq	r2, [r2, #4]
 8014a32:	1809      	addeq	r1, r1, r0
 8014a34:	6021      	streq	r1, [r4, #0]
 8014a36:	6062      	str	r2, [r4, #4]
 8014a38:	605c      	str	r4, [r3, #4]
 8014a3a:	e7c9      	b.n	80149d0 <_free_r+0x24>
 8014a3c:	bd38      	pop	{r3, r4, r5, pc}
 8014a3e:	bf00      	nop
 8014a40:	200009a8 	.word	0x200009a8

08014a44 <_malloc_r>:
 8014a44:	b570      	push	{r4, r5, r6, lr}
 8014a46:	1ccd      	adds	r5, r1, #3
 8014a48:	f025 0503 	bic.w	r5, r5, #3
 8014a4c:	3508      	adds	r5, #8
 8014a4e:	2d0c      	cmp	r5, #12
 8014a50:	bf38      	it	cc
 8014a52:	250c      	movcc	r5, #12
 8014a54:	2d00      	cmp	r5, #0
 8014a56:	4606      	mov	r6, r0
 8014a58:	db01      	blt.n	8014a5e <_malloc_r+0x1a>
 8014a5a:	42a9      	cmp	r1, r5
 8014a5c:	d903      	bls.n	8014a66 <_malloc_r+0x22>
 8014a5e:	230c      	movs	r3, #12
 8014a60:	6033      	str	r3, [r6, #0]
 8014a62:	2000      	movs	r0, #0
 8014a64:	bd70      	pop	{r4, r5, r6, pc}
 8014a66:	f000 fd62 	bl	801552e <__malloc_lock>
 8014a6a:	4a21      	ldr	r2, [pc, #132]	; (8014af0 <_malloc_r+0xac>)
 8014a6c:	6814      	ldr	r4, [r2, #0]
 8014a6e:	4621      	mov	r1, r4
 8014a70:	b991      	cbnz	r1, 8014a98 <_malloc_r+0x54>
 8014a72:	4c20      	ldr	r4, [pc, #128]	; (8014af4 <_malloc_r+0xb0>)
 8014a74:	6823      	ldr	r3, [r4, #0]
 8014a76:	b91b      	cbnz	r3, 8014a80 <_malloc_r+0x3c>
 8014a78:	4630      	mov	r0, r6
 8014a7a:	f000 facd 	bl	8015018 <_sbrk_r>
 8014a7e:	6020      	str	r0, [r4, #0]
 8014a80:	4629      	mov	r1, r5
 8014a82:	4630      	mov	r0, r6
 8014a84:	f000 fac8 	bl	8015018 <_sbrk_r>
 8014a88:	1c43      	adds	r3, r0, #1
 8014a8a:	d124      	bne.n	8014ad6 <_malloc_r+0x92>
 8014a8c:	230c      	movs	r3, #12
 8014a8e:	4630      	mov	r0, r6
 8014a90:	6033      	str	r3, [r6, #0]
 8014a92:	f000 fd4d 	bl	8015530 <__malloc_unlock>
 8014a96:	e7e4      	b.n	8014a62 <_malloc_r+0x1e>
 8014a98:	680b      	ldr	r3, [r1, #0]
 8014a9a:	1b5b      	subs	r3, r3, r5
 8014a9c:	d418      	bmi.n	8014ad0 <_malloc_r+0x8c>
 8014a9e:	2b0b      	cmp	r3, #11
 8014aa0:	d90f      	bls.n	8014ac2 <_malloc_r+0x7e>
 8014aa2:	600b      	str	r3, [r1, #0]
 8014aa4:	18cc      	adds	r4, r1, r3
 8014aa6:	50cd      	str	r5, [r1, r3]
 8014aa8:	4630      	mov	r0, r6
 8014aaa:	f000 fd41 	bl	8015530 <__malloc_unlock>
 8014aae:	f104 000b 	add.w	r0, r4, #11
 8014ab2:	1d23      	adds	r3, r4, #4
 8014ab4:	f020 0007 	bic.w	r0, r0, #7
 8014ab8:	1ac3      	subs	r3, r0, r3
 8014aba:	d0d3      	beq.n	8014a64 <_malloc_r+0x20>
 8014abc:	425a      	negs	r2, r3
 8014abe:	50e2      	str	r2, [r4, r3]
 8014ac0:	e7d0      	b.n	8014a64 <_malloc_r+0x20>
 8014ac2:	684b      	ldr	r3, [r1, #4]
 8014ac4:	428c      	cmp	r4, r1
 8014ac6:	bf16      	itet	ne
 8014ac8:	6063      	strne	r3, [r4, #4]
 8014aca:	6013      	streq	r3, [r2, #0]
 8014acc:	460c      	movne	r4, r1
 8014ace:	e7eb      	b.n	8014aa8 <_malloc_r+0x64>
 8014ad0:	460c      	mov	r4, r1
 8014ad2:	6849      	ldr	r1, [r1, #4]
 8014ad4:	e7cc      	b.n	8014a70 <_malloc_r+0x2c>
 8014ad6:	1cc4      	adds	r4, r0, #3
 8014ad8:	f024 0403 	bic.w	r4, r4, #3
 8014adc:	42a0      	cmp	r0, r4
 8014ade:	d005      	beq.n	8014aec <_malloc_r+0xa8>
 8014ae0:	1a21      	subs	r1, r4, r0
 8014ae2:	4630      	mov	r0, r6
 8014ae4:	f000 fa98 	bl	8015018 <_sbrk_r>
 8014ae8:	3001      	adds	r0, #1
 8014aea:	d0cf      	beq.n	8014a8c <_malloc_r+0x48>
 8014aec:	6025      	str	r5, [r4, #0]
 8014aee:	e7db      	b.n	8014aa8 <_malloc_r+0x64>
 8014af0:	200009a8 	.word	0x200009a8
 8014af4:	200009ac 	.word	0x200009ac

08014af8 <__ssputs_r>:
 8014af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014afc:	688e      	ldr	r6, [r1, #8]
 8014afe:	4682      	mov	sl, r0
 8014b00:	429e      	cmp	r6, r3
 8014b02:	460c      	mov	r4, r1
 8014b04:	4690      	mov	r8, r2
 8014b06:	4699      	mov	r9, r3
 8014b08:	d837      	bhi.n	8014b7a <__ssputs_r+0x82>
 8014b0a:	898a      	ldrh	r2, [r1, #12]
 8014b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014b10:	d031      	beq.n	8014b76 <__ssputs_r+0x7e>
 8014b12:	2302      	movs	r3, #2
 8014b14:	6825      	ldr	r5, [r4, #0]
 8014b16:	6909      	ldr	r1, [r1, #16]
 8014b18:	1a6f      	subs	r7, r5, r1
 8014b1a:	6965      	ldr	r5, [r4, #20]
 8014b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b20:	fb95 f5f3 	sdiv	r5, r5, r3
 8014b24:	f109 0301 	add.w	r3, r9, #1
 8014b28:	443b      	add	r3, r7
 8014b2a:	429d      	cmp	r5, r3
 8014b2c:	bf38      	it	cc
 8014b2e:	461d      	movcc	r5, r3
 8014b30:	0553      	lsls	r3, r2, #21
 8014b32:	d530      	bpl.n	8014b96 <__ssputs_r+0x9e>
 8014b34:	4629      	mov	r1, r5
 8014b36:	f7ff ff85 	bl	8014a44 <_malloc_r>
 8014b3a:	4606      	mov	r6, r0
 8014b3c:	b950      	cbnz	r0, 8014b54 <__ssputs_r+0x5c>
 8014b3e:	230c      	movs	r3, #12
 8014b40:	f04f 30ff 	mov.w	r0, #4294967295
 8014b44:	f8ca 3000 	str.w	r3, [sl]
 8014b48:	89a3      	ldrh	r3, [r4, #12]
 8014b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b4e:	81a3      	strh	r3, [r4, #12]
 8014b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b54:	463a      	mov	r2, r7
 8014b56:	6921      	ldr	r1, [r4, #16]
 8014b58:	f7fc fcbe 	bl	80114d8 <memcpy>
 8014b5c:	89a3      	ldrh	r3, [r4, #12]
 8014b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b66:	81a3      	strh	r3, [r4, #12]
 8014b68:	6126      	str	r6, [r4, #16]
 8014b6a:	443e      	add	r6, r7
 8014b6c:	6026      	str	r6, [r4, #0]
 8014b6e:	464e      	mov	r6, r9
 8014b70:	6165      	str	r5, [r4, #20]
 8014b72:	1bed      	subs	r5, r5, r7
 8014b74:	60a5      	str	r5, [r4, #8]
 8014b76:	454e      	cmp	r6, r9
 8014b78:	d900      	bls.n	8014b7c <__ssputs_r+0x84>
 8014b7a:	464e      	mov	r6, r9
 8014b7c:	4632      	mov	r2, r6
 8014b7e:	4641      	mov	r1, r8
 8014b80:	6820      	ldr	r0, [r4, #0]
 8014b82:	f000 fcbb 	bl	80154fc <memmove>
 8014b86:	68a3      	ldr	r3, [r4, #8]
 8014b88:	2000      	movs	r0, #0
 8014b8a:	1b9b      	subs	r3, r3, r6
 8014b8c:	60a3      	str	r3, [r4, #8]
 8014b8e:	6823      	ldr	r3, [r4, #0]
 8014b90:	441e      	add	r6, r3
 8014b92:	6026      	str	r6, [r4, #0]
 8014b94:	e7dc      	b.n	8014b50 <__ssputs_r+0x58>
 8014b96:	462a      	mov	r2, r5
 8014b98:	f000 fccb 	bl	8015532 <_realloc_r>
 8014b9c:	4606      	mov	r6, r0
 8014b9e:	2800      	cmp	r0, #0
 8014ba0:	d1e2      	bne.n	8014b68 <__ssputs_r+0x70>
 8014ba2:	6921      	ldr	r1, [r4, #16]
 8014ba4:	4650      	mov	r0, sl
 8014ba6:	f7ff ff01 	bl	80149ac <_free_r>
 8014baa:	e7c8      	b.n	8014b3e <__ssputs_r+0x46>

08014bac <_svfiprintf_r>:
 8014bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb0:	461d      	mov	r5, r3
 8014bb2:	898b      	ldrh	r3, [r1, #12]
 8014bb4:	b09d      	sub	sp, #116	; 0x74
 8014bb6:	061f      	lsls	r7, r3, #24
 8014bb8:	4680      	mov	r8, r0
 8014bba:	460c      	mov	r4, r1
 8014bbc:	4616      	mov	r6, r2
 8014bbe:	d50f      	bpl.n	8014be0 <_svfiprintf_r+0x34>
 8014bc0:	690b      	ldr	r3, [r1, #16]
 8014bc2:	b96b      	cbnz	r3, 8014be0 <_svfiprintf_r+0x34>
 8014bc4:	2140      	movs	r1, #64	; 0x40
 8014bc6:	f7ff ff3d 	bl	8014a44 <_malloc_r>
 8014bca:	6020      	str	r0, [r4, #0]
 8014bcc:	6120      	str	r0, [r4, #16]
 8014bce:	b928      	cbnz	r0, 8014bdc <_svfiprintf_r+0x30>
 8014bd0:	230c      	movs	r3, #12
 8014bd2:	f8c8 3000 	str.w	r3, [r8]
 8014bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8014bda:	e0c8      	b.n	8014d6e <_svfiprintf_r+0x1c2>
 8014bdc:	2340      	movs	r3, #64	; 0x40
 8014bde:	6163      	str	r3, [r4, #20]
 8014be0:	2300      	movs	r3, #0
 8014be2:	9309      	str	r3, [sp, #36]	; 0x24
 8014be4:	2320      	movs	r3, #32
 8014be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014bea:	2330      	movs	r3, #48	; 0x30
 8014bec:	f04f 0b01 	mov.w	fp, #1
 8014bf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014bf4:	9503      	str	r5, [sp, #12]
 8014bf6:	4637      	mov	r7, r6
 8014bf8:	463d      	mov	r5, r7
 8014bfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014bfe:	b10b      	cbz	r3, 8014c04 <_svfiprintf_r+0x58>
 8014c00:	2b25      	cmp	r3, #37	; 0x25
 8014c02:	d13e      	bne.n	8014c82 <_svfiprintf_r+0xd6>
 8014c04:	ebb7 0a06 	subs.w	sl, r7, r6
 8014c08:	d00b      	beq.n	8014c22 <_svfiprintf_r+0x76>
 8014c0a:	4653      	mov	r3, sl
 8014c0c:	4632      	mov	r2, r6
 8014c0e:	4621      	mov	r1, r4
 8014c10:	4640      	mov	r0, r8
 8014c12:	f7ff ff71 	bl	8014af8 <__ssputs_r>
 8014c16:	3001      	adds	r0, #1
 8014c18:	f000 80a4 	beq.w	8014d64 <_svfiprintf_r+0x1b8>
 8014c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c1e:	4453      	add	r3, sl
 8014c20:	9309      	str	r3, [sp, #36]	; 0x24
 8014c22:	783b      	ldrb	r3, [r7, #0]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	f000 809d 	beq.w	8014d64 <_svfiprintf_r+0x1b8>
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8014c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c34:	9304      	str	r3, [sp, #16]
 8014c36:	9307      	str	r3, [sp, #28]
 8014c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8014c3e:	462f      	mov	r7, r5
 8014c40:	2205      	movs	r2, #5
 8014c42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014c46:	4850      	ldr	r0, [pc, #320]	; (8014d88 <_svfiprintf_r+0x1dc>)
 8014c48:	f7ff fa9c 	bl	8014184 <memchr>
 8014c4c:	9b04      	ldr	r3, [sp, #16]
 8014c4e:	b9d0      	cbnz	r0, 8014c86 <_svfiprintf_r+0xda>
 8014c50:	06d9      	lsls	r1, r3, #27
 8014c52:	bf44      	itt	mi
 8014c54:	2220      	movmi	r2, #32
 8014c56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014c5a:	071a      	lsls	r2, r3, #28
 8014c5c:	bf44      	itt	mi
 8014c5e:	222b      	movmi	r2, #43	; 0x2b
 8014c60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014c64:	782a      	ldrb	r2, [r5, #0]
 8014c66:	2a2a      	cmp	r2, #42	; 0x2a
 8014c68:	d015      	beq.n	8014c96 <_svfiprintf_r+0xea>
 8014c6a:	462f      	mov	r7, r5
 8014c6c:	2000      	movs	r0, #0
 8014c6e:	250a      	movs	r5, #10
 8014c70:	9a07      	ldr	r2, [sp, #28]
 8014c72:	4639      	mov	r1, r7
 8014c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c78:	3b30      	subs	r3, #48	; 0x30
 8014c7a:	2b09      	cmp	r3, #9
 8014c7c:	d94d      	bls.n	8014d1a <_svfiprintf_r+0x16e>
 8014c7e:	b1b8      	cbz	r0, 8014cb0 <_svfiprintf_r+0x104>
 8014c80:	e00f      	b.n	8014ca2 <_svfiprintf_r+0xf6>
 8014c82:	462f      	mov	r7, r5
 8014c84:	e7b8      	b.n	8014bf8 <_svfiprintf_r+0x4c>
 8014c86:	4a40      	ldr	r2, [pc, #256]	; (8014d88 <_svfiprintf_r+0x1dc>)
 8014c88:	463d      	mov	r5, r7
 8014c8a:	1a80      	subs	r0, r0, r2
 8014c8c:	fa0b f000 	lsl.w	r0, fp, r0
 8014c90:	4318      	orrs	r0, r3
 8014c92:	9004      	str	r0, [sp, #16]
 8014c94:	e7d3      	b.n	8014c3e <_svfiprintf_r+0x92>
 8014c96:	9a03      	ldr	r2, [sp, #12]
 8014c98:	1d11      	adds	r1, r2, #4
 8014c9a:	6812      	ldr	r2, [r2, #0]
 8014c9c:	9103      	str	r1, [sp, #12]
 8014c9e:	2a00      	cmp	r2, #0
 8014ca0:	db01      	blt.n	8014ca6 <_svfiprintf_r+0xfa>
 8014ca2:	9207      	str	r2, [sp, #28]
 8014ca4:	e004      	b.n	8014cb0 <_svfiprintf_r+0x104>
 8014ca6:	4252      	negs	r2, r2
 8014ca8:	f043 0302 	orr.w	r3, r3, #2
 8014cac:	9207      	str	r2, [sp, #28]
 8014cae:	9304      	str	r3, [sp, #16]
 8014cb0:	783b      	ldrb	r3, [r7, #0]
 8014cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8014cb4:	d10c      	bne.n	8014cd0 <_svfiprintf_r+0x124>
 8014cb6:	787b      	ldrb	r3, [r7, #1]
 8014cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8014cba:	d133      	bne.n	8014d24 <_svfiprintf_r+0x178>
 8014cbc:	9b03      	ldr	r3, [sp, #12]
 8014cbe:	3702      	adds	r7, #2
 8014cc0:	1d1a      	adds	r2, r3, #4
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	9203      	str	r2, [sp, #12]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	bfb8      	it	lt
 8014cca:	f04f 33ff 	movlt.w	r3, #4294967295
 8014cce:	9305      	str	r3, [sp, #20]
 8014cd0:	4d2e      	ldr	r5, [pc, #184]	; (8014d8c <_svfiprintf_r+0x1e0>)
 8014cd2:	2203      	movs	r2, #3
 8014cd4:	7839      	ldrb	r1, [r7, #0]
 8014cd6:	4628      	mov	r0, r5
 8014cd8:	f7ff fa54 	bl	8014184 <memchr>
 8014cdc:	b138      	cbz	r0, 8014cee <_svfiprintf_r+0x142>
 8014cde:	2340      	movs	r3, #64	; 0x40
 8014ce0:	1b40      	subs	r0, r0, r5
 8014ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8014ce6:	9b04      	ldr	r3, [sp, #16]
 8014ce8:	3701      	adds	r7, #1
 8014cea:	4303      	orrs	r3, r0
 8014cec:	9304      	str	r3, [sp, #16]
 8014cee:	7839      	ldrb	r1, [r7, #0]
 8014cf0:	2206      	movs	r2, #6
 8014cf2:	4827      	ldr	r0, [pc, #156]	; (8014d90 <_svfiprintf_r+0x1e4>)
 8014cf4:	1c7e      	adds	r6, r7, #1
 8014cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014cfa:	f7ff fa43 	bl	8014184 <memchr>
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	d038      	beq.n	8014d74 <_svfiprintf_r+0x1c8>
 8014d02:	4b24      	ldr	r3, [pc, #144]	; (8014d94 <_svfiprintf_r+0x1e8>)
 8014d04:	bb13      	cbnz	r3, 8014d4c <_svfiprintf_r+0x1a0>
 8014d06:	9b03      	ldr	r3, [sp, #12]
 8014d08:	3307      	adds	r3, #7
 8014d0a:	f023 0307 	bic.w	r3, r3, #7
 8014d0e:	3308      	adds	r3, #8
 8014d10:	9303      	str	r3, [sp, #12]
 8014d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d14:	444b      	add	r3, r9
 8014d16:	9309      	str	r3, [sp, #36]	; 0x24
 8014d18:	e76d      	b.n	8014bf6 <_svfiprintf_r+0x4a>
 8014d1a:	fb05 3202 	mla	r2, r5, r2, r3
 8014d1e:	2001      	movs	r0, #1
 8014d20:	460f      	mov	r7, r1
 8014d22:	e7a6      	b.n	8014c72 <_svfiprintf_r+0xc6>
 8014d24:	2300      	movs	r3, #0
 8014d26:	250a      	movs	r5, #10
 8014d28:	4619      	mov	r1, r3
 8014d2a:	3701      	adds	r7, #1
 8014d2c:	9305      	str	r3, [sp, #20]
 8014d2e:	4638      	mov	r0, r7
 8014d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d34:	3a30      	subs	r2, #48	; 0x30
 8014d36:	2a09      	cmp	r2, #9
 8014d38:	d903      	bls.n	8014d42 <_svfiprintf_r+0x196>
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d0c8      	beq.n	8014cd0 <_svfiprintf_r+0x124>
 8014d3e:	9105      	str	r1, [sp, #20]
 8014d40:	e7c6      	b.n	8014cd0 <_svfiprintf_r+0x124>
 8014d42:	fb05 2101 	mla	r1, r5, r1, r2
 8014d46:	2301      	movs	r3, #1
 8014d48:	4607      	mov	r7, r0
 8014d4a:	e7f0      	b.n	8014d2e <_svfiprintf_r+0x182>
 8014d4c:	ab03      	add	r3, sp, #12
 8014d4e:	9300      	str	r3, [sp, #0]
 8014d50:	4622      	mov	r2, r4
 8014d52:	4b11      	ldr	r3, [pc, #68]	; (8014d98 <_svfiprintf_r+0x1ec>)
 8014d54:	a904      	add	r1, sp, #16
 8014d56:	4640      	mov	r0, r8
 8014d58:	f7fc fc62 	bl	8011620 <_printf_float>
 8014d5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014d60:	4681      	mov	r9, r0
 8014d62:	d1d6      	bne.n	8014d12 <_svfiprintf_r+0x166>
 8014d64:	89a3      	ldrh	r3, [r4, #12]
 8014d66:	065b      	lsls	r3, r3, #25
 8014d68:	f53f af35 	bmi.w	8014bd6 <_svfiprintf_r+0x2a>
 8014d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d6e:	b01d      	add	sp, #116	; 0x74
 8014d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d74:	ab03      	add	r3, sp, #12
 8014d76:	9300      	str	r3, [sp, #0]
 8014d78:	4622      	mov	r2, r4
 8014d7a:	4b07      	ldr	r3, [pc, #28]	; (8014d98 <_svfiprintf_r+0x1ec>)
 8014d7c:	a904      	add	r1, sp, #16
 8014d7e:	4640      	mov	r0, r8
 8014d80:	f7fc fefa 	bl	8011b78 <_printf_i>
 8014d84:	e7ea      	b.n	8014d5c <_svfiprintf_r+0x1b0>
 8014d86:	bf00      	nop
 8014d88:	0801a2ec 	.word	0x0801a2ec
 8014d8c:	0801a2f2 	.word	0x0801a2f2
 8014d90:	0801a2f6 	.word	0x0801a2f6
 8014d94:	08011621 	.word	0x08011621
 8014d98:	08014af9 	.word	0x08014af9

08014d9c <__sfputc_r>:
 8014d9c:	6893      	ldr	r3, [r2, #8]
 8014d9e:	b410      	push	{r4}
 8014da0:	3b01      	subs	r3, #1
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	6093      	str	r3, [r2, #8]
 8014da6:	da07      	bge.n	8014db8 <__sfputc_r+0x1c>
 8014da8:	6994      	ldr	r4, [r2, #24]
 8014daa:	42a3      	cmp	r3, r4
 8014dac:	db01      	blt.n	8014db2 <__sfputc_r+0x16>
 8014dae:	290a      	cmp	r1, #10
 8014db0:	d102      	bne.n	8014db8 <__sfputc_r+0x1c>
 8014db2:	bc10      	pop	{r4}
 8014db4:	f000 b99a 	b.w	80150ec <__swbuf_r>
 8014db8:	6813      	ldr	r3, [r2, #0]
 8014dba:	1c58      	adds	r0, r3, #1
 8014dbc:	6010      	str	r0, [r2, #0]
 8014dbe:	7019      	strb	r1, [r3, #0]
 8014dc0:	4608      	mov	r0, r1
 8014dc2:	bc10      	pop	{r4}
 8014dc4:	4770      	bx	lr

08014dc6 <__sfputs_r>:
 8014dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dc8:	4606      	mov	r6, r0
 8014dca:	460f      	mov	r7, r1
 8014dcc:	4614      	mov	r4, r2
 8014dce:	18d5      	adds	r5, r2, r3
 8014dd0:	42ac      	cmp	r4, r5
 8014dd2:	d101      	bne.n	8014dd8 <__sfputs_r+0x12>
 8014dd4:	2000      	movs	r0, #0
 8014dd6:	e007      	b.n	8014de8 <__sfputs_r+0x22>
 8014dd8:	463a      	mov	r2, r7
 8014dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dde:	4630      	mov	r0, r6
 8014de0:	f7ff ffdc 	bl	8014d9c <__sfputc_r>
 8014de4:	1c43      	adds	r3, r0, #1
 8014de6:	d1f3      	bne.n	8014dd0 <__sfputs_r+0xa>
 8014de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014dec <_vfiprintf_r>:
 8014dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df0:	460c      	mov	r4, r1
 8014df2:	b09d      	sub	sp, #116	; 0x74
 8014df4:	4617      	mov	r7, r2
 8014df6:	461d      	mov	r5, r3
 8014df8:	4606      	mov	r6, r0
 8014dfa:	b118      	cbz	r0, 8014e04 <_vfiprintf_r+0x18>
 8014dfc:	6983      	ldr	r3, [r0, #24]
 8014dfe:	b90b      	cbnz	r3, 8014e04 <_vfiprintf_r+0x18>
 8014e00:	f7fe fdf6 	bl	80139f0 <__sinit>
 8014e04:	4b7c      	ldr	r3, [pc, #496]	; (8014ff8 <_vfiprintf_r+0x20c>)
 8014e06:	429c      	cmp	r4, r3
 8014e08:	d158      	bne.n	8014ebc <_vfiprintf_r+0xd0>
 8014e0a:	6874      	ldr	r4, [r6, #4]
 8014e0c:	89a3      	ldrh	r3, [r4, #12]
 8014e0e:	0718      	lsls	r0, r3, #28
 8014e10:	d55e      	bpl.n	8014ed0 <_vfiprintf_r+0xe4>
 8014e12:	6923      	ldr	r3, [r4, #16]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d05b      	beq.n	8014ed0 <_vfiprintf_r+0xe4>
 8014e18:	2300      	movs	r3, #0
 8014e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8014e1c:	2320      	movs	r3, #32
 8014e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e22:	2330      	movs	r3, #48	; 0x30
 8014e24:	f04f 0b01 	mov.w	fp, #1
 8014e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e2c:	9503      	str	r5, [sp, #12]
 8014e2e:	46b8      	mov	r8, r7
 8014e30:	4645      	mov	r5, r8
 8014e32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014e36:	b10b      	cbz	r3, 8014e3c <_vfiprintf_r+0x50>
 8014e38:	2b25      	cmp	r3, #37	; 0x25
 8014e3a:	d154      	bne.n	8014ee6 <_vfiprintf_r+0xfa>
 8014e3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8014e40:	d00b      	beq.n	8014e5a <_vfiprintf_r+0x6e>
 8014e42:	4653      	mov	r3, sl
 8014e44:	463a      	mov	r2, r7
 8014e46:	4621      	mov	r1, r4
 8014e48:	4630      	mov	r0, r6
 8014e4a:	f7ff ffbc 	bl	8014dc6 <__sfputs_r>
 8014e4e:	3001      	adds	r0, #1
 8014e50:	f000 80c2 	beq.w	8014fd8 <_vfiprintf_r+0x1ec>
 8014e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e56:	4453      	add	r3, sl
 8014e58:	9309      	str	r3, [sp, #36]	; 0x24
 8014e5a:	f898 3000 	ldrb.w	r3, [r8]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	f000 80ba 	beq.w	8014fd8 <_vfiprintf_r+0x1ec>
 8014e64:	2300      	movs	r3, #0
 8014e66:	f04f 32ff 	mov.w	r2, #4294967295
 8014e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e6e:	9304      	str	r3, [sp, #16]
 8014e70:	9307      	str	r3, [sp, #28]
 8014e72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e76:	931a      	str	r3, [sp, #104]	; 0x68
 8014e78:	46a8      	mov	r8, r5
 8014e7a:	2205      	movs	r2, #5
 8014e7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014e80:	485e      	ldr	r0, [pc, #376]	; (8014ffc <_vfiprintf_r+0x210>)
 8014e82:	f7ff f97f 	bl	8014184 <memchr>
 8014e86:	9b04      	ldr	r3, [sp, #16]
 8014e88:	bb78      	cbnz	r0, 8014eea <_vfiprintf_r+0xfe>
 8014e8a:	06d9      	lsls	r1, r3, #27
 8014e8c:	bf44      	itt	mi
 8014e8e:	2220      	movmi	r2, #32
 8014e90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014e94:	071a      	lsls	r2, r3, #28
 8014e96:	bf44      	itt	mi
 8014e98:	222b      	movmi	r2, #43	; 0x2b
 8014e9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014e9e:	782a      	ldrb	r2, [r5, #0]
 8014ea0:	2a2a      	cmp	r2, #42	; 0x2a
 8014ea2:	d02a      	beq.n	8014efa <_vfiprintf_r+0x10e>
 8014ea4:	46a8      	mov	r8, r5
 8014ea6:	2000      	movs	r0, #0
 8014ea8:	250a      	movs	r5, #10
 8014eaa:	9a07      	ldr	r2, [sp, #28]
 8014eac:	4641      	mov	r1, r8
 8014eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014eb2:	3b30      	subs	r3, #48	; 0x30
 8014eb4:	2b09      	cmp	r3, #9
 8014eb6:	d969      	bls.n	8014f8c <_vfiprintf_r+0x1a0>
 8014eb8:	b360      	cbz	r0, 8014f14 <_vfiprintf_r+0x128>
 8014eba:	e024      	b.n	8014f06 <_vfiprintf_r+0x11a>
 8014ebc:	4b50      	ldr	r3, [pc, #320]	; (8015000 <_vfiprintf_r+0x214>)
 8014ebe:	429c      	cmp	r4, r3
 8014ec0:	d101      	bne.n	8014ec6 <_vfiprintf_r+0xda>
 8014ec2:	68b4      	ldr	r4, [r6, #8]
 8014ec4:	e7a2      	b.n	8014e0c <_vfiprintf_r+0x20>
 8014ec6:	4b4f      	ldr	r3, [pc, #316]	; (8015004 <_vfiprintf_r+0x218>)
 8014ec8:	429c      	cmp	r4, r3
 8014eca:	bf08      	it	eq
 8014ecc:	68f4      	ldreq	r4, [r6, #12]
 8014ece:	e79d      	b.n	8014e0c <_vfiprintf_r+0x20>
 8014ed0:	4621      	mov	r1, r4
 8014ed2:	4630      	mov	r0, r6
 8014ed4:	f000 f96e 	bl	80151b4 <__swsetup_r>
 8014ed8:	2800      	cmp	r0, #0
 8014eda:	d09d      	beq.n	8014e18 <_vfiprintf_r+0x2c>
 8014edc:	f04f 30ff 	mov.w	r0, #4294967295
 8014ee0:	b01d      	add	sp, #116	; 0x74
 8014ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ee6:	46a8      	mov	r8, r5
 8014ee8:	e7a2      	b.n	8014e30 <_vfiprintf_r+0x44>
 8014eea:	4a44      	ldr	r2, [pc, #272]	; (8014ffc <_vfiprintf_r+0x210>)
 8014eec:	4645      	mov	r5, r8
 8014eee:	1a80      	subs	r0, r0, r2
 8014ef0:	fa0b f000 	lsl.w	r0, fp, r0
 8014ef4:	4318      	orrs	r0, r3
 8014ef6:	9004      	str	r0, [sp, #16]
 8014ef8:	e7be      	b.n	8014e78 <_vfiprintf_r+0x8c>
 8014efa:	9a03      	ldr	r2, [sp, #12]
 8014efc:	1d11      	adds	r1, r2, #4
 8014efe:	6812      	ldr	r2, [r2, #0]
 8014f00:	9103      	str	r1, [sp, #12]
 8014f02:	2a00      	cmp	r2, #0
 8014f04:	db01      	blt.n	8014f0a <_vfiprintf_r+0x11e>
 8014f06:	9207      	str	r2, [sp, #28]
 8014f08:	e004      	b.n	8014f14 <_vfiprintf_r+0x128>
 8014f0a:	4252      	negs	r2, r2
 8014f0c:	f043 0302 	orr.w	r3, r3, #2
 8014f10:	9207      	str	r2, [sp, #28]
 8014f12:	9304      	str	r3, [sp, #16]
 8014f14:	f898 3000 	ldrb.w	r3, [r8]
 8014f18:	2b2e      	cmp	r3, #46	; 0x2e
 8014f1a:	d10e      	bne.n	8014f3a <_vfiprintf_r+0x14e>
 8014f1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014f20:	2b2a      	cmp	r3, #42	; 0x2a
 8014f22:	d138      	bne.n	8014f96 <_vfiprintf_r+0x1aa>
 8014f24:	9b03      	ldr	r3, [sp, #12]
 8014f26:	f108 0802 	add.w	r8, r8, #2
 8014f2a:	1d1a      	adds	r2, r3, #4
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	9203      	str	r2, [sp, #12]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	bfb8      	it	lt
 8014f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f38:	9305      	str	r3, [sp, #20]
 8014f3a:	4d33      	ldr	r5, [pc, #204]	; (8015008 <_vfiprintf_r+0x21c>)
 8014f3c:	2203      	movs	r2, #3
 8014f3e:	f898 1000 	ldrb.w	r1, [r8]
 8014f42:	4628      	mov	r0, r5
 8014f44:	f7ff f91e 	bl	8014184 <memchr>
 8014f48:	b140      	cbz	r0, 8014f5c <_vfiprintf_r+0x170>
 8014f4a:	2340      	movs	r3, #64	; 0x40
 8014f4c:	1b40      	subs	r0, r0, r5
 8014f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8014f52:	9b04      	ldr	r3, [sp, #16]
 8014f54:	f108 0801 	add.w	r8, r8, #1
 8014f58:	4303      	orrs	r3, r0
 8014f5a:	9304      	str	r3, [sp, #16]
 8014f5c:	f898 1000 	ldrb.w	r1, [r8]
 8014f60:	2206      	movs	r2, #6
 8014f62:	482a      	ldr	r0, [pc, #168]	; (801500c <_vfiprintf_r+0x220>)
 8014f64:	f108 0701 	add.w	r7, r8, #1
 8014f68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f6c:	f7ff f90a 	bl	8014184 <memchr>
 8014f70:	2800      	cmp	r0, #0
 8014f72:	d037      	beq.n	8014fe4 <_vfiprintf_r+0x1f8>
 8014f74:	4b26      	ldr	r3, [pc, #152]	; (8015010 <_vfiprintf_r+0x224>)
 8014f76:	bb1b      	cbnz	r3, 8014fc0 <_vfiprintf_r+0x1d4>
 8014f78:	9b03      	ldr	r3, [sp, #12]
 8014f7a:	3307      	adds	r3, #7
 8014f7c:	f023 0307 	bic.w	r3, r3, #7
 8014f80:	3308      	adds	r3, #8
 8014f82:	9303      	str	r3, [sp, #12]
 8014f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f86:	444b      	add	r3, r9
 8014f88:	9309      	str	r3, [sp, #36]	; 0x24
 8014f8a:	e750      	b.n	8014e2e <_vfiprintf_r+0x42>
 8014f8c:	fb05 3202 	mla	r2, r5, r2, r3
 8014f90:	2001      	movs	r0, #1
 8014f92:	4688      	mov	r8, r1
 8014f94:	e78a      	b.n	8014eac <_vfiprintf_r+0xc0>
 8014f96:	2300      	movs	r3, #0
 8014f98:	250a      	movs	r5, #10
 8014f9a:	4619      	mov	r1, r3
 8014f9c:	f108 0801 	add.w	r8, r8, #1
 8014fa0:	9305      	str	r3, [sp, #20]
 8014fa2:	4640      	mov	r0, r8
 8014fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fa8:	3a30      	subs	r2, #48	; 0x30
 8014faa:	2a09      	cmp	r2, #9
 8014fac:	d903      	bls.n	8014fb6 <_vfiprintf_r+0x1ca>
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d0c3      	beq.n	8014f3a <_vfiprintf_r+0x14e>
 8014fb2:	9105      	str	r1, [sp, #20]
 8014fb4:	e7c1      	b.n	8014f3a <_vfiprintf_r+0x14e>
 8014fb6:	fb05 2101 	mla	r1, r5, r1, r2
 8014fba:	2301      	movs	r3, #1
 8014fbc:	4680      	mov	r8, r0
 8014fbe:	e7f0      	b.n	8014fa2 <_vfiprintf_r+0x1b6>
 8014fc0:	ab03      	add	r3, sp, #12
 8014fc2:	9300      	str	r3, [sp, #0]
 8014fc4:	4622      	mov	r2, r4
 8014fc6:	4b13      	ldr	r3, [pc, #76]	; (8015014 <_vfiprintf_r+0x228>)
 8014fc8:	a904      	add	r1, sp, #16
 8014fca:	4630      	mov	r0, r6
 8014fcc:	f7fc fb28 	bl	8011620 <_printf_float>
 8014fd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014fd4:	4681      	mov	r9, r0
 8014fd6:	d1d5      	bne.n	8014f84 <_vfiprintf_r+0x198>
 8014fd8:	89a3      	ldrh	r3, [r4, #12]
 8014fda:	065b      	lsls	r3, r3, #25
 8014fdc:	f53f af7e 	bmi.w	8014edc <_vfiprintf_r+0xf0>
 8014fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fe2:	e77d      	b.n	8014ee0 <_vfiprintf_r+0xf4>
 8014fe4:	ab03      	add	r3, sp, #12
 8014fe6:	9300      	str	r3, [sp, #0]
 8014fe8:	4622      	mov	r2, r4
 8014fea:	4b0a      	ldr	r3, [pc, #40]	; (8015014 <_vfiprintf_r+0x228>)
 8014fec:	a904      	add	r1, sp, #16
 8014fee:	4630      	mov	r0, r6
 8014ff0:	f7fc fdc2 	bl	8011b78 <_printf_i>
 8014ff4:	e7ec      	b.n	8014fd0 <_vfiprintf_r+0x1e4>
 8014ff6:	bf00      	nop
 8014ff8:	0801a1b0 	.word	0x0801a1b0
 8014ffc:	0801a2ec 	.word	0x0801a2ec
 8015000:	0801a1d0 	.word	0x0801a1d0
 8015004:	0801a190 	.word	0x0801a190
 8015008:	0801a2f2 	.word	0x0801a2f2
 801500c:	0801a2f6 	.word	0x0801a2f6
 8015010:	08011621 	.word	0x08011621
 8015014:	08014dc7 	.word	0x08014dc7

08015018 <_sbrk_r>:
 8015018:	b538      	push	{r3, r4, r5, lr}
 801501a:	2300      	movs	r3, #0
 801501c:	4c05      	ldr	r4, [pc, #20]	; (8015034 <_sbrk_r+0x1c>)
 801501e:	4605      	mov	r5, r0
 8015020:	4608      	mov	r0, r1
 8015022:	6023      	str	r3, [r4, #0]
 8015024:	f7ec fbec 	bl	8001800 <_sbrk>
 8015028:	1c43      	adds	r3, r0, #1
 801502a:	d102      	bne.n	8015032 <_sbrk_r+0x1a>
 801502c:	6823      	ldr	r3, [r4, #0]
 801502e:	b103      	cbz	r3, 8015032 <_sbrk_r+0x1a>
 8015030:	602b      	str	r3, [r5, #0]
 8015032:	bd38      	pop	{r3, r4, r5, pc}
 8015034:	2000157c 	.word	0x2000157c

08015038 <nanf>:
 8015038:	4800      	ldr	r0, [pc, #0]	; (801503c <nanf+0x4>)
 801503a:	4770      	bx	lr
 801503c:	7fc00000 	.word	0x7fc00000

08015040 <__sread>:
 8015040:	b510      	push	{r4, lr}
 8015042:	460c      	mov	r4, r1
 8015044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015048:	f000 fa9a 	bl	8015580 <_read_r>
 801504c:	2800      	cmp	r0, #0
 801504e:	bfab      	itete	ge
 8015050:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015052:	89a3      	ldrhlt	r3, [r4, #12]
 8015054:	181b      	addge	r3, r3, r0
 8015056:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801505a:	bfac      	ite	ge
 801505c:	6563      	strge	r3, [r4, #84]	; 0x54
 801505e:	81a3      	strhlt	r3, [r4, #12]
 8015060:	bd10      	pop	{r4, pc}

08015062 <__swrite>:
 8015062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015066:	461f      	mov	r7, r3
 8015068:	898b      	ldrh	r3, [r1, #12]
 801506a:	4605      	mov	r5, r0
 801506c:	05db      	lsls	r3, r3, #23
 801506e:	460c      	mov	r4, r1
 8015070:	4616      	mov	r6, r2
 8015072:	d505      	bpl.n	8015080 <__swrite+0x1e>
 8015074:	2302      	movs	r3, #2
 8015076:	2200      	movs	r2, #0
 8015078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801507c:	f000 f9c8 	bl	8015410 <_lseek_r>
 8015080:	89a3      	ldrh	r3, [r4, #12]
 8015082:	4632      	mov	r2, r6
 8015084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015088:	81a3      	strh	r3, [r4, #12]
 801508a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801508e:	463b      	mov	r3, r7
 8015090:	4628      	mov	r0, r5
 8015092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015096:	f000 b87b 	b.w	8015190 <_write_r>

0801509a <__sseek>:
 801509a:	b510      	push	{r4, lr}
 801509c:	460c      	mov	r4, r1
 801509e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150a2:	f000 f9b5 	bl	8015410 <_lseek_r>
 80150a6:	1c43      	adds	r3, r0, #1
 80150a8:	89a3      	ldrh	r3, [r4, #12]
 80150aa:	bf15      	itete	ne
 80150ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80150ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80150b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80150b6:	81a3      	strheq	r3, [r4, #12]
 80150b8:	bf18      	it	ne
 80150ba:	81a3      	strhne	r3, [r4, #12]
 80150bc:	bd10      	pop	{r4, pc}

080150be <__sclose>:
 80150be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150c2:	f000 b8e5 	b.w	8015290 <_close_r>

080150c6 <strncmp>:
 80150c6:	b510      	push	{r4, lr}
 80150c8:	b16a      	cbz	r2, 80150e6 <strncmp+0x20>
 80150ca:	3901      	subs	r1, #1
 80150cc:	1884      	adds	r4, r0, r2
 80150ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80150d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80150d6:	4293      	cmp	r3, r2
 80150d8:	d103      	bne.n	80150e2 <strncmp+0x1c>
 80150da:	42a0      	cmp	r0, r4
 80150dc:	d001      	beq.n	80150e2 <strncmp+0x1c>
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d1f5      	bne.n	80150ce <strncmp+0x8>
 80150e2:	1a98      	subs	r0, r3, r2
 80150e4:	bd10      	pop	{r4, pc}
 80150e6:	4610      	mov	r0, r2
 80150e8:	e7fc      	b.n	80150e4 <strncmp+0x1e>
	...

080150ec <__swbuf_r>:
 80150ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150ee:	460e      	mov	r6, r1
 80150f0:	4614      	mov	r4, r2
 80150f2:	4605      	mov	r5, r0
 80150f4:	b118      	cbz	r0, 80150fe <__swbuf_r+0x12>
 80150f6:	6983      	ldr	r3, [r0, #24]
 80150f8:	b90b      	cbnz	r3, 80150fe <__swbuf_r+0x12>
 80150fa:	f7fe fc79 	bl	80139f0 <__sinit>
 80150fe:	4b21      	ldr	r3, [pc, #132]	; (8015184 <__swbuf_r+0x98>)
 8015100:	429c      	cmp	r4, r3
 8015102:	d12a      	bne.n	801515a <__swbuf_r+0x6e>
 8015104:	686c      	ldr	r4, [r5, #4]
 8015106:	69a3      	ldr	r3, [r4, #24]
 8015108:	60a3      	str	r3, [r4, #8]
 801510a:	89a3      	ldrh	r3, [r4, #12]
 801510c:	071a      	lsls	r2, r3, #28
 801510e:	d52e      	bpl.n	801516e <__swbuf_r+0x82>
 8015110:	6923      	ldr	r3, [r4, #16]
 8015112:	b363      	cbz	r3, 801516e <__swbuf_r+0x82>
 8015114:	6923      	ldr	r3, [r4, #16]
 8015116:	6820      	ldr	r0, [r4, #0]
 8015118:	b2f6      	uxtb	r6, r6
 801511a:	1ac0      	subs	r0, r0, r3
 801511c:	6963      	ldr	r3, [r4, #20]
 801511e:	4637      	mov	r7, r6
 8015120:	4283      	cmp	r3, r0
 8015122:	dc04      	bgt.n	801512e <__swbuf_r+0x42>
 8015124:	4621      	mov	r1, r4
 8015126:	4628      	mov	r0, r5
 8015128:	f000 f948 	bl	80153bc <_fflush_r>
 801512c:	bb28      	cbnz	r0, 801517a <__swbuf_r+0x8e>
 801512e:	68a3      	ldr	r3, [r4, #8]
 8015130:	3001      	adds	r0, #1
 8015132:	3b01      	subs	r3, #1
 8015134:	60a3      	str	r3, [r4, #8]
 8015136:	6823      	ldr	r3, [r4, #0]
 8015138:	1c5a      	adds	r2, r3, #1
 801513a:	6022      	str	r2, [r4, #0]
 801513c:	701e      	strb	r6, [r3, #0]
 801513e:	6963      	ldr	r3, [r4, #20]
 8015140:	4283      	cmp	r3, r0
 8015142:	d004      	beq.n	801514e <__swbuf_r+0x62>
 8015144:	89a3      	ldrh	r3, [r4, #12]
 8015146:	07db      	lsls	r3, r3, #31
 8015148:	d519      	bpl.n	801517e <__swbuf_r+0x92>
 801514a:	2e0a      	cmp	r6, #10
 801514c:	d117      	bne.n	801517e <__swbuf_r+0x92>
 801514e:	4621      	mov	r1, r4
 8015150:	4628      	mov	r0, r5
 8015152:	f000 f933 	bl	80153bc <_fflush_r>
 8015156:	b190      	cbz	r0, 801517e <__swbuf_r+0x92>
 8015158:	e00f      	b.n	801517a <__swbuf_r+0x8e>
 801515a:	4b0b      	ldr	r3, [pc, #44]	; (8015188 <__swbuf_r+0x9c>)
 801515c:	429c      	cmp	r4, r3
 801515e:	d101      	bne.n	8015164 <__swbuf_r+0x78>
 8015160:	68ac      	ldr	r4, [r5, #8]
 8015162:	e7d0      	b.n	8015106 <__swbuf_r+0x1a>
 8015164:	4b09      	ldr	r3, [pc, #36]	; (801518c <__swbuf_r+0xa0>)
 8015166:	429c      	cmp	r4, r3
 8015168:	bf08      	it	eq
 801516a:	68ec      	ldreq	r4, [r5, #12]
 801516c:	e7cb      	b.n	8015106 <__swbuf_r+0x1a>
 801516e:	4621      	mov	r1, r4
 8015170:	4628      	mov	r0, r5
 8015172:	f000 f81f 	bl	80151b4 <__swsetup_r>
 8015176:	2800      	cmp	r0, #0
 8015178:	d0cc      	beq.n	8015114 <__swbuf_r+0x28>
 801517a:	f04f 37ff 	mov.w	r7, #4294967295
 801517e:	4638      	mov	r0, r7
 8015180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015182:	bf00      	nop
 8015184:	0801a1b0 	.word	0x0801a1b0
 8015188:	0801a1d0 	.word	0x0801a1d0
 801518c:	0801a190 	.word	0x0801a190

08015190 <_write_r>:
 8015190:	b538      	push	{r3, r4, r5, lr}
 8015192:	4605      	mov	r5, r0
 8015194:	4608      	mov	r0, r1
 8015196:	4611      	mov	r1, r2
 8015198:	2200      	movs	r2, #0
 801519a:	4c05      	ldr	r4, [pc, #20]	; (80151b0 <_write_r+0x20>)
 801519c:	6022      	str	r2, [r4, #0]
 801519e:	461a      	mov	r2, r3
 80151a0:	f7ec fae1 	bl	8001766 <_write>
 80151a4:	1c43      	adds	r3, r0, #1
 80151a6:	d102      	bne.n	80151ae <_write_r+0x1e>
 80151a8:	6823      	ldr	r3, [r4, #0]
 80151aa:	b103      	cbz	r3, 80151ae <_write_r+0x1e>
 80151ac:	602b      	str	r3, [r5, #0]
 80151ae:	bd38      	pop	{r3, r4, r5, pc}
 80151b0:	2000157c 	.word	0x2000157c

080151b4 <__swsetup_r>:
 80151b4:	4b32      	ldr	r3, [pc, #200]	; (8015280 <__swsetup_r+0xcc>)
 80151b6:	b570      	push	{r4, r5, r6, lr}
 80151b8:	681d      	ldr	r5, [r3, #0]
 80151ba:	4606      	mov	r6, r0
 80151bc:	460c      	mov	r4, r1
 80151be:	b125      	cbz	r5, 80151ca <__swsetup_r+0x16>
 80151c0:	69ab      	ldr	r3, [r5, #24]
 80151c2:	b913      	cbnz	r3, 80151ca <__swsetup_r+0x16>
 80151c4:	4628      	mov	r0, r5
 80151c6:	f7fe fc13 	bl	80139f0 <__sinit>
 80151ca:	4b2e      	ldr	r3, [pc, #184]	; (8015284 <__swsetup_r+0xd0>)
 80151cc:	429c      	cmp	r4, r3
 80151ce:	d10f      	bne.n	80151f0 <__swsetup_r+0x3c>
 80151d0:	686c      	ldr	r4, [r5, #4]
 80151d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151d6:	b29a      	uxth	r2, r3
 80151d8:	0715      	lsls	r5, r2, #28
 80151da:	d42c      	bmi.n	8015236 <__swsetup_r+0x82>
 80151dc:	06d0      	lsls	r0, r2, #27
 80151de:	d411      	bmi.n	8015204 <__swsetup_r+0x50>
 80151e0:	2209      	movs	r2, #9
 80151e2:	6032      	str	r2, [r6, #0]
 80151e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151e8:	81a3      	strh	r3, [r4, #12]
 80151ea:	f04f 30ff 	mov.w	r0, #4294967295
 80151ee:	e03e      	b.n	801526e <__swsetup_r+0xba>
 80151f0:	4b25      	ldr	r3, [pc, #148]	; (8015288 <__swsetup_r+0xd4>)
 80151f2:	429c      	cmp	r4, r3
 80151f4:	d101      	bne.n	80151fa <__swsetup_r+0x46>
 80151f6:	68ac      	ldr	r4, [r5, #8]
 80151f8:	e7eb      	b.n	80151d2 <__swsetup_r+0x1e>
 80151fa:	4b24      	ldr	r3, [pc, #144]	; (801528c <__swsetup_r+0xd8>)
 80151fc:	429c      	cmp	r4, r3
 80151fe:	bf08      	it	eq
 8015200:	68ec      	ldreq	r4, [r5, #12]
 8015202:	e7e6      	b.n	80151d2 <__swsetup_r+0x1e>
 8015204:	0751      	lsls	r1, r2, #29
 8015206:	d512      	bpl.n	801522e <__swsetup_r+0x7a>
 8015208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801520a:	b141      	cbz	r1, 801521e <__swsetup_r+0x6a>
 801520c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015210:	4299      	cmp	r1, r3
 8015212:	d002      	beq.n	801521a <__swsetup_r+0x66>
 8015214:	4630      	mov	r0, r6
 8015216:	f7ff fbc9 	bl	80149ac <_free_r>
 801521a:	2300      	movs	r3, #0
 801521c:	6363      	str	r3, [r4, #52]	; 0x34
 801521e:	89a3      	ldrh	r3, [r4, #12]
 8015220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015224:	81a3      	strh	r3, [r4, #12]
 8015226:	2300      	movs	r3, #0
 8015228:	6063      	str	r3, [r4, #4]
 801522a:	6923      	ldr	r3, [r4, #16]
 801522c:	6023      	str	r3, [r4, #0]
 801522e:	89a3      	ldrh	r3, [r4, #12]
 8015230:	f043 0308 	orr.w	r3, r3, #8
 8015234:	81a3      	strh	r3, [r4, #12]
 8015236:	6923      	ldr	r3, [r4, #16]
 8015238:	b94b      	cbnz	r3, 801524e <__swsetup_r+0x9a>
 801523a:	89a3      	ldrh	r3, [r4, #12]
 801523c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015244:	d003      	beq.n	801524e <__swsetup_r+0x9a>
 8015246:	4621      	mov	r1, r4
 8015248:	4630      	mov	r0, r6
 801524a:	f000 f917 	bl	801547c <__smakebuf_r>
 801524e:	89a2      	ldrh	r2, [r4, #12]
 8015250:	f012 0301 	ands.w	r3, r2, #1
 8015254:	d00c      	beq.n	8015270 <__swsetup_r+0xbc>
 8015256:	2300      	movs	r3, #0
 8015258:	60a3      	str	r3, [r4, #8]
 801525a:	6963      	ldr	r3, [r4, #20]
 801525c:	425b      	negs	r3, r3
 801525e:	61a3      	str	r3, [r4, #24]
 8015260:	6923      	ldr	r3, [r4, #16]
 8015262:	b953      	cbnz	r3, 801527a <__swsetup_r+0xc6>
 8015264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015268:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801526c:	d1ba      	bne.n	80151e4 <__swsetup_r+0x30>
 801526e:	bd70      	pop	{r4, r5, r6, pc}
 8015270:	0792      	lsls	r2, r2, #30
 8015272:	bf58      	it	pl
 8015274:	6963      	ldrpl	r3, [r4, #20]
 8015276:	60a3      	str	r3, [r4, #8]
 8015278:	e7f2      	b.n	8015260 <__swsetup_r+0xac>
 801527a:	2000      	movs	r0, #0
 801527c:	e7f7      	b.n	801526e <__swsetup_r+0xba>
 801527e:	bf00      	nop
 8015280:	20000060 	.word	0x20000060
 8015284:	0801a1b0 	.word	0x0801a1b0
 8015288:	0801a1d0 	.word	0x0801a1d0
 801528c:	0801a190 	.word	0x0801a190

08015290 <_close_r>:
 8015290:	b538      	push	{r3, r4, r5, lr}
 8015292:	2300      	movs	r3, #0
 8015294:	4c05      	ldr	r4, [pc, #20]	; (80152ac <_close_r+0x1c>)
 8015296:	4605      	mov	r5, r0
 8015298:	4608      	mov	r0, r1
 801529a:	6023      	str	r3, [r4, #0]
 801529c:	f7ec fa7f 	bl	800179e <_close>
 80152a0:	1c43      	adds	r3, r0, #1
 80152a2:	d102      	bne.n	80152aa <_close_r+0x1a>
 80152a4:	6823      	ldr	r3, [r4, #0]
 80152a6:	b103      	cbz	r3, 80152aa <_close_r+0x1a>
 80152a8:	602b      	str	r3, [r5, #0]
 80152aa:	bd38      	pop	{r3, r4, r5, pc}
 80152ac:	2000157c 	.word	0x2000157c

080152b0 <__sflush_r>:
 80152b0:	898a      	ldrh	r2, [r1, #12]
 80152b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152b6:	4605      	mov	r5, r0
 80152b8:	0710      	lsls	r0, r2, #28
 80152ba:	460c      	mov	r4, r1
 80152bc:	d458      	bmi.n	8015370 <__sflush_r+0xc0>
 80152be:	684b      	ldr	r3, [r1, #4]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	dc05      	bgt.n	80152d0 <__sflush_r+0x20>
 80152c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	dc02      	bgt.n	80152d0 <__sflush_r+0x20>
 80152ca:	2000      	movs	r0, #0
 80152cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80152d2:	2e00      	cmp	r6, #0
 80152d4:	d0f9      	beq.n	80152ca <__sflush_r+0x1a>
 80152d6:	2300      	movs	r3, #0
 80152d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80152dc:	682f      	ldr	r7, [r5, #0]
 80152de:	6a21      	ldr	r1, [r4, #32]
 80152e0:	602b      	str	r3, [r5, #0]
 80152e2:	d032      	beq.n	801534a <__sflush_r+0x9a>
 80152e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80152e6:	89a3      	ldrh	r3, [r4, #12]
 80152e8:	075a      	lsls	r2, r3, #29
 80152ea:	d505      	bpl.n	80152f8 <__sflush_r+0x48>
 80152ec:	6863      	ldr	r3, [r4, #4]
 80152ee:	1ac0      	subs	r0, r0, r3
 80152f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80152f2:	b10b      	cbz	r3, 80152f8 <__sflush_r+0x48>
 80152f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80152f6:	1ac0      	subs	r0, r0, r3
 80152f8:	2300      	movs	r3, #0
 80152fa:	4602      	mov	r2, r0
 80152fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80152fe:	6a21      	ldr	r1, [r4, #32]
 8015300:	4628      	mov	r0, r5
 8015302:	47b0      	blx	r6
 8015304:	1c43      	adds	r3, r0, #1
 8015306:	89a3      	ldrh	r3, [r4, #12]
 8015308:	d106      	bne.n	8015318 <__sflush_r+0x68>
 801530a:	6829      	ldr	r1, [r5, #0]
 801530c:	291d      	cmp	r1, #29
 801530e:	d848      	bhi.n	80153a2 <__sflush_r+0xf2>
 8015310:	4a29      	ldr	r2, [pc, #164]	; (80153b8 <__sflush_r+0x108>)
 8015312:	40ca      	lsrs	r2, r1
 8015314:	07d6      	lsls	r6, r2, #31
 8015316:	d544      	bpl.n	80153a2 <__sflush_r+0xf2>
 8015318:	2200      	movs	r2, #0
 801531a:	6062      	str	r2, [r4, #4]
 801531c:	6922      	ldr	r2, [r4, #16]
 801531e:	04d9      	lsls	r1, r3, #19
 8015320:	6022      	str	r2, [r4, #0]
 8015322:	d504      	bpl.n	801532e <__sflush_r+0x7e>
 8015324:	1c42      	adds	r2, r0, #1
 8015326:	d101      	bne.n	801532c <__sflush_r+0x7c>
 8015328:	682b      	ldr	r3, [r5, #0]
 801532a:	b903      	cbnz	r3, 801532e <__sflush_r+0x7e>
 801532c:	6560      	str	r0, [r4, #84]	; 0x54
 801532e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015330:	602f      	str	r7, [r5, #0]
 8015332:	2900      	cmp	r1, #0
 8015334:	d0c9      	beq.n	80152ca <__sflush_r+0x1a>
 8015336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801533a:	4299      	cmp	r1, r3
 801533c:	d002      	beq.n	8015344 <__sflush_r+0x94>
 801533e:	4628      	mov	r0, r5
 8015340:	f7ff fb34 	bl	80149ac <_free_r>
 8015344:	2000      	movs	r0, #0
 8015346:	6360      	str	r0, [r4, #52]	; 0x34
 8015348:	e7c0      	b.n	80152cc <__sflush_r+0x1c>
 801534a:	2301      	movs	r3, #1
 801534c:	4628      	mov	r0, r5
 801534e:	47b0      	blx	r6
 8015350:	1c41      	adds	r1, r0, #1
 8015352:	d1c8      	bne.n	80152e6 <__sflush_r+0x36>
 8015354:	682b      	ldr	r3, [r5, #0]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d0c5      	beq.n	80152e6 <__sflush_r+0x36>
 801535a:	2b1d      	cmp	r3, #29
 801535c:	d001      	beq.n	8015362 <__sflush_r+0xb2>
 801535e:	2b16      	cmp	r3, #22
 8015360:	d101      	bne.n	8015366 <__sflush_r+0xb6>
 8015362:	602f      	str	r7, [r5, #0]
 8015364:	e7b1      	b.n	80152ca <__sflush_r+0x1a>
 8015366:	89a3      	ldrh	r3, [r4, #12]
 8015368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801536c:	81a3      	strh	r3, [r4, #12]
 801536e:	e7ad      	b.n	80152cc <__sflush_r+0x1c>
 8015370:	690f      	ldr	r7, [r1, #16]
 8015372:	2f00      	cmp	r7, #0
 8015374:	d0a9      	beq.n	80152ca <__sflush_r+0x1a>
 8015376:	0793      	lsls	r3, r2, #30
 8015378:	bf18      	it	ne
 801537a:	2300      	movne	r3, #0
 801537c:	680e      	ldr	r6, [r1, #0]
 801537e:	bf08      	it	eq
 8015380:	694b      	ldreq	r3, [r1, #20]
 8015382:	eba6 0807 	sub.w	r8, r6, r7
 8015386:	600f      	str	r7, [r1, #0]
 8015388:	608b      	str	r3, [r1, #8]
 801538a:	f1b8 0f00 	cmp.w	r8, #0
 801538e:	dd9c      	ble.n	80152ca <__sflush_r+0x1a>
 8015390:	4643      	mov	r3, r8
 8015392:	463a      	mov	r2, r7
 8015394:	6a21      	ldr	r1, [r4, #32]
 8015396:	4628      	mov	r0, r5
 8015398:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801539a:	47b0      	blx	r6
 801539c:	2800      	cmp	r0, #0
 801539e:	dc06      	bgt.n	80153ae <__sflush_r+0xfe>
 80153a0:	89a3      	ldrh	r3, [r4, #12]
 80153a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153a6:	81a3      	strh	r3, [r4, #12]
 80153a8:	f04f 30ff 	mov.w	r0, #4294967295
 80153ac:	e78e      	b.n	80152cc <__sflush_r+0x1c>
 80153ae:	4407      	add	r7, r0
 80153b0:	eba8 0800 	sub.w	r8, r8, r0
 80153b4:	e7e9      	b.n	801538a <__sflush_r+0xda>
 80153b6:	bf00      	nop
 80153b8:	20400001 	.word	0x20400001

080153bc <_fflush_r>:
 80153bc:	b538      	push	{r3, r4, r5, lr}
 80153be:	690b      	ldr	r3, [r1, #16]
 80153c0:	4605      	mov	r5, r0
 80153c2:	460c      	mov	r4, r1
 80153c4:	b1db      	cbz	r3, 80153fe <_fflush_r+0x42>
 80153c6:	b118      	cbz	r0, 80153d0 <_fflush_r+0x14>
 80153c8:	6983      	ldr	r3, [r0, #24]
 80153ca:	b90b      	cbnz	r3, 80153d0 <_fflush_r+0x14>
 80153cc:	f7fe fb10 	bl	80139f0 <__sinit>
 80153d0:	4b0c      	ldr	r3, [pc, #48]	; (8015404 <_fflush_r+0x48>)
 80153d2:	429c      	cmp	r4, r3
 80153d4:	d109      	bne.n	80153ea <_fflush_r+0x2e>
 80153d6:	686c      	ldr	r4, [r5, #4]
 80153d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153dc:	b17b      	cbz	r3, 80153fe <_fflush_r+0x42>
 80153de:	4621      	mov	r1, r4
 80153e0:	4628      	mov	r0, r5
 80153e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153e6:	f7ff bf63 	b.w	80152b0 <__sflush_r>
 80153ea:	4b07      	ldr	r3, [pc, #28]	; (8015408 <_fflush_r+0x4c>)
 80153ec:	429c      	cmp	r4, r3
 80153ee:	d101      	bne.n	80153f4 <_fflush_r+0x38>
 80153f0:	68ac      	ldr	r4, [r5, #8]
 80153f2:	e7f1      	b.n	80153d8 <_fflush_r+0x1c>
 80153f4:	4b05      	ldr	r3, [pc, #20]	; (801540c <_fflush_r+0x50>)
 80153f6:	429c      	cmp	r4, r3
 80153f8:	bf08      	it	eq
 80153fa:	68ec      	ldreq	r4, [r5, #12]
 80153fc:	e7ec      	b.n	80153d8 <_fflush_r+0x1c>
 80153fe:	2000      	movs	r0, #0
 8015400:	bd38      	pop	{r3, r4, r5, pc}
 8015402:	bf00      	nop
 8015404:	0801a1b0 	.word	0x0801a1b0
 8015408:	0801a1d0 	.word	0x0801a1d0
 801540c:	0801a190 	.word	0x0801a190

08015410 <_lseek_r>:
 8015410:	b538      	push	{r3, r4, r5, lr}
 8015412:	4605      	mov	r5, r0
 8015414:	4608      	mov	r0, r1
 8015416:	4611      	mov	r1, r2
 8015418:	2200      	movs	r2, #0
 801541a:	4c05      	ldr	r4, [pc, #20]	; (8015430 <_lseek_r+0x20>)
 801541c:	6022      	str	r2, [r4, #0]
 801541e:	461a      	mov	r2, r3
 8015420:	f7ec f9e1 	bl	80017e6 <_lseek>
 8015424:	1c43      	adds	r3, r0, #1
 8015426:	d102      	bne.n	801542e <_lseek_r+0x1e>
 8015428:	6823      	ldr	r3, [r4, #0]
 801542a:	b103      	cbz	r3, 801542e <_lseek_r+0x1e>
 801542c:	602b      	str	r3, [r5, #0]
 801542e:	bd38      	pop	{r3, r4, r5, pc}
 8015430:	2000157c 	.word	0x2000157c

08015434 <__swhatbuf_r>:
 8015434:	b570      	push	{r4, r5, r6, lr}
 8015436:	460e      	mov	r6, r1
 8015438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801543c:	b096      	sub	sp, #88	; 0x58
 801543e:	2900      	cmp	r1, #0
 8015440:	4614      	mov	r4, r2
 8015442:	461d      	mov	r5, r3
 8015444:	da07      	bge.n	8015456 <__swhatbuf_r+0x22>
 8015446:	2300      	movs	r3, #0
 8015448:	602b      	str	r3, [r5, #0]
 801544a:	89b3      	ldrh	r3, [r6, #12]
 801544c:	061a      	lsls	r2, r3, #24
 801544e:	d410      	bmi.n	8015472 <__swhatbuf_r+0x3e>
 8015450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015454:	e00e      	b.n	8015474 <__swhatbuf_r+0x40>
 8015456:	466a      	mov	r2, sp
 8015458:	f000 f8a4 	bl	80155a4 <_fstat_r>
 801545c:	2800      	cmp	r0, #0
 801545e:	dbf2      	blt.n	8015446 <__swhatbuf_r+0x12>
 8015460:	9a01      	ldr	r2, [sp, #4]
 8015462:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015466:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801546a:	425a      	negs	r2, r3
 801546c:	415a      	adcs	r2, r3
 801546e:	602a      	str	r2, [r5, #0]
 8015470:	e7ee      	b.n	8015450 <__swhatbuf_r+0x1c>
 8015472:	2340      	movs	r3, #64	; 0x40
 8015474:	2000      	movs	r0, #0
 8015476:	6023      	str	r3, [r4, #0]
 8015478:	b016      	add	sp, #88	; 0x58
 801547a:	bd70      	pop	{r4, r5, r6, pc}

0801547c <__smakebuf_r>:
 801547c:	898b      	ldrh	r3, [r1, #12]
 801547e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015480:	079d      	lsls	r5, r3, #30
 8015482:	4606      	mov	r6, r0
 8015484:	460c      	mov	r4, r1
 8015486:	d507      	bpl.n	8015498 <__smakebuf_r+0x1c>
 8015488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801548c:	6023      	str	r3, [r4, #0]
 801548e:	6123      	str	r3, [r4, #16]
 8015490:	2301      	movs	r3, #1
 8015492:	6163      	str	r3, [r4, #20]
 8015494:	b002      	add	sp, #8
 8015496:	bd70      	pop	{r4, r5, r6, pc}
 8015498:	ab01      	add	r3, sp, #4
 801549a:	466a      	mov	r2, sp
 801549c:	f7ff ffca 	bl	8015434 <__swhatbuf_r>
 80154a0:	9900      	ldr	r1, [sp, #0]
 80154a2:	4605      	mov	r5, r0
 80154a4:	4630      	mov	r0, r6
 80154a6:	f7ff facd 	bl	8014a44 <_malloc_r>
 80154aa:	b948      	cbnz	r0, 80154c0 <__smakebuf_r+0x44>
 80154ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154b0:	059a      	lsls	r2, r3, #22
 80154b2:	d4ef      	bmi.n	8015494 <__smakebuf_r+0x18>
 80154b4:	f023 0303 	bic.w	r3, r3, #3
 80154b8:	f043 0302 	orr.w	r3, r3, #2
 80154bc:	81a3      	strh	r3, [r4, #12]
 80154be:	e7e3      	b.n	8015488 <__smakebuf_r+0xc>
 80154c0:	4b0d      	ldr	r3, [pc, #52]	; (80154f8 <__smakebuf_r+0x7c>)
 80154c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80154c4:	89a3      	ldrh	r3, [r4, #12]
 80154c6:	6020      	str	r0, [r4, #0]
 80154c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154cc:	81a3      	strh	r3, [r4, #12]
 80154ce:	9b00      	ldr	r3, [sp, #0]
 80154d0:	6120      	str	r0, [r4, #16]
 80154d2:	6163      	str	r3, [r4, #20]
 80154d4:	9b01      	ldr	r3, [sp, #4]
 80154d6:	b15b      	cbz	r3, 80154f0 <__smakebuf_r+0x74>
 80154d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154dc:	4630      	mov	r0, r6
 80154de:	f000 f873 	bl	80155c8 <_isatty_r>
 80154e2:	b128      	cbz	r0, 80154f0 <__smakebuf_r+0x74>
 80154e4:	89a3      	ldrh	r3, [r4, #12]
 80154e6:	f023 0303 	bic.w	r3, r3, #3
 80154ea:	f043 0301 	orr.w	r3, r3, #1
 80154ee:	81a3      	strh	r3, [r4, #12]
 80154f0:	89a3      	ldrh	r3, [r4, #12]
 80154f2:	431d      	orrs	r5, r3
 80154f4:	81a5      	strh	r5, [r4, #12]
 80154f6:	e7cd      	b.n	8015494 <__smakebuf_r+0x18>
 80154f8:	080139b9 	.word	0x080139b9

080154fc <memmove>:
 80154fc:	4288      	cmp	r0, r1
 80154fe:	b510      	push	{r4, lr}
 8015500:	eb01 0302 	add.w	r3, r1, r2
 8015504:	d807      	bhi.n	8015516 <memmove+0x1a>
 8015506:	1e42      	subs	r2, r0, #1
 8015508:	4299      	cmp	r1, r3
 801550a:	d00a      	beq.n	8015522 <memmove+0x26>
 801550c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015510:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015514:	e7f8      	b.n	8015508 <memmove+0xc>
 8015516:	4283      	cmp	r3, r0
 8015518:	d9f5      	bls.n	8015506 <memmove+0xa>
 801551a:	1881      	adds	r1, r0, r2
 801551c:	1ad2      	subs	r2, r2, r3
 801551e:	42d3      	cmn	r3, r2
 8015520:	d100      	bne.n	8015524 <memmove+0x28>
 8015522:	bd10      	pop	{r4, pc}
 8015524:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015528:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801552c:	e7f7      	b.n	801551e <memmove+0x22>

0801552e <__malloc_lock>:
 801552e:	4770      	bx	lr

08015530 <__malloc_unlock>:
 8015530:	4770      	bx	lr

08015532 <_realloc_r>:
 8015532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015534:	4607      	mov	r7, r0
 8015536:	4614      	mov	r4, r2
 8015538:	460e      	mov	r6, r1
 801553a:	b921      	cbnz	r1, 8015546 <_realloc_r+0x14>
 801553c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015540:	4611      	mov	r1, r2
 8015542:	f7ff ba7f 	b.w	8014a44 <_malloc_r>
 8015546:	b922      	cbnz	r2, 8015552 <_realloc_r+0x20>
 8015548:	f7ff fa30 	bl	80149ac <_free_r>
 801554c:	4625      	mov	r5, r4
 801554e:	4628      	mov	r0, r5
 8015550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015552:	f000 f849 	bl	80155e8 <_malloc_usable_size_r>
 8015556:	42a0      	cmp	r0, r4
 8015558:	d20f      	bcs.n	801557a <_realloc_r+0x48>
 801555a:	4621      	mov	r1, r4
 801555c:	4638      	mov	r0, r7
 801555e:	f7ff fa71 	bl	8014a44 <_malloc_r>
 8015562:	4605      	mov	r5, r0
 8015564:	2800      	cmp	r0, #0
 8015566:	d0f2      	beq.n	801554e <_realloc_r+0x1c>
 8015568:	4631      	mov	r1, r6
 801556a:	4622      	mov	r2, r4
 801556c:	f7fb ffb4 	bl	80114d8 <memcpy>
 8015570:	4631      	mov	r1, r6
 8015572:	4638      	mov	r0, r7
 8015574:	f7ff fa1a 	bl	80149ac <_free_r>
 8015578:	e7e9      	b.n	801554e <_realloc_r+0x1c>
 801557a:	4635      	mov	r5, r6
 801557c:	e7e7      	b.n	801554e <_realloc_r+0x1c>
	...

08015580 <_read_r>:
 8015580:	b538      	push	{r3, r4, r5, lr}
 8015582:	4605      	mov	r5, r0
 8015584:	4608      	mov	r0, r1
 8015586:	4611      	mov	r1, r2
 8015588:	2200      	movs	r2, #0
 801558a:	4c05      	ldr	r4, [pc, #20]	; (80155a0 <_read_r+0x20>)
 801558c:	6022      	str	r2, [r4, #0]
 801558e:	461a      	mov	r2, r3
 8015590:	f7ec f8cc 	bl	800172c <_read>
 8015594:	1c43      	adds	r3, r0, #1
 8015596:	d102      	bne.n	801559e <_read_r+0x1e>
 8015598:	6823      	ldr	r3, [r4, #0]
 801559a:	b103      	cbz	r3, 801559e <_read_r+0x1e>
 801559c:	602b      	str	r3, [r5, #0]
 801559e:	bd38      	pop	{r3, r4, r5, pc}
 80155a0:	2000157c 	.word	0x2000157c

080155a4 <_fstat_r>:
 80155a4:	b538      	push	{r3, r4, r5, lr}
 80155a6:	2300      	movs	r3, #0
 80155a8:	4c06      	ldr	r4, [pc, #24]	; (80155c4 <_fstat_r+0x20>)
 80155aa:	4605      	mov	r5, r0
 80155ac:	4608      	mov	r0, r1
 80155ae:	4611      	mov	r1, r2
 80155b0:	6023      	str	r3, [r4, #0]
 80155b2:	f7ec f8ff 	bl	80017b4 <_fstat>
 80155b6:	1c43      	adds	r3, r0, #1
 80155b8:	d102      	bne.n	80155c0 <_fstat_r+0x1c>
 80155ba:	6823      	ldr	r3, [r4, #0]
 80155bc:	b103      	cbz	r3, 80155c0 <_fstat_r+0x1c>
 80155be:	602b      	str	r3, [r5, #0]
 80155c0:	bd38      	pop	{r3, r4, r5, pc}
 80155c2:	bf00      	nop
 80155c4:	2000157c 	.word	0x2000157c

080155c8 <_isatty_r>:
 80155c8:	b538      	push	{r3, r4, r5, lr}
 80155ca:	2300      	movs	r3, #0
 80155cc:	4c05      	ldr	r4, [pc, #20]	; (80155e4 <_isatty_r+0x1c>)
 80155ce:	4605      	mov	r5, r0
 80155d0:	4608      	mov	r0, r1
 80155d2:	6023      	str	r3, [r4, #0]
 80155d4:	f7ec f8fd 	bl	80017d2 <_isatty>
 80155d8:	1c43      	adds	r3, r0, #1
 80155da:	d102      	bne.n	80155e2 <_isatty_r+0x1a>
 80155dc:	6823      	ldr	r3, [r4, #0]
 80155de:	b103      	cbz	r3, 80155e2 <_isatty_r+0x1a>
 80155e0:	602b      	str	r3, [r5, #0]
 80155e2:	bd38      	pop	{r3, r4, r5, pc}
 80155e4:	2000157c 	.word	0x2000157c

080155e8 <_malloc_usable_size_r>:
 80155e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80155ec:	1f18      	subs	r0, r3, #4
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	bfbc      	itt	lt
 80155f2:	580b      	ldrlt	r3, [r1, r0]
 80155f4:	18c0      	addlt	r0, r0, r3
 80155f6:	4770      	bx	lr

080155f8 <cos>:
 80155f8:	b530      	push	{r4, r5, lr}
 80155fa:	4a18      	ldr	r2, [pc, #96]	; (801565c <cos+0x64>)
 80155fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015600:	4293      	cmp	r3, r2
 8015602:	b087      	sub	sp, #28
 8015604:	dc04      	bgt.n	8015610 <cos+0x18>
 8015606:	2200      	movs	r2, #0
 8015608:	2300      	movs	r3, #0
 801560a:	f002 fd25 	bl	8018058 <__kernel_cos>
 801560e:	e006      	b.n	801561e <cos+0x26>
 8015610:	4a13      	ldr	r2, [pc, #76]	; (8015660 <cos+0x68>)
 8015612:	4293      	cmp	r3, r2
 8015614:	dd05      	ble.n	8015622 <cos+0x2a>
 8015616:	4602      	mov	r2, r0
 8015618:	460b      	mov	r3, r1
 801561a:	f7ea fdbf 	bl	800019c <__aeabi_dsub>
 801561e:	b007      	add	sp, #28
 8015620:	bd30      	pop	{r4, r5, pc}
 8015622:	aa02      	add	r2, sp, #8
 8015624:	f001 fbb0 	bl	8016d88 <__ieee754_rem_pio2>
 8015628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801562c:	f000 0403 	and.w	r4, r0, #3
 8015630:	2c01      	cmp	r4, #1
 8015632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015636:	d008      	beq.n	801564a <cos+0x52>
 8015638:	2c02      	cmp	r4, #2
 801563a:	d00c      	beq.n	8015656 <cos+0x5e>
 801563c:	2c00      	cmp	r4, #0
 801563e:	d0e4      	beq.n	801560a <cos+0x12>
 8015640:	2401      	movs	r4, #1
 8015642:	9400      	str	r4, [sp, #0]
 8015644:	f003 f910 	bl	8018868 <__kernel_sin>
 8015648:	e7e9      	b.n	801561e <cos+0x26>
 801564a:	9400      	str	r4, [sp, #0]
 801564c:	f003 f90c 	bl	8018868 <__kernel_sin>
 8015650:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8015654:	e7e3      	b.n	801561e <cos+0x26>
 8015656:	f002 fcff 	bl	8018058 <__kernel_cos>
 801565a:	e7f9      	b.n	8015650 <cos+0x58>
 801565c:	3fe921fb 	.word	0x3fe921fb
 8015660:	7fefffff 	.word	0x7fefffff

08015664 <sin>:
 8015664:	b530      	push	{r4, r5, lr}
 8015666:	4a1a      	ldr	r2, [pc, #104]	; (80156d0 <sin+0x6c>)
 8015668:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801566c:	4293      	cmp	r3, r2
 801566e:	b087      	sub	sp, #28
 8015670:	dc06      	bgt.n	8015680 <sin+0x1c>
 8015672:	2300      	movs	r3, #0
 8015674:	2200      	movs	r2, #0
 8015676:	9300      	str	r3, [sp, #0]
 8015678:	2300      	movs	r3, #0
 801567a:	f003 f8f5 	bl	8018868 <__kernel_sin>
 801567e:	e006      	b.n	801568e <sin+0x2a>
 8015680:	4a14      	ldr	r2, [pc, #80]	; (80156d4 <sin+0x70>)
 8015682:	4293      	cmp	r3, r2
 8015684:	dd05      	ble.n	8015692 <sin+0x2e>
 8015686:	4602      	mov	r2, r0
 8015688:	460b      	mov	r3, r1
 801568a:	f7ea fd87 	bl	800019c <__aeabi_dsub>
 801568e:	b007      	add	sp, #28
 8015690:	bd30      	pop	{r4, r5, pc}
 8015692:	aa02      	add	r2, sp, #8
 8015694:	f001 fb78 	bl	8016d88 <__ieee754_rem_pio2>
 8015698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801569c:	f000 0403 	and.w	r4, r0, #3
 80156a0:	2c01      	cmp	r4, #1
 80156a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156a6:	d005      	beq.n	80156b4 <sin+0x50>
 80156a8:	2c02      	cmp	r4, #2
 80156aa:	d006      	beq.n	80156ba <sin+0x56>
 80156ac:	b964      	cbnz	r4, 80156c8 <sin+0x64>
 80156ae:	2401      	movs	r4, #1
 80156b0:	9400      	str	r4, [sp, #0]
 80156b2:	e7e2      	b.n	801567a <sin+0x16>
 80156b4:	f002 fcd0 	bl	8018058 <__kernel_cos>
 80156b8:	e7e9      	b.n	801568e <sin+0x2a>
 80156ba:	2401      	movs	r4, #1
 80156bc:	9400      	str	r4, [sp, #0]
 80156be:	f003 f8d3 	bl	8018868 <__kernel_sin>
 80156c2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80156c6:	e7e2      	b.n	801568e <sin+0x2a>
 80156c8:	f002 fcc6 	bl	8018058 <__kernel_cos>
 80156cc:	e7f9      	b.n	80156c2 <sin+0x5e>
 80156ce:	bf00      	nop
 80156d0:	3fe921fb 	.word	0x3fe921fb
 80156d4:	7fefffff 	.word	0x7fefffff

080156d8 <cosf>:
 80156d8:	b507      	push	{r0, r1, r2, lr}
 80156da:	4a18      	ldr	r2, [pc, #96]	; (801573c <cosf+0x64>)
 80156dc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80156e0:	4293      	cmp	r3, r2
 80156e2:	4601      	mov	r1, r0
 80156e4:	dc03      	bgt.n	80156ee <cosf+0x16>
 80156e6:	2100      	movs	r1, #0
 80156e8:	f003 f974 	bl	80189d4 <__kernel_cosf>
 80156ec:	e004      	b.n	80156f8 <cosf+0x20>
 80156ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80156f2:	db04      	blt.n	80156fe <cosf+0x26>
 80156f4:	f7eb fa56 	bl	8000ba4 <__aeabi_fsub>
 80156f8:	b003      	add	sp, #12
 80156fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80156fe:	4669      	mov	r1, sp
 8015700:	f002 fafc 	bl	8017cfc <__ieee754_rem_pio2f>
 8015704:	f000 0203 	and.w	r2, r0, #3
 8015708:	2a01      	cmp	r2, #1
 801570a:	d005      	beq.n	8015718 <cosf+0x40>
 801570c:	2a02      	cmp	r2, #2
 801570e:	d00a      	beq.n	8015726 <cosf+0x4e>
 8015710:	b972      	cbnz	r2, 8015730 <cosf+0x58>
 8015712:	9901      	ldr	r1, [sp, #4]
 8015714:	9800      	ldr	r0, [sp, #0]
 8015716:	e7e7      	b.n	80156e8 <cosf+0x10>
 8015718:	9901      	ldr	r1, [sp, #4]
 801571a:	9800      	ldr	r0, [sp, #0]
 801571c:	f003 fc78 	bl	8019010 <__kernel_sinf>
 8015720:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015724:	e7e8      	b.n	80156f8 <cosf+0x20>
 8015726:	9901      	ldr	r1, [sp, #4]
 8015728:	9800      	ldr	r0, [sp, #0]
 801572a:	f003 f953 	bl	80189d4 <__kernel_cosf>
 801572e:	e7f7      	b.n	8015720 <cosf+0x48>
 8015730:	2201      	movs	r2, #1
 8015732:	9901      	ldr	r1, [sp, #4]
 8015734:	9800      	ldr	r0, [sp, #0]
 8015736:	f003 fc6b 	bl	8019010 <__kernel_sinf>
 801573a:	e7dd      	b.n	80156f8 <cosf+0x20>
 801573c:	3f490fd8 	.word	0x3f490fd8

08015740 <lrintf>:
 8015740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015742:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8015746:	f1a2 057f 	sub.w	r5, r2, #127	; 0x7f
 801574a:	2d1e      	cmp	r5, #30
 801574c:	4601      	mov	r1, r0
 801574e:	dc2b      	bgt.n	80157a8 <lrintf+0x68>
 8015750:	1c68      	adds	r0, r5, #1
 8015752:	da02      	bge.n	801575a <lrintf+0x1a>
 8015754:	2000      	movs	r0, #0
 8015756:	b003      	add	sp, #12
 8015758:	bd30      	pop	{r4, r5, pc}
 801575a:	2d16      	cmp	r5, #22
 801575c:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 8015760:	dd09      	ble.n	8015776 <lrintf+0x36>
 8015762:	f3c1 0016 	ubfx	r0, r1, #0, #23
 8015766:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801576a:	3a96      	subs	r2, #150	; 0x96
 801576c:	4090      	lsls	r0, r2
 801576e:	2c00      	cmp	r4, #0
 8015770:	d0f1      	beq.n	8015756 <lrintf+0x16>
 8015772:	4240      	negs	r0, r0
 8015774:	e7ef      	b.n	8015756 <lrintf+0x16>
 8015776:	4b0e      	ldr	r3, [pc, #56]	; (80157b0 <lrintf+0x70>)
 8015778:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 801577c:	4628      	mov	r0, r5
 801577e:	f7eb fa13 	bl	8000ba8 <__addsf3>
 8015782:	9001      	str	r0, [sp, #4]
 8015784:	9801      	ldr	r0, [sp, #4]
 8015786:	4629      	mov	r1, r5
 8015788:	f7eb fa0c 	bl	8000ba4 <__aeabi_fsub>
 801578c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8015790:	d0e0      	beq.n	8015754 <lrintf+0x14>
 8015792:	f3c0 0316 	ubfx	r3, r0, #0, #23
 8015796:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 801579a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801579e:	f1c0 0096 	rsb	r0, r0, #150	; 0x96
 80157a2:	fa23 f000 	lsr.w	r0, r3, r0
 80157a6:	e7e2      	b.n	801576e <lrintf+0x2e>
 80157a8:	f7eb fce2 	bl	8001170 <__aeabi_f2iz>
 80157ac:	e7d3      	b.n	8015756 <lrintf+0x16>
 80157ae:	bf00      	nop
 80157b0:	0801a300 	.word	0x0801a300

080157b4 <sinf>:
 80157b4:	b507      	push	{r0, r1, r2, lr}
 80157b6:	4a19      	ldr	r2, [pc, #100]	; (801581c <sinf+0x68>)
 80157b8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80157bc:	4293      	cmp	r3, r2
 80157be:	4601      	mov	r1, r0
 80157c0:	dc04      	bgt.n	80157cc <sinf+0x18>
 80157c2:	2200      	movs	r2, #0
 80157c4:	2100      	movs	r1, #0
 80157c6:	f003 fc23 	bl	8019010 <__kernel_sinf>
 80157ca:	e004      	b.n	80157d6 <sinf+0x22>
 80157cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80157d0:	db04      	blt.n	80157dc <sinf+0x28>
 80157d2:	f7eb f9e7 	bl	8000ba4 <__aeabi_fsub>
 80157d6:	b003      	add	sp, #12
 80157d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80157dc:	4669      	mov	r1, sp
 80157de:	f002 fa8d 	bl	8017cfc <__ieee754_rem_pio2f>
 80157e2:	f000 0003 	and.w	r0, r0, #3
 80157e6:	2801      	cmp	r0, #1
 80157e8:	d006      	beq.n	80157f8 <sinf+0x44>
 80157ea:	2802      	cmp	r0, #2
 80157ec:	d009      	beq.n	8015802 <sinf+0x4e>
 80157ee:	b980      	cbnz	r0, 8015812 <sinf+0x5e>
 80157f0:	2201      	movs	r2, #1
 80157f2:	9901      	ldr	r1, [sp, #4]
 80157f4:	9800      	ldr	r0, [sp, #0]
 80157f6:	e7e6      	b.n	80157c6 <sinf+0x12>
 80157f8:	9901      	ldr	r1, [sp, #4]
 80157fa:	9800      	ldr	r0, [sp, #0]
 80157fc:	f003 f8ea 	bl	80189d4 <__kernel_cosf>
 8015800:	e7e9      	b.n	80157d6 <sinf+0x22>
 8015802:	2201      	movs	r2, #1
 8015804:	9901      	ldr	r1, [sp, #4]
 8015806:	9800      	ldr	r0, [sp, #0]
 8015808:	f003 fc02 	bl	8019010 <__kernel_sinf>
 801580c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015810:	e7e1      	b.n	80157d6 <sinf+0x22>
 8015812:	9901      	ldr	r1, [sp, #4]
 8015814:	9800      	ldr	r0, [sp, #0]
 8015816:	f003 f8dd 	bl	80189d4 <__kernel_cosf>
 801581a:	e7f7      	b.n	801580c <sinf+0x58>
 801581c:	3f490fd8 	.word	0x3f490fd8

08015820 <atan2>:
 8015820:	f000 bbbe 	b.w	8015fa0 <__ieee754_atan2>

08015824 <fmod>:
 8015824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015828:	b08b      	sub	sp, #44	; 0x2c
 801582a:	461f      	mov	r7, r3
 801582c:	4604      	mov	r4, r0
 801582e:	460d      	mov	r5, r1
 8015830:	4616      	mov	r6, r2
 8015832:	f000 fc93 	bl	801615c <__ieee754_fmod>
 8015836:	4b27      	ldr	r3, [pc, #156]	; (80158d4 <fmod+0xb0>)
 8015838:	4680      	mov	r8, r0
 801583a:	f993 a000 	ldrsb.w	sl, [r3]
 801583e:	4689      	mov	r9, r1
 8015840:	f1ba 3fff 	cmp.w	sl, #4294967295
 8015844:	d030      	beq.n	80158a8 <fmod+0x84>
 8015846:	4632      	mov	r2, r6
 8015848:	463b      	mov	r3, r7
 801584a:	4630      	mov	r0, r6
 801584c:	4639      	mov	r1, r7
 801584e:	f7eb f8f7 	bl	8000a40 <__aeabi_dcmpun>
 8015852:	bb48      	cbnz	r0, 80158a8 <fmod+0x84>
 8015854:	4622      	mov	r2, r4
 8015856:	462b      	mov	r3, r5
 8015858:	4620      	mov	r0, r4
 801585a:	4629      	mov	r1, r5
 801585c:	f7eb f8f0 	bl	8000a40 <__aeabi_dcmpun>
 8015860:	4683      	mov	fp, r0
 8015862:	bb08      	cbnz	r0, 80158a8 <fmod+0x84>
 8015864:	2200      	movs	r2, #0
 8015866:	2300      	movs	r3, #0
 8015868:	4630      	mov	r0, r6
 801586a:	4639      	mov	r1, r7
 801586c:	f7eb f8b6 	bl	80009dc <__aeabi_dcmpeq>
 8015870:	b1d0      	cbz	r0, 80158a8 <fmod+0x84>
 8015872:	2301      	movs	r3, #1
 8015874:	9300      	str	r3, [sp, #0]
 8015876:	4b18      	ldr	r3, [pc, #96]	; (80158d8 <fmod+0xb4>)
 8015878:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801587c:	9301      	str	r3, [sp, #4]
 801587e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015882:	f8cd b020 	str.w	fp, [sp, #32]
 8015886:	f1ba 0f00 	cmp.w	sl, #0
 801588a:	d112      	bne.n	80158b2 <fmod+0x8e>
 801588c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015890:	4668      	mov	r0, sp
 8015892:	f003 fe4d 	bl	8019530 <matherr>
 8015896:	b1b8      	cbz	r0, 80158c8 <fmod+0xa4>
 8015898:	9b08      	ldr	r3, [sp, #32]
 801589a:	b11b      	cbz	r3, 80158a4 <fmod+0x80>
 801589c:	f7fb fdce 	bl	801143c <__errno>
 80158a0:	9b08      	ldr	r3, [sp, #32]
 80158a2:	6003      	str	r3, [r0, #0]
 80158a4:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80158a8:	4640      	mov	r0, r8
 80158aa:	4649      	mov	r1, r9
 80158ac:	b00b      	add	sp, #44	; 0x2c
 80158ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158b2:	2200      	movs	r2, #0
 80158b4:	2300      	movs	r3, #0
 80158b6:	4610      	mov	r0, r2
 80158b8:	4619      	mov	r1, r3
 80158ba:	f7ea ff51 	bl	8000760 <__aeabi_ddiv>
 80158be:	f1ba 0f02 	cmp.w	sl, #2
 80158c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80158c6:	d1e3      	bne.n	8015890 <fmod+0x6c>
 80158c8:	f7fb fdb8 	bl	801143c <__errno>
 80158cc:	2321      	movs	r3, #33	; 0x21
 80158ce:	6003      	str	r3, [r0, #0]
 80158d0:	e7e2      	b.n	8015898 <fmod+0x74>
 80158d2:	bf00      	nop
 80158d4:	20000230 	.word	0x20000230
 80158d8:	0801a308 	.word	0x0801a308

080158dc <pow>:
 80158dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e0:	b08f      	sub	sp, #60	; 0x3c
 80158e2:	461d      	mov	r5, r3
 80158e4:	4680      	mov	r8, r0
 80158e6:	4689      	mov	r9, r1
 80158e8:	4614      	mov	r4, r2
 80158ea:	f000 fd41 	bl	8016370 <__ieee754_pow>
 80158ee:	4fa1      	ldr	r7, [pc, #644]	; (8015b74 <pow+0x298>)
 80158f0:	e9cd 0100 	strd	r0, r1, [sp]
 80158f4:	f997 3000 	ldrsb.w	r3, [r7]
 80158f8:	463e      	mov	r6, r7
 80158fa:	9302      	str	r3, [sp, #8]
 80158fc:	3301      	adds	r3, #1
 80158fe:	d05f      	beq.n	80159c0 <pow+0xe4>
 8015900:	4622      	mov	r2, r4
 8015902:	462b      	mov	r3, r5
 8015904:	4620      	mov	r0, r4
 8015906:	4629      	mov	r1, r5
 8015908:	f7eb f89a 	bl	8000a40 <__aeabi_dcmpun>
 801590c:	4682      	mov	sl, r0
 801590e:	2800      	cmp	r0, #0
 8015910:	d156      	bne.n	80159c0 <pow+0xe4>
 8015912:	4642      	mov	r2, r8
 8015914:	464b      	mov	r3, r9
 8015916:	4640      	mov	r0, r8
 8015918:	4649      	mov	r1, r9
 801591a:	f7eb f891 	bl	8000a40 <__aeabi_dcmpun>
 801591e:	9003      	str	r0, [sp, #12]
 8015920:	b1e8      	cbz	r0, 801595e <pow+0x82>
 8015922:	2200      	movs	r2, #0
 8015924:	2300      	movs	r3, #0
 8015926:	4620      	mov	r0, r4
 8015928:	4629      	mov	r1, r5
 801592a:	f7eb f857 	bl	80009dc <__aeabi_dcmpeq>
 801592e:	2800      	cmp	r0, #0
 8015930:	d046      	beq.n	80159c0 <pow+0xe4>
 8015932:	2301      	movs	r3, #1
 8015934:	2200      	movs	r2, #0
 8015936:	9304      	str	r3, [sp, #16]
 8015938:	4b8f      	ldr	r3, [pc, #572]	; (8015b78 <pow+0x29c>)
 801593a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801593e:	9305      	str	r3, [sp, #20]
 8015940:	4b8e      	ldr	r3, [pc, #568]	; (8015b7c <pow+0x2a0>)
 8015942:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015946:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801594a:	9b02      	ldr	r3, [sp, #8]
 801594c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015950:	2b02      	cmp	r3, #2
 8015952:	d031      	beq.n	80159b8 <pow+0xdc>
 8015954:	a804      	add	r0, sp, #16
 8015956:	f003 fdeb 	bl	8019530 <matherr>
 801595a:	bb38      	cbnz	r0, 80159ac <pow+0xd0>
 801595c:	e058      	b.n	8015a10 <pow+0x134>
 801595e:	f04f 0a00 	mov.w	sl, #0
 8015962:	f04f 0b00 	mov.w	fp, #0
 8015966:	4652      	mov	r2, sl
 8015968:	465b      	mov	r3, fp
 801596a:	4640      	mov	r0, r8
 801596c:	4649      	mov	r1, r9
 801596e:	f7eb f835 	bl	80009dc <__aeabi_dcmpeq>
 8015972:	2800      	cmp	r0, #0
 8015974:	d051      	beq.n	8015a1a <pow+0x13e>
 8015976:	4652      	mov	r2, sl
 8015978:	465b      	mov	r3, fp
 801597a:	4620      	mov	r0, r4
 801597c:	4629      	mov	r1, r5
 801597e:	f7eb f82d 	bl	80009dc <__aeabi_dcmpeq>
 8015982:	4606      	mov	r6, r0
 8015984:	b308      	cbz	r0, 80159ca <pow+0xee>
 8015986:	2301      	movs	r3, #1
 8015988:	9304      	str	r3, [sp, #16]
 801598a:	4b7b      	ldr	r3, [pc, #492]	; (8015b78 <pow+0x29c>)
 801598c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015990:	9305      	str	r3, [sp, #20]
 8015992:	9b03      	ldr	r3, [sp, #12]
 8015994:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015998:	930c      	str	r3, [sp, #48]	; 0x30
 801599a:	9b02      	ldr	r3, [sp, #8]
 801599c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d0d7      	beq.n	8015954 <pow+0x78>
 80159a4:	2200      	movs	r2, #0
 80159a6:	4b75      	ldr	r3, [pc, #468]	; (8015b7c <pow+0x2a0>)
 80159a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80159ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159ae:	b11b      	cbz	r3, 80159b8 <pow+0xdc>
 80159b0:	f7fb fd44 	bl	801143c <__errno>
 80159b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159b6:	6003      	str	r3, [r0, #0]
 80159b8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80159bc:	e9cd 3400 	strd	r3, r4, [sp]
 80159c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80159c4:	b00f      	add	sp, #60	; 0x3c
 80159c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ca:	4620      	mov	r0, r4
 80159cc:	4629      	mov	r1, r5
 80159ce:	f003 fd25 	bl	801941c <finite>
 80159d2:	2800      	cmp	r0, #0
 80159d4:	d0f4      	beq.n	80159c0 <pow+0xe4>
 80159d6:	4652      	mov	r2, sl
 80159d8:	465b      	mov	r3, fp
 80159da:	4620      	mov	r0, r4
 80159dc:	4629      	mov	r1, r5
 80159de:	f7eb f807 	bl	80009f0 <__aeabi_dcmplt>
 80159e2:	2800      	cmp	r0, #0
 80159e4:	d0ec      	beq.n	80159c0 <pow+0xe4>
 80159e6:	2301      	movs	r3, #1
 80159e8:	9304      	str	r3, [sp, #16]
 80159ea:	4b63      	ldr	r3, [pc, #396]	; (8015b78 <pow+0x29c>)
 80159ec:	960c      	str	r6, [sp, #48]	; 0x30
 80159ee:	9305      	str	r3, [sp, #20]
 80159f0:	f997 3000 	ldrsb.w	r3, [r7]
 80159f4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80159f8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80159fc:	b913      	cbnz	r3, 8015a04 <pow+0x128>
 80159fe:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015a02:	e7a7      	b.n	8015954 <pow+0x78>
 8015a04:	2000      	movs	r0, #0
 8015a06:	495e      	ldr	r1, [pc, #376]	; (8015b80 <pow+0x2a4>)
 8015a08:	2b02      	cmp	r3, #2
 8015a0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015a0e:	d1a1      	bne.n	8015954 <pow+0x78>
 8015a10:	f7fb fd14 	bl	801143c <__errno>
 8015a14:	2321      	movs	r3, #33	; 0x21
 8015a16:	6003      	str	r3, [r0, #0]
 8015a18:	e7c8      	b.n	80159ac <pow+0xd0>
 8015a1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a1e:	f003 fcfd 	bl	801941c <finite>
 8015a22:	9002      	str	r0, [sp, #8]
 8015a24:	2800      	cmp	r0, #0
 8015a26:	d177      	bne.n	8015b18 <pow+0x23c>
 8015a28:	4640      	mov	r0, r8
 8015a2a:	4649      	mov	r1, r9
 8015a2c:	f003 fcf6 	bl	801941c <finite>
 8015a30:	2800      	cmp	r0, #0
 8015a32:	d071      	beq.n	8015b18 <pow+0x23c>
 8015a34:	4620      	mov	r0, r4
 8015a36:	4629      	mov	r1, r5
 8015a38:	f003 fcf0 	bl	801941c <finite>
 8015a3c:	2800      	cmp	r0, #0
 8015a3e:	d06b      	beq.n	8015b18 <pow+0x23c>
 8015a40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a44:	4619      	mov	r1, r3
 8015a46:	4610      	mov	r0, r2
 8015a48:	f7ea fffa 	bl	8000a40 <__aeabi_dcmpun>
 8015a4c:	f997 7000 	ldrsb.w	r7, [r7]
 8015a50:	4b49      	ldr	r3, [pc, #292]	; (8015b78 <pow+0x29c>)
 8015a52:	b1a0      	cbz	r0, 8015a7e <pow+0x1a2>
 8015a54:	2201      	movs	r2, #1
 8015a56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015a5a:	9b02      	ldr	r3, [sp, #8]
 8015a5c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015a60:	930c      	str	r3, [sp, #48]	; 0x30
 8015a62:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015a66:	2f00      	cmp	r7, #0
 8015a68:	d0c9      	beq.n	80159fe <pow+0x122>
 8015a6a:	4652      	mov	r2, sl
 8015a6c:	465b      	mov	r3, fp
 8015a6e:	4650      	mov	r0, sl
 8015a70:	4659      	mov	r1, fp
 8015a72:	f7ea fe75 	bl	8000760 <__aeabi_ddiv>
 8015a76:	2f02      	cmp	r7, #2
 8015a78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015a7c:	e7c7      	b.n	8015a0e <pow+0x132>
 8015a7e:	2203      	movs	r2, #3
 8015a80:	900c      	str	r0, [sp, #48]	; 0x30
 8015a82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015a86:	4620      	mov	r0, r4
 8015a88:	4629      	mov	r1, r5
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	4b3d      	ldr	r3, [pc, #244]	; (8015b84 <pow+0x2a8>)
 8015a8e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015a92:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015a96:	f7ea fd39 	bl	800050c <__aeabi_dmul>
 8015a9a:	4604      	mov	r4, r0
 8015a9c:	460d      	mov	r5, r1
 8015a9e:	bb17      	cbnz	r7, 8015ae6 <pow+0x20a>
 8015aa0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015aa4:	4b38      	ldr	r3, [pc, #224]	; (8015b88 <pow+0x2ac>)
 8015aa6:	4640      	mov	r0, r8
 8015aa8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015aac:	4649      	mov	r1, r9
 8015aae:	4652      	mov	r2, sl
 8015ab0:	465b      	mov	r3, fp
 8015ab2:	f7ea ff9d 	bl	80009f0 <__aeabi_dcmplt>
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	d054      	beq.n	8015b64 <pow+0x288>
 8015aba:	4620      	mov	r0, r4
 8015abc:	4629      	mov	r1, r5
 8015abe:	f003 fd3f 	bl	8019540 <rint>
 8015ac2:	4622      	mov	r2, r4
 8015ac4:	462b      	mov	r3, r5
 8015ac6:	f7ea ff89 	bl	80009dc <__aeabi_dcmpeq>
 8015aca:	b920      	cbnz	r0, 8015ad6 <pow+0x1fa>
 8015acc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015ad0:	4b2e      	ldr	r3, [pc, #184]	; (8015b8c <pow+0x2b0>)
 8015ad2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015ad6:	f996 3000 	ldrsb.w	r3, [r6]
 8015ada:	2b02      	cmp	r3, #2
 8015adc:	d142      	bne.n	8015b64 <pow+0x288>
 8015ade:	f7fb fcad 	bl	801143c <__errno>
 8015ae2:	2322      	movs	r3, #34	; 0x22
 8015ae4:	e797      	b.n	8015a16 <pow+0x13a>
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	4b29      	ldr	r3, [pc, #164]	; (8015b90 <pow+0x2b4>)
 8015aea:	4640      	mov	r0, r8
 8015aec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015af0:	4649      	mov	r1, r9
 8015af2:	4652      	mov	r2, sl
 8015af4:	465b      	mov	r3, fp
 8015af6:	f7ea ff7b 	bl	80009f0 <__aeabi_dcmplt>
 8015afa:	2800      	cmp	r0, #0
 8015afc:	d0eb      	beq.n	8015ad6 <pow+0x1fa>
 8015afe:	4620      	mov	r0, r4
 8015b00:	4629      	mov	r1, r5
 8015b02:	f003 fd1d 	bl	8019540 <rint>
 8015b06:	4622      	mov	r2, r4
 8015b08:	462b      	mov	r3, r5
 8015b0a:	f7ea ff67 	bl	80009dc <__aeabi_dcmpeq>
 8015b0e:	2800      	cmp	r0, #0
 8015b10:	d1e1      	bne.n	8015ad6 <pow+0x1fa>
 8015b12:	2200      	movs	r2, #0
 8015b14:	4b1a      	ldr	r3, [pc, #104]	; (8015b80 <pow+0x2a4>)
 8015b16:	e7dc      	b.n	8015ad2 <pow+0x1f6>
 8015b18:	2200      	movs	r2, #0
 8015b1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b1e:	2300      	movs	r3, #0
 8015b20:	f7ea ff5c 	bl	80009dc <__aeabi_dcmpeq>
 8015b24:	2800      	cmp	r0, #0
 8015b26:	f43f af4b 	beq.w	80159c0 <pow+0xe4>
 8015b2a:	4640      	mov	r0, r8
 8015b2c:	4649      	mov	r1, r9
 8015b2e:	f003 fc75 	bl	801941c <finite>
 8015b32:	2800      	cmp	r0, #0
 8015b34:	f43f af44 	beq.w	80159c0 <pow+0xe4>
 8015b38:	4620      	mov	r0, r4
 8015b3a:	4629      	mov	r1, r5
 8015b3c:	f003 fc6e 	bl	801941c <finite>
 8015b40:	2800      	cmp	r0, #0
 8015b42:	f43f af3d 	beq.w	80159c0 <pow+0xe4>
 8015b46:	2304      	movs	r3, #4
 8015b48:	9304      	str	r3, [sp, #16]
 8015b4a:	4b0b      	ldr	r3, [pc, #44]	; (8015b78 <pow+0x29c>)
 8015b4c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8015b50:	9305      	str	r3, [sp, #20]
 8015b52:	2300      	movs	r3, #0
 8015b54:	2400      	movs	r4, #0
 8015b56:	930c      	str	r3, [sp, #48]	; 0x30
 8015b58:	2300      	movs	r3, #0
 8015b5a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015b5e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8015b62:	e7b8      	b.n	8015ad6 <pow+0x1fa>
 8015b64:	a804      	add	r0, sp, #16
 8015b66:	f003 fce3 	bl	8019530 <matherr>
 8015b6a:	2800      	cmp	r0, #0
 8015b6c:	f47f af1e 	bne.w	80159ac <pow+0xd0>
 8015b70:	e7b5      	b.n	8015ade <pow+0x202>
 8015b72:	bf00      	nop
 8015b74:	20000230 	.word	0x20000230
 8015b78:	0801a30d 	.word	0x0801a30d
 8015b7c:	3ff00000 	.word	0x3ff00000
 8015b80:	fff00000 	.word	0xfff00000
 8015b84:	3fe00000 	.word	0x3fe00000
 8015b88:	47efffff 	.word	0x47efffff
 8015b8c:	c7efffff 	.word	0xc7efffff
 8015b90:	7ff00000 	.word	0x7ff00000

08015b94 <sqrt>:
 8015b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b98:	b08b      	sub	sp, #44	; 0x2c
 8015b9a:	4604      	mov	r4, r0
 8015b9c:	460d      	mov	r5, r1
 8015b9e:	f001 fae3 	bl	8017168 <__ieee754_sqrt>
 8015ba2:	4b24      	ldr	r3, [pc, #144]	; (8015c34 <sqrt+0xa0>)
 8015ba4:	4680      	mov	r8, r0
 8015ba6:	f993 a000 	ldrsb.w	sl, [r3]
 8015baa:	4689      	mov	r9, r1
 8015bac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8015bb0:	d02b      	beq.n	8015c0a <sqrt+0x76>
 8015bb2:	4622      	mov	r2, r4
 8015bb4:	462b      	mov	r3, r5
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	4629      	mov	r1, r5
 8015bba:	f7ea ff41 	bl	8000a40 <__aeabi_dcmpun>
 8015bbe:	4683      	mov	fp, r0
 8015bc0:	bb18      	cbnz	r0, 8015c0a <sqrt+0x76>
 8015bc2:	2600      	movs	r6, #0
 8015bc4:	2700      	movs	r7, #0
 8015bc6:	4632      	mov	r2, r6
 8015bc8:	463b      	mov	r3, r7
 8015bca:	4620      	mov	r0, r4
 8015bcc:	4629      	mov	r1, r5
 8015bce:	f7ea ff0f 	bl	80009f0 <__aeabi_dcmplt>
 8015bd2:	b1d0      	cbz	r0, 8015c0a <sqrt+0x76>
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	9300      	str	r3, [sp, #0]
 8015bd8:	4b17      	ldr	r3, [pc, #92]	; (8015c38 <sqrt+0xa4>)
 8015bda:	f8cd b020 	str.w	fp, [sp, #32]
 8015bde:	9301      	str	r3, [sp, #4]
 8015be0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015be4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015be8:	f1ba 0f00 	cmp.w	sl, #0
 8015bec:	d112      	bne.n	8015c14 <sqrt+0x80>
 8015bee:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015bf2:	4668      	mov	r0, sp
 8015bf4:	f003 fc9c 	bl	8019530 <matherr>
 8015bf8:	b1b8      	cbz	r0, 8015c2a <sqrt+0x96>
 8015bfa:	9b08      	ldr	r3, [sp, #32]
 8015bfc:	b11b      	cbz	r3, 8015c06 <sqrt+0x72>
 8015bfe:	f7fb fc1d 	bl	801143c <__errno>
 8015c02:	9b08      	ldr	r3, [sp, #32]
 8015c04:	6003      	str	r3, [r0, #0]
 8015c06:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8015c0a:	4640      	mov	r0, r8
 8015c0c:	4649      	mov	r1, r9
 8015c0e:	b00b      	add	sp, #44	; 0x2c
 8015c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c14:	4632      	mov	r2, r6
 8015c16:	463b      	mov	r3, r7
 8015c18:	4630      	mov	r0, r6
 8015c1a:	4639      	mov	r1, r7
 8015c1c:	f7ea fda0 	bl	8000760 <__aeabi_ddiv>
 8015c20:	f1ba 0f02 	cmp.w	sl, #2
 8015c24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015c28:	d1e3      	bne.n	8015bf2 <sqrt+0x5e>
 8015c2a:	f7fb fc07 	bl	801143c <__errno>
 8015c2e:	2321      	movs	r3, #33	; 0x21
 8015c30:	6003      	str	r3, [r0, #0]
 8015c32:	e7e2      	b.n	8015bfa <sqrt+0x66>
 8015c34:	20000230 	.word	0x20000230
 8015c38:	0801a311 	.word	0x0801a311

08015c3c <asinf>:
 8015c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c3e:	b08b      	sub	sp, #44	; 0x2c
 8015c40:	4604      	mov	r4, r0
 8015c42:	f001 fb3d 	bl	80172c0 <__ieee754_asinf>
 8015c46:	4e21      	ldr	r6, [pc, #132]	; (8015ccc <asinf+0x90>)
 8015c48:	4605      	mov	r5, r0
 8015c4a:	f996 3000 	ldrsb.w	r3, [r6]
 8015c4e:	3301      	adds	r3, #1
 8015c50:	d038      	beq.n	8015cc4 <asinf+0x88>
 8015c52:	4621      	mov	r1, r4
 8015c54:	4620      	mov	r0, r4
 8015c56:	f7eb fa75 	bl	8001144 <__aeabi_fcmpun>
 8015c5a:	4607      	mov	r7, r0
 8015c5c:	2800      	cmp	r0, #0
 8015c5e:	d131      	bne.n	8015cc4 <asinf+0x88>
 8015c60:	4620      	mov	r0, r4
 8015c62:	f003 fe73 	bl	801994c <fabsf>
 8015c66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015c6a:	f7eb fa61 	bl	8001130 <__aeabi_fcmpgt>
 8015c6e:	b348      	cbz	r0, 8015cc4 <asinf+0x88>
 8015c70:	2301      	movs	r3, #1
 8015c72:	9300      	str	r3, [sp, #0]
 8015c74:	4b16      	ldr	r3, [pc, #88]	; (8015cd0 <asinf+0x94>)
 8015c76:	4620      	mov	r0, r4
 8015c78:	9301      	str	r3, [sp, #4]
 8015c7a:	9708      	str	r7, [sp, #32]
 8015c7c:	f7ea fbee 	bl	800045c <__aeabi_f2d>
 8015c80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c88:	4812      	ldr	r0, [pc, #72]	; (8015cd4 <asinf+0x98>)
 8015c8a:	f003 fc53 	bl	8019534 <nan>
 8015c8e:	f996 3000 	ldrsb.w	r3, [r6]
 8015c92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015c96:	2b02      	cmp	r3, #2
 8015c98:	d104      	bne.n	8015ca4 <asinf+0x68>
 8015c9a:	f7fb fbcf 	bl	801143c <__errno>
 8015c9e:	2321      	movs	r3, #33	; 0x21
 8015ca0:	6003      	str	r3, [r0, #0]
 8015ca2:	e004      	b.n	8015cae <asinf+0x72>
 8015ca4:	4668      	mov	r0, sp
 8015ca6:	f003 fc43 	bl	8019530 <matherr>
 8015caa:	2800      	cmp	r0, #0
 8015cac:	d0f5      	beq.n	8015c9a <asinf+0x5e>
 8015cae:	9b08      	ldr	r3, [sp, #32]
 8015cb0:	b11b      	cbz	r3, 8015cba <asinf+0x7e>
 8015cb2:	f7fb fbc3 	bl	801143c <__errno>
 8015cb6:	9b08      	ldr	r3, [sp, #32]
 8015cb8:	6003      	str	r3, [r0, #0]
 8015cba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015cbe:	f7ea ff1d 	bl	8000afc <__aeabi_d2f>
 8015cc2:	4605      	mov	r5, r0
 8015cc4:	4628      	mov	r0, r5
 8015cc6:	b00b      	add	sp, #44	; 0x2c
 8015cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cca:	bf00      	nop
 8015ccc:	20000230 	.word	0x20000230
 8015cd0:	0801a316 	.word	0x0801a316
 8015cd4:	0801a2f1 	.word	0x0801a2f1

08015cd8 <atan2f>:
 8015cd8:	f001 bc34 	b.w	8017544 <__ieee754_atan2f>

08015cdc <powf>:
 8015cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce0:	b08d      	sub	sp, #52	; 0x34
 8015ce2:	4605      	mov	r5, r0
 8015ce4:	460c      	mov	r4, r1
 8015ce6:	f001 fcbd 	bl	8017664 <__ieee754_powf>
 8015cea:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8015f98 <powf+0x2bc>
 8015cee:	4606      	mov	r6, r0
 8015cf0:	f998 9000 	ldrsb.w	r9, [r8]
 8015cf4:	4647      	mov	r7, r8
 8015cf6:	f1b9 3fff 	cmp.w	r9, #4294967295
 8015cfa:	d060      	beq.n	8015dbe <powf+0xe2>
 8015cfc:	4621      	mov	r1, r4
 8015cfe:	4620      	mov	r0, r4
 8015d00:	f7eb fa20 	bl	8001144 <__aeabi_fcmpun>
 8015d04:	4683      	mov	fp, r0
 8015d06:	2800      	cmp	r0, #0
 8015d08:	d159      	bne.n	8015dbe <powf+0xe2>
 8015d0a:	4629      	mov	r1, r5
 8015d0c:	4628      	mov	r0, r5
 8015d0e:	f7eb fa19 	bl	8001144 <__aeabi_fcmpun>
 8015d12:	2100      	movs	r1, #0
 8015d14:	4682      	mov	sl, r0
 8015d16:	b300      	cbz	r0, 8015d5a <powf+0x7e>
 8015d18:	4620      	mov	r0, r4
 8015d1a:	f7eb f9e1 	bl	80010e0 <__aeabi_fcmpeq>
 8015d1e:	2800      	cmp	r0, #0
 8015d20:	d04d      	beq.n	8015dbe <powf+0xe2>
 8015d22:	2301      	movs	r3, #1
 8015d24:	9302      	str	r3, [sp, #8]
 8015d26:	4b96      	ldr	r3, [pc, #600]	; (8015f80 <powf+0x2a4>)
 8015d28:	4628      	mov	r0, r5
 8015d2a:	9303      	str	r3, [sp, #12]
 8015d2c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015d30:	f7ea fb94 	bl	800045c <__aeabi_f2d>
 8015d34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d38:	4620      	mov	r0, r4
 8015d3a:	f7ea fb8f 	bl	800045c <__aeabi_f2d>
 8015d3e:	2200      	movs	r2, #0
 8015d40:	4b90      	ldr	r3, [pc, #576]	; (8015f84 <powf+0x2a8>)
 8015d42:	f1b9 0f02 	cmp.w	r9, #2
 8015d46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015d4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015d4e:	d031      	beq.n	8015db4 <powf+0xd8>
 8015d50:	a802      	add	r0, sp, #8
 8015d52:	f003 fbed 	bl	8019530 <matherr>
 8015d56:	bb38      	cbnz	r0, 8015da8 <powf+0xcc>
 8015d58:	e05d      	b.n	8015e16 <powf+0x13a>
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	f7eb f9c0 	bl	80010e0 <__aeabi_fcmpeq>
 8015d60:	2800      	cmp	r0, #0
 8015d62:	d05d      	beq.n	8015e20 <powf+0x144>
 8015d64:	2100      	movs	r1, #0
 8015d66:	4620      	mov	r0, r4
 8015d68:	f7eb f9ba 	bl	80010e0 <__aeabi_fcmpeq>
 8015d6c:	4607      	mov	r7, r0
 8015d6e:	2800      	cmp	r0, #0
 8015d70:	d029      	beq.n	8015dc6 <powf+0xea>
 8015d72:	2301      	movs	r3, #1
 8015d74:	9302      	str	r3, [sp, #8]
 8015d76:	4b82      	ldr	r3, [pc, #520]	; (8015f80 <powf+0x2a4>)
 8015d78:	4628      	mov	r0, r5
 8015d7a:	9303      	str	r3, [sp, #12]
 8015d7c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8015d80:	f7ea fb6c 	bl	800045c <__aeabi_f2d>
 8015d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d88:	4620      	mov	r0, r4
 8015d8a:	f7ea fb67 	bl	800045c <__aeabi_f2d>
 8015d8e:	2200      	movs	r2, #0
 8015d90:	2300      	movs	r3, #0
 8015d92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015d96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015d9a:	f1b9 0f00 	cmp.w	r9, #0
 8015d9e:	d0d7      	beq.n	8015d50 <powf+0x74>
 8015da0:	2200      	movs	r2, #0
 8015da2:	4b78      	ldr	r3, [pc, #480]	; (8015f84 <powf+0x2a8>)
 8015da4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015daa:	b11b      	cbz	r3, 8015db4 <powf+0xd8>
 8015dac:	f7fb fb46 	bl	801143c <__errno>
 8015db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015db2:	6003      	str	r3, [r0, #0]
 8015db4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015db8:	f7ea fea0 	bl	8000afc <__aeabi_d2f>
 8015dbc:	4606      	mov	r6, r0
 8015dbe:	4630      	mov	r0, r6
 8015dc0:	b00d      	add	sp, #52	; 0x34
 8015dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dc6:	4620      	mov	r0, r4
 8015dc8:	f003 fdc3 	bl	8019952 <finitef>
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	d0f6      	beq.n	8015dbe <powf+0xe2>
 8015dd0:	2100      	movs	r1, #0
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	f7eb f98e 	bl	80010f4 <__aeabi_fcmplt>
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	d0f0      	beq.n	8015dbe <powf+0xe2>
 8015ddc:	2301      	movs	r3, #1
 8015dde:	9302      	str	r3, [sp, #8]
 8015de0:	4b67      	ldr	r3, [pc, #412]	; (8015f80 <powf+0x2a4>)
 8015de2:	4628      	mov	r0, r5
 8015de4:	9303      	str	r3, [sp, #12]
 8015de6:	970a      	str	r7, [sp, #40]	; 0x28
 8015de8:	f7ea fb38 	bl	800045c <__aeabi_f2d>
 8015dec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015df0:	4620      	mov	r0, r4
 8015df2:	f7ea fb33 	bl	800045c <__aeabi_f2d>
 8015df6:	f998 3000 	ldrsb.w	r3, [r8]
 8015dfa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015dfe:	b923      	cbnz	r3, 8015e0a <powf+0x12e>
 8015e00:	2200      	movs	r2, #0
 8015e02:	2300      	movs	r3, #0
 8015e04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015e08:	e7a2      	b.n	8015d50 <powf+0x74>
 8015e0a:	2000      	movs	r0, #0
 8015e0c:	495e      	ldr	r1, [pc, #376]	; (8015f88 <powf+0x2ac>)
 8015e0e:	2b02      	cmp	r3, #2
 8015e10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015e14:	d19c      	bne.n	8015d50 <powf+0x74>
 8015e16:	f7fb fb11 	bl	801143c <__errno>
 8015e1a:	2321      	movs	r3, #33	; 0x21
 8015e1c:	6003      	str	r3, [r0, #0]
 8015e1e:	e7c3      	b.n	8015da8 <powf+0xcc>
 8015e20:	4630      	mov	r0, r6
 8015e22:	f003 fd96 	bl	8019952 <finitef>
 8015e26:	4681      	mov	r9, r0
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	d17b      	bne.n	8015f24 <powf+0x248>
 8015e2c:	4628      	mov	r0, r5
 8015e2e:	f003 fd90 	bl	8019952 <finitef>
 8015e32:	2800      	cmp	r0, #0
 8015e34:	d076      	beq.n	8015f24 <powf+0x248>
 8015e36:	4620      	mov	r0, r4
 8015e38:	f003 fd8b 	bl	8019952 <finitef>
 8015e3c:	2800      	cmp	r0, #0
 8015e3e:	d071      	beq.n	8015f24 <powf+0x248>
 8015e40:	4628      	mov	r0, r5
 8015e42:	f7ea fb0b 	bl	800045c <__aeabi_f2d>
 8015e46:	4682      	mov	sl, r0
 8015e48:	4620      	mov	r0, r4
 8015e4a:	468b      	mov	fp, r1
 8015e4c:	f7ea fb06 	bl	800045c <__aeabi_f2d>
 8015e50:	4602      	mov	r2, r0
 8015e52:	460b      	mov	r3, r1
 8015e54:	4630      	mov	r0, r6
 8015e56:	4631      	mov	r1, r6
 8015e58:	e9cd 2300 	strd	r2, r3, [sp]
 8015e5c:	f7eb f972 	bl	8001144 <__aeabi_fcmpun>
 8015e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e64:	f998 8000 	ldrsb.w	r8, [r8]
 8015e68:	4945      	ldr	r1, [pc, #276]	; (8015f80 <powf+0x2a4>)
 8015e6a:	b1b0      	cbz	r0, 8015e9a <powf+0x1be>
 8015e6c:	2001      	movs	r0, #1
 8015e6e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8015e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015e76:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015e7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015e7e:	f1b8 0f00 	cmp.w	r8, #0
 8015e82:	d0bd      	beq.n	8015e00 <powf+0x124>
 8015e84:	2100      	movs	r1, #0
 8015e86:	4608      	mov	r0, r1
 8015e88:	f7eb f84a 	bl	8000f20 <__aeabi_fdiv>
 8015e8c:	f7ea fae6 	bl	800045c <__aeabi_f2d>
 8015e90:	f1b8 0f02 	cmp.w	r8, #2
 8015e94:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015e98:	e7bc      	b.n	8015e14 <powf+0x138>
 8015e9a:	2603      	movs	r6, #3
 8015e9c:	900a      	str	r0, [sp, #40]	; 0x28
 8015e9e:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8015ea2:	4620      	mov	r0, r4
 8015ea4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015ea8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015eac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015eb0:	f7ea ff82 	bl	8000db8 <__aeabi_fmul>
 8015eb4:	4604      	mov	r4, r0
 8015eb6:	f1b8 0f00 	cmp.w	r8, #0
 8015eba:	d11e      	bne.n	8015efa <powf+0x21e>
 8015ebc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015ec0:	4b32      	ldr	r3, [pc, #200]	; (8015f8c <powf+0x2b0>)
 8015ec2:	2100      	movs	r1, #0
 8015ec4:	4628      	mov	r0, r5
 8015ec6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015eca:	f7eb f913 	bl	80010f4 <__aeabi_fcmplt>
 8015ece:	2800      	cmp	r0, #0
 8015ed0:	d04e      	beq.n	8015f70 <powf+0x294>
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	f003 fd86 	bl	80199e4 <rintf>
 8015ed8:	4621      	mov	r1, r4
 8015eda:	f7eb f901 	bl	80010e0 <__aeabi_fcmpeq>
 8015ede:	b920      	cbnz	r0, 8015eea <powf+0x20e>
 8015ee0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015ee4:	4b2a      	ldr	r3, [pc, #168]	; (8015f90 <powf+0x2b4>)
 8015ee6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015eea:	f997 3000 	ldrsb.w	r3, [r7]
 8015eee:	2b02      	cmp	r3, #2
 8015ef0:	d13e      	bne.n	8015f70 <powf+0x294>
 8015ef2:	f7fb faa3 	bl	801143c <__errno>
 8015ef6:	2322      	movs	r3, #34	; 0x22
 8015ef8:	e790      	b.n	8015e1c <powf+0x140>
 8015efa:	2200      	movs	r2, #0
 8015efc:	4b25      	ldr	r3, [pc, #148]	; (8015f94 <powf+0x2b8>)
 8015efe:	2100      	movs	r1, #0
 8015f00:	4628      	mov	r0, r5
 8015f02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015f06:	f7eb f8f5 	bl	80010f4 <__aeabi_fcmplt>
 8015f0a:	2800      	cmp	r0, #0
 8015f0c:	d0ed      	beq.n	8015eea <powf+0x20e>
 8015f0e:	4620      	mov	r0, r4
 8015f10:	f003 fd68 	bl	80199e4 <rintf>
 8015f14:	4621      	mov	r1, r4
 8015f16:	f7eb f8e3 	bl	80010e0 <__aeabi_fcmpeq>
 8015f1a:	2800      	cmp	r0, #0
 8015f1c:	d1e5      	bne.n	8015eea <powf+0x20e>
 8015f1e:	2200      	movs	r2, #0
 8015f20:	4b19      	ldr	r3, [pc, #100]	; (8015f88 <powf+0x2ac>)
 8015f22:	e7e0      	b.n	8015ee6 <powf+0x20a>
 8015f24:	2100      	movs	r1, #0
 8015f26:	4630      	mov	r0, r6
 8015f28:	f7eb f8da 	bl	80010e0 <__aeabi_fcmpeq>
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	f43f af46 	beq.w	8015dbe <powf+0xe2>
 8015f32:	4628      	mov	r0, r5
 8015f34:	f003 fd0d 	bl	8019952 <finitef>
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	f43f af40 	beq.w	8015dbe <powf+0xe2>
 8015f3e:	4620      	mov	r0, r4
 8015f40:	f003 fd07 	bl	8019952 <finitef>
 8015f44:	2800      	cmp	r0, #0
 8015f46:	f43f af3a 	beq.w	8015dbe <powf+0xe2>
 8015f4a:	2304      	movs	r3, #4
 8015f4c:	9302      	str	r3, [sp, #8]
 8015f4e:	4b0c      	ldr	r3, [pc, #48]	; (8015f80 <powf+0x2a4>)
 8015f50:	4628      	mov	r0, r5
 8015f52:	9303      	str	r3, [sp, #12]
 8015f54:	2300      	movs	r3, #0
 8015f56:	930a      	str	r3, [sp, #40]	; 0x28
 8015f58:	f7ea fa80 	bl	800045c <__aeabi_f2d>
 8015f5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015f60:	4620      	mov	r0, r4
 8015f62:	f7ea fa7b 	bl	800045c <__aeabi_f2d>
 8015f66:	2200      	movs	r2, #0
 8015f68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	e7ba      	b.n	8015ee6 <powf+0x20a>
 8015f70:	a802      	add	r0, sp, #8
 8015f72:	f003 fadd 	bl	8019530 <matherr>
 8015f76:	2800      	cmp	r0, #0
 8015f78:	f47f af16 	bne.w	8015da8 <powf+0xcc>
 8015f7c:	e7b9      	b.n	8015ef2 <powf+0x216>
 8015f7e:	bf00      	nop
 8015f80:	0801a31c 	.word	0x0801a31c
 8015f84:	3ff00000 	.word	0x3ff00000
 8015f88:	fff00000 	.word	0xfff00000
 8015f8c:	47efffff 	.word	0x47efffff
 8015f90:	c7efffff 	.word	0xc7efffff
 8015f94:	7ff00000 	.word	0x7ff00000
 8015f98:	20000230 	.word	0x20000230
 8015f9c:	00000000 	.word	0x00000000

08015fa0 <__ieee754_atan2>:
 8015fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fa4:	4256      	negs	r6, r2
 8015fa6:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8015faa:	4316      	orrs	r6, r2
 8015fac:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8016158 <__ieee754_atan2+0x1b8>
 8015fb0:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8015fb4:	454e      	cmp	r6, r9
 8015fb6:	4604      	mov	r4, r0
 8015fb8:	460d      	mov	r5, r1
 8015fba:	469e      	mov	lr, r3
 8015fbc:	d808      	bhi.n	8015fd0 <__ieee754_atan2+0x30>
 8015fbe:	4246      	negs	r6, r0
 8015fc0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8015fc4:	4306      	orrs	r6, r0
 8015fc6:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8015fca:	454e      	cmp	r6, r9
 8015fcc:	4688      	mov	r8, r1
 8015fce:	d906      	bls.n	8015fde <__ieee754_atan2+0x3e>
 8015fd0:	4620      	mov	r0, r4
 8015fd2:	4629      	mov	r1, r5
 8015fd4:	f7ea f8e4 	bl	80001a0 <__adddf3>
 8015fd8:	4604      	mov	r4, r0
 8015fda:	460d      	mov	r5, r1
 8015fdc:	e030      	b.n	8016040 <__ieee754_atan2+0xa0>
 8015fde:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8015fe2:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8015fe6:	4316      	orrs	r6, r2
 8015fe8:	d103      	bne.n	8015ff2 <__ieee754_atan2+0x52>
 8015fea:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fee:	f003 b887 	b.w	8019100 <atan>
 8015ff2:	179e      	asrs	r6, r3, #30
 8015ff4:	f006 0602 	and.w	r6, r6, #2
 8015ff8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8015ffc:	ea57 0100 	orrs.w	r1, r7, r0
 8016000:	d107      	bne.n	8016012 <__ieee754_atan2+0x72>
 8016002:	2e02      	cmp	r6, #2
 8016004:	d079      	beq.n	80160fa <__ieee754_atan2+0x15a>
 8016006:	2e03      	cmp	r6, #3
 8016008:	d11a      	bne.n	8016040 <__ieee754_atan2+0xa0>
 801600a:	a541      	add	r5, pc, #260	; (adr r5, 8016110 <__ieee754_atan2+0x170>)
 801600c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016010:	e016      	b.n	8016040 <__ieee754_atan2+0xa0>
 8016012:	ea5c 0102 	orrs.w	r1, ip, r2
 8016016:	d106      	bne.n	8016026 <__ieee754_atan2+0x86>
 8016018:	f1b8 0f00 	cmp.w	r8, #0
 801601c:	da71      	bge.n	8016102 <__ieee754_atan2+0x162>
 801601e:	a53e      	add	r5, pc, #248	; (adr r5, 8016118 <__ieee754_atan2+0x178>)
 8016020:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016024:	e00c      	b.n	8016040 <__ieee754_atan2+0xa0>
 8016026:	45cc      	cmp	ip, r9
 8016028:	d123      	bne.n	8016072 <__ieee754_atan2+0xd2>
 801602a:	4567      	cmp	r7, ip
 801602c:	d114      	bne.n	8016058 <__ieee754_atan2+0xb8>
 801602e:	2e02      	cmp	r6, #2
 8016030:	d00a      	beq.n	8016048 <__ieee754_atan2+0xa8>
 8016032:	2e03      	cmp	r6, #3
 8016034:	d00c      	beq.n	8016050 <__ieee754_atan2+0xb0>
 8016036:	2e01      	cmp	r6, #1
 8016038:	d15b      	bne.n	80160f2 <__ieee754_atan2+0x152>
 801603a:	a539      	add	r5, pc, #228	; (adr r5, 8016120 <__ieee754_atan2+0x180>)
 801603c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016040:	4620      	mov	r0, r4
 8016042:	4629      	mov	r1, r5
 8016044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016048:	a537      	add	r5, pc, #220	; (adr r5, 8016128 <__ieee754_atan2+0x188>)
 801604a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801604e:	e7f7      	b.n	8016040 <__ieee754_atan2+0xa0>
 8016050:	a537      	add	r5, pc, #220	; (adr r5, 8016130 <__ieee754_atan2+0x190>)
 8016052:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016056:	e7f3      	b.n	8016040 <__ieee754_atan2+0xa0>
 8016058:	2e02      	cmp	r6, #2
 801605a:	d04e      	beq.n	80160fa <__ieee754_atan2+0x15a>
 801605c:	2e03      	cmp	r6, #3
 801605e:	d0d4      	beq.n	801600a <__ieee754_atan2+0x6a>
 8016060:	2e01      	cmp	r6, #1
 8016062:	f04f 0400 	mov.w	r4, #0
 8016066:	d102      	bne.n	801606e <__ieee754_atan2+0xce>
 8016068:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 801606c:	e7e8      	b.n	8016040 <__ieee754_atan2+0xa0>
 801606e:	2500      	movs	r5, #0
 8016070:	e7e6      	b.n	8016040 <__ieee754_atan2+0xa0>
 8016072:	454f      	cmp	r7, r9
 8016074:	d0d0      	beq.n	8016018 <__ieee754_atan2+0x78>
 8016076:	eba7 070c 	sub.w	r7, r7, ip
 801607a:	153f      	asrs	r7, r7, #20
 801607c:	2f3c      	cmp	r7, #60	; 0x3c
 801607e:	dc1e      	bgt.n	80160be <__ieee754_atan2+0x11e>
 8016080:	2b00      	cmp	r3, #0
 8016082:	da01      	bge.n	8016088 <__ieee754_atan2+0xe8>
 8016084:	373c      	adds	r7, #60	; 0x3c
 8016086:	db1e      	blt.n	80160c6 <__ieee754_atan2+0x126>
 8016088:	4620      	mov	r0, r4
 801608a:	4629      	mov	r1, r5
 801608c:	f7ea fb68 	bl	8000760 <__aeabi_ddiv>
 8016090:	f003 f9c0 	bl	8019414 <fabs>
 8016094:	f003 f834 	bl	8019100 <atan>
 8016098:	4604      	mov	r4, r0
 801609a:	460d      	mov	r5, r1
 801609c:	2e01      	cmp	r6, #1
 801609e:	d015      	beq.n	80160cc <__ieee754_atan2+0x12c>
 80160a0:	2e02      	cmp	r6, #2
 80160a2:	d017      	beq.n	80160d4 <__ieee754_atan2+0x134>
 80160a4:	2e00      	cmp	r6, #0
 80160a6:	d0cb      	beq.n	8016040 <__ieee754_atan2+0xa0>
 80160a8:	a323      	add	r3, pc, #140	; (adr r3, 8016138 <__ieee754_atan2+0x198>)
 80160aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ae:	4620      	mov	r0, r4
 80160b0:	4629      	mov	r1, r5
 80160b2:	f7ea f873 	bl	800019c <__aeabi_dsub>
 80160b6:	a322      	add	r3, pc, #136	; (adr r3, 8016140 <__ieee754_atan2+0x1a0>)
 80160b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160bc:	e016      	b.n	80160ec <__ieee754_atan2+0x14c>
 80160be:	a522      	add	r5, pc, #136	; (adr r5, 8016148 <__ieee754_atan2+0x1a8>)
 80160c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80160c4:	e7ea      	b.n	801609c <__ieee754_atan2+0xfc>
 80160c6:	2400      	movs	r4, #0
 80160c8:	2500      	movs	r5, #0
 80160ca:	e7e7      	b.n	801609c <__ieee754_atan2+0xfc>
 80160cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80160d0:	461d      	mov	r5, r3
 80160d2:	e7b5      	b.n	8016040 <__ieee754_atan2+0xa0>
 80160d4:	a318      	add	r3, pc, #96	; (adr r3, 8016138 <__ieee754_atan2+0x198>)
 80160d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160da:	4620      	mov	r0, r4
 80160dc:	4629      	mov	r1, r5
 80160de:	f7ea f85d 	bl	800019c <__aeabi_dsub>
 80160e2:	4602      	mov	r2, r0
 80160e4:	460b      	mov	r3, r1
 80160e6:	a116      	add	r1, pc, #88	; (adr r1, 8016140 <__ieee754_atan2+0x1a0>)
 80160e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160ec:	f7ea f856 	bl	800019c <__aeabi_dsub>
 80160f0:	e772      	b.n	8015fd8 <__ieee754_atan2+0x38>
 80160f2:	a517      	add	r5, pc, #92	; (adr r5, 8016150 <__ieee754_atan2+0x1b0>)
 80160f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80160f8:	e7a2      	b.n	8016040 <__ieee754_atan2+0xa0>
 80160fa:	a511      	add	r5, pc, #68	; (adr r5, 8016140 <__ieee754_atan2+0x1a0>)
 80160fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016100:	e79e      	b.n	8016040 <__ieee754_atan2+0xa0>
 8016102:	a511      	add	r5, pc, #68	; (adr r5, 8016148 <__ieee754_atan2+0x1a8>)
 8016104:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016108:	e79a      	b.n	8016040 <__ieee754_atan2+0xa0>
 801610a:	bf00      	nop
 801610c:	f3af 8000 	nop.w
 8016110:	54442d18 	.word	0x54442d18
 8016114:	c00921fb 	.word	0xc00921fb
 8016118:	54442d18 	.word	0x54442d18
 801611c:	bff921fb 	.word	0xbff921fb
 8016120:	54442d18 	.word	0x54442d18
 8016124:	bfe921fb 	.word	0xbfe921fb
 8016128:	7f3321d2 	.word	0x7f3321d2
 801612c:	4002d97c 	.word	0x4002d97c
 8016130:	7f3321d2 	.word	0x7f3321d2
 8016134:	c002d97c 	.word	0xc002d97c
 8016138:	33145c07 	.word	0x33145c07
 801613c:	3ca1a626 	.word	0x3ca1a626
 8016140:	54442d18 	.word	0x54442d18
 8016144:	400921fb 	.word	0x400921fb
 8016148:	54442d18 	.word	0x54442d18
 801614c:	3ff921fb 	.word	0x3ff921fb
 8016150:	54442d18 	.word	0x54442d18
 8016154:	3fe921fb 	.word	0x3fe921fb
 8016158:	7ff00000 	.word	0x7ff00000

0801615c <__ieee754_fmod>:
 801615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016160:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8016164:	4682      	mov	sl, r0
 8016166:	ea54 0002 	orrs.w	r0, r4, r2
 801616a:	461e      	mov	r6, r3
 801616c:	4694      	mov	ip, r2
 801616e:	4696      	mov	lr, r2
 8016170:	d00c      	beq.n	801618c <__ieee754_fmod+0x30>
 8016172:	4d78      	ldr	r5, [pc, #480]	; (8016354 <__ieee754_fmod+0x1f8>)
 8016174:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8016178:	45a8      	cmp	r8, r5
 801617a:	4689      	mov	r9, r1
 801617c:	dc06      	bgt.n	801618c <__ieee754_fmod+0x30>
 801617e:	4255      	negs	r5, r2
 8016180:	4315      	orrs	r5, r2
 8016182:	4f75      	ldr	r7, [pc, #468]	; (8016358 <__ieee754_fmod+0x1fc>)
 8016184:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 8016188:	42bd      	cmp	r5, r7
 801618a:	d908      	bls.n	801619e <__ieee754_fmod+0x42>
 801618c:	4650      	mov	r0, sl
 801618e:	f7ea f9bd 	bl	800050c <__aeabi_dmul>
 8016192:	4602      	mov	r2, r0
 8016194:	460b      	mov	r3, r1
 8016196:	f7ea fae3 	bl	8000760 <__aeabi_ddiv>
 801619a:	4682      	mov	sl, r0
 801619c:	e00f      	b.n	80161be <__ieee754_fmod+0x62>
 801619e:	45a0      	cmp	r8, r4
 80161a0:	4652      	mov	r2, sl
 80161a2:	4657      	mov	r7, sl
 80161a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80161a8:	dc0c      	bgt.n	80161c4 <__ieee754_fmod+0x68>
 80161aa:	db08      	blt.n	80161be <__ieee754_fmod+0x62>
 80161ac:	45e2      	cmp	sl, ip
 80161ae:	d306      	bcc.n	80161be <__ieee754_fmod+0x62>
 80161b0:	d108      	bne.n	80161c4 <__ieee754_fmod+0x68>
 80161b2:	496a      	ldr	r1, [pc, #424]	; (801635c <__ieee754_fmod+0x200>)
 80161b4:	0fed      	lsrs	r5, r5, #31
 80161b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80161ba:	e9d5 a100 	ldrd	sl, r1, [r5]
 80161be:	4650      	mov	r0, sl
 80161c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161c4:	4b66      	ldr	r3, [pc, #408]	; (8016360 <__ieee754_fmod+0x204>)
 80161c6:	4598      	cmp	r8, r3
 80161c8:	dc48      	bgt.n	801625c <__ieee754_fmod+0x100>
 80161ca:	f1b8 0f00 	cmp.w	r8, #0
 80161ce:	d13c      	bne.n	801624a <__ieee754_fmod+0xee>
 80161d0:	4611      	mov	r1, r2
 80161d2:	4864      	ldr	r0, [pc, #400]	; (8016364 <__ieee754_fmod+0x208>)
 80161d4:	2900      	cmp	r1, #0
 80161d6:	dc35      	bgt.n	8016244 <__ieee754_fmod+0xe8>
 80161d8:	429c      	cmp	r4, r3
 80161da:	dc4f      	bgt.n	801627c <__ieee754_fmod+0x120>
 80161dc:	2c00      	cmp	r4, #0
 80161de:	d145      	bne.n	801626c <__ieee754_fmod+0x110>
 80161e0:	4661      	mov	r1, ip
 80161e2:	4b60      	ldr	r3, [pc, #384]	; (8016364 <__ieee754_fmod+0x208>)
 80161e4:	2900      	cmp	r1, #0
 80161e6:	dc3e      	bgt.n	8016266 <__ieee754_fmod+0x10a>
 80161e8:	495f      	ldr	r1, [pc, #380]	; (8016368 <__ieee754_fmod+0x20c>)
 80161ea:	4288      	cmp	r0, r1
 80161ec:	db4a      	blt.n	8016284 <__ieee754_fmod+0x128>
 80161ee:	f3c9 0113 	ubfx	r1, r9, #0, #20
 80161f2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80161f6:	4a5c      	ldr	r2, [pc, #368]	; (8016368 <__ieee754_fmod+0x20c>)
 80161f8:	4293      	cmp	r3, r2
 80161fa:	db57      	blt.n	80162ac <__ieee754_fmod+0x150>
 80161fc:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8016200:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8016204:	1ac0      	subs	r0, r0, r3
 8016206:	1b8a      	subs	r2, r1, r6
 8016208:	eba7 040e 	sub.w	r4, r7, lr
 801620c:	2800      	cmp	r0, #0
 801620e:	d163      	bne.n	80162d8 <__ieee754_fmod+0x17c>
 8016210:	4577      	cmp	r7, lr
 8016212:	bf38      	it	cc
 8016214:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8016218:	2a00      	cmp	r2, #0
 801621a:	bfbc      	itt	lt
 801621c:	463c      	movlt	r4, r7
 801621e:	460a      	movlt	r2, r1
 8016220:	ea52 0104 	orrs.w	r1, r2, r4
 8016224:	d0c5      	beq.n	80161b2 <__ieee754_fmod+0x56>
 8016226:	494e      	ldr	r1, [pc, #312]	; (8016360 <__ieee754_fmod+0x204>)
 8016228:	428a      	cmp	r2, r1
 801622a:	dd6a      	ble.n	8016302 <__ieee754_fmod+0x1a6>
 801622c:	494e      	ldr	r1, [pc, #312]	; (8016368 <__ieee754_fmod+0x20c>)
 801622e:	428b      	cmp	r3, r1
 8016230:	db6d      	blt.n	801630e <__ieee754_fmod+0x1b2>
 8016232:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8016236:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 801623a:	4315      	orrs	r5, r2
 801623c:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8016240:	4620      	mov	r0, r4
 8016242:	e7aa      	b.n	801619a <__ieee754_fmod+0x3e>
 8016244:	3801      	subs	r0, #1
 8016246:	0049      	lsls	r1, r1, #1
 8016248:	e7c4      	b.n	80161d4 <__ieee754_fmod+0x78>
 801624a:	4847      	ldr	r0, [pc, #284]	; (8016368 <__ieee754_fmod+0x20c>)
 801624c:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8016250:	0049      	lsls	r1, r1, #1
 8016252:	2900      	cmp	r1, #0
 8016254:	f100 30ff 	add.w	r0, r0, #4294967295
 8016258:	dcfa      	bgt.n	8016250 <__ieee754_fmod+0xf4>
 801625a:	e7bd      	b.n	80161d8 <__ieee754_fmod+0x7c>
 801625c:	ea4f 5028 	mov.w	r0, r8, asr #20
 8016260:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8016264:	e7b8      	b.n	80161d8 <__ieee754_fmod+0x7c>
 8016266:	3b01      	subs	r3, #1
 8016268:	0049      	lsls	r1, r1, #1
 801626a:	e7bb      	b.n	80161e4 <__ieee754_fmod+0x88>
 801626c:	4b3e      	ldr	r3, [pc, #248]	; (8016368 <__ieee754_fmod+0x20c>)
 801626e:	02e1      	lsls	r1, r4, #11
 8016270:	0049      	lsls	r1, r1, #1
 8016272:	2900      	cmp	r1, #0
 8016274:	f103 33ff 	add.w	r3, r3, #4294967295
 8016278:	dcfa      	bgt.n	8016270 <__ieee754_fmod+0x114>
 801627a:	e7b5      	b.n	80161e8 <__ieee754_fmod+0x8c>
 801627c:	1523      	asrs	r3, r4, #20
 801627e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016282:	e7b1      	b.n	80161e8 <__ieee754_fmod+0x8c>
 8016284:	1a0f      	subs	r7, r1, r0
 8016286:	2f1f      	cmp	r7, #31
 8016288:	dc0a      	bgt.n	80162a0 <__ieee754_fmod+0x144>
 801628a:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 801628e:	fa08 f807 	lsl.w	r8, r8, r7
 8016292:	fa22 f101 	lsr.w	r1, r2, r1
 8016296:	ea41 0108 	orr.w	r1, r1, r8
 801629a:	fa02 f707 	lsl.w	r7, r2, r7
 801629e:	e7aa      	b.n	80161f6 <__ieee754_fmod+0x9a>
 80162a0:	4932      	ldr	r1, [pc, #200]	; (801636c <__ieee754_fmod+0x210>)
 80162a2:	2700      	movs	r7, #0
 80162a4:	1a09      	subs	r1, r1, r0
 80162a6:	fa02 f101 	lsl.w	r1, r2, r1
 80162aa:	e7a4      	b.n	80161f6 <__ieee754_fmod+0x9a>
 80162ac:	eba2 0e03 	sub.w	lr, r2, r3
 80162b0:	f1be 0f1f 	cmp.w	lr, #31
 80162b4:	dc09      	bgt.n	80162ca <__ieee754_fmod+0x16e>
 80162b6:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 80162ba:	fa04 f40e 	lsl.w	r4, r4, lr
 80162be:	fa2c f606 	lsr.w	r6, ip, r6
 80162c2:	4326      	orrs	r6, r4
 80162c4:	fa0c fe0e 	lsl.w	lr, ip, lr
 80162c8:	e79c      	b.n	8016204 <__ieee754_fmod+0xa8>
 80162ca:	4e28      	ldr	r6, [pc, #160]	; (801636c <__ieee754_fmod+0x210>)
 80162cc:	f04f 0e00 	mov.w	lr, #0
 80162d0:	1af6      	subs	r6, r6, r3
 80162d2:	fa0c f606 	lsl.w	r6, ip, r6
 80162d6:	e795      	b.n	8016204 <__ieee754_fmod+0xa8>
 80162d8:	4577      	cmp	r7, lr
 80162da:	bf38      	it	cc
 80162dc:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80162e0:	2a00      	cmp	r2, #0
 80162e2:	da05      	bge.n	80162f0 <__ieee754_fmod+0x194>
 80162e4:	0ffa      	lsrs	r2, r7, #31
 80162e6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80162ea:	007f      	lsls	r7, r7, #1
 80162ec:	3801      	subs	r0, #1
 80162ee:	e78a      	b.n	8016206 <__ieee754_fmod+0xaa>
 80162f0:	ea52 0104 	orrs.w	r1, r2, r4
 80162f4:	f43f af5d 	beq.w	80161b2 <__ieee754_fmod+0x56>
 80162f8:	0fe1      	lsrs	r1, r4, #31
 80162fa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80162fe:	0067      	lsls	r7, r4, #1
 8016300:	e7f4      	b.n	80162ec <__ieee754_fmod+0x190>
 8016302:	0fe0      	lsrs	r0, r4, #31
 8016304:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8016308:	0064      	lsls	r4, r4, #1
 801630a:	3b01      	subs	r3, #1
 801630c:	e78c      	b.n	8016228 <__ieee754_fmod+0xcc>
 801630e:	1ac9      	subs	r1, r1, r3
 8016310:	2914      	cmp	r1, #20
 8016312:	dc0a      	bgt.n	801632a <__ieee754_fmod+0x1ce>
 8016314:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8016318:	fa02 f303 	lsl.w	r3, r2, r3
 801631c:	40cc      	lsrs	r4, r1
 801631e:	4323      	orrs	r3, r4
 8016320:	410a      	asrs	r2, r1
 8016322:	ea42 0105 	orr.w	r1, r2, r5
 8016326:	4618      	mov	r0, r3
 8016328:	e737      	b.n	801619a <__ieee754_fmod+0x3e>
 801632a:	291f      	cmp	r1, #31
 801632c:	dc07      	bgt.n	801633e <__ieee754_fmod+0x1e2>
 801632e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8016332:	40cc      	lsrs	r4, r1
 8016334:	fa02 f303 	lsl.w	r3, r2, r3
 8016338:	4323      	orrs	r3, r4
 801633a:	462a      	mov	r2, r5
 801633c:	e7f1      	b.n	8016322 <__ieee754_fmod+0x1c6>
 801633e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8016342:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8016346:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801634a:	33e2      	adds	r3, #226	; 0xe2
 801634c:	fa42 f303 	asr.w	r3, r2, r3
 8016350:	e7f3      	b.n	801633a <__ieee754_fmod+0x1de>
 8016352:	bf00      	nop
 8016354:	7fefffff 	.word	0x7fefffff
 8016358:	7ff00000 	.word	0x7ff00000
 801635c:	0801a328 	.word	0x0801a328
 8016360:	000fffff 	.word	0x000fffff
 8016364:	fffffbed 	.word	0xfffffbed
 8016368:	fffffc02 	.word	0xfffffc02
 801636c:	fffffbe2 	.word	0xfffffbe2

08016370 <__ieee754_pow>:
 8016370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016374:	b091      	sub	sp, #68	; 0x44
 8016376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801637a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 801637e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016382:	ea55 0302 	orrs.w	r3, r5, r2
 8016386:	4607      	mov	r7, r0
 8016388:	4688      	mov	r8, r1
 801638a:	f000 84b7 	beq.w	8016cfc <__ieee754_pow+0x98c>
 801638e:	4b80      	ldr	r3, [pc, #512]	; (8016590 <__ieee754_pow+0x220>)
 8016390:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8016394:	429c      	cmp	r4, r3
 8016396:	4689      	mov	r9, r1
 8016398:	4682      	mov	sl, r0
 801639a:	dc09      	bgt.n	80163b0 <__ieee754_pow+0x40>
 801639c:	d103      	bne.n	80163a6 <__ieee754_pow+0x36>
 801639e:	b938      	cbnz	r0, 80163b0 <__ieee754_pow+0x40>
 80163a0:	42a5      	cmp	r5, r4
 80163a2:	dc0d      	bgt.n	80163c0 <__ieee754_pow+0x50>
 80163a4:	e001      	b.n	80163aa <__ieee754_pow+0x3a>
 80163a6:	429d      	cmp	r5, r3
 80163a8:	dc02      	bgt.n	80163b0 <__ieee754_pow+0x40>
 80163aa:	429d      	cmp	r5, r3
 80163ac:	d10e      	bne.n	80163cc <__ieee754_pow+0x5c>
 80163ae:	b16a      	cbz	r2, 80163cc <__ieee754_pow+0x5c>
 80163b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80163b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80163b8:	ea54 030a 	orrs.w	r3, r4, sl
 80163bc:	f000 849e 	beq.w	8016cfc <__ieee754_pow+0x98c>
 80163c0:	4874      	ldr	r0, [pc, #464]	; (8016594 <__ieee754_pow+0x224>)
 80163c2:	b011      	add	sp, #68	; 0x44
 80163c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c8:	f003 b8b4 	b.w	8019534 <nan>
 80163cc:	f1b9 0f00 	cmp.w	r9, #0
 80163d0:	da53      	bge.n	801647a <__ieee754_pow+0x10a>
 80163d2:	4b71      	ldr	r3, [pc, #452]	; (8016598 <__ieee754_pow+0x228>)
 80163d4:	429d      	cmp	r5, r3
 80163d6:	dc4e      	bgt.n	8016476 <__ieee754_pow+0x106>
 80163d8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80163dc:	429d      	cmp	r5, r3
 80163de:	dd4c      	ble.n	801647a <__ieee754_pow+0x10a>
 80163e0:	152b      	asrs	r3, r5, #20
 80163e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80163e6:	2b14      	cmp	r3, #20
 80163e8:	dd28      	ble.n	801643c <__ieee754_pow+0xcc>
 80163ea:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80163ee:	fa22 f103 	lsr.w	r1, r2, r3
 80163f2:	fa01 f303 	lsl.w	r3, r1, r3
 80163f6:	4293      	cmp	r3, r2
 80163f8:	d13f      	bne.n	801647a <__ieee754_pow+0x10a>
 80163fa:	f001 0101 	and.w	r1, r1, #1
 80163fe:	f1c1 0302 	rsb	r3, r1, #2
 8016402:	9300      	str	r3, [sp, #0]
 8016404:	2a00      	cmp	r2, #0
 8016406:	d15c      	bne.n	80164c2 <__ieee754_pow+0x152>
 8016408:	4b61      	ldr	r3, [pc, #388]	; (8016590 <__ieee754_pow+0x220>)
 801640a:	429d      	cmp	r5, r3
 801640c:	d126      	bne.n	801645c <__ieee754_pow+0xec>
 801640e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016412:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016416:	ea53 030a 	orrs.w	r3, r3, sl
 801641a:	f000 846f 	beq.w	8016cfc <__ieee754_pow+0x98c>
 801641e:	4b5f      	ldr	r3, [pc, #380]	; (801659c <__ieee754_pow+0x22c>)
 8016420:	429c      	cmp	r4, r3
 8016422:	dd2c      	ble.n	801647e <__ieee754_pow+0x10e>
 8016424:	2e00      	cmp	r6, #0
 8016426:	f280 846f 	bge.w	8016d08 <__ieee754_pow+0x998>
 801642a:	f04f 0b00 	mov.w	fp, #0
 801642e:	f04f 0c00 	mov.w	ip, #0
 8016432:	4658      	mov	r0, fp
 8016434:	4661      	mov	r1, ip
 8016436:	b011      	add	sp, #68	; 0x44
 8016438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801643c:	2a00      	cmp	r2, #0
 801643e:	d13e      	bne.n	80164be <__ieee754_pow+0x14e>
 8016440:	f1c3 0314 	rsb	r3, r3, #20
 8016444:	fa45 f103 	asr.w	r1, r5, r3
 8016448:	fa01 f303 	lsl.w	r3, r1, r3
 801644c:	42ab      	cmp	r3, r5
 801644e:	f040 8463 	bne.w	8016d18 <__ieee754_pow+0x9a8>
 8016452:	f001 0101 	and.w	r1, r1, #1
 8016456:	f1c1 0302 	rsb	r3, r1, #2
 801645a:	9300      	str	r3, [sp, #0]
 801645c:	4b50      	ldr	r3, [pc, #320]	; (80165a0 <__ieee754_pow+0x230>)
 801645e:	429d      	cmp	r5, r3
 8016460:	d114      	bne.n	801648c <__ieee754_pow+0x11c>
 8016462:	2e00      	cmp	r6, #0
 8016464:	f280 8454 	bge.w	8016d10 <__ieee754_pow+0x9a0>
 8016468:	463a      	mov	r2, r7
 801646a:	4643      	mov	r3, r8
 801646c:	2000      	movs	r0, #0
 801646e:	494c      	ldr	r1, [pc, #304]	; (80165a0 <__ieee754_pow+0x230>)
 8016470:	f7ea f976 	bl	8000760 <__aeabi_ddiv>
 8016474:	e013      	b.n	801649e <__ieee754_pow+0x12e>
 8016476:	2302      	movs	r3, #2
 8016478:	e7c3      	b.n	8016402 <__ieee754_pow+0x92>
 801647a:	2300      	movs	r3, #0
 801647c:	e7c1      	b.n	8016402 <__ieee754_pow+0x92>
 801647e:	2e00      	cmp	r6, #0
 8016480:	dad3      	bge.n	801642a <__ieee754_pow+0xba>
 8016482:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8016486:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 801648a:	e7d2      	b.n	8016432 <__ieee754_pow+0xc2>
 801648c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8016490:	d108      	bne.n	80164a4 <__ieee754_pow+0x134>
 8016492:	463a      	mov	r2, r7
 8016494:	4643      	mov	r3, r8
 8016496:	4638      	mov	r0, r7
 8016498:	4641      	mov	r1, r8
 801649a:	f7ea f837 	bl	800050c <__aeabi_dmul>
 801649e:	4683      	mov	fp, r0
 80164a0:	468c      	mov	ip, r1
 80164a2:	e7c6      	b.n	8016432 <__ieee754_pow+0xc2>
 80164a4:	4b3f      	ldr	r3, [pc, #252]	; (80165a4 <__ieee754_pow+0x234>)
 80164a6:	429e      	cmp	r6, r3
 80164a8:	d10b      	bne.n	80164c2 <__ieee754_pow+0x152>
 80164aa:	f1b9 0f00 	cmp.w	r9, #0
 80164ae:	db08      	blt.n	80164c2 <__ieee754_pow+0x152>
 80164b0:	4638      	mov	r0, r7
 80164b2:	4641      	mov	r1, r8
 80164b4:	b011      	add	sp, #68	; 0x44
 80164b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ba:	f000 be55 	b.w	8017168 <__ieee754_sqrt>
 80164be:	2300      	movs	r3, #0
 80164c0:	9300      	str	r3, [sp, #0]
 80164c2:	4638      	mov	r0, r7
 80164c4:	4641      	mov	r1, r8
 80164c6:	f002 ffa5 	bl	8019414 <fabs>
 80164ca:	4683      	mov	fp, r0
 80164cc:	468c      	mov	ip, r1
 80164ce:	f1ba 0f00 	cmp.w	sl, #0
 80164d2:	d12b      	bne.n	801652c <__ieee754_pow+0x1bc>
 80164d4:	b124      	cbz	r4, 80164e0 <__ieee754_pow+0x170>
 80164d6:	4b32      	ldr	r3, [pc, #200]	; (80165a0 <__ieee754_pow+0x230>)
 80164d8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80164dc:	429a      	cmp	r2, r3
 80164de:	d125      	bne.n	801652c <__ieee754_pow+0x1bc>
 80164e0:	2e00      	cmp	r6, #0
 80164e2:	da07      	bge.n	80164f4 <__ieee754_pow+0x184>
 80164e4:	465a      	mov	r2, fp
 80164e6:	4663      	mov	r3, ip
 80164e8:	2000      	movs	r0, #0
 80164ea:	492d      	ldr	r1, [pc, #180]	; (80165a0 <__ieee754_pow+0x230>)
 80164ec:	f7ea f938 	bl	8000760 <__aeabi_ddiv>
 80164f0:	4683      	mov	fp, r0
 80164f2:	468c      	mov	ip, r1
 80164f4:	f1b9 0f00 	cmp.w	r9, #0
 80164f8:	da9b      	bge.n	8016432 <__ieee754_pow+0xc2>
 80164fa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80164fe:	9b00      	ldr	r3, [sp, #0]
 8016500:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016504:	4323      	orrs	r3, r4
 8016506:	d108      	bne.n	801651a <__ieee754_pow+0x1aa>
 8016508:	465a      	mov	r2, fp
 801650a:	4663      	mov	r3, ip
 801650c:	4658      	mov	r0, fp
 801650e:	4661      	mov	r1, ip
 8016510:	f7e9 fe44 	bl	800019c <__aeabi_dsub>
 8016514:	4602      	mov	r2, r0
 8016516:	460b      	mov	r3, r1
 8016518:	e7aa      	b.n	8016470 <__ieee754_pow+0x100>
 801651a:	9b00      	ldr	r3, [sp, #0]
 801651c:	2b01      	cmp	r3, #1
 801651e:	d188      	bne.n	8016432 <__ieee754_pow+0xc2>
 8016520:	4658      	mov	r0, fp
 8016522:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8016526:	4683      	mov	fp, r0
 8016528:	469c      	mov	ip, r3
 801652a:	e782      	b.n	8016432 <__ieee754_pow+0xc2>
 801652c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8016530:	f109 33ff 	add.w	r3, r9, #4294967295
 8016534:	930d      	str	r3, [sp, #52]	; 0x34
 8016536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016538:	9b00      	ldr	r3, [sp, #0]
 801653a:	4313      	orrs	r3, r2
 801653c:	d104      	bne.n	8016548 <__ieee754_pow+0x1d8>
 801653e:	463a      	mov	r2, r7
 8016540:	4643      	mov	r3, r8
 8016542:	4638      	mov	r0, r7
 8016544:	4641      	mov	r1, r8
 8016546:	e7e3      	b.n	8016510 <__ieee754_pow+0x1a0>
 8016548:	4b17      	ldr	r3, [pc, #92]	; (80165a8 <__ieee754_pow+0x238>)
 801654a:	429d      	cmp	r5, r3
 801654c:	f340 80fe 	ble.w	801674c <__ieee754_pow+0x3dc>
 8016550:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016554:	429d      	cmp	r5, r3
 8016556:	dd0b      	ble.n	8016570 <__ieee754_pow+0x200>
 8016558:	4b10      	ldr	r3, [pc, #64]	; (801659c <__ieee754_pow+0x22c>)
 801655a:	429c      	cmp	r4, r3
 801655c:	dc0e      	bgt.n	801657c <__ieee754_pow+0x20c>
 801655e:	2e00      	cmp	r6, #0
 8016560:	f6bf af63 	bge.w	801642a <__ieee754_pow+0xba>
 8016564:	a308      	add	r3, pc, #32	; (adr r3, 8016588 <__ieee754_pow+0x218>)
 8016566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801656a:	4610      	mov	r0, r2
 801656c:	4619      	mov	r1, r3
 801656e:	e794      	b.n	801649a <__ieee754_pow+0x12a>
 8016570:	4b0e      	ldr	r3, [pc, #56]	; (80165ac <__ieee754_pow+0x23c>)
 8016572:	429c      	cmp	r4, r3
 8016574:	ddf3      	ble.n	801655e <__ieee754_pow+0x1ee>
 8016576:	4b0a      	ldr	r3, [pc, #40]	; (80165a0 <__ieee754_pow+0x230>)
 8016578:	429c      	cmp	r4, r3
 801657a:	dd19      	ble.n	80165b0 <__ieee754_pow+0x240>
 801657c:	2e00      	cmp	r6, #0
 801657e:	dcf1      	bgt.n	8016564 <__ieee754_pow+0x1f4>
 8016580:	e753      	b.n	801642a <__ieee754_pow+0xba>
 8016582:	bf00      	nop
 8016584:	f3af 8000 	nop.w
 8016588:	8800759c 	.word	0x8800759c
 801658c:	7e37e43c 	.word	0x7e37e43c
 8016590:	7ff00000 	.word	0x7ff00000
 8016594:	0801a2f1 	.word	0x0801a2f1
 8016598:	433fffff 	.word	0x433fffff
 801659c:	3fefffff 	.word	0x3fefffff
 80165a0:	3ff00000 	.word	0x3ff00000
 80165a4:	3fe00000 	.word	0x3fe00000
 80165a8:	41e00000 	.word	0x41e00000
 80165ac:	3feffffe 	.word	0x3feffffe
 80165b0:	4661      	mov	r1, ip
 80165b2:	2200      	movs	r2, #0
 80165b4:	4b60      	ldr	r3, [pc, #384]	; (8016738 <__ieee754_pow+0x3c8>)
 80165b6:	4658      	mov	r0, fp
 80165b8:	f7e9 fdf0 	bl	800019c <__aeabi_dsub>
 80165bc:	a354      	add	r3, pc, #336	; (adr r3, 8016710 <__ieee754_pow+0x3a0>)
 80165be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c2:	4604      	mov	r4, r0
 80165c4:	460d      	mov	r5, r1
 80165c6:	f7e9 ffa1 	bl	800050c <__aeabi_dmul>
 80165ca:	a353      	add	r3, pc, #332	; (adr r3, 8016718 <__ieee754_pow+0x3a8>)
 80165cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d0:	4606      	mov	r6, r0
 80165d2:	460f      	mov	r7, r1
 80165d4:	4620      	mov	r0, r4
 80165d6:	4629      	mov	r1, r5
 80165d8:	f7e9 ff98 	bl	800050c <__aeabi_dmul>
 80165dc:	2200      	movs	r2, #0
 80165de:	4682      	mov	sl, r0
 80165e0:	468b      	mov	fp, r1
 80165e2:	4b56      	ldr	r3, [pc, #344]	; (801673c <__ieee754_pow+0x3cc>)
 80165e4:	4620      	mov	r0, r4
 80165e6:	4629      	mov	r1, r5
 80165e8:	f7e9 ff90 	bl	800050c <__aeabi_dmul>
 80165ec:	4602      	mov	r2, r0
 80165ee:	460b      	mov	r3, r1
 80165f0:	a14b      	add	r1, pc, #300	; (adr r1, 8016720 <__ieee754_pow+0x3b0>)
 80165f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165f6:	f7e9 fdd1 	bl	800019c <__aeabi_dsub>
 80165fa:	4622      	mov	r2, r4
 80165fc:	462b      	mov	r3, r5
 80165fe:	f7e9 ff85 	bl	800050c <__aeabi_dmul>
 8016602:	4602      	mov	r2, r0
 8016604:	460b      	mov	r3, r1
 8016606:	2000      	movs	r0, #0
 8016608:	494d      	ldr	r1, [pc, #308]	; (8016740 <__ieee754_pow+0x3d0>)
 801660a:	f7e9 fdc7 	bl	800019c <__aeabi_dsub>
 801660e:	4622      	mov	r2, r4
 8016610:	462b      	mov	r3, r5
 8016612:	4680      	mov	r8, r0
 8016614:	4689      	mov	r9, r1
 8016616:	4620      	mov	r0, r4
 8016618:	4629      	mov	r1, r5
 801661a:	f7e9 ff77 	bl	800050c <__aeabi_dmul>
 801661e:	4602      	mov	r2, r0
 8016620:	460b      	mov	r3, r1
 8016622:	4640      	mov	r0, r8
 8016624:	4649      	mov	r1, r9
 8016626:	f7e9 ff71 	bl	800050c <__aeabi_dmul>
 801662a:	a33f      	add	r3, pc, #252	; (adr r3, 8016728 <__ieee754_pow+0x3b8>)
 801662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016630:	f7e9 ff6c 	bl	800050c <__aeabi_dmul>
 8016634:	4602      	mov	r2, r0
 8016636:	460b      	mov	r3, r1
 8016638:	4650      	mov	r0, sl
 801663a:	4659      	mov	r1, fp
 801663c:	f7e9 fdae 	bl	800019c <__aeabi_dsub>
 8016640:	4602      	mov	r2, r0
 8016642:	460b      	mov	r3, r1
 8016644:	4604      	mov	r4, r0
 8016646:	460d      	mov	r5, r1
 8016648:	4630      	mov	r0, r6
 801664a:	4639      	mov	r1, r7
 801664c:	f7e9 fda8 	bl	80001a0 <__adddf3>
 8016650:	2000      	movs	r0, #0
 8016652:	468b      	mov	fp, r1
 8016654:	4682      	mov	sl, r0
 8016656:	4632      	mov	r2, r6
 8016658:	463b      	mov	r3, r7
 801665a:	f7e9 fd9f 	bl	800019c <__aeabi_dsub>
 801665e:	4602      	mov	r2, r0
 8016660:	460b      	mov	r3, r1
 8016662:	4620      	mov	r0, r4
 8016664:	4629      	mov	r1, r5
 8016666:	f7e9 fd99 	bl	800019c <__aeabi_dsub>
 801666a:	9b00      	ldr	r3, [sp, #0]
 801666c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801666e:	3b01      	subs	r3, #1
 8016670:	4313      	orrs	r3, r2
 8016672:	f04f 0300 	mov.w	r3, #0
 8016676:	bf0c      	ite	eq
 8016678:	4c32      	ldreq	r4, [pc, #200]	; (8016744 <__ieee754_pow+0x3d4>)
 801667a:	4c2f      	ldrne	r4, [pc, #188]	; (8016738 <__ieee754_pow+0x3c8>)
 801667c:	4606      	mov	r6, r0
 801667e:	e9cd 3400 	strd	r3, r4, [sp]
 8016682:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016686:	2400      	movs	r4, #0
 8016688:	460f      	mov	r7, r1
 801668a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801668e:	4622      	mov	r2, r4
 8016690:	462b      	mov	r3, r5
 8016692:	f7e9 fd83 	bl	800019c <__aeabi_dsub>
 8016696:	4652      	mov	r2, sl
 8016698:	465b      	mov	r3, fp
 801669a:	f7e9 ff37 	bl	800050c <__aeabi_dmul>
 801669e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80166a2:	4680      	mov	r8, r0
 80166a4:	4689      	mov	r9, r1
 80166a6:	4630      	mov	r0, r6
 80166a8:	4639      	mov	r1, r7
 80166aa:	f7e9 ff2f 	bl	800050c <__aeabi_dmul>
 80166ae:	4602      	mov	r2, r0
 80166b0:	460b      	mov	r3, r1
 80166b2:	4640      	mov	r0, r8
 80166b4:	4649      	mov	r1, r9
 80166b6:	f7e9 fd73 	bl	80001a0 <__adddf3>
 80166ba:	4622      	mov	r2, r4
 80166bc:	462b      	mov	r3, r5
 80166be:	4680      	mov	r8, r0
 80166c0:	4689      	mov	r9, r1
 80166c2:	4650      	mov	r0, sl
 80166c4:	4659      	mov	r1, fp
 80166c6:	f7e9 ff21 	bl	800050c <__aeabi_dmul>
 80166ca:	4604      	mov	r4, r0
 80166cc:	460d      	mov	r5, r1
 80166ce:	460b      	mov	r3, r1
 80166d0:	4602      	mov	r2, r0
 80166d2:	4649      	mov	r1, r9
 80166d4:	4640      	mov	r0, r8
 80166d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80166da:	f7e9 fd61 	bl	80001a0 <__adddf3>
 80166de:	4b1a      	ldr	r3, [pc, #104]	; (8016748 <__ieee754_pow+0x3d8>)
 80166e0:	4682      	mov	sl, r0
 80166e2:	4299      	cmp	r1, r3
 80166e4:	460f      	mov	r7, r1
 80166e6:	460e      	mov	r6, r1
 80166e8:	f340 82e1 	ble.w	8016cae <__ieee754_pow+0x93e>
 80166ec:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80166f0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80166f4:	4303      	orrs	r3, r0
 80166f6:	f000 81db 	beq.w	8016ab0 <__ieee754_pow+0x740>
 80166fa:	a30d      	add	r3, pc, #52	; (adr r3, 8016730 <__ieee754_pow+0x3c0>)
 80166fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016700:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016704:	f7e9 ff02 	bl	800050c <__aeabi_dmul>
 8016708:	a309      	add	r3, pc, #36	; (adr r3, 8016730 <__ieee754_pow+0x3c0>)
 801670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801670e:	e6c4      	b.n	801649a <__ieee754_pow+0x12a>
 8016710:	60000000 	.word	0x60000000
 8016714:	3ff71547 	.word	0x3ff71547
 8016718:	f85ddf44 	.word	0xf85ddf44
 801671c:	3e54ae0b 	.word	0x3e54ae0b
 8016720:	55555555 	.word	0x55555555
 8016724:	3fd55555 	.word	0x3fd55555
 8016728:	652b82fe 	.word	0x652b82fe
 801672c:	3ff71547 	.word	0x3ff71547
 8016730:	8800759c 	.word	0x8800759c
 8016734:	7e37e43c 	.word	0x7e37e43c
 8016738:	3ff00000 	.word	0x3ff00000
 801673c:	3fd00000 	.word	0x3fd00000
 8016740:	3fe00000 	.word	0x3fe00000
 8016744:	bff00000 	.word	0xbff00000
 8016748:	408fffff 	.word	0x408fffff
 801674c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016750:	f04f 0200 	mov.w	r2, #0
 8016754:	da08      	bge.n	8016768 <__ieee754_pow+0x3f8>
 8016756:	4658      	mov	r0, fp
 8016758:	4bcd      	ldr	r3, [pc, #820]	; (8016a90 <__ieee754_pow+0x720>)
 801675a:	4661      	mov	r1, ip
 801675c:	f7e9 fed6 	bl	800050c <__aeabi_dmul>
 8016760:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016764:	4683      	mov	fp, r0
 8016766:	460c      	mov	r4, r1
 8016768:	1523      	asrs	r3, r4, #20
 801676a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801676e:	4413      	add	r3, r2
 8016770:	930c      	str	r3, [sp, #48]	; 0x30
 8016772:	4bc8      	ldr	r3, [pc, #800]	; (8016a94 <__ieee754_pow+0x724>)
 8016774:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016778:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801677c:	429c      	cmp	r4, r3
 801677e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016782:	dd08      	ble.n	8016796 <__ieee754_pow+0x426>
 8016784:	4bc4      	ldr	r3, [pc, #784]	; (8016a98 <__ieee754_pow+0x728>)
 8016786:	429c      	cmp	r4, r3
 8016788:	f340 815b 	ble.w	8016a42 <__ieee754_pow+0x6d2>
 801678c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801678e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016792:	3301      	adds	r3, #1
 8016794:	930c      	str	r3, [sp, #48]	; 0x30
 8016796:	f04f 0800 	mov.w	r8, #0
 801679a:	4658      	mov	r0, fp
 801679c:	4629      	mov	r1, r5
 801679e:	4bbf      	ldr	r3, [pc, #764]	; (8016a9c <__ieee754_pow+0x72c>)
 80167a0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80167a4:	444b      	add	r3, r9
 80167a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80167aa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80167ae:	461a      	mov	r2, r3
 80167b0:	4623      	mov	r3, r4
 80167b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80167b6:	f7e9 fcf1 	bl	800019c <__aeabi_dsub>
 80167ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80167be:	4606      	mov	r6, r0
 80167c0:	460f      	mov	r7, r1
 80167c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80167c6:	f7e9 fceb 	bl	80001a0 <__adddf3>
 80167ca:	4602      	mov	r2, r0
 80167cc:	460b      	mov	r3, r1
 80167ce:	2000      	movs	r0, #0
 80167d0:	49b3      	ldr	r1, [pc, #716]	; (8016aa0 <__ieee754_pow+0x730>)
 80167d2:	f7e9 ffc5 	bl	8000760 <__aeabi_ddiv>
 80167d6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80167da:	4602      	mov	r2, r0
 80167dc:	460b      	mov	r3, r1
 80167de:	4630      	mov	r0, r6
 80167e0:	4639      	mov	r1, r7
 80167e2:	f7e9 fe93 	bl	800050c <__aeabi_dmul>
 80167e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80167ea:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80167ee:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80167f2:	2300      	movs	r3, #0
 80167f4:	2200      	movs	r2, #0
 80167f6:	106d      	asrs	r5, r5, #1
 80167f8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80167fc:	9304      	str	r3, [sp, #16]
 80167fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016802:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016806:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 801680a:	4650      	mov	r0, sl
 801680c:	4659      	mov	r1, fp
 801680e:	4614      	mov	r4, r2
 8016810:	461d      	mov	r5, r3
 8016812:	f7e9 fe7b 	bl	800050c <__aeabi_dmul>
 8016816:	4602      	mov	r2, r0
 8016818:	460b      	mov	r3, r1
 801681a:	4630      	mov	r0, r6
 801681c:	4639      	mov	r1, r7
 801681e:	f7e9 fcbd 	bl	800019c <__aeabi_dsub>
 8016822:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016826:	4606      	mov	r6, r0
 8016828:	460f      	mov	r7, r1
 801682a:	4620      	mov	r0, r4
 801682c:	4629      	mov	r1, r5
 801682e:	f7e9 fcb5 	bl	800019c <__aeabi_dsub>
 8016832:	4602      	mov	r2, r0
 8016834:	460b      	mov	r3, r1
 8016836:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801683a:	f7e9 fcaf 	bl	800019c <__aeabi_dsub>
 801683e:	4652      	mov	r2, sl
 8016840:	465b      	mov	r3, fp
 8016842:	f7e9 fe63 	bl	800050c <__aeabi_dmul>
 8016846:	4602      	mov	r2, r0
 8016848:	460b      	mov	r3, r1
 801684a:	4630      	mov	r0, r6
 801684c:	4639      	mov	r1, r7
 801684e:	f7e9 fca5 	bl	800019c <__aeabi_dsub>
 8016852:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016856:	f7e9 fe59 	bl	800050c <__aeabi_dmul>
 801685a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801685e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016862:	4610      	mov	r0, r2
 8016864:	4619      	mov	r1, r3
 8016866:	f7e9 fe51 	bl	800050c <__aeabi_dmul>
 801686a:	a377      	add	r3, pc, #476	; (adr r3, 8016a48 <__ieee754_pow+0x6d8>)
 801686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016870:	4604      	mov	r4, r0
 8016872:	460d      	mov	r5, r1
 8016874:	f7e9 fe4a 	bl	800050c <__aeabi_dmul>
 8016878:	a375      	add	r3, pc, #468	; (adr r3, 8016a50 <__ieee754_pow+0x6e0>)
 801687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801687e:	f7e9 fc8f 	bl	80001a0 <__adddf3>
 8016882:	4622      	mov	r2, r4
 8016884:	462b      	mov	r3, r5
 8016886:	f7e9 fe41 	bl	800050c <__aeabi_dmul>
 801688a:	a373      	add	r3, pc, #460	; (adr r3, 8016a58 <__ieee754_pow+0x6e8>)
 801688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016890:	f7e9 fc86 	bl	80001a0 <__adddf3>
 8016894:	4622      	mov	r2, r4
 8016896:	462b      	mov	r3, r5
 8016898:	f7e9 fe38 	bl	800050c <__aeabi_dmul>
 801689c:	a370      	add	r3, pc, #448	; (adr r3, 8016a60 <__ieee754_pow+0x6f0>)
 801689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a2:	f7e9 fc7d 	bl	80001a0 <__adddf3>
 80168a6:	4622      	mov	r2, r4
 80168a8:	462b      	mov	r3, r5
 80168aa:	f7e9 fe2f 	bl	800050c <__aeabi_dmul>
 80168ae:	a36e      	add	r3, pc, #440	; (adr r3, 8016a68 <__ieee754_pow+0x6f8>)
 80168b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168b4:	f7e9 fc74 	bl	80001a0 <__adddf3>
 80168b8:	4622      	mov	r2, r4
 80168ba:	462b      	mov	r3, r5
 80168bc:	f7e9 fe26 	bl	800050c <__aeabi_dmul>
 80168c0:	a36b      	add	r3, pc, #428	; (adr r3, 8016a70 <__ieee754_pow+0x700>)
 80168c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168c6:	f7e9 fc6b 	bl	80001a0 <__adddf3>
 80168ca:	4622      	mov	r2, r4
 80168cc:	4606      	mov	r6, r0
 80168ce:	460f      	mov	r7, r1
 80168d0:	462b      	mov	r3, r5
 80168d2:	4620      	mov	r0, r4
 80168d4:	4629      	mov	r1, r5
 80168d6:	f7e9 fe19 	bl	800050c <__aeabi_dmul>
 80168da:	4602      	mov	r2, r0
 80168dc:	460b      	mov	r3, r1
 80168de:	4630      	mov	r0, r6
 80168e0:	4639      	mov	r1, r7
 80168e2:	f7e9 fe13 	bl	800050c <__aeabi_dmul>
 80168e6:	4604      	mov	r4, r0
 80168e8:	460d      	mov	r5, r1
 80168ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80168ee:	4652      	mov	r2, sl
 80168f0:	465b      	mov	r3, fp
 80168f2:	f7e9 fc55 	bl	80001a0 <__adddf3>
 80168f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80168fa:	f7e9 fe07 	bl	800050c <__aeabi_dmul>
 80168fe:	4622      	mov	r2, r4
 8016900:	462b      	mov	r3, r5
 8016902:	f7e9 fc4d 	bl	80001a0 <__adddf3>
 8016906:	4652      	mov	r2, sl
 8016908:	4606      	mov	r6, r0
 801690a:	460f      	mov	r7, r1
 801690c:	465b      	mov	r3, fp
 801690e:	4650      	mov	r0, sl
 8016910:	4659      	mov	r1, fp
 8016912:	f7e9 fdfb 	bl	800050c <__aeabi_dmul>
 8016916:	2200      	movs	r2, #0
 8016918:	4b62      	ldr	r3, [pc, #392]	; (8016aa4 <__ieee754_pow+0x734>)
 801691a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801691e:	f7e9 fc3f 	bl	80001a0 <__adddf3>
 8016922:	4632      	mov	r2, r6
 8016924:	463b      	mov	r3, r7
 8016926:	f7e9 fc3b 	bl	80001a0 <__adddf3>
 801692a:	9804      	ldr	r0, [sp, #16]
 801692c:	460d      	mov	r5, r1
 801692e:	4604      	mov	r4, r0
 8016930:	4602      	mov	r2, r0
 8016932:	460b      	mov	r3, r1
 8016934:	4650      	mov	r0, sl
 8016936:	4659      	mov	r1, fp
 8016938:	f7e9 fde8 	bl	800050c <__aeabi_dmul>
 801693c:	2200      	movs	r2, #0
 801693e:	4682      	mov	sl, r0
 8016940:	468b      	mov	fp, r1
 8016942:	4b58      	ldr	r3, [pc, #352]	; (8016aa4 <__ieee754_pow+0x734>)
 8016944:	4620      	mov	r0, r4
 8016946:	4629      	mov	r1, r5
 8016948:	f7e9 fc28 	bl	800019c <__aeabi_dsub>
 801694c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016950:	f7e9 fc24 	bl	800019c <__aeabi_dsub>
 8016954:	4602      	mov	r2, r0
 8016956:	460b      	mov	r3, r1
 8016958:	4630      	mov	r0, r6
 801695a:	4639      	mov	r1, r7
 801695c:	f7e9 fc1e 	bl	800019c <__aeabi_dsub>
 8016960:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016964:	f7e9 fdd2 	bl	800050c <__aeabi_dmul>
 8016968:	4622      	mov	r2, r4
 801696a:	4606      	mov	r6, r0
 801696c:	460f      	mov	r7, r1
 801696e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016972:	462b      	mov	r3, r5
 8016974:	f7e9 fdca 	bl	800050c <__aeabi_dmul>
 8016978:	4602      	mov	r2, r0
 801697a:	460b      	mov	r3, r1
 801697c:	4630      	mov	r0, r6
 801697e:	4639      	mov	r1, r7
 8016980:	f7e9 fc0e 	bl	80001a0 <__adddf3>
 8016984:	4606      	mov	r6, r0
 8016986:	460f      	mov	r7, r1
 8016988:	4602      	mov	r2, r0
 801698a:	460b      	mov	r3, r1
 801698c:	4650      	mov	r0, sl
 801698e:	4659      	mov	r1, fp
 8016990:	f7e9 fc06 	bl	80001a0 <__adddf3>
 8016994:	a338      	add	r3, pc, #224	; (adr r3, 8016a78 <__ieee754_pow+0x708>)
 8016996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801699a:	9804      	ldr	r0, [sp, #16]
 801699c:	460d      	mov	r5, r1
 801699e:	4604      	mov	r4, r0
 80169a0:	f7e9 fdb4 	bl	800050c <__aeabi_dmul>
 80169a4:	4652      	mov	r2, sl
 80169a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80169aa:	465b      	mov	r3, fp
 80169ac:	4620      	mov	r0, r4
 80169ae:	4629      	mov	r1, r5
 80169b0:	f7e9 fbf4 	bl	800019c <__aeabi_dsub>
 80169b4:	4602      	mov	r2, r0
 80169b6:	460b      	mov	r3, r1
 80169b8:	4630      	mov	r0, r6
 80169ba:	4639      	mov	r1, r7
 80169bc:	f7e9 fbee 	bl	800019c <__aeabi_dsub>
 80169c0:	a32f      	add	r3, pc, #188	; (adr r3, 8016a80 <__ieee754_pow+0x710>)
 80169c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c6:	f7e9 fda1 	bl	800050c <__aeabi_dmul>
 80169ca:	a32f      	add	r3, pc, #188	; (adr r3, 8016a88 <__ieee754_pow+0x718>)
 80169cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d0:	4606      	mov	r6, r0
 80169d2:	460f      	mov	r7, r1
 80169d4:	4620      	mov	r0, r4
 80169d6:	4629      	mov	r1, r5
 80169d8:	f7e9 fd98 	bl	800050c <__aeabi_dmul>
 80169dc:	4602      	mov	r2, r0
 80169de:	460b      	mov	r3, r1
 80169e0:	4630      	mov	r0, r6
 80169e2:	4639      	mov	r1, r7
 80169e4:	f7e9 fbdc 	bl	80001a0 <__adddf3>
 80169e8:	4b2f      	ldr	r3, [pc, #188]	; (8016aa8 <__ieee754_pow+0x738>)
 80169ea:	444b      	add	r3, r9
 80169ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169f0:	f7e9 fbd6 	bl	80001a0 <__adddf3>
 80169f4:	4604      	mov	r4, r0
 80169f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80169f8:	460d      	mov	r5, r1
 80169fa:	f7e9 fd1d 	bl	8000438 <__aeabi_i2d>
 80169fe:	4606      	mov	r6, r0
 8016a00:	460f      	mov	r7, r1
 8016a02:	4b2a      	ldr	r3, [pc, #168]	; (8016aac <__ieee754_pow+0x73c>)
 8016a04:	4622      	mov	r2, r4
 8016a06:	444b      	add	r3, r9
 8016a08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016a0c:	462b      	mov	r3, r5
 8016a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a12:	f7e9 fbc5 	bl	80001a0 <__adddf3>
 8016a16:	4642      	mov	r2, r8
 8016a18:	464b      	mov	r3, r9
 8016a1a:	f7e9 fbc1 	bl	80001a0 <__adddf3>
 8016a1e:	4632      	mov	r2, r6
 8016a20:	463b      	mov	r3, r7
 8016a22:	f7e9 fbbd 	bl	80001a0 <__adddf3>
 8016a26:	9804      	ldr	r0, [sp, #16]
 8016a28:	4632      	mov	r2, r6
 8016a2a:	463b      	mov	r3, r7
 8016a2c:	4682      	mov	sl, r0
 8016a2e:	468b      	mov	fp, r1
 8016a30:	f7e9 fbb4 	bl	800019c <__aeabi_dsub>
 8016a34:	4642      	mov	r2, r8
 8016a36:	464b      	mov	r3, r9
 8016a38:	f7e9 fbb0 	bl	800019c <__aeabi_dsub>
 8016a3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016a40:	e60b      	b.n	801665a <__ieee754_pow+0x2ea>
 8016a42:	f04f 0801 	mov.w	r8, #1
 8016a46:	e6a8      	b.n	801679a <__ieee754_pow+0x42a>
 8016a48:	4a454eef 	.word	0x4a454eef
 8016a4c:	3fca7e28 	.word	0x3fca7e28
 8016a50:	93c9db65 	.word	0x93c9db65
 8016a54:	3fcd864a 	.word	0x3fcd864a
 8016a58:	a91d4101 	.word	0xa91d4101
 8016a5c:	3fd17460 	.word	0x3fd17460
 8016a60:	518f264d 	.word	0x518f264d
 8016a64:	3fd55555 	.word	0x3fd55555
 8016a68:	db6fabff 	.word	0xdb6fabff
 8016a6c:	3fdb6db6 	.word	0x3fdb6db6
 8016a70:	33333303 	.word	0x33333303
 8016a74:	3fe33333 	.word	0x3fe33333
 8016a78:	e0000000 	.word	0xe0000000
 8016a7c:	3feec709 	.word	0x3feec709
 8016a80:	dc3a03fd 	.word	0xdc3a03fd
 8016a84:	3feec709 	.word	0x3feec709
 8016a88:	145b01f5 	.word	0x145b01f5
 8016a8c:	be3e2fe0 	.word	0xbe3e2fe0
 8016a90:	43400000 	.word	0x43400000
 8016a94:	0003988e 	.word	0x0003988e
 8016a98:	000bb679 	.word	0x000bb679
 8016a9c:	0801a338 	.word	0x0801a338
 8016aa0:	3ff00000 	.word	0x3ff00000
 8016aa4:	40080000 	.word	0x40080000
 8016aa8:	0801a358 	.word	0x0801a358
 8016aac:	0801a348 	.word	0x0801a348
 8016ab0:	a39b      	add	r3, pc, #620	; (adr r3, 8016d20 <__ieee754_pow+0x9b0>)
 8016ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ab6:	4640      	mov	r0, r8
 8016ab8:	4649      	mov	r1, r9
 8016aba:	f7e9 fb71 	bl	80001a0 <__adddf3>
 8016abe:	4622      	mov	r2, r4
 8016ac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016ac4:	462b      	mov	r3, r5
 8016ac6:	4650      	mov	r0, sl
 8016ac8:	4639      	mov	r1, r7
 8016aca:	f7e9 fb67 	bl	800019c <__aeabi_dsub>
 8016ace:	4602      	mov	r2, r0
 8016ad0:	460b      	mov	r3, r1
 8016ad2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016ad6:	f7e9 ffa9 	bl	8000a2c <__aeabi_dcmpgt>
 8016ada:	2800      	cmp	r0, #0
 8016adc:	f47f ae0d 	bne.w	80166fa <__ieee754_pow+0x38a>
 8016ae0:	4aa3      	ldr	r2, [pc, #652]	; (8016d70 <__ieee754_pow+0xa00>)
 8016ae2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8016ae6:	4293      	cmp	r3, r2
 8016ae8:	f340 8103 	ble.w	8016cf2 <__ieee754_pow+0x982>
 8016aec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016af0:	2000      	movs	r0, #0
 8016af2:	151b      	asrs	r3, r3, #20
 8016af4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016af8:	fa4a f303 	asr.w	r3, sl, r3
 8016afc:	4433      	add	r3, r6
 8016afe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8016b02:	4f9c      	ldr	r7, [pc, #624]	; (8016d74 <__ieee754_pow+0xa04>)
 8016b04:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016b08:	4117      	asrs	r7, r2
 8016b0a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016b0e:	ea23 0107 	bic.w	r1, r3, r7
 8016b12:	f1c2 0214 	rsb	r2, r2, #20
 8016b16:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016b1a:	fa4a fa02 	asr.w	sl, sl, r2
 8016b1e:	2e00      	cmp	r6, #0
 8016b20:	4602      	mov	r2, r0
 8016b22:	460b      	mov	r3, r1
 8016b24:	4620      	mov	r0, r4
 8016b26:	4629      	mov	r1, r5
 8016b28:	bfb8      	it	lt
 8016b2a:	f1ca 0a00 	rsblt	sl, sl, #0
 8016b2e:	f7e9 fb35 	bl	800019c <__aeabi_dsub>
 8016b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b3a:	4642      	mov	r2, r8
 8016b3c:	464b      	mov	r3, r9
 8016b3e:	f7e9 fb2f 	bl	80001a0 <__adddf3>
 8016b42:	a379      	add	r3, pc, #484	; (adr r3, 8016d28 <__ieee754_pow+0x9b8>)
 8016b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b48:	2000      	movs	r0, #0
 8016b4a:	460d      	mov	r5, r1
 8016b4c:	4604      	mov	r4, r0
 8016b4e:	f7e9 fcdd 	bl	800050c <__aeabi_dmul>
 8016b52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016b56:	4606      	mov	r6, r0
 8016b58:	460f      	mov	r7, r1
 8016b5a:	4620      	mov	r0, r4
 8016b5c:	4629      	mov	r1, r5
 8016b5e:	f7e9 fb1d 	bl	800019c <__aeabi_dsub>
 8016b62:	4602      	mov	r2, r0
 8016b64:	460b      	mov	r3, r1
 8016b66:	4640      	mov	r0, r8
 8016b68:	4649      	mov	r1, r9
 8016b6a:	f7e9 fb17 	bl	800019c <__aeabi_dsub>
 8016b6e:	a370      	add	r3, pc, #448	; (adr r3, 8016d30 <__ieee754_pow+0x9c0>)
 8016b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b74:	f7e9 fcca 	bl	800050c <__aeabi_dmul>
 8016b78:	a36f      	add	r3, pc, #444	; (adr r3, 8016d38 <__ieee754_pow+0x9c8>)
 8016b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7e:	4680      	mov	r8, r0
 8016b80:	4689      	mov	r9, r1
 8016b82:	4620      	mov	r0, r4
 8016b84:	4629      	mov	r1, r5
 8016b86:	f7e9 fcc1 	bl	800050c <__aeabi_dmul>
 8016b8a:	4602      	mov	r2, r0
 8016b8c:	460b      	mov	r3, r1
 8016b8e:	4640      	mov	r0, r8
 8016b90:	4649      	mov	r1, r9
 8016b92:	f7e9 fb05 	bl	80001a0 <__adddf3>
 8016b96:	4604      	mov	r4, r0
 8016b98:	460d      	mov	r5, r1
 8016b9a:	4602      	mov	r2, r0
 8016b9c:	460b      	mov	r3, r1
 8016b9e:	4630      	mov	r0, r6
 8016ba0:	4639      	mov	r1, r7
 8016ba2:	f7e9 fafd 	bl	80001a0 <__adddf3>
 8016ba6:	4632      	mov	r2, r6
 8016ba8:	463b      	mov	r3, r7
 8016baa:	4680      	mov	r8, r0
 8016bac:	4689      	mov	r9, r1
 8016bae:	f7e9 faf5 	bl	800019c <__aeabi_dsub>
 8016bb2:	4602      	mov	r2, r0
 8016bb4:	460b      	mov	r3, r1
 8016bb6:	4620      	mov	r0, r4
 8016bb8:	4629      	mov	r1, r5
 8016bba:	f7e9 faef 	bl	800019c <__aeabi_dsub>
 8016bbe:	4642      	mov	r2, r8
 8016bc0:	4606      	mov	r6, r0
 8016bc2:	460f      	mov	r7, r1
 8016bc4:	464b      	mov	r3, r9
 8016bc6:	4640      	mov	r0, r8
 8016bc8:	4649      	mov	r1, r9
 8016bca:	f7e9 fc9f 	bl	800050c <__aeabi_dmul>
 8016bce:	a35c      	add	r3, pc, #368	; (adr r3, 8016d40 <__ieee754_pow+0x9d0>)
 8016bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd4:	4604      	mov	r4, r0
 8016bd6:	460d      	mov	r5, r1
 8016bd8:	f7e9 fc98 	bl	800050c <__aeabi_dmul>
 8016bdc:	a35a      	add	r3, pc, #360	; (adr r3, 8016d48 <__ieee754_pow+0x9d8>)
 8016bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be2:	f7e9 fadb 	bl	800019c <__aeabi_dsub>
 8016be6:	4622      	mov	r2, r4
 8016be8:	462b      	mov	r3, r5
 8016bea:	f7e9 fc8f 	bl	800050c <__aeabi_dmul>
 8016bee:	a358      	add	r3, pc, #352	; (adr r3, 8016d50 <__ieee754_pow+0x9e0>)
 8016bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf4:	f7e9 fad4 	bl	80001a0 <__adddf3>
 8016bf8:	4622      	mov	r2, r4
 8016bfa:	462b      	mov	r3, r5
 8016bfc:	f7e9 fc86 	bl	800050c <__aeabi_dmul>
 8016c00:	a355      	add	r3, pc, #340	; (adr r3, 8016d58 <__ieee754_pow+0x9e8>)
 8016c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c06:	f7e9 fac9 	bl	800019c <__aeabi_dsub>
 8016c0a:	4622      	mov	r2, r4
 8016c0c:	462b      	mov	r3, r5
 8016c0e:	f7e9 fc7d 	bl	800050c <__aeabi_dmul>
 8016c12:	a353      	add	r3, pc, #332	; (adr r3, 8016d60 <__ieee754_pow+0x9f0>)
 8016c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c18:	f7e9 fac2 	bl	80001a0 <__adddf3>
 8016c1c:	4622      	mov	r2, r4
 8016c1e:	462b      	mov	r3, r5
 8016c20:	f7e9 fc74 	bl	800050c <__aeabi_dmul>
 8016c24:	4602      	mov	r2, r0
 8016c26:	460b      	mov	r3, r1
 8016c28:	4640      	mov	r0, r8
 8016c2a:	4649      	mov	r1, r9
 8016c2c:	f7e9 fab6 	bl	800019c <__aeabi_dsub>
 8016c30:	4604      	mov	r4, r0
 8016c32:	460d      	mov	r5, r1
 8016c34:	4602      	mov	r2, r0
 8016c36:	460b      	mov	r3, r1
 8016c38:	4640      	mov	r0, r8
 8016c3a:	4649      	mov	r1, r9
 8016c3c:	f7e9 fc66 	bl	800050c <__aeabi_dmul>
 8016c40:	2200      	movs	r2, #0
 8016c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016c46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016c4a:	4620      	mov	r0, r4
 8016c4c:	4629      	mov	r1, r5
 8016c4e:	f7e9 faa5 	bl	800019c <__aeabi_dsub>
 8016c52:	4602      	mov	r2, r0
 8016c54:	460b      	mov	r3, r1
 8016c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016c5a:	f7e9 fd81 	bl	8000760 <__aeabi_ddiv>
 8016c5e:	4632      	mov	r2, r6
 8016c60:	4604      	mov	r4, r0
 8016c62:	460d      	mov	r5, r1
 8016c64:	463b      	mov	r3, r7
 8016c66:	4640      	mov	r0, r8
 8016c68:	4649      	mov	r1, r9
 8016c6a:	f7e9 fc4f 	bl	800050c <__aeabi_dmul>
 8016c6e:	4632      	mov	r2, r6
 8016c70:	463b      	mov	r3, r7
 8016c72:	f7e9 fa95 	bl	80001a0 <__adddf3>
 8016c76:	4602      	mov	r2, r0
 8016c78:	460b      	mov	r3, r1
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	4629      	mov	r1, r5
 8016c7e:	f7e9 fa8d 	bl	800019c <__aeabi_dsub>
 8016c82:	4642      	mov	r2, r8
 8016c84:	464b      	mov	r3, r9
 8016c86:	f7e9 fa89 	bl	800019c <__aeabi_dsub>
 8016c8a:	4602      	mov	r2, r0
 8016c8c:	460b      	mov	r3, r1
 8016c8e:	2000      	movs	r0, #0
 8016c90:	4939      	ldr	r1, [pc, #228]	; (8016d78 <__ieee754_pow+0xa08>)
 8016c92:	f7e9 fa83 	bl	800019c <__aeabi_dsub>
 8016c96:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8016c9a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016c9e:	da2b      	bge.n	8016cf8 <__ieee754_pow+0x988>
 8016ca0:	4652      	mov	r2, sl
 8016ca2:	f002 fcd9 	bl	8019658 <scalbn>
 8016ca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016caa:	f7ff bbf6 	b.w	801649a <__ieee754_pow+0x12a>
 8016cae:	4b33      	ldr	r3, [pc, #204]	; (8016d7c <__ieee754_pow+0xa0c>)
 8016cb0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8016cb4:	429f      	cmp	r7, r3
 8016cb6:	f77f af13 	ble.w	8016ae0 <__ieee754_pow+0x770>
 8016cba:	4b31      	ldr	r3, [pc, #196]	; (8016d80 <__ieee754_pow+0xa10>)
 8016cbc:	440b      	add	r3, r1
 8016cbe:	4303      	orrs	r3, r0
 8016cc0:	d00b      	beq.n	8016cda <__ieee754_pow+0x96a>
 8016cc2:	a329      	add	r3, pc, #164	; (adr r3, 8016d68 <__ieee754_pow+0x9f8>)
 8016cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ccc:	f7e9 fc1e 	bl	800050c <__aeabi_dmul>
 8016cd0:	a325      	add	r3, pc, #148	; (adr r3, 8016d68 <__ieee754_pow+0x9f8>)
 8016cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd6:	f7ff bbe0 	b.w	801649a <__ieee754_pow+0x12a>
 8016cda:	4622      	mov	r2, r4
 8016cdc:	462b      	mov	r3, r5
 8016cde:	f7e9 fa5d 	bl	800019c <__aeabi_dsub>
 8016ce2:	4642      	mov	r2, r8
 8016ce4:	464b      	mov	r3, r9
 8016ce6:	f7e9 fe97 	bl	8000a18 <__aeabi_dcmpge>
 8016cea:	2800      	cmp	r0, #0
 8016cec:	f43f aef8 	beq.w	8016ae0 <__ieee754_pow+0x770>
 8016cf0:	e7e7      	b.n	8016cc2 <__ieee754_pow+0x952>
 8016cf2:	f04f 0a00 	mov.w	sl, #0
 8016cf6:	e71e      	b.n	8016b36 <__ieee754_pow+0x7c6>
 8016cf8:	4621      	mov	r1, r4
 8016cfa:	e7d4      	b.n	8016ca6 <__ieee754_pow+0x936>
 8016cfc:	f04f 0b00 	mov.w	fp, #0
 8016d00:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016d78 <__ieee754_pow+0xa08>
 8016d04:	f7ff bb95 	b.w	8016432 <__ieee754_pow+0xc2>
 8016d08:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8016d0c:	f7ff bb91 	b.w	8016432 <__ieee754_pow+0xc2>
 8016d10:	4638      	mov	r0, r7
 8016d12:	4641      	mov	r1, r8
 8016d14:	f7ff bbc3 	b.w	801649e <__ieee754_pow+0x12e>
 8016d18:	9200      	str	r2, [sp, #0]
 8016d1a:	f7ff bb9f 	b.w	801645c <__ieee754_pow+0xec>
 8016d1e:	bf00      	nop
 8016d20:	652b82fe 	.word	0x652b82fe
 8016d24:	3c971547 	.word	0x3c971547
 8016d28:	00000000 	.word	0x00000000
 8016d2c:	3fe62e43 	.word	0x3fe62e43
 8016d30:	fefa39ef 	.word	0xfefa39ef
 8016d34:	3fe62e42 	.word	0x3fe62e42
 8016d38:	0ca86c39 	.word	0x0ca86c39
 8016d3c:	be205c61 	.word	0xbe205c61
 8016d40:	72bea4d0 	.word	0x72bea4d0
 8016d44:	3e663769 	.word	0x3e663769
 8016d48:	c5d26bf1 	.word	0xc5d26bf1
 8016d4c:	3ebbbd41 	.word	0x3ebbbd41
 8016d50:	af25de2c 	.word	0xaf25de2c
 8016d54:	3f11566a 	.word	0x3f11566a
 8016d58:	16bebd93 	.word	0x16bebd93
 8016d5c:	3f66c16c 	.word	0x3f66c16c
 8016d60:	5555553e 	.word	0x5555553e
 8016d64:	3fc55555 	.word	0x3fc55555
 8016d68:	c2f8f359 	.word	0xc2f8f359
 8016d6c:	01a56e1f 	.word	0x01a56e1f
 8016d70:	3fe00000 	.word	0x3fe00000
 8016d74:	000fffff 	.word	0x000fffff
 8016d78:	3ff00000 	.word	0x3ff00000
 8016d7c:	4090cbff 	.word	0x4090cbff
 8016d80:	3f6f3400 	.word	0x3f6f3400
 8016d84:	00000000 	.word	0x00000000

08016d88 <__ieee754_rem_pio2>:
 8016d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d8c:	4614      	mov	r4, r2
 8016d8e:	4ac2      	ldr	r2, [pc, #776]	; (8017098 <__ieee754_rem_pio2+0x310>)
 8016d90:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8016d94:	4592      	cmp	sl, r2
 8016d96:	b08d      	sub	sp, #52	; 0x34
 8016d98:	468b      	mov	fp, r1
 8016d9a:	dc07      	bgt.n	8016dac <__ieee754_rem_pio2+0x24>
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	2300      	movs	r3, #0
 8016da0:	e9c4 0100 	strd	r0, r1, [r4]
 8016da4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8016da8:	2500      	movs	r5, #0
 8016daa:	e023      	b.n	8016df4 <__ieee754_rem_pio2+0x6c>
 8016dac:	4abb      	ldr	r2, [pc, #748]	; (801709c <__ieee754_rem_pio2+0x314>)
 8016dae:	4592      	cmp	sl, r2
 8016db0:	dc71      	bgt.n	8016e96 <__ieee754_rem_pio2+0x10e>
 8016db2:	a3ab      	add	r3, pc, #684	; (adr r3, 8017060 <__ieee754_rem_pio2+0x2d8>)
 8016db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016db8:	2900      	cmp	r1, #0
 8016dba:	4db9      	ldr	r5, [pc, #740]	; (80170a0 <__ieee754_rem_pio2+0x318>)
 8016dbc:	dd36      	ble.n	8016e2c <__ieee754_rem_pio2+0xa4>
 8016dbe:	f7e9 f9ed 	bl	800019c <__aeabi_dsub>
 8016dc2:	45aa      	cmp	sl, r5
 8016dc4:	4606      	mov	r6, r0
 8016dc6:	460f      	mov	r7, r1
 8016dc8:	d018      	beq.n	8016dfc <__ieee754_rem_pio2+0x74>
 8016dca:	a3a7      	add	r3, pc, #668	; (adr r3, 8017068 <__ieee754_rem_pio2+0x2e0>)
 8016dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd0:	f7e9 f9e4 	bl	800019c <__aeabi_dsub>
 8016dd4:	4602      	mov	r2, r0
 8016dd6:	460b      	mov	r3, r1
 8016dd8:	4630      	mov	r0, r6
 8016dda:	e9c4 2300 	strd	r2, r3, [r4]
 8016dde:	4639      	mov	r1, r7
 8016de0:	f7e9 f9dc 	bl	800019c <__aeabi_dsub>
 8016de4:	a3a0      	add	r3, pc, #640	; (adr r3, 8017068 <__ieee754_rem_pio2+0x2e0>)
 8016de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dea:	f7e9 f9d7 	bl	800019c <__aeabi_dsub>
 8016dee:	2501      	movs	r5, #1
 8016df0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016df4:	4628      	mov	r0, r5
 8016df6:	b00d      	add	sp, #52	; 0x34
 8016df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dfc:	a39c      	add	r3, pc, #624	; (adr r3, 8017070 <__ieee754_rem_pio2+0x2e8>)
 8016dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e02:	f7e9 f9cb 	bl	800019c <__aeabi_dsub>
 8016e06:	a39c      	add	r3, pc, #624	; (adr r3, 8017078 <__ieee754_rem_pio2+0x2f0>)
 8016e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e0c:	4606      	mov	r6, r0
 8016e0e:	460f      	mov	r7, r1
 8016e10:	f7e9 f9c4 	bl	800019c <__aeabi_dsub>
 8016e14:	4602      	mov	r2, r0
 8016e16:	460b      	mov	r3, r1
 8016e18:	4630      	mov	r0, r6
 8016e1a:	e9c4 2300 	strd	r2, r3, [r4]
 8016e1e:	4639      	mov	r1, r7
 8016e20:	f7e9 f9bc 	bl	800019c <__aeabi_dsub>
 8016e24:	a394      	add	r3, pc, #592	; (adr r3, 8017078 <__ieee754_rem_pio2+0x2f0>)
 8016e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e2a:	e7de      	b.n	8016dea <__ieee754_rem_pio2+0x62>
 8016e2c:	f7e9 f9b8 	bl	80001a0 <__adddf3>
 8016e30:	45aa      	cmp	sl, r5
 8016e32:	4606      	mov	r6, r0
 8016e34:	460f      	mov	r7, r1
 8016e36:	d016      	beq.n	8016e66 <__ieee754_rem_pio2+0xde>
 8016e38:	a38b      	add	r3, pc, #556	; (adr r3, 8017068 <__ieee754_rem_pio2+0x2e0>)
 8016e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e3e:	f7e9 f9af 	bl	80001a0 <__adddf3>
 8016e42:	4602      	mov	r2, r0
 8016e44:	460b      	mov	r3, r1
 8016e46:	4630      	mov	r0, r6
 8016e48:	e9c4 2300 	strd	r2, r3, [r4]
 8016e4c:	4639      	mov	r1, r7
 8016e4e:	f7e9 f9a5 	bl	800019c <__aeabi_dsub>
 8016e52:	a385      	add	r3, pc, #532	; (adr r3, 8017068 <__ieee754_rem_pio2+0x2e0>)
 8016e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e58:	f7e9 f9a2 	bl	80001a0 <__adddf3>
 8016e5c:	f04f 35ff 	mov.w	r5, #4294967295
 8016e60:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016e64:	e7c6      	b.n	8016df4 <__ieee754_rem_pio2+0x6c>
 8016e66:	a382      	add	r3, pc, #520	; (adr r3, 8017070 <__ieee754_rem_pio2+0x2e8>)
 8016e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e6c:	f7e9 f998 	bl	80001a0 <__adddf3>
 8016e70:	a381      	add	r3, pc, #516	; (adr r3, 8017078 <__ieee754_rem_pio2+0x2f0>)
 8016e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e76:	4606      	mov	r6, r0
 8016e78:	460f      	mov	r7, r1
 8016e7a:	f7e9 f991 	bl	80001a0 <__adddf3>
 8016e7e:	4602      	mov	r2, r0
 8016e80:	460b      	mov	r3, r1
 8016e82:	4630      	mov	r0, r6
 8016e84:	e9c4 2300 	strd	r2, r3, [r4]
 8016e88:	4639      	mov	r1, r7
 8016e8a:	f7e9 f987 	bl	800019c <__aeabi_dsub>
 8016e8e:	a37a      	add	r3, pc, #488	; (adr r3, 8017078 <__ieee754_rem_pio2+0x2f0>)
 8016e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e94:	e7e0      	b.n	8016e58 <__ieee754_rem_pio2+0xd0>
 8016e96:	4a83      	ldr	r2, [pc, #524]	; (80170a4 <__ieee754_rem_pio2+0x31c>)
 8016e98:	4592      	cmp	sl, r2
 8016e9a:	f300 80d2 	bgt.w	8017042 <__ieee754_rem_pio2+0x2ba>
 8016e9e:	f002 fab9 	bl	8019414 <fabs>
 8016ea2:	a377      	add	r3, pc, #476	; (adr r3, 8017080 <__ieee754_rem_pio2+0x2f8>)
 8016ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ea8:	4606      	mov	r6, r0
 8016eaa:	460f      	mov	r7, r1
 8016eac:	f7e9 fb2e 	bl	800050c <__aeabi_dmul>
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	4b7d      	ldr	r3, [pc, #500]	; (80170a8 <__ieee754_rem_pio2+0x320>)
 8016eb4:	f7e9 f974 	bl	80001a0 <__adddf3>
 8016eb8:	f7e9 fdd8 	bl	8000a6c <__aeabi_d2iz>
 8016ebc:	4605      	mov	r5, r0
 8016ebe:	f7e9 fabb 	bl	8000438 <__aeabi_i2d>
 8016ec2:	a367      	add	r3, pc, #412	; (adr r3, 8017060 <__ieee754_rem_pio2+0x2d8>)
 8016ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ecc:	f7e9 fb1e 	bl	800050c <__aeabi_dmul>
 8016ed0:	4602      	mov	r2, r0
 8016ed2:	460b      	mov	r3, r1
 8016ed4:	4630      	mov	r0, r6
 8016ed6:	4639      	mov	r1, r7
 8016ed8:	f7e9 f960 	bl	800019c <__aeabi_dsub>
 8016edc:	a362      	add	r3, pc, #392	; (adr r3, 8017068 <__ieee754_rem_pio2+0x2e0>)
 8016ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee2:	4606      	mov	r6, r0
 8016ee4:	460f      	mov	r7, r1
 8016ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016eea:	f7e9 fb0f 	bl	800050c <__aeabi_dmul>
 8016eee:	2d1f      	cmp	r5, #31
 8016ef0:	4680      	mov	r8, r0
 8016ef2:	4689      	mov	r9, r1
 8016ef4:	dc0e      	bgt.n	8016f14 <__ieee754_rem_pio2+0x18c>
 8016ef6:	4b6d      	ldr	r3, [pc, #436]	; (80170ac <__ieee754_rem_pio2+0x324>)
 8016ef8:	1e6a      	subs	r2, r5, #1
 8016efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016efe:	4553      	cmp	r3, sl
 8016f00:	d008      	beq.n	8016f14 <__ieee754_rem_pio2+0x18c>
 8016f02:	4642      	mov	r2, r8
 8016f04:	464b      	mov	r3, r9
 8016f06:	4630      	mov	r0, r6
 8016f08:	4639      	mov	r1, r7
 8016f0a:	f7e9 f947 	bl	800019c <__aeabi_dsub>
 8016f0e:	e9c4 0100 	strd	r0, r1, [r4]
 8016f12:	e011      	b.n	8016f38 <__ieee754_rem_pio2+0x1b0>
 8016f14:	464b      	mov	r3, r9
 8016f16:	4642      	mov	r2, r8
 8016f18:	4630      	mov	r0, r6
 8016f1a:	4639      	mov	r1, r7
 8016f1c:	f7e9 f93e 	bl	800019c <__aeabi_dsub>
 8016f20:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8016f24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016f28:	ebaa 0303 	sub.w	r3, sl, r3
 8016f2c:	2b10      	cmp	r3, #16
 8016f2e:	dc1f      	bgt.n	8016f70 <__ieee754_rem_pio2+0x1e8>
 8016f30:	4602      	mov	r2, r0
 8016f32:	460b      	mov	r3, r1
 8016f34:	e9c4 2300 	strd	r2, r3, [r4]
 8016f38:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8016f3c:	4630      	mov	r0, r6
 8016f3e:	4653      	mov	r3, sl
 8016f40:	4639      	mov	r1, r7
 8016f42:	f7e9 f92b 	bl	800019c <__aeabi_dsub>
 8016f46:	4642      	mov	r2, r8
 8016f48:	464b      	mov	r3, r9
 8016f4a:	f7e9 f927 	bl	800019c <__aeabi_dsub>
 8016f4e:	4602      	mov	r2, r0
 8016f50:	460b      	mov	r3, r1
 8016f52:	f1bb 0f00 	cmp.w	fp, #0
 8016f56:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8016f5a:	f6bf af4b 	bge.w	8016df4 <__ieee754_rem_pio2+0x6c>
 8016f5e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8016f62:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8016f66:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8016f6a:	60e1      	str	r1, [r4, #12]
 8016f6c:	426d      	negs	r5, r5
 8016f6e:	e741      	b.n	8016df4 <__ieee754_rem_pio2+0x6c>
 8016f70:	a33f      	add	r3, pc, #252	; (adr r3, 8017070 <__ieee754_rem_pio2+0x2e8>)
 8016f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f7a:	f7e9 fac7 	bl	800050c <__aeabi_dmul>
 8016f7e:	4680      	mov	r8, r0
 8016f80:	4689      	mov	r9, r1
 8016f82:	4602      	mov	r2, r0
 8016f84:	460b      	mov	r3, r1
 8016f86:	4630      	mov	r0, r6
 8016f88:	4639      	mov	r1, r7
 8016f8a:	f7e9 f907 	bl	800019c <__aeabi_dsub>
 8016f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016f92:	4602      	mov	r2, r0
 8016f94:	460b      	mov	r3, r1
 8016f96:	4630      	mov	r0, r6
 8016f98:	4639      	mov	r1, r7
 8016f9a:	f7e9 f8ff 	bl	800019c <__aeabi_dsub>
 8016f9e:	4642      	mov	r2, r8
 8016fa0:	464b      	mov	r3, r9
 8016fa2:	f7e9 f8fb 	bl	800019c <__aeabi_dsub>
 8016fa6:	a334      	add	r3, pc, #208	; (adr r3, 8017078 <__ieee754_rem_pio2+0x2f0>)
 8016fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fac:	4606      	mov	r6, r0
 8016fae:	460f      	mov	r7, r1
 8016fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016fb4:	f7e9 faaa 	bl	800050c <__aeabi_dmul>
 8016fb8:	4632      	mov	r2, r6
 8016fba:	463b      	mov	r3, r7
 8016fbc:	f7e9 f8ee 	bl	800019c <__aeabi_dsub>
 8016fc0:	460b      	mov	r3, r1
 8016fc2:	4602      	mov	r2, r0
 8016fc4:	4680      	mov	r8, r0
 8016fc6:	4689      	mov	r9, r1
 8016fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016fcc:	f7e9 f8e6 	bl	800019c <__aeabi_dsub>
 8016fd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016fd4:	ebaa 0a03 	sub.w	sl, sl, r3
 8016fd8:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8016fdc:	dc06      	bgt.n	8016fec <__ieee754_rem_pio2+0x264>
 8016fde:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8016fe2:	4602      	mov	r2, r0
 8016fe4:	460b      	mov	r3, r1
 8016fe6:	e9c4 2300 	strd	r2, r3, [r4]
 8016fea:	e7a5      	b.n	8016f38 <__ieee754_rem_pio2+0x1b0>
 8016fec:	a326      	add	r3, pc, #152	; (adr r3, 8017088 <__ieee754_rem_pio2+0x300>)
 8016fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016ff6:	f7e9 fa89 	bl	800050c <__aeabi_dmul>
 8016ffa:	4680      	mov	r8, r0
 8016ffc:	4689      	mov	r9, r1
 8016ffe:	4602      	mov	r2, r0
 8017000:	460b      	mov	r3, r1
 8017002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017006:	f7e9 f8c9 	bl	800019c <__aeabi_dsub>
 801700a:	4602      	mov	r2, r0
 801700c:	460b      	mov	r3, r1
 801700e:	4606      	mov	r6, r0
 8017010:	460f      	mov	r7, r1
 8017012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017016:	f7e9 f8c1 	bl	800019c <__aeabi_dsub>
 801701a:	4642      	mov	r2, r8
 801701c:	464b      	mov	r3, r9
 801701e:	f7e9 f8bd 	bl	800019c <__aeabi_dsub>
 8017022:	a31b      	add	r3, pc, #108	; (adr r3, 8017090 <__ieee754_rem_pio2+0x308>)
 8017024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017028:	4680      	mov	r8, r0
 801702a:	4689      	mov	r9, r1
 801702c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017030:	f7e9 fa6c 	bl	800050c <__aeabi_dmul>
 8017034:	4642      	mov	r2, r8
 8017036:	464b      	mov	r3, r9
 8017038:	f7e9 f8b0 	bl	800019c <__aeabi_dsub>
 801703c:	4680      	mov	r8, r0
 801703e:	4689      	mov	r9, r1
 8017040:	e75f      	b.n	8016f02 <__ieee754_rem_pio2+0x17a>
 8017042:	4a1b      	ldr	r2, [pc, #108]	; (80170b0 <__ieee754_rem_pio2+0x328>)
 8017044:	4592      	cmp	sl, r2
 8017046:	dd35      	ble.n	80170b4 <__ieee754_rem_pio2+0x32c>
 8017048:	4602      	mov	r2, r0
 801704a:	460b      	mov	r3, r1
 801704c:	f7e9 f8a6 	bl	800019c <__aeabi_dsub>
 8017050:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017054:	e9c4 0100 	strd	r0, r1, [r4]
 8017058:	e6a6      	b.n	8016da8 <__ieee754_rem_pio2+0x20>
 801705a:	bf00      	nop
 801705c:	f3af 8000 	nop.w
 8017060:	54400000 	.word	0x54400000
 8017064:	3ff921fb 	.word	0x3ff921fb
 8017068:	1a626331 	.word	0x1a626331
 801706c:	3dd0b461 	.word	0x3dd0b461
 8017070:	1a600000 	.word	0x1a600000
 8017074:	3dd0b461 	.word	0x3dd0b461
 8017078:	2e037073 	.word	0x2e037073
 801707c:	3ba3198a 	.word	0x3ba3198a
 8017080:	6dc9c883 	.word	0x6dc9c883
 8017084:	3fe45f30 	.word	0x3fe45f30
 8017088:	2e000000 	.word	0x2e000000
 801708c:	3ba3198a 	.word	0x3ba3198a
 8017090:	252049c1 	.word	0x252049c1
 8017094:	397b839a 	.word	0x397b839a
 8017098:	3fe921fb 	.word	0x3fe921fb
 801709c:	4002d97b 	.word	0x4002d97b
 80170a0:	3ff921fb 	.word	0x3ff921fb
 80170a4:	413921fb 	.word	0x413921fb
 80170a8:	3fe00000 	.word	0x3fe00000
 80170ac:	0801a368 	.word	0x0801a368
 80170b0:	7fefffff 	.word	0x7fefffff
 80170b4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80170b8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80170bc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80170c0:	460f      	mov	r7, r1
 80170c2:	4606      	mov	r6, r0
 80170c4:	f7e9 fcd2 	bl	8000a6c <__aeabi_d2iz>
 80170c8:	f7e9 f9b6 	bl	8000438 <__aeabi_i2d>
 80170cc:	4602      	mov	r2, r0
 80170ce:	460b      	mov	r3, r1
 80170d0:	4630      	mov	r0, r6
 80170d2:	4639      	mov	r1, r7
 80170d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80170d8:	f7e9 f860 	bl	800019c <__aeabi_dsub>
 80170dc:	2200      	movs	r2, #0
 80170de:	4b20      	ldr	r3, [pc, #128]	; (8017160 <__ieee754_rem_pio2+0x3d8>)
 80170e0:	f7e9 fa14 	bl	800050c <__aeabi_dmul>
 80170e4:	460f      	mov	r7, r1
 80170e6:	4606      	mov	r6, r0
 80170e8:	f7e9 fcc0 	bl	8000a6c <__aeabi_d2iz>
 80170ec:	f7e9 f9a4 	bl	8000438 <__aeabi_i2d>
 80170f0:	4602      	mov	r2, r0
 80170f2:	460b      	mov	r3, r1
 80170f4:	4630      	mov	r0, r6
 80170f6:	4639      	mov	r1, r7
 80170f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80170fc:	f7e9 f84e 	bl	800019c <__aeabi_dsub>
 8017100:	2200      	movs	r2, #0
 8017102:	4b17      	ldr	r3, [pc, #92]	; (8017160 <__ieee754_rem_pio2+0x3d8>)
 8017104:	f7e9 fa02 	bl	800050c <__aeabi_dmul>
 8017108:	f04f 0803 	mov.w	r8, #3
 801710c:	2600      	movs	r6, #0
 801710e:	2700      	movs	r7, #0
 8017110:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017114:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8017118:	4632      	mov	r2, r6
 801711a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801711e:	463b      	mov	r3, r7
 8017120:	f108 3aff 	add.w	sl, r8, #4294967295
 8017124:	f7e9 fc5a 	bl	80009dc <__aeabi_dcmpeq>
 8017128:	b9b8      	cbnz	r0, 801715a <__ieee754_rem_pio2+0x3d2>
 801712a:	4b0e      	ldr	r3, [pc, #56]	; (8017164 <__ieee754_rem_pio2+0x3dc>)
 801712c:	462a      	mov	r2, r5
 801712e:	9301      	str	r3, [sp, #4]
 8017130:	2302      	movs	r3, #2
 8017132:	4621      	mov	r1, r4
 8017134:	9300      	str	r3, [sp, #0]
 8017136:	a806      	add	r0, sp, #24
 8017138:	4643      	mov	r3, r8
 801713a:	f001 f84b 	bl	80181d4 <__kernel_rem_pio2>
 801713e:	f1bb 0f00 	cmp.w	fp, #0
 8017142:	4605      	mov	r5, r0
 8017144:	f6bf ae56 	bge.w	8016df4 <__ieee754_rem_pio2+0x6c>
 8017148:	6863      	ldr	r3, [r4, #4]
 801714a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801714e:	6063      	str	r3, [r4, #4]
 8017150:	68e3      	ldr	r3, [r4, #12]
 8017152:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017156:	60e3      	str	r3, [r4, #12]
 8017158:	e708      	b.n	8016f6c <__ieee754_rem_pio2+0x1e4>
 801715a:	46d0      	mov	r8, sl
 801715c:	e7dc      	b.n	8017118 <__ieee754_rem_pio2+0x390>
 801715e:	bf00      	nop
 8017160:	41700000 	.word	0x41700000
 8017164:	0801a3e8 	.word	0x0801a3e8

08017168 <__ieee754_sqrt>:
 8017168:	4b54      	ldr	r3, [pc, #336]	; (80172bc <__ieee754_sqrt+0x154>)
 801716a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801716e:	438b      	bics	r3, r1
 8017170:	4606      	mov	r6, r0
 8017172:	460d      	mov	r5, r1
 8017174:	460a      	mov	r2, r1
 8017176:	460c      	mov	r4, r1
 8017178:	d10f      	bne.n	801719a <__ieee754_sqrt+0x32>
 801717a:	4602      	mov	r2, r0
 801717c:	460b      	mov	r3, r1
 801717e:	f7e9 f9c5 	bl	800050c <__aeabi_dmul>
 8017182:	4602      	mov	r2, r0
 8017184:	460b      	mov	r3, r1
 8017186:	4630      	mov	r0, r6
 8017188:	4629      	mov	r1, r5
 801718a:	f7e9 f809 	bl	80001a0 <__adddf3>
 801718e:	4606      	mov	r6, r0
 8017190:	460d      	mov	r5, r1
 8017192:	4630      	mov	r0, r6
 8017194:	4629      	mov	r1, r5
 8017196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801719a:	2900      	cmp	r1, #0
 801719c:	4607      	mov	r7, r0
 801719e:	4603      	mov	r3, r0
 80171a0:	dc0e      	bgt.n	80171c0 <__ieee754_sqrt+0x58>
 80171a2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80171a6:	ea5c 0707 	orrs.w	r7, ip, r7
 80171aa:	d0f2      	beq.n	8017192 <__ieee754_sqrt+0x2a>
 80171ac:	b141      	cbz	r1, 80171c0 <__ieee754_sqrt+0x58>
 80171ae:	4602      	mov	r2, r0
 80171b0:	460b      	mov	r3, r1
 80171b2:	f7e8 fff3 	bl	800019c <__aeabi_dsub>
 80171b6:	4602      	mov	r2, r0
 80171b8:	460b      	mov	r3, r1
 80171ba:	f7e9 fad1 	bl	8000760 <__aeabi_ddiv>
 80171be:	e7e6      	b.n	801718e <__ieee754_sqrt+0x26>
 80171c0:	1512      	asrs	r2, r2, #20
 80171c2:	d074      	beq.n	80172ae <__ieee754_sqrt+0x146>
 80171c4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80171c8:	07d5      	lsls	r5, r2, #31
 80171ca:	f04f 0500 	mov.w	r5, #0
 80171ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80171d2:	bf48      	it	mi
 80171d4:	0fd9      	lsrmi	r1, r3, #31
 80171d6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80171da:	bf44      	itt	mi
 80171dc:	005b      	lslmi	r3, r3, #1
 80171de:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80171e2:	1051      	asrs	r1, r2, #1
 80171e4:	0fda      	lsrs	r2, r3, #31
 80171e6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80171ea:	4628      	mov	r0, r5
 80171ec:	2216      	movs	r2, #22
 80171ee:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80171f2:	005b      	lsls	r3, r3, #1
 80171f4:	1987      	adds	r7, r0, r6
 80171f6:	42a7      	cmp	r7, r4
 80171f8:	bfde      	ittt	le
 80171fa:	19b8      	addle	r0, r7, r6
 80171fc:	1be4      	suble	r4, r4, r7
 80171fe:	19ad      	addle	r5, r5, r6
 8017200:	0fdf      	lsrs	r7, r3, #31
 8017202:	3a01      	subs	r2, #1
 8017204:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8017208:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801720c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017210:	d1f0      	bne.n	80171f4 <__ieee754_sqrt+0x8c>
 8017212:	f04f 0c20 	mov.w	ip, #32
 8017216:	4696      	mov	lr, r2
 8017218:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801721c:	4284      	cmp	r4, r0
 801721e:	eb06 070e 	add.w	r7, r6, lr
 8017222:	dc02      	bgt.n	801722a <__ieee754_sqrt+0xc2>
 8017224:	d112      	bne.n	801724c <__ieee754_sqrt+0xe4>
 8017226:	429f      	cmp	r7, r3
 8017228:	d810      	bhi.n	801724c <__ieee754_sqrt+0xe4>
 801722a:	2f00      	cmp	r7, #0
 801722c:	eb07 0e06 	add.w	lr, r7, r6
 8017230:	da42      	bge.n	80172b8 <__ieee754_sqrt+0x150>
 8017232:	f1be 0f00 	cmp.w	lr, #0
 8017236:	db3f      	blt.n	80172b8 <__ieee754_sqrt+0x150>
 8017238:	f100 0801 	add.w	r8, r0, #1
 801723c:	1a24      	subs	r4, r4, r0
 801723e:	4640      	mov	r0, r8
 8017240:	429f      	cmp	r7, r3
 8017242:	bf88      	it	hi
 8017244:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8017248:	1bdb      	subs	r3, r3, r7
 801724a:	4432      	add	r2, r6
 801724c:	0064      	lsls	r4, r4, #1
 801724e:	f1bc 0c01 	subs.w	ip, ip, #1
 8017252:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8017256:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801725a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801725e:	d1dd      	bne.n	801721c <__ieee754_sqrt+0xb4>
 8017260:	4323      	orrs	r3, r4
 8017262:	d006      	beq.n	8017272 <__ieee754_sqrt+0x10a>
 8017264:	1c54      	adds	r4, r2, #1
 8017266:	bf0b      	itete	eq
 8017268:	4662      	moveq	r2, ip
 801726a:	3201      	addne	r2, #1
 801726c:	3501      	addeq	r5, #1
 801726e:	f022 0201 	bicne.w	r2, r2, #1
 8017272:	106b      	asrs	r3, r5, #1
 8017274:	0852      	lsrs	r2, r2, #1
 8017276:	07e8      	lsls	r0, r5, #31
 8017278:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801727c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8017280:	bf48      	it	mi
 8017282:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8017286:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 801728a:	4616      	mov	r6, r2
 801728c:	e781      	b.n	8017192 <__ieee754_sqrt+0x2a>
 801728e:	0adc      	lsrs	r4, r3, #11
 8017290:	3915      	subs	r1, #21
 8017292:	055b      	lsls	r3, r3, #21
 8017294:	2c00      	cmp	r4, #0
 8017296:	d0fa      	beq.n	801728e <__ieee754_sqrt+0x126>
 8017298:	02e6      	lsls	r6, r4, #11
 801729a:	d50a      	bpl.n	80172b2 <__ieee754_sqrt+0x14a>
 801729c:	f1c2 0020 	rsb	r0, r2, #32
 80172a0:	fa23 f000 	lsr.w	r0, r3, r0
 80172a4:	1e55      	subs	r5, r2, #1
 80172a6:	4093      	lsls	r3, r2
 80172a8:	4304      	orrs	r4, r0
 80172aa:	1b4a      	subs	r2, r1, r5
 80172ac:	e78a      	b.n	80171c4 <__ieee754_sqrt+0x5c>
 80172ae:	4611      	mov	r1, r2
 80172b0:	e7f0      	b.n	8017294 <__ieee754_sqrt+0x12c>
 80172b2:	0064      	lsls	r4, r4, #1
 80172b4:	3201      	adds	r2, #1
 80172b6:	e7ef      	b.n	8017298 <__ieee754_sqrt+0x130>
 80172b8:	4680      	mov	r8, r0
 80172ba:	e7bf      	b.n	801723c <__ieee754_sqrt+0xd4>
 80172bc:	7ff00000 	.word	0x7ff00000

080172c0 <__ieee754_asinf>:
 80172c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172c4:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80172c8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80172cc:	4604      	mov	r4, r0
 80172ce:	4607      	mov	r7, r0
 80172d0:	d10c      	bne.n	80172ec <__ieee754_asinf+0x2c>
 80172d2:	498c      	ldr	r1, [pc, #560]	; (8017504 <__ieee754_asinf+0x244>)
 80172d4:	f7e9 fd70 	bl	8000db8 <__aeabi_fmul>
 80172d8:	498b      	ldr	r1, [pc, #556]	; (8017508 <__ieee754_asinf+0x248>)
 80172da:	4605      	mov	r5, r0
 80172dc:	4620      	mov	r0, r4
 80172de:	f7e9 fd6b 	bl	8000db8 <__aeabi_fmul>
 80172e2:	4601      	mov	r1, r0
 80172e4:	4628      	mov	r0, r5
 80172e6:	f7e9 fc5f 	bl	8000ba8 <__addsf3>
 80172ea:	e006      	b.n	80172fa <__ieee754_asinf+0x3a>
 80172ec:	dd09      	ble.n	8017302 <__ieee754_asinf+0x42>
 80172ee:	4601      	mov	r1, r0
 80172f0:	f7e9 fc58 	bl	8000ba4 <__aeabi_fsub>
 80172f4:	4601      	mov	r1, r0
 80172f6:	f7e9 fe13 	bl	8000f20 <__aeabi_fdiv>
 80172fa:	4604      	mov	r4, r0
 80172fc:	4620      	mov	r0, r4
 80172fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017302:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8017306:	da0b      	bge.n	8017320 <__ieee754_asinf+0x60>
 8017308:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 801730c:	da73      	bge.n	80173f6 <__ieee754_asinf+0x136>
 801730e:	497f      	ldr	r1, [pc, #508]	; (801750c <__ieee754_asinf+0x24c>)
 8017310:	f7e9 fc4a 	bl	8000ba8 <__addsf3>
 8017314:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8017318:	f7e9 ff0a 	bl	8001130 <__aeabi_fcmpgt>
 801731c:	2800      	cmp	r0, #0
 801731e:	d1ed      	bne.n	80172fc <__ieee754_asinf+0x3c>
 8017320:	4620      	mov	r0, r4
 8017322:	f002 fb13 	bl	801994c <fabsf>
 8017326:	4601      	mov	r1, r0
 8017328:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801732c:	f7e9 fc3a 	bl	8000ba4 <__aeabi_fsub>
 8017330:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017334:	f7e9 fd40 	bl	8000db8 <__aeabi_fmul>
 8017338:	4604      	mov	r4, r0
 801733a:	4975      	ldr	r1, [pc, #468]	; (8017510 <__ieee754_asinf+0x250>)
 801733c:	f7e9 fd3c 	bl	8000db8 <__aeabi_fmul>
 8017340:	4974      	ldr	r1, [pc, #464]	; (8017514 <__ieee754_asinf+0x254>)
 8017342:	f7e9 fc31 	bl	8000ba8 <__addsf3>
 8017346:	4621      	mov	r1, r4
 8017348:	f7e9 fd36 	bl	8000db8 <__aeabi_fmul>
 801734c:	4972      	ldr	r1, [pc, #456]	; (8017518 <__ieee754_asinf+0x258>)
 801734e:	f7e9 fc29 	bl	8000ba4 <__aeabi_fsub>
 8017352:	4621      	mov	r1, r4
 8017354:	f7e9 fd30 	bl	8000db8 <__aeabi_fmul>
 8017358:	4970      	ldr	r1, [pc, #448]	; (801751c <__ieee754_asinf+0x25c>)
 801735a:	f7e9 fc25 	bl	8000ba8 <__addsf3>
 801735e:	4621      	mov	r1, r4
 8017360:	f7e9 fd2a 	bl	8000db8 <__aeabi_fmul>
 8017364:	496e      	ldr	r1, [pc, #440]	; (8017520 <__ieee754_asinf+0x260>)
 8017366:	f7e9 fc1d 	bl	8000ba4 <__aeabi_fsub>
 801736a:	4621      	mov	r1, r4
 801736c:	f7e9 fd24 	bl	8000db8 <__aeabi_fmul>
 8017370:	496c      	ldr	r1, [pc, #432]	; (8017524 <__ieee754_asinf+0x264>)
 8017372:	f7e9 fc19 	bl	8000ba8 <__addsf3>
 8017376:	4621      	mov	r1, r4
 8017378:	f7e9 fd1e 	bl	8000db8 <__aeabi_fmul>
 801737c:	496a      	ldr	r1, [pc, #424]	; (8017528 <__ieee754_asinf+0x268>)
 801737e:	4680      	mov	r8, r0
 8017380:	4620      	mov	r0, r4
 8017382:	f7e9 fd19 	bl	8000db8 <__aeabi_fmul>
 8017386:	4969      	ldr	r1, [pc, #420]	; (801752c <__ieee754_asinf+0x26c>)
 8017388:	f7e9 fc0c 	bl	8000ba4 <__aeabi_fsub>
 801738c:	4621      	mov	r1, r4
 801738e:	f7e9 fd13 	bl	8000db8 <__aeabi_fmul>
 8017392:	4967      	ldr	r1, [pc, #412]	; (8017530 <__ieee754_asinf+0x270>)
 8017394:	f7e9 fc08 	bl	8000ba8 <__addsf3>
 8017398:	4621      	mov	r1, r4
 801739a:	f7e9 fd0d 	bl	8000db8 <__aeabi_fmul>
 801739e:	4965      	ldr	r1, [pc, #404]	; (8017534 <__ieee754_asinf+0x274>)
 80173a0:	f7e9 fc00 	bl	8000ba4 <__aeabi_fsub>
 80173a4:	4621      	mov	r1, r4
 80173a6:	f7e9 fd07 	bl	8000db8 <__aeabi_fmul>
 80173aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80173ae:	f7e9 fbfb 	bl	8000ba8 <__addsf3>
 80173b2:	4681      	mov	r9, r0
 80173b4:	4620      	mov	r0, r4
 80173b6:	f000 fdf9 	bl	8017fac <__ieee754_sqrtf>
 80173ba:	4b5f      	ldr	r3, [pc, #380]	; (8017538 <__ieee754_asinf+0x278>)
 80173bc:	4606      	mov	r6, r0
 80173be:	429d      	cmp	r5, r3
 80173c0:	dd63      	ble.n	801748a <__ieee754_asinf+0x1ca>
 80173c2:	4649      	mov	r1, r9
 80173c4:	4640      	mov	r0, r8
 80173c6:	f7e9 fdab 	bl	8000f20 <__aeabi_fdiv>
 80173ca:	4631      	mov	r1, r6
 80173cc:	f7e9 fcf4 	bl	8000db8 <__aeabi_fmul>
 80173d0:	4631      	mov	r1, r6
 80173d2:	f7e9 fbe9 	bl	8000ba8 <__addsf3>
 80173d6:	4601      	mov	r1, r0
 80173d8:	f7e9 fbe6 	bl	8000ba8 <__addsf3>
 80173dc:	4957      	ldr	r1, [pc, #348]	; (801753c <__ieee754_asinf+0x27c>)
 80173de:	f7e9 fbe3 	bl	8000ba8 <__addsf3>
 80173e2:	4601      	mov	r1, r0
 80173e4:	4847      	ldr	r0, [pc, #284]	; (8017504 <__ieee754_asinf+0x244>)
 80173e6:	f7e9 fbdd 	bl	8000ba4 <__aeabi_fsub>
 80173ea:	2f00      	cmp	r7, #0
 80173ec:	4604      	mov	r4, r0
 80173ee:	bfd8      	it	le
 80173f0:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 80173f4:	e782      	b.n	80172fc <__ieee754_asinf+0x3c>
 80173f6:	4601      	mov	r1, r0
 80173f8:	f7e9 fcde 	bl	8000db8 <__aeabi_fmul>
 80173fc:	4605      	mov	r5, r0
 80173fe:	4944      	ldr	r1, [pc, #272]	; (8017510 <__ieee754_asinf+0x250>)
 8017400:	f7e9 fcda 	bl	8000db8 <__aeabi_fmul>
 8017404:	4943      	ldr	r1, [pc, #268]	; (8017514 <__ieee754_asinf+0x254>)
 8017406:	f7e9 fbcf 	bl	8000ba8 <__addsf3>
 801740a:	4629      	mov	r1, r5
 801740c:	f7e9 fcd4 	bl	8000db8 <__aeabi_fmul>
 8017410:	4941      	ldr	r1, [pc, #260]	; (8017518 <__ieee754_asinf+0x258>)
 8017412:	f7e9 fbc7 	bl	8000ba4 <__aeabi_fsub>
 8017416:	4629      	mov	r1, r5
 8017418:	f7e9 fcce 	bl	8000db8 <__aeabi_fmul>
 801741c:	493f      	ldr	r1, [pc, #252]	; (801751c <__ieee754_asinf+0x25c>)
 801741e:	f7e9 fbc3 	bl	8000ba8 <__addsf3>
 8017422:	4629      	mov	r1, r5
 8017424:	f7e9 fcc8 	bl	8000db8 <__aeabi_fmul>
 8017428:	493d      	ldr	r1, [pc, #244]	; (8017520 <__ieee754_asinf+0x260>)
 801742a:	f7e9 fbbb 	bl	8000ba4 <__aeabi_fsub>
 801742e:	4629      	mov	r1, r5
 8017430:	f7e9 fcc2 	bl	8000db8 <__aeabi_fmul>
 8017434:	493b      	ldr	r1, [pc, #236]	; (8017524 <__ieee754_asinf+0x264>)
 8017436:	f7e9 fbb7 	bl	8000ba8 <__addsf3>
 801743a:	4629      	mov	r1, r5
 801743c:	f7e9 fcbc 	bl	8000db8 <__aeabi_fmul>
 8017440:	4939      	ldr	r1, [pc, #228]	; (8017528 <__ieee754_asinf+0x268>)
 8017442:	4606      	mov	r6, r0
 8017444:	4628      	mov	r0, r5
 8017446:	f7e9 fcb7 	bl	8000db8 <__aeabi_fmul>
 801744a:	4938      	ldr	r1, [pc, #224]	; (801752c <__ieee754_asinf+0x26c>)
 801744c:	f7e9 fbaa 	bl	8000ba4 <__aeabi_fsub>
 8017450:	4629      	mov	r1, r5
 8017452:	f7e9 fcb1 	bl	8000db8 <__aeabi_fmul>
 8017456:	4936      	ldr	r1, [pc, #216]	; (8017530 <__ieee754_asinf+0x270>)
 8017458:	f7e9 fba6 	bl	8000ba8 <__addsf3>
 801745c:	4629      	mov	r1, r5
 801745e:	f7e9 fcab 	bl	8000db8 <__aeabi_fmul>
 8017462:	4934      	ldr	r1, [pc, #208]	; (8017534 <__ieee754_asinf+0x274>)
 8017464:	f7e9 fb9e 	bl	8000ba4 <__aeabi_fsub>
 8017468:	4629      	mov	r1, r5
 801746a:	f7e9 fca5 	bl	8000db8 <__aeabi_fmul>
 801746e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8017472:	f7e9 fb99 	bl	8000ba8 <__addsf3>
 8017476:	4601      	mov	r1, r0
 8017478:	4630      	mov	r0, r6
 801747a:	f7e9 fd51 	bl	8000f20 <__aeabi_fdiv>
 801747e:	4621      	mov	r1, r4
 8017480:	f7e9 fc9a 	bl	8000db8 <__aeabi_fmul>
 8017484:	4601      	mov	r1, r0
 8017486:	4620      	mov	r0, r4
 8017488:	e72d      	b.n	80172e6 <__ieee754_asinf+0x26>
 801748a:	4601      	mov	r1, r0
 801748c:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 8017490:	f7e9 fb8a 	bl	8000ba8 <__addsf3>
 8017494:	4649      	mov	r1, r9
 8017496:	4682      	mov	sl, r0
 8017498:	4640      	mov	r0, r8
 801749a:	f7e9 fd41 	bl	8000f20 <__aeabi_fdiv>
 801749e:	4601      	mov	r1, r0
 80174a0:	4650      	mov	r0, sl
 80174a2:	f7e9 fc89 	bl	8000db8 <__aeabi_fmul>
 80174a6:	f025 050f 	bic.w	r5, r5, #15
 80174aa:	4680      	mov	r8, r0
 80174ac:	4629      	mov	r1, r5
 80174ae:	4628      	mov	r0, r5
 80174b0:	f7e9 fc82 	bl	8000db8 <__aeabi_fmul>
 80174b4:	4601      	mov	r1, r0
 80174b6:	4620      	mov	r0, r4
 80174b8:	f7e9 fb74 	bl	8000ba4 <__aeabi_fsub>
 80174bc:	4631      	mov	r1, r6
 80174be:	4604      	mov	r4, r0
 80174c0:	4628      	mov	r0, r5
 80174c2:	f7e9 fb71 	bl	8000ba8 <__addsf3>
 80174c6:	4601      	mov	r1, r0
 80174c8:	4620      	mov	r0, r4
 80174ca:	f7e9 fd29 	bl	8000f20 <__aeabi_fdiv>
 80174ce:	4601      	mov	r1, r0
 80174d0:	f7e9 fb6a 	bl	8000ba8 <__addsf3>
 80174d4:	4601      	mov	r1, r0
 80174d6:	480c      	ldr	r0, [pc, #48]	; (8017508 <__ieee754_asinf+0x248>)
 80174d8:	f7e9 fb64 	bl	8000ba4 <__aeabi_fsub>
 80174dc:	4601      	mov	r1, r0
 80174de:	4640      	mov	r0, r8
 80174e0:	f7e9 fb60 	bl	8000ba4 <__aeabi_fsub>
 80174e4:	4629      	mov	r1, r5
 80174e6:	4604      	mov	r4, r0
 80174e8:	4628      	mov	r0, r5
 80174ea:	f7e9 fb5d 	bl	8000ba8 <__addsf3>
 80174ee:	4601      	mov	r1, r0
 80174f0:	4813      	ldr	r0, [pc, #76]	; (8017540 <__ieee754_asinf+0x280>)
 80174f2:	f7e9 fb57 	bl	8000ba4 <__aeabi_fsub>
 80174f6:	4601      	mov	r1, r0
 80174f8:	4620      	mov	r0, r4
 80174fa:	f7e9 fb53 	bl	8000ba4 <__aeabi_fsub>
 80174fe:	4601      	mov	r1, r0
 8017500:	480f      	ldr	r0, [pc, #60]	; (8017540 <__ieee754_asinf+0x280>)
 8017502:	e770      	b.n	80173e6 <__ieee754_asinf+0x126>
 8017504:	3fc90fdb 	.word	0x3fc90fdb
 8017508:	b33bbd2e 	.word	0xb33bbd2e
 801750c:	7149f2ca 	.word	0x7149f2ca
 8017510:	3811ef08 	.word	0x3811ef08
 8017514:	3a4f7f04 	.word	0x3a4f7f04
 8017518:	3d241146 	.word	0x3d241146
 801751c:	3e4e0aa8 	.word	0x3e4e0aa8
 8017520:	3ea6b090 	.word	0x3ea6b090
 8017524:	3e2aaaab 	.word	0x3e2aaaab
 8017528:	3d9dc62e 	.word	0x3d9dc62e
 801752c:	3f303361 	.word	0x3f303361
 8017530:	4001572d 	.word	0x4001572d
 8017534:	4019d139 	.word	0x4019d139
 8017538:	3f799999 	.word	0x3f799999
 801753c:	333bbd2e 	.word	0x333bbd2e
 8017540:	3f490fdb 	.word	0x3f490fdb

08017544 <__ieee754_atan2f>:
 8017544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017546:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801754a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801754e:	4603      	mov	r3, r0
 8017550:	dc05      	bgt.n	801755e <__ieee754_atan2f+0x1a>
 8017552:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8017556:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801755a:	4607      	mov	r7, r0
 801755c:	dd04      	ble.n	8017568 <__ieee754_atan2f+0x24>
 801755e:	4618      	mov	r0, r3
 8017560:	f7e9 fb22 	bl	8000ba8 <__addsf3>
 8017564:	4603      	mov	r3, r0
 8017566:	e024      	b.n	80175b2 <__ieee754_atan2f+0x6e>
 8017568:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801756c:	d103      	bne.n	8017576 <__ieee754_atan2f+0x32>
 801756e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017572:	f002 b8df 	b.w	8019734 <atanf>
 8017576:	178c      	asrs	r4, r1, #30
 8017578:	f004 0402 	and.w	r4, r4, #2
 801757c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8017580:	b92a      	cbnz	r2, 801758e <__ieee754_atan2f+0x4a>
 8017582:	2c02      	cmp	r4, #2
 8017584:	d057      	beq.n	8017636 <__ieee754_atan2f+0xf2>
 8017586:	2c03      	cmp	r4, #3
 8017588:	d113      	bne.n	80175b2 <__ieee754_atan2f+0x6e>
 801758a:	4b2d      	ldr	r3, [pc, #180]	; (8017640 <__ieee754_atan2f+0xfc>)
 801758c:	e011      	b.n	80175b2 <__ieee754_atan2f+0x6e>
 801758e:	b91e      	cbnz	r6, 8017598 <__ieee754_atan2f+0x54>
 8017590:	2f00      	cmp	r7, #0
 8017592:	da52      	bge.n	801763a <__ieee754_atan2f+0xf6>
 8017594:	4b2b      	ldr	r3, [pc, #172]	; (8017644 <__ieee754_atan2f+0x100>)
 8017596:	e00c      	b.n	80175b2 <__ieee754_atan2f+0x6e>
 8017598:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801759c:	d11a      	bne.n	80175d4 <__ieee754_atan2f+0x90>
 801759e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80175a2:	d10c      	bne.n	80175be <__ieee754_atan2f+0x7a>
 80175a4:	2c02      	cmp	r4, #2
 80175a6:	d006      	beq.n	80175b6 <__ieee754_atan2f+0x72>
 80175a8:	2c03      	cmp	r4, #3
 80175aa:	d006      	beq.n	80175ba <__ieee754_atan2f+0x76>
 80175ac:	2c01      	cmp	r4, #1
 80175ae:	d140      	bne.n	8017632 <__ieee754_atan2f+0xee>
 80175b0:	4b25      	ldr	r3, [pc, #148]	; (8017648 <__ieee754_atan2f+0x104>)
 80175b2:	4618      	mov	r0, r3
 80175b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175b6:	4b25      	ldr	r3, [pc, #148]	; (801764c <__ieee754_atan2f+0x108>)
 80175b8:	e7fb      	b.n	80175b2 <__ieee754_atan2f+0x6e>
 80175ba:	4b25      	ldr	r3, [pc, #148]	; (8017650 <__ieee754_atan2f+0x10c>)
 80175bc:	e7f9      	b.n	80175b2 <__ieee754_atan2f+0x6e>
 80175be:	2c02      	cmp	r4, #2
 80175c0:	d039      	beq.n	8017636 <__ieee754_atan2f+0xf2>
 80175c2:	2c03      	cmp	r4, #3
 80175c4:	d0e1      	beq.n	801758a <__ieee754_atan2f+0x46>
 80175c6:	2c01      	cmp	r4, #1
 80175c8:	d102      	bne.n	80175d0 <__ieee754_atan2f+0x8c>
 80175ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80175ce:	e7f0      	b.n	80175b2 <__ieee754_atan2f+0x6e>
 80175d0:	2300      	movs	r3, #0
 80175d2:	e7ee      	b.n	80175b2 <__ieee754_atan2f+0x6e>
 80175d4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80175d8:	d0da      	beq.n	8017590 <__ieee754_atan2f+0x4c>
 80175da:	1b92      	subs	r2, r2, r6
 80175dc:	15d2      	asrs	r2, r2, #23
 80175de:	2a3c      	cmp	r2, #60	; 0x3c
 80175e0:	dc17      	bgt.n	8017612 <__ieee754_atan2f+0xce>
 80175e2:	2900      	cmp	r1, #0
 80175e4:	da01      	bge.n	80175ea <__ieee754_atan2f+0xa6>
 80175e6:	323c      	adds	r2, #60	; 0x3c
 80175e8:	db15      	blt.n	8017616 <__ieee754_atan2f+0xd2>
 80175ea:	4618      	mov	r0, r3
 80175ec:	f7e9 fc98 	bl	8000f20 <__aeabi_fdiv>
 80175f0:	f002 f9ac 	bl	801994c <fabsf>
 80175f4:	f002 f89e 	bl	8019734 <atanf>
 80175f8:	4603      	mov	r3, r0
 80175fa:	2c01      	cmp	r4, #1
 80175fc:	d00d      	beq.n	801761a <__ieee754_atan2f+0xd6>
 80175fe:	2c02      	cmp	r4, #2
 8017600:	d00e      	beq.n	8017620 <__ieee754_atan2f+0xdc>
 8017602:	2c00      	cmp	r4, #0
 8017604:	d0d5      	beq.n	80175b2 <__ieee754_atan2f+0x6e>
 8017606:	4913      	ldr	r1, [pc, #76]	; (8017654 <__ieee754_atan2f+0x110>)
 8017608:	4618      	mov	r0, r3
 801760a:	f7e9 facd 	bl	8000ba8 <__addsf3>
 801760e:	4912      	ldr	r1, [pc, #72]	; (8017658 <__ieee754_atan2f+0x114>)
 8017610:	e00c      	b.n	801762c <__ieee754_atan2f+0xe8>
 8017612:	4b12      	ldr	r3, [pc, #72]	; (801765c <__ieee754_atan2f+0x118>)
 8017614:	e7f1      	b.n	80175fa <__ieee754_atan2f+0xb6>
 8017616:	2300      	movs	r3, #0
 8017618:	e7ef      	b.n	80175fa <__ieee754_atan2f+0xb6>
 801761a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801761e:	e7c8      	b.n	80175b2 <__ieee754_atan2f+0x6e>
 8017620:	490c      	ldr	r1, [pc, #48]	; (8017654 <__ieee754_atan2f+0x110>)
 8017622:	4618      	mov	r0, r3
 8017624:	f7e9 fac0 	bl	8000ba8 <__addsf3>
 8017628:	4601      	mov	r1, r0
 801762a:	480b      	ldr	r0, [pc, #44]	; (8017658 <__ieee754_atan2f+0x114>)
 801762c:	f7e9 faba 	bl	8000ba4 <__aeabi_fsub>
 8017630:	e798      	b.n	8017564 <__ieee754_atan2f+0x20>
 8017632:	4b0b      	ldr	r3, [pc, #44]	; (8017660 <__ieee754_atan2f+0x11c>)
 8017634:	e7bd      	b.n	80175b2 <__ieee754_atan2f+0x6e>
 8017636:	4b08      	ldr	r3, [pc, #32]	; (8017658 <__ieee754_atan2f+0x114>)
 8017638:	e7bb      	b.n	80175b2 <__ieee754_atan2f+0x6e>
 801763a:	4b08      	ldr	r3, [pc, #32]	; (801765c <__ieee754_atan2f+0x118>)
 801763c:	e7b9      	b.n	80175b2 <__ieee754_atan2f+0x6e>
 801763e:	bf00      	nop
 8017640:	c0490fdb 	.word	0xc0490fdb
 8017644:	bfc90fdb 	.word	0xbfc90fdb
 8017648:	bf490fdb 	.word	0xbf490fdb
 801764c:	4016cbe4 	.word	0x4016cbe4
 8017650:	c016cbe4 	.word	0xc016cbe4
 8017654:	33bbbd2e 	.word	0x33bbbd2e
 8017658:	40490fdb 	.word	0x40490fdb
 801765c:	3fc90fdb 	.word	0x3fc90fdb
 8017660:	3f490fdb 	.word	0x3f490fdb

08017664 <__ieee754_powf>:
 8017664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017668:	b087      	sub	sp, #28
 801766a:	9101      	str	r1, [sp, #4]
 801766c:	9c01      	ldr	r4, [sp, #4]
 801766e:	4681      	mov	r9, r0
 8017670:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 8017674:	f000 8324 	beq.w	8017cc0 <__ieee754_powf+0x65c>
 8017678:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 801767c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8017680:	4680      	mov	r8, r0
 8017682:	dc06      	bgt.n	8017692 <__ieee754_powf+0x2e>
 8017684:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8017688:	dd09      	ble.n	801769e <__ieee754_powf+0x3a>
 801768a:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 801768e:	f000 8317 	beq.w	8017cc0 <__ieee754_powf+0x65c>
 8017692:	4885      	ldr	r0, [pc, #532]	; (80178a8 <__ieee754_powf+0x244>)
 8017694:	b007      	add	sp, #28
 8017696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801769a:	f7fd bccd 	b.w	8015038 <nanf>
 801769e:	2800      	cmp	r0, #0
 80176a0:	da1d      	bge.n	80176de <__ieee754_powf+0x7a>
 80176a2:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80176a6:	da2b      	bge.n	8017700 <__ieee754_powf+0x9c>
 80176a8:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80176ac:	db30      	blt.n	8017710 <__ieee754_powf+0xac>
 80176ae:	15fb      	asrs	r3, r7, #23
 80176b0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80176b4:	fa47 f503 	asr.w	r5, r7, r3
 80176b8:	fa05 f303 	lsl.w	r3, r5, r3
 80176bc:	42bb      	cmp	r3, r7
 80176be:	d127      	bne.n	8017710 <__ieee754_powf+0xac>
 80176c0:	f005 0501 	and.w	r5, r5, #1
 80176c4:	f1c5 0502 	rsb	r5, r5, #2
 80176c8:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80176cc:	d122      	bne.n	8017714 <__ieee754_powf+0xb0>
 80176ce:	2c00      	cmp	r4, #0
 80176d0:	4649      	mov	r1, r9
 80176d2:	da11      	bge.n	80176f8 <__ieee754_powf+0x94>
 80176d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80176d8:	f7e9 fc22 	bl	8000f20 <__aeabi_fdiv>
 80176dc:	e021      	b.n	8017722 <__ieee754_powf+0xbe>
 80176de:	2500      	movs	r5, #0
 80176e0:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80176e4:	d1f0      	bne.n	80176c8 <__ieee754_powf+0x64>
 80176e6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80176ea:	f000 82e9 	beq.w	8017cc0 <__ieee754_powf+0x65c>
 80176ee:	dd09      	ble.n	8017704 <__ieee754_powf+0xa0>
 80176f0:	2c00      	cmp	r4, #0
 80176f2:	f280 82e8 	bge.w	8017cc6 <__ieee754_powf+0x662>
 80176f6:	2100      	movs	r1, #0
 80176f8:	4608      	mov	r0, r1
 80176fa:	b007      	add	sp, #28
 80176fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017700:	2502      	movs	r5, #2
 8017702:	e7ed      	b.n	80176e0 <__ieee754_powf+0x7c>
 8017704:	2c00      	cmp	r4, #0
 8017706:	daf6      	bge.n	80176f6 <__ieee754_powf+0x92>
 8017708:	9b01      	ldr	r3, [sp, #4]
 801770a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801770e:	e7f3      	b.n	80176f8 <__ieee754_powf+0x94>
 8017710:	2500      	movs	r5, #0
 8017712:	e7d9      	b.n	80176c8 <__ieee754_powf+0x64>
 8017714:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8017718:	d105      	bne.n	8017726 <__ieee754_powf+0xc2>
 801771a:	4649      	mov	r1, r9
 801771c:	4608      	mov	r0, r1
 801771e:	f7e9 fb4b 	bl	8000db8 <__aeabi_fmul>
 8017722:	4601      	mov	r1, r0
 8017724:	e7e8      	b.n	80176f8 <__ieee754_powf+0x94>
 8017726:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801772a:	4648      	mov	r0, r9
 801772c:	d107      	bne.n	801773e <__ieee754_powf+0xda>
 801772e:	f1b8 0f00 	cmp.w	r8, #0
 8017732:	db04      	blt.n	801773e <__ieee754_powf+0xda>
 8017734:	b007      	add	sp, #28
 8017736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801773a:	f000 bc37 	b.w	8017fac <__ieee754_sqrtf>
 801773e:	f002 f905 	bl	801994c <fabsf>
 8017742:	4601      	mov	r1, r0
 8017744:	b126      	cbz	r6, 8017750 <__ieee754_powf+0xec>
 8017746:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801774a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801774e:	d118      	bne.n	8017782 <__ieee754_powf+0x11e>
 8017750:	2c00      	cmp	r4, #0
 8017752:	da04      	bge.n	801775e <__ieee754_powf+0xfa>
 8017754:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017758:	f7e9 fbe2 	bl	8000f20 <__aeabi_fdiv>
 801775c:	4601      	mov	r1, r0
 801775e:	f1b8 0f00 	cmp.w	r8, #0
 8017762:	dac9      	bge.n	80176f8 <__ieee754_powf+0x94>
 8017764:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 8017768:	ea50 0305 	orrs.w	r3, r0, r5
 801776c:	d104      	bne.n	8017778 <__ieee754_powf+0x114>
 801776e:	4608      	mov	r0, r1
 8017770:	f7e9 fa18 	bl	8000ba4 <__aeabi_fsub>
 8017774:	4601      	mov	r1, r0
 8017776:	e7af      	b.n	80176d8 <__ieee754_powf+0x74>
 8017778:	2d01      	cmp	r5, #1
 801777a:	d1bd      	bne.n	80176f8 <__ieee754_powf+0x94>
 801777c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8017780:	e7ba      	b.n	80176f8 <__ieee754_powf+0x94>
 8017782:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8017786:	f108 33ff 	add.w	r3, r8, #4294967295
 801778a:	9303      	str	r3, [sp, #12]
 801778c:	432b      	orrs	r3, r5
 801778e:	d101      	bne.n	8017794 <__ieee754_powf+0x130>
 8017790:	4649      	mov	r1, r9
 8017792:	e7ec      	b.n	801776e <__ieee754_powf+0x10a>
 8017794:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8017798:	f340 8098 	ble.w	80178cc <__ieee754_powf+0x268>
 801779c:	4b43      	ldr	r3, [pc, #268]	; (80178ac <__ieee754_powf+0x248>)
 801779e:	429e      	cmp	r6, r3
 80177a0:	dc03      	bgt.n	80177aa <__ieee754_powf+0x146>
 80177a2:	2c00      	cmp	r4, #0
 80177a4:	daa7      	bge.n	80176f6 <__ieee754_powf+0x92>
 80177a6:	4942      	ldr	r1, [pc, #264]	; (80178b0 <__ieee754_powf+0x24c>)
 80177a8:	e7b8      	b.n	801771c <__ieee754_powf+0xb8>
 80177aa:	4b42      	ldr	r3, [pc, #264]	; (80178b4 <__ieee754_powf+0x250>)
 80177ac:	429e      	cmp	r6, r3
 80177ae:	dd02      	ble.n	80177b6 <__ieee754_powf+0x152>
 80177b0:	2c00      	cmp	r4, #0
 80177b2:	dcf8      	bgt.n	80177a6 <__ieee754_powf+0x142>
 80177b4:	e79f      	b.n	80176f6 <__ieee754_powf+0x92>
 80177b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80177ba:	f7e9 f9f3 	bl	8000ba4 <__aeabi_fsub>
 80177be:	493e      	ldr	r1, [pc, #248]	; (80178b8 <__ieee754_powf+0x254>)
 80177c0:	4606      	mov	r6, r0
 80177c2:	f7e9 faf9 	bl	8000db8 <__aeabi_fmul>
 80177c6:	493d      	ldr	r1, [pc, #244]	; (80178bc <__ieee754_powf+0x258>)
 80177c8:	4607      	mov	r7, r0
 80177ca:	4630      	mov	r0, r6
 80177cc:	f7e9 faf4 	bl	8000db8 <__aeabi_fmul>
 80177d0:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80177d4:	4680      	mov	r8, r0
 80177d6:	4630      	mov	r0, r6
 80177d8:	f7e9 faee 	bl	8000db8 <__aeabi_fmul>
 80177dc:	4601      	mov	r1, r0
 80177de:	4838      	ldr	r0, [pc, #224]	; (80178c0 <__ieee754_powf+0x25c>)
 80177e0:	f7e9 f9e0 	bl	8000ba4 <__aeabi_fsub>
 80177e4:	4631      	mov	r1, r6
 80177e6:	f7e9 fae7 	bl	8000db8 <__aeabi_fmul>
 80177ea:	4601      	mov	r1, r0
 80177ec:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80177f0:	f7e9 f9d8 	bl	8000ba4 <__aeabi_fsub>
 80177f4:	4631      	mov	r1, r6
 80177f6:	4681      	mov	r9, r0
 80177f8:	4630      	mov	r0, r6
 80177fa:	f7e9 fadd 	bl	8000db8 <__aeabi_fmul>
 80177fe:	4601      	mov	r1, r0
 8017800:	4648      	mov	r0, r9
 8017802:	f7e9 fad9 	bl	8000db8 <__aeabi_fmul>
 8017806:	492f      	ldr	r1, [pc, #188]	; (80178c4 <__ieee754_powf+0x260>)
 8017808:	f7e9 fad6 	bl	8000db8 <__aeabi_fmul>
 801780c:	4601      	mov	r1, r0
 801780e:	4640      	mov	r0, r8
 8017810:	f7e9 f9c8 	bl	8000ba4 <__aeabi_fsub>
 8017814:	4601      	mov	r1, r0
 8017816:	4606      	mov	r6, r0
 8017818:	4638      	mov	r0, r7
 801781a:	f7e9 f9c5 	bl	8000ba8 <__addsf3>
 801781e:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8017822:	f02a 0a0f 	bic.w	sl, sl, #15
 8017826:	4639      	mov	r1, r7
 8017828:	4650      	mov	r0, sl
 801782a:	f7e9 f9bb 	bl	8000ba4 <__aeabi_fsub>
 801782e:	4601      	mov	r1, r0
 8017830:	4630      	mov	r0, r6
 8017832:	f7e9 f9b7 	bl	8000ba4 <__aeabi_fsub>
 8017836:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801783a:	9b03      	ldr	r3, [sp, #12]
 801783c:	3d01      	subs	r5, #1
 801783e:	f024 040f 	bic.w	r4, r4, #15
 8017842:	432b      	orrs	r3, r5
 8017844:	4606      	mov	r6, r0
 8017846:	4621      	mov	r1, r4
 8017848:	9801      	ldr	r0, [sp, #4]
 801784a:	bf0c      	ite	eq
 801784c:	4d1e      	ldreq	r5, [pc, #120]	; (80178c8 <__ieee754_powf+0x264>)
 801784e:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8017852:	f7e9 f9a7 	bl	8000ba4 <__aeabi_fsub>
 8017856:	4651      	mov	r1, sl
 8017858:	f7e9 faae 	bl	8000db8 <__aeabi_fmul>
 801785c:	9901      	ldr	r1, [sp, #4]
 801785e:	4607      	mov	r7, r0
 8017860:	4630      	mov	r0, r6
 8017862:	f7e9 faa9 	bl	8000db8 <__aeabi_fmul>
 8017866:	4601      	mov	r1, r0
 8017868:	4638      	mov	r0, r7
 801786a:	f7e9 f99d 	bl	8000ba8 <__addsf3>
 801786e:	4621      	mov	r1, r4
 8017870:	4606      	mov	r6, r0
 8017872:	4650      	mov	r0, sl
 8017874:	f7e9 faa0 	bl	8000db8 <__aeabi_fmul>
 8017878:	4601      	mov	r1, r0
 801787a:	4607      	mov	r7, r0
 801787c:	4681      	mov	r9, r0
 801787e:	4630      	mov	r0, r6
 8017880:	f7e9 f992 	bl	8000ba8 <__addsf3>
 8017884:	2800      	cmp	r0, #0
 8017886:	4682      	mov	sl, r0
 8017888:	4680      	mov	r8, r0
 801788a:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 801788e:	f340 81fb 	ble.w	8017c88 <__ieee754_powf+0x624>
 8017892:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8017896:	f340 8149 	ble.w	8017b2c <__ieee754_powf+0x4c8>
 801789a:	4905      	ldr	r1, [pc, #20]	; (80178b0 <__ieee754_powf+0x24c>)
 801789c:	4628      	mov	r0, r5
 801789e:	f7e9 fa8b 	bl	8000db8 <__aeabi_fmul>
 80178a2:	4903      	ldr	r1, [pc, #12]	; (80178b0 <__ieee754_powf+0x24c>)
 80178a4:	e73b      	b.n	801771e <__ieee754_powf+0xba>
 80178a6:	bf00      	nop
 80178a8:	0801a2f1 	.word	0x0801a2f1
 80178ac:	3f7ffff7 	.word	0x3f7ffff7
 80178b0:	7149f2ca 	.word	0x7149f2ca
 80178b4:	3f800007 	.word	0x3f800007
 80178b8:	3fb8aa00 	.word	0x3fb8aa00
 80178bc:	36eca570 	.word	0x36eca570
 80178c0:	3eaaaaab 	.word	0x3eaaaaab
 80178c4:	3fb8aa3b 	.word	0x3fb8aa3b
 80178c8:	bf800000 	.word	0xbf800000
 80178cc:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 80178d0:	f280 810a 	bge.w	8017ae8 <__ieee754_powf+0x484>
 80178d4:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 80178d8:	f7e9 fa6e 	bl	8000db8 <__aeabi_fmul>
 80178dc:	f06f 0217 	mvn.w	r2, #23
 80178e0:	4606      	mov	r6, r0
 80178e2:	15f3      	asrs	r3, r6, #23
 80178e4:	3b7f      	subs	r3, #127	; 0x7f
 80178e6:	441a      	add	r2, r3
 80178e8:	4b81      	ldr	r3, [pc, #516]	; (8017af0 <__ieee754_powf+0x48c>)
 80178ea:	f3c6 0016 	ubfx	r0, r6, #0, #23
 80178ee:	4298      	cmp	r0, r3
 80178f0:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 80178f4:	dd06      	ble.n	8017904 <__ieee754_powf+0x2a0>
 80178f6:	4b7f      	ldr	r3, [pc, #508]	; (8017af4 <__ieee754_powf+0x490>)
 80178f8:	4298      	cmp	r0, r3
 80178fa:	f340 80f7 	ble.w	8017aec <__ieee754_powf+0x488>
 80178fe:	3201      	adds	r2, #1
 8017900:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8017904:	2700      	movs	r7, #0
 8017906:	4b7c      	ldr	r3, [pc, #496]	; (8017af8 <__ieee754_powf+0x494>)
 8017908:	4630      	mov	r0, r6
 801790a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 801790e:	9205      	str	r2, [sp, #20]
 8017910:	4619      	mov	r1, r3
 8017912:	9302      	str	r3, [sp, #8]
 8017914:	f7e9 f946 	bl	8000ba4 <__aeabi_fsub>
 8017918:	4631      	mov	r1, r6
 801791a:	4683      	mov	fp, r0
 801791c:	9802      	ldr	r0, [sp, #8]
 801791e:	f7e9 f943 	bl	8000ba8 <__addsf3>
 8017922:	4601      	mov	r1, r0
 8017924:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017928:	f7e9 fafa 	bl	8000f20 <__aeabi_fdiv>
 801792c:	4601      	mov	r1, r0
 801792e:	9004      	str	r0, [sp, #16]
 8017930:	4658      	mov	r0, fp
 8017932:	f7e9 fa41 	bl	8000db8 <__aeabi_fmul>
 8017936:	46b2      	mov	sl, r6
 8017938:	1076      	asrs	r6, r6, #1
 801793a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 801793e:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8017942:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8017946:	f028 080f 	bic.w	r8, r8, #15
 801794a:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 801794e:	4681      	mov	r9, r0
 8017950:	4631      	mov	r1, r6
 8017952:	4640      	mov	r0, r8
 8017954:	f7e9 fa30 	bl	8000db8 <__aeabi_fmul>
 8017958:	4601      	mov	r1, r0
 801795a:	4658      	mov	r0, fp
 801795c:	f7e9 f922 	bl	8000ba4 <__aeabi_fsub>
 8017960:	9902      	ldr	r1, [sp, #8]
 8017962:	4683      	mov	fp, r0
 8017964:	4630      	mov	r0, r6
 8017966:	f7e9 f91d 	bl	8000ba4 <__aeabi_fsub>
 801796a:	4601      	mov	r1, r0
 801796c:	4650      	mov	r0, sl
 801796e:	f7e9 f919 	bl	8000ba4 <__aeabi_fsub>
 8017972:	4641      	mov	r1, r8
 8017974:	f7e9 fa20 	bl	8000db8 <__aeabi_fmul>
 8017978:	4601      	mov	r1, r0
 801797a:	4658      	mov	r0, fp
 801797c:	f7e9 f912 	bl	8000ba4 <__aeabi_fsub>
 8017980:	9b04      	ldr	r3, [sp, #16]
 8017982:	4619      	mov	r1, r3
 8017984:	f7e9 fa18 	bl	8000db8 <__aeabi_fmul>
 8017988:	4649      	mov	r1, r9
 801798a:	4683      	mov	fp, r0
 801798c:	4648      	mov	r0, r9
 801798e:	f7e9 fa13 	bl	8000db8 <__aeabi_fmul>
 8017992:	4606      	mov	r6, r0
 8017994:	4959      	ldr	r1, [pc, #356]	; (8017afc <__ieee754_powf+0x498>)
 8017996:	f7e9 fa0f 	bl	8000db8 <__aeabi_fmul>
 801799a:	4959      	ldr	r1, [pc, #356]	; (8017b00 <__ieee754_powf+0x49c>)
 801799c:	f7e9 f904 	bl	8000ba8 <__addsf3>
 80179a0:	4631      	mov	r1, r6
 80179a2:	f7e9 fa09 	bl	8000db8 <__aeabi_fmul>
 80179a6:	4957      	ldr	r1, [pc, #348]	; (8017b04 <__ieee754_powf+0x4a0>)
 80179a8:	f7e9 f8fe 	bl	8000ba8 <__addsf3>
 80179ac:	4631      	mov	r1, r6
 80179ae:	f7e9 fa03 	bl	8000db8 <__aeabi_fmul>
 80179b2:	4955      	ldr	r1, [pc, #340]	; (8017b08 <__ieee754_powf+0x4a4>)
 80179b4:	f7e9 f8f8 	bl	8000ba8 <__addsf3>
 80179b8:	4631      	mov	r1, r6
 80179ba:	f7e9 f9fd 	bl	8000db8 <__aeabi_fmul>
 80179be:	4953      	ldr	r1, [pc, #332]	; (8017b0c <__ieee754_powf+0x4a8>)
 80179c0:	f7e9 f8f2 	bl	8000ba8 <__addsf3>
 80179c4:	4631      	mov	r1, r6
 80179c6:	f7e9 f9f7 	bl	8000db8 <__aeabi_fmul>
 80179ca:	4951      	ldr	r1, [pc, #324]	; (8017b10 <__ieee754_powf+0x4ac>)
 80179cc:	f7e9 f8ec 	bl	8000ba8 <__addsf3>
 80179d0:	4631      	mov	r1, r6
 80179d2:	4682      	mov	sl, r0
 80179d4:	4630      	mov	r0, r6
 80179d6:	f7e9 f9ef 	bl	8000db8 <__aeabi_fmul>
 80179da:	4601      	mov	r1, r0
 80179dc:	4650      	mov	r0, sl
 80179de:	f7e9 f9eb 	bl	8000db8 <__aeabi_fmul>
 80179e2:	4606      	mov	r6, r0
 80179e4:	4649      	mov	r1, r9
 80179e6:	4640      	mov	r0, r8
 80179e8:	f7e9 f8de 	bl	8000ba8 <__addsf3>
 80179ec:	4659      	mov	r1, fp
 80179ee:	f7e9 f9e3 	bl	8000db8 <__aeabi_fmul>
 80179f2:	4631      	mov	r1, r6
 80179f4:	f7e9 f8d8 	bl	8000ba8 <__addsf3>
 80179f8:	4641      	mov	r1, r8
 80179fa:	4682      	mov	sl, r0
 80179fc:	4640      	mov	r0, r8
 80179fe:	f7e9 f9db 	bl	8000db8 <__aeabi_fmul>
 8017a02:	4944      	ldr	r1, [pc, #272]	; (8017b14 <__ieee754_powf+0x4b0>)
 8017a04:	9002      	str	r0, [sp, #8]
 8017a06:	f7e9 f8cf 	bl	8000ba8 <__addsf3>
 8017a0a:	4651      	mov	r1, sl
 8017a0c:	f7e9 f8cc 	bl	8000ba8 <__addsf3>
 8017a10:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8017a14:	f026 060f 	bic.w	r6, r6, #15
 8017a18:	4631      	mov	r1, r6
 8017a1a:	4640      	mov	r0, r8
 8017a1c:	f7e9 f9cc 	bl	8000db8 <__aeabi_fmul>
 8017a20:	493c      	ldr	r1, [pc, #240]	; (8017b14 <__ieee754_powf+0x4b0>)
 8017a22:	4680      	mov	r8, r0
 8017a24:	4630      	mov	r0, r6
 8017a26:	f7e9 f8bd 	bl	8000ba4 <__aeabi_fsub>
 8017a2a:	9b02      	ldr	r3, [sp, #8]
 8017a2c:	4619      	mov	r1, r3
 8017a2e:	f7e9 f8b9 	bl	8000ba4 <__aeabi_fsub>
 8017a32:	4601      	mov	r1, r0
 8017a34:	4650      	mov	r0, sl
 8017a36:	f7e9 f8b5 	bl	8000ba4 <__aeabi_fsub>
 8017a3a:	4649      	mov	r1, r9
 8017a3c:	f7e9 f9bc 	bl	8000db8 <__aeabi_fmul>
 8017a40:	4659      	mov	r1, fp
 8017a42:	4681      	mov	r9, r0
 8017a44:	4630      	mov	r0, r6
 8017a46:	f7e9 f9b7 	bl	8000db8 <__aeabi_fmul>
 8017a4a:	4601      	mov	r1, r0
 8017a4c:	4648      	mov	r0, r9
 8017a4e:	f7e9 f8ab 	bl	8000ba8 <__addsf3>
 8017a52:	4682      	mov	sl, r0
 8017a54:	4601      	mov	r1, r0
 8017a56:	4640      	mov	r0, r8
 8017a58:	f7e9 f8a6 	bl	8000ba8 <__addsf3>
 8017a5c:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8017a60:	f029 090f 	bic.w	r9, r9, #15
 8017a64:	492c      	ldr	r1, [pc, #176]	; (8017b18 <__ieee754_powf+0x4b4>)
 8017a66:	4648      	mov	r0, r9
 8017a68:	f7e9 f9a6 	bl	8000db8 <__aeabi_fmul>
 8017a6c:	4641      	mov	r1, r8
 8017a6e:	4606      	mov	r6, r0
 8017a70:	4648      	mov	r0, r9
 8017a72:	f7e9 f897 	bl	8000ba4 <__aeabi_fsub>
 8017a76:	4601      	mov	r1, r0
 8017a78:	4650      	mov	r0, sl
 8017a7a:	f7e9 f893 	bl	8000ba4 <__aeabi_fsub>
 8017a7e:	4927      	ldr	r1, [pc, #156]	; (8017b1c <__ieee754_powf+0x4b8>)
 8017a80:	f7e9 f99a 	bl	8000db8 <__aeabi_fmul>
 8017a84:	4926      	ldr	r1, [pc, #152]	; (8017b20 <__ieee754_powf+0x4bc>)
 8017a86:	4680      	mov	r8, r0
 8017a88:	4648      	mov	r0, r9
 8017a8a:	f7e9 f995 	bl	8000db8 <__aeabi_fmul>
 8017a8e:	4601      	mov	r1, r0
 8017a90:	4640      	mov	r0, r8
 8017a92:	f7e9 f889 	bl	8000ba8 <__addsf3>
 8017a96:	4b23      	ldr	r3, [pc, #140]	; (8017b24 <__ieee754_powf+0x4c0>)
 8017a98:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8017a9c:	f7e9 f884 	bl	8000ba8 <__addsf3>
 8017aa0:	9a05      	ldr	r2, [sp, #20]
 8017aa2:	4680      	mov	r8, r0
 8017aa4:	4610      	mov	r0, r2
 8017aa6:	f7e9 f933 	bl	8000d10 <__aeabi_i2f>
 8017aaa:	4681      	mov	r9, r0
 8017aac:	4b1e      	ldr	r3, [pc, #120]	; (8017b28 <__ieee754_powf+0x4c4>)
 8017aae:	4641      	mov	r1, r8
 8017ab0:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8017ab4:	4630      	mov	r0, r6
 8017ab6:	f7e9 f877 	bl	8000ba8 <__addsf3>
 8017aba:	4639      	mov	r1, r7
 8017abc:	f7e9 f874 	bl	8000ba8 <__addsf3>
 8017ac0:	4649      	mov	r1, r9
 8017ac2:	f7e9 f871 	bl	8000ba8 <__addsf3>
 8017ac6:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8017aca:	f02a 0a0f 	bic.w	sl, sl, #15
 8017ace:	4649      	mov	r1, r9
 8017ad0:	4650      	mov	r0, sl
 8017ad2:	f7e9 f867 	bl	8000ba4 <__aeabi_fsub>
 8017ad6:	4639      	mov	r1, r7
 8017ad8:	f7e9 f864 	bl	8000ba4 <__aeabi_fsub>
 8017adc:	4631      	mov	r1, r6
 8017ade:	f7e9 f861 	bl	8000ba4 <__aeabi_fsub>
 8017ae2:	4601      	mov	r1, r0
 8017ae4:	4640      	mov	r0, r8
 8017ae6:	e6a4      	b.n	8017832 <__ieee754_powf+0x1ce>
 8017ae8:	2200      	movs	r2, #0
 8017aea:	e6fa      	b.n	80178e2 <__ieee754_powf+0x27e>
 8017aec:	2701      	movs	r7, #1
 8017aee:	e70a      	b.n	8017906 <__ieee754_powf+0x2a2>
 8017af0:	001cc471 	.word	0x001cc471
 8017af4:	005db3d6 	.word	0x005db3d6
 8017af8:	0801a4f0 	.word	0x0801a4f0
 8017afc:	3e53f142 	.word	0x3e53f142
 8017b00:	3e6c3255 	.word	0x3e6c3255
 8017b04:	3e8ba305 	.word	0x3e8ba305
 8017b08:	3eaaaaab 	.word	0x3eaaaaab
 8017b0c:	3edb6db7 	.word	0x3edb6db7
 8017b10:	3f19999a 	.word	0x3f19999a
 8017b14:	40400000 	.word	0x40400000
 8017b18:	3f763800 	.word	0x3f763800
 8017b1c:	3f76384f 	.word	0x3f76384f
 8017b20:	369dc3a0 	.word	0x369dc3a0
 8017b24:	0801a500 	.word	0x0801a500
 8017b28:	0801a4f8 	.word	0x0801a4f8
 8017b2c:	f040 80c0 	bne.w	8017cb0 <__ieee754_powf+0x64c>
 8017b30:	4966      	ldr	r1, [pc, #408]	; (8017ccc <__ieee754_powf+0x668>)
 8017b32:	4630      	mov	r0, r6
 8017b34:	f7e9 f838 	bl	8000ba8 <__addsf3>
 8017b38:	4639      	mov	r1, r7
 8017b3a:	4681      	mov	r9, r0
 8017b3c:	4650      	mov	r0, sl
 8017b3e:	f7e9 f831 	bl	8000ba4 <__aeabi_fsub>
 8017b42:	4601      	mov	r1, r0
 8017b44:	4648      	mov	r0, r9
 8017b46:	f7e9 faf3 	bl	8001130 <__aeabi_fcmpgt>
 8017b4a:	2800      	cmp	r0, #0
 8017b4c:	f47f aea5 	bne.w	801789a <__ieee754_powf+0x236>
 8017b50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8017b54:	15e4      	asrs	r4, r4, #23
 8017b56:	3c7e      	subs	r4, #126	; 0x7e
 8017b58:	4123      	asrs	r3, r4
 8017b5a:	4443      	add	r3, r8
 8017b5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017b60:	495b      	ldr	r1, [pc, #364]	; (8017cd0 <__ieee754_powf+0x66c>)
 8017b62:	3a7f      	subs	r2, #127	; 0x7f
 8017b64:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8017b68:	4111      	asrs	r1, r2
 8017b6a:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8017b6e:	f1c2 0217 	rsb	r2, r2, #23
 8017b72:	4114      	asrs	r4, r2
 8017b74:	f1b8 0f00 	cmp.w	r8, #0
 8017b78:	ea23 0101 	bic.w	r1, r3, r1
 8017b7c:	4638      	mov	r0, r7
 8017b7e:	bfb8      	it	lt
 8017b80:	4264      	neglt	r4, r4
 8017b82:	f7e9 f80f 	bl	8000ba4 <__aeabi_fsub>
 8017b86:	4681      	mov	r9, r0
 8017b88:	4631      	mov	r1, r6
 8017b8a:	4648      	mov	r0, r9
 8017b8c:	f7e9 f80c 	bl	8000ba8 <__addsf3>
 8017b90:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8017b94:	f027 070f 	bic.w	r7, r7, #15
 8017b98:	494e      	ldr	r1, [pc, #312]	; (8017cd4 <__ieee754_powf+0x670>)
 8017b9a:	4638      	mov	r0, r7
 8017b9c:	f7e9 f90c 	bl	8000db8 <__aeabi_fmul>
 8017ba0:	4649      	mov	r1, r9
 8017ba2:	4680      	mov	r8, r0
 8017ba4:	4638      	mov	r0, r7
 8017ba6:	f7e8 fffd 	bl	8000ba4 <__aeabi_fsub>
 8017baa:	4601      	mov	r1, r0
 8017bac:	4630      	mov	r0, r6
 8017bae:	f7e8 fff9 	bl	8000ba4 <__aeabi_fsub>
 8017bb2:	4949      	ldr	r1, [pc, #292]	; (8017cd8 <__ieee754_powf+0x674>)
 8017bb4:	f7e9 f900 	bl	8000db8 <__aeabi_fmul>
 8017bb8:	4948      	ldr	r1, [pc, #288]	; (8017cdc <__ieee754_powf+0x678>)
 8017bba:	4606      	mov	r6, r0
 8017bbc:	4638      	mov	r0, r7
 8017bbe:	f7e9 f8fb 	bl	8000db8 <__aeabi_fmul>
 8017bc2:	4601      	mov	r1, r0
 8017bc4:	4630      	mov	r0, r6
 8017bc6:	f7e8 ffef 	bl	8000ba8 <__addsf3>
 8017bca:	4607      	mov	r7, r0
 8017bcc:	4601      	mov	r1, r0
 8017bce:	4640      	mov	r0, r8
 8017bd0:	f7e8 ffea 	bl	8000ba8 <__addsf3>
 8017bd4:	4641      	mov	r1, r8
 8017bd6:	4606      	mov	r6, r0
 8017bd8:	f7e8 ffe4 	bl	8000ba4 <__aeabi_fsub>
 8017bdc:	4601      	mov	r1, r0
 8017bde:	4638      	mov	r0, r7
 8017be0:	f7e8 ffe0 	bl	8000ba4 <__aeabi_fsub>
 8017be4:	4631      	mov	r1, r6
 8017be6:	4680      	mov	r8, r0
 8017be8:	4630      	mov	r0, r6
 8017bea:	f7e9 f8e5 	bl	8000db8 <__aeabi_fmul>
 8017bee:	4607      	mov	r7, r0
 8017bf0:	493b      	ldr	r1, [pc, #236]	; (8017ce0 <__ieee754_powf+0x67c>)
 8017bf2:	f7e9 f8e1 	bl	8000db8 <__aeabi_fmul>
 8017bf6:	493b      	ldr	r1, [pc, #236]	; (8017ce4 <__ieee754_powf+0x680>)
 8017bf8:	f7e8 ffd4 	bl	8000ba4 <__aeabi_fsub>
 8017bfc:	4639      	mov	r1, r7
 8017bfe:	f7e9 f8db 	bl	8000db8 <__aeabi_fmul>
 8017c02:	4939      	ldr	r1, [pc, #228]	; (8017ce8 <__ieee754_powf+0x684>)
 8017c04:	f7e8 ffd0 	bl	8000ba8 <__addsf3>
 8017c08:	4639      	mov	r1, r7
 8017c0a:	f7e9 f8d5 	bl	8000db8 <__aeabi_fmul>
 8017c0e:	4937      	ldr	r1, [pc, #220]	; (8017cec <__ieee754_powf+0x688>)
 8017c10:	f7e8 ffc8 	bl	8000ba4 <__aeabi_fsub>
 8017c14:	4639      	mov	r1, r7
 8017c16:	f7e9 f8cf 	bl	8000db8 <__aeabi_fmul>
 8017c1a:	4935      	ldr	r1, [pc, #212]	; (8017cf0 <__ieee754_powf+0x68c>)
 8017c1c:	f7e8 ffc4 	bl	8000ba8 <__addsf3>
 8017c20:	4639      	mov	r1, r7
 8017c22:	f7e9 f8c9 	bl	8000db8 <__aeabi_fmul>
 8017c26:	4601      	mov	r1, r0
 8017c28:	4630      	mov	r0, r6
 8017c2a:	f7e8 ffbb 	bl	8000ba4 <__aeabi_fsub>
 8017c2e:	4607      	mov	r7, r0
 8017c30:	4601      	mov	r1, r0
 8017c32:	4630      	mov	r0, r6
 8017c34:	f7e9 f8c0 	bl	8000db8 <__aeabi_fmul>
 8017c38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8017c3c:	4681      	mov	r9, r0
 8017c3e:	4638      	mov	r0, r7
 8017c40:	f7e8 ffb0 	bl	8000ba4 <__aeabi_fsub>
 8017c44:	4601      	mov	r1, r0
 8017c46:	4648      	mov	r0, r9
 8017c48:	f7e9 f96a 	bl	8000f20 <__aeabi_fdiv>
 8017c4c:	4641      	mov	r1, r8
 8017c4e:	4607      	mov	r7, r0
 8017c50:	4630      	mov	r0, r6
 8017c52:	f7e9 f8b1 	bl	8000db8 <__aeabi_fmul>
 8017c56:	4641      	mov	r1, r8
 8017c58:	f7e8 ffa6 	bl	8000ba8 <__addsf3>
 8017c5c:	4601      	mov	r1, r0
 8017c5e:	4638      	mov	r0, r7
 8017c60:	f7e8 ffa0 	bl	8000ba4 <__aeabi_fsub>
 8017c64:	4631      	mov	r1, r6
 8017c66:	f7e8 ff9d 	bl	8000ba4 <__aeabi_fsub>
 8017c6a:	4601      	mov	r1, r0
 8017c6c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017c70:	f7e8 ff98 	bl	8000ba4 <__aeabi_fsub>
 8017c74:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8017c78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017c7c:	da1e      	bge.n	8017cbc <__ieee754_powf+0x658>
 8017c7e:	4621      	mov	r1, r4
 8017c80:	f001 ff00 	bl	8019a84 <scalbnf>
 8017c84:	4629      	mov	r1, r5
 8017c86:	e54a      	b.n	801771e <__ieee754_powf+0xba>
 8017c88:	4b1a      	ldr	r3, [pc, #104]	; (8017cf4 <__ieee754_powf+0x690>)
 8017c8a:	429c      	cmp	r4, r3
 8017c8c:	dd05      	ble.n	8017c9a <__ieee754_powf+0x636>
 8017c8e:	491a      	ldr	r1, [pc, #104]	; (8017cf8 <__ieee754_powf+0x694>)
 8017c90:	4628      	mov	r0, r5
 8017c92:	f7e9 f891 	bl	8000db8 <__aeabi_fmul>
 8017c96:	4918      	ldr	r1, [pc, #96]	; (8017cf8 <__ieee754_powf+0x694>)
 8017c98:	e541      	b.n	801771e <__ieee754_powf+0xba>
 8017c9a:	d109      	bne.n	8017cb0 <__ieee754_powf+0x64c>
 8017c9c:	4639      	mov	r1, r7
 8017c9e:	f7e8 ff81 	bl	8000ba4 <__aeabi_fsub>
 8017ca2:	4631      	mov	r1, r6
 8017ca4:	f7e9 fa3a 	bl	800111c <__aeabi_fcmpge>
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	f43f af51 	beq.w	8017b50 <__ieee754_powf+0x4ec>
 8017cae:	e7ee      	b.n	8017c8e <__ieee754_powf+0x62a>
 8017cb0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8017cb4:	f73f af4c 	bgt.w	8017b50 <__ieee754_powf+0x4ec>
 8017cb8:	2400      	movs	r4, #0
 8017cba:	e765      	b.n	8017b88 <__ieee754_powf+0x524>
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	e7e1      	b.n	8017c84 <__ieee754_powf+0x620>
 8017cc0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8017cc4:	e518      	b.n	80176f8 <__ieee754_powf+0x94>
 8017cc6:	9901      	ldr	r1, [sp, #4]
 8017cc8:	e516      	b.n	80176f8 <__ieee754_powf+0x94>
 8017cca:	bf00      	nop
 8017ccc:	3338aa3c 	.word	0x3338aa3c
 8017cd0:	007fffff 	.word	0x007fffff
 8017cd4:	3f317200 	.word	0x3f317200
 8017cd8:	3f317218 	.word	0x3f317218
 8017cdc:	35bfbe8c 	.word	0x35bfbe8c
 8017ce0:	3331bb4c 	.word	0x3331bb4c
 8017ce4:	35ddea0e 	.word	0x35ddea0e
 8017ce8:	388ab355 	.word	0x388ab355
 8017cec:	3b360b61 	.word	0x3b360b61
 8017cf0:	3e2aaaab 	.word	0x3e2aaaab
 8017cf4:	43160000 	.word	0x43160000
 8017cf8:	0da24260 	.word	0x0da24260

08017cfc <__ieee754_rem_pio2f>:
 8017cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d00:	4a9d      	ldr	r2, [pc, #628]	; (8017f78 <__ieee754_rem_pio2f+0x27c>)
 8017d02:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8017d06:	4295      	cmp	r5, r2
 8017d08:	b087      	sub	sp, #28
 8017d0a:	460c      	mov	r4, r1
 8017d0c:	4607      	mov	r7, r0
 8017d0e:	dc04      	bgt.n	8017d1a <__ieee754_rem_pio2f+0x1e>
 8017d10:	2300      	movs	r3, #0
 8017d12:	6020      	str	r0, [r4, #0]
 8017d14:	604b      	str	r3, [r1, #4]
 8017d16:	2600      	movs	r6, #0
 8017d18:	e01a      	b.n	8017d50 <__ieee754_rem_pio2f+0x54>
 8017d1a:	4a98      	ldr	r2, [pc, #608]	; (8017f7c <__ieee754_rem_pio2f+0x280>)
 8017d1c:	4295      	cmp	r5, r2
 8017d1e:	dc4b      	bgt.n	8017db8 <__ieee754_rem_pio2f+0xbc>
 8017d20:	2800      	cmp	r0, #0
 8017d22:	f025 050f 	bic.w	r5, r5, #15
 8017d26:	4996      	ldr	r1, [pc, #600]	; (8017f80 <__ieee754_rem_pio2f+0x284>)
 8017d28:	4e96      	ldr	r6, [pc, #600]	; (8017f84 <__ieee754_rem_pio2f+0x288>)
 8017d2a:	dd23      	ble.n	8017d74 <__ieee754_rem_pio2f+0x78>
 8017d2c:	f7e8 ff3a 	bl	8000ba4 <__aeabi_fsub>
 8017d30:	42b5      	cmp	r5, r6
 8017d32:	4607      	mov	r7, r0
 8017d34:	d010      	beq.n	8017d58 <__ieee754_rem_pio2f+0x5c>
 8017d36:	4994      	ldr	r1, [pc, #592]	; (8017f88 <__ieee754_rem_pio2f+0x28c>)
 8017d38:	f7e8 ff34 	bl	8000ba4 <__aeabi_fsub>
 8017d3c:	4601      	mov	r1, r0
 8017d3e:	6020      	str	r0, [r4, #0]
 8017d40:	4638      	mov	r0, r7
 8017d42:	f7e8 ff2f 	bl	8000ba4 <__aeabi_fsub>
 8017d46:	4990      	ldr	r1, [pc, #576]	; (8017f88 <__ieee754_rem_pio2f+0x28c>)
 8017d48:	f7e8 ff2c 	bl	8000ba4 <__aeabi_fsub>
 8017d4c:	2601      	movs	r6, #1
 8017d4e:	6060      	str	r0, [r4, #4]
 8017d50:	4630      	mov	r0, r6
 8017d52:	b007      	add	sp, #28
 8017d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d58:	498c      	ldr	r1, [pc, #560]	; (8017f8c <__ieee754_rem_pio2f+0x290>)
 8017d5a:	f7e8 ff23 	bl	8000ba4 <__aeabi_fsub>
 8017d5e:	498c      	ldr	r1, [pc, #560]	; (8017f90 <__ieee754_rem_pio2f+0x294>)
 8017d60:	4605      	mov	r5, r0
 8017d62:	f7e8 ff1f 	bl	8000ba4 <__aeabi_fsub>
 8017d66:	4601      	mov	r1, r0
 8017d68:	6020      	str	r0, [r4, #0]
 8017d6a:	4628      	mov	r0, r5
 8017d6c:	f7e8 ff1a 	bl	8000ba4 <__aeabi_fsub>
 8017d70:	4987      	ldr	r1, [pc, #540]	; (8017f90 <__ieee754_rem_pio2f+0x294>)
 8017d72:	e7e9      	b.n	8017d48 <__ieee754_rem_pio2f+0x4c>
 8017d74:	f7e8 ff18 	bl	8000ba8 <__addsf3>
 8017d78:	42b5      	cmp	r5, r6
 8017d7a:	4607      	mov	r7, r0
 8017d7c:	d00e      	beq.n	8017d9c <__ieee754_rem_pio2f+0xa0>
 8017d7e:	4982      	ldr	r1, [pc, #520]	; (8017f88 <__ieee754_rem_pio2f+0x28c>)
 8017d80:	f7e8 ff12 	bl	8000ba8 <__addsf3>
 8017d84:	4601      	mov	r1, r0
 8017d86:	6020      	str	r0, [r4, #0]
 8017d88:	4638      	mov	r0, r7
 8017d8a:	f7e8 ff0b 	bl	8000ba4 <__aeabi_fsub>
 8017d8e:	497e      	ldr	r1, [pc, #504]	; (8017f88 <__ieee754_rem_pio2f+0x28c>)
 8017d90:	f7e8 ff0a 	bl	8000ba8 <__addsf3>
 8017d94:	f04f 36ff 	mov.w	r6, #4294967295
 8017d98:	6060      	str	r0, [r4, #4]
 8017d9a:	e7d9      	b.n	8017d50 <__ieee754_rem_pio2f+0x54>
 8017d9c:	497b      	ldr	r1, [pc, #492]	; (8017f8c <__ieee754_rem_pio2f+0x290>)
 8017d9e:	f7e8 ff03 	bl	8000ba8 <__addsf3>
 8017da2:	497b      	ldr	r1, [pc, #492]	; (8017f90 <__ieee754_rem_pio2f+0x294>)
 8017da4:	4605      	mov	r5, r0
 8017da6:	f7e8 feff 	bl	8000ba8 <__addsf3>
 8017daa:	4601      	mov	r1, r0
 8017dac:	6020      	str	r0, [r4, #0]
 8017dae:	4628      	mov	r0, r5
 8017db0:	f7e8 fef8 	bl	8000ba4 <__aeabi_fsub>
 8017db4:	4976      	ldr	r1, [pc, #472]	; (8017f90 <__ieee754_rem_pio2f+0x294>)
 8017db6:	e7eb      	b.n	8017d90 <__ieee754_rem_pio2f+0x94>
 8017db8:	4a76      	ldr	r2, [pc, #472]	; (8017f94 <__ieee754_rem_pio2f+0x298>)
 8017dba:	4295      	cmp	r5, r2
 8017dbc:	f300 808c 	bgt.w	8017ed8 <__ieee754_rem_pio2f+0x1dc>
 8017dc0:	f001 fdc4 	bl	801994c <fabsf>
 8017dc4:	4974      	ldr	r1, [pc, #464]	; (8017f98 <__ieee754_rem_pio2f+0x29c>)
 8017dc6:	4680      	mov	r8, r0
 8017dc8:	f7e8 fff6 	bl	8000db8 <__aeabi_fmul>
 8017dcc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8017dd0:	f7e8 feea 	bl	8000ba8 <__addsf3>
 8017dd4:	f7e9 f9cc 	bl	8001170 <__aeabi_f2iz>
 8017dd8:	4606      	mov	r6, r0
 8017dda:	f7e8 ff99 	bl	8000d10 <__aeabi_i2f>
 8017dde:	4968      	ldr	r1, [pc, #416]	; (8017f80 <__ieee754_rem_pio2f+0x284>)
 8017de0:	4682      	mov	sl, r0
 8017de2:	f7e8 ffe9 	bl	8000db8 <__aeabi_fmul>
 8017de6:	4601      	mov	r1, r0
 8017de8:	4640      	mov	r0, r8
 8017dea:	f7e8 fedb 	bl	8000ba4 <__aeabi_fsub>
 8017dee:	4966      	ldr	r1, [pc, #408]	; (8017f88 <__ieee754_rem_pio2f+0x28c>)
 8017df0:	4680      	mov	r8, r0
 8017df2:	4650      	mov	r0, sl
 8017df4:	f7e8 ffe0 	bl	8000db8 <__aeabi_fmul>
 8017df8:	2e1f      	cmp	r6, #31
 8017dfa:	4681      	mov	r9, r0
 8017dfc:	dc0c      	bgt.n	8017e18 <__ieee754_rem_pio2f+0x11c>
 8017dfe:	4a67      	ldr	r2, [pc, #412]	; (8017f9c <__ieee754_rem_pio2f+0x2a0>)
 8017e00:	1e71      	subs	r1, r6, #1
 8017e02:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8017e06:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8017e0a:	4293      	cmp	r3, r2
 8017e0c:	d004      	beq.n	8017e18 <__ieee754_rem_pio2f+0x11c>
 8017e0e:	4649      	mov	r1, r9
 8017e10:	4640      	mov	r0, r8
 8017e12:	f7e8 fec7 	bl	8000ba4 <__aeabi_fsub>
 8017e16:	e009      	b.n	8017e2c <__ieee754_rem_pio2f+0x130>
 8017e18:	4649      	mov	r1, r9
 8017e1a:	4640      	mov	r0, r8
 8017e1c:	f7e8 fec2 	bl	8000ba4 <__aeabi_fsub>
 8017e20:	15ed      	asrs	r5, r5, #23
 8017e22:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017e26:	1aeb      	subs	r3, r5, r3
 8017e28:	2b08      	cmp	r3, #8
 8017e2a:	dc01      	bgt.n	8017e30 <__ieee754_rem_pio2f+0x134>
 8017e2c:	6020      	str	r0, [r4, #0]
 8017e2e:	e024      	b.n	8017e7a <__ieee754_rem_pio2f+0x17e>
 8017e30:	4956      	ldr	r1, [pc, #344]	; (8017f8c <__ieee754_rem_pio2f+0x290>)
 8017e32:	4650      	mov	r0, sl
 8017e34:	f7e8 ffc0 	bl	8000db8 <__aeabi_fmul>
 8017e38:	4681      	mov	r9, r0
 8017e3a:	4601      	mov	r1, r0
 8017e3c:	4640      	mov	r0, r8
 8017e3e:	f7e8 feb1 	bl	8000ba4 <__aeabi_fsub>
 8017e42:	4601      	mov	r1, r0
 8017e44:	4683      	mov	fp, r0
 8017e46:	4640      	mov	r0, r8
 8017e48:	f7e8 feac 	bl	8000ba4 <__aeabi_fsub>
 8017e4c:	4649      	mov	r1, r9
 8017e4e:	f7e8 fea9 	bl	8000ba4 <__aeabi_fsub>
 8017e52:	4680      	mov	r8, r0
 8017e54:	494e      	ldr	r1, [pc, #312]	; (8017f90 <__ieee754_rem_pio2f+0x294>)
 8017e56:	4650      	mov	r0, sl
 8017e58:	f7e8 ffae 	bl	8000db8 <__aeabi_fmul>
 8017e5c:	4641      	mov	r1, r8
 8017e5e:	f7e8 fea1 	bl	8000ba4 <__aeabi_fsub>
 8017e62:	4601      	mov	r1, r0
 8017e64:	4681      	mov	r9, r0
 8017e66:	4658      	mov	r0, fp
 8017e68:	f7e8 fe9c 	bl	8000ba4 <__aeabi_fsub>
 8017e6c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017e70:	1aed      	subs	r5, r5, r3
 8017e72:	2d19      	cmp	r5, #25
 8017e74:	dc15      	bgt.n	8017ea2 <__ieee754_rem_pio2f+0x1a6>
 8017e76:	46d8      	mov	r8, fp
 8017e78:	6020      	str	r0, [r4, #0]
 8017e7a:	6825      	ldr	r5, [r4, #0]
 8017e7c:	4640      	mov	r0, r8
 8017e7e:	4629      	mov	r1, r5
 8017e80:	f7e8 fe90 	bl	8000ba4 <__aeabi_fsub>
 8017e84:	4649      	mov	r1, r9
 8017e86:	f7e8 fe8d 	bl	8000ba4 <__aeabi_fsub>
 8017e8a:	2f00      	cmp	r7, #0
 8017e8c:	6060      	str	r0, [r4, #4]
 8017e8e:	f6bf af5f 	bge.w	8017d50 <__ieee754_rem_pio2f+0x54>
 8017e92:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8017e96:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8017e9a:	6025      	str	r5, [r4, #0]
 8017e9c:	6060      	str	r0, [r4, #4]
 8017e9e:	4276      	negs	r6, r6
 8017ea0:	e756      	b.n	8017d50 <__ieee754_rem_pio2f+0x54>
 8017ea2:	493f      	ldr	r1, [pc, #252]	; (8017fa0 <__ieee754_rem_pio2f+0x2a4>)
 8017ea4:	4650      	mov	r0, sl
 8017ea6:	f7e8 ff87 	bl	8000db8 <__aeabi_fmul>
 8017eaa:	4605      	mov	r5, r0
 8017eac:	4601      	mov	r1, r0
 8017eae:	4658      	mov	r0, fp
 8017eb0:	f7e8 fe78 	bl	8000ba4 <__aeabi_fsub>
 8017eb4:	4601      	mov	r1, r0
 8017eb6:	4680      	mov	r8, r0
 8017eb8:	4658      	mov	r0, fp
 8017eba:	f7e8 fe73 	bl	8000ba4 <__aeabi_fsub>
 8017ebe:	4629      	mov	r1, r5
 8017ec0:	f7e8 fe70 	bl	8000ba4 <__aeabi_fsub>
 8017ec4:	4605      	mov	r5, r0
 8017ec6:	4937      	ldr	r1, [pc, #220]	; (8017fa4 <__ieee754_rem_pio2f+0x2a8>)
 8017ec8:	4650      	mov	r0, sl
 8017eca:	f7e8 ff75 	bl	8000db8 <__aeabi_fmul>
 8017ece:	4629      	mov	r1, r5
 8017ed0:	f7e8 fe68 	bl	8000ba4 <__aeabi_fsub>
 8017ed4:	4681      	mov	r9, r0
 8017ed6:	e79a      	b.n	8017e0e <__ieee754_rem_pio2f+0x112>
 8017ed8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8017edc:	db05      	blt.n	8017eea <__ieee754_rem_pio2f+0x1ee>
 8017ede:	4601      	mov	r1, r0
 8017ee0:	f7e8 fe60 	bl	8000ba4 <__aeabi_fsub>
 8017ee4:	6060      	str	r0, [r4, #4]
 8017ee6:	6020      	str	r0, [r4, #0]
 8017ee8:	e715      	b.n	8017d16 <__ieee754_rem_pio2f+0x1a>
 8017eea:	15ee      	asrs	r6, r5, #23
 8017eec:	3e86      	subs	r6, #134	; 0x86
 8017eee:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8017ef2:	4628      	mov	r0, r5
 8017ef4:	f7e9 f93c 	bl	8001170 <__aeabi_f2iz>
 8017ef8:	f7e8 ff0a 	bl	8000d10 <__aeabi_i2f>
 8017efc:	4601      	mov	r1, r0
 8017efe:	9003      	str	r0, [sp, #12]
 8017f00:	4628      	mov	r0, r5
 8017f02:	f7e8 fe4f 	bl	8000ba4 <__aeabi_fsub>
 8017f06:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8017f0a:	f7e8 ff55 	bl	8000db8 <__aeabi_fmul>
 8017f0e:	4680      	mov	r8, r0
 8017f10:	f7e9 f92e 	bl	8001170 <__aeabi_f2iz>
 8017f14:	f7e8 fefc 	bl	8000d10 <__aeabi_i2f>
 8017f18:	4601      	mov	r1, r0
 8017f1a:	9004      	str	r0, [sp, #16]
 8017f1c:	4605      	mov	r5, r0
 8017f1e:	4640      	mov	r0, r8
 8017f20:	f7e8 fe40 	bl	8000ba4 <__aeabi_fsub>
 8017f24:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8017f28:	f7e8 ff46 	bl	8000db8 <__aeabi_fmul>
 8017f2c:	2100      	movs	r1, #0
 8017f2e:	9005      	str	r0, [sp, #20]
 8017f30:	f7e9 f8d6 	bl	80010e0 <__aeabi_fcmpeq>
 8017f34:	b1e8      	cbz	r0, 8017f72 <__ieee754_rem_pio2f+0x276>
 8017f36:	2100      	movs	r1, #0
 8017f38:	4628      	mov	r0, r5
 8017f3a:	f7e9 f8d1 	bl	80010e0 <__aeabi_fcmpeq>
 8017f3e:	2800      	cmp	r0, #0
 8017f40:	bf14      	ite	ne
 8017f42:	2301      	movne	r3, #1
 8017f44:	2302      	moveq	r3, #2
 8017f46:	4a18      	ldr	r2, [pc, #96]	; (8017fa8 <__ieee754_rem_pio2f+0x2ac>)
 8017f48:	4621      	mov	r1, r4
 8017f4a:	9201      	str	r2, [sp, #4]
 8017f4c:	2202      	movs	r2, #2
 8017f4e:	a803      	add	r0, sp, #12
 8017f50:	9200      	str	r2, [sp, #0]
 8017f52:	4632      	mov	r2, r6
 8017f54:	f000 fdbe 	bl	8018ad4 <__kernel_rem_pio2f>
 8017f58:	2f00      	cmp	r7, #0
 8017f5a:	4606      	mov	r6, r0
 8017f5c:	f6bf aef8 	bge.w	8017d50 <__ieee754_rem_pio2f+0x54>
 8017f60:	6823      	ldr	r3, [r4, #0]
 8017f62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017f66:	6023      	str	r3, [r4, #0]
 8017f68:	6863      	ldr	r3, [r4, #4]
 8017f6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017f6e:	6063      	str	r3, [r4, #4]
 8017f70:	e795      	b.n	8017e9e <__ieee754_rem_pio2f+0x1a2>
 8017f72:	2303      	movs	r3, #3
 8017f74:	e7e7      	b.n	8017f46 <__ieee754_rem_pio2f+0x24a>
 8017f76:	bf00      	nop
 8017f78:	3f490fd8 	.word	0x3f490fd8
 8017f7c:	4016cbe3 	.word	0x4016cbe3
 8017f80:	3fc90f80 	.word	0x3fc90f80
 8017f84:	3fc90fd0 	.word	0x3fc90fd0
 8017f88:	37354443 	.word	0x37354443
 8017f8c:	37354400 	.word	0x37354400
 8017f90:	2e85a308 	.word	0x2e85a308
 8017f94:	43490f80 	.word	0x43490f80
 8017f98:	3f22f984 	.word	0x3f22f984
 8017f9c:	0801a508 	.word	0x0801a508
 8017fa0:	2e85a300 	.word	0x2e85a300
 8017fa4:	248d3132 	.word	0x248d3132
 8017fa8:	0801a588 	.word	0x0801a588

08017fac <__ieee754_sqrtf>:
 8017fac:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8017fb0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017fb4:	b570      	push	{r4, r5, r6, lr}
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	4604      	mov	r4, r0
 8017fba:	d309      	bcc.n	8017fd0 <__ieee754_sqrtf+0x24>
 8017fbc:	4601      	mov	r1, r0
 8017fbe:	f7e8 fefb 	bl	8000db8 <__aeabi_fmul>
 8017fc2:	4601      	mov	r1, r0
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	f7e8 fdef 	bl	8000ba8 <__addsf3>
 8017fca:	4604      	mov	r4, r0
 8017fcc:	4620      	mov	r0, r4
 8017fce:	bd70      	pop	{r4, r5, r6, pc}
 8017fd0:	2a00      	cmp	r2, #0
 8017fd2:	d0fb      	beq.n	8017fcc <__ieee754_sqrtf+0x20>
 8017fd4:	2800      	cmp	r0, #0
 8017fd6:	da06      	bge.n	8017fe6 <__ieee754_sqrtf+0x3a>
 8017fd8:	4601      	mov	r1, r0
 8017fda:	f7e8 fde3 	bl	8000ba4 <__aeabi_fsub>
 8017fde:	4601      	mov	r1, r0
 8017fe0:	f7e8 ff9e 	bl	8000f20 <__aeabi_fdiv>
 8017fe4:	e7f1      	b.n	8017fca <__ieee754_sqrtf+0x1e>
 8017fe6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8017fea:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8017fee:	d32e      	bcc.n	801804e <__ieee754_sqrtf+0xa2>
 8017ff0:	3c7f      	subs	r4, #127	; 0x7f
 8017ff2:	07e2      	lsls	r2, r4, #31
 8017ff4:	f04f 0200 	mov.w	r2, #0
 8017ff8:	ea4f 0164 	mov.w	r1, r4, asr #1
 8017ffc:	4616      	mov	r6, r2
 8017ffe:	f04f 0419 	mov.w	r4, #25
 8018002:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8018006:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801800a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801800e:	bf48      	it	mi
 8018010:	005b      	lslmi	r3, r3, #1
 8018012:	005b      	lsls	r3, r3, #1
 8018014:	1835      	adds	r5, r6, r0
 8018016:	429d      	cmp	r5, r3
 8018018:	bfde      	ittt	le
 801801a:	182e      	addle	r6, r5, r0
 801801c:	1b5b      	suble	r3, r3, r5
 801801e:	1812      	addle	r2, r2, r0
 8018020:	3c01      	subs	r4, #1
 8018022:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018026:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801802a:	d1f3      	bne.n	8018014 <__ieee754_sqrtf+0x68>
 801802c:	b113      	cbz	r3, 8018034 <__ieee754_sqrtf+0x88>
 801802e:	3201      	adds	r2, #1
 8018030:	f022 0201 	bic.w	r2, r2, #1
 8018034:	1054      	asrs	r4, r2, #1
 8018036:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 801803a:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 801803e:	e7c5      	b.n	8017fcc <__ieee754_sqrtf+0x20>
 8018040:	005b      	lsls	r3, r3, #1
 8018042:	3201      	adds	r2, #1
 8018044:	0219      	lsls	r1, r3, #8
 8018046:	d5fb      	bpl.n	8018040 <__ieee754_sqrtf+0x94>
 8018048:	3a01      	subs	r2, #1
 801804a:	1aa4      	subs	r4, r4, r2
 801804c:	e7d0      	b.n	8017ff0 <__ieee754_sqrtf+0x44>
 801804e:	2200      	movs	r2, #0
 8018050:	e7f8      	b.n	8018044 <__ieee754_sqrtf+0x98>
 8018052:	0000      	movs	r0, r0
 8018054:	0000      	movs	r0, r0
	...

08018058 <__kernel_cos>:
 8018058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801805c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018060:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8018064:	4680      	mov	r8, r0
 8018066:	460f      	mov	r7, r1
 8018068:	e9cd 2300 	strd	r2, r3, [sp]
 801806c:	da04      	bge.n	8018078 <__kernel_cos+0x20>
 801806e:	f7e8 fcfd 	bl	8000a6c <__aeabi_d2iz>
 8018072:	2800      	cmp	r0, #0
 8018074:	f000 8086 	beq.w	8018184 <__kernel_cos+0x12c>
 8018078:	4642      	mov	r2, r8
 801807a:	463b      	mov	r3, r7
 801807c:	4640      	mov	r0, r8
 801807e:	4639      	mov	r1, r7
 8018080:	f7e8 fa44 	bl	800050c <__aeabi_dmul>
 8018084:	2200      	movs	r2, #0
 8018086:	4b4e      	ldr	r3, [pc, #312]	; (80181c0 <__kernel_cos+0x168>)
 8018088:	4604      	mov	r4, r0
 801808a:	460d      	mov	r5, r1
 801808c:	f7e8 fa3e 	bl	800050c <__aeabi_dmul>
 8018090:	a33f      	add	r3, pc, #252	; (adr r3, 8018190 <__kernel_cos+0x138>)
 8018092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018096:	4682      	mov	sl, r0
 8018098:	468b      	mov	fp, r1
 801809a:	4620      	mov	r0, r4
 801809c:	4629      	mov	r1, r5
 801809e:	f7e8 fa35 	bl	800050c <__aeabi_dmul>
 80180a2:	a33d      	add	r3, pc, #244	; (adr r3, 8018198 <__kernel_cos+0x140>)
 80180a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180a8:	f7e8 f87a 	bl	80001a0 <__adddf3>
 80180ac:	4622      	mov	r2, r4
 80180ae:	462b      	mov	r3, r5
 80180b0:	f7e8 fa2c 	bl	800050c <__aeabi_dmul>
 80180b4:	a33a      	add	r3, pc, #232	; (adr r3, 80181a0 <__kernel_cos+0x148>)
 80180b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ba:	f7e8 f86f 	bl	800019c <__aeabi_dsub>
 80180be:	4622      	mov	r2, r4
 80180c0:	462b      	mov	r3, r5
 80180c2:	f7e8 fa23 	bl	800050c <__aeabi_dmul>
 80180c6:	a338      	add	r3, pc, #224	; (adr r3, 80181a8 <__kernel_cos+0x150>)
 80180c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180cc:	f7e8 f868 	bl	80001a0 <__adddf3>
 80180d0:	4622      	mov	r2, r4
 80180d2:	462b      	mov	r3, r5
 80180d4:	f7e8 fa1a 	bl	800050c <__aeabi_dmul>
 80180d8:	a335      	add	r3, pc, #212	; (adr r3, 80181b0 <__kernel_cos+0x158>)
 80180da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180de:	f7e8 f85d 	bl	800019c <__aeabi_dsub>
 80180e2:	4622      	mov	r2, r4
 80180e4:	462b      	mov	r3, r5
 80180e6:	f7e8 fa11 	bl	800050c <__aeabi_dmul>
 80180ea:	a333      	add	r3, pc, #204	; (adr r3, 80181b8 <__kernel_cos+0x160>)
 80180ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180f0:	f7e8 f856 	bl	80001a0 <__adddf3>
 80180f4:	4622      	mov	r2, r4
 80180f6:	462b      	mov	r3, r5
 80180f8:	f7e8 fa08 	bl	800050c <__aeabi_dmul>
 80180fc:	4622      	mov	r2, r4
 80180fe:	462b      	mov	r3, r5
 8018100:	f7e8 fa04 	bl	800050c <__aeabi_dmul>
 8018104:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018108:	4604      	mov	r4, r0
 801810a:	460d      	mov	r5, r1
 801810c:	4640      	mov	r0, r8
 801810e:	4639      	mov	r1, r7
 8018110:	f7e8 f9fc 	bl	800050c <__aeabi_dmul>
 8018114:	460b      	mov	r3, r1
 8018116:	4602      	mov	r2, r0
 8018118:	4629      	mov	r1, r5
 801811a:	4620      	mov	r0, r4
 801811c:	f7e8 f83e 	bl	800019c <__aeabi_dsub>
 8018120:	4b28      	ldr	r3, [pc, #160]	; (80181c4 <__kernel_cos+0x16c>)
 8018122:	4680      	mov	r8, r0
 8018124:	429e      	cmp	r6, r3
 8018126:	4689      	mov	r9, r1
 8018128:	dc0e      	bgt.n	8018148 <__kernel_cos+0xf0>
 801812a:	4602      	mov	r2, r0
 801812c:	460b      	mov	r3, r1
 801812e:	4650      	mov	r0, sl
 8018130:	4659      	mov	r1, fp
 8018132:	f7e8 f833 	bl	800019c <__aeabi_dsub>
 8018136:	4602      	mov	r2, r0
 8018138:	2000      	movs	r0, #0
 801813a:	460b      	mov	r3, r1
 801813c:	4922      	ldr	r1, [pc, #136]	; (80181c8 <__kernel_cos+0x170>)
 801813e:	f7e8 f82d 	bl	800019c <__aeabi_dsub>
 8018142:	b003      	add	sp, #12
 8018144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018148:	2400      	movs	r4, #0
 801814a:	4b20      	ldr	r3, [pc, #128]	; (80181cc <__kernel_cos+0x174>)
 801814c:	4622      	mov	r2, r4
 801814e:	429e      	cmp	r6, r3
 8018150:	bfcc      	ite	gt
 8018152:	4d1f      	ldrgt	r5, [pc, #124]	; (80181d0 <__kernel_cos+0x178>)
 8018154:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8018158:	462b      	mov	r3, r5
 801815a:	2000      	movs	r0, #0
 801815c:	491a      	ldr	r1, [pc, #104]	; (80181c8 <__kernel_cos+0x170>)
 801815e:	f7e8 f81d 	bl	800019c <__aeabi_dsub>
 8018162:	4622      	mov	r2, r4
 8018164:	4606      	mov	r6, r0
 8018166:	460f      	mov	r7, r1
 8018168:	462b      	mov	r3, r5
 801816a:	4650      	mov	r0, sl
 801816c:	4659      	mov	r1, fp
 801816e:	f7e8 f815 	bl	800019c <__aeabi_dsub>
 8018172:	4642      	mov	r2, r8
 8018174:	464b      	mov	r3, r9
 8018176:	f7e8 f811 	bl	800019c <__aeabi_dsub>
 801817a:	4602      	mov	r2, r0
 801817c:	460b      	mov	r3, r1
 801817e:	4630      	mov	r0, r6
 8018180:	4639      	mov	r1, r7
 8018182:	e7dc      	b.n	801813e <__kernel_cos+0xe6>
 8018184:	2000      	movs	r0, #0
 8018186:	4910      	ldr	r1, [pc, #64]	; (80181c8 <__kernel_cos+0x170>)
 8018188:	e7db      	b.n	8018142 <__kernel_cos+0xea>
 801818a:	bf00      	nop
 801818c:	f3af 8000 	nop.w
 8018190:	be8838d4 	.word	0xbe8838d4
 8018194:	bda8fae9 	.word	0xbda8fae9
 8018198:	bdb4b1c4 	.word	0xbdb4b1c4
 801819c:	3e21ee9e 	.word	0x3e21ee9e
 80181a0:	809c52ad 	.word	0x809c52ad
 80181a4:	3e927e4f 	.word	0x3e927e4f
 80181a8:	19cb1590 	.word	0x19cb1590
 80181ac:	3efa01a0 	.word	0x3efa01a0
 80181b0:	16c15177 	.word	0x16c15177
 80181b4:	3f56c16c 	.word	0x3f56c16c
 80181b8:	5555554c 	.word	0x5555554c
 80181bc:	3fa55555 	.word	0x3fa55555
 80181c0:	3fe00000 	.word	0x3fe00000
 80181c4:	3fd33332 	.word	0x3fd33332
 80181c8:	3ff00000 	.word	0x3ff00000
 80181cc:	3fe90000 	.word	0x3fe90000
 80181d0:	3fd20000 	.word	0x3fd20000

080181d4 <__kernel_rem_pio2>:
 80181d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80181dc:	9307      	str	r3, [sp, #28]
 80181de:	9104      	str	r1, [sp, #16]
 80181e0:	4bbf      	ldr	r3, [pc, #764]	; (80184e0 <__kernel_rem_pio2+0x30c>)
 80181e2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80181e4:	1ed4      	subs	r4, r2, #3
 80181e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80181ea:	2500      	movs	r5, #0
 80181ec:	9302      	str	r3, [sp, #8]
 80181ee:	9b07      	ldr	r3, [sp, #28]
 80181f0:	9008      	str	r0, [sp, #32]
 80181f2:	3b01      	subs	r3, #1
 80181f4:	9306      	str	r3, [sp, #24]
 80181f6:	2318      	movs	r3, #24
 80181f8:	fb94 f4f3 	sdiv	r4, r4, r3
 80181fc:	f06f 0317 	mvn.w	r3, #23
 8018200:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8018204:	fb04 3303 	mla	r3, r4, r3, r3
 8018208:	eb03 0a02 	add.w	sl, r3, r2
 801820c:	9a06      	ldr	r2, [sp, #24]
 801820e:	9b02      	ldr	r3, [sp, #8]
 8018210:	1aa7      	subs	r7, r4, r2
 8018212:	eb03 0802 	add.w	r8, r3, r2
 8018216:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8018218:	2200      	movs	r2, #0
 801821a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801821e:	2300      	movs	r3, #0
 8018220:	ae1e      	add	r6, sp, #120	; 0x78
 8018222:	4545      	cmp	r5, r8
 8018224:	dd14      	ble.n	8018250 <__kernel_rem_pio2+0x7c>
 8018226:	2600      	movs	r6, #0
 8018228:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 801822c:	9b02      	ldr	r3, [sp, #8]
 801822e:	429e      	cmp	r6, r3
 8018230:	dc39      	bgt.n	80182a6 <__kernel_rem_pio2+0xd2>
 8018232:	9b08      	ldr	r3, [sp, #32]
 8018234:	f04f 0800 	mov.w	r8, #0
 8018238:	3b08      	subs	r3, #8
 801823a:	9300      	str	r3, [sp, #0]
 801823c:	9b07      	ldr	r3, [sp, #28]
 801823e:	f04f 0900 	mov.w	r9, #0
 8018242:	199d      	adds	r5, r3, r6
 8018244:	ab20      	add	r3, sp, #128	; 0x80
 8018246:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801824a:	9305      	str	r3, [sp, #20]
 801824c:	2700      	movs	r7, #0
 801824e:	e023      	b.n	8018298 <__kernel_rem_pio2+0xc4>
 8018250:	42ef      	cmn	r7, r5
 8018252:	d40b      	bmi.n	801826c <__kernel_rem_pio2+0x98>
 8018254:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8018258:	e9cd 2300 	strd	r2, r3, [sp]
 801825c:	f7e8 f8ec 	bl	8000438 <__aeabi_i2d>
 8018260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018264:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8018268:	3501      	adds	r5, #1
 801826a:	e7da      	b.n	8018222 <__kernel_rem_pio2+0x4e>
 801826c:	4610      	mov	r0, r2
 801826e:	4619      	mov	r1, r3
 8018270:	e7f8      	b.n	8018264 <__kernel_rem_pio2+0x90>
 8018272:	9905      	ldr	r1, [sp, #20]
 8018274:	9d00      	ldr	r5, [sp, #0]
 8018276:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801827a:	9105      	str	r1, [sp, #20]
 801827c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8018280:	9500      	str	r5, [sp, #0]
 8018282:	f7e8 f943 	bl	800050c <__aeabi_dmul>
 8018286:	4602      	mov	r2, r0
 8018288:	460b      	mov	r3, r1
 801828a:	4640      	mov	r0, r8
 801828c:	4649      	mov	r1, r9
 801828e:	f7e7 ff87 	bl	80001a0 <__adddf3>
 8018292:	4680      	mov	r8, r0
 8018294:	4689      	mov	r9, r1
 8018296:	3701      	adds	r7, #1
 8018298:	9b06      	ldr	r3, [sp, #24]
 801829a:	429f      	cmp	r7, r3
 801829c:	dde9      	ble.n	8018272 <__kernel_rem_pio2+0x9e>
 801829e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80182a2:	3601      	adds	r6, #1
 80182a4:	e7c2      	b.n	801822c <__kernel_rem_pio2+0x58>
 80182a6:	9b02      	ldr	r3, [sp, #8]
 80182a8:	aa0c      	add	r2, sp, #48	; 0x30
 80182aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80182ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80182b0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80182b2:	9f02      	ldr	r7, [sp, #8]
 80182b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80182b8:	930a      	str	r3, [sp, #40]	; 0x28
 80182ba:	2600      	movs	r6, #0
 80182bc:	ab98      	add	r3, sp, #608	; 0x260
 80182be:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 80182c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80182c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80182ca:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80182ce:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80182d2:	ab98      	add	r3, sp, #608	; 0x260
 80182d4:	445b      	add	r3, fp
 80182d6:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 80182da:	1bbb      	subs	r3, r7, r6
 80182dc:	2b00      	cmp	r3, #0
 80182de:	dc71      	bgt.n	80183c4 <__kernel_rem_pio2+0x1f0>
 80182e0:	4652      	mov	r2, sl
 80182e2:	4640      	mov	r0, r8
 80182e4:	4649      	mov	r1, r9
 80182e6:	f001 f9b7 	bl	8019658 <scalbn>
 80182ea:	2200      	movs	r2, #0
 80182ec:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80182f0:	4604      	mov	r4, r0
 80182f2:	460d      	mov	r5, r1
 80182f4:	f7e8 f90a 	bl	800050c <__aeabi_dmul>
 80182f8:	f001 f896 	bl	8019428 <floor>
 80182fc:	2200      	movs	r2, #0
 80182fe:	4b79      	ldr	r3, [pc, #484]	; (80184e4 <__kernel_rem_pio2+0x310>)
 8018300:	f7e8 f904 	bl	800050c <__aeabi_dmul>
 8018304:	4602      	mov	r2, r0
 8018306:	460b      	mov	r3, r1
 8018308:	4620      	mov	r0, r4
 801830a:	4629      	mov	r1, r5
 801830c:	f7e7 ff46 	bl	800019c <__aeabi_dsub>
 8018310:	460d      	mov	r5, r1
 8018312:	4604      	mov	r4, r0
 8018314:	f7e8 fbaa 	bl	8000a6c <__aeabi_d2iz>
 8018318:	9005      	str	r0, [sp, #20]
 801831a:	f7e8 f88d 	bl	8000438 <__aeabi_i2d>
 801831e:	4602      	mov	r2, r0
 8018320:	460b      	mov	r3, r1
 8018322:	4620      	mov	r0, r4
 8018324:	4629      	mov	r1, r5
 8018326:	f7e7 ff39 	bl	800019c <__aeabi_dsub>
 801832a:	f1ba 0f00 	cmp.w	sl, #0
 801832e:	4680      	mov	r8, r0
 8018330:	4689      	mov	r9, r1
 8018332:	dd6c      	ble.n	801840e <__kernel_rem_pio2+0x23a>
 8018334:	1e7a      	subs	r2, r7, #1
 8018336:	ab0c      	add	r3, sp, #48	; 0x30
 8018338:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801833c:	f1ca 0118 	rsb	r1, sl, #24
 8018340:	9c05      	ldr	r4, [sp, #20]
 8018342:	fa40 f301 	asr.w	r3, r0, r1
 8018346:	441c      	add	r4, r3
 8018348:	408b      	lsls	r3, r1
 801834a:	1ac0      	subs	r0, r0, r3
 801834c:	ab0c      	add	r3, sp, #48	; 0x30
 801834e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8018352:	f1ca 0317 	rsb	r3, sl, #23
 8018356:	9405      	str	r4, [sp, #20]
 8018358:	fa40 f303 	asr.w	r3, r0, r3
 801835c:	9300      	str	r3, [sp, #0]
 801835e:	9b00      	ldr	r3, [sp, #0]
 8018360:	2b00      	cmp	r3, #0
 8018362:	dd62      	ble.n	801842a <__kernel_rem_pio2+0x256>
 8018364:	2200      	movs	r2, #0
 8018366:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801836a:	4614      	mov	r4, r2
 801836c:	9b05      	ldr	r3, [sp, #20]
 801836e:	3301      	adds	r3, #1
 8018370:	9305      	str	r3, [sp, #20]
 8018372:	4297      	cmp	r7, r2
 8018374:	f300 809f 	bgt.w	80184b6 <__kernel_rem_pio2+0x2e2>
 8018378:	f1ba 0f00 	cmp.w	sl, #0
 801837c:	dd07      	ble.n	801838e <__kernel_rem_pio2+0x1ba>
 801837e:	f1ba 0f01 	cmp.w	sl, #1
 8018382:	f000 80bb 	beq.w	80184fc <__kernel_rem_pio2+0x328>
 8018386:	f1ba 0f02 	cmp.w	sl, #2
 801838a:	f000 80c1 	beq.w	8018510 <__kernel_rem_pio2+0x33c>
 801838e:	9b00      	ldr	r3, [sp, #0]
 8018390:	2b02      	cmp	r3, #2
 8018392:	d14a      	bne.n	801842a <__kernel_rem_pio2+0x256>
 8018394:	4642      	mov	r2, r8
 8018396:	464b      	mov	r3, r9
 8018398:	2000      	movs	r0, #0
 801839a:	4953      	ldr	r1, [pc, #332]	; (80184e8 <__kernel_rem_pio2+0x314>)
 801839c:	f7e7 fefe 	bl	800019c <__aeabi_dsub>
 80183a0:	4680      	mov	r8, r0
 80183a2:	4689      	mov	r9, r1
 80183a4:	2c00      	cmp	r4, #0
 80183a6:	d040      	beq.n	801842a <__kernel_rem_pio2+0x256>
 80183a8:	4652      	mov	r2, sl
 80183aa:	2000      	movs	r0, #0
 80183ac:	494e      	ldr	r1, [pc, #312]	; (80184e8 <__kernel_rem_pio2+0x314>)
 80183ae:	f001 f953 	bl	8019658 <scalbn>
 80183b2:	4602      	mov	r2, r0
 80183b4:	460b      	mov	r3, r1
 80183b6:	4640      	mov	r0, r8
 80183b8:	4649      	mov	r1, r9
 80183ba:	f7e7 feef 	bl	800019c <__aeabi_dsub>
 80183be:	4680      	mov	r8, r0
 80183c0:	4689      	mov	r9, r1
 80183c2:	e032      	b.n	801842a <__kernel_rem_pio2+0x256>
 80183c4:	2200      	movs	r2, #0
 80183c6:	4b49      	ldr	r3, [pc, #292]	; (80184ec <__kernel_rem_pio2+0x318>)
 80183c8:	4640      	mov	r0, r8
 80183ca:	4649      	mov	r1, r9
 80183cc:	f7e8 f89e 	bl	800050c <__aeabi_dmul>
 80183d0:	f7e8 fb4c 	bl	8000a6c <__aeabi_d2iz>
 80183d4:	f7e8 f830 	bl	8000438 <__aeabi_i2d>
 80183d8:	2200      	movs	r2, #0
 80183da:	4b45      	ldr	r3, [pc, #276]	; (80184f0 <__kernel_rem_pio2+0x31c>)
 80183dc:	e9cd 0100 	strd	r0, r1, [sp]
 80183e0:	f7e8 f894 	bl	800050c <__aeabi_dmul>
 80183e4:	4602      	mov	r2, r0
 80183e6:	460b      	mov	r3, r1
 80183e8:	4640      	mov	r0, r8
 80183ea:	4649      	mov	r1, r9
 80183ec:	f7e7 fed6 	bl	800019c <__aeabi_dsub>
 80183f0:	f7e8 fb3c 	bl	8000a6c <__aeabi_d2iz>
 80183f4:	ab0c      	add	r3, sp, #48	; 0x30
 80183f6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80183fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80183fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018402:	f7e7 fecd 	bl	80001a0 <__adddf3>
 8018406:	3601      	adds	r6, #1
 8018408:	4680      	mov	r8, r0
 801840a:	4689      	mov	r9, r1
 801840c:	e765      	b.n	80182da <__kernel_rem_pio2+0x106>
 801840e:	d105      	bne.n	801841c <__kernel_rem_pio2+0x248>
 8018410:	1e7b      	subs	r3, r7, #1
 8018412:	aa0c      	add	r2, sp, #48	; 0x30
 8018414:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018418:	15c3      	asrs	r3, r0, #23
 801841a:	e79f      	b.n	801835c <__kernel_rem_pio2+0x188>
 801841c:	2200      	movs	r2, #0
 801841e:	4b35      	ldr	r3, [pc, #212]	; (80184f4 <__kernel_rem_pio2+0x320>)
 8018420:	f7e8 fafa 	bl	8000a18 <__aeabi_dcmpge>
 8018424:	2800      	cmp	r0, #0
 8018426:	d143      	bne.n	80184b0 <__kernel_rem_pio2+0x2dc>
 8018428:	9000      	str	r0, [sp, #0]
 801842a:	2200      	movs	r2, #0
 801842c:	2300      	movs	r3, #0
 801842e:	4640      	mov	r0, r8
 8018430:	4649      	mov	r1, r9
 8018432:	f7e8 fad3 	bl	80009dc <__aeabi_dcmpeq>
 8018436:	2800      	cmp	r0, #0
 8018438:	f000 80c3 	beq.w	80185c2 <__kernel_rem_pio2+0x3ee>
 801843c:	1e7c      	subs	r4, r7, #1
 801843e:	4623      	mov	r3, r4
 8018440:	2200      	movs	r2, #0
 8018442:	9902      	ldr	r1, [sp, #8]
 8018444:	428b      	cmp	r3, r1
 8018446:	da6a      	bge.n	801851e <__kernel_rem_pio2+0x34a>
 8018448:	2a00      	cmp	r2, #0
 801844a:	f000 8084 	beq.w	8018556 <__kernel_rem_pio2+0x382>
 801844e:	ab0c      	add	r3, sp, #48	; 0x30
 8018450:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018454:	f1aa 0a18 	sub.w	sl, sl, #24
 8018458:	2b00      	cmp	r3, #0
 801845a:	f000 80b0 	beq.w	80185be <__kernel_rem_pio2+0x3ea>
 801845e:	4652      	mov	r2, sl
 8018460:	2000      	movs	r0, #0
 8018462:	4921      	ldr	r1, [pc, #132]	; (80184e8 <__kernel_rem_pio2+0x314>)
 8018464:	f001 f8f8 	bl	8019658 <scalbn>
 8018468:	4625      	mov	r5, r4
 801846a:	4606      	mov	r6, r0
 801846c:	460f      	mov	r7, r1
 801846e:	f04f 0a00 	mov.w	sl, #0
 8018472:	00e3      	lsls	r3, r4, #3
 8018474:	aa98      	add	r2, sp, #608	; 0x260
 8018476:	eb02 0803 	add.w	r8, r2, r3
 801847a:	f8df b070 	ldr.w	fp, [pc, #112]	; 80184ec <__kernel_rem_pio2+0x318>
 801847e:	9306      	str	r3, [sp, #24]
 8018480:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8018484:	2d00      	cmp	r5, #0
 8018486:	f280 80d2 	bge.w	801862e <__kernel_rem_pio2+0x45a>
 801848a:	2500      	movs	r5, #0
 801848c:	9a06      	ldr	r2, [sp, #24]
 801848e:	ab98      	add	r3, sp, #608	; 0x260
 8018490:	189e      	adds	r6, r3, r2
 8018492:	3ea8      	subs	r6, #168	; 0xa8
 8018494:	1b63      	subs	r3, r4, r5
 8018496:	2b00      	cmp	r3, #0
 8018498:	f2c0 80f9 	blt.w	801868e <__kernel_rem_pio2+0x4ba>
 801849c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80184f8 <__kernel_rem_pio2+0x324>
 80184a0:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 80184a4:	f04f 0a00 	mov.w	sl, #0
 80184a8:	f04f 0b00 	mov.w	fp, #0
 80184ac:	2700      	movs	r7, #0
 80184ae:	e0e2      	b.n	8018676 <__kernel_rem_pio2+0x4a2>
 80184b0:	2302      	movs	r3, #2
 80184b2:	9300      	str	r3, [sp, #0]
 80184b4:	e756      	b.n	8018364 <__kernel_rem_pio2+0x190>
 80184b6:	ab0c      	add	r3, sp, #48	; 0x30
 80184b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80184bc:	b94c      	cbnz	r4, 80184d2 <__kernel_rem_pio2+0x2fe>
 80184be:	b12b      	cbz	r3, 80184cc <__kernel_rem_pio2+0x2f8>
 80184c0:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80184c4:	a80c      	add	r0, sp, #48	; 0x30
 80184c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80184ca:	2301      	movs	r3, #1
 80184cc:	3201      	adds	r2, #1
 80184ce:	461c      	mov	r4, r3
 80184d0:	e74f      	b.n	8018372 <__kernel_rem_pio2+0x19e>
 80184d2:	1acb      	subs	r3, r1, r3
 80184d4:	a80c      	add	r0, sp, #48	; 0x30
 80184d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80184da:	4623      	mov	r3, r4
 80184dc:	e7f6      	b.n	80184cc <__kernel_rem_pio2+0x2f8>
 80184de:	bf00      	nop
 80184e0:	0801a8e0 	.word	0x0801a8e0
 80184e4:	40200000 	.word	0x40200000
 80184e8:	3ff00000 	.word	0x3ff00000
 80184ec:	3e700000 	.word	0x3e700000
 80184f0:	41700000 	.word	0x41700000
 80184f4:	3fe00000 	.word	0x3fe00000
 80184f8:	0801a898 	.word	0x0801a898
 80184fc:	1e7a      	subs	r2, r7, #1
 80184fe:	ab0c      	add	r3, sp, #48	; 0x30
 8018500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018504:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018508:	a90c      	add	r1, sp, #48	; 0x30
 801850a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801850e:	e73e      	b.n	801838e <__kernel_rem_pio2+0x1ba>
 8018510:	1e7a      	subs	r2, r7, #1
 8018512:	ab0c      	add	r3, sp, #48	; 0x30
 8018514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018518:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801851c:	e7f4      	b.n	8018508 <__kernel_rem_pio2+0x334>
 801851e:	a90c      	add	r1, sp, #48	; 0x30
 8018520:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018524:	3b01      	subs	r3, #1
 8018526:	430a      	orrs	r2, r1
 8018528:	e78b      	b.n	8018442 <__kernel_rem_pio2+0x26e>
 801852a:	3401      	adds	r4, #1
 801852c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018530:	2a00      	cmp	r2, #0
 8018532:	d0fa      	beq.n	801852a <__kernel_rem_pio2+0x356>
 8018534:	ab98      	add	r3, sp, #608	; 0x260
 8018536:	449b      	add	fp, r3
 8018538:	9b07      	ldr	r3, [sp, #28]
 801853a:	1c7e      	adds	r6, r7, #1
 801853c:	19dd      	adds	r5, r3, r7
 801853e:	ab98      	add	r3, sp, #608	; 0x260
 8018540:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018544:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8018548:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 801854c:	443c      	add	r4, r7
 801854e:	42b4      	cmp	r4, r6
 8018550:	da04      	bge.n	801855c <__kernel_rem_pio2+0x388>
 8018552:	4627      	mov	r7, r4
 8018554:	e6b1      	b.n	80182ba <__kernel_rem_pio2+0xe6>
 8018556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018558:	2401      	movs	r4, #1
 801855a:	e7e7      	b.n	801852c <__kernel_rem_pio2+0x358>
 801855c:	f105 0308 	add.w	r3, r5, #8
 8018560:	9309      	str	r3, [sp, #36]	; 0x24
 8018562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018564:	2700      	movs	r7, #0
 8018566:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801856a:	f7e7 ff65 	bl	8000438 <__aeabi_i2d>
 801856e:	f04f 0800 	mov.w	r8, #0
 8018572:	f04f 0900 	mov.w	r9, #0
 8018576:	9b08      	ldr	r3, [sp, #32]
 8018578:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801857c:	3b08      	subs	r3, #8
 801857e:	9300      	str	r3, [sp, #0]
 8018580:	f105 0310 	add.w	r3, r5, #16
 8018584:	9305      	str	r3, [sp, #20]
 8018586:	9b06      	ldr	r3, [sp, #24]
 8018588:	429f      	cmp	r7, r3
 801858a:	dd04      	ble.n	8018596 <__kernel_rem_pio2+0x3c2>
 801858c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8018590:	3601      	adds	r6, #1
 8018592:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8018594:	e7db      	b.n	801854e <__kernel_rem_pio2+0x37a>
 8018596:	9905      	ldr	r1, [sp, #20]
 8018598:	9d00      	ldr	r5, [sp, #0]
 801859a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801859e:	9105      	str	r1, [sp, #20]
 80185a0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80185a4:	9500      	str	r5, [sp, #0]
 80185a6:	f7e7 ffb1 	bl	800050c <__aeabi_dmul>
 80185aa:	4602      	mov	r2, r0
 80185ac:	460b      	mov	r3, r1
 80185ae:	4640      	mov	r0, r8
 80185b0:	4649      	mov	r1, r9
 80185b2:	f7e7 fdf5 	bl	80001a0 <__adddf3>
 80185b6:	3701      	adds	r7, #1
 80185b8:	4680      	mov	r8, r0
 80185ba:	4689      	mov	r9, r1
 80185bc:	e7e3      	b.n	8018586 <__kernel_rem_pio2+0x3b2>
 80185be:	3c01      	subs	r4, #1
 80185c0:	e745      	b.n	801844e <__kernel_rem_pio2+0x27a>
 80185c2:	f1ca 0200 	rsb	r2, sl, #0
 80185c6:	4640      	mov	r0, r8
 80185c8:	4649      	mov	r1, r9
 80185ca:	f001 f845 	bl	8019658 <scalbn>
 80185ce:	2200      	movs	r2, #0
 80185d0:	4ba3      	ldr	r3, [pc, #652]	; (8018860 <__kernel_rem_pio2+0x68c>)
 80185d2:	4604      	mov	r4, r0
 80185d4:	460d      	mov	r5, r1
 80185d6:	f7e8 fa1f 	bl	8000a18 <__aeabi_dcmpge>
 80185da:	b1f8      	cbz	r0, 801861c <__kernel_rem_pio2+0x448>
 80185dc:	2200      	movs	r2, #0
 80185de:	4ba1      	ldr	r3, [pc, #644]	; (8018864 <__kernel_rem_pio2+0x690>)
 80185e0:	4620      	mov	r0, r4
 80185e2:	4629      	mov	r1, r5
 80185e4:	f7e7 ff92 	bl	800050c <__aeabi_dmul>
 80185e8:	f7e8 fa40 	bl	8000a6c <__aeabi_d2iz>
 80185ec:	4606      	mov	r6, r0
 80185ee:	f7e7 ff23 	bl	8000438 <__aeabi_i2d>
 80185f2:	2200      	movs	r2, #0
 80185f4:	4b9a      	ldr	r3, [pc, #616]	; (8018860 <__kernel_rem_pio2+0x68c>)
 80185f6:	f7e7 ff89 	bl	800050c <__aeabi_dmul>
 80185fa:	460b      	mov	r3, r1
 80185fc:	4602      	mov	r2, r0
 80185fe:	4629      	mov	r1, r5
 8018600:	4620      	mov	r0, r4
 8018602:	f7e7 fdcb 	bl	800019c <__aeabi_dsub>
 8018606:	f7e8 fa31 	bl	8000a6c <__aeabi_d2iz>
 801860a:	1c7c      	adds	r4, r7, #1
 801860c:	ab0c      	add	r3, sp, #48	; 0x30
 801860e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8018612:	f10a 0a18 	add.w	sl, sl, #24
 8018616:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 801861a:	e720      	b.n	801845e <__kernel_rem_pio2+0x28a>
 801861c:	4620      	mov	r0, r4
 801861e:	4629      	mov	r1, r5
 8018620:	f7e8 fa24 	bl	8000a6c <__aeabi_d2iz>
 8018624:	ab0c      	add	r3, sp, #48	; 0x30
 8018626:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 801862a:	463c      	mov	r4, r7
 801862c:	e717      	b.n	801845e <__kernel_rem_pio2+0x28a>
 801862e:	ab0c      	add	r3, sp, #48	; 0x30
 8018630:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018634:	f7e7 ff00 	bl	8000438 <__aeabi_i2d>
 8018638:	4632      	mov	r2, r6
 801863a:	463b      	mov	r3, r7
 801863c:	f7e7 ff66 	bl	800050c <__aeabi_dmul>
 8018640:	4652      	mov	r2, sl
 8018642:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8018646:	465b      	mov	r3, fp
 8018648:	4630      	mov	r0, r6
 801864a:	4639      	mov	r1, r7
 801864c:	f7e7 ff5e 	bl	800050c <__aeabi_dmul>
 8018650:	3d01      	subs	r5, #1
 8018652:	4606      	mov	r6, r0
 8018654:	460f      	mov	r7, r1
 8018656:	e715      	b.n	8018484 <__kernel_rem_pio2+0x2b0>
 8018658:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 801865c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8018660:	f7e7 ff54 	bl	800050c <__aeabi_dmul>
 8018664:	4602      	mov	r2, r0
 8018666:	460b      	mov	r3, r1
 8018668:	4650      	mov	r0, sl
 801866a:	4659      	mov	r1, fp
 801866c:	f7e7 fd98 	bl	80001a0 <__adddf3>
 8018670:	4682      	mov	sl, r0
 8018672:	468b      	mov	fp, r1
 8018674:	3701      	adds	r7, #1
 8018676:	9b02      	ldr	r3, [sp, #8]
 8018678:	429f      	cmp	r7, r3
 801867a:	dc01      	bgt.n	8018680 <__kernel_rem_pio2+0x4ac>
 801867c:	42bd      	cmp	r5, r7
 801867e:	daeb      	bge.n	8018658 <__kernel_rem_pio2+0x484>
 8018680:	ab48      	add	r3, sp, #288	; 0x120
 8018682:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018686:	e9c3 ab00 	strd	sl, fp, [r3]
 801868a:	3501      	adds	r5, #1
 801868c:	e702      	b.n	8018494 <__kernel_rem_pio2+0x2c0>
 801868e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8018690:	2b03      	cmp	r3, #3
 8018692:	d86c      	bhi.n	801876e <__kernel_rem_pio2+0x59a>
 8018694:	e8df f003 	tbb	[pc, r3]
 8018698:	022f2f59 	.word	0x022f2f59
 801869c:	9a06      	ldr	r2, [sp, #24]
 801869e:	ab48      	add	r3, sp, #288	; 0x120
 80186a0:	189d      	adds	r5, r3, r2
 80186a2:	46aa      	mov	sl, r5
 80186a4:	46a3      	mov	fp, r4
 80186a6:	f1bb 0f00 	cmp.w	fp, #0
 80186aa:	f300 8087 	bgt.w	80187bc <__kernel_rem_pio2+0x5e8>
 80186ae:	46a2      	mov	sl, r4
 80186b0:	f1ba 0f01 	cmp.w	sl, #1
 80186b4:	f300 809f 	bgt.w	80187f6 <__kernel_rem_pio2+0x622>
 80186b8:	2700      	movs	r7, #0
 80186ba:	463e      	mov	r6, r7
 80186bc:	9d06      	ldr	r5, [sp, #24]
 80186be:	ab48      	add	r3, sp, #288	; 0x120
 80186c0:	3508      	adds	r5, #8
 80186c2:	441d      	add	r5, r3
 80186c4:	2c01      	cmp	r4, #1
 80186c6:	f300 80b3 	bgt.w	8018830 <__kernel_rem_pio2+0x65c>
 80186ca:	9b00      	ldr	r3, [sp, #0]
 80186cc:	9d48      	ldr	r5, [sp, #288]	; 0x120
 80186ce:	9849      	ldr	r0, [sp, #292]	; 0x124
 80186d0:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 80186d2:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	f040 80b5 	bne.w	8018844 <__kernel_rem_pio2+0x670>
 80186da:	4603      	mov	r3, r0
 80186dc:	462a      	mov	r2, r5
 80186de:	9804      	ldr	r0, [sp, #16]
 80186e0:	e9c0 2300 	strd	r2, r3, [r0]
 80186e4:	4622      	mov	r2, r4
 80186e6:	460b      	mov	r3, r1
 80186e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80186ec:	463a      	mov	r2, r7
 80186ee:	4633      	mov	r3, r6
 80186f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80186f4:	e03b      	b.n	801876e <__kernel_rem_pio2+0x59a>
 80186f6:	f04f 0c00 	mov.w	ip, #0
 80186fa:	4626      	mov	r6, r4
 80186fc:	4667      	mov	r7, ip
 80186fe:	9d06      	ldr	r5, [sp, #24]
 8018700:	ab48      	add	r3, sp, #288	; 0x120
 8018702:	3508      	adds	r5, #8
 8018704:	441d      	add	r5, r3
 8018706:	2e00      	cmp	r6, #0
 8018708:	da42      	bge.n	8018790 <__kernel_rem_pio2+0x5bc>
 801870a:	9b00      	ldr	r3, [sp, #0]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d049      	beq.n	80187a4 <__kernel_rem_pio2+0x5d0>
 8018710:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8018714:	4662      	mov	r2, ip
 8018716:	460b      	mov	r3, r1
 8018718:	9904      	ldr	r1, [sp, #16]
 801871a:	2601      	movs	r6, #1
 801871c:	e9c1 2300 	strd	r2, r3, [r1]
 8018720:	a948      	add	r1, sp, #288	; 0x120
 8018722:	463b      	mov	r3, r7
 8018724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018728:	f7e7 fd38 	bl	800019c <__aeabi_dsub>
 801872c:	4684      	mov	ip, r0
 801872e:	460f      	mov	r7, r1
 8018730:	ad48      	add	r5, sp, #288	; 0x120
 8018732:	42b4      	cmp	r4, r6
 8018734:	da38      	bge.n	80187a8 <__kernel_rem_pio2+0x5d4>
 8018736:	9b00      	ldr	r3, [sp, #0]
 8018738:	b10b      	cbz	r3, 801873e <__kernel_rem_pio2+0x56a>
 801873a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801873e:	4662      	mov	r2, ip
 8018740:	463b      	mov	r3, r7
 8018742:	9904      	ldr	r1, [sp, #16]
 8018744:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8018748:	e011      	b.n	801876e <__kernel_rem_pio2+0x59a>
 801874a:	2700      	movs	r7, #0
 801874c:	463d      	mov	r5, r7
 801874e:	9b06      	ldr	r3, [sp, #24]
 8018750:	aa98      	add	r2, sp, #608	; 0x260
 8018752:	4413      	add	r3, r2
 8018754:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8018758:	2c00      	cmp	r4, #0
 801875a:	da0f      	bge.n	801877c <__kernel_rem_pio2+0x5a8>
 801875c:	9b00      	ldr	r3, [sp, #0]
 801875e:	b10b      	cbz	r3, 8018764 <__kernel_rem_pio2+0x590>
 8018760:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8018764:	463a      	mov	r2, r7
 8018766:	462b      	mov	r3, r5
 8018768:	9904      	ldr	r1, [sp, #16]
 801876a:	e9c1 2300 	strd	r2, r3, [r1]
 801876e:	9b05      	ldr	r3, [sp, #20]
 8018770:	f003 0007 	and.w	r0, r3, #7
 8018774:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8018778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801877c:	4638      	mov	r0, r7
 801877e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8018782:	4629      	mov	r1, r5
 8018784:	f7e7 fd0c 	bl	80001a0 <__adddf3>
 8018788:	3c01      	subs	r4, #1
 801878a:	4607      	mov	r7, r0
 801878c:	460d      	mov	r5, r1
 801878e:	e7e3      	b.n	8018758 <__kernel_rem_pio2+0x584>
 8018790:	4660      	mov	r0, ip
 8018792:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8018796:	4639      	mov	r1, r7
 8018798:	f7e7 fd02 	bl	80001a0 <__adddf3>
 801879c:	3e01      	subs	r6, #1
 801879e:	4684      	mov	ip, r0
 80187a0:	460f      	mov	r7, r1
 80187a2:	e7b0      	b.n	8018706 <__kernel_rem_pio2+0x532>
 80187a4:	4639      	mov	r1, r7
 80187a6:	e7b5      	b.n	8018714 <__kernel_rem_pio2+0x540>
 80187a8:	4660      	mov	r0, ip
 80187aa:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80187ae:	4639      	mov	r1, r7
 80187b0:	f7e7 fcf6 	bl	80001a0 <__adddf3>
 80187b4:	3601      	adds	r6, #1
 80187b6:	4684      	mov	ip, r0
 80187b8:	460f      	mov	r7, r1
 80187ba:	e7ba      	b.n	8018732 <__kernel_rem_pio2+0x55e>
 80187bc:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 80187c0:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80187c4:	4640      	mov	r0, r8
 80187c6:	4649      	mov	r1, r9
 80187c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80187cc:	f7e7 fce8 	bl	80001a0 <__adddf3>
 80187d0:	4602      	mov	r2, r0
 80187d2:	460b      	mov	r3, r1
 80187d4:	4606      	mov	r6, r0
 80187d6:	460f      	mov	r7, r1
 80187d8:	4640      	mov	r0, r8
 80187da:	4649      	mov	r1, r9
 80187dc:	f7e7 fcde 	bl	800019c <__aeabi_dsub>
 80187e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80187e4:	f7e7 fcdc 	bl	80001a0 <__adddf3>
 80187e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80187ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80187f0:	e9ca 6700 	strd	r6, r7, [sl]
 80187f4:	e757      	b.n	80186a6 <__kernel_rem_pio2+0x4d2>
 80187f6:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 80187fa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80187fe:	4630      	mov	r0, r6
 8018800:	4639      	mov	r1, r7
 8018802:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018806:	f7e7 fccb 	bl	80001a0 <__adddf3>
 801880a:	4602      	mov	r2, r0
 801880c:	460b      	mov	r3, r1
 801880e:	4680      	mov	r8, r0
 8018810:	4689      	mov	r9, r1
 8018812:	4630      	mov	r0, r6
 8018814:	4639      	mov	r1, r7
 8018816:	f7e7 fcc1 	bl	800019c <__aeabi_dsub>
 801881a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801881e:	f7e7 fcbf 	bl	80001a0 <__adddf3>
 8018822:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018826:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801882a:	e9c5 8900 	strd	r8, r9, [r5]
 801882e:	e73f      	b.n	80186b0 <__kernel_rem_pio2+0x4dc>
 8018830:	4638      	mov	r0, r7
 8018832:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8018836:	4631      	mov	r1, r6
 8018838:	f7e7 fcb2 	bl	80001a0 <__adddf3>
 801883c:	3c01      	subs	r4, #1
 801883e:	4607      	mov	r7, r0
 8018840:	460e      	mov	r6, r1
 8018842:	e73f      	b.n	80186c4 <__kernel_rem_pio2+0x4f0>
 8018844:	9b04      	ldr	r3, [sp, #16]
 8018846:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801884a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801884e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8018852:	601d      	str	r5, [r3, #0]
 8018854:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8018858:	e9c3 1703 	strd	r1, r7, [r3, #12]
 801885c:	615e      	str	r6, [r3, #20]
 801885e:	e786      	b.n	801876e <__kernel_rem_pio2+0x59a>
 8018860:	41700000 	.word	0x41700000
 8018864:	3e700000 	.word	0x3e700000

08018868 <__kernel_sin>:
 8018868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801886c:	b086      	sub	sp, #24
 801886e:	e9cd 2300 	strd	r2, r3, [sp]
 8018872:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018876:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801887a:	4682      	mov	sl, r0
 801887c:	460c      	mov	r4, r1
 801887e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018880:	da03      	bge.n	801888a <__kernel_sin+0x22>
 8018882:	f7e8 f8f3 	bl	8000a6c <__aeabi_d2iz>
 8018886:	2800      	cmp	r0, #0
 8018888:	d050      	beq.n	801892c <__kernel_sin+0xc4>
 801888a:	4652      	mov	r2, sl
 801888c:	4623      	mov	r3, r4
 801888e:	4650      	mov	r0, sl
 8018890:	4621      	mov	r1, r4
 8018892:	f7e7 fe3b 	bl	800050c <__aeabi_dmul>
 8018896:	4606      	mov	r6, r0
 8018898:	460f      	mov	r7, r1
 801889a:	4602      	mov	r2, r0
 801889c:	460b      	mov	r3, r1
 801889e:	4650      	mov	r0, sl
 80188a0:	4621      	mov	r1, r4
 80188a2:	f7e7 fe33 	bl	800050c <__aeabi_dmul>
 80188a6:	a33e      	add	r3, pc, #248	; (adr r3, 80189a0 <__kernel_sin+0x138>)
 80188a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ac:	4680      	mov	r8, r0
 80188ae:	4689      	mov	r9, r1
 80188b0:	4630      	mov	r0, r6
 80188b2:	4639      	mov	r1, r7
 80188b4:	f7e7 fe2a 	bl	800050c <__aeabi_dmul>
 80188b8:	a33b      	add	r3, pc, #236	; (adr r3, 80189a8 <__kernel_sin+0x140>)
 80188ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188be:	f7e7 fc6d 	bl	800019c <__aeabi_dsub>
 80188c2:	4632      	mov	r2, r6
 80188c4:	463b      	mov	r3, r7
 80188c6:	f7e7 fe21 	bl	800050c <__aeabi_dmul>
 80188ca:	a339      	add	r3, pc, #228	; (adr r3, 80189b0 <__kernel_sin+0x148>)
 80188cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188d0:	f7e7 fc66 	bl	80001a0 <__adddf3>
 80188d4:	4632      	mov	r2, r6
 80188d6:	463b      	mov	r3, r7
 80188d8:	f7e7 fe18 	bl	800050c <__aeabi_dmul>
 80188dc:	a336      	add	r3, pc, #216	; (adr r3, 80189b8 <__kernel_sin+0x150>)
 80188de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188e2:	f7e7 fc5b 	bl	800019c <__aeabi_dsub>
 80188e6:	4632      	mov	r2, r6
 80188e8:	463b      	mov	r3, r7
 80188ea:	f7e7 fe0f 	bl	800050c <__aeabi_dmul>
 80188ee:	a334      	add	r3, pc, #208	; (adr r3, 80189c0 <__kernel_sin+0x158>)
 80188f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188f4:	f7e7 fc54 	bl	80001a0 <__adddf3>
 80188f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80188fc:	b9dd      	cbnz	r5, 8018936 <__kernel_sin+0xce>
 80188fe:	4602      	mov	r2, r0
 8018900:	460b      	mov	r3, r1
 8018902:	4630      	mov	r0, r6
 8018904:	4639      	mov	r1, r7
 8018906:	f7e7 fe01 	bl	800050c <__aeabi_dmul>
 801890a:	a32f      	add	r3, pc, #188	; (adr r3, 80189c8 <__kernel_sin+0x160>)
 801890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018910:	f7e7 fc44 	bl	800019c <__aeabi_dsub>
 8018914:	4642      	mov	r2, r8
 8018916:	464b      	mov	r3, r9
 8018918:	f7e7 fdf8 	bl	800050c <__aeabi_dmul>
 801891c:	4602      	mov	r2, r0
 801891e:	460b      	mov	r3, r1
 8018920:	4650      	mov	r0, sl
 8018922:	4621      	mov	r1, r4
 8018924:	f7e7 fc3c 	bl	80001a0 <__adddf3>
 8018928:	4682      	mov	sl, r0
 801892a:	460c      	mov	r4, r1
 801892c:	4650      	mov	r0, sl
 801892e:	4621      	mov	r1, r4
 8018930:	b006      	add	sp, #24
 8018932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018936:	2200      	movs	r2, #0
 8018938:	e9dd 0100 	ldrd	r0, r1, [sp]
 801893c:	4b24      	ldr	r3, [pc, #144]	; (80189d0 <__kernel_sin+0x168>)
 801893e:	f7e7 fde5 	bl	800050c <__aeabi_dmul>
 8018942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801894a:	4640      	mov	r0, r8
 801894c:	4649      	mov	r1, r9
 801894e:	f7e7 fddd 	bl	800050c <__aeabi_dmul>
 8018952:	4602      	mov	r2, r0
 8018954:	460b      	mov	r3, r1
 8018956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801895a:	f7e7 fc1f 	bl	800019c <__aeabi_dsub>
 801895e:	4632      	mov	r2, r6
 8018960:	463b      	mov	r3, r7
 8018962:	f7e7 fdd3 	bl	800050c <__aeabi_dmul>
 8018966:	e9dd 2300 	ldrd	r2, r3, [sp]
 801896a:	f7e7 fc17 	bl	800019c <__aeabi_dsub>
 801896e:	a316      	add	r3, pc, #88	; (adr r3, 80189c8 <__kernel_sin+0x160>)
 8018970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018974:	4606      	mov	r6, r0
 8018976:	460f      	mov	r7, r1
 8018978:	4640      	mov	r0, r8
 801897a:	4649      	mov	r1, r9
 801897c:	f7e7 fdc6 	bl	800050c <__aeabi_dmul>
 8018980:	4602      	mov	r2, r0
 8018982:	460b      	mov	r3, r1
 8018984:	4630      	mov	r0, r6
 8018986:	4639      	mov	r1, r7
 8018988:	f7e7 fc0a 	bl	80001a0 <__adddf3>
 801898c:	4602      	mov	r2, r0
 801898e:	460b      	mov	r3, r1
 8018990:	4650      	mov	r0, sl
 8018992:	4621      	mov	r1, r4
 8018994:	f7e7 fc02 	bl	800019c <__aeabi_dsub>
 8018998:	e7c6      	b.n	8018928 <__kernel_sin+0xc0>
 801899a:	bf00      	nop
 801899c:	f3af 8000 	nop.w
 80189a0:	5acfd57c 	.word	0x5acfd57c
 80189a4:	3de5d93a 	.word	0x3de5d93a
 80189a8:	8a2b9ceb 	.word	0x8a2b9ceb
 80189ac:	3e5ae5e6 	.word	0x3e5ae5e6
 80189b0:	57b1fe7d 	.word	0x57b1fe7d
 80189b4:	3ec71de3 	.word	0x3ec71de3
 80189b8:	19c161d5 	.word	0x19c161d5
 80189bc:	3f2a01a0 	.word	0x3f2a01a0
 80189c0:	1110f8a6 	.word	0x1110f8a6
 80189c4:	3f811111 	.word	0x3f811111
 80189c8:	55555549 	.word	0x55555549
 80189cc:	3fc55555 	.word	0x3fc55555
 80189d0:	3fe00000 	.word	0x3fe00000

080189d4 <__kernel_cosf>:
 80189d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189d8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80189dc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80189e0:	4606      	mov	r6, r0
 80189e2:	4688      	mov	r8, r1
 80189e4:	da03      	bge.n	80189ee <__kernel_cosf+0x1a>
 80189e6:	f7e8 fbc3 	bl	8001170 <__aeabi_f2iz>
 80189ea:	2800      	cmp	r0, #0
 80189ec:	d05c      	beq.n	8018aa8 <__kernel_cosf+0xd4>
 80189ee:	4631      	mov	r1, r6
 80189f0:	4630      	mov	r0, r6
 80189f2:	f7e8 f9e1 	bl	8000db8 <__aeabi_fmul>
 80189f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80189fa:	4605      	mov	r5, r0
 80189fc:	f7e8 f9dc 	bl	8000db8 <__aeabi_fmul>
 8018a00:	492b      	ldr	r1, [pc, #172]	; (8018ab0 <__kernel_cosf+0xdc>)
 8018a02:	4607      	mov	r7, r0
 8018a04:	4628      	mov	r0, r5
 8018a06:	f7e8 f9d7 	bl	8000db8 <__aeabi_fmul>
 8018a0a:	492a      	ldr	r1, [pc, #168]	; (8018ab4 <__kernel_cosf+0xe0>)
 8018a0c:	f7e8 f8cc 	bl	8000ba8 <__addsf3>
 8018a10:	4629      	mov	r1, r5
 8018a12:	f7e8 f9d1 	bl	8000db8 <__aeabi_fmul>
 8018a16:	4928      	ldr	r1, [pc, #160]	; (8018ab8 <__kernel_cosf+0xe4>)
 8018a18:	f7e8 f8c4 	bl	8000ba4 <__aeabi_fsub>
 8018a1c:	4629      	mov	r1, r5
 8018a1e:	f7e8 f9cb 	bl	8000db8 <__aeabi_fmul>
 8018a22:	4926      	ldr	r1, [pc, #152]	; (8018abc <__kernel_cosf+0xe8>)
 8018a24:	f7e8 f8c0 	bl	8000ba8 <__addsf3>
 8018a28:	4629      	mov	r1, r5
 8018a2a:	f7e8 f9c5 	bl	8000db8 <__aeabi_fmul>
 8018a2e:	4924      	ldr	r1, [pc, #144]	; (8018ac0 <__kernel_cosf+0xec>)
 8018a30:	f7e8 f8b8 	bl	8000ba4 <__aeabi_fsub>
 8018a34:	4629      	mov	r1, r5
 8018a36:	f7e8 f9bf 	bl	8000db8 <__aeabi_fmul>
 8018a3a:	4922      	ldr	r1, [pc, #136]	; (8018ac4 <__kernel_cosf+0xf0>)
 8018a3c:	f7e8 f8b4 	bl	8000ba8 <__addsf3>
 8018a40:	4629      	mov	r1, r5
 8018a42:	f7e8 f9b9 	bl	8000db8 <__aeabi_fmul>
 8018a46:	4629      	mov	r1, r5
 8018a48:	f7e8 f9b6 	bl	8000db8 <__aeabi_fmul>
 8018a4c:	4641      	mov	r1, r8
 8018a4e:	4605      	mov	r5, r0
 8018a50:	4630      	mov	r0, r6
 8018a52:	f7e8 f9b1 	bl	8000db8 <__aeabi_fmul>
 8018a56:	4601      	mov	r1, r0
 8018a58:	4628      	mov	r0, r5
 8018a5a:	f7e8 f8a3 	bl	8000ba4 <__aeabi_fsub>
 8018a5e:	4b1a      	ldr	r3, [pc, #104]	; (8018ac8 <__kernel_cosf+0xf4>)
 8018a60:	4605      	mov	r5, r0
 8018a62:	429c      	cmp	r4, r3
 8018a64:	dc0a      	bgt.n	8018a7c <__kernel_cosf+0xa8>
 8018a66:	4601      	mov	r1, r0
 8018a68:	4638      	mov	r0, r7
 8018a6a:	f7e8 f89b 	bl	8000ba4 <__aeabi_fsub>
 8018a6e:	4601      	mov	r1, r0
 8018a70:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018a74:	f7e8 f896 	bl	8000ba4 <__aeabi_fsub>
 8018a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a7c:	4b13      	ldr	r3, [pc, #76]	; (8018acc <__kernel_cosf+0xf8>)
 8018a7e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018a82:	429c      	cmp	r4, r3
 8018a84:	bfcc      	ite	gt
 8018a86:	4c12      	ldrgt	r4, [pc, #72]	; (8018ad0 <__kernel_cosf+0xfc>)
 8018a88:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8018a8c:	4621      	mov	r1, r4
 8018a8e:	f7e8 f889 	bl	8000ba4 <__aeabi_fsub>
 8018a92:	4621      	mov	r1, r4
 8018a94:	4606      	mov	r6, r0
 8018a96:	4638      	mov	r0, r7
 8018a98:	f7e8 f884 	bl	8000ba4 <__aeabi_fsub>
 8018a9c:	4629      	mov	r1, r5
 8018a9e:	f7e8 f881 	bl	8000ba4 <__aeabi_fsub>
 8018aa2:	4601      	mov	r1, r0
 8018aa4:	4630      	mov	r0, r6
 8018aa6:	e7e5      	b.n	8018a74 <__kernel_cosf+0xa0>
 8018aa8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018aac:	e7e4      	b.n	8018a78 <__kernel_cosf+0xa4>
 8018aae:	bf00      	nop
 8018ab0:	ad47d74e 	.word	0xad47d74e
 8018ab4:	310f74f6 	.word	0x310f74f6
 8018ab8:	3493f27c 	.word	0x3493f27c
 8018abc:	37d00d01 	.word	0x37d00d01
 8018ac0:	3ab60b61 	.word	0x3ab60b61
 8018ac4:	3d2aaaab 	.word	0x3d2aaaab
 8018ac8:	3e999999 	.word	0x3e999999
 8018acc:	3f480000 	.word	0x3f480000
 8018ad0:	3e900000 	.word	0x3e900000

08018ad4 <__kernel_rem_pio2f>:
 8018ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ad8:	b0d9      	sub	sp, #356	; 0x164
 8018ada:	9304      	str	r3, [sp, #16]
 8018adc:	9101      	str	r1, [sp, #4]
 8018ade:	4bc3      	ldr	r3, [pc, #780]	; (8018dec <__kernel_rem_pio2f+0x318>)
 8018ae0:	9962      	ldr	r1, [sp, #392]	; 0x188
 8018ae2:	1ed4      	subs	r4, r2, #3
 8018ae4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018ae8:	2500      	movs	r5, #0
 8018aea:	9302      	str	r3, [sp, #8]
 8018aec:	9b04      	ldr	r3, [sp, #16]
 8018aee:	f04f 0a00 	mov.w	sl, #0
 8018af2:	3b01      	subs	r3, #1
 8018af4:	9303      	str	r3, [sp, #12]
 8018af6:	2308      	movs	r3, #8
 8018af8:	fb94 f4f3 	sdiv	r4, r4, r3
 8018afc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8018b00:	1c66      	adds	r6, r4, #1
 8018b02:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8018b06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8018b0a:	eb03 0802 	add.w	r8, r3, r2
 8018b0e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8018b10:	1aa7      	subs	r7, r4, r2
 8018b12:	9005      	str	r0, [sp, #20]
 8018b14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018b18:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8018b1c:	4545      	cmp	r5, r8
 8018b1e:	dd7f      	ble.n	8018c20 <__kernel_rem_pio2f+0x14c>
 8018b20:	f04f 0800 	mov.w	r8, #0
 8018b24:	f04f 0a00 	mov.w	sl, #0
 8018b28:	f06f 0b03 	mvn.w	fp, #3
 8018b2c:	9b04      	ldr	r3, [sp, #16]
 8018b2e:	aa1c      	add	r2, sp, #112	; 0x70
 8018b30:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8018b34:	ab44      	add	r3, sp, #272	; 0x110
 8018b36:	9a02      	ldr	r2, [sp, #8]
 8018b38:	4590      	cmp	r8, r2
 8018b3a:	f340 8097 	ble.w	8018c6c <__kernel_rem_pio2f+0x198>
 8018b3e:	4613      	mov	r3, r2
 8018b40:	aa08      	add	r2, sp, #32
 8018b42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018b46:	9307      	str	r3, [sp, #28]
 8018b48:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8018b4a:	9f02      	ldr	r7, [sp, #8]
 8018b4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018b50:	9306      	str	r3, [sp, #24]
 8018b52:	46ba      	mov	sl, r7
 8018b54:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8018b58:	ab58      	add	r3, sp, #352	; 0x160
 8018b5a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8018b5e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8018b62:	ad07      	add	r5, sp, #28
 8018b64:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8018b68:	f1ba 0f00 	cmp.w	sl, #0
 8018b6c:	f300 8081 	bgt.w	8018c72 <__kernel_rem_pio2f+0x19e>
 8018b70:	4631      	mov	r1, r6
 8018b72:	4620      	mov	r0, r4
 8018b74:	f000 ff86 	bl	8019a84 <scalbnf>
 8018b78:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8018b7c:	4604      	mov	r4, r0
 8018b7e:	f7e8 f91b 	bl	8000db8 <__aeabi_fmul>
 8018b82:	f000 feef 	bl	8019964 <floorf>
 8018b86:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8018b8a:	f7e8 f915 	bl	8000db8 <__aeabi_fmul>
 8018b8e:	4601      	mov	r1, r0
 8018b90:	4620      	mov	r0, r4
 8018b92:	f7e8 f807 	bl	8000ba4 <__aeabi_fsub>
 8018b96:	4604      	mov	r4, r0
 8018b98:	f7e8 faea 	bl	8001170 <__aeabi_f2iz>
 8018b9c:	4681      	mov	r9, r0
 8018b9e:	f7e8 f8b7 	bl	8000d10 <__aeabi_i2f>
 8018ba2:	4601      	mov	r1, r0
 8018ba4:	4620      	mov	r0, r4
 8018ba6:	f7e7 fffd 	bl	8000ba4 <__aeabi_fsub>
 8018baa:	2e00      	cmp	r6, #0
 8018bac:	4604      	mov	r4, r0
 8018bae:	dd7e      	ble.n	8018cae <__kernel_rem_pio2f+0x1da>
 8018bb0:	1e7b      	subs	r3, r7, #1
 8018bb2:	aa08      	add	r2, sp, #32
 8018bb4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8018bb8:	f1c6 0208 	rsb	r2, r6, #8
 8018bbc:	fa45 f002 	asr.w	r0, r5, r2
 8018bc0:	4481      	add	r9, r0
 8018bc2:	4090      	lsls	r0, r2
 8018bc4:	1a2d      	subs	r5, r5, r0
 8018bc6:	aa08      	add	r2, sp, #32
 8018bc8:	f1c6 0007 	rsb	r0, r6, #7
 8018bcc:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8018bd0:	4105      	asrs	r5, r0
 8018bd2:	2d00      	cmp	r5, #0
 8018bd4:	dd79      	ble.n	8018cca <__kernel_rem_pio2f+0x1f6>
 8018bd6:	2200      	movs	r2, #0
 8018bd8:	4690      	mov	r8, r2
 8018bda:	f109 0901 	add.w	r9, r9, #1
 8018bde:	4297      	cmp	r7, r2
 8018be0:	f300 80ae 	bgt.w	8018d40 <__kernel_rem_pio2f+0x26c>
 8018be4:	2e00      	cmp	r6, #0
 8018be6:	dd05      	ble.n	8018bf4 <__kernel_rem_pio2f+0x120>
 8018be8:	2e01      	cmp	r6, #1
 8018bea:	f000 80c0 	beq.w	8018d6e <__kernel_rem_pio2f+0x29a>
 8018bee:	2e02      	cmp	r6, #2
 8018bf0:	f000 80c7 	beq.w	8018d82 <__kernel_rem_pio2f+0x2ae>
 8018bf4:	2d02      	cmp	r5, #2
 8018bf6:	d168      	bne.n	8018cca <__kernel_rem_pio2f+0x1f6>
 8018bf8:	4621      	mov	r1, r4
 8018bfa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018bfe:	f7e7 ffd1 	bl	8000ba4 <__aeabi_fsub>
 8018c02:	4604      	mov	r4, r0
 8018c04:	f1b8 0f00 	cmp.w	r8, #0
 8018c08:	d05f      	beq.n	8018cca <__kernel_rem_pio2f+0x1f6>
 8018c0a:	4631      	mov	r1, r6
 8018c0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018c10:	f000 ff38 	bl	8019a84 <scalbnf>
 8018c14:	4601      	mov	r1, r0
 8018c16:	4620      	mov	r0, r4
 8018c18:	f7e7 ffc4 	bl	8000ba4 <__aeabi_fsub>
 8018c1c:	4604      	mov	r4, r0
 8018c1e:	e054      	b.n	8018cca <__kernel_rem_pio2f+0x1f6>
 8018c20:	42ef      	cmn	r7, r5
 8018c22:	d407      	bmi.n	8018c34 <__kernel_rem_pio2f+0x160>
 8018c24:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8018c28:	f7e8 f872 	bl	8000d10 <__aeabi_i2f>
 8018c2c:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8018c30:	3501      	adds	r5, #1
 8018c32:	e773      	b.n	8018b1c <__kernel_rem_pio2f+0x48>
 8018c34:	4650      	mov	r0, sl
 8018c36:	e7f9      	b.n	8018c2c <__kernel_rem_pio2f+0x158>
 8018c38:	fb0b 5207 	mla	r2, fp, r7, r5
 8018c3c:	9306      	str	r3, [sp, #24]
 8018c3e:	9b05      	ldr	r3, [sp, #20]
 8018c40:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018c44:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8018c48:	f7e8 f8b6 	bl	8000db8 <__aeabi_fmul>
 8018c4c:	4601      	mov	r1, r0
 8018c4e:	4648      	mov	r0, r9
 8018c50:	f7e7 ffaa 	bl	8000ba8 <__addsf3>
 8018c54:	4681      	mov	r9, r0
 8018c56:	9b06      	ldr	r3, [sp, #24]
 8018c58:	3701      	adds	r7, #1
 8018c5a:	9a03      	ldr	r2, [sp, #12]
 8018c5c:	4297      	cmp	r7, r2
 8018c5e:	ddeb      	ble.n	8018c38 <__kernel_rem_pio2f+0x164>
 8018c60:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 8018c64:	3504      	adds	r5, #4
 8018c66:	f108 0801 	add.w	r8, r8, #1
 8018c6a:	e764      	b.n	8018b36 <__kernel_rem_pio2f+0x62>
 8018c6c:	46d1      	mov	r9, sl
 8018c6e:	2700      	movs	r7, #0
 8018c70:	e7f3      	b.n	8018c5a <__kernel_rem_pio2f+0x186>
 8018c72:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8018c76:	4620      	mov	r0, r4
 8018c78:	f7e8 f89e 	bl	8000db8 <__aeabi_fmul>
 8018c7c:	f7e8 fa78 	bl	8001170 <__aeabi_f2iz>
 8018c80:	f7e8 f846 	bl	8000d10 <__aeabi_i2f>
 8018c84:	4641      	mov	r1, r8
 8018c86:	4683      	mov	fp, r0
 8018c88:	f7e8 f896 	bl	8000db8 <__aeabi_fmul>
 8018c8c:	4601      	mov	r1, r0
 8018c8e:	4620      	mov	r0, r4
 8018c90:	f7e7 ff88 	bl	8000ba4 <__aeabi_fsub>
 8018c94:	f7e8 fa6c 	bl	8001170 <__aeabi_f2iz>
 8018c98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018c9c:	f845 0f04 	str.w	r0, [r5, #4]!
 8018ca0:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8018ca4:	4658      	mov	r0, fp
 8018ca6:	f7e7 ff7f 	bl	8000ba8 <__addsf3>
 8018caa:	4604      	mov	r4, r0
 8018cac:	e75c      	b.n	8018b68 <__kernel_rem_pio2f+0x94>
 8018cae:	d105      	bne.n	8018cbc <__kernel_rem_pio2f+0x1e8>
 8018cb0:	1e7b      	subs	r3, r7, #1
 8018cb2:	aa08      	add	r2, sp, #32
 8018cb4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8018cb8:	122d      	asrs	r5, r5, #8
 8018cba:	e78a      	b.n	8018bd2 <__kernel_rem_pio2f+0xfe>
 8018cbc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8018cc0:	f7e8 fa2c 	bl	800111c <__aeabi_fcmpge>
 8018cc4:	2800      	cmp	r0, #0
 8018cc6:	d139      	bne.n	8018d3c <__kernel_rem_pio2f+0x268>
 8018cc8:	4605      	mov	r5, r0
 8018cca:	2100      	movs	r1, #0
 8018ccc:	4620      	mov	r0, r4
 8018cce:	f7e8 fa07 	bl	80010e0 <__aeabi_fcmpeq>
 8018cd2:	2800      	cmp	r0, #0
 8018cd4:	f000 80a0 	beq.w	8018e18 <__kernel_rem_pio2f+0x344>
 8018cd8:	1e7c      	subs	r4, r7, #1
 8018cda:	4623      	mov	r3, r4
 8018cdc:	2200      	movs	r2, #0
 8018cde:	9902      	ldr	r1, [sp, #8]
 8018ce0:	428b      	cmp	r3, r1
 8018ce2:	da55      	bge.n	8018d90 <__kernel_rem_pio2f+0x2bc>
 8018ce4:	2a00      	cmp	r2, #0
 8018ce6:	d07e      	beq.n	8018de6 <__kernel_rem_pio2f+0x312>
 8018ce8:	ab08      	add	r3, sp, #32
 8018cea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018cee:	3e08      	subs	r6, #8
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	f000 808f 	beq.w	8018e14 <__kernel_rem_pio2f+0x340>
 8018cf6:	4631      	mov	r1, r6
 8018cf8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8018cfc:	f000 fec2 	bl	8019a84 <scalbnf>
 8018d00:	46a0      	mov	r8, r4
 8018d02:	4682      	mov	sl, r0
 8018d04:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8018d08:	af44      	add	r7, sp, #272	; 0x110
 8018d0a:	f1b8 0f00 	cmp.w	r8, #0
 8018d0e:	f280 80b5 	bge.w	8018e7c <__kernel_rem_pio2f+0x3a8>
 8018d12:	f04f 0a00 	mov.w	sl, #0
 8018d16:	2300      	movs	r3, #0
 8018d18:	00a6      	lsls	r6, r4, #2
 8018d1a:	4a35      	ldr	r2, [pc, #212]	; (8018df0 <__kernel_rem_pio2f+0x31c>)
 8018d1c:	4437      	add	r7, r6
 8018d1e:	eba4 010a 	sub.w	r1, r4, sl
 8018d22:	2900      	cmp	r1, #0
 8018d24:	f280 80db 	bge.w	8018ede <__kernel_rem_pio2f+0x40a>
 8018d28:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8018d2a:	2b03      	cmp	r3, #3
 8018d2c:	f200 80ff 	bhi.w	8018f2e <__kernel_rem_pio2f+0x45a>
 8018d30:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018d34:	01200102 	.word	0x01200102
 8018d38:	00d90120 	.word	0x00d90120
 8018d3c:	2502      	movs	r5, #2
 8018d3e:	e74a      	b.n	8018bd6 <__kernel_rem_pio2f+0x102>
 8018d40:	ab08      	add	r3, sp, #32
 8018d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d46:	f1b8 0f00 	cmp.w	r8, #0
 8018d4a:	d109      	bne.n	8018d60 <__kernel_rem_pio2f+0x28c>
 8018d4c:	b12b      	cbz	r3, 8018d5a <__kernel_rem_pio2f+0x286>
 8018d4e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8018d52:	a908      	add	r1, sp, #32
 8018d54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018d58:	2301      	movs	r3, #1
 8018d5a:	3201      	adds	r2, #1
 8018d5c:	4698      	mov	r8, r3
 8018d5e:	e73e      	b.n	8018bde <__kernel_rem_pio2f+0x10a>
 8018d60:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8018d64:	a908      	add	r1, sp, #32
 8018d66:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018d6a:	4643      	mov	r3, r8
 8018d6c:	e7f5      	b.n	8018d5a <__kernel_rem_pio2f+0x286>
 8018d6e:	1e7a      	subs	r2, r7, #1
 8018d70:	ab08      	add	r3, sp, #32
 8018d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018d7a:	a908      	add	r1, sp, #32
 8018d7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018d80:	e738      	b.n	8018bf4 <__kernel_rem_pio2f+0x120>
 8018d82:	1e7a      	subs	r2, r7, #1
 8018d84:	ab08      	add	r3, sp, #32
 8018d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018d8e:	e7f4      	b.n	8018d7a <__kernel_rem_pio2f+0x2a6>
 8018d90:	a908      	add	r1, sp, #32
 8018d92:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018d96:	3b01      	subs	r3, #1
 8018d98:	430a      	orrs	r2, r1
 8018d9a:	e7a0      	b.n	8018cde <__kernel_rem_pio2f+0x20a>
 8018d9c:	3301      	adds	r3, #1
 8018d9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8018da2:	2900      	cmp	r1, #0
 8018da4:	d0fa      	beq.n	8018d9c <__kernel_rem_pio2f+0x2c8>
 8018da6:	f06f 0803 	mvn.w	r8, #3
 8018daa:	9a04      	ldr	r2, [sp, #16]
 8018dac:	1c7d      	adds	r5, r7, #1
 8018dae:	18bc      	adds	r4, r7, r2
 8018db0:	aa1c      	add	r2, sp, #112	; 0x70
 8018db2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8018db6:	441f      	add	r7, r3
 8018db8:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8018dbc:	42af      	cmp	r7, r5
 8018dbe:	f6ff aec8 	blt.w	8018b52 <__kernel_rem_pio2f+0x7e>
 8018dc2:	9b06      	ldr	r3, [sp, #24]
 8018dc4:	f04f 0a00 	mov.w	sl, #0
 8018dc8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018dcc:	f7e7 ffa0 	bl	8000d10 <__aeabi_i2f>
 8018dd0:	f04f 0b00 	mov.w	fp, #0
 8018dd4:	6020      	str	r0, [r4, #0]
 8018dd6:	9b03      	ldr	r3, [sp, #12]
 8018dd8:	459a      	cmp	sl, r3
 8018dda:	dd0b      	ble.n	8018df4 <__kernel_rem_pio2f+0x320>
 8018ddc:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8018de0:	3404      	adds	r4, #4
 8018de2:	3501      	adds	r5, #1
 8018de4:	e7ea      	b.n	8018dbc <__kernel_rem_pio2f+0x2e8>
 8018de6:	9a07      	ldr	r2, [sp, #28]
 8018de8:	2301      	movs	r3, #1
 8018dea:	e7d8      	b.n	8018d9e <__kernel_rem_pio2f+0x2ca>
 8018dec:	0801a91c 	.word	0x0801a91c
 8018df0:	0801a8f0 	.word	0x0801a8f0
 8018df4:	fb08 f30a 	mul.w	r3, r8, sl
 8018df8:	9a05      	ldr	r2, [sp, #20]
 8018dfa:	58e0      	ldr	r0, [r4, r3]
 8018dfc:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8018e00:	f7e7 ffda 	bl	8000db8 <__aeabi_fmul>
 8018e04:	4601      	mov	r1, r0
 8018e06:	4658      	mov	r0, fp
 8018e08:	f7e7 fece 	bl	8000ba8 <__addsf3>
 8018e0c:	f10a 0a01 	add.w	sl, sl, #1
 8018e10:	4683      	mov	fp, r0
 8018e12:	e7e0      	b.n	8018dd6 <__kernel_rem_pio2f+0x302>
 8018e14:	3c01      	subs	r4, #1
 8018e16:	e767      	b.n	8018ce8 <__kernel_rem_pio2f+0x214>
 8018e18:	4271      	negs	r1, r6
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	f000 fe32 	bl	8019a84 <scalbnf>
 8018e20:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8018e24:	4604      	mov	r4, r0
 8018e26:	f7e8 f979 	bl	800111c <__aeabi_fcmpge>
 8018e2a:	b1f8      	cbz	r0, 8018e6c <__kernel_rem_pio2f+0x398>
 8018e2c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8018e30:	4620      	mov	r0, r4
 8018e32:	f7e7 ffc1 	bl	8000db8 <__aeabi_fmul>
 8018e36:	f7e8 f99b 	bl	8001170 <__aeabi_f2iz>
 8018e3a:	f7e7 ff69 	bl	8000d10 <__aeabi_i2f>
 8018e3e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8018e42:	4680      	mov	r8, r0
 8018e44:	f7e7 ffb8 	bl	8000db8 <__aeabi_fmul>
 8018e48:	4601      	mov	r1, r0
 8018e4a:	4620      	mov	r0, r4
 8018e4c:	f7e7 feaa 	bl	8000ba4 <__aeabi_fsub>
 8018e50:	f7e8 f98e 	bl	8001170 <__aeabi_f2iz>
 8018e54:	ab08      	add	r3, sp, #32
 8018e56:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8018e5a:	4640      	mov	r0, r8
 8018e5c:	f7e8 f988 	bl	8001170 <__aeabi_f2iz>
 8018e60:	1c7c      	adds	r4, r7, #1
 8018e62:	ab08      	add	r3, sp, #32
 8018e64:	3608      	adds	r6, #8
 8018e66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018e6a:	e744      	b.n	8018cf6 <__kernel_rem_pio2f+0x222>
 8018e6c:	4620      	mov	r0, r4
 8018e6e:	f7e8 f97f 	bl	8001170 <__aeabi_f2iz>
 8018e72:	ab08      	add	r3, sp, #32
 8018e74:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8018e78:	463c      	mov	r4, r7
 8018e7a:	e73c      	b.n	8018cf6 <__kernel_rem_pio2f+0x222>
 8018e7c:	ab08      	add	r3, sp, #32
 8018e7e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018e82:	f7e7 ff45 	bl	8000d10 <__aeabi_i2f>
 8018e86:	4651      	mov	r1, sl
 8018e88:	f7e7 ff96 	bl	8000db8 <__aeabi_fmul>
 8018e8c:	4631      	mov	r1, r6
 8018e8e:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8018e92:	4650      	mov	r0, sl
 8018e94:	f7e7 ff90 	bl	8000db8 <__aeabi_fmul>
 8018e98:	f108 38ff 	add.w	r8, r8, #4294967295
 8018e9c:	4682      	mov	sl, r0
 8018e9e:	e734      	b.n	8018d0a <__kernel_rem_pio2f+0x236>
 8018ea0:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8018ea4:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8018ea8:	9304      	str	r3, [sp, #16]
 8018eaa:	9203      	str	r2, [sp, #12]
 8018eac:	f7e7 ff84 	bl	8000db8 <__aeabi_fmul>
 8018eb0:	4601      	mov	r1, r0
 8018eb2:	4658      	mov	r0, fp
 8018eb4:	f7e7 fe78 	bl	8000ba8 <__addsf3>
 8018eb8:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8018ebc:	4683      	mov	fp, r0
 8018ebe:	f108 0801 	add.w	r8, r8, #1
 8018ec2:	9902      	ldr	r1, [sp, #8]
 8018ec4:	4588      	cmp	r8, r1
 8018ec6:	dc01      	bgt.n	8018ecc <__kernel_rem_pio2f+0x3f8>
 8018ec8:	45c2      	cmp	sl, r8
 8018eca:	dae9      	bge.n	8018ea0 <__kernel_rem_pio2f+0x3cc>
 8018ecc:	a958      	add	r1, sp, #352	; 0x160
 8018ece:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018ed2:	f841 bca0 	str.w	fp, [r1, #-160]
 8018ed6:	f10a 0a01 	add.w	sl, sl, #1
 8018eda:	3f04      	subs	r7, #4
 8018edc:	e71f      	b.n	8018d1e <__kernel_rem_pio2f+0x24a>
 8018ede:	469b      	mov	fp, r3
 8018ee0:	f04f 0800 	mov.w	r8, #0
 8018ee4:	e7ed      	b.n	8018ec2 <__kernel_rem_pio2f+0x3ee>
 8018ee6:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 8018eea:	4456      	add	r6, sl
 8018eec:	4637      	mov	r7, r6
 8018eee:	46a0      	mov	r8, r4
 8018ef0:	f1b8 0f00 	cmp.w	r8, #0
 8018ef4:	dc4a      	bgt.n	8018f8c <__kernel_rem_pio2f+0x4b8>
 8018ef6:	4627      	mov	r7, r4
 8018ef8:	2f01      	cmp	r7, #1
 8018efa:	dc60      	bgt.n	8018fbe <__kernel_rem_pio2f+0x4ea>
 8018efc:	2000      	movs	r0, #0
 8018efe:	2c01      	cmp	r4, #1
 8018f00:	dc74      	bgt.n	8018fec <__kernel_rem_pio2f+0x518>
 8018f02:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8018f04:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8018f06:	2d00      	cmp	r5, #0
 8018f08:	d176      	bne.n	8018ff8 <__kernel_rem_pio2f+0x524>
 8018f0a:	9901      	ldr	r1, [sp, #4]
 8018f0c:	600a      	str	r2, [r1, #0]
 8018f0e:	460a      	mov	r2, r1
 8018f10:	604b      	str	r3, [r1, #4]
 8018f12:	6090      	str	r0, [r2, #8]
 8018f14:	e00b      	b.n	8018f2e <__kernel_rem_pio2f+0x45a>
 8018f16:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8018f1a:	f7e7 fe45 	bl	8000ba8 <__addsf3>
 8018f1e:	3c01      	subs	r4, #1
 8018f20:	2c00      	cmp	r4, #0
 8018f22:	daf8      	bge.n	8018f16 <__kernel_rem_pio2f+0x442>
 8018f24:	b10d      	cbz	r5, 8018f2a <__kernel_rem_pio2f+0x456>
 8018f26:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8018f2a:	9b01      	ldr	r3, [sp, #4]
 8018f2c:	6018      	str	r0, [r3, #0]
 8018f2e:	f009 0007 	and.w	r0, r9, #7
 8018f32:	b059      	add	sp, #356	; 0x164
 8018f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f38:	2000      	movs	r0, #0
 8018f3a:	ae30      	add	r6, sp, #192	; 0xc0
 8018f3c:	e7f0      	b.n	8018f20 <__kernel_rem_pio2f+0x44c>
 8018f3e:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8018f42:	f7e7 fe31 	bl	8000ba8 <__addsf3>
 8018f46:	3e01      	subs	r6, #1
 8018f48:	2e00      	cmp	r6, #0
 8018f4a:	daf8      	bge.n	8018f3e <__kernel_rem_pio2f+0x46a>
 8018f4c:	b1b5      	cbz	r5, 8018f7c <__kernel_rem_pio2f+0x4a8>
 8018f4e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8018f52:	9a01      	ldr	r2, [sp, #4]
 8018f54:	af58      	add	r7, sp, #352	; 0x160
 8018f56:	4601      	mov	r1, r0
 8018f58:	6013      	str	r3, [r2, #0]
 8018f5a:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8018f5e:	f7e7 fe21 	bl	8000ba4 <__aeabi_fsub>
 8018f62:	2601      	movs	r6, #1
 8018f64:	42b4      	cmp	r4, r6
 8018f66:	da0b      	bge.n	8018f80 <__kernel_rem_pio2f+0x4ac>
 8018f68:	b10d      	cbz	r5, 8018f6e <__kernel_rem_pio2f+0x49a>
 8018f6a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8018f6e:	9b01      	ldr	r3, [sp, #4]
 8018f70:	6058      	str	r0, [r3, #4]
 8018f72:	e7dc      	b.n	8018f2e <__kernel_rem_pio2f+0x45a>
 8018f74:	4626      	mov	r6, r4
 8018f76:	2000      	movs	r0, #0
 8018f78:	af30      	add	r7, sp, #192	; 0xc0
 8018f7a:	e7e5      	b.n	8018f48 <__kernel_rem_pio2f+0x474>
 8018f7c:	4603      	mov	r3, r0
 8018f7e:	e7e8      	b.n	8018f52 <__kernel_rem_pio2f+0x47e>
 8018f80:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8018f84:	f7e7 fe10 	bl	8000ba8 <__addsf3>
 8018f88:	3601      	adds	r6, #1
 8018f8a:	e7eb      	b.n	8018f64 <__kernel_rem_pio2f+0x490>
 8018f8c:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8018f90:	f108 38ff 	add.w	r8, r8, #4294967295
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	4610      	mov	r0, r2
 8018f98:	4619      	mov	r1, r3
 8018f9a:	9303      	str	r3, [sp, #12]
 8018f9c:	9202      	str	r2, [sp, #8]
 8018f9e:	f7e7 fe03 	bl	8000ba8 <__addsf3>
 8018fa2:	9a02      	ldr	r2, [sp, #8]
 8018fa4:	4601      	mov	r1, r0
 8018fa6:	4683      	mov	fp, r0
 8018fa8:	4610      	mov	r0, r2
 8018faa:	f7e7 fdfb 	bl	8000ba4 <__aeabi_fsub>
 8018fae:	9b03      	ldr	r3, [sp, #12]
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	f7e7 fdf9 	bl	8000ba8 <__addsf3>
 8018fb6:	f8c7 b000 	str.w	fp, [r7]
 8018fba:	6078      	str	r0, [r7, #4]
 8018fbc:	e798      	b.n	8018ef0 <__kernel_rem_pio2f+0x41c>
 8018fbe:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8018fc2:	3f01      	subs	r7, #1
 8018fc4:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8018fc8:	4618      	mov	r0, r3
 8018fca:	4659      	mov	r1, fp
 8018fcc:	9302      	str	r3, [sp, #8]
 8018fce:	f7e7 fdeb 	bl	8000ba8 <__addsf3>
 8018fd2:	9b02      	ldr	r3, [sp, #8]
 8018fd4:	4601      	mov	r1, r0
 8018fd6:	4680      	mov	r8, r0
 8018fd8:	4618      	mov	r0, r3
 8018fda:	f7e7 fde3 	bl	8000ba4 <__aeabi_fsub>
 8018fde:	4659      	mov	r1, fp
 8018fe0:	f7e7 fde2 	bl	8000ba8 <__addsf3>
 8018fe4:	f8c6 8000 	str.w	r8, [r6]
 8018fe8:	6070      	str	r0, [r6, #4]
 8018fea:	e785      	b.n	8018ef8 <__kernel_rem_pio2f+0x424>
 8018fec:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8018ff0:	f7e7 fdda 	bl	8000ba8 <__addsf3>
 8018ff4:	3c01      	subs	r4, #1
 8018ff6:	e782      	b.n	8018efe <__kernel_rem_pio2f+0x42a>
 8018ff8:	9901      	ldr	r1, [sp, #4]
 8018ffa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8018ffe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019002:	600a      	str	r2, [r1, #0]
 8019004:	604b      	str	r3, [r1, #4]
 8019006:	460a      	mov	r2, r1
 8019008:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801900c:	e781      	b.n	8018f12 <__kernel_rem_pio2f+0x43e>
 801900e:	bf00      	nop

08019010 <__kernel_sinf>:
 8019010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019014:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019018:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801901c:	4604      	mov	r4, r0
 801901e:	460f      	mov	r7, r1
 8019020:	4691      	mov	r9, r2
 8019022:	da03      	bge.n	801902c <__kernel_sinf+0x1c>
 8019024:	f7e8 f8a4 	bl	8001170 <__aeabi_f2iz>
 8019028:	2800      	cmp	r0, #0
 801902a:	d035      	beq.n	8019098 <__kernel_sinf+0x88>
 801902c:	4621      	mov	r1, r4
 801902e:	4620      	mov	r0, r4
 8019030:	f7e7 fec2 	bl	8000db8 <__aeabi_fmul>
 8019034:	4605      	mov	r5, r0
 8019036:	4601      	mov	r1, r0
 8019038:	4620      	mov	r0, r4
 801903a:	f7e7 febd 	bl	8000db8 <__aeabi_fmul>
 801903e:	4929      	ldr	r1, [pc, #164]	; (80190e4 <__kernel_sinf+0xd4>)
 8019040:	4606      	mov	r6, r0
 8019042:	4628      	mov	r0, r5
 8019044:	f7e7 feb8 	bl	8000db8 <__aeabi_fmul>
 8019048:	4927      	ldr	r1, [pc, #156]	; (80190e8 <__kernel_sinf+0xd8>)
 801904a:	f7e7 fdab 	bl	8000ba4 <__aeabi_fsub>
 801904e:	4629      	mov	r1, r5
 8019050:	f7e7 feb2 	bl	8000db8 <__aeabi_fmul>
 8019054:	4925      	ldr	r1, [pc, #148]	; (80190ec <__kernel_sinf+0xdc>)
 8019056:	f7e7 fda7 	bl	8000ba8 <__addsf3>
 801905a:	4629      	mov	r1, r5
 801905c:	f7e7 feac 	bl	8000db8 <__aeabi_fmul>
 8019060:	4923      	ldr	r1, [pc, #140]	; (80190f0 <__kernel_sinf+0xe0>)
 8019062:	f7e7 fd9f 	bl	8000ba4 <__aeabi_fsub>
 8019066:	4629      	mov	r1, r5
 8019068:	f7e7 fea6 	bl	8000db8 <__aeabi_fmul>
 801906c:	4921      	ldr	r1, [pc, #132]	; (80190f4 <__kernel_sinf+0xe4>)
 801906e:	f7e7 fd9b 	bl	8000ba8 <__addsf3>
 8019072:	4680      	mov	r8, r0
 8019074:	f1b9 0f00 	cmp.w	r9, #0
 8019078:	d111      	bne.n	801909e <__kernel_sinf+0x8e>
 801907a:	4601      	mov	r1, r0
 801907c:	4628      	mov	r0, r5
 801907e:	f7e7 fe9b 	bl	8000db8 <__aeabi_fmul>
 8019082:	491d      	ldr	r1, [pc, #116]	; (80190f8 <__kernel_sinf+0xe8>)
 8019084:	f7e7 fd8e 	bl	8000ba4 <__aeabi_fsub>
 8019088:	4631      	mov	r1, r6
 801908a:	f7e7 fe95 	bl	8000db8 <__aeabi_fmul>
 801908e:	4601      	mov	r1, r0
 8019090:	4620      	mov	r0, r4
 8019092:	f7e7 fd89 	bl	8000ba8 <__addsf3>
 8019096:	4604      	mov	r4, r0
 8019098:	4620      	mov	r0, r4
 801909a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801909e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80190a2:	4638      	mov	r0, r7
 80190a4:	f7e7 fe88 	bl	8000db8 <__aeabi_fmul>
 80190a8:	4641      	mov	r1, r8
 80190aa:	4681      	mov	r9, r0
 80190ac:	4630      	mov	r0, r6
 80190ae:	f7e7 fe83 	bl	8000db8 <__aeabi_fmul>
 80190b2:	4601      	mov	r1, r0
 80190b4:	4648      	mov	r0, r9
 80190b6:	f7e7 fd75 	bl	8000ba4 <__aeabi_fsub>
 80190ba:	4629      	mov	r1, r5
 80190bc:	f7e7 fe7c 	bl	8000db8 <__aeabi_fmul>
 80190c0:	4639      	mov	r1, r7
 80190c2:	f7e7 fd6f 	bl	8000ba4 <__aeabi_fsub>
 80190c6:	490c      	ldr	r1, [pc, #48]	; (80190f8 <__kernel_sinf+0xe8>)
 80190c8:	4605      	mov	r5, r0
 80190ca:	4630      	mov	r0, r6
 80190cc:	f7e7 fe74 	bl	8000db8 <__aeabi_fmul>
 80190d0:	4601      	mov	r1, r0
 80190d2:	4628      	mov	r0, r5
 80190d4:	f7e7 fd68 	bl	8000ba8 <__addsf3>
 80190d8:	4601      	mov	r1, r0
 80190da:	4620      	mov	r0, r4
 80190dc:	f7e7 fd62 	bl	8000ba4 <__aeabi_fsub>
 80190e0:	e7d9      	b.n	8019096 <__kernel_sinf+0x86>
 80190e2:	bf00      	nop
 80190e4:	2f2ec9d3 	.word	0x2f2ec9d3
 80190e8:	32d72f34 	.word	0x32d72f34
 80190ec:	3638ef1b 	.word	0x3638ef1b
 80190f0:	39500d01 	.word	0x39500d01
 80190f4:	3c088889 	.word	0x3c088889
 80190f8:	3e2aaaab 	.word	0x3e2aaaab
 80190fc:	00000000 	.word	0x00000000

08019100 <atan>:
 8019100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019104:	4bb6      	ldr	r3, [pc, #728]	; (80193e0 <atan+0x2e0>)
 8019106:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801910a:	429e      	cmp	r6, r3
 801910c:	4604      	mov	r4, r0
 801910e:	460d      	mov	r5, r1
 8019110:	468b      	mov	fp, r1
 8019112:	dd17      	ble.n	8019144 <atan+0x44>
 8019114:	4bb3      	ldr	r3, [pc, #716]	; (80193e4 <atan+0x2e4>)
 8019116:	429e      	cmp	r6, r3
 8019118:	dc01      	bgt.n	801911e <atan+0x1e>
 801911a:	d109      	bne.n	8019130 <atan+0x30>
 801911c:	b140      	cbz	r0, 8019130 <atan+0x30>
 801911e:	4622      	mov	r2, r4
 8019120:	462b      	mov	r3, r5
 8019122:	4620      	mov	r0, r4
 8019124:	4629      	mov	r1, r5
 8019126:	f7e7 f83b 	bl	80001a0 <__adddf3>
 801912a:	4604      	mov	r4, r0
 801912c:	460d      	mov	r5, r1
 801912e:	e005      	b.n	801913c <atan+0x3c>
 8019130:	f1bb 0f00 	cmp.w	fp, #0
 8019134:	4cac      	ldr	r4, [pc, #688]	; (80193e8 <atan+0x2e8>)
 8019136:	f340 8121 	ble.w	801937c <atan+0x27c>
 801913a:	4dac      	ldr	r5, [pc, #688]	; (80193ec <atan+0x2ec>)
 801913c:	4620      	mov	r0, r4
 801913e:	4629      	mov	r1, r5
 8019140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019144:	4baa      	ldr	r3, [pc, #680]	; (80193f0 <atan+0x2f0>)
 8019146:	429e      	cmp	r6, r3
 8019148:	dc11      	bgt.n	801916e <atan+0x6e>
 801914a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801914e:	429e      	cmp	r6, r3
 8019150:	dc0a      	bgt.n	8019168 <atan+0x68>
 8019152:	a38b      	add	r3, pc, #556	; (adr r3, 8019380 <atan+0x280>)
 8019154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019158:	f7e7 f822 	bl	80001a0 <__adddf3>
 801915c:	2200      	movs	r2, #0
 801915e:	4ba5      	ldr	r3, [pc, #660]	; (80193f4 <atan+0x2f4>)
 8019160:	f7e7 fc64 	bl	8000a2c <__aeabi_dcmpgt>
 8019164:	2800      	cmp	r0, #0
 8019166:	d1e9      	bne.n	801913c <atan+0x3c>
 8019168:	f04f 3aff 	mov.w	sl, #4294967295
 801916c:	e027      	b.n	80191be <atan+0xbe>
 801916e:	f000 f951 	bl	8019414 <fabs>
 8019172:	4ba1      	ldr	r3, [pc, #644]	; (80193f8 <atan+0x2f8>)
 8019174:	4604      	mov	r4, r0
 8019176:	429e      	cmp	r6, r3
 8019178:	460d      	mov	r5, r1
 801917a:	f300 80b8 	bgt.w	80192ee <atan+0x1ee>
 801917e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8019182:	429e      	cmp	r6, r3
 8019184:	f300 809c 	bgt.w	80192c0 <atan+0x1c0>
 8019188:	4602      	mov	r2, r0
 801918a:	460b      	mov	r3, r1
 801918c:	f7e7 f808 	bl	80001a0 <__adddf3>
 8019190:	2200      	movs	r2, #0
 8019192:	4b98      	ldr	r3, [pc, #608]	; (80193f4 <atan+0x2f4>)
 8019194:	f7e7 f802 	bl	800019c <__aeabi_dsub>
 8019198:	2200      	movs	r2, #0
 801919a:	4606      	mov	r6, r0
 801919c:	460f      	mov	r7, r1
 801919e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80191a2:	4620      	mov	r0, r4
 80191a4:	4629      	mov	r1, r5
 80191a6:	f7e6 fffb 	bl	80001a0 <__adddf3>
 80191aa:	4602      	mov	r2, r0
 80191ac:	460b      	mov	r3, r1
 80191ae:	4630      	mov	r0, r6
 80191b0:	4639      	mov	r1, r7
 80191b2:	f7e7 fad5 	bl	8000760 <__aeabi_ddiv>
 80191b6:	f04f 0a00 	mov.w	sl, #0
 80191ba:	4604      	mov	r4, r0
 80191bc:	460d      	mov	r5, r1
 80191be:	4622      	mov	r2, r4
 80191c0:	462b      	mov	r3, r5
 80191c2:	4620      	mov	r0, r4
 80191c4:	4629      	mov	r1, r5
 80191c6:	f7e7 f9a1 	bl	800050c <__aeabi_dmul>
 80191ca:	4602      	mov	r2, r0
 80191cc:	460b      	mov	r3, r1
 80191ce:	4680      	mov	r8, r0
 80191d0:	4689      	mov	r9, r1
 80191d2:	f7e7 f99b 	bl	800050c <__aeabi_dmul>
 80191d6:	a36c      	add	r3, pc, #432	; (adr r3, 8019388 <atan+0x288>)
 80191d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191dc:	4606      	mov	r6, r0
 80191de:	460f      	mov	r7, r1
 80191e0:	f7e7 f994 	bl	800050c <__aeabi_dmul>
 80191e4:	a36a      	add	r3, pc, #424	; (adr r3, 8019390 <atan+0x290>)
 80191e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191ea:	f7e6 ffd9 	bl	80001a0 <__adddf3>
 80191ee:	4632      	mov	r2, r6
 80191f0:	463b      	mov	r3, r7
 80191f2:	f7e7 f98b 	bl	800050c <__aeabi_dmul>
 80191f6:	a368      	add	r3, pc, #416	; (adr r3, 8019398 <atan+0x298>)
 80191f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191fc:	f7e6 ffd0 	bl	80001a0 <__adddf3>
 8019200:	4632      	mov	r2, r6
 8019202:	463b      	mov	r3, r7
 8019204:	f7e7 f982 	bl	800050c <__aeabi_dmul>
 8019208:	a365      	add	r3, pc, #404	; (adr r3, 80193a0 <atan+0x2a0>)
 801920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801920e:	f7e6 ffc7 	bl	80001a0 <__adddf3>
 8019212:	4632      	mov	r2, r6
 8019214:	463b      	mov	r3, r7
 8019216:	f7e7 f979 	bl	800050c <__aeabi_dmul>
 801921a:	a363      	add	r3, pc, #396	; (adr r3, 80193a8 <atan+0x2a8>)
 801921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019220:	f7e6 ffbe 	bl	80001a0 <__adddf3>
 8019224:	4632      	mov	r2, r6
 8019226:	463b      	mov	r3, r7
 8019228:	f7e7 f970 	bl	800050c <__aeabi_dmul>
 801922c:	a360      	add	r3, pc, #384	; (adr r3, 80193b0 <atan+0x2b0>)
 801922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019232:	f7e6 ffb5 	bl	80001a0 <__adddf3>
 8019236:	4642      	mov	r2, r8
 8019238:	464b      	mov	r3, r9
 801923a:	f7e7 f967 	bl	800050c <__aeabi_dmul>
 801923e:	a35e      	add	r3, pc, #376	; (adr r3, 80193b8 <atan+0x2b8>)
 8019240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019244:	4680      	mov	r8, r0
 8019246:	4689      	mov	r9, r1
 8019248:	4630      	mov	r0, r6
 801924a:	4639      	mov	r1, r7
 801924c:	f7e7 f95e 	bl	800050c <__aeabi_dmul>
 8019250:	a35b      	add	r3, pc, #364	; (adr r3, 80193c0 <atan+0x2c0>)
 8019252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019256:	f7e6 ffa1 	bl	800019c <__aeabi_dsub>
 801925a:	4632      	mov	r2, r6
 801925c:	463b      	mov	r3, r7
 801925e:	f7e7 f955 	bl	800050c <__aeabi_dmul>
 8019262:	a359      	add	r3, pc, #356	; (adr r3, 80193c8 <atan+0x2c8>)
 8019264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019268:	f7e6 ff98 	bl	800019c <__aeabi_dsub>
 801926c:	4632      	mov	r2, r6
 801926e:	463b      	mov	r3, r7
 8019270:	f7e7 f94c 	bl	800050c <__aeabi_dmul>
 8019274:	a356      	add	r3, pc, #344	; (adr r3, 80193d0 <atan+0x2d0>)
 8019276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801927a:	f7e6 ff8f 	bl	800019c <__aeabi_dsub>
 801927e:	4632      	mov	r2, r6
 8019280:	463b      	mov	r3, r7
 8019282:	f7e7 f943 	bl	800050c <__aeabi_dmul>
 8019286:	a354      	add	r3, pc, #336	; (adr r3, 80193d8 <atan+0x2d8>)
 8019288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801928c:	f7e6 ff86 	bl	800019c <__aeabi_dsub>
 8019290:	4632      	mov	r2, r6
 8019292:	463b      	mov	r3, r7
 8019294:	f7e7 f93a 	bl	800050c <__aeabi_dmul>
 8019298:	4602      	mov	r2, r0
 801929a:	460b      	mov	r3, r1
 801929c:	4640      	mov	r0, r8
 801929e:	4649      	mov	r1, r9
 80192a0:	f7e6 ff7e 	bl	80001a0 <__adddf3>
 80192a4:	4622      	mov	r2, r4
 80192a6:	462b      	mov	r3, r5
 80192a8:	f7e7 f930 	bl	800050c <__aeabi_dmul>
 80192ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80192b0:	4602      	mov	r2, r0
 80192b2:	460b      	mov	r3, r1
 80192b4:	d144      	bne.n	8019340 <atan+0x240>
 80192b6:	4620      	mov	r0, r4
 80192b8:	4629      	mov	r1, r5
 80192ba:	f7e6 ff6f 	bl	800019c <__aeabi_dsub>
 80192be:	e734      	b.n	801912a <atan+0x2a>
 80192c0:	2200      	movs	r2, #0
 80192c2:	4b4c      	ldr	r3, [pc, #304]	; (80193f4 <atan+0x2f4>)
 80192c4:	f7e6 ff6a 	bl	800019c <__aeabi_dsub>
 80192c8:	2200      	movs	r2, #0
 80192ca:	4606      	mov	r6, r0
 80192cc:	460f      	mov	r7, r1
 80192ce:	4b49      	ldr	r3, [pc, #292]	; (80193f4 <atan+0x2f4>)
 80192d0:	4620      	mov	r0, r4
 80192d2:	4629      	mov	r1, r5
 80192d4:	f7e6 ff64 	bl	80001a0 <__adddf3>
 80192d8:	4602      	mov	r2, r0
 80192da:	460b      	mov	r3, r1
 80192dc:	4630      	mov	r0, r6
 80192de:	4639      	mov	r1, r7
 80192e0:	f7e7 fa3e 	bl	8000760 <__aeabi_ddiv>
 80192e4:	f04f 0a01 	mov.w	sl, #1
 80192e8:	4604      	mov	r4, r0
 80192ea:	460d      	mov	r5, r1
 80192ec:	e767      	b.n	80191be <atan+0xbe>
 80192ee:	4b43      	ldr	r3, [pc, #268]	; (80193fc <atan+0x2fc>)
 80192f0:	429e      	cmp	r6, r3
 80192f2:	dc1a      	bgt.n	801932a <atan+0x22a>
 80192f4:	2200      	movs	r2, #0
 80192f6:	4b42      	ldr	r3, [pc, #264]	; (8019400 <atan+0x300>)
 80192f8:	f7e6 ff50 	bl	800019c <__aeabi_dsub>
 80192fc:	2200      	movs	r2, #0
 80192fe:	4606      	mov	r6, r0
 8019300:	460f      	mov	r7, r1
 8019302:	4b3f      	ldr	r3, [pc, #252]	; (8019400 <atan+0x300>)
 8019304:	4620      	mov	r0, r4
 8019306:	4629      	mov	r1, r5
 8019308:	f7e7 f900 	bl	800050c <__aeabi_dmul>
 801930c:	2200      	movs	r2, #0
 801930e:	4b39      	ldr	r3, [pc, #228]	; (80193f4 <atan+0x2f4>)
 8019310:	f7e6 ff46 	bl	80001a0 <__adddf3>
 8019314:	4602      	mov	r2, r0
 8019316:	460b      	mov	r3, r1
 8019318:	4630      	mov	r0, r6
 801931a:	4639      	mov	r1, r7
 801931c:	f7e7 fa20 	bl	8000760 <__aeabi_ddiv>
 8019320:	f04f 0a02 	mov.w	sl, #2
 8019324:	4604      	mov	r4, r0
 8019326:	460d      	mov	r5, r1
 8019328:	e749      	b.n	80191be <atan+0xbe>
 801932a:	4602      	mov	r2, r0
 801932c:	460b      	mov	r3, r1
 801932e:	2000      	movs	r0, #0
 8019330:	4934      	ldr	r1, [pc, #208]	; (8019404 <atan+0x304>)
 8019332:	f7e7 fa15 	bl	8000760 <__aeabi_ddiv>
 8019336:	f04f 0a03 	mov.w	sl, #3
 801933a:	4604      	mov	r4, r0
 801933c:	460d      	mov	r5, r1
 801933e:	e73e      	b.n	80191be <atan+0xbe>
 8019340:	4b31      	ldr	r3, [pc, #196]	; (8019408 <atan+0x308>)
 8019342:	4e32      	ldr	r6, [pc, #200]	; (801940c <atan+0x30c>)
 8019344:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8019348:	4456      	add	r6, sl
 801934a:	449a      	add	sl, r3
 801934c:	e9da 2300 	ldrd	r2, r3, [sl]
 8019350:	f7e6 ff24 	bl	800019c <__aeabi_dsub>
 8019354:	4622      	mov	r2, r4
 8019356:	462b      	mov	r3, r5
 8019358:	f7e6 ff20 	bl	800019c <__aeabi_dsub>
 801935c:	4602      	mov	r2, r0
 801935e:	460b      	mov	r3, r1
 8019360:	e9d6 0100 	ldrd	r0, r1, [r6]
 8019364:	f7e6 ff1a 	bl	800019c <__aeabi_dsub>
 8019368:	f1bb 0f00 	cmp.w	fp, #0
 801936c:	4604      	mov	r4, r0
 801936e:	460d      	mov	r5, r1
 8019370:	f6bf aee4 	bge.w	801913c <atan+0x3c>
 8019374:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019378:	461d      	mov	r5, r3
 801937a:	e6df      	b.n	801913c <atan+0x3c>
 801937c:	4d24      	ldr	r5, [pc, #144]	; (8019410 <atan+0x310>)
 801937e:	e6dd      	b.n	801913c <atan+0x3c>
 8019380:	8800759c 	.word	0x8800759c
 8019384:	7e37e43c 	.word	0x7e37e43c
 8019388:	e322da11 	.word	0xe322da11
 801938c:	3f90ad3a 	.word	0x3f90ad3a
 8019390:	24760deb 	.word	0x24760deb
 8019394:	3fa97b4b 	.word	0x3fa97b4b
 8019398:	a0d03d51 	.word	0xa0d03d51
 801939c:	3fb10d66 	.word	0x3fb10d66
 80193a0:	c54c206e 	.word	0xc54c206e
 80193a4:	3fb745cd 	.word	0x3fb745cd
 80193a8:	920083ff 	.word	0x920083ff
 80193ac:	3fc24924 	.word	0x3fc24924
 80193b0:	5555550d 	.word	0x5555550d
 80193b4:	3fd55555 	.word	0x3fd55555
 80193b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80193bc:	bfa2b444 	.word	0xbfa2b444
 80193c0:	52defd9a 	.word	0x52defd9a
 80193c4:	3fadde2d 	.word	0x3fadde2d
 80193c8:	af749a6d 	.word	0xaf749a6d
 80193cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80193d0:	fe231671 	.word	0xfe231671
 80193d4:	3fbc71c6 	.word	0x3fbc71c6
 80193d8:	9998ebc4 	.word	0x9998ebc4
 80193dc:	3fc99999 	.word	0x3fc99999
 80193e0:	440fffff 	.word	0x440fffff
 80193e4:	7ff00000 	.word	0x7ff00000
 80193e8:	54442d18 	.word	0x54442d18
 80193ec:	3ff921fb 	.word	0x3ff921fb
 80193f0:	3fdbffff 	.word	0x3fdbffff
 80193f4:	3ff00000 	.word	0x3ff00000
 80193f8:	3ff2ffff 	.word	0x3ff2ffff
 80193fc:	40037fff 	.word	0x40037fff
 8019400:	3ff80000 	.word	0x3ff80000
 8019404:	bff00000 	.word	0xbff00000
 8019408:	0801a948 	.word	0x0801a948
 801940c:	0801a928 	.word	0x0801a928
 8019410:	bff921fb 	.word	0xbff921fb

08019414 <fabs>:
 8019414:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019418:	4619      	mov	r1, r3
 801941a:	4770      	bx	lr

0801941c <finite>:
 801941c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8019420:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8019424:	0fc0      	lsrs	r0, r0, #31
 8019426:	4770      	bx	lr

08019428 <floor>:
 8019428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801942c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8019430:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8019434:	2e13      	cmp	r6, #19
 8019436:	4607      	mov	r7, r0
 8019438:	460b      	mov	r3, r1
 801943a:	460c      	mov	r4, r1
 801943c:	4605      	mov	r5, r0
 801943e:	dc35      	bgt.n	80194ac <floor+0x84>
 8019440:	2e00      	cmp	r6, #0
 8019442:	da16      	bge.n	8019472 <floor+0x4a>
 8019444:	a336      	add	r3, pc, #216	; (adr r3, 8019520 <floor+0xf8>)
 8019446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801944a:	f7e6 fea9 	bl	80001a0 <__adddf3>
 801944e:	2200      	movs	r2, #0
 8019450:	2300      	movs	r3, #0
 8019452:	f7e7 faeb 	bl	8000a2c <__aeabi_dcmpgt>
 8019456:	b148      	cbz	r0, 801946c <floor+0x44>
 8019458:	2c00      	cmp	r4, #0
 801945a:	da5b      	bge.n	8019514 <floor+0xec>
 801945c:	2500      	movs	r5, #0
 801945e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019462:	4a31      	ldr	r2, [pc, #196]	; (8019528 <floor+0x100>)
 8019464:	433b      	orrs	r3, r7
 8019466:	42ab      	cmp	r3, r5
 8019468:	bf18      	it	ne
 801946a:	4614      	movne	r4, r2
 801946c:	4623      	mov	r3, r4
 801946e:	462f      	mov	r7, r5
 8019470:	e026      	b.n	80194c0 <floor+0x98>
 8019472:	4a2e      	ldr	r2, [pc, #184]	; (801952c <floor+0x104>)
 8019474:	fa42 f806 	asr.w	r8, r2, r6
 8019478:	ea01 0208 	and.w	r2, r1, r8
 801947c:	4302      	orrs	r2, r0
 801947e:	d01f      	beq.n	80194c0 <floor+0x98>
 8019480:	a327      	add	r3, pc, #156	; (adr r3, 8019520 <floor+0xf8>)
 8019482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019486:	f7e6 fe8b 	bl	80001a0 <__adddf3>
 801948a:	2200      	movs	r2, #0
 801948c:	2300      	movs	r3, #0
 801948e:	f7e7 facd 	bl	8000a2c <__aeabi_dcmpgt>
 8019492:	2800      	cmp	r0, #0
 8019494:	d0ea      	beq.n	801946c <floor+0x44>
 8019496:	2c00      	cmp	r4, #0
 8019498:	bfbe      	ittt	lt
 801949a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801949e:	fa43 f606 	asrlt.w	r6, r3, r6
 80194a2:	19a4      	addlt	r4, r4, r6
 80194a4:	ea24 0408 	bic.w	r4, r4, r8
 80194a8:	2500      	movs	r5, #0
 80194aa:	e7df      	b.n	801946c <floor+0x44>
 80194ac:	2e33      	cmp	r6, #51	; 0x33
 80194ae:	dd0b      	ble.n	80194c8 <floor+0xa0>
 80194b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80194b4:	d104      	bne.n	80194c0 <floor+0x98>
 80194b6:	4602      	mov	r2, r0
 80194b8:	f7e6 fe72 	bl	80001a0 <__adddf3>
 80194bc:	4607      	mov	r7, r0
 80194be:	460b      	mov	r3, r1
 80194c0:	4638      	mov	r0, r7
 80194c2:	4619      	mov	r1, r3
 80194c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194c8:	f04f 32ff 	mov.w	r2, #4294967295
 80194cc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80194d0:	fa22 f808 	lsr.w	r8, r2, r8
 80194d4:	ea18 0f00 	tst.w	r8, r0
 80194d8:	d0f2      	beq.n	80194c0 <floor+0x98>
 80194da:	a311      	add	r3, pc, #68	; (adr r3, 8019520 <floor+0xf8>)
 80194dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194e0:	f7e6 fe5e 	bl	80001a0 <__adddf3>
 80194e4:	2200      	movs	r2, #0
 80194e6:	2300      	movs	r3, #0
 80194e8:	f7e7 faa0 	bl	8000a2c <__aeabi_dcmpgt>
 80194ec:	2800      	cmp	r0, #0
 80194ee:	d0bd      	beq.n	801946c <floor+0x44>
 80194f0:	2c00      	cmp	r4, #0
 80194f2:	da02      	bge.n	80194fa <floor+0xd2>
 80194f4:	2e14      	cmp	r6, #20
 80194f6:	d103      	bne.n	8019500 <floor+0xd8>
 80194f8:	3401      	adds	r4, #1
 80194fa:	ea25 0508 	bic.w	r5, r5, r8
 80194fe:	e7b5      	b.n	801946c <floor+0x44>
 8019500:	2301      	movs	r3, #1
 8019502:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019506:	fa03 f606 	lsl.w	r6, r3, r6
 801950a:	4435      	add	r5, r6
 801950c:	42bd      	cmp	r5, r7
 801950e:	bf38      	it	cc
 8019510:	18e4      	addcc	r4, r4, r3
 8019512:	e7f2      	b.n	80194fa <floor+0xd2>
 8019514:	2500      	movs	r5, #0
 8019516:	462c      	mov	r4, r5
 8019518:	e7a8      	b.n	801946c <floor+0x44>
 801951a:	bf00      	nop
 801951c:	f3af 8000 	nop.w
 8019520:	8800759c 	.word	0x8800759c
 8019524:	7e37e43c 	.word	0x7e37e43c
 8019528:	bff00000 	.word	0xbff00000
 801952c:	000fffff 	.word	0x000fffff

08019530 <matherr>:
 8019530:	2000      	movs	r0, #0
 8019532:	4770      	bx	lr

08019534 <nan>:
 8019534:	2000      	movs	r0, #0
 8019536:	4901      	ldr	r1, [pc, #4]	; (801953c <nan+0x8>)
 8019538:	4770      	bx	lr
 801953a:	bf00      	nop
 801953c:	7ff80000 	.word	0x7ff80000

08019540 <rint>:
 8019540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019542:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019546:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 801954a:	f1bc 0f13 	cmp.w	ip, #19
 801954e:	4604      	mov	r4, r0
 8019550:	460d      	mov	r5, r1
 8019552:	460b      	mov	r3, r1
 8019554:	4606      	mov	r6, r0
 8019556:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 801955a:	dc5a      	bgt.n	8019612 <rint+0xd2>
 801955c:	f1bc 0f00 	cmp.w	ip, #0
 8019560:	da2b      	bge.n	80195ba <rint+0x7a>
 8019562:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019566:	4302      	orrs	r2, r0
 8019568:	d023      	beq.n	80195b2 <rint+0x72>
 801956a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801956e:	4302      	orrs	r2, r0
 8019570:	4256      	negs	r6, r2
 8019572:	4316      	orrs	r6, r2
 8019574:	0c4b      	lsrs	r3, r1, #17
 8019576:	0b36      	lsrs	r6, r6, #12
 8019578:	4934      	ldr	r1, [pc, #208]	; (801964c <rint+0x10c>)
 801957a:	045b      	lsls	r3, r3, #17
 801957c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8019580:	ea46 0503 	orr.w	r5, r6, r3
 8019584:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8019588:	4602      	mov	r2, r0
 801958a:	462b      	mov	r3, r5
 801958c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8019590:	4620      	mov	r0, r4
 8019592:	4629      	mov	r1, r5
 8019594:	f7e6 fe04 	bl	80001a0 <__adddf3>
 8019598:	e9cd 0100 	strd	r0, r1, [sp]
 801959c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80195a0:	462b      	mov	r3, r5
 80195a2:	4622      	mov	r2, r4
 80195a4:	f7e6 fdfa 	bl	800019c <__aeabi_dsub>
 80195a8:	4604      	mov	r4, r0
 80195aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80195ae:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80195b2:	4620      	mov	r0, r4
 80195b4:	4629      	mov	r1, r5
 80195b6:	b003      	add	sp, #12
 80195b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195ba:	4a25      	ldr	r2, [pc, #148]	; (8019650 <rint+0x110>)
 80195bc:	fa42 f20c 	asr.w	r2, r2, ip
 80195c0:	4011      	ands	r1, r2
 80195c2:	4301      	orrs	r1, r0
 80195c4:	d0f5      	beq.n	80195b2 <rint+0x72>
 80195c6:	0852      	lsrs	r2, r2, #1
 80195c8:	ea05 0102 	and.w	r1, r5, r2
 80195cc:	ea50 0601 	orrs.w	r6, r0, r1
 80195d0:	d00c      	beq.n	80195ec <rint+0xac>
 80195d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80195d6:	f1bc 0f13 	cmp.w	ip, #19
 80195da:	bf0c      	ite	eq
 80195dc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80195e0:	2600      	movne	r6, #0
 80195e2:	ea25 0202 	bic.w	r2, r5, r2
 80195e6:	fa43 f30c 	asr.w	r3, r3, ip
 80195ea:	4313      	orrs	r3, r2
 80195ec:	4917      	ldr	r1, [pc, #92]	; (801964c <rint+0x10c>)
 80195ee:	4632      	mov	r2, r6
 80195f0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80195f4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80195f8:	4620      	mov	r0, r4
 80195fa:	4629      	mov	r1, r5
 80195fc:	f7e6 fdd0 	bl	80001a0 <__adddf3>
 8019600:	e9cd 0100 	strd	r0, r1, [sp]
 8019604:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019608:	4622      	mov	r2, r4
 801960a:	462b      	mov	r3, r5
 801960c:	f7e6 fdc6 	bl	800019c <__aeabi_dsub>
 8019610:	e008      	b.n	8019624 <rint+0xe4>
 8019612:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8019616:	dd08      	ble.n	801962a <rint+0xea>
 8019618:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 801961c:	d1c9      	bne.n	80195b2 <rint+0x72>
 801961e:	4602      	mov	r2, r0
 8019620:	f7e6 fdbe 	bl	80001a0 <__adddf3>
 8019624:	4604      	mov	r4, r0
 8019626:	460d      	mov	r5, r1
 8019628:	e7c3      	b.n	80195b2 <rint+0x72>
 801962a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 801962e:	f04f 32ff 	mov.w	r2, #4294967295
 8019632:	40ca      	lsrs	r2, r1
 8019634:	4210      	tst	r0, r2
 8019636:	d0bc      	beq.n	80195b2 <rint+0x72>
 8019638:	0852      	lsrs	r2, r2, #1
 801963a:	4210      	tst	r0, r2
 801963c:	bf1f      	itttt	ne
 801963e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8019642:	ea20 0202 	bicne.w	r2, r0, r2
 8019646:	410e      	asrne	r6, r1
 8019648:	4316      	orrne	r6, r2
 801964a:	e7cf      	b.n	80195ec <rint+0xac>
 801964c:	0801a968 	.word	0x0801a968
 8019650:	000fffff 	.word	0x000fffff
 8019654:	00000000 	.word	0x00000000

08019658 <scalbn>:
 8019658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801965a:	4616      	mov	r6, r2
 801965c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019660:	4604      	mov	r4, r0
 8019662:	460d      	mov	r5, r1
 8019664:	460b      	mov	r3, r1
 8019666:	b982      	cbnz	r2, 801968a <scalbn+0x32>
 8019668:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801966c:	4303      	orrs	r3, r0
 801966e:	d034      	beq.n	80196da <scalbn+0x82>
 8019670:	4b2d      	ldr	r3, [pc, #180]	; (8019728 <scalbn+0xd0>)
 8019672:	2200      	movs	r2, #0
 8019674:	f7e6 ff4a 	bl	800050c <__aeabi_dmul>
 8019678:	4b2c      	ldr	r3, [pc, #176]	; (801972c <scalbn+0xd4>)
 801967a:	4604      	mov	r4, r0
 801967c:	429e      	cmp	r6, r3
 801967e:	460d      	mov	r5, r1
 8019680:	da0d      	bge.n	801969e <scalbn+0x46>
 8019682:	a325      	add	r3, pc, #148	; (adr r3, 8019718 <scalbn+0xc0>)
 8019684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019688:	e01c      	b.n	80196c4 <scalbn+0x6c>
 801968a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 801968e:	42ba      	cmp	r2, r7
 8019690:	d109      	bne.n	80196a6 <scalbn+0x4e>
 8019692:	4602      	mov	r2, r0
 8019694:	f7e6 fd84 	bl	80001a0 <__adddf3>
 8019698:	4604      	mov	r4, r0
 801969a:	460d      	mov	r5, r1
 801969c:	e01d      	b.n	80196da <scalbn+0x82>
 801969e:	460b      	mov	r3, r1
 80196a0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80196a4:	3a36      	subs	r2, #54	; 0x36
 80196a6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80196aa:	4432      	add	r2, r6
 80196ac:	428a      	cmp	r2, r1
 80196ae:	dd0c      	ble.n	80196ca <scalbn+0x72>
 80196b0:	4622      	mov	r2, r4
 80196b2:	462b      	mov	r3, r5
 80196b4:	a11a      	add	r1, pc, #104	; (adr r1, 8019720 <scalbn+0xc8>)
 80196b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196ba:	f000 fa2f 	bl	8019b1c <copysign>
 80196be:	a318      	add	r3, pc, #96	; (adr r3, 8019720 <scalbn+0xc8>)
 80196c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196c4:	f7e6 ff22 	bl	800050c <__aeabi_dmul>
 80196c8:	e7e6      	b.n	8019698 <scalbn+0x40>
 80196ca:	2a00      	cmp	r2, #0
 80196cc:	dd08      	ble.n	80196e0 <scalbn+0x88>
 80196ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80196d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80196d6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80196da:	4620      	mov	r0, r4
 80196dc:	4629      	mov	r1, r5
 80196de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196e0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80196e4:	da0b      	bge.n	80196fe <scalbn+0xa6>
 80196e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80196ea:	429e      	cmp	r6, r3
 80196ec:	4622      	mov	r2, r4
 80196ee:	462b      	mov	r3, r5
 80196f0:	dce0      	bgt.n	80196b4 <scalbn+0x5c>
 80196f2:	a109      	add	r1, pc, #36	; (adr r1, 8019718 <scalbn+0xc0>)
 80196f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196f8:	f000 fa10 	bl	8019b1c <copysign>
 80196fc:	e7c1      	b.n	8019682 <scalbn+0x2a>
 80196fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019702:	3236      	adds	r2, #54	; 0x36
 8019704:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019708:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801970c:	4620      	mov	r0, r4
 801970e:	4629      	mov	r1, r5
 8019710:	2200      	movs	r2, #0
 8019712:	4b07      	ldr	r3, [pc, #28]	; (8019730 <scalbn+0xd8>)
 8019714:	e7d6      	b.n	80196c4 <scalbn+0x6c>
 8019716:	bf00      	nop
 8019718:	c2f8f359 	.word	0xc2f8f359
 801971c:	01a56e1f 	.word	0x01a56e1f
 8019720:	8800759c 	.word	0x8800759c
 8019724:	7e37e43c 	.word	0x7e37e43c
 8019728:	43500000 	.word	0x43500000
 801972c:	ffff3cb0 	.word	0xffff3cb0
 8019730:	3c900000 	.word	0x3c900000

08019734 <atanf>:
 8019734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019738:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 801973c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8019740:	4604      	mov	r4, r0
 8019742:	4607      	mov	r7, r0
 8019744:	db0e      	blt.n	8019764 <atanf+0x30>
 8019746:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801974a:	dd04      	ble.n	8019756 <atanf+0x22>
 801974c:	4601      	mov	r1, r0
 801974e:	f7e7 fa2b 	bl	8000ba8 <__addsf3>
 8019752:	4604      	mov	r4, r0
 8019754:	e003      	b.n	801975e <atanf+0x2a>
 8019756:	2800      	cmp	r0, #0
 8019758:	f340 80cd 	ble.w	80198f6 <atanf+0x1c2>
 801975c:	4c67      	ldr	r4, [pc, #412]	; (80198fc <atanf+0x1c8>)
 801975e:	4620      	mov	r0, r4
 8019760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019764:	4b66      	ldr	r3, [pc, #408]	; (8019900 <atanf+0x1cc>)
 8019766:	429d      	cmp	r5, r3
 8019768:	dc0e      	bgt.n	8019788 <atanf+0x54>
 801976a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 801976e:	da08      	bge.n	8019782 <atanf+0x4e>
 8019770:	4964      	ldr	r1, [pc, #400]	; (8019904 <atanf+0x1d0>)
 8019772:	f7e7 fa19 	bl	8000ba8 <__addsf3>
 8019776:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801977a:	f7e7 fcd9 	bl	8001130 <__aeabi_fcmpgt>
 801977e:	2800      	cmp	r0, #0
 8019780:	d1ed      	bne.n	801975e <atanf+0x2a>
 8019782:	f04f 36ff 	mov.w	r6, #4294967295
 8019786:	e01c      	b.n	80197c2 <atanf+0x8e>
 8019788:	f000 f8e0 	bl	801994c <fabsf>
 801978c:	4b5e      	ldr	r3, [pc, #376]	; (8019908 <atanf+0x1d4>)
 801978e:	4604      	mov	r4, r0
 8019790:	429d      	cmp	r5, r3
 8019792:	dc7c      	bgt.n	801988e <atanf+0x15a>
 8019794:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8019798:	429d      	cmp	r5, r3
 801979a:	dc67      	bgt.n	801986c <atanf+0x138>
 801979c:	4601      	mov	r1, r0
 801979e:	f7e7 fa03 	bl	8000ba8 <__addsf3>
 80197a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80197a6:	f7e7 f9fd 	bl	8000ba4 <__aeabi_fsub>
 80197aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80197ae:	4605      	mov	r5, r0
 80197b0:	4620      	mov	r0, r4
 80197b2:	f7e7 f9f9 	bl	8000ba8 <__addsf3>
 80197b6:	4601      	mov	r1, r0
 80197b8:	4628      	mov	r0, r5
 80197ba:	f7e7 fbb1 	bl	8000f20 <__aeabi_fdiv>
 80197be:	2600      	movs	r6, #0
 80197c0:	4604      	mov	r4, r0
 80197c2:	4621      	mov	r1, r4
 80197c4:	4620      	mov	r0, r4
 80197c6:	f7e7 faf7 	bl	8000db8 <__aeabi_fmul>
 80197ca:	4601      	mov	r1, r0
 80197cc:	4680      	mov	r8, r0
 80197ce:	f7e7 faf3 	bl	8000db8 <__aeabi_fmul>
 80197d2:	4605      	mov	r5, r0
 80197d4:	494d      	ldr	r1, [pc, #308]	; (801990c <atanf+0x1d8>)
 80197d6:	f7e7 faef 	bl	8000db8 <__aeabi_fmul>
 80197da:	494d      	ldr	r1, [pc, #308]	; (8019910 <atanf+0x1dc>)
 80197dc:	f7e7 f9e4 	bl	8000ba8 <__addsf3>
 80197e0:	4629      	mov	r1, r5
 80197e2:	f7e7 fae9 	bl	8000db8 <__aeabi_fmul>
 80197e6:	494b      	ldr	r1, [pc, #300]	; (8019914 <atanf+0x1e0>)
 80197e8:	f7e7 f9de 	bl	8000ba8 <__addsf3>
 80197ec:	4629      	mov	r1, r5
 80197ee:	f7e7 fae3 	bl	8000db8 <__aeabi_fmul>
 80197f2:	4949      	ldr	r1, [pc, #292]	; (8019918 <atanf+0x1e4>)
 80197f4:	f7e7 f9d8 	bl	8000ba8 <__addsf3>
 80197f8:	4629      	mov	r1, r5
 80197fa:	f7e7 fadd 	bl	8000db8 <__aeabi_fmul>
 80197fe:	4947      	ldr	r1, [pc, #284]	; (801991c <atanf+0x1e8>)
 8019800:	f7e7 f9d2 	bl	8000ba8 <__addsf3>
 8019804:	4629      	mov	r1, r5
 8019806:	f7e7 fad7 	bl	8000db8 <__aeabi_fmul>
 801980a:	4945      	ldr	r1, [pc, #276]	; (8019920 <atanf+0x1ec>)
 801980c:	f7e7 f9cc 	bl	8000ba8 <__addsf3>
 8019810:	4641      	mov	r1, r8
 8019812:	f7e7 fad1 	bl	8000db8 <__aeabi_fmul>
 8019816:	4943      	ldr	r1, [pc, #268]	; (8019924 <atanf+0x1f0>)
 8019818:	4680      	mov	r8, r0
 801981a:	4628      	mov	r0, r5
 801981c:	f7e7 facc 	bl	8000db8 <__aeabi_fmul>
 8019820:	4941      	ldr	r1, [pc, #260]	; (8019928 <atanf+0x1f4>)
 8019822:	f7e7 f9bf 	bl	8000ba4 <__aeabi_fsub>
 8019826:	4629      	mov	r1, r5
 8019828:	f7e7 fac6 	bl	8000db8 <__aeabi_fmul>
 801982c:	493f      	ldr	r1, [pc, #252]	; (801992c <atanf+0x1f8>)
 801982e:	f7e7 f9b9 	bl	8000ba4 <__aeabi_fsub>
 8019832:	4629      	mov	r1, r5
 8019834:	f7e7 fac0 	bl	8000db8 <__aeabi_fmul>
 8019838:	493d      	ldr	r1, [pc, #244]	; (8019930 <atanf+0x1fc>)
 801983a:	f7e7 f9b3 	bl	8000ba4 <__aeabi_fsub>
 801983e:	4629      	mov	r1, r5
 8019840:	f7e7 faba 	bl	8000db8 <__aeabi_fmul>
 8019844:	493b      	ldr	r1, [pc, #236]	; (8019934 <atanf+0x200>)
 8019846:	f7e7 f9ad 	bl	8000ba4 <__aeabi_fsub>
 801984a:	4629      	mov	r1, r5
 801984c:	f7e7 fab4 	bl	8000db8 <__aeabi_fmul>
 8019850:	4601      	mov	r1, r0
 8019852:	4640      	mov	r0, r8
 8019854:	f7e7 f9a8 	bl	8000ba8 <__addsf3>
 8019858:	4621      	mov	r1, r4
 801985a:	f7e7 faad 	bl	8000db8 <__aeabi_fmul>
 801985e:	1c73      	adds	r3, r6, #1
 8019860:	4601      	mov	r1, r0
 8019862:	d133      	bne.n	80198cc <atanf+0x198>
 8019864:	4620      	mov	r0, r4
 8019866:	f7e7 f99d 	bl	8000ba4 <__aeabi_fsub>
 801986a:	e772      	b.n	8019752 <atanf+0x1e>
 801986c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8019870:	f7e7 f998 	bl	8000ba4 <__aeabi_fsub>
 8019874:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8019878:	4605      	mov	r5, r0
 801987a:	4620      	mov	r0, r4
 801987c:	f7e7 f994 	bl	8000ba8 <__addsf3>
 8019880:	4601      	mov	r1, r0
 8019882:	4628      	mov	r0, r5
 8019884:	f7e7 fb4c 	bl	8000f20 <__aeabi_fdiv>
 8019888:	2601      	movs	r6, #1
 801988a:	4604      	mov	r4, r0
 801988c:	e799      	b.n	80197c2 <atanf+0x8e>
 801988e:	4b2a      	ldr	r3, [pc, #168]	; (8019938 <atanf+0x204>)
 8019890:	429d      	cmp	r5, r3
 8019892:	dc14      	bgt.n	80198be <atanf+0x18a>
 8019894:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8019898:	f7e7 f984 	bl	8000ba4 <__aeabi_fsub>
 801989c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80198a0:	4605      	mov	r5, r0
 80198a2:	4620      	mov	r0, r4
 80198a4:	f7e7 fa88 	bl	8000db8 <__aeabi_fmul>
 80198a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80198ac:	f7e7 f97c 	bl	8000ba8 <__addsf3>
 80198b0:	4601      	mov	r1, r0
 80198b2:	4628      	mov	r0, r5
 80198b4:	f7e7 fb34 	bl	8000f20 <__aeabi_fdiv>
 80198b8:	2602      	movs	r6, #2
 80198ba:	4604      	mov	r4, r0
 80198bc:	e781      	b.n	80197c2 <atanf+0x8e>
 80198be:	4601      	mov	r1, r0
 80198c0:	481e      	ldr	r0, [pc, #120]	; (801993c <atanf+0x208>)
 80198c2:	f7e7 fb2d 	bl	8000f20 <__aeabi_fdiv>
 80198c6:	2603      	movs	r6, #3
 80198c8:	4604      	mov	r4, r0
 80198ca:	e77a      	b.n	80197c2 <atanf+0x8e>
 80198cc:	4b1c      	ldr	r3, [pc, #112]	; (8019940 <atanf+0x20c>)
 80198ce:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80198d2:	f7e7 f967 	bl	8000ba4 <__aeabi_fsub>
 80198d6:	4621      	mov	r1, r4
 80198d8:	f7e7 f964 	bl	8000ba4 <__aeabi_fsub>
 80198dc:	4b19      	ldr	r3, [pc, #100]	; (8019944 <atanf+0x210>)
 80198de:	4601      	mov	r1, r0
 80198e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80198e4:	f7e7 f95e 	bl	8000ba4 <__aeabi_fsub>
 80198e8:	2f00      	cmp	r7, #0
 80198ea:	4604      	mov	r4, r0
 80198ec:	f6bf af37 	bge.w	801975e <atanf+0x2a>
 80198f0:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80198f4:	e733      	b.n	801975e <atanf+0x2a>
 80198f6:	4c14      	ldr	r4, [pc, #80]	; (8019948 <atanf+0x214>)
 80198f8:	e731      	b.n	801975e <atanf+0x2a>
 80198fa:	bf00      	nop
 80198fc:	3fc90fdb 	.word	0x3fc90fdb
 8019900:	3edfffff 	.word	0x3edfffff
 8019904:	7149f2ca 	.word	0x7149f2ca
 8019908:	3f97ffff 	.word	0x3f97ffff
 801990c:	3c8569d7 	.word	0x3c8569d7
 8019910:	3d4bda59 	.word	0x3d4bda59
 8019914:	3d886b35 	.word	0x3d886b35
 8019918:	3dba2e6e 	.word	0x3dba2e6e
 801991c:	3e124925 	.word	0x3e124925
 8019920:	3eaaaaab 	.word	0x3eaaaaab
 8019924:	bd15a221 	.word	0xbd15a221
 8019928:	3d6ef16b 	.word	0x3d6ef16b
 801992c:	3d9d8795 	.word	0x3d9d8795
 8019930:	3de38e38 	.word	0x3de38e38
 8019934:	3e4ccccd 	.word	0x3e4ccccd
 8019938:	401bffff 	.word	0x401bffff
 801993c:	bf800000 	.word	0xbf800000
 8019940:	0801a988 	.word	0x0801a988
 8019944:	0801a978 	.word	0x0801a978
 8019948:	bfc90fdb 	.word	0xbfc90fdb

0801994c <fabsf>:
 801994c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019950:	4770      	bx	lr

08019952 <finitef>:
 8019952:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019956:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801995a:	bfac      	ite	ge
 801995c:	2000      	movge	r0, #0
 801995e:	2001      	movlt	r0, #1
 8019960:	4770      	bx	lr
	...

08019964 <floorf>:
 8019964:	b570      	push	{r4, r5, r6, lr}
 8019966:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 801996a:	0df5      	lsrs	r5, r6, #23
 801996c:	3d7f      	subs	r5, #127	; 0x7f
 801996e:	2d16      	cmp	r5, #22
 8019970:	4601      	mov	r1, r0
 8019972:	4604      	mov	r4, r0
 8019974:	dc26      	bgt.n	80199c4 <floorf+0x60>
 8019976:	2d00      	cmp	r5, #0
 8019978:	da0e      	bge.n	8019998 <floorf+0x34>
 801997a:	4917      	ldr	r1, [pc, #92]	; (80199d8 <floorf+0x74>)
 801997c:	f7e7 f914 	bl	8000ba8 <__addsf3>
 8019980:	2100      	movs	r1, #0
 8019982:	f7e7 fbd5 	bl	8001130 <__aeabi_fcmpgt>
 8019986:	b128      	cbz	r0, 8019994 <floorf+0x30>
 8019988:	2c00      	cmp	r4, #0
 801998a:	da23      	bge.n	80199d4 <floorf+0x70>
 801998c:	4b13      	ldr	r3, [pc, #76]	; (80199dc <floorf+0x78>)
 801998e:	2e00      	cmp	r6, #0
 8019990:	bf18      	it	ne
 8019992:	461c      	movne	r4, r3
 8019994:	4621      	mov	r1, r4
 8019996:	e01b      	b.n	80199d0 <floorf+0x6c>
 8019998:	4e11      	ldr	r6, [pc, #68]	; (80199e0 <floorf+0x7c>)
 801999a:	412e      	asrs	r6, r5
 801999c:	4230      	tst	r0, r6
 801999e:	d017      	beq.n	80199d0 <floorf+0x6c>
 80199a0:	490d      	ldr	r1, [pc, #52]	; (80199d8 <floorf+0x74>)
 80199a2:	f7e7 f901 	bl	8000ba8 <__addsf3>
 80199a6:	2100      	movs	r1, #0
 80199a8:	f7e7 fbc2 	bl	8001130 <__aeabi_fcmpgt>
 80199ac:	2800      	cmp	r0, #0
 80199ae:	d0f1      	beq.n	8019994 <floorf+0x30>
 80199b0:	2c00      	cmp	r4, #0
 80199b2:	bfbe      	ittt	lt
 80199b4:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80199b8:	fa43 f505 	asrlt.w	r5, r3, r5
 80199bc:	1964      	addlt	r4, r4, r5
 80199be:	ea24 0406 	bic.w	r4, r4, r6
 80199c2:	e7e7      	b.n	8019994 <floorf+0x30>
 80199c4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80199c8:	d302      	bcc.n	80199d0 <floorf+0x6c>
 80199ca:	f7e7 f8ed 	bl	8000ba8 <__addsf3>
 80199ce:	4601      	mov	r1, r0
 80199d0:	4608      	mov	r0, r1
 80199d2:	bd70      	pop	{r4, r5, r6, pc}
 80199d4:	2400      	movs	r4, #0
 80199d6:	e7dd      	b.n	8019994 <floorf+0x30>
 80199d8:	7149f2ca 	.word	0x7149f2ca
 80199dc:	bf800000 	.word	0xbf800000
 80199e0:	007fffff 	.word	0x007fffff

080199e4 <rintf>:
 80199e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80199e6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80199ea:	0dd5      	lsrs	r5, r2, #23
 80199ec:	3d7f      	subs	r5, #127	; 0x7f
 80199ee:	2d16      	cmp	r5, #22
 80199f0:	4601      	mov	r1, r0
 80199f2:	dc3b      	bgt.n	8019a6c <rintf+0x88>
 80199f4:	b1e2      	cbz	r2, 8019a30 <rintf+0x4c>
 80199f6:	2d00      	cmp	r5, #0
 80199f8:	4602      	mov	r2, r0
 80199fa:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 80199fe:	da1a      	bge.n	8019a36 <rintf+0x52>
 8019a00:	4a1e      	ldr	r2, [pc, #120]	; (8019a7c <rintf+0x98>)
 8019a02:	f3c0 0116 	ubfx	r1, r0, #0, #23
 8019a06:	4249      	negs	r1, r1
 8019a08:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8019a0c:	0d03      	lsrs	r3, r0, #20
 8019a0e:	0a49      	lsrs	r1, r1, #9
 8019a10:	051b      	lsls	r3, r3, #20
 8019a12:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8019a16:	4319      	orrs	r1, r3
 8019a18:	4628      	mov	r0, r5
 8019a1a:	f7e7 f8c5 	bl	8000ba8 <__addsf3>
 8019a1e:	9001      	str	r0, [sp, #4]
 8019a20:	4629      	mov	r1, r5
 8019a22:	9801      	ldr	r0, [sp, #4]
 8019a24:	f7e7 f8be 	bl	8000ba4 <__aeabi_fsub>
 8019a28:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 8019a2c:	ea41 71c4 	orr.w	r1, r1, r4, lsl #31
 8019a30:	4608      	mov	r0, r1
 8019a32:	b003      	add	sp, #12
 8019a34:	bd30      	pop	{r4, r5, pc}
 8019a36:	4b12      	ldr	r3, [pc, #72]	; (8019a80 <rintf+0x9c>)
 8019a38:	412b      	asrs	r3, r5
 8019a3a:	4218      	tst	r0, r3
 8019a3c:	d0f8      	beq.n	8019a30 <rintf+0x4c>
 8019a3e:	0859      	lsrs	r1, r3, #1
 8019a40:	4208      	tst	r0, r1
 8019a42:	d006      	beq.n	8019a52 <rintf+0x6e>
 8019a44:	ea20 0201 	bic.w	r2, r0, r1
 8019a48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019a4c:	fa41 f505 	asr.w	r5, r1, r5
 8019a50:	432a      	orrs	r2, r5
 8019a52:	4b0a      	ldr	r3, [pc, #40]	; (8019a7c <rintf+0x98>)
 8019a54:	4611      	mov	r1, r2
 8019a56:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	f7e7 f8a4 	bl	8000ba8 <__addsf3>
 8019a60:	9001      	str	r0, [sp, #4]
 8019a62:	9801      	ldr	r0, [sp, #4]
 8019a64:	4621      	mov	r1, r4
 8019a66:	f7e7 f89d 	bl	8000ba4 <__aeabi_fsub>
 8019a6a:	e004      	b.n	8019a76 <rintf+0x92>
 8019a6c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019a70:	d3de      	bcc.n	8019a30 <rintf+0x4c>
 8019a72:	f7e7 f899 	bl	8000ba8 <__addsf3>
 8019a76:	4601      	mov	r1, r0
 8019a78:	e7da      	b.n	8019a30 <rintf+0x4c>
 8019a7a:	bf00      	nop
 8019a7c:	0801a998 	.word	0x0801a998
 8019a80:	007fffff 	.word	0x007fffff

08019a84 <scalbnf>:
 8019a84:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8019a88:	b510      	push	{r4, lr}
 8019a8a:	4602      	mov	r2, r0
 8019a8c:	460c      	mov	r4, r1
 8019a8e:	4601      	mov	r1, r0
 8019a90:	d027      	beq.n	8019ae2 <scalbnf+0x5e>
 8019a92:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019a96:	d303      	bcc.n	8019aa0 <scalbnf+0x1c>
 8019a98:	f7e7 f886 	bl	8000ba8 <__addsf3>
 8019a9c:	4602      	mov	r2, r0
 8019a9e:	e020      	b.n	8019ae2 <scalbnf+0x5e>
 8019aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019aa4:	d215      	bcs.n	8019ad2 <scalbnf+0x4e>
 8019aa6:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8019aaa:	f7e7 f985 	bl	8000db8 <__aeabi_fmul>
 8019aae:	4b18      	ldr	r3, [pc, #96]	; (8019b10 <scalbnf+0x8c>)
 8019ab0:	4602      	mov	r2, r0
 8019ab2:	429c      	cmp	r4, r3
 8019ab4:	db22      	blt.n	8019afc <scalbnf+0x78>
 8019ab6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8019aba:	3b19      	subs	r3, #25
 8019abc:	4423      	add	r3, r4
 8019abe:	2bfe      	cmp	r3, #254	; 0xfe
 8019ac0:	dd09      	ble.n	8019ad6 <scalbnf+0x52>
 8019ac2:	4611      	mov	r1, r2
 8019ac4:	4813      	ldr	r0, [pc, #76]	; (8019b14 <scalbnf+0x90>)
 8019ac6:	f000 f832 	bl	8019b2e <copysignf>
 8019aca:	4912      	ldr	r1, [pc, #72]	; (8019b14 <scalbnf+0x90>)
 8019acc:	f7e7 f974 	bl	8000db8 <__aeabi_fmul>
 8019ad0:	e7e4      	b.n	8019a9c <scalbnf+0x18>
 8019ad2:	0ddb      	lsrs	r3, r3, #23
 8019ad4:	e7f2      	b.n	8019abc <scalbnf+0x38>
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	dd05      	ble.n	8019ae6 <scalbnf+0x62>
 8019ada:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8019ade:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8019ae2:	4610      	mov	r0, r2
 8019ae4:	bd10      	pop	{r4, pc}
 8019ae6:	f113 0f16 	cmn.w	r3, #22
 8019aea:	da09      	bge.n	8019b00 <scalbnf+0x7c>
 8019aec:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019af0:	429c      	cmp	r4, r3
 8019af2:	4611      	mov	r1, r2
 8019af4:	dce6      	bgt.n	8019ac4 <scalbnf+0x40>
 8019af6:	4808      	ldr	r0, [pc, #32]	; (8019b18 <scalbnf+0x94>)
 8019af8:	f000 f819 	bl	8019b2e <copysignf>
 8019afc:	4906      	ldr	r1, [pc, #24]	; (8019b18 <scalbnf+0x94>)
 8019afe:	e7e5      	b.n	8019acc <scalbnf+0x48>
 8019b00:	3319      	adds	r3, #25
 8019b02:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8019b06:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8019b0a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8019b0e:	e7dd      	b.n	8019acc <scalbnf+0x48>
 8019b10:	ffff3cb0 	.word	0xffff3cb0
 8019b14:	7149f2ca 	.word	0x7149f2ca
 8019b18:	0da24260 	.word	0x0da24260

08019b1c <copysign>:
 8019b1c:	b530      	push	{r4, r5, lr}
 8019b1e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019b22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019b26:	ea42 0503 	orr.w	r5, r2, r3
 8019b2a:	4629      	mov	r1, r5
 8019b2c:	bd30      	pop	{r4, r5, pc}

08019b2e <copysignf>:
 8019b2e:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019b32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019b36:	4308      	orrs	r0, r1
 8019b38:	4770      	bx	lr
	...

08019b3c <_init>:
 8019b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b3e:	bf00      	nop
 8019b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b42:	bc08      	pop	{r3}
 8019b44:	469e      	mov	lr, r3
 8019b46:	4770      	bx	lr

08019b48 <_fini>:
 8019b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b4a:	bf00      	nop
 8019b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b4e:	bc08      	pop	{r3}
 8019b50:	469e      	mov	lr, r3
 8019b52:	4770      	bx	lr
