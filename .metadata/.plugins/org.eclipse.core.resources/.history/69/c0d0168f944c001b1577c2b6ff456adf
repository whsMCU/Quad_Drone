/*
 * uart.c
 *
 *  Created on: 2020. 12. 8.
 *      Author: baram
 */


#include "uart.h"
#include "ring_buffer.h"

#define _USE_UART1
#define _USE_UART2

bool log_err = true;

static bool is_open[UART_MAX_CH];

static Queue_t ring_buffer[UART_MAX_CH];
static uint8_t u1_rx_buf[MAX_SIZE];
static uint8_t u2_rx_buf[MAX_SIZE];


bool uartInit(void)
{
  for (int i=0; i<UART_MAX_CH; i++)
  {
    is_open[i] = false;
  }

  return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
  bool ret = false;


  switch(ch)
  {
    case _DEF_UART1:


    	QueueCreate(&ring_buffer[ch], &u1_rx_buf[0], MAX_SIZE);


      break;

    case _DEF_UART2:


      QueueCreate(&ring_buffer[ch], &u2_rx_buf[0], MAX_SIZE);


      break;
  }

  return ret;
}

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
  {
    case _DEF_UART1:

      break;

    case _DEF_UART2:

      break;
  }

  return ret;
}

uint8_t uartRead(uint8_t ch)
{
  uint8_t ret = 0;

  switch(ch)
  {
    case _DEF_UART1:
    	Q_read(&ring_buffer[_DEF_UART1], &ret, 1);
      break;

    case _DEF_UART2:
    	Q_read(&ring_buffer[_DEF_UART2], &ret, 1);
      break;
  }

  return ret;
}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
  uint32_t ret = 0;

  switch(ch)
  {
    case _DEF_UART1:

      break;

    case _DEF_UART2:

      break;
  }

  return ret;
}



uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
  char buf[MAX_SIZE];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
  len = vsnprintf(buf, MAX_SIZE, fmt, args);

  ret = uartWrite(ch, (uint8_t *)buf, len);

  va_end(args);


  return ret;
}



uint32_t uartGetBaud(uint8_t ch)
{
  uint32_t ret = 0;


  switch(ch)
  {
    case _DEF_UART1:

      break;

    case _DEF_UART2:

      break;
  }

  return ret;
}

bool uartSetBaud(uint8_t ch, uint32_t baud)
{
	bool ret = false;

	switch(ch)
	{
		case _DEF_UART1:

			break;

		case _DEF_UART2:

			break;
	}

	return ret;
}
