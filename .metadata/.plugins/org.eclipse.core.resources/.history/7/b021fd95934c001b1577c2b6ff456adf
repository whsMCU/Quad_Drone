/*
 * uart.c
 *
 *  Created on: 2020. 12. 8.
 *      Author: baram
 */


#include "uart.h"
#include "ring_buffer.h"


static bool is_open[UART_MAX_CH];

static Queue_t ring_buffer[UART_MAX_CH];
static uint8_t u1_rx_buf[MAX_SIZE];
static uint8_t u2_rx_buf[MAX_SIZE];


UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_tx;
DMA_HandleTypeDef hdma_usart2_rx;

static void MX_DMA_Init(void);


bool uartInit(void)
{
  for (int i=0; i<UART_MAX_CH; i++)
  {
    is_open[i] = false;
  }

  MX_DMA_Init();
  return true;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
  bool ret = false;


  switch(ch)
  {
    case _DEF_UART1:
    	huart1.Instance = USART1;
    	huart1.Init.BaudRate = baud;
    	huart1.Init.WordLength = UART_WORDLENGTH_8B;
      huart1.Init.StopBits = UART_STOPBITS_1;
    	huart1.Init.Parity = UART_PARITY_NONE;
    	huart1.Init.Mode = UART_MODE_TX_RX;
    	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    	huart1.Init.OverSampling = UART_OVERSAMPLING_16;

    	QueueCreate(&ring_buffer[ch], &u1_rx_buf[0], MAX_SIZE);

    	if (HAL_UART_Init(&huart1) != HAL_OK)
    	{
    	  Error_Handler();
    	}
    	else
    	{
    		ret = true;
        is_open[ch] = true;
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&u1_rx_buf[0], MAX_SIZE) != HAL_OK)
        {
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart1_rx.Instance->CNDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
    	}
      break;

    case _DEF_UART2:
      huart2.Instance = USART2;
      huart2.Init.BaudRate = baud;
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
      huart2.Init.StopBits = UART_STOPBITS_1;
      huart2.Init.Parity = UART_PARITY_NONE;
      huart2.Init.Mode = UART_MODE_TX_RX;
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;

      QueueCreate(&ring_buffer[ch], &u2_rx_buf[0], MAX_SIZE);

      if (HAL_UART_Init(&huart2) != HAL_OK)
      {
        ret = false;
      }
      else
      {
        ret = true;
        is_open[ch] = true;
        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&u2_rx_buf[0], MAX_SIZE) != HAL_OK)
        {
          ret = false;
        }
        ring_buffer[ch].head  = ring_buffer[ch].size - hdma_usart2_rx.Instance->CNDTR;
        ring_buffer[ch].tail = ring_buffer[ch].head;
      }
      break;
  }

  return ret;
}

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
  {
    case _DEF_UART1:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_usart1_rx.Instance->CNDTR);
      ret = QueueAvailable(&ring_buffer[ch]);
      break;

    case _DEF_UART2:
    	ring_buffer[ch].head = (ring_buffer[ch].size - hdma_usart2_rx.Instance->CNDTR);
      ret = QueueAvailable(&ring_buffer[ch]);
      break;
  }

  return ret;
}

uint8_t uartRead(uint8_t ch)
{
  uint8_t ret = 0;

  switch(ch)
  {
    case _DEF_UART1:
    	Q_read(&ring_buffer[_DEF_UART1], &ret, 1);
      break;

    case _DEF_UART2:
    	Q_read(&ring_buffer[_DEF_UART2], &ret, 1);
      break;
  }

  return ret;
}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
  uint32_t ret = 0;
  HAL_StatusTypeDef status;

  switch(ch)
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
      if (status == HAL_OK)
      {
        ret = length;
      }
      break;

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart2, p_data, length, 100);
      if (status == HAL_OK)
      {
        ret = length;
      }
      break;
  }

  return ret;
}

uint32_t uartWriteIT(uint8_t ch, uint8_t *p_data, uint32_t length)
{
  uint32_t ret = 0;
  HAL_StatusTypeDef status;

  switch(ch)
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit_IT(&huart1, p_data, length);
      if (status == HAL_OK)
      {
        ret = length;
      }
      break;

    case _DEF_UART2:
      status = HAL_UART_Transmit_IT(&huart2, p_data, length);
      if (status == HAL_OK)
      {
        ret = length;
      }
      break;
  }

  return ret;
}

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
  char buf[MAX_SIZE];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
  len = vsnprintf(buf, MAX_SIZE, fmt, args);

  ret = uartWrite(ch, (uint8_t *)buf, len);

  va_end(args);


  return ret;
}

uint32_t uartPrintf_IT(uint8_t ch, char *fmt, ...)
{
  char buf[MAX_SIZE];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
  len = vsnprintf(buf, MAX_SIZE, fmt, args);

  ret = uartWriteIT(ch, (uint8_t *)buf, len);

  va_end(args);


  return ret;
}

uint32_t uartGetBaud(uint8_t ch)
{
  uint32_t ret = 0;


  switch(ch)
  {
    case _DEF_UART1:
      ret = huart1.Init.BaudRate;
      break;

    case _DEF_UART2:
      ret = huart2.Init.BaudRate;
      break;
  }

  return ret;
}

bool uartSetBaud(uint8_t ch, uint32_t baud)
{
	bool ret = false;

	switch(ch)
	{
		case _DEF_UART1:
			huart1.Init.BaudRate = baud;
    	if (HAL_UART_Init(&huart1) != HAL_OK)
    	{
    	  Error_Handler();
    	}else
    	{
    		ret = true;
    	}
			break;

		case _DEF_UART2:
			huart2.Init.BaudRate = baud;
    	if (HAL_UART_Init(&huart2) != HAL_OK)
    	{
    	  Error_Handler();
    	}else
    	{
    		ret = true;
    	}
			break;
	}

	return ret;
}
